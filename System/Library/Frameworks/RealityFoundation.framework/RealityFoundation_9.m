uint64_t __SceneImportOperation.setGenerateDecimatedMesh(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37340]);
}

uint64_t __SceneImportOperation.setReorderVertexCaching(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37378]);
}

uint64_t __SceneImportOperation.__ImportedScene.sceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t __SceneImportOperation.__ImportedScene.sceneName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for __SceneImportOperation.__ImportedScene(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __SceneImportOperation.__ImportedScene.sceneAsset.getter()
{
  type metadata accessor for __SceneImportOperation.__ImportedScene(0);

  return swift_retain();
}

uint64_t __SceneImportOperation.__ImportedScene.sceneActive.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __SceneImportOperation.__ImportedScene(0) + 28));
}

int *__SceneImportOperation.__ImportedScene.init(sceneIdentifier:sceneName:sceneAsset:sceneActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a6, a1, v12);
  result = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  v14 = (void *)(a6 + result[5]);
  void *v14 = a2;
  v14[1] = a3;
  *(void *)(a6 + result[6]) = a4;
  *(unsigned char *)(a6 + result[7]) = a5;
  return result;
}

uint64_t __SceneImportOperation.__url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = RESceneImportOperationCopySourceURL();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a1;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a1;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t __SceneImportOperation.__importedScenes.getter()
{
  uint64_t v0 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v1 = *((void *)v0 - 1);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  uint64_t v5 = *((void *)v4 - 1);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __SceneImportOperation.importedScenes.getter();
  int64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v11 = *(void *)(v1 + 72);
    v22[1] = v8;
    uint64_t v23 = v11;
    do
    {
      outlined init with copy of __SceneImportOperation.ImportedScene(v10, (uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
      uint64_t v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v3, v12);
      v13 = &v3[v0[5]];
      uint64_t v15 = *(void *)v13;
      uint64_t v14 = *((void *)v13 + 1);
      uint64_t v16 = *(void *)&v3[v0[6]];
      LOBYTE(v13) = v3[v0[7]];
      v17 = &v7[v4[5]];
      *(void *)v17 = v15;
      *((void *)v17 + 1) = v14;
      *(void *)&v7[v4[6]] = v16;
      v7[v4[7]] = (char)v13;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __SceneImportOperation.ImportedScene((uint64_t)v3, type metadata accessor for __SceneImportOperation.ImportedScene);
      uint64_t v18 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v24;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v24;
      }
      *(void *)(v18 + 16) = v20 + 1;
      outlined init with take of __SceneImportOperation.__ImportedScene((uint64_t)v7, v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v20, type metadata accessor for __SceneImportOperation.__ImportedScene);
      v10 += v23;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v18;
}

void __SceneImportOperation.__coreOperation.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

uint64_t __SceneImportOperation.deinit()
{
  RERelease();
  return v0;
}

uint64_t __SceneImportOperation.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t __SceneImportOperation.init(core:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 16) = a1;
  uint64_t ServiceLocator = RESceneImportOperationGetServiceLocator();
  uint64_t SwiftObject = REServiceLocatorGetSwiftObject();
  if (SwiftObject)
  {
    uint64_t v5 = SwiftObject;
    swift_retain();
LABEL_5:
    v10[4] = partial apply for closure #1 in __SceneImportOperation.init(core:);
    v10[5] = v5;
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed USKNode, @guaranteed USKScene, @unowned OpaquePointer, @in_guaranteed UUID, @guaranteed [String : String], @guaranteed [String : UUID], @guaranteed String) -> (@owned Error?);
    v10[3] = &block_descriptor_45;
    int64_t v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    RESceneImportOperationSetSceneCreateCompletionHandler();
    _Block_release(v9);
    swift_release();
    return v2;
  }
  uint64_t result = MEMORY[0x22A692270](ServiceLocator);
  if (result)
  {
    uint64_t v7 = result;
    type metadata accessor for __Engine();
    swift_allocObject();
    id v8 = __Engine.init(coreEngine:)(v7);
    type metadata accessor for __ServiceLocator();
    swift_allocObject();
    uint64_t v5 = specialized __ServiceLocator.init(engine:)((uint64_t)v8);
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToREScene2(op:uskNode:uskScene:reScene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:serviceLocator:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9, uint64_t a10)
{
  v25[3] = MEMORY[0x263F8DD08];
  v25[0] = a4;
  outlined init with copy of Any((uint64_t)v25, (uint64_t)v24);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  id v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v15)
  {
    uint64_t v16 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v16 = Scene.init(coreScene:)(v23);
  }
  uint64_t v17 = v16;
  id v18 = (id)RESceneImportGetUSDActionAssets();
  uint64_t v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v20 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(a2, a3, v17, a5, a6, a7, v19, a8, a9, a10);
  swift_release();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t __SceneImportOperation.setCompressTextures(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37330]);
}

uint64_t __SceneImportOperation.setPlayDefaultAnimationsImmediately(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37360]);
}

uint64_t __SceneImportOperation.setEnableAnimationInterpolation(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37338]);
}

uint64_t __SceneImportOperation.setMaterialDefinitionPath(_:)(uint64_t a1, uint64_t a2)
{
  return __SceneImportOperation.setRootSceneAssetPath(_:)(a1, a2, MEMORY[0x263F37350]);
}

uint64_t __SceneImportOperation.setRootSceneAssetPath(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = String.utf8CString.getter();
  a3(v5, v6 + 32);
  swift_release();

  return swift_retain();
}

uint64_t __SceneImportOperation.setApplyUnitConversionScale(_:)()
{
  RESceneImportOperationSetUnitType();

  return swift_retain();
}

uint64_t __SceneImportOperation.setRetainSubdivisionSurfaceInfo(_:)(char a1)
{
  return __SceneImportOperation.setIsolateFromEngine(_:)(a1, MEMORY[0x263F37368]);
}

uint64_t __SceneImportOperation.setIsolateFromEngine(_:)(char a1, void (*a2)(void, void))
{
  a2(*(void *)(v2 + 16), a1 & 1);

  return swift_retain();
}

void static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, id a5, uint64_t a6, unint64_t *a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v166 = a8;
  v167 = a7;
  uint64_t v169 = a6;
  uint64_t v165 = a10;
  v164 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  MEMORY[0x270FA5388](v16 - 8);
  id v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v159 = *(void *)(v158 - 8);
  MEMORY[0x270FA5388](v158);
  uint64_t v156 = (uint64_t)&v142 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v157 = (uint64_t)&v142 - v21;
  v176[0] = a1;
  v176[1] = a2;
  v176[2] = a3;
  v176[3] = a4;
  v176[4] = a5;
  v176[5] = a6;
  id v22 = a1;
  id v168 = a2;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)MEMORY[0x22A688A50](0xD00000000000001ALL, 0x800000022835EBD0);
  uint64_t v24 = &off_264838000;
  CGImageRef v25 = (CGImageRef)objc_msgSend(v22, sel_property_, v23);

  id v163 = v22;
  if (!v25) {
    goto LABEL_64;
  }
  id v26 = [(CGImage *)v25 stringValue];
  if (!v26) {
    goto LABEL_63;
  }
  v27 = v26;
  v28 = v18;
  id v161 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  id v31 = objc_msgSend(v22, sel_path);
  id v32 = objc_msgSend(v31, sel_stringValue);

  if (!v32)
  {

    swift_bridgeObjectRelease();
    id v162 = 0;
    id v18 = v28;
    uint64_t v24 = &off_264838000;
    goto LABEL_65;
  }
  id v162 = v30;
  CGImageRef v155 = v25;
  v160 = v28;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v35 = v34;

  uint64_t v172 = v33;
  unint64_t v173 = v35;
  uint64_t v170 = 91;
  unint64_t v171 = 0xE100000000000000;
  uint64_t v174 = 0;
  unint64_t v175 = 0xE000000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v172 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v173 = v36;
  uint64_t v170 = 93;
  unint64_t v171 = 0xE100000000000000;
  uint64_t v174 = 0;
  unint64_t v175 = 0xE000000000000000;
  uint64_t v37 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  if (!*(void *)(a4 + 16))
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v162 = 0;
    id v22 = v163;
    id v18 = v160;
    uint64_t v24 = &off_264838000;
    goto LABEL_65;
  }
  unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v39);
  id v18 = v160;
  if ((v41 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    id v162 = 0;
    id v22 = v163;
    uint64_t v24 = &off_264838000;
    goto LABEL_65;
  }
  v42 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v45 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v43, v44, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v45)
  {

    goto LABEL_19;
  }
  id v154 = (id)v45;
  id v22 = v163;
  CGImageRef v25 = v155;
  if (v161 == (id)0x656E616C70 && v162 == (id)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v46 = (void *)MEMORY[0x22A688A50](0xD000000000000024, 0x800000022835EC40);
    id v47 = objc_msgSend(v22, sel_property_, v46);

    if (v47)
    {
      id v48 = objc_msgSend(v47, sel_stringValue);
      if (v48)
      {
        v49 = v48;
        swift_bridgeObjectRelease();
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v51;

        if (v50 == 0x746E6F7A69726F68 && v52 == 0xEA00000000006C61)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        id v22 = v163;
        CGImageRef v25 = v155;
        REAnchoringComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        REAnchoringComponentSetDescriptorType();
        REAnchoringComponentSetDescriptorAlignment();
        REAnchoringComponentSetDescriptorClassification();
        REAnchoringComponentSetDescriptorBounds();
        swift_release();

        uint64_t v24 = &off_264838000;
        goto LABEL_59;
      }

      id v22 = v163;
    }
  }
  uint64_t v24 = &off_264838000;
  if (v161 == (id)0x6567616D69 && v162 == (id)0xE500000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v53 = (void *)MEMORY[0x22A688A50](0xD000000000000029, 0x800000022835EBF0);
    v54 = (char *)objc_msgSend(v22, sel_property_, v53);

    if (v54)
    {
      v55 = (char *)objc_msgSend(v54, sel_targetObject);
      if (!v55)
      {
LABEL_53:

        goto LABEL_54;
      }
      v56 = v55;
      self;
      v57 = (void *)swift_dynamicCastObjCClass();
      v58 = v56;
      if (v57)
      {
        v59 = v57;
        v152 = v58;
        v153 = v54;
        id v60 = objc_msgSend(v57, sel_typeName);
        id v61 = objc_msgSend(v60, sel_stringValue);

        if (v61)
        {
          uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v64 = v63;

          if (v62 == 0xD00000000000001ALL && v64 == 0x800000022835EC20)
          {
            swift_bridgeObjectRelease();
            id v22 = v163;
            id v18 = v160;
          }
          else
          {
            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            id v22 = v163;
            id v18 = v160;
            if ((v65 & 1) == 0)
            {
LABEL_48:
              v58 = v153;
              v54 = v152;
              CGImageRef v25 = v155;
              goto LABEL_52;
            }
          }
          v66 = (void *)MEMORY[0x22A688A50](0x6567616D69, 0xE500000000000000);
          id v67 = objc_msgSend(v59, sel_property_, v66);

          if (v67)
          {
            v68 = (char *)objc_msgSend(v67, sel_resourcePath);
            v54 = (char *)v67;
            CGImageRef v25 = v155;
            if (v68)
            {
              v160 = v68;
              v151 = v54;
              v69 = (void *)MEMORY[0x22A688A50](0x6C61636973796870, 0xED00006874646957);
              id v70 = objc_msgSend(v59, sel_property_, v69);

              if (v70)
              {
                swift_bridgeObjectRelease();
                objc_msgSend(v70, sel_floatValue);
                if (v71 >= 0.0) {
                  float v72 = v71 / 100.0;
                }
                else {
                  float v72 = 0.0;
                }
                id v73 = objc_msgSend(self, sel_resourceWithResourcePath_, v160);
                v74 = v153;
                if (v73)
                {
                  id v162 = v70;
                  id v161 = v73;
                  id v75 = objc_msgSend(v73, sel_dataNoCopy);
                  if (v75)
                  {
                    v76 = v75;
                    uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v79 = v78;

                    uint64_t v148 = v77;
                    unint64_t v149 = v79;
                    CGImageRef v80 = specialized static CGImageRef.image(with:)(v77, v79);
                    if (v80)
                    {
                      CGImageRef v147 = v80;
                      uint64_t v81 = v165 + 120;
                      swift_beginAccess();
                      outlined init with copy of __REAssetService(v81, (uint64_t)&v172);
                      if (one-time initialization token for instances != -1) {
                        swift_once();
                      }
                      uint64_t v146 = specialized AssetServiceScopedRegistry.instance(for:)(&v172);
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v172);
                      uint64_t v172 = 979661685;
                      unint64_t v173 = 0xE400000000000000;
                      v82._countAndFlagsBits = v166;
                      v82._object = v164;
                      String.append(_:)(v82);
                      uint64_t v84 = v172;
                      unint64_t v83 = v173;
                      id v85 = objc_msgSend(v160, sel_path);
                      v150._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v150._object = v86;

                      v87._countAndFlagsBits = 47;
                      v87._object = (void *)0xE100000000000000;
                      uint64_t v88 = v84;
                      unint64_t v89 = v83;
                      v90 = (void *)0xE000000000000000;
                      if (String.hasSuffix(_:)(v87))
                      {
                        uint64_t v91 = 0;
                      }
                      else
                      {
                        uint64_t v91 = 47;
                        v132._countAndFlagsBits = 47;
                        v132._object = (void *)0xE100000000000000;
                        if (String.hasPrefix(_:)(v132)) {
                          uint64_t v91 = 0;
                        }
                        else {
                          v90 = (void *)0xE100000000000000;
                        }
                      }
                      uint64_t v145 = v88;
                      uint64_t v172 = v88;
                      unint64_t v173 = v89;
                      unint64_t v144 = v89;
                      swift_bridgeObjectRetain();
                      v133._countAndFlagsBits = v91;
                      v133._object = v90;
                      String.append(_:)(v133);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRetain();
                      String.append(_:)(v150);
                      swift_bridgeObjectRelease();
                      uint64_t v134 = v172;
                      uint64_t v135 = v173;
                      uint64_t v142 = v172;
                      id v136 = objc_allocWithZone(MEMORY[0x263EF8FD8]);
                      id v137 = objc_msgSend(v136, sel_initWithCGImage_orientation_physicalWidth_, v147, 1, v72);
                      v138 = (void *)MEMORY[0x22A688A50](v134, v135);
                      objc_msgSend(v137, sel_setName_, v138);

                      uint64_t v139 = v146;
                      swift_beginAccess();
                      id v140 = v137;
                      swift_bridgeObjectRetain();
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v174 = *(void *)(v139 + 16);
                      *(void *)(v139 + 16) = 0x8000000000000000;
                      id v143 = v140;
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v140, v142, v135, isUniquelyReferenced_nonNull_native);
                      *(void *)(v139 + 16) = v174;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_endAccess();

                      swift_bridgeObjectRelease();
                      REAnchoringComponentGetComponentType();
                      REEntityGetOrAddComponentByClass();
                      REAnchoringComponentSetDescriptorType();
                      String.utf8CString.getter();
                      swift_bridgeObjectRelease();
                      REAnchoringComponentSetDescriptorResourceGroup();
                      swift_release();
                      String.utf8CString.getter();
                      swift_bridgeObjectRelease();
                      REAnchoringComponentSetDescriptorResourceName();

                      outlined consume of Data._Representation(v148, v149);
                      swift_release();
                      swift_release();
                      swift_release();

                      CGImageRef v25 = v147;
                      id v22 = v163;
                      goto LABEL_59;
                    }
                    swift_release();

                    outlined consume of Data._Representation(v148, v149);
LABEL_64:
                    id v162 = 0;
                    goto LABEL_65;
                  }

                  swift_release();
                }
                else
                {
                  swift_release();
                }
LABEL_63:

                goto LABEL_64;
              }

              v92 = v152;
              v93 = v151;
              v54 = v160;
            }
            else
            {
              v92 = v153;
              v93 = v152;
            }

            v58 = v93;
            goto LABEL_52;
          }
          goto LABEL_48;
        }
        v58 = v153;
        v54 = v152;
        id v18 = v160;
      }
LABEL_52:

      goto LABEL_53;
    }
  }
LABEL_54:
  if (v161 == (id)1701011814 && v162 == (id)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v94 & 1) == 0)
    {
      swift_release();
      goto LABEL_63;
    }
  }
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REAnchoringComponentSetDescriptorType();
  swift_release();
LABEL_59:

  id v95 = v22;
  v96 = specialized static __SceneImportOperation.searchForGravity(in:)(v95);
  id v162 = v95;
  if (v96)
  {
    v97 = v96;
    specialized static __SceneImportOperation.importGravity(decodeContext:gravityNode:)(v95, a3, a4, v96);
  }
  else
  {
  }
LABEL_65:
  v98 = (void *)MEMORY[0x22A688A50](0x7372656767697274, 0xE800000000000000);
  id v99 = objc_msgSend(v22, (SEL)v24[156], v98);

  if (!v99) {
    goto LABEL_76;
  }
  id v161 = a5;
  v160 = v18;
  id v100 = objc_msgSend(v99, sel_objectPathArray);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  unint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v101 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v102 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v102 < 1
    || (v103 = (void *)MEMORY[0x22A688A50](0x736E6F69746361, 0xE700000000000000),
        id v104 = objc_msgSend(v163, (SEL)v24[156], v103),
        v103,
        !v104))
  {

LABEL_75:
    id v22 = v163;
    a5 = v161;
    goto LABEL_76;
  }
  id v105 = objc_msgSend(v104, sel_objectPathArray);
  unint64_t v106 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v106 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v107 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v107 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v107 < 1)
  {

    goto LABEL_75;
  }
  CGImageRef v155 = (CGImageRef)v104;
  id v108 = v163;
  id v109 = v168;
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v154 = v108;
  id v110 = v109;
  v111 = v160;
  __RKEntityInteractionSpecification.init(decodeContext:)((uint64_t)v176, (uint64_t)v160);
  v126 = v154;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v111, 0, 1, v158);
  uint64_t v127 = v157;
  outlined init with take of __SceneImportOperation.__ImportedScene((uint64_t)v111, v157, type metadata accessor for __RKEntityInteractionSpecification);
  outlined init with copy of __SceneImportOperation.ImportedScene(v127, v156, type metadata accessor for __RKEntityInteractionSpecification);
  unint64_t v128 = *v167;
  char v129 = swift_isUniquelyReferenced_nonNull_native();
  if ((v129 & 1) == 0) {
    unint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v128 + 16) + 1, 1, v128);
  }
  a5 = v161;
  unint64_t v131 = *(void *)(v128 + 16);
  unint64_t v130 = *(void *)(v128 + 24);
  if (v131 >= v130 >> 1) {
    unint64_t v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v130 > 1, v131 + 1, 1, v128);
  }
  *(void *)(v128 + 16) = v131 + 1;
  outlined init with take of __SceneImportOperation.__ImportedScene(v156, v128+ ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80))+ *(void *)(v159 + 72) * v131, type metadata accessor for __RKEntityInteractionSpecification);
  swift_release();

  unint64_t *v167 = v128;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of __SceneImportOperation.ImportedScene(v157, type metadata accessor for __RKEntityInteractionSpecification);
  id v22 = v163;
LABEL_76:
  uint64_t v112 = a3;
  id v113 = objc_msgSend(v22, sel_childIterator);
  id v114 = objc_msgSend(v113, sel_nextObject);
  if (v114)
  {
    id v115 = v114;
    while (1)
    {
      self;
      uint64_t v116 = swift_dynamicCastObjCClass();
      if (!v116)
      {

        goto LABEL_91;
      }
      v117 = (void *)v116;
      v118 = (void *)MEMORY[0x22A688A50](1684957547, 0xE400000000000000);
      id v119 = objc_msgSend(v117, sel_metadataWithKey_, v118);

      if (!v119) {
        goto LABEL_88;
      }
      id v120 = objc_msgSend(v119, sel_stringValue);

      if (!v120) {
        goto LABEL_88;
      }
      uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v123 = v122;

      if (v121 != 0x62694C656E656373 || v123 != 0xEC00000079726172) {
        break;
      }

      swift_bridgeObjectRelease();
LABEL_79:
      id v115 = objc_msgSend(v113, sel_nextObject);
      if (!v115) {
        goto LABEL_91;
      }
    }
    char v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v125 & 1) == 0) {
LABEL_88:
    }
      static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(v117, v168, v112, a4, a5, v169, v167, v166, v164, v165);

    goto LABEL_79;
  }
LABEL_91:

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v28 = MEMORY[0x263F8EE78];
  static __SceneImportOperation.addCustomUSDDataToEntity(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:interactions:fileName:serviceLocator:)(a1, a2, a3, a4, a5, a6, (unint64_t *)&v28, a7, a8, a9);
  uint64_t v13 = v28;
  if (*(void *)(v28 + 16))
  {
    id v14 = a1;
    id v15 = a2;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = objc_msgSend(v14, sel_path);
    id v17 = objc_msgSend(v16, sel_stringValue);

    if (v17)
    {
      v27 = v15;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (*(void *)(a4 + 16) && (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) != 0))
      {
        uint64_t v23 = (uint64_t *)(*(void *)(a4 + 56) + 16 * v21);
        uint64_t v24 = *v23;
        unint64_t v25 = v23[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v26 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v24, v25, a3, a4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v15 = v14;
        if (v26)
        {
          Entity.__interactions.setter(v13);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

LABEL_14:
          return;
        }
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      id v15 = v27;
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_14;
  }

  swift_bridgeObjectRelease();
}

uint64_t __SceneImportOperation.getSceneResource()()
{
  uint64_t result = RESceneImportOperationGetSceneAsset();
  if (result)
  {
    uint64_t v1 = result;
    RERetain();
    type metadata accessor for __SceneResource();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v1;
  }
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v36 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16(v13, a4, v14);
  id v17 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  v17(v13, 0, 1, v14);
  Scene.__sceneIdentifier.setter((uint64_t)v13);
  uint64_t v35 = a3;
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v20 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v19);
  if (*(void *)(v20 + 16))
  {
    uint64_t v21 = *(void *)(v20 + 32);
    swift_release();
    id v22 = (id)REEntityGetSwiftObject();
    id v32 = a8;
    if (v22)
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_7:
      v16(v13, a4, v14);
      v17(v13, 0, 1, v14);
      Entity.__interactionIdentifier.setter((uint64_t)v13);
      type metadata accessor for __SceneImportOperation();
      outlined init with copy of Any(v33, (uint64_t)v42);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
      swift_dynamicCast();
      uint64_t v26 = v41;
      outlined init with copy of Any(v34, (uint64_t)v40);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
      swift_dynamicCast();
      v27 = v39;
      unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      specialized static __ServiceLocator.shared.getter();
      uint64_t v29 = swift_retain();
      static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v26, v27, v35, v36, v37, v28, v38, v32, v29);

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return 1;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      uint64_t v23 = specialized static Entity.entityInfoType(_:)();
      if (v23)
      {
        uint64_t v24 = (*(uint64_t (**)(void))(v23 + 232))();
        uint64_t v25 = *(void *)(v24 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v25, 0);
        *(void *)(v24 + 16) = v21;
        MEMORY[0x22A68E750](v21, v24);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v21);
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9)
{
  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  swift_dynamicCast();
  id v16 = v22;
  outlined init with copy of Any(a2, (uint64_t)v21);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_dynamicCast();
  specialized static __ServiceLocator.shared.getter();
  uint64_t v17 = swift_retain();
  uint64_t v18 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v16, v20, a3, a4, a5, a6, a7, a8, a9, v17);

  swift_release();
  return v18;
}

uint64_t __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v14 - 8);
  id v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v33 = a4;
  v19(v16, a4, v17);
  id v32 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
  v32(v16, 0, 1, v17);
  Scene.__sceneIdentifier.setter((uint64_t)v16);
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  uint64_t v22 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v21);
  if (*(void *)(v22 + 16))
  {
    uint64_t v23 = *(void *)(v22 + 32);
    swift_release();
    id v24 = (id)REEntityGetSwiftObject();
    uint64_t v30 = a7;
    uint64_t v31 = a8;
    if (v24)
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
LABEL_7:
      v19(v16, v33, v17);
      v32(v16, 0, 1, v17);
      Entity.__interactionIdentifier.setter((uint64_t)v16);
      type metadata accessor for __SceneImportOperation();
      static __SceneImportOperation.addCustomUSDDataToScene(uskNode:uskScene:scene:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v34, v35, a3, v36, v37, v30, v31, a9, a10);
      swift_release();
      return 0;
    }
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      uint64_t v25 = specialized static Entity.entityInfoType(_:)();
      if (v25)
      {
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 232))(v25, v26);
        uint64_t v28 = *(void *)(v27 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v28, 0);
        *(void *)(v27 + 16) = v23;
        MEMORY[0x22A68E750](v23, v27);
        swift_release();
      }
      else
      {
        makeEntity(for:)(v23);
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t __SceneImportOperation_addCustomUSDDataToScene(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  outlined init with copy of Any(a1, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  swift_dynamicCast();
  id v16 = v22;
  outlined init with copy of Any(a2, (uint64_t)v21);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_dynamicCast();
  uint64_t v17 = __SceneImportOperation_addCustomUSDDataToRESceneForReal(uskNode:uskScene:scene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:actionAssets:fileName:serviceLocator:)(v16, v20, a3, a4, a5, a6, a7, a8, a9, a10);

  return v17;
}

unint64_t lazy protocol witness table accessor for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError()
{
  unint64_t result = lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError;
  if (!lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError;
  if (!lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __SceneImportOperation.InternalError and conformance __SceneImportOperation.InternalError);
  }
  return result;
}

uint64_t type metadata accessor for __SceneImportOperation.__ImportedScene(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __SceneImportOperation.__ImportedScene);
}

uint64_t type metadata accessor for __SceneImportOperation.ImportedScene(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __SceneImportOperation.ImportedScene);
}

uint64_t type metadata accessor for __SceneImportOperation()
{
  return self;
}

uint64_t method lookup function for __SceneImportOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __SceneImportOperation);
}

uint64_t getEnumTagSinglePayload for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

unsigned char *storeEnumTagSinglePayload for __SceneImportOperation.InternalError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        int *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      int *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x228265734);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for __SceneImportOperation.InternalError()
{
  return &unk_26DCB9A18;
}

void *initializeBufferWithCopyOfBuffer for __SceneImportOperation.__ImportedScene(void *a1, void *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    unsigned int v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)v4 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(void *)((char *)v4 + v9) = *(void *)((char *)a2 + v9);
    *((unsigned char *)v4 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for __SceneImportOperation.__ImportedScene(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_3);
}

uint64_t storeEnumTagSinglePayload for __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_3);
}

uint64_t type metadata completion function for __SceneImportOperation.__ImportedScene()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of __RKEntityInteractionSpecification?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityInteractionSpecification?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *specialized static __SceneImportOperation.searchForGravity(in:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_childIterator);
  id v2 = objc_msgSend(v1, sel_nextObject);
  if (v2)
  {
    id v3 = v2;
    do
    {
      self;
      uint64_t v4 = swift_dynamicCastObjCClass();
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        id v6 = v3;
        uint64_t v7 = (void *)MEMORY[0x22A688A50](0xD000000000000027, 0x800000022835EC70);
        id v8 = objc_msgSend(v5, sel_property_, v7);

        if (v8)
        {
          objc_msgSend(v8, sel_float3Value);
          swift_unknownObjectRelease();

          return v5;
        }
      }
      id v3 = objc_msgSend(v1, sel_nextObject);
    }
    while (v3);
  }
  swift_unknownObjectRelease();
  return 0;
}

void specialized static __SceneImportOperation.importGravity(decodeContext:gravityNode:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    id v8 = (void *)MEMORY[0x22A688A50](0xD000000000000027, 0x800000022835EC70);
    id v9 = objc_msgSend(a4, sel_property_, v8);

    if (v9)
    {
      objc_msgSend(v9, sel_float3Value);
      long long v23 = v10;

      id v11 = objc_msgSend(a1, sel_path);
      id v12 = objc_msgSend(v11, sel_stringValue);

      if (v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        lazy protocol witness table accessor for type String and conformance String();
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v15 = v14;
        swift_bridgeObjectRelease();
        if (*(void *)(a3 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v15), (v17 & 1) != 0))
        {
          uint64_t v18 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v16);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v21 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v19, v20, a2, a3);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v21)
          {
            REEntityGetOrAddComponentByClass();
            Object = (_OWORD *)RECustomComponentGetObject();
            if (Object) {
              _OWORD *Object = v23;
            }
            swift_release();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

uint64_t partial apply for closure #1 in __SceneImportOperation.init(core:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  return __SceneImportOperation_addCustomUSDDataToREScene2(op:uskNode:uskScene:reScene:sceneIdentifier:usdNodeToEntityMapping:scenePathToUUIDMapping:fileName:serviceLocator:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, v10);
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

BOOL static PhysicsBodyMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PhysicsBodyMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PhysicsBodyMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type PhysicsBodyMode and conformance PhysicsBodyMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode;
  if (!lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsBodyMode and conformance PhysicsBodyMode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PhysicsBodyMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    int *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282663ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsBodyMode()
{
  return &type metadata for PhysicsBodyMode;
}

float static PhysicsMassProperties.default.getter@<S0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  float result = *(float *)&static PhysicsMassProperties.default;
  long long v3 = xmmword_2681C6F90;
  long long v4 = xmmword_2681C6FA0;
  long long v5 = xmmword_2681C6FB0;
  *(_DWORD *)a1 = static PhysicsMassProperties.default;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  return result;
}

double one-time initialization function for default()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  double result = *(double *)&static simd_quatf.identity;
  static PhysicsMassProperties.default = 1065353216;
  xmmword_2681C6F90 = xmmword_22833D9B0;
  xmmword_2681C6FA0 = 0uLL;
  xmmword_2681C6FB0 = static simd_quatf.identity;
  return result;
}

__n128 PhysicsMassProperties.init()@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  __n128 result = (__n128)static simd_quatf.identity;
  *(_DWORD *)a1 = 1065353216;
  *(_OWORD *)(a1 + 16) = xmmword_22833D9B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

float PhysicsMassProperties.mass.getter()
{
  return *(float *)v0;
}

void PhysicsMassProperties.mass.setter(float a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*PhysicsMassProperties.mass.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMassProperties.inertia.getter()
{
  return v0[1];
}

void PhysicsMassProperties.inertia.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*PhysicsMassProperties.inertia.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMassProperties.centerOfMass.getter()
{
  return v0[2];
}

void PhysicsMassProperties.centerOfMass.setter(__n128 a1, __n128 a2)
{
  v2[2] = a1;
  v2[3] = a2;
}

uint64_t (*PhysicsMassProperties.centerOfMass.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsMassProperties.init(mass:inertia:centerOfMass:)@<X0>(__n128 *a1@<X8>, float a2@<S0>, __n128 a3@<Q1>, __n128 a4@<Q2>, __n128 a5@<Q3>)
{
  if (one-time initialization token for identity != -1)
  {
    __n128 v9 = a4;
    __n128 v10 = a5;
    __n128 v8 = a3;
    uint64_t result = swift_once();
    a3 = v8;
    a4 = v9;
    a5 = v10;
  }
  a1->n128_f32[0] = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  return result;
}

double PhysicsMassProperties.init(shape:density:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = PhysicsMassProperties.init(shape:density:)(a1, MEMORY[0x263F370A0], a2).n128_u64[0];
  return result;
}

double PhysicsMassProperties.init(shape:mass:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = PhysicsMassProperties.init(shape:density:)(a1, MEMORY[0x263F370B0], a2).n128_u64[0];
  return result;
}

__n128 PhysicsMassProperties.init(shape:density:)@<Q0>(uint64_t a1@<X0>, void (*a2)(_OWORD *__return_ptr, void)@<X1>, uint64_t a3@<X8>)
{
  a2(v9, *(void *)(a1 + 16));
  __n128 v7 = (__n128)v9[1];
  long long v8 = v9[0];
  long long v6 = v9[2];
  int v4 = v10;
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  swift_release();
  *(_DWORD *)a3 = v4;
  *(_OWORD *)(a3 + 16) = v6;
  *(_OWORD *)(a3 + 32) = v8;
  __n128 result = v7;
  *(__n128 *)(a3 + 48) = v7;
  return result;
}

BOOL specialized static PhysicsMassProperties.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2) {
    return 0;
  }
  uint64_t v2 = 0;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    long long v23 = v4;
    float v17 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    long long v24 = v7;
    float v18 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    BOOL v9 = v17 == v18;
    if (v2 == 2) {
      break;
    }
    while (1)
    {
      ++v2;
      if (v9) {
        break;
      }
      BOOL v9 = 0;
      BOOL result = 0;
      if (v2 == 2) {
        return result;
      }
    }
  }
  if (v17 != v18) {
    return 0;
  }
  uint64_t v11 = 0;
  while (1)
  {
    long long v21 = v3;
    float v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    long long v22 = v6;
    float v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    BOOL v12 = v13 == v14;
    if (v11 == 2) {
      break;
    }
    while (1)
    {
      ++v11;
      if (v12) {
        break;
      }
      BOOL v12 = 0;
      BOOL result = 0;
      if (v11 == 2) {
        return result;
      }
    }
  }
  if (v13 != v14) {
    return 0;
  }
  uint64_t v15 = 0;
  while (1)
  {
    long long v19 = v5;
    float v16 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    long long v20 = v8;
    BOOL result = v16 == *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    if (v15 == 3) {
      break;
    }
    while (1)
    {
      ++v15;
      if (result) {
        break;
      }
      BOOL result = 0;
      if (v15 == 3) {
        return result;
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsMassProperties()
{
  return &type metadata for PhysicsMassProperties;
}

uint64_t __RKEntityForceAction.__allocating_init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 112) = 0;
  *(void *)(v14 + 120) = 0;
  *(unsigned char *)(v14 + 128) = 1;
  *(void *)(v14 + 144) = 0;
  *(void *)(v14 + 152) = 0;
  *(unsigned char *)(v14 + 160) = 1;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(void *)(v14 + 200) = 0;
  swift_beginAccess();
  *(void *)(v14 + 112) = a2;
  *(void *)(v14 + 120) = a3;
  *(unsigned char *)(v14 + 128) = a4 & 1;
  swift_beginAccess();
  *(void *)(v14 + 144) = a5;
  *(void *)(v14 + 152) = a6;
  *(unsigned char *)(v14 + 160) = a7 & 1;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityForceAction.force.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 112);
}

uint64_t __RKEntityForceAction.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = a2;
  *(unsigned char *)(v3 + 128) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceAction.force.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityForceAction.velocity.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 144);
}

uint64_t __RKEntityForceAction.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a2;
  *(unsigned char *)(v3 + 160) = a3 & 1;
  return result;
}

uint64_t __RKEntityForceAction.init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 120) = 0;
  *(unsigned char *)(v7 + 128) = 1;
  *(void *)(v7 + 152) = 0;
  *(unsigned char *)(v7 + 160) = 1;
  *(void *)(v7 + 144) = 0;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(void *)(v7 + 200) = 0;
  swift_beginAccess();
  *(void *)(v7 + 112) = a2;
  *(void *)(v7 + 120) = a3;
  *(unsigned char *)(v7 + 128) = a4 & 1;
  swift_beginAccess();
  *(void *)(v7 + 144) = a5;
  *(void *)(v7 + 152) = a6;
  *(unsigned char *)(v7 + 160) = a7 & 1;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityForceAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v25 = 91;
  unint64_t v26 = 0xE100000000000000;
  if (v2)
  {
    v27[0] = 0;
    v27[1] = 0xE000000000000000;
    v27[6] = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v25;
  unint64_t v9 = v26;
  if (!*(void *)(v0 + 16))
  {
    uint64_t v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v25);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v11 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v11 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      uint64_t v18 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v25);
      swift_bridgeObjectRelease();
LABEL_15:
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(v1 + 96);
  char v13 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v25 = v12;
  LOBYTE(v26) = v13;
  __RKEntityAction.state.didset((uint64_t)&v25);
  swift_retain_n();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable) {
    goto LABEL_19;
  }
  uint64_t v15 = SceneNullable;
  id v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  uint64_t v20 = Scene.physicsOrigin.getter();
  swift_release();
  if (!v20) {
LABEL_19:
  }
    specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  swift_release_n();
  RERigidBodyComponentGetComponentType();
  if (REEntityGetComponentByClass() && RERigidBodyComponentGetRigidBody())
  {
    RERigidBodyWakeUp();
    if (!Entity.rcSceneEntity.getter())
    {
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_15;
    }
    REEntityCalculateWorldOrientation();
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 160))
    {
      swift_beginAccess();
      if (*(unsigned char *)(v1 + 128))
      {
LABEL_29:
        RENetworkMarkComponentDirty();
        swift_release();
        goto LABEL_30;
      }
    }
    else
    {
      RERigidBodyGetMassFrame();
    }
    RERigidBodyApplyLinearImpulse();
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = partial apply for closure #1 in __RKEntityForceAction.perform(with:);
  *(void *)(v1 + 40) = v21;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v22);
  memset(v27, 0, 40);
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v27, (uint64_t)partial apply for closure #2 in __RKEntityForceAction.perform(with:), v23, &v25);
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v25, v1 + 168);
  swift_endAccess();
  uint64_t v25 = v10;
  unint64_t v26 = v9;
  uint64_t v24 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v24, &v25);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return 1;
}

uint64_t closure #1 in __RKEntityForceAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + 168;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1, (uint64_t)&v3);
    if (*((void *)&v4 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v3, (uint64_t)v2);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v5 = 0;
    long long v3 = 0u;
    long long v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityForceAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 96);
    char v3 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96) = 2;
    *(unsigned char *)(v1 + 104) = 1;
    uint64_t v4 = v2;
    char v5 = v3;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v4);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityForceAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v11 = *(void *)(v1 + 112);
  char v3 = *(unsigned char *)(v1 + 128);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 152);
  char v6 = *(unsigned char *)(v1 + 160);
  uint64_t v7 = type metadata accessor for __RKEntityForceAction();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 1;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(unsigned char *)(v8 + 160) = 1;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  *(void *)(v8 + 200) = 0;
  swift_beginAccess();
  *(void *)(v8 + 112) = v11;
  *(void *)(v8 + 120) = v2;
  *(unsigned char *)(v8 + 128) = v3;
  swift_beginAccess();
  *(void *)(v8 + 144) = v5;
  *(void *)(v8 + 152) = v4;
  *(unsigned char *)(v8 + 160) = v6;
  uint64_t v9 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v9);
  a1[3] = v7;
  *a1 = result;
  return result;
}

uint64_t __RKEntityForceAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v1 + 120);
    uint64_t v20 = *(void *)(v1 + 112);
    char v13 = *(unsigned char *)(v1 + 128);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v1 + 144);
    uint64_t v15 = *(void *)(v1 + 152);
    char v16 = *(unsigned char *)(v1 + 160);
    type metadata accessor for __RKEntityForceAction();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 112) = 0;
    *(void *)(v17 + 120) = 0;
    *(unsigned char *)(v17 + 128) = 1;
    *(void *)(v17 + 144) = 0;
    *(void *)(v17 + 152) = 0;
    *(unsigned char *)(v17 + 160) = 1;
    *(_OWORD *)(v17 + 168) = 0u;
    *(_OWORD *)(v17 + 184) = 0u;
    *(void *)(v17 + 200) = 0;
    swift_beginAccess();
    *(void *)(v17 + 112) = v20;
    *(void *)(v17 + 120) = v12;
    *(unsigned char *)(v17 + 128) = v13;
    swift_beginAccess();
    *(void *)(v17 + 144) = v14;
    *(void *)(v17 + 152) = v15;
    *(unsigned char *)(v17 + 160) = v16;
    uint64_t v18 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v18);
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 120);
    uint64_t v19 = *(void *)(v1 + 112);
    char v5 = *(unsigned char *)(v1 + 128);
    swift_beginAccess();
    uint64_t v6 = *(void *)(v1 + 144);
    uint64_t v7 = *(void *)(v1 + 152);
    char v8 = *(unsigned char *)(v1 + 160);
    type metadata accessor for __RKEntityForceAction();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 0;
    *(unsigned char *)(v9 + 128) = 1;
    *(void *)(v9 + 144) = 0;
    *(void *)(v9 + 152) = 0;
    *(unsigned char *)(v9 + 160) = 1;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(void *)(v9 + 200) = 0;
    swift_beginAccess();
    *(void *)(v9 + 112) = v19;
    *(void *)(v9 + 120) = v4;
    *(unsigned char *)(v9 + 128) = v5;
    swift_beginAccess();
    *(void *)(v9 + 144) = v6;
    *(void *)(v9 + 152) = v7;
    *(unsigned char *)(v9 + 160) = v8;
    uint64_t v10 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v10);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v21;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityForceAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityForceAction.init(targetEntity:)()
{
}

uint64_t __RKEntityForceAction.__ivar_destroyer()
{
  return outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityForceAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityForceAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 168, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t sub_228267968()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in __RKEntityForceAction.perform(with:)()
{
  return closure #1 in __RKEntityForceAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityForceAction.perform(with:)()
{
  return closure #2 in __RKEntityForceAction.perform(with:)();
}

uint64_t type metadata accessor for __RKEntityForceAction()
{
  return self;
}

__n128 sub_2282679D4@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  unsigned __int8 v4 = v3[8].n128_u8[0];
  __n128 result = v3[7];
  *a2 = result;
  a2[1].n128_u8[0] = v4;
  return result;
}

uint64_t sub_228267A24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 112) = v2;
  *(void *)(v5 + 120) = v3;
  *(unsigned char *)(v5 + 128) = v4;
  return result;
}

__n128 sub_228267A78@<Q0>(__n128 **a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  unsigned __int8 v4 = v3[10].n128_u8[0];
  __n128 result = v3[9];
  *a2 = result;
  a2[1].n128_u8[0] = v4;
  return result;
}

uint64_t sub_228267AC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v5 + 144) = v2;
  *(void *)(v5 + 152) = v3;
  *(unsigned char *)(v5 + 160) = v4;
  return result;
}

uint64_t method lookup function for __RKEntityForceAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityForceAction);
}

uint64_t dispatch thunk of __RKEntityForceAction.force.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 544))();
}

uint64_t dispatch thunk of __RKEntityForceAction.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 552))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of __RKEntityForceAction.force.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v3 + 576))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of __RKEntityForceAction.velocity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityForceAction.__allocating_init(targetEntity:force:velocity:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, void))(v7 + 616))(a1, a2, a3, a4 & 1, a5, a6, a7 & 1);
}

uint64_t specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(char a1)
{
  uint64_t v2 = specialized HasHierarchy.parent.getter();
  swift_release();
  if (v2)
  {
    return specialized HasHierarchy.setParent(_:preservingWorldTransform:)(0, a1 & 1);
  }
  else
  {
    uint64_t result = REEntityGetSceneNullable();
    if (result)
    {
      uint64_t v4 = result;
      id v5 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v5)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v4);
      }
      swift_conformsToProtocol2();
      RESceneRemoveEntity();
      return swift_release();
    }
  }
  return result;
}

void ReferenceComponent.loadingPolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 33);
}

void static ReferenceComponent.loadReference(at:)(uint64_t a1)
{
  swift_retain();
  if (REEntityGetComponent())
  {
    ReferenceComponent.init(from:)((uint64_t)v27);
    uint64_t v4 = v27[0];
    uint64_t v3 = v27[1];
    uint64_t v6 = v27[2];
    unint64_t v5 = v27[3];
    int v7 = v28;
    int v8 = v29;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_release();
    if (v7)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      swift_retain_n();
      uint64_t v10 = static OS_os_log.default.getter();
      if (os_log_type_enabled(v10, v9))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        v27[0] = swift_slowAlloc();
        uint64_t v12 = v27[0];
        *(_DWORD *)uint64_t v11 = 136315138;
        REEntityGetName();
        uint64_t v13 = String.init(cString:)();
        uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_227DD2000, v10, v9, "ReferenceComponent for %s is already loaded", v11, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v12, -1, -1);
        MEMORY[0x22A696500](v11, -1, -1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
      }

      goto LABEL_14;
    }
    specialized static ReferenceComponent.findBundle(bundlePath:)(v6, v5);
    if (v1)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      uint64_t v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_14:
      swift_release();
      return;
    }
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    type metadata accessor for Entity();
    uint64_t v25 = static Entity.load(named:in:)(v4, v3, v23);
    swift_bridgeObjectRelease();

    swift_retain();
    swift_release();
    v27[0] = a1;
    swift_retain();
    swift_retain();
    Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v25, 0);
    swift_release();
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v26 = 2;
    v30[0] = v4;
    v30[1] = v3;
    if (v8) {
      uint64_t v26 = 258;
    }
    v30[2] = v6;
    v30[3] = v5;
    v30[4] = v26;
    v30[5] = v25;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v30);
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_release();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    char v16 = static OS_os_log.default.getter();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v27[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      REEntityGetName();
      uint64_t v20 = String.init(cString:)();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v16, v17, "No ReferenceComponent found for %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v19, -1, -1);
      MEMORY[0x22A696500](v18, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

uint64_t static ReferenceComponent.loadReference(at:)(uint64_t a1)
{
  v1[17] = a1;
  type metadata accessor for MainActor();
  v1[18] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v1[19] = v3;
  v1[20] = v2;
  return MEMORY[0x270FA2498](static ReferenceComponent.loadReference(at:), v3, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 224) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v5 = v4[19];
    uint64_t v6 = v4[20];
    int v7 = static ReferenceComponent.loadReference(at:);
  }
  else
  {
    swift_release();
    v4[29] = a1;
    uint64_t v5 = v4[19];
    uint64_t v6 = v4[20];
    int v7 = static ReferenceComponent.loadReference(at:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static ReferenceComponent.loadReference(at:)()
{
  uint64_t v37 = v0;
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    swift_release();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    unint64_t v14 = static OS_os_log.default.getter();
    os_log_type_t v15 = v13;
    if (os_log_type_enabled(v14, v13))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v31[0] = v17;
      *(_DWORD *)char v16 = 136315138;
      REEntityGetName();
      uint64_t v18 = String.init(cString:)();
      *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_227DD2000, v14, v15, "No ReferenceComponent found for %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v17, -1, -1);
      MEMORY[0x22A696500](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }
LABEL_15:
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  ReferenceComponent.init(from:)((uint64_t)v31);
  uint64_t v2 = v31[0];
  uint64_t v1 = v31[1];
  *(void *)(v0 + 168) = v31[0];
  *(void *)(v0 + 176) = v1;
  uint64_t v4 = v32;
  unint64_t v3 = v33;
  *(void *)(v0 + 184) = v32;
  *(void *)(v0 + 192) = v3;
  int v5 = v34;
  *(unsigned char *)(v0 + 240) = v35;
  *(void *)(v0 + 200) = v36;
  swift_retain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_release();
  if (v5)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    int v7 = static OS_os_log.default.getter();
    BOOL v8 = os_log_type_enabled(v7, v6);
    if (v5 == 1)
    {
      if (v8)
      {
        os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        v31[0] = v30;
        *(_DWORD *)os_log_type_t v9 = 136315138;
        REEntityGetName();
        uint64_t v10 = String.init(cString:)();
        *(void *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_227DD2000, v7, v6, "ReferenceComponent for %s is currently loading", v9, 0xCu);
        uint64_t v12 = v30;
LABEL_11:
        swift_arrayDestroy();
        MEMORY[0x22A696500](v12, -1, -1);
        MEMORY[0x22A696500](v9, -1, -1);

LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_15;
      }
    }
    else if (v8)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      buf = (uint8_t *)swift_slowAlloc();
      v31[0] = (uint64_t)buf;
      *(_DWORD *)uint64_t v22 = 136315138;
      os_log_type_t v9 = v22;
      REEntityGetName();
      uint64_t v23 = String.init(cString:)();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_227DD2000, v7, v6, "ReferenceComponent for %s is already loaded", v22, 0xCu);
      uint64_t v12 = (uint64_t)buf;
      goto LABEL_11;
    }

    swift_release_n();
    goto LABEL_14;
  }
  specialized static ReferenceComponent.findBundle(bundlePath:)(v4, v3);
  unint64_t v21 = v20;
  *(void *)(v0 + 208) = v20;
  swift_bridgeObjectRelease();
  type metadata accessor for Entity();
  id v27 = v21;
  unsigned __int8 v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v28;
  void *v28 = v0;
  v28[1] = static ReferenceComponent.loadReference(at:);
  return Entity.init(named:in:)(v2, v1, (uint64_t)v21);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void **)(v0 + 208);
  unint64_t v3 = *(unsigned __int8 *)(v0 + 240);
  int v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  int v7 = *(void *)(v0 + 168);
  os_log_type_t v6 = *(void *)(v0 + 176);
  swift_release();

  swift_retain();
  swift_release();
  swift_retain();
  swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)(v1, 0);
  swift_release();
  swift_release();
  BOOL v8 = 2;
  *(void *)(v0 + 64) = v7;
  *(void *)(v0 + 72) = v6;
  *(void *)(v0 + 80) = v5;
  if (v3) {
    BOOL v8 = 258;
  }
  *(void *)(v0 + 88) = v4;
  *(void *)(v0 + 96) = v8;
  *(void *)(v0 + 104) = v1;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t *)(v0 + 64));
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release();
  os_log_type_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(void **)(v0 + 208);
  swift_release();

  unint64_t v3 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  int v5 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  os_log_type_t v6 = *(unsigned char *)(v0 + 240) == 0;
  int v7 = 256;
  *(void *)(v0 + 16) = *(void *)(v0 + 168);
  if (v6) {
    int v7 = 0;
  }
  *(void *)(v0 + 24) = v5;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v3;
  *(void *)(v0 + 48) = v7;
  *(void *)(v0 + 56) = v2;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  static os_log_type_t.error.getter();
  type metadata accessor for OS_os_log();
  BOOL v8 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  os_log_type_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance ReferenceComponent.BundlePathError()
{
  if (*v0) {
    return 0xD000000000000022;
  }
  else {
    return 0xD00000000000002FLL;
  }
}

BOOL static ReferenceComponent.LoadingPolicy.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ReferenceComponent.LoadingPolicy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ReferenceComponent.LoadingPolicy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static ReferenceComponent.ReferenceState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ReferenceComponent.ReferenceState.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ReferenceComponent.ReferenceState.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ReferenceComponent.state.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

uint64_t ReferenceComponent.reference.getter()
{
  return swift_retain();
}

uint64_t ReferenceComponent.init(named:at:loadingPolicy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *a5;
  *(void *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = 0;
  *(unsigned char *)(a6 + 33) = v6;
  *(void *)(a6 + 40) = 0;
  return result;
}

void ReferenceComponent.init(named:in:loadingPolicy:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v8 = type metadata accessor for CharacterSet();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = MEMORY[0x270FA5388](v8).n128_u64[0];
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v29) = *a4;
  id v30 = a3;
  id v13 = objc_msgSend(a3, sel_bundlePath, v10);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  uint64_t v37 = v14;
  uint64_t v38 = v16;
  id v17 = objc_msgSend(self, sel_mainBundle);
  id v18 = objc_msgSend(v17, sel_resourcePath);

  if (v18)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    uint64_t v35 = v19;
    uint64_t v36 = v21;
    uint64_t v33 = 0;
    unint64_t v34 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v37 = v22;
    uint64_t v38 = v24;
    CharacterSet.init(charactersIn:)();
    uint64_t v25 = StringProtocol.trimmingCharacters(in:)();
    uint64_t v27 = v26;

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    swift_bridgeObjectRelease();
    uint64_t v28 = v32;
    *(void *)a5 = v31;
    *(void *)(a5 + 8) = v28;
    *(void *)(a5 + 16) = v25;
    *(void *)(a5 + 24) = v27;
    *(unsigned char *)(a5 + 32) = 0;
    *(unsigned char *)(a5 + 33) = BYTE4(v29);
    *(void *)(a5 + 40) = 0;
  }
  else
  {
    __break(1u);
  }
}

uint64_t ReferenceComponent.init(named:loadingPolicy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0xE000000000000000;
  *(unsigned char *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 33) = v4;
  *(void *)(a4 + 40) = 0;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ReferenceComponent@<X0>(uint64_t a1@<X8>)
{
  return ReferenceComponent.init(from:)(a1);
}

uint64_t static ReferenceComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return ReferenceComponent.init(from:)(a1);
}

uint64_t ReferenceComponent.__toCore(_:)()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  char v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  uint64_t v8 = v0[2];
  uint64_t v7 = v0[3];
  int v9 = *((unsigned __int8 *)v0 + 32);
  v15[2] = *((unsigned __int8 *)v0 + 33);
  v15[3] = v9;
  uint64_t v10 = v0[5];
  uint64_t v16 = v5;
  uint64_t v17 = v6;
  static String.Encoding.utf8.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v11 = StringProtocol.cString(using:)();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t result = v12(v4, v1);
  if (!v11)
  {
    __break(1u);
    goto LABEL_7;
  }
  REReferenceComponentSetEntityName();
  swift_bridgeObjectRelease();
  uint64_t v16 = v8;
  uint64_t v17 = v7;
  static String.Encoding.utf8.getter();
  uint64_t v14 = StringProtocol.cString(using:)();
  uint64_t result = v12(v4, v1);
  if (!v14)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  REReferenceComponentSetBundlePath();
  swift_bridgeObjectRelease();
  REReferenceComponentSetLoadingPolicy();
  REReferenceComponentSetLoadingState();
  if (v10) {
    REReferenceComponentSetSubscene();
  }
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ReferenceComponent(_DWORD *a1@<X8>)
{
  *a1 = 5009;
}

void static ReferenceComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5009;
}

uint64_t ReferenceComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  if (REReferenceComponentGetReferenceSourceType()) {
    goto LABEL_20;
  }
  if (!REReferenceComponentGetEntityName()) {
    goto LABEL_18;
  }
  uint64_t v2 = String.init(cString:)();
  uint64_t v4 = v3;
  if (!REReferenceComponentGetBundlePath())
  {
LABEL_19:
    __break(1u);
LABEL_20:
    _StringGuts.grow(_:)(25);
    v16._object = (void *)0x800000022835EE30;
    v16._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v16);
    type metadata accessor for REReferenceSourceType(0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = String.init(cString:)();
  uint64_t v7 = v6;
  int LoadingPolicy = REReferenceComponentGetLoadingPolicy();
  unsigned int LoadingState = REReferenceComponentGetLoadingState();
  uint64_t result = REReferenceComponentGetSubscene();
  if (!result)
  {
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = result;
  if (!(id)REEntityGetSwiftObject())
  {
    if ((REEntityIsBeingDestroyed() & 1) == 0)
    {
      uint64_t v13 = specialized static Entity.entityInfoType(_:)();
      if (v13)
      {
        uint64_t v12 = (*(uint64_t (**)(void))(v13 + 232))();
        uint64_t v14 = *(void *)(v12 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v14, 0);
        *(void *)(v12 + 16) = v11;
        MEMORY[0x22A68E750](v11, v12);
        uint64_t result = swift_release();
        goto LABEL_12;
      }
      uint64_t result = makeEntity(for:)(v11);
      goto LABEL_7;
    }
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  type metadata accessor for Entity();
  uint64_t result = swift_dynamicCastClassUnconditional();
LABEL_7:
  uint64_t v12 = result;
LABEL_12:
  if (LoadingState >= 3) {
    char v15 = 0;
  }
  else {
    char v15 = LoadingState;
  }
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v15;
  *(unsigned char *)(a1 + 33) = LoadingPolicy == 1;
  *(void *)(a1 + 40) = v12;
  return result;
}

Swift::String __swiftcall String.sanitizedBundlePath()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - v9;
  static CharacterSet.whitespacesAndNewlines.getter();
  static CharacterSet.illegalCharacters.getter();
  CharacterSet.formUnion(_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  static CharacterSet.controlCharacters.getter();
  CharacterSet.formUnion(_:)();
  v11(v7, v4);
  uint64_t v27 = v3;
  uint64_t v28 = v2;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v27 = StringProtocol.components(separatedBy:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_mainBundle);
  id v16 = objc_msgSend(v15, sel_resourcePath);

  if (v16)
  {
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    uint64_t v27 = v19;
    uint64_t v28 = v21;
    swift_bridgeObjectRetain();
    v22._countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v12;
    v23._object = v14;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = v27;
    uint64_t v25 = v28;
    v11(v10, v4);
    uint64_t v17 = v24;
    id v18 = v25;
  }
  else
  {
    __break(1u);
  }
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

void static ReferenceComponent.releaseReference(at:)()
{
  swift_retain();
  if (REEntityGetComponent())
  {
    ReferenceComponent.init(from:)((uint64_t)&v13);
    swift_release();
    uint64_t v1 = v13;
    uint64_t v0 = v14;
    uint64_t v3 = v15;
    uint64_t v2 = v16;
    if (BYTE1(v17)) {
      uint64_t v4 = 256;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v18)
    {
      swift_retain();
      specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      swift_release_n();
      uint64_t v13 = v1;
      uint64_t v14 = v0;
      uint64_t v15 = v3;
      uint64_t v16 = v2;
      uint64_t v17 = v4;
      uint64_t v18 = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(&v13);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      uint64_t v12 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      outlined consume of ReferenceComponent?(v1, v0);
    }
  }
  else
  {
    swift_release();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    swift_retain_n();
    uint64_t v6 = static OS_os_log.default.getter();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v13 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      REEntityGetName();
      uint64_t v10 = String.init(cString:)();
      uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v6, v7, "No ReferenceComponent found for %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v9, -1, -1);
      MEMORY[0x22A696500](v8, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

void specialized static ReferenceComponent.findBundle(bundlePath:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    String.sanitizedBundlePath()();
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    URL.standardizedFileURL.getter();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v41 = v8;
    uint64_t v42 = v9 + 8;
    unint64_t v40 = v16;
    v16(v11, v8);
    URL.path.getter();
    id v17 = objc_msgSend(self, sel_mainBundle);
    id v18 = objc_msgSend(v17, sel_resourcePath);

    if (v18)
    {
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      v22._countAndFlagsBits = v19;
      v22._object = v21;
      Swift::Bool v23 = String.hasPrefix(_:)(v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_22830EC60;
        uint64_t v25 = (void *)*MEMORY[0x263EFF700];
        *(void *)(inited + 32) = *MEMORY[0x263EFF700];
        id v26 = v25;
        specialized Set.init(_nonEmptyArrayLiteral:)(inited);
        swift_setDeallocating();
        type metadata accessor for NSURLResourceKey(0);
        swift_arrayDestroy();
        URL.resourceValues(forKeys:)();
        uint64_t v27 = v41;
        if (v2)
        {

          swift_bridgeObjectRelease();
LABEL_8:
          long long v43 = 0u;
          long long v44 = 0u;
          uint64_t v28 = v40;
LABEL_9:
          outlined destroy of Any?((uint64_t)&v43);
LABEL_10:
          id v29 = objc_allocWithZone(MEMORY[0x263F086E0]);
          URL._bridgeToObjectiveC()(v30);
          uint64_t v32 = v31;
          objc_msgSend(v29, sel_initWithURL_, v31);

          v28(v14, v27);
          return;
        }
        swift_bridgeObjectRelease();
        uint64_t v35 = URLResourceValues.allValues.getter();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v5);
        if (!v35) {
          goto LABEL_8;
        }
        if (*(void *)(v35 + 16))
        {
          id v36 = v26;
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v36);
          if (v38)
          {
            outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v37, (uint64_t)&v43);
          }
          else
          {
            long long v43 = 0u;
            long long v44 = 0u;
          }
        }
        else
        {
          long long v43 = 0u;
          long long v44 = 0u;
        }
        uint64_t v28 = v40;
        swift_bridgeObjectRelease();
        if (!*((void *)&v44 + 1)) {
          goto LABEL_9;
        }
        if (!swift_dynamicCast() || (v45 & 1) == 0) {
          goto LABEL_10;
        }
        char v33 = 0;
      }
      else
      {
        char v33 = 1;
        uint64_t v28 = v40;
        uint64_t v27 = v41;
      }
      lazy protocol witness table accessor for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError();
      swift_allocError();
      *unint64_t v34 = v33;
      swift_willThrow();
      v28(v14, v27);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend(self, sel_mainBundle);
  }
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.LoadingPolicy and conformance ReferenceComponent.LoadingPolicy);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState()
{
  unint64_t result = lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.ReferenceState and conformance ReferenceComponent.ReferenceState);
  }
  return result;
}

uint64_t destroy for ReferenceComponent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReferenceComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ReferenceComponent()
{
  return &type metadata for ReferenceComponent;
}

ValueMetadata *type metadata accessor for ReferenceComponent.LoadingPolicy()
{
  return &type metadata for ReferenceComponent.LoadingPolicy;
}

unsigned char *storeEnumTagSinglePayload for ReferenceComponent.ReferenceState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    int *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22826A344);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReferenceComponent.ReferenceState()
{
  return &type metadata for ReferenceComponent.ReferenceState;
}

ValueMetadata *type metadata accessor for ReferenceComponent.ReferenceSource()
{
  return &type metadata for ReferenceComponent.ReferenceSource;
}

unint64_t lazy protocol witness table accessor for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError()
{
  unint64_t result = lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError;
  if (!lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReferenceComponent.BundlePathError and conformance ReferenceComponent.BundlePathError);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ReferenceComponent.LoadingPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22826A4ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ReferenceComponent.BundlePathError()
{
  return &unk_26DCB9EB0;
}

float32x4_t orthonormalFrame(forward:up:)@<Q0>(float32x4_t *a1@<X8>, float32x4_t a2@<Q0>, int32x4_t a3@<Q1>, float32x4_t a4@<Q3>, float32x4_t a5@<Q4>)
{
  float32x2_t v5 = (float32x2_t)vmulq_f32(a2, a2).u64[0];
  v5.f32[0] = sqrtf(vmuls_lane_f32(a2.f32[2], a2, 2) + vaddv_f32(v5));
  *(float32x2_t *)a5.f32 = vdiv_f32(*(float32x2_t *)a2.f32, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 0));
  a4.f32[0] = a2.f32[2] / v5.f32[0];
  float32x4_t v6 = a5;
  v6.i32[2] = a4.i32[0];
  *(uint64_t *)((char *)a4.i64 + 4) = a5.i64[0];
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL);
  float32x4_t v7 = vmlaq_f32(vmulq_f32(v9, vnegq_f32(v6)), (float32x4_t)a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL));
  float32x4_t v8 = vmulq_f32(v7, v7);
  v9.f32[0] = sqrtf(v8.f32[1] + (float)(v8.f32[2] + v8.f32[0]));
  if (v9.f32[0] >= 0.01)
  {
    float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  }
  else
  {
    float32x4_t v10 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_228347F70), (float32x4_t)xmmword_22830ECB0, a4);
    float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
    float32x4_t v9 = vmulq_f32(v10, v10);
    v9.f32[0] = sqrtf(v9.f32[1] + (float)(v9.f32[2] + v9.f32[0]));
  }
  if (v9.f32[0] < 0.01)
  {
    float32x4_t v12 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_228347F80), (float32x4_t)xmmword_22830EC90, a4);
    float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
    float32x4_t v9 = vmulq_f32(v12, v12);
    v9.f32[0] = sqrtf(v9.f32[1] + (float)(v9.f32[2] + v9.f32[0]));
  }
  *(float32x2_t *)v11.f32 = vdiv_f32(*(float32x2_t *)v11.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v9.f32, 0));
  float32x4_t v13 = v11;
  v13.f32[2] = v11.f32[2] / v9.f32[0];
  *(float32x2_t *)v11.f32 = vsub_f32(0, *(float32x2_t *)v11.f32);
  int32x4_t v14 = (int32x4_t)vmlaq_f32(vmulq_f32(a4, vnegq_f32(v13)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL));
  v11.f32[2] = 0.0 - (float)(v11.f32[2] / v9.f32[0]);
  float32x4_t result = vmulq_n_f32(v6, v5.f32[0]);
  *a1 = vmulq_n_f32(v11, v5.f32[0]);
  a1[1] = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v14, v14), (int8x16_t)v14, 0xCuLL), v5.f32[0]);
  a1[2] = result;
  return result;
}

void MeshResource.ShapeExtrusionOptions.ExtrusionMethod.extractSweepCurve()(double a1, double a2, double a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v6 = *v5;
  if (!*((unsigned char *)v5 + 8))
  {
    orthonormalFrame(forward:up:)(&v43, *(float32x4_t *)&zmmword_22830EC90[32], *(int32x4_t *)&zmmword_22830EC90[16], a4, a5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
    uint64_t v32 = (_OWORD *)swift_allocObject();
    float32x4_t v33 = v43;
    int32x4_t v34 = v44;
    v33.i32[3] = 0;
    long long v35 = *(_OWORD *)&zmmword_22830EC90[48];
    long long v36 = *(_OWORD *)&zmmword_22830EC90[48];
    *((float *)&v36 + 2) = *(float *)&v6 * -0.5;
    float32x4_t v37 = v45;
    v34.i32[3] = 0;
    v37.i32[3] = 0;
    v32[1] = xmmword_22831E350;
    v32[2] = v33;
    *((float *)&v35 + 2) = *(float *)&v6 * 0.5;
    v32[3] = v34;
    v32[4] = v37;
    v32[5] = v36;
    v32[6] = v33;
    v32[7] = v34;
    v32[8] = v37;
    v32[9] = v35;
    return;
  }
  if (*((unsigned char *)v5 + 8) != 1)
  {
    swift_bridgeObjectRetain();
    return;
  }
  float32x4_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16), 0, MEMORY[0x263F8EE78]);
  uint64_t v9 = *(void *)(v6 + 16);
  if (!v9) {
    return;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int32x4_t v12 = *(int32x4_t *)&zmmword_22830EC90[16];
  float32x4_t v41 = *(float32x4_t *)&zmmword_22830EC90[32];
  uint64_t v13 = v9 - 1;
  while (1)
  {
    float32x4_t v14 = *(float32x4_t *)(v6 + v10 + 32);
    float32x4_t v42 = v14;
    if (v10) {
      break;
    }
    if (v13 == v11) {
      goto LABEL_16;
    }
    float32x2_t v15 = vsub_f32(*(float32x2_t *)(v6 + 48), *(float32x2_t *)v14.f32);
    float v16 = *(float *)(v6 + 56);
    float v17 = v14.f32[2];
LABEL_11:
    float v18 = v16 - v17;
    float32x2_t v19 = vmul_f32(v15, v15);
    v19.f32[0] = sqrtf((float)(v18 * v18) + vaddv_f32(v19));
    v14.f32[0] = fabsf(v19.f32[0]);
    v8.i32[0] = 925353388;
    if (v14.f32[0] <= 0.00001) {
      goto LABEL_16;
    }
    *(float32x2_t *)v20.f32 = vdiv_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
    v20.f32[2] = v18 / v19.f32[0];
    v20.i32[3] = 0;
    float32x4_t v41 = v20;
    orthonormalFrame(forward:up:)(&v43, v20, v12, v20, v8);
LABEL_17:
    float32x4_t v25 = v43;
    int32x4_t v12 = v44;
    float32x4_t v8 = v45;
    unint64_t v27 = v7[2];
    unint64_t v26 = v7[3];
    if (v27 >= v26 >> 1)
    {
      float32x4_t v39 = v43;
      int32x4_t v40 = v44;
      float32x4_t v38 = v45;
      uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v7);
      float32x4_t v8 = v38;
      float32x4_t v25 = v39;
      int32x4_t v12 = v40;
      float32x4_t v7 = v31;
    }
    ++v11;
    v25.i32[3] = 0;
    int32x4_t v28 = v12;
    v28.i32[3] = 0;
    v8.i32[3] = 0;
    float32x4_t v29 = v42;
    v29.i32[3] = 1.0;
    v7[2] = v27 + 1;
    id v30 = &v7[8 * v27];
    v30[2] = v25;
    v30[3] = v28;
    v30[4] = v8;
    v30[5] = v29;
    v10 += 16;
    if (v9 == v11) {
      return;
    }
  }
  if (v13 == v11)
  {
    if (v9 - 2 >= *(void *)(v6 + 16)) {
      goto LABEL_25;
    }
    float32x2_t v15 = vsub_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)(v6 + 16 * (v9 - 2) + 32));
    float v16 = v14.f32[2];
    float v17 = *(float *)(v6 + 16 * (v9 - 2) + 40);
    goto LABEL_11;
  }
  if ((unint64_t)(v11 - 1) < *(void *)(v6 + 16))
  {
    float32x2_t v21 = vmul_f32(vadd_f32(vsub_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)(v6 + v10 + 16)), vsub_f32(*(float32x2_t *)(v6 + v10 + 48), *(float32x2_t *)v14.f32)), (float32x2_t)0x3F0000003F000000);
    float v22 = (float)((float)(v14.f32[2] - *(float *)(v6 + v10 + 24)) + (float)(*(float *)(v6 + v10 + 56) - v14.f32[2]))
        * 0.5;
    float32x2_t v23 = vmul_f32(v21, v21);
    v23.f32[0] = sqrtf((float)(v22 * v22) + vaddv_f32(v23));
    v14.f32[0] = fabsf(v23.f32[0]);
    v8.i32[0] = 925353388;
    if (v14.f32[0] > 0.00001)
    {
      *(int32x2_t *)v14.f32 = vdup_lane_s32((int32x2_t)v23, 0);
      *(float32x2_t *)v24.f32 = vdiv_f32(v21, *(float32x2_t *)v14.f32);
      v24.i64[1] = COERCE_UNSIGNED_INT(v22 / v23.f32[0]);
      float32x4_t v41 = v24;
    }
LABEL_16:
    orthonormalFrame(forward:up:)(&v43, v41, v12, v14, v8);
    goto LABEL_17;
  }
  __break(1u);
LABEL_25:
  __break(1u);
}

uint64_t specialized CurveExtruder.init(shape:accumulatedOutlineIndexCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_29;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 != *(_DWORD *)(a2 + 32 + 4 * v2 - 4))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 >> 61) {
    goto LABEL_31;
  }
  uint64_t v44 = a2 + 32;
  uint64_t v45 = *(void *)(a2 + 16);
  unsigned int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4 * v3, 0, MEMORY[0x263F8EE78]);
  swift_bridgeObjectRetain();
  uint64_t v6 = v44;
  uint64_t v5 = v45;
  unsigned int v7 = 0;
  uint64_t v8 = 0;
  while (2)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 4 * v8);
    unsigned int v10 = v9 - v7;
    if (v9 <= v7)
    {
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    int v11 = 0;
    ++v8;
    do
    {
      int v12 = v7 + v11;
      if (v7 + v11 >= v9)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      unsigned int v13 = (v11 + 1) % v10;
      unsigned int v14 = v13 + v7;
      if (__CFADD__(v13, v7)) {
        goto LABEL_25;
      }
      unint64_t v16 = *((void *)v4 + 2);
      unint64_t v15 = *((void *)v4 + 3);
      int64_t v17 = v15 >> 1;
      unint64_t v18 = v16 + 1;
      if (v15 >> 1 <= v16)
      {
        unint64_t v26 = v4;
        uint64_t v27 = v8;
        uint64_t v28 = v9;
        float32x4_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v26);
        uint64_t v9 = v28;
        uint64_t v8 = v27;
        uint64_t v6 = v44;
        uint64_t v5 = v45;
        unsigned int v4 = v29;
        unint64_t v15 = *((void *)v29 + 3);
        int64_t v17 = v15 >> 1;
      }
      *((void *)v4 + 2) = v18;
      *(_DWORD *)&v4[4 * v16 + 32] = v12;
      unint64_t v19 = v16 + 2;
      if (v17 < (uint64_t)(v16 + 2))
      {
        id v30 = v4;
        uint64_t v41 = v8;
        uint64_t v31 = v9;
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 2, 1, v30);
        uint64_t v9 = v31;
        uint64_t v8 = v41;
        uint64_t v6 = v44;
        uint64_t v5 = v45;
        unsigned int v4 = v32;
      }
      *((void *)v4 + 2) = v19;
      *(_DWORD *)&v4[4 * v18 + 32] = v14;
      if (HIDWORD(v3)) {
        goto LABEL_32;
      }
      BOOL v20 = __CFADD__(v14, v3);
      int v21 = v14 + v3;
      if (v20) {
        goto LABEL_26;
      }
      unint64_t v22 = *((void *)v4 + 3);
      unint64_t v23 = v16 + 3;
      if ((uint64_t)(v16 + 3) > (uint64_t)(v22 >> 1))
      {
        float32x4_t v33 = v4;
        uint64_t v42 = v8;
        uint64_t v34 = v9;
        long long v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v16 + 3, 1, v33);
        uint64_t v9 = v34;
        uint64_t v8 = v42;
        uint64_t v6 = v44;
        uint64_t v5 = v45;
        unsigned int v4 = v35;
      }
      *((void *)v4 + 2) = v23;
      *(_DWORD *)&v4[4 * v19 + 32] = v21;
      int v24 = v12 + v3;
      if (__CFADD__(v12, v3)) {
        goto LABEL_27;
      }
      unint64_t v25 = *((void *)v4 + 3);
      if ((uint64_t)(v16 + 4) > (uint64_t)(v25 >> 1))
      {
        long long v36 = v4;
        uint64_t v37 = v8;
        uint64_t v38 = v9;
        float32x4_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v16 + 4, 1, v36);
        uint64_t v9 = v38;
        uint64_t v8 = v37;
        uint64_t v6 = v44;
        uint64_t v5 = v45;
        unsigned int v4 = v39;
      }
      *((void *)v4 + 2) = v16 + 4;
      *(_DWORD *)&v4[4 * v23 + 32] = v24;
      ++v11;
    }
    while (v10 != v11);
    unsigned int v7 = v9;
    if (v8 != v5) {
      continue;
    }
    return a1;
  }
}

uint64_t specialized CurveExtruder.populate(indexBuffer:curveLength:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)(a5 + 16);
  if ((unsigned __int128)(v5 * (__int128)v6) >> 64 != (v5 * v6) >> 63)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v5 * v6 == a2)
  {
    if (v5 < 0) {
      goto LABEL_28;
    }
    if (a3 == 1) {
      return result;
    }
    uint64_t v7 = 0;
    while (v7 != v5)
    {
      if (v6)
      {
        uint64_t v8 = v7 * v6;
        if ((unsigned __int128)(v7 * (__int128)v6) >> 64 != (v7 * v6) >> 63) {
          goto LABEL_23;
        }
        uint64_t v9 = *(void *)(a4 + 16);
        unint64_t v10 = v7 * v9;
        if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63) {
          goto LABEL_24;
        }
        uint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = v8 + v11;
          if (__OFADD__(v8, v11)) {
            break;
          }
          if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10)) {
            goto LABEL_29;
          }
          int v13 = *(_DWORD *)(a5 + 32 + 4 * v11);
          BOOL v14 = __CFADD__(v13, v10);
          int v15 = v13 + v10;
          if (v14) {
            goto LABEL_21;
          }
          ++v11;
          *(_DWORD *)(result + 4 * v12) = v15;
          if (v6 == v11) {
            goto LABEL_7;
          }
        }
        __break(1u);
LABEL_21:
        __break(1u);
        break;
      }
LABEL_7:
      if (++v7 == v5) {
        return result;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CurveExtruder.populate(positionBuffer:tangentBuffer:bitangentBuffer:normalBuffer:sweepCurve:)(uint64_t result, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != a4 || a2 != a6 || a2 != a8)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(a9 + 16);
  uint64_t v13 = *(void *)(a10 + 16);
  if ((unsigned __int128)((uint64_t)v12 * (__int128)v13) >> 64 != (uint64_t)(v12 * v13) >> 63)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if ((uint64_t)(v12 * v13) > a2)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  if (v12)
  {
    uint64_t v14 = 0;
    uint64_t v15 = a9 + 32;
    while (1)
    {
      uint64_t v16 = v14 + 1;
      unint64_t v17 = (uint64_t)(v12 - 1) >= v14 + 1 ? v14 + 1 : v12 - 1;
      uint64_t v18 = v14 <= 1 ? 1 : v14;
      uint64_t v19 = v18 - 1;
      if (v18 - 1 >= v12) {
        break;
      }
      if (v17 >= v12) {
        goto LABEL_29;
      }
      if (v13)
      {
        uint64_t v20 = v14 * v13;
        if ((unsigned __int128)(v14 * (__int128)v13) >> 64 != (v14 * v13) >> 63) {
          goto LABEL_30;
        }
        uint64_t v21 = 0;
        unint64_t v22 = (float32x4_t *)(v15 + (v14 << 6));
        float32x4_t v23 = *v22;
        float32x4_t v24 = v22[1];
        float32x4_t v25 = v22[2];
        float32x4_t v26 = v22[3];
        uint64_t v27 = (float32x4_t *)(v15 + (v19 << 6));
        float32x4_t v28 = *v27;
        float32x4_t v29 = v27[1];
        float32x4_t v30 = v27[2];
        float32x4_t v31 = v27[3];
        uint64_t v32 = (float32x4_t *)(v15 + (v17 << 6));
        float32x4_t v33 = *v32;
        float32x4_t v34 = v32[1];
        float32x4_t v35 = v32[2];
        float32x4_t v36 = v32[3];
        float32x4_t v37 = vmlaq_f32(vaddq_f32(v25, vmlaq_f32(vmulq_f32(v23, (float32x4_t)0), (float32x4_t)0, v24)), (float32x4_t)0, v26);
        v37.i32[3] = 0;
        uint64_t v38 = (double *)(a10 + 48);
        while (1)
        {
          uint64_t v41 = v20 + v21;
          if (__OFADD__(v20, v21)) {
            break;
          }
          float v42 = *(v38 - 2);
          float v43 = *(v38 - 1);
          float32x4_t v44 = vsubq_f32(vaddq_f32(v36, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v33, v42), v34, v43), (float32x4_t)0, v35)), vaddq_f32(v31, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v28, v42), v29, v43), (float32x4_t)0, v30)));
          v10.f32[0] = sqrtf(vmuls_lane_f32(v44.f32[2], v44, 2)+ vaddv_f32(vmul_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32)));
          float32x4_t v45 = v37;
          if (fabsf(v10.f32[0]) > 0.00001)
          {
            *(float32x2_t *)v45.f32 = vdiv_f32(*(float32x2_t *)v44.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.f32, 0));
            v45.f32[2] = v44.f32[2] / v10.f32[0];
            v45.i32[3] = 0;
          }
          float v46 = *v38;
          float v47 = v38[1];
          float32x4_t v48 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v23, v46), v24, v47), (float32x4_t)0, v25), (float32x4_t)0, v26);
          float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
          float32x4_t v49 = vmlaq_f32(vmulq_f32(v10, vnegq_f32(v48)), v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
          float32x4_t v50 = vmulq_f32(v49, v49);
          *(float *)v11.i32 = sqrtf(vmuls_lane_f32(v49.f32[1], *(float32x2_t *)v49.f32, 1)+ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), v50).f32[0]);
          long long v51 = 0uLL;
          if (fabsf(*(float *)v11.i32) > 0.00001)
          {
            v52.i32[0] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u32[0];
            v52.i32[1] = v49.i32[0];
            *(float32x2_t *)&long long v51 = vdiv_f32(v52, (float32x2_t)vdup_lane_s32(v11, 0));
            *((float *)&v51 + 2) = v49.f32[1] / *(float *)v11.i32;
            HIDWORD(v51) = 0;
          }
          ++v21;
          float32x4_t v39 = vaddq_f32(v26, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v23, v42), v24, v43), (float32x4_t)0, v25));
          v39.i32[3] = 0;
          uint64_t v40 = 16 * v41;
          v48.i32[3] = 0;
          *(float32x4_t *)(result + v40) = v39;
          *(float32x4_t *)(a3 + v40) = v48;
          *(float32x4_t *)(a5 + v40) = v45;
          *(_OWORD *)(a7 + v40) = v51;
          v38 += 4;
          if (v13 == v21) {
            goto LABEL_8;
          }
        }
        __break(1u);
        break;
      }
LABEL_8:
      uint64_t v14 = v16;
      if (v16 == v12) {
        return result;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurveExtruder()
{
  return &type metadata for CurveExtruder;
}

ValueMetadata *type metadata accessor for CurveExtruder.ShapePoint()
{
  return &type metadata for CurveExtruder.ShapePoint;
}

uint64_t extrude(text:textOptions:shapeOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v156 = *MEMORY[0x263EF8340];
  outlined init with take of CGRect?(a2, (uint64_t)v155);
  outlined init with copy of MeshResource.ShapeExtrusionOptions(a3, (uint64_t)&a);
  LODWORD(v4) = 1013157433;
  float v151 = v151 * 0.013889;
  uint64_t v5 = *(void *)&a;
  unsigned __int8 v6 = b_low;
  v147.CGFloat a = a;
  LOBYTE(v147.b) = b_low;
  MeshResource.ShapeExtrusionOptions.ExtrusionMethod.scaled(by:)((uint64_t)&matrix, v4);
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  CGFloat a = matrix.a;
  unsigned __int8 b_low = LOBYTE(matrix.b);
  uint64_t v7 = AttributedString.createTextFrame(containerRect:)((uint64_t)v155);
  uint64_t v8 = CTFrameGetPath(v7);
  BoundingBodouble x = CGPathGetBoundingBox(v8);
  double x = BoundingBox.origin.x;
  double y = BoundingBox.origin.y;

  frame = v7;
  CFArrayRef v11 = CTFrameGetLines(v7);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v13 = specialized _arrayForceCast<A, B>(_:)(v12);
  swift_bridgeObjectRelease();
  unint64_t v118 = v13 >> 62;
  unint64_t v119 = v13;
  if (!(v13 >> 62))
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_114:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  uint64_t v15 = specialized Array.init(repeating:count:)(v14, 0.0, 0.0);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v15 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16), 0, (void *)v15);
  }
  v157.location = 0;
  v157.length = v14;
  uint64_t v117 = v15 + 32;
  CTFrameGetLineOrigins(frame, v157, (CGPoint *)(v15 + 32));
  CGFloat v16 = COERCE_DOUBLE(specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]));
  CTFontRef UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, 12.0, 0);
  if (!UIFontForLanguage) {
    __break(1u);
  }
  CTFontRef v18 = UIFontForLanguage;
  uint64_t v19 = (const void *)*MEMORY[0x263F039A0];
  CFDictionaryRef v20 = CTFrameGetFrameAttributes(frame);
  if (v20)
  {
    CFDictionaryRef v21 = v20;
    Value = (void *)CFDictionaryGetValue(v20, v19);

    if (Value)
    {

      CTFontRef v18 = Value;
    }
  }
  float v23 = x;
  float v24 = y;
  swift_bridgeObjectRetain();
  unint64_t v125 = 0;
  double x = 0.013888889;
  uint64_t v123 = v15;
  id v120 = v19;
  uint64_t v121 = v18;
  if (!v118)
  {
LABEL_10:
    uint64_t v25 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_12:
    if (v125 == v25)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_102;
    }
    if ((v119 & 0xC000000000000001) != 0)
    {
      unint64_t v26 = v125;
      uint64_t v27 = (const __CTLine *)MEMORY[0x22A689930](v125, v119);
    }
    else
    {
      unint64_t v26 = v125;
      if (v125 >= *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_112;
      }
      uint64_t v27 = (const __CTLine *)*(id *)(v119 + 32 + 8 * v125);
    }
    CTLineRef line = v27;
    unint64_t v28 = *(void *)(v15 + 16);
    if (v26 == v28) {
      break;
    }
    if (v26 >= v28) {
      goto LABEL_113;
    }
    float32x4_t v29 = (double *)(v117 + 16 * v26);
    double y = *v29;
    double v30 = v29[1];
    CFArrayRef v31 = CTLineGetGlyphRuns(v27);
    unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v32 >> 62)
    {
      type metadata accessor for CTRunRef(0);
      swift_bridgeObjectRetain();
      unint64_t v33 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for CTRunRef(0);
      if (swift_dynamicCastMetatype())
      {
        swift_bridgeObjectRelease();
        unint64_t v33 = v32;
      }
      else
      {
        unint64_t v112 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v112)
        {
          unint64_t v113 = 0;
          while (1)
          {
            if (v113 >= v112) {
              goto LABEL_110;
            }
            swift_unknownObjectRetain();
            if (!swift_dynamicCastUnknownClass()) {
              break;
            }
            ++v113;
            swift_unknownObjectRelease();
            unint64_t v112 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v113 == v112) {
              goto LABEL_90;
            }
          }
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v33 = v32 & 0xFFFFFFFFFFFFFF8 | 1;
        }
        else
        {
LABEL_90:
          unint64_t v33 = v32;
          swift_bridgeObjectRelease();
        }
      }
    }
    unint64_t v127 = v33;
    if (!(v33 >> 62))
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v34) {
        goto LABEL_23;
      }
      goto LABEL_96;
    }
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v34)
    {
LABEL_23:
      unint64_t v35 = 0;
      uint64_t v126 = v34;
      float v36 = y;
      float v37 = v30;
      float v38 = v23 + v36;
      float v39 = v24 + v37;
      while (1)
      {
        if ((v127 & 0xC000000000000001) != 0)
        {
          uint64_t v40 = (const __CTRun *)MEMORY[0x22A689930](v35);
        }
        else
        {
          if (v35 >= *(void *)((v127 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_111;
          }
          uint64_t v40 = (const __CTRun *)*(id *)(v127 + 32 + 8 * v35);
        }
        run = v40;
        BOOL v41 = __OFADD__(v35, 1);
        unint64_t v42 = v35 + 1;
        if (v41) {
          break;
        }
        unint64_t v128 = v42;
        CFDictionaryRef v43 = CTRunGetAttributes(v40);
        float32x4_t v44 = v18;
        float32x4_t v45 = (void *)CFDictionaryGetValue(v43, v19);
        CTFontRef font = v44;
        if (v45)
        {
          float v46 = v45;

          CTFontRef font = v46;
        }
        CFIndex GlyphCount = CTRunGetGlyphCount(run);
        if (GlyphCount < 0)
        {
LABEL_117:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        CFIndex v48 = GlyphCount;
        CFDictionaryRef v129 = v43;
        if (GlyphCount)
        {
          uint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v49 + 16) = v48;
          bzero((void *)(v49 + 32), 2 * v48);
          type metadata accessor for CGPoint(0);
          uint64_t v50 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v50 + 16) = v48;
          uint64_t v142 = v50;
          bzero((void *)(v50 + 32), 16 * v48);
        }
        else
        {
          uint64_t v49 = MEMORY[0x263F8EE78];
          uint64_t v142 = MEMORY[0x263F8EE78];
        }
        v158.location = 0;
        v158.length = v48;
        CTRunGetGlyphs(run, v158, (CGGlyph *)(v49 + 32));
        v159.location = 0;
        v159.length = v48;
        CTRunGetPositions(run, v159, (CGPoint *)(v142 + 32));
        uint64_t v51 = *(void *)(v49 + 16);
        if (v51)
        {
          uint64_t v134 = *(void *)(v142 + 16);
          if (v134)
          {
            uint64_t v122 = v44;
            CGGlyph v52 = *(_WORD *)(v49 + 32);
            swift_bridgeObjectRetain();
            unint64_t v53 = 0;
            v54 = (double *)(swift_bridgeObjectRetain() + 40);
            uint64_t v133 = v49;
            v55 = font;
            while (1)
            {
              if (v53 >= *(void *)(v142 + 16))
              {
                __break(1u);
LABEL_104:
                __break(1u);
LABEL_105:
                __break(1u);
LABEL_106:
                __break(1u);
LABEL_107:
                __break(1u);
LABEL_108:
                __break(1u);
                goto LABEL_109;
              }
              CGFloat v56 = v16;
              double v57 = *(v54 - 1);
              double v58 = *v54;
              v59 = (__CFString *)CTFontCopyFullName(v55);
              *(void *)&long long v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              *((void *)&v145 + 1) = v60;

              double y = CTFontGetSize(v55);
              CFStringRef v61 = CTFontCopyNameForGlyph(v55, v52);
              if (v61)
              {
                uint64_t v62 = (__CFString *)v61;
                matrix.CGFloat a = 0.0;
                matrix.CGFloat b = 0.0;
                static String._conditionallyBridgeFromObjectiveC(_:result:)();

                CGFloat v64 = matrix.a;
                CGFloat b = matrix.b;
              }
              else
              {
                CGFloat v64 = 0.0;
                CGFloat b = 0.0;
              }
              CTFontSymbolicTraits SymbolicTraits = CTFontGetSymbolicTraits(v55);
              v66 = (void *)*((void *)&v145 + 1);
              long long v152 = v145;
              *(double *)&long long v153 = y;
              CGFloat v140 = v64;
              *((CGFloat *)&v153 + 1) = v64;
              *(CGFloat *)&long long v154 = b;
              WORD4(v154) = v52;
              CTFontSymbolicTraits v138 = SymbolicTraits;
              HIDWORD(v154) = SymbolicTraits;
              float v67 = v57;
              float v68 = v58;
              *(float *)&uint64_t v69 = (float)(v38 + v67) * 0.013889;
              *((float *)&v69 + 1) = (float)(v39 + v68) * 0.013889;
              uint64_t v143 = v69;
              CGFloat v70 = v56;
              CGFloat v144 = b;
              if (!*(void *)(*(void *)&v56 + 16)) {
                goto LABEL_52;
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v152);
              if ((v71 & 1) == 0) {
                break;
              }
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              matrix.CGFloat a = v56;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v152);
              uint64_t v75 = *(void *)(*(void *)&v56 + 16);
              BOOL v76 = (v73 & 1) == 0;
              uint64_t v77 = v75 + v76;
              if (__OFADD__(v75, v76)) {
                goto LABEL_107;
              }
              char v78 = v73;
              if (*(void *)(*(void *)&v56 + 24) >= v77)
              {
                if (isUniquelyReferenced_nonNull_native)
                {
                  if ((v73 & 1) == 0) {
                    goto LABEL_108;
                  }
                }
                else
                {
                  specialized _NativeDictionary.copy()();
                  if ((v78 & 1) == 0) {
                    goto LABEL_108;
                  }
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v77, isUniquelyReferenced_nonNull_native);
                unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v152);
                if ((v78 & 1) != (v80 & 1)) {
                  goto LABEL_116;
                }
                unint64_t v74 = v79;
                if ((v78 & 1) == 0) {
                  goto LABEL_108;
                }
              }
              unint64_t v98 = *(void *)(*(void *)&matrix.a + 56) + (v74 << 6);
              uint64_t v99 = *(void *)(v98 + 8);
              uint64_t v146 = *(void *)v98;
              double y = *(double *)(v98 + 16);
              uint64_t v100 = *(void *)(v98 + 24);
              uint64_t v141 = *(void *)(v98 + 32);
              __int16 v139 = *(_WORD *)(v98 + 40);
              int v137 = *(_DWORD *)(v98 + 44);
              unint64_t v101 = *(void **)(v98 + 56);
              uint64_t v130 = *(void *)(v98 + 48);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v101[2] + 1, 1, v101);
              }
              unint64_t v103 = v101[2];
              unint64_t v102 = v101[3];
              if (v103 >= v102 >> 1) {
                unint64_t v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v102 > 1), v103 + 1, 1, v101);
              }
              v101[2] = v103 + 1;
              v101[v103 + 4] = v143;
              uint64_t v104 = *(void *)&matrix.a;
              if (v99)
              {
                unint64_t v105 = *(void *)(*(void *)&matrix.a + 56) + (v74 << 6);
                *(void *)unint64_t v105 = v146;
                *(void *)(v105 + 8) = v99;
                *(double *)(v105 + 16) = y;
                *(void *)(v105 + 24) = v100;
                *(void *)(v105 + 32) = v141;
                *(_WORD *)(v105 + 40) = v139;
                *(_DWORD *)(v105 + 44) = v137;
                *(void *)(v105 + 48) = v130;
                *(void *)(v105 + 56) = v101;
              }
              else
              {
                swift_arrayDestroy();
                specialized _NativeDictionary._delete(at:)(v74, v104);
              }
              uint64_t v106 = v133;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              CGFloat v16 = matrix.a;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_78:
              if (v51 - 1 == v53) {
                goto LABEL_84;
              }
              if (v53 + 1 >= *(void *)(v106 + 16)) {
                goto LABEL_104;
              }
              CGGlyph v52 = *(_WORD *)(v106 + 2 * v53++ + 34);
              v54 += 2;
              if (v134 == v53)
              {
LABEL_84:

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v15 = v123;
                uint64_t v19 = v120;
                CTFontRef v18 = v121;
                goto LABEL_25;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_52:
            CGAffineTransformMakeScale(&v147, 0.013888889, 0.013888889);
            matridouble x = v147;
            uint64_t v81 = CTFontCreatePathForGlyph(v55, v52, &matrix);
            if (v81)
            {
              Swift::String v82 = v81;
              uint64_t v83 = extrude(path:options:)(v81, (uint64_t)&a);
              if (v131)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)&a);
                return (uint64_t)v66;
              }
              uint64_t v136 = v83;
            }
            else
            {
              uint64_t v136 = MEMORY[0x263F8EE78];
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
            uint64_t v84 = swift_allocObject();
            *(_OWORD *)(v84 + 16) = xmmword_22830EC60;
            *(void *)(v84 + 32) = v143;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v85 = swift_isUniquelyReferenced_nonNull_native();
            matrix.CGFloat a = v70;
            unint64_t v86 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v152);
            CGFloat v88 = v70;
            unint64_t v89 = v86;
            uint64_t v90 = *(void *)(*(void *)&v88 + 16);
            BOOL v91 = (v87 & 1) == 0;
            uint64_t v92 = v90 + v91;
            if (__OFADD__(v90, v91)) {
              goto LABEL_105;
            }
            char v93 = v87;
            if (*(void *)(*(void *)&v88 + 24) >= v92)
            {
              if (v85)
              {
                CGFloat v96 = matrix.a;
                if ((v87 & 1) == 0) {
                  goto LABEL_75;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                CGFloat v96 = matrix.a;
                if ((v93 & 1) == 0) {
                  goto LABEL_75;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v92, v85);
              unint64_t v94 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v152);
              if ((v93 & 1) != (v95 & 1))
              {
LABEL_116:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                goto LABEL_117;
              }
              unint64_t v89 = v94;
              CGFloat v96 = matrix.a;
              if ((v93 & 1) == 0)
              {
LABEL_75:
                *(void *)(*(void *)&v96 + 8 * (v89 >> 6) + 64) |= 1 << v89;
                uint64_t v107 = (_OWORD *)(*(void *)(*(void *)&v96 + 48) + 48 * v89);
                long long v108 = v153;
                *uint64_t v107 = v152;
                v107[1] = v108;
                v107[2] = v154;
                unint64_t v109 = *(void *)(*(void *)&v96 + 56) + (v89 << 6);
                *(_OWORD *)unint64_t v109 = v145;
                *(double *)(v109 + 16) = y;
                *(CGFloat *)(v109 + 24) = v140;
                *(CGFloat *)(v109 + 32) = v144;
                *(_WORD *)(v109 + 40) = v52;
                *(_DWORD *)(v109 + 44) = v138;
                *(void *)(v109 + 48) = v136;
                *(void *)(v109 + 56) = v84;
                uint64_t v110 = *(void *)(*(void *)&v96 + 16);
                BOOL v41 = __OFADD__(v110, 1);
                uint64_t v111 = v110 + 1;
                if (v41) {
                  goto LABEL_106;
                }
                CGFloat v16 = v96;
                *(void *)(*(void *)&v96 + 16) = v111;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                goto LABEL_77;
              }
            }
            unint64_t v97 = *(void *)(*(void *)&v96 + 56) + (v89 << 6);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_OWORD *)unint64_t v97 = v145;
            *(double *)(v97 + 16) = y;
            *(CGFloat *)(v97 + 24) = v140;
            *(CGFloat *)(v97 + 32) = v144;
            *(_WORD *)(v97 + 40) = v52;
            *(_DWORD *)(v97 + 44) = v138;
            *(void *)(v97 + 48) = v136;
            *(void *)(v97 + 56) = v84;
            CGFloat v16 = v96;
LABEL_77:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v106 = v133;
            v55 = font;
            goto LABEL_78;
          }
        }

LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        unint64_t v35 = v128;
        if (v128 == v126) {
          goto LABEL_96;
        }
      }
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
LABEL_96:
    ++v125;

    swift_bridgeObjectRelease();
    if (!v118) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_102:
  swift_bridgeObjectRelease();
  uint64_t v115 = swift_bridgeObjectRetain();
  v66 = specialized _copyCollectionToContiguousArray<A>(_:)(v115);

  swift_bridgeObjectRelease_n();
  outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)&a);
  return (uint64_t)v66;
}

CTFrameRef AttributedString.createTextFrame(containerRect:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of CGRect?(a1, (uint64_t)v32);
  CGFloat v4 = *(double *)v32;
  CGFloat v5 = *(double *)&v32[1];
  double v6 = *(double *)&v32[2];
  CGFloat v7 = *(double *)&v32[3];
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  CFArrayRef v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 40;
  __n128 v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v32 - v14 + 40;
  CGFloat v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v16((char *)v32 - v14 + 40, v2, v8, v13);
  outlined init with take of CGRect?(a1, (uint64_t)v33);
  if (v33[32] == 1)
  {
    double v6 = AttributedString.computeSuggestedFrameSize(lineWidth:)(1.79769313e308);
    CGFloat v7 = v17;
    CGFloat v4 = 0.0;
    CGFloat v5 = 0.0;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, CFBooleanRef?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v19 = (void *)*MEMORY[0x263F03C70];
  CFDictionaryRef v20 = (void *)*MEMORY[0x263EFFB38];
  *(void *)(inited + 32) = *MEMORY[0x263F03C70];
  *(void *)(inited + 40) = v20;
  id v21 = v20;
  id v22 = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v35.origin.double x = v4;
  v35.origin.double y = v5;
  v35.size.width = v6;
  v35.size.height = v7;
  float v23 = CGPathCreateWithRect(v35, 0);
  type metadata accessor for NSAttributedString();
  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, v2, v8);
  float v24 = NSAttributedString.init(_:)();
  id v25 = objc_msgSend(v24, sel_length);

  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, v2, v8);
  CFAttributedStringRef v26 = (const __CFAttributedString *)NSAttributedString.init(_:)();
  uint64_t v27 = CTFramesetterCreateWithAttributedString(v26);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFBooleanRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v34.location = 0;
  v34.length = (CFIndex)v25;
  CTFrameRef Frame = CTFramesetterCreateFrame(v27, v34, v23, isa);

  return Frame;
}

double AttributedString.computeSuggestedFrameSize(lineWidth:)(CGFloat a1)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  double v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for NSAttributedString();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, v3);
  CFAttributedStringRef v7 = (const __CFAttributedString *)NSAttributedString.init(_:)();
  uint64_t v8 = CTFramesetterCreateWithAttributedString(v7);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef?, CFBooleanRef?)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  uint64_t v10 = (void *)*MEMORY[0x263F03C70];
  CFArrayRef v11 = (void *)*MEMORY[0x263EFFB38];
  *(void *)(inited + 32) = *MEMORY[0x263F03C70];
  *(void *)(inited + 40) = v11;
  id v12 = v11;
  id v13 = v10;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFStringRef?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFBooleanRef?);
  lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?();
  isCGFloat a = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19.height = 1.79769313e308;
  v18.location = 0;
  v18.length = 0;
  v19.width = a1;
  *(void *)&double v15 = *(_OWORD *)&CTFramesetterSuggestFrameSizeWithConstraints(v8, v18, isa, v19, 0);

  return v15;
}

Swift::Int ExtrudedGlyphDescriptor.Info.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  String.hash(into:)();
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 44);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Swift::UInt16 v4 = *(_WORD *)(v0 + 40);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExtrudedGlyphDescriptor.Info()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 44);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 40);
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExtrudedGlyphDescriptor.Info()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  Swift::UInt32 v2 = *(_DWORD *)(v0 + 44);
  Swift::UInt16 v3 = *(_WORD *)(v0 + 40);
  Hasher.init(_seed:)();
  String.hash(into:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ExtrudedGlyphDescriptor.Info(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static ExtrudedGlyphDescriptor.Info.== infix(_:_:)((uint64_t)v7, (uint64_t)v8);
}

void MeshResource.ShapeExtrusionOptions.ExtrusionMethod.scaled(by:)(uint64_t a1@<X8>, double a2@<D0>)
{
  long long v4 = *(float32x4_t **)v2;
  int v5 = *(unsigned __int8 *)(v2 + 8);
  if (*(unsigned char *)(v2 + 8))
  {
    if (v5 == 1)
    {
      int64_t v6 = v4[1].i64[0];
      uint64_t v7 = MEMORY[0x263F8EE78];
      if (v6)
      {
        uint64_t v46 = MEMORY[0x263F8EE78];
        float v43 = *(float *)&a2;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        float v8 = v43;
        uint64_t v7 = v46;
        uint64_t v9 = v4 + 2;
        unint64_t v10 = *(void *)(v46 + 16);
        do
        {
          float32x4_t v11 = *v9;
          uint64_t v47 = v7;
          unint64_t v12 = *(void *)(v7 + 24);
          if (v10 >= v12 >> 1)
          {
            float32x4_t v41 = *v9;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v10 + 1, 1);
            float32x4_t v11 = v41;
            float v8 = v43;
            uint64_t v7 = v47;
          }
          *(float32x2_t *)&long long v13 = vmul_n_f32(*(float32x2_t *)v11.f32, v8);
          *((void *)&v13 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v8, v11, 2));
          *(void *)(v7 + 16) = v10 + 1;
          *(_OWORD *)(v7 + 16 * v10 + 32) = v13;
          ++v9;
          ++v10;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      LODWORD(v14) = vdupq_lane_s32(*(int32x2_t *)&a2, 0).u32[0];
      if (one-time initialization token for identity != -1)
      {
        float v45 = v14;
        swift_once();
        float v14 = v45;
      }
      *(double *)v15.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(0.0, *(float32x4_t *)&zmmword_22830EC90[48], v14);
      int64_t v19 = v4[1].i64[0];
      uint64_t v7 = MEMORY[0x263F8EE78];
      if (v19)
      {
        uint64_t v48 = MEMORY[0x263F8EE78];
        float32x4_t v44 = v15;
        float32x4_t v40 = v17;
        float32x4_t v42 = v16;
        float32x4_t v39 = v18;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        float32x4_t v21 = v39;
        float32x4_t v20 = v40;
        float32x4_t v22 = v42;
        float32x4_t v23 = v44;
        uint64_t v24 = 0;
        uint64_t v7 = v48;
        unint64_t v25 = *(void *)(v48 + 16);
        unint64_t v26 = v25 << 6;
        uint64_t v27 = v4 + 3;
        do
        {
          float32x4_t v28 = v27[v24 - 1];
          float32x4_t v29 = v27[v24];
          float32x4_t v30 = v27[v24 + 1];
          float32x4_t v31 = v27[v24 + 2];
          uint64_t v49 = v7;
          unint64_t v32 = *(void *)(v7 + 24);
          unint64_t v33 = v25 + 1;
          if (v25 >= v32 >> 1)
          {
            float32x4_t v37 = v27[v24 + 1];
            float32x4_t v38 = v27[v24 + 2];
            float32x4_t v35 = v27[v24 - 1];
            float32x4_t v36 = v27[v24];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v25 + 1, 1);
            float32x4_t v28 = v35;
            float32x4_t v29 = v36;
            float32x4_t v30 = v37;
            float32x4_t v31 = v38;
            float32x4_t v21 = v39;
            float32x4_t v20 = v40;
            float32x4_t v22 = v42;
            float32x4_t v23 = v44;
            uint64_t v7 = v49;
          }
          *(void *)(v7 + 16) = v33;
          CFRange v34 = (float32x4_t *)(v7 + v26 + v24 * 16);
          v34[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v28.f32[0]), v22, *(float32x2_t *)v28.f32, 1), v20, v28, 2), v21, v28, 3);
          v34[3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v29.f32[0]), v22, *(float32x2_t *)v29.f32, 1), v20, v29, 2), v21, v29, 3);
          v34[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v30.f32[0]), v22, *(float32x2_t *)v30.f32, 1), v20, v30, 2), v21, v30, 3);
          v34[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, v31.f32[0]), v22, *(float32x2_t *)v31.f32, 1), v20, v31, 2), v21, v31, 3);
          v24 += 4;
          unint64_t v25 = v33;
          --v19;
        }
        while (v19);
      }
    }
  }
  else
  {
    uint64_t v7 = COERCE_UNSIGNED_INT(*(float *)&v4 * *(float *)&a2);
  }
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v5;
}

BOOL specialized static ExtrudedGlyphDescriptor.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v7)
  {
    if (!v8) {
      goto LABEL_14;
    }
    return 0;
  }
  if (!v8) {
    return 0;
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v7 == v8
    || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
LABEL_14:
    if (*(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40)) {
      return *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44);
    }
    return 0;
  }
  return result;
}

uint64_t specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  uint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    goto LABEL_32;
  }
  uint64_t v3 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  char v5 = (void *)MEMORY[0x263F8EE78];
  uint64_t v34 = v3;
  uint64_t v35 = v2;
  while (1)
  {
    uint64_t v7 = v3 + (v4 << 6);
    uint64_t v43 = *(void *)(*(void *)(v7 + 56) + 16);
    if (v43) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_4:
    ++v4;
    uint64_t v6 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4 == v2)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v44;
      goto LABEL_34;
    }
  }
  uint64_t v42 = *(void *)(v7 + 56);
  unint64_t v8 = *(void *)(v44 + 16);
  uint64_t v9 = *(void *)(*(void *)(v7 + 48) + 16);
  int64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 < (uint64_t)v8) {
    goto LABEL_38;
  }
  uint64_t v36 = v4;
  uint64_t v11 = one-time initialization token for identity;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = v42;
  swift_bridgeObjectRetain_n();
  if (v11 != -1) {
    swift_once();
  }
  *(double *)&long long v13 = simd_matrix4x4((float32x4_t)_PromotedConst_5);
  unint64_t v16 = 0;
  long long v38 = v17;
  float v37 = *((float *)&v17 + 2) + 0.0;
  if (v8 <= 0xFFFFFFFF) {
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v18 = v8;
  }
  long long v40 = v14;
  long long v41 = v13;
  long long v39 = v15;
  while (1)
  {
    if (v16 >= *(void *)(v12 + 16))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v8 != v10) {
      break;
    }
LABEL_15:
    if (++v16 == v43)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v34;
      uint64_t v2 = v35;
      uint64_t v4 = v36;
      goto LABEL_4;
    }
  }
  if (v8 >= v10)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (HIDWORD(v8)) {
    goto LABEL_39;
  }
  float32x2_t v19 = *(float32x2_t *)(v42 + 32 + 8 * v16);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  *(float32x2_t *)&long long v20 = vadd_f32(*(float32x2_t *)&v38, v19);
  *((void *)&v20 + 1) = __PAIR64__(HIDWORD(v38), LODWORD(v37));
  unint64_t v21 = v5[2];
  uint64_t v22 = 80 * v21 + 48;
  unint64_t v23 = v8;
  long long v25 = v40;
  long long v24 = v41;
  long long v26 = v39;
  while (1)
  {
    unint64_t v27 = v5[3];
    uint64_t v1 = v21 + 1;
    if (v21 >= v27 >> 1)
    {
      long long v33 = v20;
      float32x4_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v21 + 1, 1, v5);
      long long v20 = v33;
      long long v26 = v39;
      long long v25 = v40;
      long long v24 = v41;
      char v5 = v30;
    }
    v5[2] = v1;
    float32x4_t v28 = (_OWORD *)((char *)v5 + v22);
    *((_DWORD *)v28 - 4) = v23;
    _OWORD *v28 = v24;
    v28[1] = v25;
    v28[2] = v26;
    v28[3] = v20;
    if (v23 + 1 == v10)
    {
      uint64_t v12 = v42;
      goto LABEL_15;
    }
    if ((uint64_t)(v23 + 1) >= v10) {
      break;
    }
    v22 += 80;
    ++v21;
    if (v23++ == v18) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_32:
  char v5 = (void *)v1;
LABEL_34:
  uint64_t v31 = specialized static ExtrudedShapeDescriptor.compile(shapes:instances:)(v1, (uint64_t)v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t outlined init with copy of MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type CFStringRef? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CFStringRef?);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t destroy for ExtrudedGlyphDescriptor()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ExtrudedGlyphDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ExtrudedGlyphDescriptor()
{
  return &type metadata for ExtrudedGlyphDescriptor;
}

uint64_t initializeWithCopy for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

uint64_t assignWithTake for ExtrudedGlyphDescriptor.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  return a1;
}

ValueMetadata *type metadata accessor for ExtrudedGlyphDescriptor.Info()
{
  return &type metadata for ExtrudedGlyphDescriptor.Info;
}

unint64_t lazy protocol witness table accessor for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info()
{
  unint64_t result = lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info;
  if (!lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExtrudedGlyphDescriptor.Info and conformance ExtrudedGlyphDescriptor.Info);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySays5SIMD2VySdGGAKG_17RealityFoundation13CurveExtruderV10ShapePointVs5NeverOTg504_s17g90Foundation15TesselatedShape33_958D9063BE5145611DD1DCE0DF8621CFLLV16extractExtrusion10sweepi51AA14MeshDescriptorVSgSaySo13simd_float4x4aG_tFAA0N8j4V0D5l3Vs5F16VySdG_ASt_tXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v39 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  int64_t v34 = v5;
  uint64_t v38 = a1;
  unint64_t v36 = v4;
  if (v6)
  {
    uint64_t v7 = (long long *)(a1 + 32);
    unint64_t v8 = (long long *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v10 = v6;
    uint64_t v11 = a2;
    while (v4)
    {
      if (!v5) {
        goto LABEL_26;
      }
      long long v12 = *v7;
      long long v13 = *v8;
      unint64_t v15 = *(void *)(v39 + 16);
      unint64_t v14 = *(void *)(v39 + 24);
      if (v15 >= v14 >> 1)
      {
        uint64_t v32 = v11;
        long long v30 = *v8;
        long long v31 = *v7;
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        long long v13 = v30;
        long long v12 = v31;
        uint64_t v11 = v32;
      }
      *(void *)(v39 + 16) = v15 + 1;
      uint64_t v16 = v39 + 32 * v15;
      --v5;
      *(_OWORD *)(v16 + 32) = v12;
      *(_OWORD *)(v16 + 48) = v13;
      --v4;
      ++v8;
      ++v7;
      if (!--v10) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v11 = a2;
LABEL_13:
    if (v36 <= v34)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v39;
    }
    uint64_t v17 = 0;
    if (v6 <= v34) {
      int64_t v18 = v34;
    }
    else {
      int64_t v18 = v6;
    }
    int64_t v19 = v18 - v6;
    unint64_t v20 = v36 - v6;
    int64_t v21 = v34 - v6;
    uint64_t v22 = 16 * v6 + 32;
    uint64_t v23 = v38 + v22;
    uint64_t v24 = v11 + v22;
    while (v20 != v17)
    {
      if (v21 == v17) {
        goto LABEL_24;
      }
      if (v19 == v17) {
        goto LABEL_28;
      }
      long long v25 = *(_OWORD *)(v23 + 16 * v17);
      long long v26 = *(_OWORD *)(v24 + 16 * v17);
      unint64_t v28 = *(void *)(v39 + 16);
      unint64_t v27 = *(void *)(v39 + 24);
      if (v28 >= v27 >> 1)
      {
        uint64_t v33 = v11;
        long long v35 = *(_OWORD *)(v24 + 16 * v17);
        long long v37 = *(_OWORD *)(v23 + 16 * v17);
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        long long v26 = v35;
        long long v25 = v37;
        uint64_t v11 = v33;
      }
      *(void *)(v39 + 16) = v28 + 1;
      uint64_t v29 = v39 + 32 * v28;
      *(_OWORD *)(v29 + 32) = v25;
      *(_OWORD *)(v29 + 48) = v26;
      if (v20 == ++v17) {
        goto LABEL_24;
      }
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  uint64_t v1 = result;
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < 2) {
    return v1;
  }
  unint64_t v3 = 0;
  unint64_t v4 = v2 >> 1;
  for (unint64_t i = v2 + 7; ; --i)
  {
    if (v3 == i - 8) {
      goto LABEL_5;
    }
    unint64_t v6 = *(void *)(v1 + 16);
    if (v3 >= v6) {
      break;
    }
    if (i - 8 >= v6) {
      goto LABEL_12;
    }
    int v7 = *(_DWORD *)(v1 + 4 * v3 + 32);
    int v8 = *(_DWORD *)(v1 + 4 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = result;
    }
    *(_DWORD *)(v1 + 4 * v3 + 32) = v8;
    *(_DWORD *)(v1 + 4 * i) = v7;
LABEL_5:
    if (v4 == ++v3) {
      return v1;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t extrude(path:options:)(const CGPath *a1, uint64_t a2)
{
  if (fabsf(*(float *)(a2 + 56)) <= 0.000001)
  {
    int v7 = 0;
  }
  else
  {
    outlined init with copy of CGPathProviding?(a2 + 16, (uint64_t)v50);
    uint64_t v5 = v51;
    if (v51)
    {
      uint64_t v6 = v52;
      __swift_project_boxed_opaque_existential_1(v50, v51);
      int v7 = (const CGPath *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    }
    else
    {
      outlined destroy of CGPathProviding?((uint64_t)v50);
      if (one-time initialization token for defaultChamferProfile != -1) {
        swift_once();
      }
      int v7 = defaultChamferProfile;
    }
  }
  uint64_t v8 = spansFromCGPath(path:)(a1);
  uint64_t v9 = correctCurveOrientation(curves:)(v8);
  swift_bridgeObjectRelease();
  int64_t v10 = specialized classify<A>(subpaths:)(v9);
  swift_bridgeObjectRelease();
  outlined init with copy of MeshResource.ShapeExtrusionOptions(a2, (uint64_t)v50);
  if (!v7)
  {
    uint64_t v39 = outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)v50);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    goto LABEL_30;
  }
  int v11 = v53;
  outlined destroy of MeshResource.ShapeExtrusionOptions((uint64_t)v50);
  BOOL v46 = v11 != 2;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v45 = *(void *)(a2 + 72);
  long long v12 = v7;
  uint64_t v13 = spansFromCGPath(path:)(v12);
  uint64_t v47 = MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
    uint64_t v17 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v17) {
      goto LABEL_13;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(void *)uint64_t v38 = 0xD000000000000020;
    *(void *)(v38 + 8) = 0x800000022835EEE0;
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v14; ++i)
  {
    uint64_t v16 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v16);
  }
  swift_bridgeObjectRelease_n();
  uint64_t v8 = v47;
  uint64_t v17 = *(void *)(v47 + 16);
  if (!v17) {
    goto LABEL_27;
  }
LABEL_13:
  int64_t v18 = (const double *)(v8 + 40);
  float64x2_t v19 = vld1q_dup_f64(v18);
  v19.f64[0] = *(float64_t *)(v8 + 32);
  if (sqrt(vaddvq_f64(vmulq_f64(v19, v19))) > 0.000001) {
    goto LABEL_24;
  }
  uint64_t v20 = v8 + 32 + 80 * v17;
  uint64_t v21 = v20 - 80;
  int v22 = *(unsigned __int8 *)(v20 - 16);
  uint64_t v23 = v21 + 24;
  uint64_t v24 = v21 + 16;
  uint64_t v25 = v21 + 40;
  uint64_t v26 = v21 + 32;
  uint64_t v27 = v21 + 56;
  uint64_t v28 = v21 + 48;
  if (v22 == 1) {
    uint64_t v28 = v26;
  }
  else {
    uint64_t v25 = v27;
  }
  _ZF = v22 == 0;
  long long v30 = (float64_t *)(v22 ? v28 : v24);
  long long v31 = (const double *)(_ZF ? v23 : v25);
  float64x2_t v32 = vld1q_dup_f64(v31);
  v32.f64[0] = *v30;
  __asm { FMOV            V1.2D, #-1.0 }
  float64x2_t v37 = vaddq_f64(v32, _Q1);
  if (sqrt(vaddvq_f64(vmulq_f64(v37, v37))) > 0.000001)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(void *)uint64_t v38 = 0xD00000000000002FLL;
    *(void *)(v38 + 8) = 0x800000022835EEB0;
LABEL_28:
    *(unsigned char *)(v38 + 16) = 0;
    swift_willThrow();

    goto LABEL_32;
  }
  uint64_t v48 = MEMORY[0x263F8EE78];
  uint64_t v49 = MEMORY[0x263F8EE78];
  trace(path:points:tangents:uniformSegmentsPerSpan:)(v8, (unint64_t)&v49, (unint64_t)&v48, v45, MEMORY[0x263F8EE78]);

  uint64_t v39 = swift_bridgeObjectRelease();
LABEL_30:
  MEMORY[0x270FA5388](v39);
  v43[2] = &v49;
  v43[3] = a2;
  char v44 = v40;
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation5Shape33_958D9063BE5145611DD1DCE0DF8621CFLLVyAF20PiecewiseBezierCurveAHLLVGG_AF08ExtrudedF10DescriptorVsAE_pTg5((void (*)(void *__return_ptr, long long *, uint64_t *))partial apply for closure #2 in extrude(path:options:), (uint64_t)v43, (uint64_t)v10);
  if (!v2)
  {
    uint64_t v8 = v41;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRelease();

LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

void *ExtrudedShapeDescriptor.allDescriptors.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[14];
  uint64_t v56 = v0[13];
  uint64_t v61 = v0[16];
  uint64_t v62 = v0[15];
  uint64_t v71 = v0[18];
  uint64_t v70 = v0[19];
  uint64_t v69 = v0[20];
  uint64_t v68 = v0[21];
  uint64_t v67 = v0[22];
  uint64_t v66 = v0[23];
  uint64_t v65 = v0[24];
  uint64_t v63 = v0[17];
  uint64_t v64 = v0[25];
  uint64_t v59 = v0[26];
  uint64_t v100 = v0[27];
  uint64_t v94 = v0[29];
  uint64_t v95 = v0[28];
  uint64_t v3 = v0[31];
  uint64_t v96 = v0[30];
  uint64_t v4 = v0[32];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[34];
  uint64_t v7 = v0[35];
  uint64_t v8 = v0[36];
  uint64_t v60 = v0[37];
  uint64_t v97 = v0[38];
  uint64_t v9 = v0[40];
  uint64_t v57 = v0[39];
  uint64_t v72 = v0[42];
  uint64_t v73 = v0[41];
  uint64_t v74 = v0[43];
  uint64_t v81 = v0[45];
  uint64_t v82 = v0[44];
  uint64_t v79 = v0[47];
  uint64_t v80 = v0[46];
  uint64_t v77 = v0[49];
  uint64_t v78 = v0[48];
  uint64_t v75 = v0[51];
  uint64_t v76 = v0[50];
  uint64_t v58 = v0[52];
  uint64_t v99 = v0[53];
  uint64_t v83 = v0[55];
  uint64_t v84 = v0[54];
  uint64_t v93 = v0[57];
  uint64_t v92 = v0[58];
  uint64_t v91 = v0[59];
  uint64_t v90 = v0[60];
  uint64_t v89 = v0[61];
  uint64_t v88 = v0[62];
  uint64_t v87 = v0[63];
  uint64_t v85 = v0[56];
  uint64_t v86 = v0[64];
  uint64_t v101 = v9;
  uint64_t v98 = v8;
  if (!v1)
  {
    uint64_t v20 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = v60;
    if (!v2) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  uint64_t v50 = v0[14];
  uint64_t v51 = v0[35];
  uint64_t v52 = v0[34];
  uint64_t v53 = v0[33];
  uint64_t v54 = v0[32];
  uint64_t v55 = v0[31];
  uint64_t v47 = *v0;
  uint64_t v5 = v0[5];
  uint64_t v10 = v0[6];
  uint64_t v12 = v0[8];
  uint64_t v11 = v0[9];
  uint64_t v13 = v0[11];
  uint64_t v44 = v0[10];
  uint64_t v14 = v0[12];
  uint64_t v15 = v0[3];
  uint64_t v16 = v0[2];
  uint64_t v46 = v0[4];
  unsigned __int8 v17 = *((unsigned char *)v0 + 56);
  uint64_t v45 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v15, v46 & 1);
  uint64_t v48 = v10;
  uint64_t v18 = v10;
  unsigned __int8 v19 = v17;
  outlined copy of MeshDescriptor.Primitives?(v5, v18, v17);
  uint64_t v49 = v12;
  outlined copy of MeshDescriptor.Skinning?(v12, v11);
  uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v22 = v20[2];
  unint64_t v21 = v20[3];
  if (v22 >= v21 >> 1) {
    uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
  }
  v20[2] = v22 + 1;
  uint64_t v23 = &v20[13 * v22];
  v23[4] = v47;
  v23[5] = v45;
  v23[6] = v16;
  v23[7] = v15;
  *((unsigned char *)v23 + 64) = v46 & 1;
  v23[9] = v5;
  v23[10] = v48;
  *((unsigned char *)v23 + 88) = v19;
  v23[12] = v49;
  v23[13] = v11;
  v23[14] = v44;
  v23[15] = v13;
  v23[16] = v14;
  uint64_t v4 = v54;
  uint64_t v3 = v55;
  uint64_t v6 = v52;
  LOBYTE(v5) = v53;
  uint64_t v2 = v50;
  uint64_t v7 = v51;
  uint64_t v8 = v98;
  uint64_t v9 = v101;
  uint64_t v24 = v60;
  if (v50)
  {
LABEL_7:
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    char v27 = v5;
    uint64_t v5 = v4;
    uint64_t v28 = v3;
    uint64_t v29 = v24;
    uint64_t v30 = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v61, v63 & 1);
    outlined copy of MeshDescriptor.Primitives?(v71, v70, v69);
    outlined copy of MeshDescriptor.Skinning?(v68, v67);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v32 = v20[2];
    unint64_t v31 = v20[3];
    if (v32 >= v31 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v20);
    }
    v20[2] = v32 + 1;
    uint64_t v33 = &v20[13 * v32];
    v33[4] = v56;
    v33[5] = v30;
    v33[6] = v62;
    v33[7] = v61;
    *((unsigned char *)v33 + 64) = v63 & 1;
    v33[9] = v71;
    v33[10] = v70;
    *((unsigned char *)v33 + 88) = v69;
    v33[12] = v68;
    v33[13] = v67;
    v33[14] = v66;
    v33[15] = v65;
    v33[16] = v64;
    uint64_t v9 = v101;
    uint64_t v24 = v29;
    uint64_t v3 = v28;
    uint64_t v4 = v5;
    LOBYTE(v5) = v27;
    uint64_t v6 = v26;
    uint64_t v7 = v25;
    uint64_t v8 = v98;
  }
LABEL_12:
  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v72, v74 & 1);
    outlined copy of MeshDescriptor.Primitives?(v82, v81, v80);
    outlined copy of MeshDescriptor.Skinning?(v79, v78);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v35 = v20[2];
    unint64_t v34 = v20[3];
    if (v35 >= v34 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v20);
    }
    v20[2] = v35 + 1;
    unint64_t v36 = &v20[13 * v35];
    v36[4] = v57;
    v36[5] = v101;
    v36[6] = v73;
    v36[7] = v72;
    *((unsigned char *)v36 + 64) = v74 & 1;
    v36[9] = v82;
    v36[10] = v81;
    *((unsigned char *)v36 + 88) = v80;
    v36[12] = v79;
    v36[13] = v78;
    v36[14] = v77;
    v36[15] = v76;
    v36[16] = v75;
  }
  if (v99)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v83, v85 & 1);
    outlined copy of MeshDescriptor.Primitives?(v93, v92, v91);
    outlined copy of MeshDescriptor.Skinning?(v90, v89);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v38 = v20[2];
    unint64_t v37 = v20[3];
    if (v38 >= v37 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v38 + 1, 1, v20);
    }
    v20[2] = v38 + 1;
    uint64_t v39 = &v20[13 * v38];
    v39[4] = v58;
    v39[5] = v99;
    v39[6] = v84;
    v39[7] = v83;
    *((unsigned char *)v39 + 64) = v85 & 1;
    v39[9] = v93;
    v39[10] = v92;
    *((unsigned char *)v39 + 88) = v91;
    v39[12] = v90;
    v39[13] = v89;
    v39[14] = v88;
    v39[15] = v87;
    v39[16] = v86;
  }
  if (v100)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v94, v96 & 1);
    outlined copy of MeshDescriptor.Primitives?(v3, v4, v5);
    outlined copy of MeshDescriptor.Skinning?(v6, v7);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v41 = v20[2];
    unint64_t v40 = v20[3];
    if (v41 >= v40 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v20);
    }
    v20[2] = v41 + 1;
    uint64_t v42 = &v20[13 * v41];
    v42[4] = v59;
    v42[5] = v100;
    v42[6] = v95;
    v42[7] = v94;
    *((unsigned char *)v42 + 64) = v96 & 1;
    v42[9] = v3;
    v42[10] = v4;
    *((unsigned char *)v42 + 88) = v5;
    v42[12] = v6;
    v42[13] = v7;
    v42[14] = v8;
    v42[15] = v24;
    v42[16] = v97;
  }
  return v20;
}

BOOL PathSpan.isZeroLength.getter()
{
  outlined init with take of PathSpan(v0, (uint64_t)&v9);
  if (v13)
  {
    if (v13 == 1)
    {
      float64x2_t v1 = vsubq_f64(v9, v10);
      if (sqrt(vaddvq_f64(vmulq_f64(v1, v1))) <= 0.000001)
      {
        float64x2_t v2 = vsubq_f64(v10, v11);
        BOOL v3 = sqrt(vaddvq_f64(vmulq_f64(v2, v2))) > 0.000001;
        return !v3;
      }
      return 0;
    }
    float64x2_t v5 = vsubq_f64(v9, v10);
    if (sqrt(vaddvq_f64(vmulq_f64(v5, v5))) > 0.000001) {
      return 0;
    }
    float64x2_t v6 = vsubq_f64(v10, v11);
    if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) > 0.000001) {
      return 0;
    }
    float64x2_t v8 = vsubq_f64(v11, v12);
    BOOL v3 = sqrt(vaddvq_f64(vmulq_f64(v8, v8))) > 0.000001;
  }
  else
  {
    float64x2_t v4 = vsubq_f64(v9, v10);
    BOOL v3 = sqrt(vaddvq_f64(vmulq_f64(v4, v4))) > 0.000001;
  }
  return !v3;
}

uint64_t PathSpan.tangent(at:)()
{
  uint64_t result = outlined init with take of PathSpan(v0, (uint64_t)&v2);
  if (v3)
  {
    if (v3 == 1) {
      return geom_quadratic_bezier_tangent_at_2d();
    }
    else {
      return geom_cubic_bezier_tangent_at_2d();
    }
  }
  return result;
}

double specialized Polygon.signedArea()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0.0;
  }
  long long v2 = (uint64_t *)(a1 + 48);
  double result = 0.0;
  do
  {
    _Q1 = vdupq_n_s64(v2[1]);
    if (*((unsigned char *)v2 + 48))
    {
      _Q2 = vdupq_n_s64(v2[3]);
      if (*((unsigned char *)v2 + 48) == 1)
      {
        _D4 = *(v2 - 2);
        _D6 = *v2;
        __asm { FMLA            D3, D4, V1.D[1] }
        double v16 = result + _D3;
        __asm { FMLA            D1, D6, V2.D[1] }
      }
      else
      {
        float64x2_t v4 = (const double *)(v2 + 5);
        _Q4 = vld1q_dup_f64(v4);
        _D5 = *(v2 - 2);
        _D7 = *v2;
        __asm { FMLA            D3, D5, V1.D[1] }
        double v13 = result + _D3;
        _D3 = v2[2];
        __asm { FMLA            D5, D7, V2.D[1] }
        double v16 = v13 + _D5;
        __asm { FMLA            D1, D3, V4.D[1] }
      }
      double result = v16 + _D1;
    }
    else
    {
      _D2 = *(v2 - 2);
      __asm { FMLA            D3, D2, V1.D[1] }
      double result = result + _D3;
    }
    v2 += 10;
    --v1;
  }
  while (v1);
  return result;
}

void specialized Polygon.testInside(point:)(uint64_t a1, simd_double2 a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return;
  }
  simd_double2 v3 = a2;
  uint64_t v4 = 0;
  double v5 = a2.f64[1];
  for (uint64_t i = a1 + 48; !*(unsigned char *)(i + 48); i += 80)
  {
    simd_double2 v13 = *(simd_double2 *)(i - 16);
    simd_double2 v14 = *(simd_double2 *)i;
    if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v13))).i32[1])
    {
      if (v14.f64[1] > v5) {
        goto LABEL_4;
      }
      if (_simd_orient_pd2(v14, v13, v3) > 0.0)
      {
        BOOL v12 = __OFSUB__(v4--, 1);
        if (v12) {
          goto LABEL_73;
        }
      }
    }
    else
    {
      if (v5 >= v14.f64[1]) {
        goto LABEL_4;
      }
      if (_simd_orient_pd2(v13, v14, v3) > 0.0)
      {
        BOOL v12 = __OFADD__(v4++, 1);
        if (v12) {
          goto LABEL_77;
        }
      }
    }
LABEL_3:
    simd_double2 v3 = a2;
LABEL_4:
    if (!--v2) {
      return;
    }
  }
  double v8 = *(double *)(i + 16);
  double v7 = *(double *)(i + 24);
  if (*(unsigned char *)(i + 48) != 1)
  {
    simd_double2 v15 = *(simd_double2 *)(i - 16);
    simd_double2 v16 = *(simd_double2 *)i;
    simd_double2 v17 = *(simd_double2 *)(i + 32);
    double v18 = *(double *)(i + 8);
    simd_double2 v24 = v17;
    if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v15))).i32[1])
    {
      if (v16.f64[1] > v5) {
        goto LABEL_44;
      }
      simd_double2 v21 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v16, v15, v3) > 0.0)
      {
        BOOL v12 = __OFSUB__(v4--, 1);
        if (v12) {
          goto LABEL_74;
        }
      }
    }
    else
    {
      if (v5 >= v16.f64[1]) {
        goto LABEL_44;
      }
      simd_double2 v21 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v15, v16, v3) > 0.0)
      {
        BOOL v12 = __OFADD__(v4++, 1);
        if (v12) {
          goto LABEL_78;
        }
      }
    }
    simd_double2 v17 = v24;
    simd_double2 v3 = a2;
    simd_double2 v16 = v21;
LABEL_44:
    v20.f64[0] = v8;
    v20.f64[1] = v7;
    if (v18 <= v5)
    {
      if (v5 >= v7) {
        goto LABEL_61;
      }
      simd_double2 v22 = v20;
      if (_simd_orient_pd2(v16, v20, v3) > 0.0)
      {
        BOOL v12 = __OFADD__(v4++, 1);
        simd_double2 v17 = v24;
        if (v12) {
          goto LABEL_81;
        }
LABEL_58:
        simd_double2 v3 = a2;
LABEL_60:
        simd_double2 v20 = v22;
LABEL_61:
        if (v7 <= v5)
        {
          if (v5 >= v17.f64[1]) {
            goto LABEL_4;
          }
          if (_simd_orient_pd2(v20, v17, v3) > 0.0)
          {
            BOOL v12 = __OFADD__(v4++, 1);
            if (v12)
            {
              __break(1u);
              return;
            }
          }
        }
        else
        {
          if (v17.f64[1] > v5) {
            goto LABEL_4;
          }
          if (_simd_orient_pd2(v17, v20, v3) > 0.0)
          {
            BOOL v12 = __OFSUB__(v4--, 1);
            if (v12) {
              goto LABEL_82;
            }
          }
        }
        goto LABEL_3;
      }
    }
    else
    {
      if (v7 > v5) {
        goto LABEL_61;
      }
      simd_double2 v22 = v20;
      if (_simd_orient_pd2(v20, v16, v3) > 0.0)
      {
        BOOL v12 = __OFSUB__(v4--, 1);
        simd_double2 v17 = v24;
        if (v12) {
          goto LABEL_79;
        }
        goto LABEL_58;
      }
    }
    simd_double2 v17 = v24;
    simd_double2 v3 = a2;
    goto LABEL_60;
  }
  simd_double2 v9 = *(simd_double2 *)(i - 16);
  simd_double2 v10 = *(simd_double2 *)i;
  double v11 = *(double *)(i + 8);
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v3, *(float64x2_t *)&v9))).i32[1] & 1) == 0)
  {
    if (v5 < v10.f64[1])
    {
      simd_double2 v23 = *(simd_double2 *)i;
      if (_simd_orient_pd2(v9, v10, v3) > 0.0)
      {
        BOOL v12 = __OFADD__(v4++, 1);
        if (v12) {
          goto LABEL_75;
        }
      }
LABEL_28:
      simd_double2 v10 = v23;
      simd_double2 v3 = a2;
    }
LABEL_29:
    v19.f64[0] = v8;
    v19.f64[1] = v7;
    if (v11 <= v5)
    {
      if (v5 >= v7) {
        goto LABEL_4;
      }
      if (_simd_orient_pd2(v10, v19, v3) > 0.0)
      {
        BOOL v12 = __OFADD__(v4++, 1);
        if (v12) {
          goto LABEL_80;
        }
      }
    }
    else
    {
      if (v7 > v5) {
        goto LABEL_4;
      }
      if (_simd_orient_pd2(v19, v10, v3) > 0.0)
      {
        BOOL v12 = __OFSUB__(v4--, 1);
        if (v12) {
          goto LABEL_76;
        }
      }
    }
    goto LABEL_3;
  }
  if (v10.f64[1] > v5) {
    goto LABEL_29;
  }
  simd_double2 v23 = *(simd_double2 *)i;
  if (_simd_orient_pd2(v10, v9, v3) <= 0.0) {
    goto LABEL_28;
  }
  BOOL v12 = __OFSUB__(v4--, 1);
  if (!v12) {
    goto LABEL_28;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
}

void triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)(uint64_t a1, uint64_t a2, char **a3)
{
  swift_bridgeObjectRelease();
  collection_u = (void *)geom_create_collection_u();
  triangulateByEarClipping(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
  lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
  id v5 = collection_u;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();

  if (v22 != v21 || (unint64_t v6 = *(void *)(a1 + 16)) == 0)
  {
    id v19 = v5;
    specialized _copyCollectionToContiguousArray<A>(_:)(v19);
    simd_double2 v9 = v20;

    goto LABEL_20;
  }
  if (v6 < 0x100000001)
  {
    int v7 = v6 - 2;
    if (v6 != 2)
    {
      if (v6 != 1)
      {
        unsigned int v8 = v6 - 1;
        simd_double2 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
        int v10 = 0;
        if (v8 <= 1) {
          int v11 = 1;
        }
        else {
          int v11 = v8;
        }
        int v12 = v11 - 1;
        while (v12 != v10)
        {
          unint64_t v14 = *((void *)v9 + 2);
          unint64_t v13 = *((void *)v9 + 3);
          int64_t v15 = v13 >> 1;
          unint64_t v16 = v14 + 1;
          if (v13 >> 1 <= v14)
          {
            simd_double2 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v9);
            unint64_t v13 = *((void *)v9 + 3);
            int64_t v15 = v13 >> 1;
          }
          *((void *)v9 + 2) = v16;
          *(_DWORD *)&v9[4 * v14 + 32] = 0;
          unint64_t v17 = v14 + 2;
          if (v15 < (uint64_t)(v14 + 2)) {
            simd_double2 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 2, 1, v9);
          }
          *((void *)v9 + 2) = v17;
          *(_DWORD *)&v9[4 * v16 + 32] = v10 + 1;
          unint64_t v18 = *((void *)v9 + 3);
          if ((uint64_t)(v14 + 3) > (uint64_t)(v18 >> 1)) {
            simd_double2 v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v14 + 3, 1, v9);
          }
          *((void *)v9 + 2) = v14 + 3;
          *(_DWORD *)&v9[4 * v17 + 32] = v10 + 2;
          if (v7 == ++v10) {
            goto LABEL_20;
          }
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_24;
    }
    simd_double2 v9 = (char *)MEMORY[0x263F8EE78];
LABEL_20:

    *a3 = v9;
    return;
  }
LABEL_24:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t spansFromCGPath(path:)(const CGPath *a1)
{
  uint64_t v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[PathSpan]>);
  uint64_t v3 = swift_allocObject();
  *(void *)(v2 + 16) = v3;
  uint64_t v4 = (uint64_t *)(v2 + 16);
  uint64_t v5 = MEMORY[0x263F8EE78];
  *(_OWORD *)(v3 + 16) = xmmword_22830EC60;
  *(void *)(v3 + 32) = v5;
  v20[0] = 0;
  v20[1] = 0;
  char v21 = 1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v20;
  *(void *)(v6 + 24) = v2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in spansFromCGPath(path:);
  *(void *)(v7 + 24) = v6;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_46;
  unsigned int v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(a1, v8);
  _Block_release(v8);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_16;
  }
  swift_beginAccess();
  uint64_t isEscapingClosureAtFileLocation = *v4;
  int64_t v10 = *(void *)(*v4 + 16);
  if (!v10)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(*(void *)(isEscapingClosureAtFileLocation + 8 * v10 + 24) + 16)) {
    goto LABEL_8;
  }
  swift_beginAccess();
  uint64_t isEscapingClosureAtFileLocation = *v4;
  if (!*(void *)(*v4 + 16)) {
    goto LABEL_17;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    uint64_t v12 = *(void *)(isEscapingClosureAtFileLocation + 16);
    if (v12) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)isEscapingClosureAtFileLocation);
  uint64_t isEscapingClosureAtFileLocation = result;
  uint64_t v12 = *(void *)(result + 16);
  if (v12)
  {
LABEL_7:
    *(void *)(isEscapingClosureAtFileLocation + 16) = v12 - 1;
    *uint64_t v4 = isEscapingClosureAtFileLocation;
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t isEscapingClosureAtFileLocation = *v4;
    int64_t v10 = *(void *)(*v4 + 16);
    if (!v10)
    {
      swift_release();
      swift_release();
      return MEMORY[0x263F8EE78];
    }
LABEL_8:
    uint64_t v18 = v5;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v13 = 0;
    uint64_t v14 = v18;
    do
    {
      uint64_t v15 = *(void *)(isEscapingClosureAtFileLocation + 8 * v13 + 32);
      unint64_t v16 = *(void *)(v18 + 16);
      unint64_t v17 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain();
      if (v16 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v16 + 1, 1);
      }
      ++v13;
      *(void *)(v18 + 16) = v16 + 1;
      *(void *)(v18 + 8 * v16 + 32) = v15;
    }
    while (v10 != v13);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return v14;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t closure #1 in spansFromCGPath(path:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)a3;
  unsigned int v5 = *(_DWORD *)result;
  uint64_t v6 = *(long long **)(result + 8);
  unint64_t v7 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    if (v5 < 2)
    {
      uint64_t v8 = 1;
      goto LABEL_11;
    }
    if (v5 == 2)
    {
      float64_t v38 = *(double *)a2;
      unint64_t v39 = v7;
      long long v36 = v6[1];
      long long v40 = *v6;
      long long v41 = v36;
      long long v42 = 0uLL;
      char v43 = 1;
      uint64_t v10 = 2;
    }
    else
    {
      if (v5 != 3) {
        goto LABEL_8;
      }
      float64_t v38 = *(double *)a2;
      unint64_t v39 = v7;
      long long v9 = v6[1];
      long long v40 = *v6;
      long long v41 = v9;
      long long v42 = v6[2];
      char v43 = 2;
      uint64_t v10 = 3;
    }
    uint64_t result = closure #1 in closure #1 in spansFromCGPath(path:)((uint64_t)&v38, a3);
    goto LABEL_34;
  }
  if (v5 != 4)
  {
    uint64_t v8 = 1;
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v8 = 0;
  if (v5 == 4) {
    goto LABEL_13;
  }
LABEL_11:
  if (v5 != 1)
  {
    if (v5) {
      goto LABEL_27;
    }
LABEL_13:
    uint64_t v11 = a3 + 16;
    uint64_t result = swift_beginAccess();
    uint64_t v12 = *(void *)(*(void *)v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(double **)(*(void *)v11 + 8 * v12 + 24);
      uint64_t v14 = *((void *)v13 + 2);
      if (!v14) {
        goto LABEL_27;
      }
      float64_t v15 = v13[4];
      float64_t v16 = v13[5];
      v17.f64[1] = v16;
      uint64_t v18 = (uint64_t)&v13[10 * v14 + 4];
      uint64_t v19 = v18 - 80;
      int v20 = *(unsigned __int8 *)(v18 - 16);
      char v21 = (unint64_t *)(v19 + 24);
      uint64_t v22 = (double *)(v19 + 16);
      simd_double2 v23 = (unint64_t *)(v19 + 40);
      simd_double2 v24 = (double *)(v19 + 32);
      uint64_t v25 = (unint64_t *)(v19 + 56);
      uint64_t v26 = (double *)(v19 + 48);
      if (v20 == 1) {
        uint64_t v26 = v24;
      }
      else {
        simd_double2 v23 = v25;
      }
      if (v20)
      {
        char v27 = v23;
      }
      else
      {
        uint64_t v26 = v22;
        char v27 = v21;
      }
      unint64_t v28 = *v27;
      float64_t v29 = *v26;
      float64x2_t v30 = (float64x2_t)vdupq_n_s64(v28);
      v17.f64[0] = v15;
      v30.f64[0] = v29;
      float64x2_t v31 = vsubq_f64(v17, v30);
      if (sqrt(vaddvq_f64(vmulq_f64(v31, v31))) > 0.000001)
      {
        float64_t v38 = v29;
        unint64_t v39 = v28;
        *(float64_t *)&long long v40 = v15;
        *((float64_t *)&v40 + 1) = v16;
        long long v41 = 0u;
        long long v42 = 0u;
        char v43 = 0;
        closure #1 in closure #1 in spansFromCGPath(path:)((uint64_t)&v38, (uint64_t)v3);
      }
      swift_beginAccess();
      uint64_t v3 = *(void **)v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v11 = v3;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_24:
        unint64_t v34 = v3[2];
        unint64_t v33 = v3[3];
        if (v34 >= v33 >> 1)
        {
          uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v3);
          *(void *)uint64_t v11 = v3;
        }
        v3[2] = v34 + 1;
        v3[v34 + 4] = MEMORY[0x263F8EE78];
        uint64_t result = swift_endAccess();
LABEL_27:
        uint64_t v10 = 1;
        if (!v8)
        {
LABEL_28:
          long long v35 = 0uLL;
LABEL_35:
          *(_OWORD *)a2 = v35;
          *(unsigned char *)(a2 + 16) = v10;
          return result;
        }
LABEL_34:
        unint64_t v37 = &v6[v10];
        LOBYTE(v10) = 0;
        long long v35 = *(v37 - 1);
        goto LABEL_35;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *(void *)uint64_t v11 = v3;
    goto LABEL_24;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
    float64_t v38 = *(double *)a2;
    unint64_t v39 = v7;
    long long v40 = *v6;
    long long v41 = 0u;
    long long v42 = 0u;
    char v43 = 0;
    uint64_t result = closure #1 in closure #1 in spansFromCGPath(path:)((uint64_t)&v38, a3);
    uint64_t v10 = 1;
    if (!v8) {
      goto LABEL_28;
    }
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in spansFromCGPath(path:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = PathSpan.isZeroLength.getter();
  if (result) {
    return result;
  }
  uint64_t v6 = (void *)(a2 + 16);
  swift_beginAccess();
  unint64_t v7 = *(void *)(*v6 + 16);
  swift_beginAccess();
  uint64_t v8 = (void *)*v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v6 = v8;
  if (isUniquelyReferenced_nonNull_native)
  {
    if (v7) {
      goto LABEL_4;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
  *uint64_t v6 = v8;
  if (!v7) {
    goto LABEL_11;
  }
LABEL_4:
  if (v7 > v8[2])
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  --v7;
  uint64_t v2 = v8 + 4;
  uint64_t v6 = (void *)v8[v7 + 4];
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  v8[v7 + 4] = v6;
  if ((v10 & 1) == 0)
  {
LABEL_13:
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    v2[v7] = v6;
  }
  unint64_t v12 = v6[2];
  unint64_t v11 = v6[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v6);
    v2[v7] = v6;
  }
  v6[2] = v12 + 1;
  outlined init with take of PathSpan(a1, (uint64_t)&v6[10 * v12 + 4]);
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t correctCurveOrientation(curves:)(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a1;
  uint64_t v87 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 32;
  int64x2_t v6 = vdupq_n_s64(0x7FF0000000000000uLL);
  int64x2_t v7 = vdupq_n_s64(0xFFF0000000000000);
  do
  {
    uint64_t v8 = *(void *)(v5 + 8 * v4);
    uint64_t v9 = *(void *)(v8 + 16);
    float64x2_t v10 = (float64x2_t)v7;
    float64x2_t v11 = (float64x2_t)v6;
    if (v9)
    {
      uint64_t v12 = v8 + 48;
      float64x2_t v10 = (float64x2_t)v7;
      float64x2_t v11 = (float64x2_t)v6;
      do
      {
        if (*(unsigned char *)(v12 + 48))
        {
          float64x2_t v14 = *(float64x2_t *)(v12 - 16);
          float64x2_t v15 = *(float64x2_t *)v12;
          float64x2_t v16 = *(float64x2_t *)(v12 + 16);
          if (*(unsigned char *)(v12 + 48) == 1)
          {
            float64x2_t v17 = vminnmq_f64(v11, vminnmq_f64(v14, v15));
            float64x2_t v18 = vmaxnmq_f64(v10, vmaxnmq_f64(v14, v15));
            float64x2_t v11 = vminnmq_f64(v17, vminnmq_f64(v15, v16));
            float64x2_t v19 = vmaxnmq_f64(v15, v16);
          }
          else
          {
            float64x2_t v20 = *(float64x2_t *)(v12 + 32);
            float64x2_t v21 = vminnmq_f64(v11, vminnmq_f64(v14, v15));
            float64x2_t v18 = vmaxnmq_f64(vmaxnmq_f64(v10, vmaxnmq_f64(v14, v15)), vmaxnmq_f64(v15, v16));
            float64x2_t v11 = vminnmq_f64(vminnmq_f64(v21, vminnmq_f64(v15, v16)), vminnmq_f64(v16, v20));
            float64x2_t v19 = vmaxnmq_f64(v16, v20);
          }
          float64x2_t v10 = vmaxnmq_f64(v18, v19);
        }
        else
        {
          float64x2_t v13 = *(float64x2_t *)(v12 - 16);
          float64x2_t v11 = vminnmq_f64(v11, vminnmq_f64(v13, *(float64x2_t *)v12));
          float64x2_t v10 = vmaxnmq_f64(v10, vmaxnmq_f64(v13, *(float64x2_t *)v12));
        }
        v12 += 80;
        --v9;
      }
      while (v9);
    }
    unint64_t v23 = *(void *)(v87 + 16);
    unint64_t v22 = *(void *)(v87 + 24);
    if (v23 >= v22 >> 1)
    {
      int64x2_t v84 = v6;
      float64x2_t v78 = v10;
      int64x2_t v81 = v7;
      float64x2_t v75 = v11;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      float64x2_t v11 = v75;
      float64x2_t v10 = v78;
      int64x2_t v7 = v81;
      int64x2_t v6 = v84;
    }
    ++v4;
    *(void *)(v87 + 16) = v23 + 1;
    simd_double2 v24 = (float64x2_t *)(v87 + 32 * v23);
    v24[2] = v11;
    v24[3] = v10;
  }
  while (v4 != v1);
  unint64_t v25 = specialized Sequence.min(by:)(0, v1, v87);
  char v27 = v26;
  uint64_t result = swift_release();
  if (v27) {
    goto LABEL_52;
  }
  if (v25 >= v1) {
    goto LABEL_51;
  }
  if (specialized Polygon.signedArea()(*(void *)(v5 + 8 * v25)) >= 0.0)
  {
    swift_bridgeObjectRetain();
    return v3;
  }
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v29 = 0;
  uint64_t v3 = v2;
  uint64_t v65 = v5;
  unint64_t v66 = v1;
  while (1)
  {
    uint64_t v30 = *(void *)(v5 + 8 * v29);
    int64_t v31 = *(void *)(v30 + 16);
    uint64_t v68 = v3;
    uint64_t v67 = v29;
    if (!v31)
    {
      swift_bridgeObjectRetain();
      unint64_t v44 = *(void *)(v2 + 16);
      uint64_t result = v2;
      if (v44 >= 2) {
        break;
      }
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
    uint64_t result = v2;
    unint64_t v32 = (uint64_t *)(v30 + 48);
    do
    {
      uint64_t v34 = *(v32 - 2);
      uint64_t v33 = *(v32 - 1);
      uint64_t v36 = *v32;
      uint64_t v35 = v32[1];
      int v37 = *((unsigned __int8 *)v32 + 48);
      if (*((unsigned char *)v32 + 48))
      {
        uint64_t v38 = v32[2];
        uint64_t v39 = v32[3];
        if (v37 == 1)
        {
          uint64_t v40 = v32[2];
          uint64_t v41 = v32[3];
          uint64_t v38 = *v32;
          uint64_t v39 = v32[1];
          uint64_t v36 = *(v32 - 2);
          uint64_t v35 = *(v32 - 1);
          uint64_t v34 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          uint64_t v40 = v32[4];
          uint64_t v41 = v32[5];
        }
      }
      else
      {
        uint64_t v40 = *v32;
        uint64_t v41 = v32[1];
        uint64_t v38 = *(v32 - 2);
        uint64_t v39 = *(v32 - 1);
        uint64_t v36 = *((unsigned __int8 *)v32 + 48);
        uint64_t v35 = v36;
        uint64_t v34 = v36;
        uint64_t v33 = v36;
      }
      uint64_t v86 = result;
      unint64_t v43 = *(void *)(result + 16);
      unint64_t v42 = *(void *)(result + 24);
      unint64_t v44 = v43 + 1;
      if (v43 >= v42 >> 1)
      {
        uint64_t v82 = v38;
        uint64_t v79 = v41;
        uint64_t v76 = v40;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        unint64_t v44 = v43 + 1;
        uint64_t v40 = v76;
        uint64_t v41 = v79;
        uint64_t v38 = v82;
        uint64_t result = v86;
      }
      v32 += 10;
      *(void *)(result + 16) = v44;
      uint64_t v45 = result + 80 * v43;
      *(void *)(v45 + 32) = v40;
      *(void *)(v45 + 40) = v41;
      *(void *)(v45 + 48) = v38;
      *(void *)(v45 + 56) = v39;
      *(void *)(v45 + 64) = v36;
      *(void *)(v45 + 72) = v35;
      *(void *)(v45 + 80) = v34;
      *(void *)(v45 + 88) = v33;
      *(unsigned char *)(v45 + 96) = v37;
      --v31;
    }
    while (v31);
    uint64_t v2 = MEMORY[0x263F8EE78];
    uint64_t v5 = v65;
    unint64_t v1 = v66;
    uint64_t v3 = v68;
    if (v44 >= 2) {
      break;
    }
LABEL_30:
    uint64_t v46 = result;
    swift_bridgeObjectRelease();
LABEL_42:
    unint64_t v62 = *(void *)(v3 + 16);
    unint64_t v61 = *(void *)(v3 + 24);
    uint64_t v63 = v67;
    uint64_t v64 = v46;
    if (v62 >= v61 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
      uint64_t v64 = v46;
      uint64_t v63 = v67;
    }
    uint64_t v29 = v63 + 1;
    *(void *)(v3 + 16) = v62 + 1;
    *(void *)(v3 + 8 * v62 + 32) = v64;
    if (v29 == v1) {
      return v3;
    }
  }
  unint64_t v47 = 0;
  unint64_t v48 = v44 >> 1;
  unint64_t v49 = v44 - 1;
  uint64_t v50 = 80 * v44 - 48;
  uint64_t v51 = 96;
  unint64_t v69 = v44 >> 1;
  while (1)
  {
    if (v47 == v49) {
      goto LABEL_35;
    }
    unint64_t v54 = *(void *)(result + 16);
    if (v47 >= v54) {
      break;
    }
    if (v49 >= v54) {
      goto LABEL_50;
    }
    long long v85 = *(_OWORD *)(result + v51 - 64);
    long long v80 = *(_OWORD *)(result + v51 - 32);
    long long v83 = *(_OWORD *)(result + v51 - 48);
    long long v77 = *(_OWORD *)(result + v51 - 16);
    char v74 = *(unsigned char *)(result + v51);
    uint64_t v55 = *(void *)(result + v50);
    uint64_t v56 = *(void *)(result + v50 + 8);
    uint64_t v57 = *(void *)(result + v50 + 16);
    uint64_t v58 = *(void *)(result + v50 + 24);
    uint64_t v59 = *(void *)(result + v50 + 32);
    uint64_t v72 = *(void *)(result + v50 + 48);
    uint64_t v73 = *(void *)(result + v50 + 40);
    uint64_t v71 = *(void *)(result + v50 + 56);
    char v70 = *(unsigned char *)(result + v50 + 64);
    uint64_t v60 = (void *)result;
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t result = (uint64_t)v60;
    }
    else {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v60);
    }
    uint64_t v52 = (unsigned char *)(result + v51);
    *((void *)v52 - 8) = v55;
    *((void *)v52 - 7) = v56;
    *((void *)v52 - 6) = v57;
    *((void *)v52 - 5) = v58;
    *((void *)v52 - 4) = v59;
    *((void *)v52 - 3) = v73;
    *((void *)v52 - 2) = v72;
    *((void *)v52 - 1) = v71;
    *uint64_t v52 = v70;
    uint64_t v53 = result + v50;
    *(_OWORD *)uint64_t v53 = v85;
    *(_OWORD *)(v53 + 16) = v83;
    *(_OWORD *)(v53 + 32) = v80;
    *(_OWORD *)(v53 + 48) = v77;
    *(unsigned char *)(v53 + 64) = v74;
    unint64_t v48 = v69;
LABEL_35:
    ++v47;
    --v49;
    v51 += 80;
    v50 -= 80;
    if (v48 == v47)
    {
      uint64_t v46 = result;
      swift_bridgeObjectRelease();
      uint64_t v2 = MEMORY[0x263F8EE78];
      uint64_t v5 = v65;
      unint64_t v1 = v66;
      uint64_t v3 = v68;
      goto LABEL_42;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

void *specialized classify<A>(subpaths:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v6 = *(void *)(v2 + 8 * v3);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = (uint64_t *)(v6 + 48);
        double v9 = 0.0;
        do
        {
          unint64_t v25 = v8[1];
          if (*((unsigned char *)v8 + 48))
          {
            unint64_t v26 = v8[3];
            if (*((unsigned char *)v8 + 48) == 1)
            {
              _Q2 = vdupq_n_s64(v26);
              _D3 = *(v8 - 2);
              _D4 = vdupq_n_s64(v25).i64[1];
              _D5 = *v8;
              __asm { FMLA            D0, D3, V1.D[1] }
              double v23 = v9 + _D0;
              __asm { FMLA            D1, D5, V2.D[1] }
            }
            else
            {
              float64x2_t v10 = (const double *)(v8 + 5);
              _Q1 = vdupq_n_s64(v25);
              _Q2 = vdupq_n_s64(v26);
              _Q3 = vld1q_dup_f64(v10);
              _D4 = *(v8 - 2);
              _D6 = *v8;
              __asm { FMLA            D0, D4, V1.D[1] }
              _D4 = v8[2];
              __asm { FMLA            D5, D6, V2.D[1] }
              double v23 = v9 + _D0 + _D5;
              __asm { FMLA            D1, D4, V3.D[1] }
            }
            double v9 = v23 + _D1;
          }
          else
          {
            _Q1 = vdupq_n_s64(v25);
            _D2 = *(v8 - 2);
            __asm { FMLA            D0, D2, V1.D[1] }
            double v9 = v9 + _D0;
          }
          v8 += 10;
          --v7;
        }
        while (v7);
        if (fabs(v9) > 0.000001)
        {
          swift_bridgeObjectRetain_n();
          if (v9 <= 0.0)
          {
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v35 = v5;
            }
            else {
              uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            }
            unint64_t v37 = v35[2];
            unint64_t v39 = v35[3];
            unint64_t v38 = v37 + 1;
            if (v37 >= v39 >> 1) {
              uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v37 + 1, 1, v35);
            }
            uint64_t v5 = v35;
          }
          else
          {
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v35 = v4;
            }
            else {
              uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
            }
            unint64_t v37 = v35[2];
            unint64_t v36 = v35[3];
            unint64_t v38 = v37 + 1;
            if (v37 >= v36 >> 1) {
              uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
            }
            uint64_t v4 = v35;
          }
          v35[2] = v38;
          v35[v37 + 4] = v6;
          swift_bridgeObjectRelease();
        }
      }
      ++v3;
    }
    while (v3 != v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  double v40 = COERCE_DOUBLE(specialized Array.init(repeating:count:)(0, v5[2]));
  uint64_t v72 = v4[2];
  if (!v72)
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_132;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_149;
  }
LABEL_32:
  unint64_t v41 = 0;
  uint64_t v42 = v5[2];
  uint64_t v73 = v4 + 4;
  uint64_t v43 = *(void *)&v40 + 32;
  unint64_t v44 = v5 + 4;
  uint64_t v45 = (void *)MEMORY[0x263F8EE78];
  double v79 = v40;
  long long v80 = v4;
  uint64_t v77 = *(void *)&v40 + 32;
  uint64_t v78 = v42;
  uint64_t v76 = v5 + 4;
  do
  {
    if (v41 >= v4[2]) {
      goto LABEL_148;
    }
    char v74 = v45;
    unint64_t v75 = v41;
    uint64_t v46 = v73[v41];
    swift_bridgeObjectRetain_n();
    uint64_t v81 = v46;
    if (v42)
    {
      unint64_t v47 = 0;
      long long v83 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        if (v47 >= *(void *)(*(void *)&v40 + 16))
        {
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          double v40 = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(*(uint64_t *)&v40));
          goto LABEL_32;
        }
        if (*(unsigned char *)(v43 + v47)) {
          goto LABEL_37;
        }
        if (v47 >= v5[2]) {
          goto LABEL_145;
        }
        uint64_t v48 = v44[v47];
        if (!*(void *)(v48 + 16)) {
          goto LABEL_146;
        }
        simd_double2 v88 = *(simd_double2 *)(v48 + 32);
        specialized Polygon.testInside(point:)(v46, v88);
        if ((v49 & 1) == 0) {
          goto LABEL_37;
        }
        uint64_t v82 = v5;
        uint64_t v5 = (void *)v83[2];
        if (!v5) {
          goto LABEL_118;
        }
        uint64_t v50 = 0;
        while (2)
        {
          uint64_t v51 = v83[v50 + 4];
          uint64_t v52 = *(void *)(v51 + 16);
          if (!v52) {
            goto LABEL_46;
          }
          uint64_t v4 = 0;
          uint64_t v53 = v51 + 48;
          do
          {
            if (*(unsigned char *)(v53 + 48))
            {
              double v54 = *(double *)(v53 + 16);
              double v40 = *(double *)(v53 + 24);
              if (*(unsigned char *)(v53 + 48) == 1)
              {
                simd_double2 v55 = *(simd_double2 *)(v53 - 16);
                simd_double2 v56 = *(simd_double2 *)v53;
                double v57 = *(double *)(v53 + 8);
                if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v55))).i32[1])
                {
                  if (v56.f64[1] <= v88.f64[1])
                  {
                    simd_double2 v86 = *(simd_double2 *)v53;
                    if (_simd_orient_pd2(v56, v55, v88) > 0.0)
                    {
                      _VF = __OFSUB__(v4, 1);
                      uint64_t v4 = (void *)((char *)v4 - 1);
                      if (_VF)
                      {
                        __break(1u);
LABEL_133:
                        __break(1u);
LABEL_134:
                        __break(1u);
LABEL_135:
                        __break(1u);
LABEL_136:
                        __break(1u);
LABEL_137:
                        __break(1u);
LABEL_138:
                        __break(1u);
LABEL_139:
                        __break(1u);
LABEL_140:
                        __break(1u);
LABEL_141:
                        __break(1u);
LABEL_142:
                        __break(1u);
LABEL_143:
                        __break(1u);
                        goto LABEL_144;
                      }
                    }
LABEL_73:
                    simd_double2 v56 = v86;
                  }
                }
                else if (v88.f64[1] < v56.f64[1])
                {
                  simd_double2 v86 = *(simd_double2 *)v53;
                  if (_simd_orient_pd2(v55, v56, v88) > 0.0)
                  {
                    _VF = __OFADD__(v4, 1);
                    uint64_t v4 = (void *)((char *)v4 + 1);
                    if (_VF) {
                      goto LABEL_135;
                    }
                  }
                  goto LABEL_73;
                }
                v64.f64[0] = v54;
                v64.f64[1] = v40;
                if (v57 <= v88.f64[1])
                {
                  if (v88.f64[1] < v40 && _simd_orient_pd2(v56, v64, v88) > 0.0)
                  {
                    _VF = __OFADD__(v4, 1);
                    uint64_t v4 = (void *)((char *)v4 + 1);
                    if (_VF) {
                      goto LABEL_140;
                    }
                  }
                }
                else if (v40 <= v88.f64[1] && _simd_orient_pd2(v64, v56, v88) > 0.0)
                {
                  _VF = __OFSUB__(v4, 1);
                  uint64_t v4 = (void *)((char *)v4 - 1);
                  if (_VF) {
                    goto LABEL_136;
                  }
                }
                goto LABEL_49;
              }
              simd_double2 v60 = *(simd_double2 *)(v53 - 16);
              simd_double2 v61 = *(simd_double2 *)v53;
              simd_double2 v62 = *(simd_double2 *)(v53 + 32);
              double v63 = *(double *)(v53 + 8);
              simd_double2 v87 = v62;
              if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v60))).i32[1])
              {
                if (v61.f64[1] <= v88.f64[1])
                {
                  simd_double2 v84 = *(simd_double2 *)v53;
                  if (_simd_orient_pd2(v61, v60, v88) > 0.0)
                  {
                    _VF = __OFSUB__(v4, 1);
                    uint64_t v4 = (void *)((char *)v4 - 1);
                    if (_VF) {
                      goto LABEL_134;
                    }
                  }
                  goto LABEL_88;
                }
              }
              else if (v88.f64[1] < v61.f64[1])
              {
                simd_double2 v84 = *(simd_double2 *)v53;
                if (_simd_orient_pd2(v60, v61, v88) > 0.0)
                {
                  _VF = __OFADD__(v4, 1);
                  uint64_t v4 = (void *)((char *)v4 + 1);
                  if (_VF) {
                    goto LABEL_138;
                  }
                }
LABEL_88:
                simd_double2 v61 = v84;
                simd_double2 v62 = v87;
              }
              v65.f64[0] = v54;
              v65.f64[1] = v40;
              if (v63 <= v88.f64[1])
              {
                if (v88.f64[1] < v40)
                {
                  simd_double2 v85 = v65;
                  if (_simd_orient_pd2(v61, v65, v88) <= 0.0) {
                    goto LABEL_105;
                  }
                  _VF = __OFADD__(v4, 1);
                  uint64_t v4 = (void *)((char *)v4 + 1);
                  simd_double2 v62 = v87;
                  if (_VF) {
                    goto LABEL_141;
                  }
LABEL_106:
                  simd_double2 v65 = v85;
                }
              }
              else if (v40 <= v88.f64[1])
              {
                simd_double2 v85 = v65;
                if (_simd_orient_pd2(v65, v61, v88) > 0.0)
                {
                  _VF = __OFSUB__(v4, 1);
                  uint64_t v4 = (void *)((char *)v4 - 1);
                  simd_double2 v62 = v87;
                  if (_VF) {
                    goto LABEL_139;
                  }
                  goto LABEL_106;
                }
LABEL_105:
                simd_double2 v62 = v87;
                goto LABEL_106;
              }
              if (v40 <= v88.f64[1])
              {
                if (v88.f64[1] < v62.f64[1] && _simd_orient_pd2(v65, v62, v88) > 0.0)
                {
                  _VF = __OFADD__(v4, 1);
                  uint64_t v4 = (void *)((char *)v4 + 1);
                  if (_VF) {
                    goto LABEL_143;
                  }
                }
              }
              else if (v62.f64[1] <= v88.f64[1] && _simd_orient_pd2(v62, v65, v88) > 0.0)
              {
                _VF = __OFSUB__(v4, 1);
                uint64_t v4 = (void *)((char *)v4 - 1);
                if (_VF) {
                  goto LABEL_142;
                }
              }
              goto LABEL_49;
            }
            simd_double2 v58 = *(simd_double2 *)(v53 - 16);
            simd_double2 v59 = *(simd_double2 *)v53;
            if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v88, *(float64x2_t *)&v58))).i32[1])
            {
              if (v59.f64[1] <= v88.f64[1] && _simd_orient_pd2(v59, v58, v88) > 0.0)
              {
                _VF = __OFSUB__(v4, 1);
                uint64_t v4 = (void *)((char *)v4 - 1);
                if (_VF) {
                  goto LABEL_133;
                }
              }
            }
            else if (v88.f64[1] < v59.f64[1] && _simd_orient_pd2(v58, v59, v88) > 0.0)
            {
              _VF = __OFADD__(v4, 1);
              uint64_t v4 = (void *)((char *)v4 + 1);
              if (_VF) {
                goto LABEL_137;
              }
            }
LABEL_49:
            v53 += 80;
            --v52;
          }
          while (v52);
          if (v4)
          {
            uint64_t v46 = v81;
            uint64_t v5 = v82;
            double v40 = v79;
            uint64_t v4 = v80;
            uint64_t v43 = v77;
            uint64_t v42 = v78;
            unint64_t v44 = v76;
            goto LABEL_37;
          }
LABEL_46:
          if ((void *)++v50 != v5) {
            continue;
          }
          break;
        }
LABEL_118:
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, (int64_t)v5 + 1, 1, v83);
        }
        double v40 = v79;
        uint64_t v4 = v80;
        uint64_t v43 = v77;
        uint64_t v42 = v78;
        unint64_t v67 = v83[2];
        unint64_t v66 = v83[3];
        uint64_t v5 = (void *)(v67 + 1);
        if (v67 >= v66 >> 1) {
          long long v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v66 > 1), v67 + 1, 1, v83);
        }
        unint64_t v44 = v76;
        v83[2] = v5;
        v83[v67 + 4] = v48;
        if (v47 >= *(void *)(*(void *)&v79 + 16)) {
          goto LABEL_147;
        }
        *(unsigned char *)(v77 + v47) = 1;
        swift_bridgeObjectRelease();
        uint64_t v46 = v81;
        uint64_t v5 = v82;
LABEL_37:
        if (++v47 == v42) {
          goto LABEL_125;
        }
      }
    }
    long long v83 = (void *)MEMORY[0x263F8EE78];
LABEL_125:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v45 = v74;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
    }
    unint64_t v69 = v45[2];
    unint64_t v68 = v45[3];
    if (v69 >= v68 >> 1) {
      uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v45);
    }
    unint64_t v41 = v75 + 1;
    v45[2] = v69 + 1;
    char v70 = &v45[2 * v69];
    v70[4] = v81;
    v70[5] = v83;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  while (v75 + 1 != v72);
  swift_bridgeObjectRelease_n();
LABEL_132:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v45;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  simd_double2 v7;
  void *v8;
  void *v9;
  long long v10;
  uint64_t v11;
  long long *v12;
  uint64_t v14;
  double v15;
  long long v17;
  long long v18;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  simd_double2 **v33;
  simd_double2 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  simd_double2 v39;
  double v40;
  simd_double2 *v41;
  simd_double2 v42;
  simd_double2 v43;
  simd_double2 v44;
  simd_double2 v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  simd_double2 **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  simd_double2 *v53;
  simd_double2 *v54;
  simd_double2 v55;
  simd_double2 v56;
  simd_double2 v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  void *v65;
  void *v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  long long v77;
  void *v78;
  void *v79;
  simd_double2 v80;
  simd_double2 v81;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
    do
    {
      float64x2_t v10 = *(_OWORD *)(v2 + 16 * v3);
      float64x2_t v11 = *(void *)(v2 + 16 * v3 + 8);
      if (v11 >= 2)
      {
        uint64_t v12 = (long long *)(v10 + 16);
        _Q0 = *(_OWORD *)v10;
        float64x2_t v14 = v11 - 1;
        float64x2_t v15 = 0.0;
        _Q2 = *(_OWORD *)v10;
        do
        {
          float64x2_t v17 = _Q2;
          float64x2_t v18 = *v12++;
          _Q2 = v18;
          float64x2_t v15 = v15 + vmlad_n_f64(-*((double *)&v17 + 1) * *(double *)&v18, *((double *)&v18 + 1), *(double *)&v17);
          --v14;
        }
        while (v14);
        __asm { FMLA            D3, D2, V0.D[1] }
        if (fabs(v15 + _D3) > 0.000001)
        {
          long long v80 = *(simd_double2 *)(v2 + 16 * v3);
          if (v15 + _D3 <= 0.0)
          {
            double v9 = (void *)v4;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v8 = v5;
            }
            else {
              uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
            }
            uint64_t v7 = v80;
            unint64_t v25 = v8[2];
            char v27 = v8[3];
            unint64_t v26 = v25 + 1;
            if (v25 >= v27 >> 1)
            {
              unint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v25 + 1, 1, v8);
              uint64_t v7 = v80;
              uint64_t v8 = v28;
              uint64_t v5 = v28;
            }
            else
            {
              uint64_t v5 = v8;
            }
          }
          else
          {
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v8 = (void *)v4;
            }
            else {
              uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (void *)v4);
            }
            uint64_t v7 = v80;
            unint64_t v25 = v8[2];
            simd_double2 v24 = v8[3];
            unint64_t v26 = v25 + 1;
            if (v25 >= v24 >> 1)
            {
              uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v8);
              uint64_t v7 = v80;
              uint64_t v8 = v6;
              double v9 = v6;
            }
            else
            {
              double v9 = v8;
            }
          }
          v8[2] = v26;
          *(simd_double2 *)&v8[2 * v25 + 4] = v7;
          uint64_t v4 = (unint64_t)v9;
        }
      }
      ++v3;
    }
    while (v3 != v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8EE78];
    uint64_t v5 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v29 = specialized Array.init(repeating:count:)(0, v5[2]);
  unint64_t v68 = *(void *)(v4 + 16);
  if (v68)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_124;
    }
LABEL_26:
    uint64_t v30 = 0;
    int64_t v31 = (void *)v5[2];
    unint64_t v69 = (void *)(v4 + 32);
    unint64_t v32 = v29 + 32;
    unint64_t v75 = v5 + 4;
    uint64_t v71 = v29;
    uint64_t v72 = (void *)MEMORY[0x263F8EE78];
    uint64_t v73 = v29 + 32;
    char v74 = v31;
    unint64_t v67 = (void *)v4;
    while (1)
    {
      if (v30 >= *(void *)(v4 + 16)) {
        goto LABEL_121;
      }
      char v70 = v30;
      uint64_t v33 = (simd_double2 **)&v69[2 * v30];
      uint64_t v34 = *v33;
      uint64_t v35 = (uint64_t)v33[1];
      if (v31) {
        break;
      }
      double v79 = (void *)MEMORY[0x263F8EE78];
LABEL_103:
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v4 = (unint64_t)v67;
        simd_double2 v61 = v72;
      }
      else
      {
        simd_double2 v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72[2] + 1, 1, v72);
        uint64_t v4 = (unint64_t)v67;
      }
      double v63 = v61[2];
      simd_double2 v62 = v61[3];
      if (v63 >= v62 >> 1) {
        simd_double2 v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v61);
      }
      v61[2] = v63 + 1;
      uint64_t v72 = v61;
      simd_double2 v64 = &v61[3 * v63];
      uint64_t v30 = v70 + 1;
      v64[4] = v34;
      v64[5] = v35;
      v64[6] = v79;
      swift_bridgeObjectRelease();
      if (v70 + 1 == v68)
      {
LABEL_112:
        swift_bridgeObjectRelease_n();
        simd_double2 v65 = v72;
        goto LABEL_113;
      }
    }
    uint64_t v4 = 0;
    unint64_t v36 = v35 - 1;
    double v79 = (void *)MEMORY[0x263F8EE78];
    uint64_t v76 = (uint64_t)v33[1];
LABEL_33:
    if (v4 >= *(void *)(v29 + 16))
    {
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (*(unsigned char *)(v32 + v4)) {
      goto LABEL_32;
    }
    if (v4 >= v5[2]) {
      goto LABEL_117;
    }
    if (v35 < 2) {
      goto LABEL_32;
    }
    unint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v77 = *(_OWORD *)&v75[2 * v4];
    unint64_t v39 = *(simd_double2 *)v77;
    double v40 = *(double *)(v77 + 8);
    uint64_t v81 = *(simd_double2 *)v77;
    while (1)
    {
      unint64_t v41 = &v34[v37];
      uint64_t v42 = *v41;
      uint64_t v43 = v41[1];
      if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)v41))).i32[1])
      {
        if (v43.f64[1] > v40) {
          goto LABEL_39;
        }
        if (_simd_orient_pd2(v43, v42, v39) > 0.0)
        {
          _VF = __OFSUB__(v38--, 1);
          if (_VF) {
            goto LABEL_115;
          }
        }
      }
      else
      {
        if (v40 >= v43.f64[1]) {
          goto LABEL_39;
        }
        if (_simd_orient_pd2(v42, v43, v39) > 0.0)
        {
          _VF = __OFADD__(v38++, 1);
          if (_VF) {
            goto LABEL_116;
          }
        }
      }
      unint64_t v39 = v81;
LABEL_39:
      if (v36 == ++v37)
      {
        unint64_t v44 = v34[v37];
        uint64_t v45 = *v34;
        uint64_t v46 = v34->f64[1];
        uint64_t v78 = v5;
        if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)&v44))).i32[1])
        {
          if (v46 <= v40)
          {
            if (_simd_orient_pd2(v45, v44, v39) > 0.0)
            {
              _VF = __OFSUB__(v38--, 1);
              if (_VF) {
                goto LABEL_122;
              }
              goto LABEL_60;
            }
            unint64_t v39 = v81;
          }
LABEL_63:
          if (v38) {
            goto LABEL_64;
          }
LABEL_30:
          unint64_t v32 = v73;
          int64_t v31 = v74;
LABEL_31:
          uint64_t v35 = v76;
LABEL_32:
          if ((void *)++v4 == v31) {
            goto LABEL_103;
          }
          goto LABEL_33;
        }
        if (v40 >= v46) {
          goto LABEL_63;
        }
        if (_simd_orient_pd2(v44, v45, v39) > 0.0)
        {
          _VF = __OFADD__(v38++, 1);
          if (_VF) {
            goto LABEL_123;
          }
        }
LABEL_60:
        unint64_t v39 = v81;
        if (!v38) {
          goto LABEL_30;
        }
LABEL_64:
        unint64_t v47 = v79[2];
        if (!v47)
        {
LABEL_95:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47 + 1, 1, v79);
          }
          uint64_t v5 = v78;
          uint64_t v29 = v71;
          int64_t v31 = v74;
          simd_double2 v60 = v79[2];
          simd_double2 v59 = v79[3];
          if (v60 >= v59 >> 1) {
            double v79 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v59 > 1), v60 + 1, 1, v79);
          }
          v79[2] = v60 + 1;
          *(_OWORD *)&v79[2 * v60 + 4] = v77;
          if (v4 >= *(void *)(v71 + 16)) {
            goto LABEL_120;
          }
          unint64_t v32 = v73;
          *(unsigned char *)(v73 + v4) = 1;
          goto LABEL_31;
        }
        uint64_t v48 = 0;
        uint64_t v5 = v79 + 4;
        while (1)
        {
          char v49 = (simd_double2 **)&v5[2 * v48];
          uint64_t v50 = (uint64_t)v49[1];
          if (v50 >= 2) {
            break;
          }
LABEL_68:
          if (++v48 == v47) {
            goto LABEL_95;
          }
        }
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        uint64_t v53 = *v49;
        uint64_t v29 = v50 - 1;
        while (2)
        {
          double v54 = &v53[v51];
          simd_double2 v55 = *v54;
          simd_double2 v56 = v54[1];
          if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)v54))).i32[1])
          {
            if (v56.f64[1] <= v40)
            {
              if (_simd_orient_pd2(v56, v55, v39) > 0.0)
              {
                _VF = __OFSUB__(v52--, 1);
                if (_VF)
                {
                  __break(1u);
LABEL_111:
                  __break(1u);
                  goto LABEL_112;
                }
              }
LABEL_71:
              unint64_t v39 = v81;
            }
          }
          else if (v40 < v56.f64[1])
          {
            if (_simd_orient_pd2(v55, v56, v39) > 0.0)
            {
              _VF = __OFADD__(v52++, 1);
              if (_VF) {
                goto LABEL_111;
              }
            }
            goto LABEL_71;
          }
          if (v29 != ++v51) {
            continue;
          }
          break;
        }
        double v57 = v53[v51];
        simd_double2 v58 = v53->f64[1];
        if (vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(*(float64x2_t *)&v39, *(float64x2_t *)&v57))).i32[1])
        {
          if (v58 <= v40)
          {
            if (_simd_orient_pd2(*v53, v57, v39) <= 0.0) {
              goto LABEL_66;
            }
            _VF = __OFSUB__(v52--, 1);
            if (!_VF) {
              goto LABEL_66;
            }
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            uint64_t v29 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v29);
            goto LABEL_26;
          }
        }
        else if (v40 < v58)
        {
          if (_simd_orient_pd2(v53[v51], *v53, v39) > 0.0)
          {
            _VF = __OFADD__(v52++, 1);
            if (_VF) {
              goto LABEL_119;
            }
          }
LABEL_66:
          unint64_t v39 = v81;
        }
        if (!v52) {
          goto LABEL_68;
        }
        uint64_t v5 = v78;
        uint64_t v29 = v71;
        goto LABEL_30;
      }
    }
  }
  swift_bridgeObjectRelease();
  simd_double2 v65 = (void *)MEMORY[0x263F8EE78];
LABEL_113:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v65;
}

void *trace(path:points:tangents:uniformSegmentsPerSpan:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X8>)
{
  if (a4 < 1)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  uint64_t v10 = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v5 = v12 * a4;
  a5 = (unsigned __int128)(v12 * (__int128)a4) >> 64;
  if (a5 != (v12 * a4) >> 63)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  a5 = a2;
  uint64_t v8 = *(void **)a2;
  int64_t v6 = *(void *)(*(void *)a2 + 16);
  unint64_t v7 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t)v7 > v8[3] >> 1)
  {
    if (v6 <= (uint64_t)v7) {
      int64_t v14 = v6 + v5;
    }
    else {
      int64_t v14 = v6;
    }
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 0, v8);
  }
  *(void *)a2 = v8;
  a5 = a3;
  double v9 = *(void **)a3;
  int64_t v6 = *(void *)(*(void *)a3 + 16);
  BOOL v15 = __OFADD__(v6, v5);
  v5 += v6;
  if (v15) {
    goto LABEL_76;
  }
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v5 > v9[3] >> 1)
  {
    if (v6 <= v5) {
      int64_t v17 = v5;
    }
    else {
      int64_t v17 = v6;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v17, 0, v9);
    double v9 = result;
  }
  *(void *)a3 = v9;
  if (!v12) {
    return result;
  }
  uint64_t v18 = v10 + 32;
  uint64_t v53 = v10 + 32 + 80 * v12 - 80;
  outlined init with take of PathSpan(v53, (uint64_t)v67);
  int64_t v6 = (int64_t)v67;
  PathSpan.tangent(at:)();
  float64x2_t v57 = v19;
  double v54 = (float64x2_t *)v10;
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  while (2)
  {
    uint64_t v10 = 0;
    a5 = v18 + 80 * v20;
    float64x2_t v21 = *(float64x2_t *)a5;
    uint64_t v5 = *(unsigned __int8 *)(a5 + 64);
    ++v20;
    float64x2_t v22 = *(float64x2_t *)(a5 + 16);
    float64x2_t v62 = *(float64x2_t *)(a5 + 32);
    float64x2_t v63 = v22;
    float64x2_t v64 = *(float64x2_t *)a5;
    v21.f64[0] = *(float64_t *)a5;
    float64x2_t v59 = v22;
    float64x2_t v60 = *(float64x2_t *)(a5 + 48);
    float64x2_t v58 = v21;
    float64x2_t v23 = vsubq_f64(v22, v21);
    float64x2_t v61 = v23;
    do
    {
      if (a4 == v10)
      {
        __break(1u);
        goto LABEL_73;
      }
      double v24 = (double)v10 / (double)a4;
      double v25 = 1.0 - v24;
      if (v5)
      {
        if (v5 == 1)
        {
          float64x2_t v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v24 * (v25 + v25)), v64, v25 * v25), v62, v24 * v24);
          geom_quadratic_bezier_tangent_at_2d();
        }
        else
        {
          float64x2_t v65 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v63, v24 * (v25 * v25 * 3.0)), v64, v25 * (v25 * v25)), v62, v24 * v24 * (v25 * 3.0)), v60, v24 * (v24 * v24));
          geom_cubic_bezier_tangent_at_2d();
        }
        float64x2_t v27 = v26;
        float64x2_t v23 = v61;
      }
      else
      {
        float64x2_t v65 = vaddq_f64(vmulq_n_f64(v59, v24), vmulq_n_f64(v58, v25));
        float64x2_t v27 = v23;
      }
      double v28 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
      if (fabs(v28) > 0.000001) {
        float64x2_t v27 = vdivq_f64(v27, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v28, 0));
      }
      unint64_t v30 = v8[2];
      unint64_t v29 = v8[3];
      if (v30 >= v29 >> 1)
      {
        float64x2_t v50 = v27;
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v8);
        float64x2_t v27 = v50;
        float64x2_t v23 = v61;
        uint64_t v8 = v34;
      }
      v8[2] = v30 + 1;
      *(float64x2_t *)&v8[2 * v30 + 4] = v65;
      if (v10)
      {
        unint64_t v7 = v9[2];
        unint64_t v31 = v9[3];
        int64_t v6 = v7 + 1;
        if (v7 < v31 >> 1) {
          goto LABEL_40;
        }
LABEL_43:
        float64x2_t v51 = v27;
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v6, 1, v9);
        float64x2_t v27 = v51;
        float64x2_t v23 = v61;
        double v9 = v35;
        goto LABEL_40;
      }
      double v32 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
      unint64_t v7 = v9[2];
      unint64_t v31 = v9[3];
      unint64_t v33 = v31 >> 1;
      int64_t v6 = v7 + 1;
      if (fabs(v32) <= 0.000001)
      {
        if (v33 > v7) {
          goto LABEL_40;
        }
        goto LABEL_43;
      }
      if (v33 <= v7)
      {
        float64x2_t v52 = v27;
        double v66 = v32;
        unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v7 + 1, 1, v9);
        double v32 = v66;
        float64x2_t v27 = v52;
        float64x2_t v23 = v61;
        double v9 = v36;
      }
      float64x2_t v27 = vdivq_f64(vaddq_f64(v57, v27), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v32, 0));
LABEL_40:
      v9[2] = v6;
      a5 = (unint64_t)&v9[2 * v7];
      *(float64x2_t *)(a5 + 32) = v27;
      if (!v5)
      {
        *(void *)a3 = v9;
        *(void *)a2 = v8;
        goto LABEL_49;
      }
      ++v10;
    }
    while (a4 != v10);
    *(void *)a3 = v9;
    *(void *)a2 = v8;
    if (v5 == 2) {
      geom_cubic_bezier_tangent_at_2d();
    }
    else {
      geom_quadratic_bezier_tangent_at_2d();
    }
    float64x2_t v23 = v37;
LABEL_49:
    double v38 = sqrt(vaddvq_f64(vmulq_f64(v23, v23)));
    if (fabs(v38) > 0.000001)
    {
      float64x2_t v57 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v38, 0));
      if (v20 != v12) {
        continue;
      }
    }
    else
    {
      float64x2_t v57 = v23;
      if (v20 != v12) {
        continue;
      }
    }
    break;
  }
  swift_bridgeObjectRelease();
  unint64_t v39 = (uint64_t *)(v53 + 16);
  double v40 = (unint64_t *)(v53 + 24);
  int v41 = *(unsigned __int8 *)(v53 + 64);
  if (v41 == 1) {
    uint64_t v42 = (const double *)(v53 + 40);
  }
  else {
    uint64_t v42 = (const double *)(v53 + 56);
  }
  if (v41 == 1) {
    uint64_t result = (void *)(v53 + 32);
  }
  else {
    uint64_t result = (void *)(v53 + 48);
  }
  if (*(unsigned char *)(v53 + 64)) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = (const double *)(v53 + 24);
  }
  if (*(unsigned char *)(v53 + 64)) {
    unint64_t v44 = (float64_t *)result;
  }
  else {
    unint64_t v44 = (float64_t *)(v53 + 16);
  }
  float64x2_t v45 = vld1q_dup_f64(v43);
  v45.f64[0] = *v44;
  float64x2_t v46 = vsubq_f64(v54[2], v45);
  if (sqrt(vaddvq_f64(vmulq_f64(v46, v46))) > 0.000001)
  {
    if (*(unsigned char *)(v53 + 64))
    {
      double v40 = (unint64_t *)(v53 + 40);
      unint64_t v39 = (uint64_t *)(v53 + 32);
      if (v41 != 1)
      {
        double v40 = (unint64_t *)(v53 + 56);
        unint64_t v39 = (uint64_t *)(v53 + 48);
      }
    }
    uint64_t v5 = *v39;
    unint64_t v7 = *v40;
    uint64_t v10 = v8[2];
    a5 = v8[3];
    int64_t v6 = v10 + 1;
    if (v10 < a5 >> 1)
    {
LABEL_68:
      v8[2] = v6;
      unint64_t v47 = &v8[2 * v10];
      v47[4] = v5;
      v47[5] = v7;
      *(void *)a2 = v8;
      unint64_t v49 = v9[2];
      unint64_t v48 = v9[3];
      if (v49 >= v48 >> 1)
      {
        uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v9);
        double v9 = result;
      }
      v9[2] = v49 + 1;
      *(float64x2_t *)&v9[2 * v49 + 4] = v57;
      *(void *)a3 = v9;
      return result;
    }
LABEL_77:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(a5 > 1), v6, 1, v8);
    uint64_t v8 = result;
    goto LABEL_68;
  }
  return result;
}

double TesselatedShape.extractPreInset(frontFace:sweepCurve:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *(void *)(v4 + 16);
  if (!v9)
  {
    __break(1u);
LABEL_34:
    swift_once();
    goto LABEL_17;
  }
  uint64_t v3 = a3;
  if (!*(void *)(v9 + 16))
  {
    *(void *)(a3 + 96) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  uint64_t v10 = (uint64_t *)v4;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  unint64_t v85 = 0xD000000000000011;
  unint64_t v86 = 0x800000022835EF50;
  if (a1) {
    uint64_t v13 = 0x746E6F7246;
  }
  else {
    uint64_t v13 = 1801675074;
  }
  if (a1) {
    unint64_t v14 = 0xE500000000000000;
  }
  else {
    unint64_t v14 = 0xE400000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  unint64_t v62 = v86;
  unint64_t v63 = v85;
  unint64_t v87 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v88 = 0;
  char v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  char v92 = -1;
  long long v93 = 0u;
  long long v94 = 0u;
  uint64_t v95 = 0;
  specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(a1 & 1, a2);
  float32x4_t v65 = v18;
  float32x4_t v68 = v19;
  float32x4_t v71 = v20;
  float32x4_t v74 = v21;
  uint64_t v96 = *v10;
  int64_t v22 = *(void *)(v96 + 16);
  if (v22)
  {
    v97[0] = v17;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    float64x2_t v23 = (long long *)(v96 + 32);
    unint64_t v24 = *(void *)(v17 + 16);
    int64_t v25 = v22;
    float32x4_t v27 = v71;
    float32x4_t v26 = v74;
    float32x4_t v28 = 0uLL;
    float32x4_t v30 = v65;
    float32x4_t v29 = v68;
    do
    {
      long long v31 = *v23;
      v97[0] = v17;
      unint64_t v32 = *(void *)(v17 + 24);
      if (v24 >= v32 >> 1)
      {
        long long v60 = v31;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v24 + 1, 1);
        long long v31 = v60;
        float32x4_t v30 = v65;
        float32x4_t v29 = v68;
        float32x4_t v27 = v71;
        float32x4_t v26 = v74;
        float32x4_t v28 = 0uLL;
        uint64_t v17 = v97[0];
      }
      float v33 = *(double *)&v31;
      float v34 = *((double *)&v31 + 1);
      float32x4_t v35 = vaddq_f32(v26, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v30, v33), v29, v34), v28, v27));
      v35.i32[3] = 0;
      *(void *)(v17 + 16) = v24 + 1;
      *(float32x4_t *)(v17 + 16 * v24 + 32) = v35;
      ++v23;
      ++v24;
      --v25;
    }
    while (v25);
    outlined release of [String : String]((uint64_t)&v96);
  }
  specialized MeshBuffer.init<A>(_:)(v17, (uint64_t)v97);
  specialized MeshBufferContainer.positions.setter((uint64_t)v97);
  outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v97);
  float32x4_t v36 = vmlaq_f32(vmulq_f32(v65, (float32x4_t)0), (float32x4_t)0, v68);
  if ((a1 & 1) == 0)
  {
    __asm { FMOV            V1.4S, #-1.0 }
    __n128 v48 = (__n128)vmlaq_f32(vmlaq_f32(v36, _Q1, v71), (float32x4_t)0, v74);
    v48.n128_u32[3] = 0;
    uint64_t v49 = specialized Array.init(repeating:count:)(v22, v48);
    specialized MeshBuffer.init<A>(_:)(v49, (uint64_t)&v76);
    uint64_t v61 = v76;
    long long v72 = v78;
    long long v75 = v77;
    long long v69 = v79;
    uint64_t v50 = v80;
    char v51 = v81;
    char v52 = v82;
    uint64_t v53 = v83;
    char v66 = v84;
    *(void *)&long long v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((void *)&v78 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v54 = swift_allocObject();
    uint64_t v76 = v54;
    uint64_t v55 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v55 != -1) {
      swift_once();
    }
    char v56 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576 || unk_2681C1CD0 != 0xEC0000006C616D72)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        char v56 = 2;
      }
      else {
        char v56 = v66;
      }
    }
    strcpy((char *)(v54 + 16), "vertexNormal");
    *(unsigned char *)(v54 + 29) = 0;
    *(_WORD *)(v54 + 30) = -5120;
    *(_WORD *)(v54 + 32) = 0;
    *(void *)(v54 + 40) = v53;
    *(unsigned char *)(v54 + 48) = v56;
    *(unsigned char *)(v54 + 49) = v51;
    *(unsigned char *)(v54 + 50) = v52;
    *(void *)(v54 + 56) = v61;
    *(_OWORD *)(v54 + 64) = v75;
    *(_OWORD *)(v54 + 80) = v72;
    *(_OWORD *)(v54 + 96) = v69;
    *(void *)(v54 + 112) = v50;
    *(unsigned char *)(v54 + 120) = v51;
    *(unsigned char *)(v54 + 121) = v52;
    *(void *)(v54 + 128) = v53;
    *(unsigned char *)(v54 + 136) = v66;
    specialized Dictionary.subscript.setter((uint64_t)&v76, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v41 = specialized Sequence.reversed()(v57);
    goto LABEL_32;
  }
  __n128 v37 = (__n128)vmlaq_f32(vaddq_f32(v71, v36), (float32x4_t)0, v74);
  v37.n128_u32[3] = 0;
  uint64_t v38 = specialized Array.init(repeating:count:)(v22, v37);
  specialized MeshBuffer.init<A>(_:)(v38, (uint64_t)&v76);
  uint64_t v59 = v76;
  long long v70 = v78;
  long long v73 = v77;
  long long v67 = v79;
  uint64_t v6 = v80;
  char v7 = v81;
  char v8 = v82;
  uint64_t v5 = v83;
  char v64 = v84;
  *(void *)&long long v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
  *((void *)&v78 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  uint64_t v4 = swift_allocObject();
  uint64_t v76 = v4;
  uint64_t v39 = one-time initialization token for triangleIndices;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v39 != -1) {
    goto LABEL_34;
  }
LABEL_17:
  char v40 = 2;
  if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576 || unk_2681C1CD0 != 0xEC0000006C616D72)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      char v40 = 2;
    }
    else {
      char v40 = v64;
    }
  }
  strcpy((char *)(v4 + 16), "vertexNormal");
  *(unsigned char *)(v4 + 29) = 0;
  *(_WORD *)(v4 + 30) = -5120;
  *(_WORD *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = v5;
  *(unsigned char *)(v4 + 48) = v40;
  *(unsigned char *)(v4 + 49) = v7;
  *(unsigned char *)(v4 + 50) = v8;
  *(void *)(v4 + 56) = v59;
  *(_OWORD *)(v4 + 64) = v73;
  *(_OWORD *)(v4 + 80) = v70;
  *(_OWORD *)(v4 + 96) = v67;
  *(void *)(v4 + 112) = v6;
  *(unsigned char *)(v4 + 120) = v7;
  *(unsigned char *)(v4 + 121) = v8;
  *(void *)(v4 + 128) = v5;
  *(unsigned char *)(v4 + 136) = v64;
  specialized Dictionary.subscript.setter((uint64_t)&v76, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v41 = swift_bridgeObjectRetain();
LABEL_32:
  unint64_t v58 = v87;
  *(void *)uint64_t v3 = v63;
  *(void *)(v3 + 8) = v62;
  *(void *)(v3 + 16) = v58;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = v41;
  double result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(void *)(v3 + 96) = 0;
  return result;
}

uint64_t TesselatedShape.extractPostInset(frontFace:sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(*(void *)(v3 + 40) + 16))
  {
    uint64_t v5 = v3;
    char v7 = result;
    outlined init with take of Double?(v3 + 64, (uint64_t)v98);
    double result = outlined init with take of Double?((uint64_t)v98, (uint64_t)&v100);
    if (v101)
    {
      __break(1u);
    }
    else
    {
      double v8 = v100;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      unint64_t v86 = 0xD000000000000012;
      unint64_t v87 = 0x800000022835EF30;
      if (v7) {
        uint64_t v9 = 0x746E6F7246;
      }
      else {
        uint64_t v9 = 1801675074;
      }
      if (v7) {
        unint64_t v10 = 0xE500000000000000;
      }
      else {
        unint64_t v10 = 0xE400000000000000;
      }
      unint64_t v11 = v10;
      String.append(_:)(*(Swift::String *)&v9);
      swift_bridgeObjectRelease();
      v12._countAndFlagsBits = 41;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      uint64_t v13 = MEMORY[0x263F8EE78];
      unint64_t v63 = v87;
      unint64_t v64 = v86;
      unint64_t v88 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      uint64_t v89 = 0;
      char v90 = 0;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      char v93 = -1;
      long long v94 = 0u;
      long long v95 = 0u;
      uint64_t v96 = 0;
      specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(v7 & 1, a2);
      float32x4_t v71 = v14;
      float32x4_t v74 = v15;
      float32x4_t v65 = v16;
      float32x4_t v68 = v17;
      uint64_t v18 = *(void *)(v5 + 32);
      uint64_t v97 = v18;
      int64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        v99[0] = v13;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        uint64_t v13 = v99[0];
        float32x4_t v20 = (long long *)(v18 + 32);
        *(float *)v21.i32 = v8;
        float32x4_t v22 = (float32x4_t)vdupq_lane_s32(v21, 0);
        unint64_t v23 = *(void *)(v99[0] + 16);
        int64_t v24 = v19;
        float32x4_t v26 = v65;
        float32x4_t v25 = v68;
        float32x4_t v28 = v71;
        float32x4_t v27 = v74;
        do
        {
          long long v29 = *v20;
          v99[0] = v13;
          unint64_t v30 = *(void *)(v13 + 24);
          if (v23 >= v30 >> 1)
          {
            long long v57 = v29;
            float32x4_t v60 = v22;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v23 + 1, 1);
            long long v29 = v57;
            float32x4_t v22 = v60;
            float32x4_t v28 = v71;
            float32x4_t v27 = v74;
            float32x4_t v26 = v65;
            float32x4_t v25 = v68;
            uint64_t v13 = v99[0];
          }
          *(float *)&long long v29 = *(double *)&v29;
          float v31 = *((double *)&v29 + 1);
          float32x4_t v32 = vaddq_f32(v25, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v28, *(float *)&v29), v27, v31), v22, v26));
          v32.i32[3] = 0;
          *(void *)(v13 + 16) = v23 + 1;
          *(float32x4_t *)(v13 + 16 * v23 + 32) = v32;
          ++v20;
          ++v23;
          --v24;
        }
        while (v24);
        outlined release of [String : String]((uint64_t)&v97);
      }
      specialized MeshBuffer.init<A>(_:)(v13, (uint64_t)v99);
      specialized MeshBufferContainer.positions.setter((uint64_t)v99);
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v99);
      float32x4_t v33 = vmlaq_f32(vmulq_f32(v71, (float32x4_t)0), (float32x4_t)0, v74);
      if (v7)
      {
        __n128 v34 = (__n128)vmlaq_f32(vaddq_f32(v65, v33), (float32x4_t)0, v68);
        v34.n128_u32[3] = 0;
        uint64_t v35 = specialized Array.init(repeating:count:)(v19, v34);
        specialized MeshBuffer.init<A>(_:)(v35, (uint64_t)&v77);
        uint64_t v61 = v77;
        long long v72 = v79;
        long long v75 = v78;
        long long v69 = v80;
        uint64_t v36 = v81;
        char v58 = v82;
        char v37 = v83;
        uint64_t v55 = v84;
        char v66 = v85;
        *(void *)&long long v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
        *((void *)&v79 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        uint64_t v38 = swift_allocObject();
        uint64_t v77 = v38;
        uint64_t v39 = one-time initialization token for triangleIndices;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if (v39 != -1) {
          swift_once();
        }
        char v40 = 2;
        if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
          || unk_2681C1CD0 != 0xEC0000006C616D72)
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            char v40 = 2;
          }
          else {
            char v40 = v66;
          }
        }
        strcpy((char *)(v38 + 16), "vertexNormal");
        *(unsigned char *)(v38 + 29) = 0;
        *(_WORD *)(v38 + 30) = -5120;
        *(_WORD *)(v38 + 32) = 0;
        *(void *)(v38 + 40) = v55;
        *(unsigned char *)(v38 + 48) = v40;
        *(unsigned char *)(v38 + 49) = v58;
        *(unsigned char *)(v38 + 50) = v37;
        *(void *)(v38 + 56) = v61;
        *(_OWORD *)(v38 + 64) = v75;
        *(_OWORD *)(v38 + 80) = v72;
        *(_OWORD *)(v38 + 96) = v69;
        *(void *)(v38 + 112) = v36;
        *(unsigned char *)(v38 + 120) = v58;
        *(unsigned char *)(v38 + 121) = v37;
        *(void *)(v38 + 128) = v55;
        *(unsigned char *)(v38 + 136) = v66;
        specialized Dictionary.subscript.setter((uint64_t)&v77, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        double result = swift_bridgeObjectRetain();
      }
      else
      {
        __asm { FMOV            V1.4S, #-1.0 }
        __n128 v46 = (__n128)vmlaq_f32(vmlaq_f32(v33, _Q1, v65), (float32x4_t)0, v68);
        v46.n128_u32[3] = 0;
        uint64_t v47 = specialized Array.init(repeating:count:)(v19, v46);
        specialized MeshBuffer.init<A>(_:)(v47, (uint64_t)&v77);
        uint64_t v62 = v77;
        long long v73 = v79;
        long long v76 = v78;
        long long v70 = v80;
        uint64_t v48 = v81;
        char v59 = v82;
        char v49 = v83;
        uint64_t v56 = v84;
        char v67 = v85;
        *(void *)&long long v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
        *((void *)&v79 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        uint64_t v50 = swift_allocObject();
        uint64_t v77 = v50;
        uint64_t v51 = one-time initialization token for triangleIndices;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if (v51 != -1) {
          swift_once();
        }
        char v52 = 2;
        if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576
          || unk_2681C1CD0 != 0xEC0000006C616D72)
        {
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            char v52 = 2;
          }
          else {
            char v52 = v67;
          }
        }
        strcpy((char *)(v50 + 16), "vertexNormal");
        *(unsigned char *)(v50 + 29) = 0;
        *(_WORD *)(v50 + 30) = -5120;
        *(_WORD *)(v50 + 32) = 0;
        *(void *)(v50 + 40) = v56;
        *(unsigned char *)(v50 + 48) = v52;
        *(unsigned char *)(v50 + 49) = v59;
        *(unsigned char *)(v50 + 50) = v49;
        *(void *)(v50 + 56) = v62;
        *(_OWORD *)(v50 + 64) = v76;
        *(_OWORD *)(v50 + 80) = v73;
        *(_OWORD *)(v50 + 96) = v70;
        *(void *)(v50 + 112) = v48;
        *(unsigned char *)(v50 + 120) = v59;
        *(unsigned char *)(v50 + 121) = v49;
        *(void *)(v50 + 128) = v56;
        *(unsigned char *)(v50 + 136) = v67;
        specialized Dictionary.subscript.setter((uint64_t)&v77, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v53 = swift_bridgeObjectRetain();
        double result = specialized Sequence.reversed()(v53);
      }
      unint64_t v54 = v88;
      *(void *)a3 = v64;
      *(void *)(a3 + 8) = v63;
      *(void *)(a3 + 16) = v54;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = result;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(void *)(a3 + 96) = 0;
    }
  }
  else
  {
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(v3 + 72))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 48);
    uint64_t v38 = v5;
    int64_t v6 = *(void *)(v5 + 16);
    if (v6 && (uint64_t v7 = *(void *)(v3 + 56), *(void *)(v7 + 16)))
    {
      char v9 = result;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      if (v9) {
        uint64_t v10 = 0x746E6F7246;
      }
      else {
        uint64_t v10 = 1801675074;
      }
      if (v9) {
        unint64_t v11 = 0xE500000000000000;
      }
      else {
        unint64_t v11 = 0xE400000000000000;
      }
      unint64_t v12 = v11;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 41;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      uint64_t v14 = MEMORY[0x263F8EE78];
      unint64_t v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(v9 & 1, a2);
      float32x4_t v35 = v16;
      float32x4_t v36 = v15;
      float32x4_t v33 = v18;
      float32x4_t v34 = v17;
      v39[0] = v14;
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      float32x4_t v20 = v33;
      float32x4_t v19 = v34;
      float32x4_t v22 = v35;
      float32x4_t v21 = v36;
      unint64_t v23 = (double *)(v5 + 32);
      unint64_t v24 = *(void *)(v14 + 16);
      do
      {
        long long v25 = *(_OWORD *)v23;
        double v26 = v23[2];
        v39[0] = v14;
        unint64_t v27 = *(void *)(v14 + 24);
        if (v24 >= v27 >> 1)
        {
          long long v32 = v25;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v24 + 1, 1);
          long long v25 = v32;
          float32x4_t v20 = v33;
          float32x4_t v19 = v34;
          float32x4_t v22 = v35;
          float32x4_t v21 = v36;
          uint64_t v14 = v39[0];
        }
        float v28 = *(double *)&v25;
        float v29 = *((double *)&v25 + 1);
        float v30 = v26;
        float32x4_t v31 = vaddq_f32(v20, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v21, v28), v22, v29), v19, v30));
        v31.i32[3] = 0;
        *(void *)(v14 + 16) = v24 + 1;
        *(float32x4_t *)(v14 + 16 * v24 + 32) = v31;
        v23 += 4;
        ++v24;
        --v6;
      }
      while (v6);
      outlined release of [String : String]((uint64_t)&v38);
      specialized MeshBuffer.init<A>(_:)(v14, (uint64_t)v39);
      specialized MeshBufferContainer.positions.setter((uint64_t)v39);
      outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v39);
      double result = swift_bridgeObjectRetain();
      if ((v9 & 1) == 0)
      {
        double result = specialized Sequence.reversed()(v7);
        uint64_t v7 = result;
      }
      *(void *)a3 = 0xD00000000000001ALL;
      *(void *)(a3 + 8) = 0x800000022835EF10;
      *(void *)(a3 + 16) = v37;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = v7;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(void *)(a3 + 96) = 0;
    }
    else
    {
      *(void *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

uint64_t TesselatedShape.extractExtrusion(sweepCurve:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = *(void *)(*v2 + 16);
  uint64_t v8 = *(void *)(v6 + 16);
  BOOL v9 = v7 < v8;
  if (v7 != v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v7)
  {
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  uint64_t v10 = result;
  v26[3] = 0x7845206570616853;
  v26[4] = 0xEF6E6F6973757274;
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v32 = -1;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySays5SIMD2VySdGGAKG_17RealityFoundation13CurveExtruderV10ShapePointVs5NeverOTg504_s17g90Foundation15TesselatedShape33_958D9063BE5145611DD1DCE0DF8621CFLLV16extractExtrusion10sweepi51AA14MeshDescriptorVSgSaySo13simd_float4x4aG_tFAA0N8j4V0D5l3Vs5F16VySdG_ASt_tXEfU_Tf1cn_n(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v2[3];
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized CurveExtruder.init(shape:accumulatedOutlineIndexCount:)(v11, v12);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v10 + 16);
  uint64_t v19 = *(void *)(v13 + 16);
  uint64_t v20 = v19 * v18;
  uint64_t v7 = (unsigned __int128)(v19 * (__int128)v18) >> 64;
  BOOL v9 = v7 < v20 >> 63;
  if (v7 != v20 >> 63) {
    goto LABEL_18;
  }
  uint64_t v21 = *(void *)(v17 + 16);
  uint64_t v22 = (v18 - 1) * v21;
  uint64_t v7 = (unsigned __int128)((v18 - 1) * (__int128)v21) >> 64;
  BOOL v9 = v7 < v22 >> 63;
  if (v7 != v22 >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v20 < 0) {
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v20)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v3 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v3 + 16) = v20;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  v26[0] = 0;
  v36[0] = v3 + 32;
  v36[1] = v20;
  closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(v36, v26, v20, v13, v15, v17, v10);
  uint64_t v7 = v26[0];
  BOOL v9 = v20 < v26[0];
  if (v20 < v26[0])
  {
LABEL_20:
    __break(1u);
    if (!v9) {
      goto LABEL_24;
    }
    __break(1u);
LABEL_23:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_24:
    *(void *)(v3 + 16) = v7;
    double result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  *(void *)(v3 + 16) = v26[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized MeshBuffer.init<A>(_:)(v3, (uint64_t)v36);
  specialized MeshBufferContainer.positions.setter((uint64_t)v36);
  outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v36);
  if (v22 < 0) {
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = MEMORY[0x263F8EE78];
  if (v22)
  {
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v24 + 16) = v22;
  }
  else
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
  }
  specialized CurveExtruder.populate(indexBuffer:curveLength:)(v24 + 32, v22, v18, v13, v17);
  *(void *)(v24 + 16) = v22;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  double result = swift_bridgeObjectRelease();
  unint64_t v25 = v27;
  *(_OWORD *)a2 = xmmword_228348080;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v23;
  *(void *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = 2;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(void *)(a2 + 96) = 0;
  return result;
}

uint64_t closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 < 0) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v8 + 16) = a3;
  }
  else
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
  }
  uint64_t v37 = 0;
  uint64_t v28 = v8 + 32;
  *(void *)&long long v29 = a3;
  closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)((uint64_t)&v28, &v37, a3, a4, a5, a6, a1, a7);
  if (v7)
  {
    uint64_t v18 = v37;
    if (v37 <= a3)
    {
LABEL_19:
      *(void *)(v8 + 16) = v18;
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  if (v37 > a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v8 + 16) = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized MeshBuffer.init<A>(_:)(v8, (uint64_t)&v28);
    uint64_t v22 = v28;
    long long v26 = v30;
    long long v27 = v29;
    long long v25 = v31;
    a6 = v32;
    char v20 = v34;
    char v21 = v33;
    uint64_t v19 = v35;
    char v24 = v36;
    *(void *)&long long v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((void *)&v30 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v8 = swift_allocObject();
    uint64_t v28 = v8;
    uint64_t v15 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v15 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  char v16 = 2;
  if (static MeshBuffers.Identifier.triangleIndices != 0x6154786574726576 || unk_2681C1CD0 != 0xED0000746E65676ELL)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      char v16 = 2;
    }
    else {
      char v16 = v24;
    }
  }
  strcpy((char *)(v8 + 16), "vertexTangent");
  *(_WORD *)(v8 + 30) = -4864;
  *(_WORD *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = v19;
  *(unsigned char *)(v8 + 48) = v16;
  *(unsigned char *)(v8 + 49) = v21;
  *(unsigned char *)(v8 + 50) = v20;
  *(void *)(v8 + 56) = v22;
  *(_OWORD *)(v8 + 64) = v27;
  *(_OWORD *)(v8 + 80) = v26;
  *(_OWORD *)(v8 + 96) = v25;
  *(void *)(v8 + 112) = a6;
  *(unsigned char *)(v8 + 120) = v21;
  *(unsigned char *)(v8 + 121) = v20;
  *(void *)(v8 + 128) = v19;
  *(unsigned char *)(v8 + 136) = v24;
  specialized Dictionary.subscript.setter((uint64_t)&v28, 0x6154786574726576, 0xED0000746E65676ELL, 0);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a2 = a3;
  return result;
}

uint64_t closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  if (a3 < 0) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v9 + 16) = a3;
  }
  else
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
  }
  uint64_t v38 = 0;
  uint64_t v29 = v9 + 32;
  *(void *)&long long v30 = a3;
  closure #1 in closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(&v29, &v38, a3, a4, a5, a6, a7, (uint64_t *)a1, a8);
  if (v8)
  {
    uint64_t v20 = v38;
    if (v38 <= a3)
    {
LABEL_19:
      *(void *)(v9 + 16) = v20;
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  if (v38 > a3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v9 + 16) = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized MeshBuffer.init<A>(_:)(v9, (uint64_t)&v29);
    uint64_t v24 = v29;
    long long v27 = v31;
    long long v28 = v30;
    long long v26 = v32;
    a8 = v33;
    char v22 = v35;
    char v23 = v34;
    uint64_t v21 = v36;
    LOBYTE(a6) = v37;
    *(void *)&long long v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((void *)&v31 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    a1 = swift_allocObject();
    uint64_t v29 = a1;
    uint64_t v17 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v17 == -1) {
      goto LABEL_8;
    }
  }
  swift_once();
LABEL_8:
  char v18 = 2;
  if (static MeshBuffers.Identifier.triangleIndices != 0x6942786574726576 || unk_2681C1CD0 != 0xEF746E65676E6174)
  {
    if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
      char v18 = 2;
    }
    else {
      char v18 = a6;
    }
  }
  *(void *)(a1 + 16) = 0x6942786574726576;
  *(void *)(a1 + 24) = 0xEF746E65676E6174;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v21;
  *(unsigned char *)(a1 + 48) = v18;
  *(unsigned char *)(a1 + 49) = v23;
  *(unsigned char *)(a1 + 50) = v22;
  *(void *)(a1 + 56) = v24;
  *(_OWORD *)(a1 + 64) = v28;
  *(_OWORD *)(a1 + 80) = v27;
  *(_OWORD *)(a1 + 96) = v26;
  *(void *)(a1 + 112) = a8;
  *(unsigned char *)(a1 + 120) = v23;
  *(unsigned char *)(a1 + 121) = v22;
  *(void *)(a1 + 128) = v21;
  *(unsigned char *)(a1 + 136) = a6;
  specialized Dictionary.subscript.setter((uint64_t)&v29, 0x6942786574726576, 0xEF746E65676E6174, 0);
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *a2 = a3;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in TesselatedShape.extractExtrusion(sweepCurve:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  if (a3 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v14 + 16) = a3;
    }
    else
    {
      uint64_t v14 = MEMORY[0x263F8EE78];
    }
    specialized CurveExtruder.populate(positionBuffer:tangentBuffer:bitangentBuffer:normalBuffer:sweepCurve:)(*a7, a7[1], *a8, a8[1], *a1, a1[1], v14 + 32, a3, a9, a4);
    *(void *)(v14 + 16) = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized MeshBuffer.init<A>(_:)(v14, (uint64_t)&v28);
    uint64_t v23 = v28;
    long long v26 = v30;
    long long v27 = v29;
    long long v25 = v31;
    uint64_t v15 = v32;
    int v37 = v33;
    char v22 = v34;
    uint64_t v21 = v35;
    int v38 = v36;
    *(void *)&long long v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((void *)&v30 + 1) = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    uint64_t v16 = swift_allocObject();
    uint64_t v28 = v16;
    uint64_t v17 = one-time initialization token for triangleIndices;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    char v18 = 2;
    if (static MeshBuffers.Identifier.triangleIndices != 0x6F4E786574726576 || unk_2681C1CD0 != 0xEC0000006C616D72)
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        char v18 = 2;
      }
      else {
        char v18 = v38;
      }
    }
    strcpy((char *)(v16 + 16), "vertexNormal");
    *(unsigned char *)(v16 + 29) = 0;
    *(_WORD *)(v16 + 30) = -5120;
    *(_WORD *)(v16 + 32) = 0;
    *(void *)(v16 + 40) = v21;
    *(unsigned char *)(v16 + 48) = v18;
    char v19 = v37;
    *(unsigned char *)(v16 + 49) = v37;
    *(unsigned char *)(v16 + 50) = v22;
    *(void *)(v16 + 56) = v23;
    *(_OWORD *)(v16 + 64) = v27;
    *(_OWORD *)(v16 + 80) = v26;
    *(_OWORD *)(v16 + 96) = v25;
    *(void *)(v16 + 112) = v15;
    *(unsigned char *)(v16 + 120) = v19;
    *(unsigned char *)(v16 + 121) = v22;
    *(void *)(v16 + 128) = v21;
    *(unsigned char *)(v16 + 136) = v38;
    specialized Dictionary.subscript.setter((uint64_t)&v28, 0x6F4E786574726576, 0xEC0000006C616D72, 0);
    swift_release();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    *a2 = a3;
  }
  return result;
}

__n128 TesselatedShape.extractAll(extrusionMethod:chamferMode:materialAssignment:)@<Q0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, float32x4_t a8@<Q3>, float32x4_t a9@<Q4>)
{
  uint64_t v11 = *a1;
  int v12 = *((unsigned __int8 *)a1 + 8);
  int v13 = *a2;
  uint64_t v34 = *a3;
  uint64_t v35 = a3[1];
  uint64_t v36 = a3[2];
  uint64_t v37 = a3[3];
  uint64_t v38 = a3[4];
  char v92 = 0;
  char v91 = 0;
  char v90 = 0;
  *(void *)long long v80 = v11;
  v80[8] = v12;
  MeshResource.ShapeExtrusionOptions.ExtrusionMethod.extractSweepCurve()(a5, a6, a7, a8, a9);
  uint64_t v15 = v14;
  if (v12)
  {
    if (*(void *)(v11 + 16) > 1uLL)
    {
LABEL_3:
      TesselatedShape.extractExtrusion(sweepCurve:)(v14, (uint64_t)v80);
      uint64_t v77 = *(void *)&v80[8];
      uint64_t v66 = *(void *)v80;
      uint64_t v67 = *(void *)&v80[16];
      uint64_t v79 = v81;
      long long v68 = v86;
      long long v69 = v87;
      long long v71 = v88;
      char v92 = v82;
      char v33 = v82 & 1;
      unint64_t v72 = v89.n128_u64[1];
      unint64_t v70 = v89.n128_u64[0];
      unint64_t v73 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      goto LABEL_6;
    }
  }
  else if (COERCE_FLOAT(v11 & 0x7FFFFFFF) > 0.00001)
  {
    goto LABEL_3;
  }
  char v33 = 0;
  unint64_t v72 = 0;
  unint64_t v73 = 0;
  unint64_t v70 = 0;
  long long v71 = 0uLL;
  long long v69 = 0uLL;
  long long v68 = 0uLL;
  uint64_t v79 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v77 = 0;
LABEL_6:
  outlined init with take of Double?(v9 + 64, (uint64_t)v95);
  outlined init with take of Double?((uint64_t)v95, (uint64_t)v96);
  if (v96[8])
  {
    TesselatedShape.extractPreInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
    uint64_t v16 = *(void *)&v80[8];
    uint64_t v64 = *(void *)&v80[16];
    uint64_t v65 = *(void *)v80;
    uint64_t v63 = v81;
    unint64_t v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
    uint64_t v55 = *((void *)&v87 + 1);
    uint64_t v56 = v87;
    uint64_t v59 = v88;
    uint64_t v60 = v86;
    uint64_t v57 = *((void *)&v88 + 1);
    uint64_t v58 = *((void *)&v86 + 1);
    unint64_t v53 = v89.n128_u64[1];
    unint64_t v54 = v89.n128_u64[0];
    char v32 = v82;
    char v94 = v82;
    TesselatedShape.extractPreInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
    swift_bridgeObjectRelease();
    char v18 = 0;
    uint64_t v31 = 0;
    uint64_t v61 = 0;
    unint64_t v62 = 0;
    uint64_t v78 = 0;
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    long long v75 = *(_OWORD *)v80;
    uint64_t v47 = *(void *)&v80[16];
    uint64_t v48 = 0;
    uint64_t v21 = v81;
    unint64_t v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
    char v23 = v82;
    long long v45 = v87;
    long long v46 = v86;
    long long v76 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    __n128 v43 = v89;
    long long v44 = v88;
    char v93 = v82;
    __n128 v49 = 0u;
    long long v50 = 0u;
    long long v74 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    __n128 v39 = 0u;
    long long v40 = 0u;
    uint64_t v24 = v16;
    if (v16)
    {
LABEL_8:
      outlined consume of MeshDescriptor.Materials(v63, v32 & 1);
      char v94 = 0;
      uint64_t v25 = v34;
      goto LABEL_17;
    }
  }
  else
  {
    if ((v13 | 2) == 2)
    {
      TesselatedShape.extractPostInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      uint64_t v26 = *(void *)&v80[8];
      uint64_t v64 = *(void *)&v80[16];
      uint64_t v65 = *(void *)v80;
      uint64_t v63 = v81;
      unint64_t v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      uint64_t v55 = *((void *)&v87 + 1);
      uint64_t v56 = v87;
      uint64_t v59 = v88;
      uint64_t v60 = v86;
      uint64_t v57 = *((void *)&v88 + 1);
      uint64_t v58 = *((void *)&v86 + 1);
      unint64_t v53 = v89.n128_u64[1];
      unint64_t v54 = v89.n128_u64[0];
      char v32 = v82;
      char v94 = v82;
      TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      long long v76 = *(_OWORD *)&v80[8];
      uint64_t v78 = v81;
      uint64_t v61 = *(void *)v80;
      unint64_t v62 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      long long v51 = v87;
      long long v52 = v86;
      __n128 v49 = v89;
      long long v50 = v88;
      char v91 = v82;
      BYTE4(v31) = v82 & 1;
    }
    else
    {
      TesselatedShape.extractPreInset(frontFace:sweepCurve:)(1, v15, (uint64_t)v80);
      BYTE4(v31) = 0;
      uint64_t v61 = 0;
      unint64_t v62 = 0;
      uint64_t v78 = 0;
      uint64_t v26 = *(void *)&v80[8];
      uint64_t v64 = *(void *)&v80[16];
      uint64_t v65 = *(void *)v80;
      uint64_t v63 = v81;
      unint64_t v17 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      uint64_t v55 = *((void *)&v87 + 1);
      uint64_t v56 = v87;
      uint64_t v59 = v88;
      uint64_t v60 = v86;
      uint64_t v57 = *((void *)&v88 + 1);
      uint64_t v58 = *((void *)&v86 + 1);
      long long v76 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      unint64_t v53 = v89.n128_u64[1];
      unint64_t v54 = v89.n128_u64[0];
      __n128 v49 = 0u;
      long long v50 = 0u;
      char v32 = v82;
      char v94 = v82;
    }
    if ((v13 - 1) > 1)
    {
      TesselatedShape.extractPreInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      swift_bridgeObjectRelease();
      char v18 = 0;
      LOBYTE(v31) = 0;
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      long long v75 = *(_OWORD *)v80;
      uint64_t v47 = *(void *)&v80[16];
      uint64_t v48 = 0;
      uint64_t v21 = v81;
      unint64_t v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      char v23 = v82;
      long long v45 = v87;
      long long v46 = v86;
      __n128 v43 = v89;
      long long v44 = v88;
      char v93 = v82;
      long long v74 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      __n128 v39 = 0u;
      long long v40 = 0u;
    }
    else
    {
      TesselatedShape.extractPostInset(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      long long v75 = *(_OWORD *)v80;
      uint64_t v47 = *(void *)&v80[16];
      uint64_t v21 = v81;
      char v23 = v82;
      unint64_t v22 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      long long v45 = v87;
      long long v46 = v86;
      __n128 v43 = v89;
      long long v44 = v88;
      char v93 = v82;
      TesselatedShape.extractJoinerPatch(frontFace:sweepCurve:)(0, v15, (uint64_t)v80);
      swift_bridgeObjectRelease();
      uint64_t v48 = *(void *)v80;
      long long v74 = *(_OWORD *)&v80[8];
      uint64_t v20 = v81;
      char v18 = v82;
      unint64_t v19 = v83 | ((unint64_t)(v84 | (v85 << 16)) << 32);
      long long v41 = v87;
      long long v42 = v86;
      __n128 v39 = v89;
      long long v40 = v88;
      char v90 = v82;
      LOBYTE(v31) = v82 & 1;
    }
    uint64_t v24 = v26;
    if (v26) {
      goto LABEL_8;
    }
  }
  uint64_t v25 = v63;
LABEL_17:
  if (*((void *)&v75 + 1))
  {
    outlined consume of MeshDescriptor.Materials(v21, v23 & 1);
    char v93 = 0;
    uint64_t v21 = v35;
  }
  if (v77)
  {
    outlined consume of MeshDescriptor.Materials(v79, v33);
    char v92 = 0;
    uint64_t v79 = v36;
  }
  if ((void)v76)
  {
    outlined consume of MeshDescriptor.Materials(v78, SBYTE4(v31));
    char v91 = 0;
    uint64_t v78 = v37;
  }
  if ((void)v74)
  {
    outlined consume of MeshDescriptor.Materials(v20, v31);
    char v18 = 0;
    char v90 = 0;
    uint64_t v20 = v38;
  }
  *(void *)a4 = v65;
  *(void *)(a4 + 8) = v24;
  *(void *)(a4 + 16) = v64;
  *(void *)(a4 + 24) = v25;
  *(void *)(a4 + 40) = v60;
  *(void *)(a4 + 48) = v58;
  *(void *)(a4 + 56) = v56;
  *(void *)(a4 + 64) = v55;
  *(unsigned char *)(a4 + 32) = v94;
  *(unsigned char *)(a4 + 39) = BYTE6(v17);
  char v27 = v93;
  *(_DWORD *)(a4 + 33) = v17;
  *(_WORD *)(a4 + 37) = WORD2(v17);
  char v28 = v92;
  *(void *)(a4 + 72) = v59;
  *(void *)(a4 + 80) = v57;
  char v29 = v91;
  *(void *)(a4 + 88) = v54;
  *(void *)(a4 + 96) = v53;
  *(_OWORD *)(a4 + 104) = v75;
  *(void *)(a4 + 120) = v47;
  *(void *)(a4 + 128) = v21;
  *(unsigned char *)(a4 + 136) = v27;
  *(_DWORD *)(a4 + 137) = v22;
  *(unsigned char *)(a4 + 143) = BYTE6(v22);
  *(_WORD *)(a4 + 141) = WORD2(v22);
  *(_OWORD *)(a4 + 144) = v46;
  *(_OWORD *)(a4 + 160) = v45;
  *(_OWORD *)(a4 + 176) = v44;
  *(__n128 *)(a4 + 192) = v43;
  *(void *)(a4 + 208) = v66;
  *(void *)(a4 + 216) = v77;
  *(void *)(a4 + 224) = v67;
  *(void *)(a4 + 232) = v79;
  *(unsigned char *)(a4 + 240) = v28;
  *(_DWORD *)(a4 + 241) = v73;
  *(unsigned char *)(a4 + 247) = BYTE6(v73);
  *(_WORD *)(a4 + 245) = WORD2(v73);
  *(_OWORD *)(a4 + 248) = v68;
  *(_OWORD *)(a4 + 264) = v69;
  *(_OWORD *)(a4 + 280) = v71;
  *(void *)(a4 + 296) = v70;
  *(void *)(a4 + 304) = v72;
  *(void *)(a4 + 312) = v61;
  *(_OWORD *)(a4 + 320) = v76;
  *(void *)(a4 + 336) = v78;
  *(unsigned char *)(a4 + 344) = v29;
  *(unsigned char *)(a4 + 351) = BYTE6(v62);
  *(_WORD *)(a4 + 349) = WORD2(v62);
  *(_DWORD *)(a4 + 345) = v62;
  *(_OWORD *)(a4 + 352) = v52;
  *(_OWORD *)(a4 + 368) = v51;
  *(_OWORD *)(a4 + 384) = v50;
  *(__n128 *)(a4 + 400) = v49;
  *(void *)(a4 + 416) = v48;
  *(_OWORD *)(a4 + 424) = v74;
  *(void *)(a4 + 440) = v20;
  *(unsigned char *)(a4 + 448) = v18;
  *(unsigned char *)(a4 + 455) = BYTE6(v19);
  *(_WORD *)(a4 + 453) = WORD2(v19);
  *(_DWORD *)(a4 + 449) = v19;
  *(_OWORD *)(a4 + 456) = v42;
  *(_OWORD *)(a4 + 472) = v41;
  *(_OWORD *)(a4 + 488) = v40;
  __n128 result = v39;
  *(__n128 *)(a4 + 504) = v39;
  return result;
}

void one-time initialization function for defaultChamferProfile()
{
  uint64_t v0 = CGPathCreateMutable();
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();

  defaultChamferProfile = v0;
}

uint64_t $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
      RERelease();
    __n128 result = swift_bridgeObjectRelease();
  }
  uint64_t v5 = *a2;
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      for (uint64_t j = 0; j != v6; ++j)
        RERelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void closure #2 in extrude(path:options:)(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = *a2;
  double v13 = *(float *)(a3 + 56);
  *(void *)&long long v22 = *(void *)(a3 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TesselatedShape.init(shape:chamferProfile:chamferRadius:resolution:triangulatePreInset:)(v11, v12, (uint64_t *)&v22, a4, (uint64_t)v27, v13);
  if (v6)
  {
    *a5 = v6;
  }
  else
  {
    uint64_t v14 = *(void *)a3;
    unsigned __int8 v15 = *(unsigned char *)(a3 + 8);
    uint64_t v25 = v14;
    unsigned __int8 v26 = v15;
    unsigned __int8 v24 = *(unsigned char *)(a3 + 80);
    int v16 = *(_DWORD *)(a3 + 100);
    long long v22 = *(_OWORD *)(a3 + 84);
    int v23 = v16;
    outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v14, v15);
    TesselatedShape.extractAll(extrusionMethod:chamferMode:materialAssignment:)(&v25, &v24, (unsigned int *)&v22, a6, v17, v18, v19, v20, v21);
    outlined release of TesselatedShape((uint64_t)v27);
    outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v14, v15);
  }
}

void partial apply for closure #2 in extrude(path:options:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  closure #2 in extrude(path:options:)(a1, *(unint64_t **)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), a2, a3);
}

unint64_t lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError()
{
  unint64_t result = lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError;
  if (!lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeExtrusionError and conformance ShapeExtrusionError);
  }
  return result;
}

uint64_t outlined init with take of PathSpan(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
  lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  uint64_t v8 = v14;
  if (!a2)
  {
LABEL_5:
    uint64_t v9 = 0;
LABEL_12:
    *a1 = v3;
    a1[1] = v8;
    return v9;
  }
  if (!a3)
  {
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    dispatch thunk of Collection.endIndex.getter();
    if (v14 != v13)
    {
      lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
      uint64_t v9 = 0;
      uint64_t v11 = a3;
      uint64_t v10 = a3 - 1;
      while (1)
      {
        GeometryCollection.subscript.getter();
        dispatch thunk of Collection.index(after:)();
        uint64_t v8 = v12;
        *(_DWORD *)(a2 + 4 * v9) = v12;
        if (v10 == v9) {
          break;
        }
        dispatch thunk of Collection.endIndex.getter();
        ++v9;
        if (v12 == v3) {
          goto LABEL_12;
        }
      }
      uint64_t v9 = v11;
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

char *specialized UnsafeMutableBufferPointer._copyContents(initializing:)(char *a1, uint64_t a2, char *__src, uint64_t a4)
{
  long long v4 = __src;
  if (!a4 || !a2) {
    return v4;
  }
  if (a4 >= a2) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a4;
  }
  if ((v5 & 0x8000000000000000) == 0 && (&a1[16 * v5] <= __src || &__src[16 * v5] <= a1))
  {
    memcpy(a1, __src, 16 * v5);
    v4 += 16 * v5;
    return v4;
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.min(by:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result == a2) {
    return 0;
  }
  if (a2 < result) {
    goto LABEL_25;
  }
  if (result >= a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = result + 1;
  uint64_t v3 = result;
  if (result + 1 == a2) {
    return v3;
  }
  if (result + 1 >= a2) {
    goto LABEL_22;
  }
  if (result >= -1)
  {
    unint64_t v5 = *(void *)(a3 + 16);
    if (v4 >= v5)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    if (v5 <= result)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    if (*(double *)(a3 + 32 + 32 * v4 + 8) >= *(double *)(a3 + 32 + 32 * result + 8)) {
      unint64_t v4 = result;
    }
    uint64_t v6 = result + 2;
    if (result + 2 == a2) {
      return v4;
    }
    uint64_t v7 = (double *)(a3 + 32 * result + 104);
    uint64_t v3 = v4;
    while (v6 < a2)
    {
      if (v6 >= v5) {
        goto LABEL_23;
      }
      if (v4 >= v5) {
        goto LABEL_24;
      }
      double v8 = *v7;
      v7 += 4;
      if (v8 < *(double *)(a3 + 40 + 32 * v4))
      {
        uint64_t v3 = v6;
        unint64_t v4 = v6;
      }
      if (a2 == ++v6) {
        return v3;
      }
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static ExtrudedShapeDescriptor.compile(shapes:instances:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x263F8EE78];
  uint64_t v80 = MEMORY[0x263F8EE78];
  v79[0] = 0;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v58 = a2;
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    uint64_t v6 = (void *)v2;
    uint64_t v59 = v4;
    uint64_t v60 = v3;
    do
    {
      memcpy(__dst, (const void *)(v4 + 520 * v5), sizeof(__dst));
      uint64_t v7 = ExtrudedShapeDescriptor.allDescriptors.getter();
      int64_t v8 = v7[2];
      if (v8)
      {
        uint64_t v61 = v5;
        unint64_t v62 = v6;
        uint64_t v77 = v2;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
        uint64_t v9 = v77;
        uint64_t v10 = v7 + 8;
        while (1)
        {
          int64_t v64 = v8;
          uint64_t v65 = v9;
          uint64_t v11 = *(v10 - 3);
          uint64_t v12 = *(v10 - 2);
          uint64_t v13 = *(v10 - 1);
          char v14 = *(unsigned char *)v10;
          uint64_t v15 = v10[1];
          unsigned __int8 v16 = *((unsigned char *)v10 + 24);
          uint64_t v17 = v10[4];
          uint64_t v18 = v10[5];
          uint64_t v19 = v10[7];
          uint64_t v66 = v10[2];
          uint64_t v67 = v10[6];
          uint64_t v20 = v10[8];
          __dst[0] = *(v10 - 4);
          __dst[1] = v11;
          __dst[2] = v12;
          __dst[3] = v13;
          LOBYTE(__dst[4]) = v14;
          __dst[5] = v15;
          __dst[6] = v66;
          LOBYTE(__dst[7]) = v16;
          __dst[8] = v17;
          __dst[9] = v18;
          __dst[10] = v67;
          __dst[11] = v19;
          __dst[12] = v20;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v70 = v14;
          outlined copy of MeshDescriptor.Materials(v13, v14);
          uint64_t v72 = v15;
          uint64_t v21 = v15;
          uint64_t v22 = v66;
          outlined copy of MeshDescriptor.Primitives?(v21, v66, v16);
          outlined copy of MeshDescriptor.Skinning?(v17, v18);
          MeshDescriptor.makeGeomMesh()((uint64_t)&v73);
          uint64_t v23 = v73;
          if (v76) {
            break;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MeshDescriptor.Materials(v13, v70);
          outlined consume of MeshDescriptor.Primitives?(v72, v66, v16);
          outlined consume of StateMachineGraph?(v17, v18);
          uint64_t v9 = v65;
          uint64_t v77 = v65;
          unint64_t v25 = *(void *)(v65 + 16);
          unint64_t v24 = *(void *)(v65 + 24);
          if (v25 >= v24 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
            uint64_t v9 = v77;
          }
          v10 += 13;
          *(void *)(v9 + 16) = v25 + 1;
          *(void *)(v9 + 8 * v25 + 32) = v23;
          int64_t v8 = v64 - 1;
          if (v64 == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v6 = v62;
            uint64_t v4 = v59;
            uint64_t v3 = v60;
            uint64_t v5 = v61;
            goto LABEL_11;
          }
        }
        uint64_t v33 = v74;
        __int16 v34 = v75;
        __dst[0] = v73;
        __dst[1] = v74;
        LOWORD(__dst[2]) = v75;
        lazy protocol witness table accessor for type GeomMeshError and conformance GeomMeshError();
        swift_willThrowTypedImpl();
        swift_allocError();
        *(void *)uint64_t v35 = v23;
        *(void *)(v35 + 8) = v33;
        *(_WORD *)(v35 + 16) = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of MeshDescriptor.Materials(v13, v70);
        outlined consume of MeshDescriptor.Primitives?(v72, v66, v16);
        outlined consume of StateMachineGraph?(v17, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
      uint64_t v9 = v2;
LABEL_11:
      uint64_t v26 = *(void *)(v80 + 16);
      uint64_t v27 = *(void *)(v9 + 16);
      uint64_t v28 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        goto LABEL_54;
      }
      if (v28 < v26)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        while (1)
        {
LABEL_58:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
      }
      uint64_t v29 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      }
      unint64_t v31 = v6[2];
      unint64_t v30 = v6[3];
      if (v31 >= v30 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v6);
      }
      ++v5;
      v6[2] = v31 + 1;
      char v32 = &v6[2 * v31];
      v32[4] = v26;
      void v32[5] = v28;
      specialized Array.append<A>(contentsOf:)(v29);
      uint64_t v2 = MEMORY[0x263F8EE78];
    }
    while (v5 != v3);
    swift_bridgeObjectRelease();
    a2 = v58;
    if (v58) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    if (a2)
    {
LABEL_22:
      v79[0] = v2;
      uint64_t v36 = *(void *)(a2 + 16);
      if (v36)
      {
        uint64_t v37 = a2 + 32;
        uint64_t v38 = v6 + 4;
        swift_bridgeObjectRetain();
        uint64_t v39 = 0;
        long long v40 = (void *)MEMORY[0x263F8EE78];
        uint64_t v63 = v6;
        uint64_t v69 = v37;
        uint64_t v71 = v36;
        long long v68 = v6 + 4;
        do
        {
          unint64_t v41 = *(unsigned int *)(v37 + 80 * v39);
          if (v6[2] <= v41) {
            goto LABEL_51;
          }
          long long v42 = &v38[2 * v41];
          int64_t v44 = *v42;
          uint64_t v43 = v42[1];
          if (*v42 != v43)
          {
            if (v43 < v44) {
              goto LABEL_52;
            }
            if (v44 >= v43)
            {
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v44 < 0 || HIDWORD(v44)) {
              goto LABEL_58;
            }
            uint64_t v45 = *v42;
            while (1)
            {
              uint64_t v46 = REGeomInstanceCreate();
              if (!v46) {
                goto LABEL_56;
              }
              if (!v40) {
                goto LABEL_57;
              }
              uint64_t v47 = v46;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v40 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
              }
              unint64_t v49 = v40[2];
              unint64_t v48 = v40[3];
              long long v50 = v40;
              if (v49 >= v48 >> 1) {
                long long v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1, v40);
              }
              v50[2] = v49 + 1;
              long long v40 = v50;
              v50[v49 + 4] = v47;
              v79[0] = (uint64_t)v50;
              if (v43 - 1 == v45) {
                break;
              }
              if (++v45 < v44 || v45 >= v43)
              {
                __break(1u);
LABEL_51:
                __break(1u);
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
              if (v45 == 0x100000000) {
                goto LABEL_58;
              }
            }
            uint64_t v6 = v63;
            uint64_t v37 = v69;
            uint64_t v36 = v71;
            uint64_t v38 = v68;
          }
          ++v39;
        }
        while (v39 != v36);
        swift_bridgeObjectRelease();
      }
    }
  }
  type metadata accessor for __MeshCompileOptions();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = REMeshCompileOptionsCreate();
  uint64_t v52 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v52, (uint64_t)__dst);
  uint64_t v53 = __dst[3];
  uint64_t v54 = __dst[4];
  __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 32))(v53, v54);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
  uint64_t v55 = REAssetManagerMeshAssetCreateFromModelsAndSkeletonsWithOptionsNullable();
  if (v55)
  {
    uint64_t v22 = v55;
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
    $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)((uint64_t)&v80, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(void *)uint64_t v57 = 0xD00000000000003FLL;
    *(void *)(v57 + 8) = 0x800000022835F060;
    *(unsigned char *)(v57 + 16) = 2;
    swift_willThrow();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_bridgeObjectRelease();
LABEL_20:
    $defer #1 () in static ExtrudedShapeDescriptor.compile(shapes:instances:)((uint64_t)&v80, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v22;
}

uint64_t specialized static TesselatedShape.endcapTransform(frontFace:sweepCurve:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if ((result & 1) == 0)
  {
    if (v2)
    {
      __asm { FMOV            V7.4S, #-1.0 }
      return result;
    }
    goto LABEL_7;
  }
  if (!v2)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

void specialized TesselatedShape.init(shape:chamferProfile:chamferRadius:resolution:triangulatePreInset:)(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v7 = v6;
  LOBYTE(v156) = a4;
  uint64_t v10 = *a3;
  *(void *)&long long v163 = MEMORY[0x263F8EE78];
  *((void *)&v163 + 1) = MEMORY[0x263F8EE78];
  uint64_t v164 = 0;
  *((void *)&v165 + 1) = MEMORY[0x263F8EE78];
  *(void *)&long long v166 = MEMORY[0x263F8EE78];
  *((void *)&v166 + 1) = MEMORY[0x263F8EE78];
  v167 = (char *)MEMORY[0x263F8EE78];
  uint64_t v168 = 0;
  char v169 = 1;
  uint64_t v11 = swift_bridgeObjectRetain();
  CFRange v157 = (char *)&v163 + 8;
  unint64_t v12 = v10;
  trace(path:points:tangents:uniformSegmentsPerSpan:)(v11, (unint64_t)&v163, (unint64_t)&v163 + 8, v10, v13);
  swift_bridgeObjectRelease();
  char v14 = (char **)v163;
  unint64_t v15 = *(void *)(v163 + 16);
  if (HIDWORD(v15)) {
    goto LABEL_211;
  }
  uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v18 = *(void *)(v16 + 16);
  unint64_t v17 = *(void *)(v16 + 24);
  int64_t v19 = v18 + 1;
  if (v18 >= v17 >> 1) {
    goto LABEL_188;
  }
LABEL_3:
  *(void *)(v16 + 16) = v19;
  *(_DWORD *)(v16 + 4 * v18 + 32) = v15;
  swift_bridgeObjectRelease();
  *(void *)&long long v165 = v16;
  uint64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v150 = v7;
    uint64_t v21 = swift_bridgeObjectRetain();
    trace(path:points:tangents:uniformSegmentsPerSpan:)(v21, (unint64_t)&v163, (unint64_t)v157, v12, v22);
    swift_bridgeObjectRelease();
    char v14 = (char **)v163;
    unint64_t v15 = *(void *)(v163 + 16);
    if (HIDWORD(v15)) {
      goto LABEL_211;
    }
    int64_t v19 = 0;
    unint64_t v18 = v20 - 1;
    while (1)
    {
      uint64_t v7 = *(void *)(v16 + 16);
      unint64_t v23 = *(void *)(v16 + 24);
      if (v7 >= v23 >> 1) {
        uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v7 + 1, 1, (char *)v16);
      }
      *(void *)(v16 + 16) = v7 + 1;
      *(_DWORD *)(v16 + 4 * v7 + 32) = v15;
      if (v18 == v19) {
        break;
      }
      unint64_t v17 = v19 + 1;
      if ((unint64_t)(v19 + 1) >= *(void *)(a1 + 16))
      {
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v19, 1, (char *)v16);
        goto LABEL_3;
      }
      uint64_t v24 = swift_bridgeObjectRetain();
      trace(path:points:tangents:uniformSegmentsPerSpan:)(v24, (unint64_t)&v163, (unint64_t)v157, v12, v25);
      swift_bridgeObjectRelease();
      char v14 = (char **)v163;
      unint64_t v15 = *(void *)(v163 + 16);
      ++v19;
      if (HIDWORD(v15)) {
        goto LABEL_211;
      }
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = v16;
    uint64_t v7 = v150;
    if ((LOBYTE(v156) & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (LOBYTE(v156))
  {
LABEL_13:
    *(void *)&long long v159 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)((uint64_t)v14, v16, (char **)&v159);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v164 = v159;
  }
LABEL_14:
  unint64_t v18 = a2;
  if (!a2) {
    goto LABEL_29;
  }
  if (fabs(a6) <= 0.000001)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  if (a6 <= 0.0)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(void *)uint64_t v43 = 0xD000000000000022;
    *(void *)(v43 + 8) = 0x800000022835EF70;
    *(unsigned char *)(v43 + 16) = 1;
    swift_willThrow();
    goto LABEL_31;
  }
  unint64_t v12 = *(void *)(a2 + 16);
  if (!v12)
  {
LABEL_206:
    __break(1u);
    goto LABEL_207;
  }
  unint64_t v145 = a2 + 32;
  __asm { FMOV            V1.2D, #-1.0 }
  float64x2_t v30 = vaddq_f64(*(float64x2_t *)(a2 + 32 + 16 * v12 - 16), _Q1);
  if (sqrt(vaddvq_f64(vmulq_f64(v30, v30))) > 0.000001)
  {
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_inset_evaluator_2d);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = OS_geom_inset_evaluator_2d.init(points:accumulatedOutlineIndexCount:)();
  if (*(void *)(a2 + 16))
  {
    unint64_t v15 = v31;
    double v32 = *(double *)(a2 + 32) * a6;
    swift_bridgeObjectRetain();
    geom_inset_evaluator_get_computed_inset_distance_2d();
    if (v33 <= v32)
    {
      uint64_t v16 = 0;
      char v14 = (char **)(v12 - 1);
      while (1)
      {
        geom_inset_evaluator_advance_inset_to_2d();
        if (v14 == (char **)v16) {
          break;
        }
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >= *(void *)(a2 + 16)) {
          goto LABEL_187;
        }
        double v34 = *(double *)(a2 + 16 * v16 + 48) * a6;
        geom_inset_evaluator_get_computed_inset_distance_2d();
        ++v16;
        if (v35 > v34) {
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t collection_2d = geom_create_collection_2d();
      collection_u = (void *)geom_create_collection_u();
      CGFloat v144 = (void *)v15;
      uint64_t v148 = (void *)collection_2d;
      geom_inset_evaluator_extract_offset_curve_2d();
      *(void *)&long long v159 = collection_u;
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_u);
      lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
      id v46 = collection_u;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v47 = v162;
      unint64_t v149 = v46;
      *(void *)&long long v159 = v46;
      dispatch thunk of Collection.endIndex.getter();
      if (v47 != (char *)v161)
      {
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
        unsigned int v86 = 0;
        long long v154 = (void *)MEMORY[0x263F8EE78];
        while (1)
        {
          uint64_t v161 = (uint64_t)v46;
          GeometryCollection.subscript.getter();
          unsigned int v87 = v160;
          uint64_t v161 = (uint64_t)v46;
          dispatch thunk of Collection.index(after:)();
          long long v88 = v160;
          id v162 = v160;
          uint64_t v89 = geom_collection_data_2d();
          if (v87 < v86) {
            break;
          }
          uint64_t v90 = v89;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v154[2] + 1, 1, v154);
          }
          unint64_t v92 = v154[2];
          unint64_t v91 = v154[3];
          if (v92 >= v91 >> 1) {
            long long v154 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v154);
          }
          v154[2] = v92 + 1;
          char v93 = &v154[2 * v92];
          v93[4] = v90 + 16 * v86;
          v93[5] = v87 - v86;
          dispatch thunk of Collection.endIndex.getter();
          unsigned int v86 = v87;
          if (v88 == (char *)v161) {
            goto LABEL_33;
          }
        }
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
LABEL_33:

      uint64_t v48 = swift_bridgeObjectRetain();
      unint64_t v49 = specialized classify<A>(subpaths:)(v48);
      swift_bridgeObjectRelease();
      uint64_t v142 = v49[2];
      if (v142)
      {
        unint64_t v15 = 0;
        CGFloat v140 = v49 + 4;
        __int16 v139 = v49;
        do
        {
          if (v15 >= v49[2]) {
            goto LABEL_191;
          }
          long long v50 = (double *)&v140[3 * v15];
          double v51 = v50[2];
          uint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(*(char **)v50, *((void *)v50 + 1));
          *(void *)&long long v159 = v16;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
          uint64_t v52 = swift_allocObject();
          *(_OWORD *)(v52 + 16) = xmmword_22830EC60;
          unint64_t v53 = *(void *)(v16 + 16);
          if (HIDWORD(v53)) {
            goto LABEL_211;
          }
          uint64_t v7 = v52;
          *(_DWORD *)(v52 + 32) = v53;
          CFRange v157 = *(char **)(*(void *)&v51 + 16);
          unint64_t v152 = v15;
          if (v157)
          {
            unint64_t v18 = *(void *)&v51 + 32;
            uint64_t v54 = *(char **)(*(void *)&v51 + 32);
            uint64_t v55 = *(char **)(*(void *)&v51 + 40);
            swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v54, v55);
            uint64_t v16 = v159;
            a1 = *(void *)(v159 + 16);
            if (HIDWORD(a1)) {
              goto LABEL_211;
            }
            int64_t v19 = 1;
            double v156 = v51;
            while (1)
            {
              unint64_t v12 = *(void *)(v7 + 16);
              unint64_t v56 = *(void *)(v7 + 24);
              char v14 = (char **)(v12 + 1);
              if (v12 >= v56 >> 1) {
                uint64_t v7 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v12 + 1, 1, (char *)v7);
              }
              *(void *)(v7 + 16) = v14;
              *(_DWORD *)(v7 + 4 * v12 + 32) = a1;
              if ((char *)v19 == v157) {
                break;
              }
              unint64_t v17 = *(void *)(*(void *)&v51 + 16);
              if (v19 >= v17) {
                goto LABEL_179;
              }
              unint64_t v17 = v18 + 16 * v19;
              a1 = *(void *)(v17 + 8);
              unint64_t v12 = *(void *)(v16 + 16);
              unint64_t v15 = v12 + a1;
              if (__OFADD__(v12, a1)) {
                goto LABEL_180;
              }
              uint64_t v57 = *(char **)v17;
              char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
              if (!isUniquelyReferenced_nonNull_native
                || (int64_t v59 = *(void *)(v16 + 24) >> 1, v59 < (uint64_t)v15))
              {
                if ((uint64_t)v12 <= (uint64_t)v15) {
                  int64_t v60 = v12 + a1;
                }
                else {
                  int64_t v60 = v12;
                }
                uint64_t v16 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v60, 1, (void *)v16);
                int64_t v59 = *(void *)(v16 + 24) >> 1;
              }
              uint64_t v61 = *(void *)(v16 + 16);
              uint64_t v62 = v59 - v61;
              if (!a1 || v59 == v61)
              {
                unint64_t v17 = (unint64_t)&v57[16 * a1];
                if (v57) {
                  unint64_t v12 = (unint64_t)v57;
                }
                else {
                  unint64_t v12 = 0;
                }
                if (v57) {
                  char v14 = (char **)&v57[16 * a1];
                }
                else {
                  char v14 = 0;
                }
                unint64_t v15 = 0;
              }
              else
              {
                if (a1 >= v62) {
                  unint64_t v15 = v59 - v61;
                }
                else {
                  unint64_t v15 = a1;
                }
                if ((v15 & 0x8000000000000000) != 0) {
                  goto LABEL_212;
                }
                uint64_t v63 = (char *)(v16 + 16 * v61 + 32);
                unint64_t v12 = (unint64_t)&v57[16 * v15];
                if (&v63[16 * v15] > v57 && (unint64_t)v63 < v12) {
                  goto LABEL_212;
                }
                memcpy(v63, v57, 16 * v15);
                char v14 = (char **)&v57[16 * a1];
              }
              if ((uint64_t)v15 < a1) {
                goto LABEL_181;
              }
              if (v15)
              {
                uint64_t v64 = *(void *)(v16 + 16);
                _VF = __OFADD__(v64, v15);
                unint64_t v17 = v64 + v15;
                if (_VF) {
                  goto LABEL_183;
                }
                *(void *)(v16 + 16) = v17;
              }
              a1 = *(void *)(v16 + 16);
              if (v15 != v62)
              {
                double v51 = v156;
                goto LABEL_75;
              }
              double v51 = v156;
              if (v12 && v14 != (char **)v12)
              {
                unint64_t v15 = v12 + 16;
                uint64_t v65 = *(void *)v12;
                uint64_t v66 = *(void *)(v12 + 8);
                while (1)
                {
                  unint64_t v67 = *(void *)(v16 + 24);
                  int64_t v68 = v67 >> 1;
                  uint64_t v69 = a1 + 1;
                  if ((uint64_t)(v67 >> 1) < a1 + 1)
                  {
                    uint64_t v74 = (void *)v16;
                    uint64_t v75 = v65;
                    char v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v67 > 1), a1 + 1, 1, v74);
                    uint64_t v69 = a1 + 1;
                    uint64_t v65 = v75;
                    uint64_t v16 = (uint64_t)v76;
                    int64_t v68 = v76[3] >> 1;
                    if (a1 >= v68) {
                      goto LABEL_80;
                    }
LABEL_83:
                    uint64_t v70 = v16 + 16 * a1;
                    *(void *)(v70 + 32) = v65;
                    *(void *)(v70 + 40) = v66;
                    if (v14 == (char **)v15)
                    {
LABEL_91:
                      *(void *)(v16 + 16) = v69;
                      a1 = v69;
                      break;
                    }
                    uint64_t v71 = (char **)v15;
                    v15 += 16;
                    while (1)
                    {
                      long long v72 = *(_OWORD *)v71;
                      v71 += 2;
                      long long v73 = v72;
                      if (v68 - 1 == a1) {
                        break;
                      }
                      *(_OWORD *)(v16 + 48 + 16 * a1++) = v73;
                      v15 += 16;
                      if (v71 == v14)
                      {
                        uint64_t v69 = a1 + 1;
                        goto LABEL_91;
                      }
                    }
                    uint64_t v66 = *((void *)&v73 + 1);
                    uint64_t v65 = v73;
                    a1 = v68;
                    *(void *)(v16 + 16) = v68;
                  }
                  else
                  {
                    if (a1 < v68) {
                      goto LABEL_83;
                    }
LABEL_80:
                    *(void *)(v16 + 16) = a1;
                  }
                }
              }
LABEL_75:
              ++v19;
              if (HIDWORD(a1)) {
                goto LABEL_211;
              }
            }
            swift_bridgeObjectRelease();
          }
          char v14 = (char **)MEMORY[0x263F8EE78];
          id v162 = (char *)MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          triangulateByEarClippingFix(points:accumuluatedOutlineIndexCount:triangleVertexIndices:)(v16, v7, &v162);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v77 = *(double *)(*((void *)&v165 + 1) + 16);
          uint64_t v78 = swift_bridgeObjectRetain();
          specialized Array.append<A>(contentsOf:)(v78);
          a1 = (uint64_t)v162;
          unint64_t v15 = *((void *)v162 + 2);
          if (v15)
          {
            uint64_t v161 = (uint64_t)v14;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
            if (HIDWORD(*(void *)&v77)) {
              goto LABEL_211;
            }
            double v79 = v77;
            int v80 = *(_DWORD *)(a1 + 32);
            int v81 = v80 + LODWORD(v77);
            if (__CFADD__(v80, LODWORD(v77))) {
              goto LABEL_202;
            }
            char v14 = (char **)v161;
            unint64_t v83 = *(void *)(v161 + 16);
            unint64_t v82 = *(void *)(v161 + 24);
            if (v83 >= v82 >> 1)
            {
              double v85 = v79;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v82 > 1, v83 + 1, 1);
              double v79 = v85;
              char v14 = (char **)v161;
            }
            v14[2] = (char *)(v83 + 1);
            unint64_t v17 = (unint64_t)v14 + 4 * v83;
            *(_DWORD *)(v17 + 32) = v81;
            unint64_t v18 = v15 - 1;
            CFRange v157 = (char *)a1;
            if (v15 != 1)
            {
              unint64_t v84 = v83 + 9;
              int64_t v19 = a1 + 36;
              unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
              while (v12)
              {
                unint64_t v17 = *(unsigned int *)v19;
                a1 = (v17 + LODWORD(v79));
                if (__CFADD__(v17, LODWORD(v79))) {
                  goto LABEL_185;
                }
                uint64_t v161 = (uint64_t)v14;
                unint64_t v17 = (unint64_t)v14[3];
                unint64_t v15 = v84 - 7;
                if (v84 - 8 >= v17 >> 1)
                {
                  double v156 = v79;
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v84 - 7, 1);
                  double v79 = v156;
                  char v14 = (char **)v161;
                }
                v14[2] = (char *)v15;
                *((_DWORD *)v14 + v84++) = a1;
                --v12;
                v19 += 4;
                if (!--v18) {
                  goto LABEL_35;
                }
              }
              goto LABEL_184;
            }
LABEL_35:
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          unint64_t v15 = v152 + 1;
          specialized Array.append<A>(contentsOf:)((uint64_t)v14);
          unint64_t v49 = v139;
        }
        while (v152 + 1 != v142);
      }
      swift_bridgeObjectRelease();
      uint64_t v7 = geom_create_collection_2d();
      uint64_t v94 = geom_create_collection_u();
      uint64_t v95 = geom_create_collection_u();
      uint64_t v96 = geom_create_collection_u();
      uint64_t collection_d = geom_create_collection_d();
      long long v153 = (void *)v94;
      uint64_t v135 = (void *)v95;
      uint64_t v141 = (void *)v96;
      geom_inset_evaluator_extract_joiner_mesh_2d();
      geom_inset_evaluator_get_computed_inset_distance_2d();
      uint64_t v168 = v98;
      char v169 = 0;
      uint64_t v143 = (char *)collection_d;
      uint64_t v99 = geom_collection_size_d();
      unint64_t v12 = a2;
      if (v99 < 0) {
        goto LABEL_209;
      }
      unint64_t v15 = v99;
      uint64_t v136 = (void *)v7;
      if (v99)
      {
        uint64_t v138 = *(void *)(a2 + 16);
        uint64_t v100 = v138 - 2;
        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_d);
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_d and conformance OS_geom_collection_d, &lazy cache variable for type metadata for OS_geom_collection_d);
        int64_t v19 = 0;
        uint64_t v101 = 0;
        unint64_t v18 = 0;
        a1 = a2 + 64;
        unint64_t v137 = v15;
        while (v18 != v15)
        {
          id v162 = v143;
          char v14 = &v162;
          uint64_t v16 = v101;
          GeometryCollection.subscript.getter();
          if (__OFADD__(v16, 2)) {
            goto LABEL_193;
          }
          unint64_t v103 = v16;
          if (v16 + 2 >= v138) {
            goto LABEL_131;
          }
          if (v16 < -1) {
            goto LABEL_203;
          }
          uint64_t v104 = v16 + 1;
          unint64_t v17 = *(void *)(v12 + 16);
          if (v16 + 1 >= v17) {
            goto LABEL_204;
          }
          if (*(double *)(v145 + 16 * v104) * a6 >= *(double *)&v159)
          {
LABEL_131:
            if ((v103 & 0x8000000000000000) != 0) {
              goto LABEL_195;
            }
            unint64_t v17 = *(void *)(v12 + 16);
          }
          else
          {
            if (v100 > v104) {
              uint64_t v104 = v100;
            }
            while ((uint64_t)(v103 + 1) < v100)
            {
              if (v17 - 2 == v103) {
                goto LABEL_186;
              }
              double v105 = *(double *)(a1 + 16 * v103++) * a6;
              if (v105 >= *(double *)&v159) {
                goto LABEL_131;
              }
            }
            unint64_t v103 = v104;
          }
          if (v103 >= v17) {
            goto LABEL_194;
          }
          if (v103 + 1 >= v17) {
            goto LABEL_196;
          }
          float64x2_t v106 = *(float64x2_t *)(v145 + 16 * v103);
          double v107 = a6 * v106.f64[0];
          double v156 = vmuld_lane_f64(a6, v106, 1);
          float64x2_t v108 = *(float64x2_t *)(v145 + 16 * (v103 + 1));
          double v109 = a6 * v108.f64[0];
          unint64_t v147 = v103;
          if (v107 != a6 * v108.f64[0])
          {
            double v110 = fabs(a6 * v108.f64[0]);
            _ZF = (*(void *)&v107 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000
               && *(void *)&v110 == 0x7FF0000000000000;
            if (_ZF || vabdd_f64(v107, v109) >= (fabs(v107) + fabs(v109) + 1.0) * 0.000001) {
              double v156 = vmuld_lane_f64(a6, v108, 1) * ((*(double *)&v159 - v107) / (v109 - v107))
            }
                   + v156 * (1.0 - (*(double *)&v159 - v107) / (v109 - v107));
          }
          *(void *)&long long v159 = v141;
          lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
          GeometryCollection.subscript.getter();
          uint64_t v16 = v162;
          if (v162 < (unint64_t)v19) {
            goto LABEL_197;
          }
          unint64_t v146 = v18;
          *(void *)&long long v159 = v7;
          a1 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_geom_collection_2d);
          unint64_t v18 = lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_2d and conformance OS_geom_collection_2d, &lazy cache variable for type metadata for OS_geom_collection_2d);
          unint64_t v12 = (unint64_t)(id)v7;
          dispatch thunk of Collection.startIndex.getter();
          CFRange v157 = (char *)v18;
          dispatch thunk of Collection.endIndex.getter();
          if (v161 < (uint64_t)v162) {
            goto LABEL_198;
          }
          if (v19 < (uint64_t)v162 || v161 < v16) {
            goto LABEL_199;
          }
          *(void *)&long long v159 = v12;
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          if (v19 < (uint64_t)v162 || v161 < v19) {
            goto LABEL_200;
          }
          dispatch thunk of Collection.startIndex.getter();
          dispatch thunk of Collection.endIndex.getter();
          if ((uint64_t)v162 > v16 || v161 < v16) {
            goto LABEL_201;
          }
          uint64_t v112 = v16 - v19;
          if (v16 == v19)
          {

            unint64_t v102 = (char *)MEMORY[0x263F8EE78];
          }
          else
          {
            id v162 = (char *)MEMORY[0x263F8EE78];
            char v14 = &v162;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v112 & ~(v112 >> 63), 0);
            unint64_t v102 = v162;
            uint64_t v161 = v19;
            if (v112 < 0) {
              goto LABEL_205;
            }
            unint64_t v15 = v16;
            uint64_t v7 = v19;
            do
            {
              if (v7 < v19 || v7 >= v16) {
                goto LABEL_182;
              }
              unint64_t v18 = v16;
              int64_t v113 = v19;
              v160 = (char *)v12;
              lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_2d and conformance OS_geom_collection_2d, &lazy cache variable for type metadata for OS_geom_collection_2d);
              GeometryCollection.subscript.getter();
              long long v114 = v159;
              id v162 = v102;
              unint64_t v116 = *((void *)v102 + 2);
              unint64_t v115 = *((void *)v102 + 3);
              if (v116 >= v115 >> 1)
              {
                long long v134 = v159;
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
                long long v114 = v134;
                unint64_t v102 = v162;
              }
              *((void *)v102 + 2) = v116 + 1;
              uint64_t v117 = &v102[32 * v116];
              *((_OWORD *)v117 + 2) = v114;
              *((_OWORD *)v117 + 3) = *(unint64_t *)&v156;
              *(void *)&long long v159 = v12;
              char v14 = (char **)&v159;
              dispatch thunk of Collection.index(after:)();
              uint64_t v7 = (uint64_t)v160;
              uint64_t v161 = (uint64_t)v160;
              --v15;
              int64_t v19 = v113;
              _ZF = v113 == v15;
              uint64_t v16 = v18;
            }
            while (!_ZF);

            uint64_t v7 = (uint64_t)v136;
          }
          unint64_t v18 = v146 + 1;
          specialized Array.append<A>(contentsOf:)((uint64_t)v102);
          int64_t v19 = v16;
          uint64_t v100 = v138 - 2;
          unint64_t v15 = v137;
          unint64_t v12 = a2;
          a1 = a2 + 64;
          uint64_t v101 = v147;
          if (v146 + 1 == v137) {
            goto LABEL_161;
          }
        }
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
        goto LABEL_206;
      }
LABEL_161:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&long long v159 = v135;
      id v118 = v135;
      dispatch thunk of Collection.startIndex.getter();
      unint64_t v119 = 0;
      id v120 = v162;
      *(void *)&long long v159 = v118;
      uint64_t v121 = (char *)MEMORY[0x263F8EE78];
      while (1)
      {
        unint64_t v122 = v119;
        dispatch thunk of Collection.endIndex.getter();
        if (v120 == (char *)v161) {
          break;
        }
        uint64_t v161 = (uint64_t)v118;
        lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(&lazy protocol witness table cache variable for type OS_geom_collection_u and conformance OS_geom_collection_u, &lazy cache variable for type metadata for OS_geom_collection_u);
        GeometryCollection.subscript.getter();
        unint64_t v119 = v160;
        uint64_t v161 = (uint64_t)v118;
        dispatch thunk of Collection.index(after:)();
        id v120 = v160;
        id v162 = v160;
        int64_t v123 = v122 + 1;
        if (v122 + 1 >= v119) {
          goto LABEL_190;
        }
        if (v123 != v119 - 1)
        {
          id v158 = v118;
          if (v123 >= (uint64_t)(v119 - 1)) {
            goto LABEL_210;
          }
          unint64_t v124 = v122 + 2;
          do
          {
            uint64_t v161 = (uint64_t)v153;
            GeometryCollection.subscript.getter();
            int v125 = (int)v160;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v121 + 2) + 1, 1, v121);
            }
            unint64_t v127 = *((void *)v121 + 2);
            unint64_t v126 = *((void *)v121 + 3);
            if (v127 >= v126 >> 1) {
              uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v126 > 1), v127 + 1, 1, v121);
            }
            *((void *)v121 + 2) = v127 + 1;
            *(_DWORD *)&v121[4 * v127 + 32] = v125;
            uint64_t v161 = (uint64_t)v153;
            GeometryCollection.subscript.getter();
            int v128 = (int)v160;
            unint64_t v130 = *((void *)v121 + 2);
            unint64_t v129 = *((void *)v121 + 3);
            if (v130 >= v129 >> 1) {
              uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v129 > 1), v130 + 1, 1, v121);
            }
            *((void *)v121 + 2) = v130 + 1;
            *(_DWORD *)&v121[4 * v130 + 32] = v128;
            uint64_t v161 = (uint64_t)v153;
            GeometryCollection.subscript.getter();
            int v131 = (int)v160;
            unint64_t v133 = *((void *)v121 + 2);
            unint64_t v132 = *((void *)v121 + 3);
            if (v133 >= v132 >> 1) {
              uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v132 > 1), v133 + 1, 1, v121);
            }
            *((void *)v121 + 2) = v133 + 1;
            *(_DWORD *)&v121[4 * v133 + 32] = v131;
            ++v124;
          }
          while (v119 != v124);
          v167 = v121;
          id v118 = v158;
        }
      }

LABEL_29:
      uint64_t v37 = v164;
      uint64_t v38 = v167;
      uint64_t v39 = v168;
      char v40 = v169;
      long long v41 = v165;
      long long v42 = v166;
      *(_OWORD *)a5 = v163;
      *(void *)(a5 + 16) = v37;
      *(_OWORD *)(a5 + 24) = v41;
      *(_OWORD *)(a5 + 40) = v42;
      *(void *)(a5 + 56) = v38;
      *(void *)(a5 + 64) = v39;
      *(unsigned char *)(a5 + 72) = v40;
      return;
    }
LABEL_25:
    swift_bridgeObjectRelease_n();
    lazy protocol witness table accessor for type ShapeExtrusionError and conformance ShapeExtrusionError();
    swift_allocError();
    *(void *)uint64_t v36 = 0xD000000000000083;
    *(void *)(v36 + 8) = 0x800000022835EFA0;
    *(unsigned char *)(v36 + 16) = 0;
    swift_willThrow();

LABEL_31:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_208:
  __break(1u);
LABEL_209:
  __break(1u);
LABEL_210:
  __break(1u);
LABEL_211:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_212:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined release of TesselatedShape(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_2282757C8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 137, 7);
}

uint64_t lazy protocol witness table accessor for type OS_geom_collection_u and conformance OS_geom_collection_u(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for OS_os_log(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228275864()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22827589C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in spansFromCGPath(path:)(uint64_t a1)
{
  return closure #1 in spansFromCGPath(path:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_2282758DC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

ValueMetadata *type metadata accessor for PiecewiseBezierCurve()
{
  return &type metadata for PiecewiseBezierCurve;
}

uint64_t type metadata completion function for PiecewiseLinearPolygon()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PiecewiseLinearPolygon(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

uint64_t destroy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t initializeWithCopy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for PiecewiseLinearPolygon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for PiecewiseLinearPolygon(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PiecewiseLinearPolygon(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x228275F64);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PiecewiseLinearPolygon()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for Shape()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Shape(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for Shape(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Shape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Shape(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228276488);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Shape(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x228276678);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *unint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Shape()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ExtrudedShapeDescriptor(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
    int v2 = *(unsigned __int8 *)(a1 + 56);
    if (v2 != 255) {
      outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 40), *(void *)(a1 + 48), v2);
    }
    if (*(void *)(a1 + 72))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(void *)(a1 + 112))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 128), *(unsigned char *)(a1 + 136));
    int v3 = *(unsigned __int8 *)(a1 + 160);
    if (v3 != 255) {
      outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 144), *(void *)(a1 + 152), v3);
    }
    if (*(void *)(a1 + 176))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(void *)(a1 + 216))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 232), *(unsigned char *)(a1 + 240));
    int v4 = *(unsigned __int8 *)(a1 + 264);
    if (v4 != 255) {
      outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 248), *(void *)(a1 + 256), v4);
    }
    if (*(void *)(a1 + 280))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (*(void *)(a1 + 320))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 336), *(unsigned char *)(a1 + 344));
    int v5 = *(unsigned __int8 *)(a1 + 368);
    if (v5 != 255) {
      outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 352), *(void *)(a1 + 360), v5);
    }
    if (*(void *)(a1 + 384))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t result = *(void *)(a1 + 424);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of MeshDescriptor.Materials(*(void *)(a1 + 440), *(unsigned char *)(a1 + 448));
    int v7 = *(unsigned __int8 *)(a1 + 472);
    if (v7 != 255) {
      outlined consume of MeshDescriptor.Primitives(*(void *)(a1 + 456), *(void *)(a1 + 464), v7);
    }
    uint64_t result = *(void *)(a1 + 488);
    if (result)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t initializeWithCopy for ExtrudedShapeDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    uint64_t v12 = *(void *)(a2 + 112);
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v5, v6);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  int v7 = *(unsigned __int8 *)(a2 + 56);
  if (v7 != 255)
  {
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    outlined copy of MeshDescriptor.Primitives(v8, v9, *(unsigned char *)(a2 + 56));
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = v7;
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10) {
      goto LABEL_4;
    }
LABEL_12:
    long long v24 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v24;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    uint64_t v12 = *(void *)(a2 + 112);
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_7;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  if (!v10) {
    goto LABEL_12;
  }
LABEL_4:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = *(void *)(a2 + 112);
  if (!v12)
  {
LABEL_13:
    long long v25 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v25;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    long long v26 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v26;
    long long v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v27;
    uint64_t v23 = *(void *)(a2 + 216);
    if (v23) {
      goto LABEL_14;
    }
LABEL_19:
    long long v36 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v36;
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    long long v37 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v37;
    long long v38 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v38;
    goto LABEL_22;
  }
LABEL_7:
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  char v17 = *(unsigned char *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v16, v17);
  *(void *)(a1 + 128) = v16;
  *(unsigned char *)(a1 + 136) = v17;
  int v18 = *(unsigned __int8 *)(a2 + 160);
  if (v18 != 255)
  {
    uint64_t v19 = *(void *)(a2 + 144);
    uint64_t v20 = *(void *)(a2 + 152);
    outlined copy of MeshDescriptor.Primitives(v19, v20, *(unsigned char *)(a2 + 160));
    *(void *)(a1 + 144) = v19;
    *(void *)(a1 + 152) = v20;
    *(unsigned char *)(a1 + 160) = v18;
    uint64_t v21 = *(void *)(a2 + 176);
    if (v21) {
      goto LABEL_9;
    }
LABEL_18:
    long long v35 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v35;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    uint64_t v23 = *(void *)(a2 + 216);
    if (v23) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  uint64_t v21 = *(void *)(a2 + 176);
  if (!v21) {
    goto LABEL_18;
  }
LABEL_9:
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v21;
  uint64_t v22 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v22;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = *(void *)(a2 + 216);
  if (!v23) {
    goto LABEL_19;
  }
LABEL_14:
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v23;
  uint64_t v28 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  char v29 = *(unsigned char *)(a2 + 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v28, v29);
  *(void *)(a1 + 232) = v28;
  *(unsigned char *)(a1 + 240) = v29;
  int v30 = *(unsigned __int8 *)(a2 + 264);
  if (v30 == 255)
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    uint64_t v33 = *(void *)(a2 + 280);
    if (v33) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v31 = *(void *)(a2 + 248);
    uint64_t v32 = *(void *)(a2 + 256);
    outlined copy of MeshDescriptor.Primitives(v31, v32, *(unsigned char *)(a2 + 264));
    *(void *)(a1 + 248) = v31;
    *(void *)(a1 + 256) = v32;
    *(unsigned char *)(a1 + 264) = v30;
    uint64_t v33 = *(void *)(a2 + 280);
    if (v33)
    {
LABEL_16:
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v33;
      uint64_t v34 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v34;
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
  long long v39 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v39;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
LABEL_22:
  uint64_t v40 = *(void *)(a2 + 320);
  if (!v40)
  {
    long long v49 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v49;
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    long long v50 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 328) = v50;
    long long v51 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v51;
    uint64_t v48 = *(void *)(a2 + 424);
    if (v48) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v40;
  uint64_t v41 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  char v42 = *(unsigned char *)(a2 + 344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v41, v42);
  *(void *)(a1 + 336) = v41;
  *(unsigned char *)(a1 + 344) = v42;
  int v43 = *(unsigned __int8 *)(a2 + 368);
  if (v43 != 255)
  {
    uint64_t v44 = *(void *)(a2 + 352);
    uint64_t v45 = *(void *)(a2 + 360);
    outlined copy of MeshDescriptor.Primitives(v44, v45, *(unsigned char *)(a2 + 368));
    *(void *)(a1 + 352) = v44;
    *(void *)(a1 + 360) = v45;
    *(unsigned char *)(a1 + 368) = v43;
    uint64_t v46 = *(void *)(a2 + 384);
    if (v46) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  uint64_t v46 = *(void *)(a2 + 384);
  if (!v46)
  {
LABEL_32:
    long long v59 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v59;
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    uint64_t v48 = *(void *)(a2 + 424);
    if (v48) {
      goto LABEL_28;
    }
LABEL_33:
    long long v60 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v60;
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    long long v61 = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 432) = v61;
    long long v62 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v62;
    return a1;
  }
LABEL_25:
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v46;
  uint64_t v47 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v47;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v48 = *(void *)(a2 + 424);
  if (!v48) {
    goto LABEL_33;
  }
LABEL_28:
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a1 + 424) = v48;
  uint64_t v52 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  char v53 = *(unsigned char *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of MeshDescriptor.Materials(v52, v53);
  *(void *)(a1 + 440) = v52;
  *(unsigned char *)(a1 + 448) = v53;
  int v54 = *(unsigned __int8 *)(a2 + 472);
  if (v54 == 255)
  {
    *(_OWORD *)(a1 + 456) = *(_OWORD *)(a2 + 456);
    *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
    uint64_t v57 = *(void *)(a2 + 488);
    if (v57) {
      goto LABEL_30;
    }
LABEL_35:
    long long v63 = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
    *(_OWORD *)(a1 + 496) = v63;
    *(void *)(a1 + 512) = *(void *)(a2 + 512);
    return a1;
  }
  uint64_t v55 = *(void *)(a2 + 456);
  uint64_t v56 = *(void *)(a2 + 464);
  outlined copy of MeshDescriptor.Primitives(v55, v56, *(unsigned char *)(a2 + 472));
  *(void *)(a1 + 456) = v55;
  *(void *)(a1 + 464) = v56;
  *(unsigned char *)(a1 + 472) = v54;
  uint64_t v57 = *(void *)(a2 + 488);
  if (!v57) {
    goto LABEL_35;
  }
LABEL_30:
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v57;
  uint64_t v58 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v58;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ExtrudedShapeDescriptor(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (!*(void *)(a1 + 8))
  {
    if (!v4)
    {
      long long v29 = *a2;
      long long v30 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v30;
      *(_OWORD *)a1 = v29;
      long long v31 = a2[3];
      long long v32 = a2[4];
      long long v33 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(_OWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 80) = v33;
      *(_OWORD *)(a1 + 48) = v31;
      goto LABEL_25;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    uint64_t v17 = *((void *)a2 + 3);
    char v18 = *((unsigned char *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v17, v18);
    *(void *)(a1 + 24) = v17;
    *(unsigned char *)(a1 + 32) = v18;
    int v19 = *((unsigned __int8 *)a2 + 56);
    if (v19 == 255)
    {
      long long v35 = *(long long *)((char *)a2 + 40);
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      *(_OWORD *)(a1 + 40) = v35;
      if (*((void *)a2 + 9)) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v20 = *((void *)a2 + 5);
      uint64_t v21 = *((void *)a2 + 6);
      outlined copy of MeshDescriptor.Primitives(v20, v21, *((unsigned char *)a2 + 56));
      *(void *)(a1 + 40) = v20;
      *(void *)(a1 + 48) = v21;
      *(unsigned char *)(a1 + 56) = v19;
      if (*((void *)a2 + 9)) {
        goto LABEL_22;
      }
    }
    long long v36 = a2[4];
    long long v37 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v36;
    *(_OWORD *)(a1 + 80) = v37;
    goto LABEL_25;
  }
  if (!v4)
  {
    outlined destroy of MeshDescriptor(a1);
    long long v23 = a2[1];
    long long v22 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    long long v25 = a2[4];
    long long v24 = a2[5];
    long long v26 = a2[3];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v26;
    goto LABEL_25;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *((void *)a2 + 3);
  char v6 = *((unsigned char *)a2 + 32);
  outlined copy of MeshDescriptor.Materials(v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of MeshDescriptor.Materials(v7, v8);
  uint64_t v9 = (long long *)(a1 + 40);
  uint64_t v10 = (long long *)((char *)a2 + 40);
  int v11 = *((unsigned __int8 *)a2 + 56);
  if (*(unsigned __int8 *)(a1 + 56) == 255)
  {
    if (v11 == 255)
    {
      long long v38 = *v10;
      *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
      *uint64_t v9 = v38;
    }
    else
    {
      uint64_t v27 = *((void *)a2 + 5);
      uint64_t v28 = *((void *)a2 + 6);
      outlined copy of MeshDescriptor.Primitives(v27, v28, *((unsigned char *)a2 + 56));
      *(void *)(a1 + 40) = v27;
      *(void *)(a1 + 48) = v28;
      *(unsigned char *)(a1 + 56) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
    char v34 = *((unsigned char *)a2 + 56);
    *uint64_t v9 = *v10;
    *(unsigned char *)(a1 + 56) = v34;
  }
  else
  {
    uint64_t v12 = *((void *)a2 + 5);
    uint64_t v13 = *((void *)a2 + 6);
    outlined copy of MeshDescriptor.Primitives(v12, v13, *((unsigned char *)a2 + 56));
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v13;
    unsigned __int8 v16 = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v11;
    outlined consume of MeshDescriptor.Primitives(v14, v15, v16);
  }
  long long v39 = (long long *)(a1 + 64);
  uint64_t v40 = a2 + 4;
  uint64_t v41 = *((void *)a2 + 9);
  if (!*(void *)(a1 + 72))
  {
    if (!v41)
    {
      long long v44 = *v40;
      long long v45 = a2[5];
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *long long v39 = v44;
      *(_OWORD *)(a1 + 80) = v45;
      goto LABEL_25;
    }
LABEL_22:
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  if (v41)
  {
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 96) = *((void *)a2 + 12);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
    uint64_t v42 = *((void *)a2 + 12);
    long long v43 = a2[5];
    *long long v39 = *v40;
    *(_OWORD *)(a1 + 80) = v43;
    *(void *)(a1 + 96) = v42;
  }
LABEL_25:
  uint64_t v46 = (long long *)(a1 + 104);
  uint64_t v47 = (long long *)((char *)a2 + 104);
  uint64_t v48 = *((void *)a2 + 14);
  if (!*(void *)(a1 + 112))
  {
    if (!v48)
    {
      long long v73 = *v47;
      long long v74 = *(long long *)((char *)a2 + 136);
      *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
      *(_OWORD *)(a1 + 136) = v74;
      long long *v46 = v73;
      long long v75 = *(long long *)((char *)a2 + 152);
      long long v76 = *(long long *)((char *)a2 + 168);
      long long v77 = *(long long *)((char *)a2 + 184);
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      *(_OWORD *)(a1 + 168) = v76;
      *(_OWORD *)(a1 + 184) = v77;
      *(_OWORD *)(a1 + 152) = v75;
      goto LABEL_49;
    }
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    uint64_t v61 = *((void *)a2 + 16);
    char v62 = *((unsigned char *)a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v61, v62);
    *(void *)(a1 + 128) = v61;
    *(unsigned char *)(a1 + 136) = v62;
    int v63 = *((unsigned __int8 *)a2 + 160);
    if (v63 == 255)
    {
      long long v79 = a2[9];
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      *(_OWORD *)(a1 + 144) = v79;
      if (*((void *)a2 + 22)) {
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v64 = *((void *)a2 + 18);
      uint64_t v65 = *((void *)a2 + 19);
      outlined copy of MeshDescriptor.Primitives(v64, v65, *((unsigned char *)a2 + 160));
      *(void *)(a1 + 144) = v64;
      *(void *)(a1 + 152) = v65;
      *(unsigned char *)(a1 + 160) = v63;
      if (*((void *)a2 + 22)) {
        goto LABEL_46;
      }
    }
    long long v80 = *(long long *)((char *)a2 + 168);
    long long v81 = *(long long *)((char *)a2 + 184);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    *(_OWORD *)(a1 + 168) = v80;
    *(_OWORD *)(a1 + 184) = v81;
    goto LABEL_49;
  }
  if (!v48)
  {
    outlined destroy of MeshDescriptor(a1 + 104);
    long long v67 = *(long long *)((char *)a2 + 120);
    long long v66 = *(long long *)((char *)a2 + 136);
    long long *v46 = *v47;
    *(_OWORD *)(a1 + 120) = v67;
    *(_OWORD *)(a1 + 136) = v66;
    long long v69 = *(long long *)((char *)a2 + 168);
    long long v68 = *(long long *)((char *)a2 + 184);
    long long v70 = *(long long *)((char *)a2 + 152);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    *(_OWORD *)(a1 + 168) = v69;
    *(_OWORD *)(a1 + 184) = v68;
    *(_OWORD *)(a1 + 152) = v70;
    goto LABEL_49;
  }
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = *((void *)a2 + 16);
  char v50 = *((unsigned char *)a2 + 136);
  outlined copy of MeshDescriptor.Materials(v49, v50);
  uint64_t v51 = *(void *)(a1 + 128);
  char v52 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = v49;
  *(unsigned char *)(a1 + 136) = v50;
  outlined consume of MeshDescriptor.Materials(v51, v52);
  char v53 = (long long *)(a1 + 144);
  int v54 = a2 + 9;
  int v55 = *((unsigned __int8 *)a2 + 160);
  if (*(unsigned __int8 *)(a1 + 160) == 255)
  {
    if (v55 == 255)
    {
      long long v82 = *v54;
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      long long *v53 = v82;
    }
    else
    {
      uint64_t v71 = *((void *)a2 + 18);
      uint64_t v72 = *((void *)a2 + 19);
      outlined copy of MeshDescriptor.Primitives(v71, v72, *((unsigned char *)a2 + 160));
      *(void *)(a1 + 144) = v71;
      *(void *)(a1 + 152) = v72;
      *(unsigned char *)(a1 + 160) = v55;
    }
  }
  else if (v55 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 144);
    char v78 = *((unsigned char *)a2 + 160);
    long long *v53 = *v54;
    *(unsigned char *)(a1 + 160) = v78;
  }
  else
  {
    uint64_t v56 = *((void *)a2 + 18);
    uint64_t v57 = *((void *)a2 + 19);
    outlined copy of MeshDescriptor.Primitives(v56, v57, *((unsigned char *)a2 + 160));
    uint64_t v58 = *(void *)(a1 + 144);
    uint64_t v59 = *(void *)(a1 + 152);
    *(void *)(a1 + 144) = v56;
    *(void *)(a1 + 152) = v57;
    unsigned __int8 v60 = *(unsigned char *)(a1 + 160);
    *(unsigned char *)(a1 + 160) = v55;
    outlined consume of MeshDescriptor.Primitives(v58, v59, v60);
  }
  unint64_t v83 = (long long *)(a1 + 168);
  unint64_t v84 = (long long *)((char *)a2 + 168);
  uint64_t v85 = *((void *)a2 + 22);
  if (!*(void *)(a1 + 176))
  {
    if (!v85)
    {
      long long v88 = *v84;
      long long v89 = *(long long *)((char *)a2 + 184);
      *(void *)(a1 + 200) = *((void *)a2 + 25);
      *unint64_t v83 = v88;
      *(_OWORD *)(a1 + 184) = v89;
      goto LABEL_49;
    }
LABEL_46:
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    *(void *)(a1 + 200) = *((void *)a2 + 25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_49;
  }
  if (v85)
  {
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 192) = *((void *)a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 200) = *((void *)a2 + 25);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 168);
    uint64_t v86 = *((void *)a2 + 25);
    long long v87 = *(long long *)((char *)a2 + 184);
    *unint64_t v83 = *v84;
    *(_OWORD *)(a1 + 184) = v87;
    *(void *)(a1 + 200) = v86;
  }
LABEL_49:
  uint64_t v90 = (long long *)(a1 + 208);
  unint64_t v91 = a2 + 13;
  uint64_t v92 = *((void *)a2 + 27);
  if (!*(void *)(a1 + 216))
  {
    if (!v92)
    {
      long long v117 = *v91;
      long long v118 = a2[15];
      *(_OWORD *)(a1 + 224) = a2[14];
      *(_OWORD *)(a1 + 240) = v118;
      long long *v90 = v117;
      long long v119 = a2[16];
      long long v120 = a2[17];
      long long v121 = a2[18];
      *(void *)(a1 + 304) = *((void *)a2 + 38);
      *(_OWORD *)(a1 + 272) = v120;
      *(_OWORD *)(a1 + 288) = v121;
      *(_OWORD *)(a1 + 256) = v119;
      goto LABEL_73;
    }
    *(void *)(a1 + 208) = *((void *)a2 + 26);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *(void *)(a1 + 224) = *((void *)a2 + 28);
    uint64_t v105 = *((void *)a2 + 29);
    char v106 = *((unsigned char *)a2 + 240);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v105, v106);
    *(void *)(a1 + 232) = v105;
    *(unsigned char *)(a1 + 240) = v106;
    int v107 = *((unsigned __int8 *)a2 + 264);
    if (v107 == 255)
    {
      long long v123 = *(long long *)((char *)a2 + 248);
      *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
      *(_OWORD *)(a1 + 248) = v123;
      if (*((void *)a2 + 35)) {
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v108 = *((void *)a2 + 31);
      uint64_t v109 = *((void *)a2 + 32);
      outlined copy of MeshDescriptor.Primitives(v108, v109, *((unsigned char *)a2 + 264));
      *(void *)(a1 + 248) = v108;
      *(void *)(a1 + 256) = v109;
      *(unsigned char *)(a1 + 264) = v107;
      if (*((void *)a2 + 35)) {
        goto LABEL_70;
      }
    }
    long long v124 = a2[17];
    long long v125 = a2[18];
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    *(_OWORD *)(a1 + 272) = v124;
    *(_OWORD *)(a1 + 288) = v125;
    goto LABEL_73;
  }
  if (!v92)
  {
    outlined destroy of MeshDescriptor(a1 + 208);
    long long v111 = a2[14];
    long long v110 = a2[15];
    long long *v90 = *v91;
    *(_OWORD *)(a1 + 224) = v111;
    *(_OWORD *)(a1 + 240) = v110;
    long long v113 = a2[17];
    long long v112 = a2[18];
    long long v114 = a2[16];
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    *(_OWORD *)(a1 + 272) = v113;
    *(_OWORD *)(a1 + 288) = v112;
    *(_OWORD *)(a1 + 256) = v114;
    goto LABEL_73;
  }
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v93 = *((void *)a2 + 29);
  char v94 = *((unsigned char *)a2 + 240);
  outlined copy of MeshDescriptor.Materials(v93, v94);
  uint64_t v95 = *(void *)(a1 + 232);
  char v96 = *(unsigned char *)(a1 + 240);
  *(void *)(a1 + 232) = v93;
  *(unsigned char *)(a1 + 240) = v94;
  outlined consume of MeshDescriptor.Materials(v95, v96);
  uint64_t v97 = (long long *)(a1 + 248);
  uint64_t v98 = (long long *)((char *)a2 + 248);
  int v99 = *((unsigned __int8 *)a2 + 264);
  if (*(unsigned __int8 *)(a1 + 264) == 255)
  {
    if (v99 == 255)
    {
      long long v126 = *v98;
      *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
      long long *v97 = v126;
    }
    else
    {
      uint64_t v115 = *((void *)a2 + 31);
      uint64_t v116 = *((void *)a2 + 32);
      outlined copy of MeshDescriptor.Primitives(v115, v116, *((unsigned char *)a2 + 264));
      *(void *)(a1 + 248) = v115;
      *(void *)(a1 + 256) = v116;
      *(unsigned char *)(a1 + 264) = v99;
    }
  }
  else if (v99 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 248);
    char v122 = *((unsigned char *)a2 + 264);
    long long *v97 = *v98;
    *(unsigned char *)(a1 + 264) = v122;
  }
  else
  {
    uint64_t v100 = *((void *)a2 + 31);
    uint64_t v101 = *((void *)a2 + 32);
    outlined copy of MeshDescriptor.Primitives(v100, v101, *((unsigned char *)a2 + 264));
    uint64_t v102 = *(void *)(a1 + 248);
    uint64_t v103 = *(void *)(a1 + 256);
    *(void *)(a1 + 248) = v100;
    *(void *)(a1 + 256) = v101;
    unsigned __int8 v104 = *(unsigned char *)(a1 + 264);
    *(unsigned char *)(a1 + 264) = v99;
    outlined consume of MeshDescriptor.Primitives(v102, v103, v104);
  }
  unint64_t v127 = (long long *)(a1 + 272);
  int v128 = a2 + 17;
  uint64_t v129 = *((void *)a2 + 35);
  if (!*(void *)(a1 + 280))
  {
    if (!v129)
    {
      long long v132 = *v128;
      long long v133 = a2[18];
      *(void *)(a1 + 304) = *((void *)a2 + 38);
      *unint64_t v127 = v132;
      *(_OWORD *)(a1 + 288) = v133;
      goto LABEL_73;
    }
LABEL_70:
    *(void *)(a1 + 272) = *((void *)a2 + 34);
    *(void *)(a1 + 280) = *((void *)a2 + 35);
    *(void *)(a1 + 288) = *((void *)a2 + 36);
    *(void *)(a1 + 296) = *((void *)a2 + 37);
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_73;
  }
  if (v129)
  {
    *(void *)(a1 + 272) = *((void *)a2 + 34);
    *(void *)(a1 + 280) = *((void *)a2 + 35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 288) = *((void *)a2 + 36);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 296) = *((void *)a2 + 37);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 304) = *((void *)a2 + 38);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 272);
    uint64_t v130 = *((void *)a2 + 38);
    long long v131 = a2[18];
    *unint64_t v127 = *v128;
    *(_OWORD *)(a1 + 288) = v131;
    *(void *)(a1 + 304) = v130;
  }
LABEL_73:
  long long v134 = (char *)(a1 + 344);
  uint64_t v135 = (char *)a2 + 344;
  uint64_t v136 = (long long *)(a1 + 312);
  unint64_t v137 = (long long *)((char *)a2 + 312);
  uint64_t v138 = *((void *)a2 + 40);
  if (!*(void *)(a1 + 320))
  {
    if (!v138)
    {
      long long v163 = *v137;
      long long v164 = *(long long *)((char *)a2 + 344);
      *(_OWORD *)(a1 + 328) = *(long long *)((char *)a2 + 328);
      *(_OWORD *)(a1 + 344) = v164;
      *uint64_t v136 = v163;
      long long v165 = *(long long *)((char *)a2 + 360);
      long long v166 = *(long long *)((char *)a2 + 376);
      long long v167 = *(long long *)((char *)a2 + 392);
      *(void *)(a1 + 408) = *((void *)a2 + 51);
      *(_OWORD *)(a1 + 376) = v166;
      *(_OWORD *)(a1 + 392) = v167;
      *(_OWORD *)(a1 + 360) = v165;
      goto LABEL_97;
    }
    *(void *)(a1 + 312) = *((void *)a2 + 39);
    *(void *)(a1 + 320) = *((void *)a2 + 40);
    *(void *)(a1 + 328) = *((void *)a2 + 41);
    uint64_t v151 = *((void *)a2 + 42);
    char v152 = *v135;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v151, v152);
    *(void *)(a1 + 336) = v151;
    *long long v134 = v152;
    int v153 = *((unsigned __int8 *)a2 + 368);
    if (v153 == 255)
    {
      long long v169 = a2[22];
      *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
      *(_OWORD *)(a1 + 352) = v169;
      if (*((void *)a2 + 48)) {
        goto LABEL_94;
      }
    }
    else
    {
      uint64_t v154 = *((void *)a2 + 44);
      uint64_t v155 = *((void *)a2 + 45);
      outlined copy of MeshDescriptor.Primitives(v154, v155, *((unsigned char *)a2 + 368));
      *(void *)(a1 + 352) = v154;
      *(void *)(a1 + 360) = v155;
      *(unsigned char *)(a1 + 368) = v153;
      if (*((void *)a2 + 48)) {
        goto LABEL_94;
      }
    }
    long long v170 = *(long long *)((char *)a2 + 376);
    long long v171 = *(long long *)((char *)a2 + 392);
    *(void *)(a1 + 408) = *((void *)a2 + 51);
    *(_OWORD *)(a1 + 376) = v170;
    *(_OWORD *)(a1 + 392) = v171;
    goto LABEL_97;
  }
  if (!v138)
  {
    outlined destroy of MeshDescriptor(a1 + 312);
    long long v157 = *(long long *)((char *)a2 + 328);
    long long v156 = *(long long *)((char *)a2 + 344);
    *uint64_t v136 = *v137;
    *(_OWORD *)(a1 + 328) = v157;
    *(_OWORD *)(a1 + 344) = v156;
    long long v159 = *(long long *)((char *)a2 + 376);
    long long v158 = *(long long *)((char *)a2 + 392);
    long long v160 = *(long long *)((char *)a2 + 360);
    *(void *)(a1 + 408) = *((void *)a2 + 51);
    *(_OWORD *)(a1 + 376) = v159;
    *(_OWORD *)(a1 + 392) = v158;
    *(_OWORD *)(a1 + 360) = v160;
    goto LABEL_97;
  }
  *(void *)(a1 + 312) = *((void *)a2 + 39);
  *(void *)(a1 + 320) = *((void *)a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v139 = *((void *)a2 + 42);
  char v140 = *v135;
  outlined copy of MeshDescriptor.Materials(v139, *v135);
  uint64_t v141 = *(void *)(a1 + 336);
  char v142 = *v134;
  *(void *)(a1 + 336) = v139;
  *long long v134 = v140;
  outlined consume of MeshDescriptor.Materials(v141, v142);
  uint64_t v143 = (long long *)(a1 + 352);
  CGFloat v144 = a2 + 22;
  int v145 = *((unsigned __int8 *)a2 + 368);
  if (*(unsigned __int8 *)(a1 + 368) == 255)
  {
    if (v145 == 255)
    {
      long long v172 = *v144;
      *(unsigned char *)(a1 + 368) = *((unsigned char *)a2 + 368);
      *uint64_t v143 = v172;
    }
    else
    {
      uint64_t v161 = *((void *)a2 + 44);
      uint64_t v162 = *((void *)a2 + 45);
      outlined copy of MeshDescriptor.Primitives(v161, v162, *((unsigned char *)a2 + 368));
      *(void *)(a1 + 352) = v161;
      *(void *)(a1 + 360) = v162;
      *(unsigned char *)(a1 + 368) = v145;
    }
  }
  else if (v145 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 352);
    char v168 = *((unsigned char *)a2 + 368);
    *uint64_t v143 = *v144;
    *(unsigned char *)(a1 + 368) = v168;
  }
  else
  {
    uint64_t v146 = *((void *)a2 + 44);
    uint64_t v147 = *((void *)a2 + 45);
    outlined copy of MeshDescriptor.Primitives(v146, v147, *((unsigned char *)a2 + 368));
    uint64_t v148 = *(void *)(a1 + 352);
    uint64_t v149 = *(void *)(a1 + 360);
    *(void *)(a1 + 352) = v146;
    *(void *)(a1 + 360) = v147;
    unsigned __int8 v150 = *(unsigned char *)(a1 + 368);
    *(unsigned char *)(a1 + 368) = v145;
    outlined consume of MeshDescriptor.Primitives(v148, v149, v150);
  }
  unint64_t v173 = (long long *)(a1 + 376);
  uint64_t v174 = (long long *)((char *)a2 + 376);
  uint64_t v175 = *((void *)a2 + 48);
  if (!*(void *)(a1 + 384))
  {
    if (!v175)
    {
      long long v178 = *v174;
      long long v179 = *(long long *)((char *)a2 + 392);
      *(void *)(a1 + 408) = *((void *)a2 + 51);
      *unint64_t v173 = v178;
      *(_OWORD *)(a1 + 392) = v179;
      goto LABEL_97;
    }
LABEL_94:
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    *(void *)(a1 + 384) = *((void *)a2 + 48);
    *(void *)(a1 + 392) = *((void *)a2 + 49);
    *(void *)(a1 + 400) = *((void *)a2 + 50);
    *(void *)(a1 + 408) = *((void *)a2 + 51);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_97;
  }
  if (v175)
  {
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    *(void *)(a1 + 384) = *((void *)a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 392) = *((void *)a2 + 49);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 400) = *((void *)a2 + 50);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 408) = *((void *)a2 + 51);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 376);
    uint64_t v176 = *((void *)a2 + 51);
    long long v177 = *(long long *)((char *)a2 + 392);
    *unint64_t v173 = *v174;
    *(_OWORD *)(a1 + 392) = v177;
    *(void *)(a1 + 408) = v176;
  }
LABEL_97:
  v180 = (long long *)(a1 + 416);
  v181 = a2 + 26;
  uint64_t v182 = *((void *)a2 + 53);
  if (!*(void *)(a1 + 424))
  {
    if (!v182)
    {
      long long v207 = *v181;
      long long v208 = a2[28];
      *(_OWORD *)(a1 + 432) = a2[27];
      *(_OWORD *)(a1 + 448) = v208;
      long long *v180 = v207;
      long long v209 = a2[29];
      long long v210 = a2[30];
      long long v211 = a2[31];
      *(void *)(a1 + 512) = *((void *)a2 + 64);
      *(_OWORD *)(a1 + 480) = v210;
      *(_OWORD *)(a1 + 496) = v211;
      *(_OWORD *)(a1 + 464) = v209;
      return a1;
    }
    *(void *)(a1 + 416) = *((void *)a2 + 52);
    *(void *)(a1 + 424) = *((void *)a2 + 53);
    *(void *)(a1 + 432) = *((void *)a2 + 54);
    uint64_t v195 = *((void *)a2 + 55);
    char v196 = *((unsigned char *)a2 + 448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of MeshDescriptor.Materials(v195, v196);
    *(void *)(a1 + 440) = v195;
    *(unsigned char *)(a1 + 448) = v196;
    int v197 = *((unsigned __int8 *)a2 + 472);
    if (v197 == 255)
    {
      long long v213 = *(long long *)((char *)a2 + 456);
      *(unsigned char *)(a1 + 472) = *((unsigned char *)a2 + 472);
      *(_OWORD *)(a1 + 456) = v213;
      if (!*((void *)a2 + 61))
      {
LABEL_112:
        long long v214 = a2[30];
        long long v215 = a2[31];
        *(void *)(a1 + 512) = *((void *)a2 + 64);
        *(_OWORD *)(a1 + 480) = v214;
        *(_OWORD *)(a1 + 496) = v215;
        return a1;
      }
    }
    else
    {
      uint64_t v198 = *((void *)a2 + 57);
      uint64_t v199 = *((void *)a2 + 58);
      outlined copy of MeshDescriptor.Primitives(v198, v199, *((unsigned char *)a2 + 472));
      *(void *)(a1 + 456) = v198;
      *(void *)(a1 + 464) = v199;
      *(unsigned char *)(a1 + 472) = v197;
      if (!*((void *)a2 + 61)) {
        goto LABEL_112;
      }
    }
LABEL_118:
    *(void *)(a1 + 480) = *((void *)a2 + 60);
    *(void *)(a1 + 488) = *((void *)a2 + 61);
    *(void *)(a1 + 496) = *((void *)a2 + 62);
    *(void *)(a1 + 504) = *((void *)a2 + 63);
    *(void *)(a1 + 512) = *((void *)a2 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a1;
  }
  if (!v182)
  {
    outlined destroy of MeshDescriptor(a1 + 416);
    long long v201 = a2[27];
    long long v200 = a2[28];
    long long *v180 = *v181;
    *(_OWORD *)(a1 + 432) = v201;
    *(_OWORD *)(a1 + 448) = v200;
    long long v203 = a2[30];
    long long v202 = a2[31];
    long long v204 = a2[29];
    *(void *)(a1 + 512) = *((void *)a2 + 64);
    *(_OWORD *)(a1 + 480) = v203;
    *(_OWORD *)(a1 + 496) = v202;
    *(_OWORD *)(a1 + 464) = v204;
    return a1;
  }
  *(void *)(a1 + 416) = *((void *)a2 + 52);
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 432) = *((void *)a2 + 54);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v183 = *((void *)a2 + 55);
  char v184 = *((unsigned char *)a2 + 448);
  outlined copy of MeshDescriptor.Materials(v183, v184);
  uint64_t v185 = *(void *)(a1 + 440);
  char v186 = *(unsigned char *)(a1 + 448);
  *(void *)(a1 + 440) = v183;
  *(unsigned char *)(a1 + 448) = v184;
  outlined consume of MeshDescriptor.Materials(v185, v186);
  v187 = (long long *)(a1 + 456);
  v188 = (long long *)((char *)a2 + 456);
  int v189 = *((unsigned __int8 *)a2 + 472);
  if (*(unsigned __int8 *)(a1 + 472) == 255)
  {
    if (v189 == 255)
    {
      long long v216 = *v188;
      *(unsigned char *)(a1 + 472) = *((unsigned char *)a2 + 472);
      long long *v187 = v216;
    }
    else
    {
      uint64_t v205 = *((void *)a2 + 57);
      uint64_t v206 = *((void *)a2 + 58);
      outlined copy of MeshDescriptor.Primitives(v205, v206, *((unsigned char *)a2 + 472));
      *(void *)(a1 + 456) = v205;
      *(void *)(a1 + 464) = v206;
      *(unsigned char *)(a1 + 472) = v189;
    }
  }
  else if (v189 == 255)
  {
    outlined destroy of MeshDescriptor.Primitives(a1 + 456);
    char v212 = *((unsigned char *)a2 + 472);
    long long *v187 = *v188;
    *(unsigned char *)(a1 + 472) = v212;
  }
  else
  {
    uint64_t v190 = *((void *)a2 + 57);
    uint64_t v191 = *((void *)a2 + 58);
    outlined copy of MeshDescriptor.Primitives(v190, v191, *((unsigned char *)a2 + 472));
    uint64_t v192 = *(void *)(a1 + 456);
    uint64_t v193 = *(void *)(a1 + 464);
    *(void *)(a1 + 456) = v190;
    *(void *)(a1 + 464) = v191;
    unsigned __int8 v194 = *(unsigned char *)(a1 + 472);
    *(unsigned char *)(a1 + 472) = v189;
    outlined consume of MeshDescriptor.Primitives(v192, v193, v194);
  }
  v217 = (long long *)(a1 + 480);
  v218 = a2 + 30;
  uint64_t v219 = *((void *)a2 + 61);
  if (!*(void *)(a1 + 488))
  {
    if (!v219)
    {
      long long v222 = *v218;
      long long v223 = a2[31];
      *(void *)(a1 + 512) = *((void *)a2 + 64);
      long long *v217 = v222;
      *(_OWORD *)(a1 + 496) = v223;
      return a1;
    }
    goto LABEL_118;
  }
  if (v219)
  {
    *(void *)(a1 + 480) = *((void *)a2 + 60);
    *(void *)(a1 + 488) = *((void *)a2 + 61);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 496) = *((void *)a2 + 62);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 504) = *((void *)a2 + 63);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 512) = *((void *)a2 + 64);
  }
  else
  {
    outlined destroy of MeshDescriptor.Skinning(a1 + 480);
    uint64_t v220 = *((void *)a2 + 64);
    long long v221 = a2[31];
    long long *v217 = *v218;
    *(_OWORD *)(a1 + 496) = v221;
    *(void *)(a1 + 512) = v220;
  }
  return a1;
}

uint64_t outlined destroy of MeshDescriptor(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy520_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x208uLL);
}

uint64_t assignWithTake for ExtrudedShapeDescriptor(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of MeshDescriptor(a1);
LABEL_7:
    long long v13 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v13;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    long long v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    goto LABEL_15;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of MeshDescriptor.Materials(v6, v7);
  char v8 = (_OWORD *)(a2 + 40);
  int v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 56);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_OWORD *)(a1 + 40) = *v8;
      *(unsigned char *)(a1 + 56) = v10;
      outlined consume of MeshDescriptor.Primitives(v11, v12, v9);
      goto LABEL_10;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_10:
  if (*(void *)(a1 + 72))
  {
    uint64_t v16 = *(void *)(a2 + 72);
    if (v16)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v16;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      goto LABEL_15;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 64);
  }
  long long v17 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v17;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
LABEL_15:
  if (!*(void *)(a1 + 112))
  {
LABEL_21:
    long long v27 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v27;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    long long v28 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v28;
    long long v29 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v29;
    goto LABEL_29;
  }
  uint64_t v18 = *(void *)(a2 + 112);
  if (!v18)
  {
    outlined destroy of MeshDescriptor(a1 + 104);
    goto LABEL_21;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v18;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  char v19 = *(unsigned char *)(a2 + 136);
  uint64_t v20 = *(void *)(a1 + 128);
  char v21 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = v19;
  outlined consume of MeshDescriptor.Materials(v20, v21);
  long long v22 = (_OWORD *)(a2 + 144);
  int v23 = *(unsigned __int8 *)(a1 + 160);
  if (v23 != 255)
  {
    int v24 = *(unsigned __int8 *)(a2 + 160);
    if (v24 != 255)
    {
      uint64_t v25 = *(void *)(a1 + 144);
      uint64_t v26 = *(void *)(a1 + 152);
      *(_OWORD *)(a1 + 144) = *v22;
      *(unsigned char *)(a1 + 160) = v24;
      outlined consume of MeshDescriptor.Primitives(v25, v26, v23);
      goto LABEL_24;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 144);
  }
  *(_OWORD *)(a1 + 144) = *v22;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
LABEL_24:
  if (*(void *)(a1 + 176))
  {
    uint64_t v30 = *(void *)(a2 + 176);
    if (v30)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v30;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      goto LABEL_29;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 168);
  }
  long long v31 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v31;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
LABEL_29:
  long long v32 = (char *)(a1 + 344);
  if (!*(void *)(a1 + 216))
  {
LABEL_35:
    long long v42 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v42;
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    long long v43 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v43;
    long long v44 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v44;
    goto LABEL_43;
  }
  uint64_t v33 = *(void *)(a2 + 216);
  if (!v33)
  {
    outlined destroy of MeshDescriptor(a1 + 208);
    goto LABEL_35;
  }
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v33;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  char v34 = *(unsigned char *)(a2 + 240);
  uint64_t v35 = *(void *)(a1 + 232);
  char v36 = *(unsigned char *)(a1 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = v34;
  outlined consume of MeshDescriptor.Materials(v35, v36);
  long long v37 = (_OWORD *)(a2 + 248);
  int v38 = *(unsigned __int8 *)(a1 + 264);
  if (v38 != 255)
  {
    int v39 = *(unsigned __int8 *)(a2 + 264);
    if (v39 != 255)
    {
      uint64_t v40 = *(void *)(a1 + 248);
      uint64_t v41 = *(void *)(a1 + 256);
      *(_OWORD *)(a1 + 248) = *v37;
      *(unsigned char *)(a1 + 264) = v39;
      outlined consume of MeshDescriptor.Primitives(v40, v41, v38);
      goto LABEL_38;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 248);
  }
  *(_OWORD *)(a1 + 248) = *v37;
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
LABEL_38:
  if (*(void *)(a1 + 280))
  {
    uint64_t v45 = *(void *)(a2 + 280);
    if (v45)
    {
      *(void *)(a1 + 272) = *(void *)(a2 + 272);
      *(void *)(a1 + 280) = v45;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      goto LABEL_43;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 272);
  }
  long long v46 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v46;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
LABEL_43:
  if (!*(void *)(a1 + 320))
  {
LABEL_49:
    long long v56 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v56;
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    long long v57 = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 328) = v57;
    long long v58 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 360) = v58;
    goto LABEL_57;
  }
  uint64_t v47 = *(void *)(a2 + 320);
  if (!v47)
  {
    outlined destroy of MeshDescriptor(a1 + 312);
    goto LABEL_49;
  }
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a1 + 320) = v47;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  char v48 = *(unsigned char *)(a2 + 344);
  uint64_t v49 = *(void *)(a1 + 336);
  char v50 = *v32;
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *long long v32 = v48;
  outlined consume of MeshDescriptor.Materials(v49, v50);
  uint64_t v51 = (_OWORD *)(a2 + 352);
  int v52 = *(unsigned __int8 *)(a1 + 368);
  if (v52 != 255)
  {
    int v53 = *(unsigned __int8 *)(a2 + 368);
    if (v53 != 255)
    {
      uint64_t v54 = *(void *)(a1 + 352);
      uint64_t v55 = *(void *)(a1 + 360);
      *(_OWORD *)(a1 + 352) = *v51;
      *(unsigned char *)(a1 + 368) = v53;
      outlined consume of MeshDescriptor.Primitives(v54, v55, v52);
      goto LABEL_52;
    }
    outlined destroy of MeshDescriptor.Primitives(a1 + 352);
  }
  *(_OWORD *)(a1 + 352) = *v51;
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
LABEL_52:
  if (*(void *)(a1 + 384))
  {
    uint64_t v59 = *(void *)(a2 + 384);
    if (v59)
    {
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = v59;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 392) = *(void *)(a2 + 392);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 400) = *(void *)(a2 + 400);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 408) = *(void *)(a2 + 408);
      goto LABEL_57;
    }
    outlined destroy of MeshDescriptor.Skinning(a1 + 376);
  }
  long long v60 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v60;
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
LABEL_57:
  if (*(void *)(a1 + 424))
  {
    uint64_t v61 = *(void *)(a2 + 424);
    if (v61)
    {
      *(void *)(a1 + 416) = *(void *)(a2 + 416);
      *(void *)(a1 + 424) = v61;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      swift_bridgeObjectRelease();
      char v62 = *(unsigned char *)(a2 + 448);
      uint64_t v63 = *(void *)(a1 + 440);
      char v64 = *(unsigned char *)(a1 + 448);
      *(void *)(a1 + 440) = *(void *)(a2 + 440);
      *(unsigned char *)(a1 + 448) = v62;
      outlined consume of MeshDescriptor.Materials(v63, v64);
      uint64_t v65 = (_OWORD *)(a1 + 456);
      long long v66 = (_OWORD *)(a2 + 456);
      int v67 = *(unsigned __int8 *)(a1 + 472);
      if (v67 != 255)
      {
        int v68 = *(unsigned __int8 *)(a2 + 472);
        if (v68 != 255)
        {
          uint64_t v69 = *(void *)(a1 + 456);
          uint64_t v70 = *(void *)(a1 + 464);
          *uint64_t v65 = *v66;
          *(unsigned char *)(a1 + 472) = v68;
          outlined consume of MeshDescriptor.Primitives(v69, v70, v67);
          goto LABEL_66;
        }
        outlined destroy of MeshDescriptor.Primitives((uint64_t)v65);
      }
      *uint64_t v65 = *v66;
      *(unsigned char *)(a1 + 472) = *(unsigned char *)(a2 + 472);
LABEL_66:
      if (*(void *)(a1 + 488))
      {
        uint64_t v74 = *(void *)(a2 + 488);
        if (v74)
        {
          *(void *)(a1 + 480) = *(void *)(a2 + 480);
          *(void *)(a1 + 488) = v74;
          swift_bridgeObjectRelease();
          *(void *)(a1 + 496) = *(void *)(a2 + 496);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 504) = *(void *)(a2 + 504);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 512) = *(void *)(a2 + 512);
          return a1;
        }
        outlined destroy of MeshDescriptor.Skinning(a1 + 480);
      }
      long long v75 = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = v75;
      *(void *)(a1 + 512) = *(void *)(a2 + 512);
      return a1;
    }
    outlined destroy of MeshDescriptor(a1 + 416);
  }
  long long v71 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v71;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  long long v72 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v72;
  long long v73 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v73;
  return a1;
}

uint64_t getEnumTagSinglePayload for ExtrudedShapeDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 520)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExtrudedShapeDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 520) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 520) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExtrudedShapeDescriptor()
{
  return &type metadata for ExtrudedShapeDescriptor;
}

uint64_t getEnumTagSinglePayload for PathSpan(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PathSpan(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for PathSpan()
{
  return &unk_26DCBA390;
}

uint64_t outlined copy of ShapeExtrusionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for ShapeExtrusionError(uint64_t a1)
{
  return outlined consume of ShapeExtrusionError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of ShapeExtrusionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShapeExtrusionError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ShapeExtrusionError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ShapeExtrusionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ShapeExtrusionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ShapeExtrusionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ShapeExtrusionError()
{
  return &type metadata for ShapeExtrusionError;
}

void static AnimationHandoffType.compose.getter(unsigned char *a1@<X8>)
{
  *a1 = 0x80;
}

uint64_t Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:handoffType:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, const void *a6, unsigned __int8 *a7)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unsigned int v11 = *a7;
  REAnimationHandoffDefaultDescEx();
  int v12 = v27;
  float v13 = a1;
  int v14 = v11 >> 6;
  switch(v11 >> 6)
  {
    case 1u:
      int v14 = 1;
      goto LABEL_3;
    case 2u:
      if (v11 == 128)
      {
        if (!a3)
        {
          BOOL v15 = 0;
          int v14 = 2;
          goto LABEL_15;
        }
LABEL_9:
        BOOL v15 = 0;
        int v14 = 2;
LABEL_11:
        if (a3 < (uint64_t)0xFFFFFFFF80000000)
        {
          __break(1u);
        }
        else if (a3 <= 0x7FFFFFFF)
        {
          int v12 = a3;
          goto LABEL_15;
        }
        __break(1u);
      }
      BOOL v15 = 0;
      int v14 = 3;
      if (a3) {
        goto LABEL_11;
      }
LABEL_15:
      REAnimationComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      CMTimebaseRef timebaseOut = (CMTimebaseRef)__PAIR64__(LODWORD(v13), v14);
      int v27 = v12;
      BOOL v28 = v15;
      uint64_t v16 = REAnimationComponentPlay();
      if (!a6) {
        goto LABEL_23;
      }
      long long v17 = (const void *)swift_unknownObjectRetain();
      CFTypeID v18 = CFGetTypeID(v17);
      if (v18 == CMClockGetTypeID())
      {
        CMTimebaseRef timebaseOut = 0;
        CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        type metadata accessor for CMClockRef(0);
        swift_unknownObjectRetain();
        uint64_t v20 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
        CMTimebaseCreateWithSourceClock(v19, v20, &timebaseOut);

        if (timebaseOut)
        {
          char v21 = timebaseOut;
LABEL_21:
          int v23 = v21;
          REAnimationComponentSetAnimationParentTimebase();
        }
      }
      else
      {
        CFTypeID v22 = CFGetTypeID(a6);
        if (v22 == CMTimebaseGetTypeID())
        {
          type metadata accessor for CMTimebaseRef(0);
          swift_unknownObjectRetain();
          char v21 = (OpaqueCMTimebase *)(id)swift_dynamicCastUnknownClassUnconditional();
          goto LABEL_21;
        }
      }
      swift_unknownObjectRelease();
LABEL_23:
      if (a5) {
        REAnimationComponentPauseAnimation();
      }
      type metadata accessor for AnimationPlaybackController();
      uint64_t v24 = swift_allocObject();
      swift_weakInit();
      *(void *)(v24 + 16) = v16;
      swift_beginAccess();
      swift_weakAssign();
      return v24;
    case 3u:
      if (a3) {
        goto LABEL_9;
      }
      BOOL v15 = 0;
      int v14 = 0;
      goto LABEL_15;
    default:
LABEL_3:
      BOOL v15 = (v11 & 1) == 0;
      if (!a3) {
        goto LABEL_15;
      }
      goto LABEL_11;
  }
}

uint64_t Entity.playAnimation(named:transitionDuration:startsPaused:recursive:)(unint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  if (a4)
  {
    swift_retain();
    if (REEntityGetChildCount() >= 1)
    {
      uint64_t v9 = 0;
      int v10 = &type metadata for __EntityInfoComponent;
      char v60 = a3;
      while (v9 < REEntityGetChildCount())
      {
        uint64_t Child = REEntityGetChild();
        if (!Child) {
          goto LABEL_67;
        }
        uint64_t v12 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed()) {
            goto LABEL_54;
          }
          specialized static SceneManager.customComponentType(_:)((uint64_t)v10, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent()) {
            goto LABEL_33;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object) {
            goto LABEL_33;
          }
          int v14 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v14 == 0;
          }
          if (v15)
          {
            swift_retain();
          }
          else
          {
            int v16 = *v14;
            uint64_t v17 = String.init(utf8String:)();
            if (v18) {
              Swift::Int v19 = v17;
            }
            else {
              Swift::Int v19 = 0;
            }
            if (v18) {
              unint64_t v20 = v18;
            }
            else {
              unint64_t v20 = 0xE000000000000000;
            }
            int v14 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v14;
          }
          if (!v14) {
            goto LABEL_68;
          }
          char v21 = v10;
          swift_retain();
          uint64_t v22 = String.init(utf8String:)();
          unint64_t v24 = v23;
          swift_release();
          if (v24) {
            uint64_t v25 = v22;
          }
          else {
            uint64_t v25 = 0;
          }
          if (!v24) {
            unint64_t v24 = 0xE000000000000000;
          }
          uint64_t v26 = (NSString *)MEMORY[0x22A688A50](v25, v24);
          swift_bridgeObjectRelease();
          Class v27 = NSClassFromString(v26);

          swift_release();
          int v10 = v21;
          a3 = v60;
          if (!v27) {
            goto LABEL_33;
          }
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          uint64_t v28 = swift_dynamicCastMetatype();
          if (v28)
          {
            uint64_t v29 = (*(uint64_t (**)(void))(v28 + 232))();
            uint64_t v30 = *(void *)(v29 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v30, 0);
            *(void *)(v29 + 16) = v12;
            MEMORY[0x22A68E750](v12, v29);
            swift_release();
          }
          else
          {
LABEL_33:
            makeEntity(for:)(v12);
          }
        }
        if (v9 >= REEntityGetChildCount()) {
          goto LABEL_53;
        }
        ++v9;
        Entity.playAnimation(named:transitionDuration:startsPaused:recursive:)(a1, a2, a3 & 1, 1, a5);
        swift_release();
        swift_release();
        if (v9 >= REEntityGetChildCount()) {
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_36:
    swift_release();
  }
  unint64_t v31 = Entity.availableAnimations.getter();
  swift_bridgeObjectRetain();
  a1 = specialized _ArrayProtocol.filter(_:)(v31, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(a1 >> 62))
  {
    uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v32 == 1) {
      goto LABEL_56;
    }
    goto LABEL_39;
  }
LABEL_55:
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  if (v32 == 1)
  {
LABEL_56:
    if ((a1 & 0xC000000000000001) == 0)
    {
      if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        swift_retain();
LABEL_59:
        swift_bridgeObjectRelease();
        REAnimationHandoffDefaultDescEx();
        int v53 = v61;
        int v54 = v62;
        uint64_t v55 = v63;
        char v56 = v64;
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        LODWORD(v61) = v53;
        float v57 = a5;
        *((float *)&v61 + 1) = v57;
        int v62 = v54;
        uint64_t v63 = v55;
        LOBYTE(v64) = v56;
        uint64_t v58 = REAnimationComponentPlay();
        if (a3) {
          REAnimationComponentPauseAnimation();
        }
        type metadata accessor for AnimationPlaybackController();
        uint64_t v33 = swift_allocObject();
        swift_weakInit();
        *(void *)(v33 + 16) = v58;
        swift_beginAccess();
        swift_weakAssign();
        swift_release();
        return v33;
      }
      goto LABEL_66;
    }
LABEL_64:
    MEMORY[0x22A689930](0, a1);
    goto LABEL_59;
  }
LABEL_39:
  if (!v32)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for AnimationPlaybackController();
    uint64_t v33 = swift_allocObject();
    swift_weakInit();
    *(void *)(v33 + 16) = 0;
    swift_beginAccess();
    swift_weakAssign();
    return v33;
  }
  uint64_t v34 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v34, (uint64_t)&v61);
  uint64_t v35 = v64;
  uint64_t v36 = v65;
  __swift_project_boxed_opaque_existential_1(&v61, v64);
  (*(void (**)(uint64_t, uint64_t))(v36 + 32))(v35, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
  if ((unint64_t)(v32 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v37 = swift_slowAlloc();
  if (v32 < 0)
  {
    __break(1u);
LABEL_66:
    __break(1u);
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v38 = v37;
  for (uint64_t i = 0; i != v32; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      uint64_t v40 = MEMORY[0x22A689930](i, a1);
    }
    else {
      uint64_t v40 = swift_retain();
    }
    uint64_t v41 = *(void *)(v40 + 16);
    swift_release();
    *(void *)(v38 + 8 * i) = v41;
  }
  swift_bridgeObjectRelease();
  uint64_t TimelineGroup = REAssetManagerTimelineAssetCreateTimelineGroup();
  if (TimelineGroup)
  {
    uint64_t v43 = TimelineGroup;
    REEntityGetName();
    uint64_t v44 = String.init(cString:)();
    uint64_t v46 = v45;
    type metadata accessor for AnimationResource();
    uint64_t v47 = (void *)swift_allocObject();
    v47[2] = v43;
    v47[3] = v44;
    v47[4] = v46;
    RERetain();
    REAssetSetSwiftObject();
    REAnimationHandoffDefaultDescEx();
    LODWORD(v46) = v61;
    int v48 = v62;
    uint64_t v49 = v63;
    char v50 = v64;
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    LODWORD(v61) = v46;
    float v51 = a5;
    *((float *)&v61 + 1) = v51;
    int v62 = v48;
    uint64_t v63 = v49;
    LOBYTE(v64) = v50;
    uint64_t v52 = REAnimationComponentPlay();
    if (a3) {
      REAnimationComponentPauseAnimation();
    }
    type metadata accessor for AnimationPlaybackController();
    uint64_t v33 = swift_allocObject();
    swift_weakInit();
    *(void *)(v33 + 16) = v52;
    swift_beginAccess();
    swift_weakAssign();
    swift_release();
    MEMORY[0x22A696500](v38, -1, -1);
    return v33;
  }
LABEL_69:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Entity.playAnimation(_:transitionDuration:blendLayerOffset:separateAnimatedValue:startsPaused:clock:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, const void *a6)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  REAnimationHandoffDefaultDescEx();
  if (a3)
  {
    if (a3 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a3 <= 0x7FFFFFFF)
    {
      int v10 = 2;
      goto LABEL_6;
    }
    __break(1u);
  }
  int v10 = (int)timebaseOut;
  LODWORD(a3) = v23;
LABEL_6:
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  LODWORD(timebaseOut) = v10;
  float v11 = a1;
  *((float *)&timebaseOut + 1) = v11;
  int v23 = a3;
  uint64_t v12 = REAnimationComponentPlay();
  if (!a6) {
    goto LABEL_14;
  }
  float v13 = (const void *)swift_unknownObjectRetain();
  CFTypeID v14 = CFGetTypeID(v13);
  if (v14 == CMClockGetTypeID())
  {
    CMTimebaseRef timebaseOut = 0;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    type metadata accessor for CMClockRef(0);
    swift_unknownObjectRetain();
    int v16 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
    CMTimebaseCreateWithSourceClock(v15, v16, &timebaseOut);

    if (timebaseOut)
    {
      uint64_t v17 = timebaseOut;
LABEL_12:
      Swift::Int v19 = v17;
      REAnimationComponentSetAnimationParentTimebase();
    }
  }
  else
  {
    CFTypeID v18 = CFGetTypeID(a6);
    if (v18 == CMTimebaseGetTypeID())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      uint64_t v17 = (OpaqueCMTimebase *)(id)swift_dynamicCastUnknownClassUnconditional();
      goto LABEL_12;
    }
  }
  swift_unknownObjectRelease();
LABEL_14:
  if (a5) {
    REAnimationComponentPauseAnimation();
  }
  type metadata accessor for AnimationPlaybackController();
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  *(void *)(v20 + 16) = v12;
  swift_beginAccess();
  swift_weakAssign();
  return v20;
}

uint64_t Entity.playAnimation(_:transitionDuration:startsPaused:)(uint64_t a1, char a2)
{
  REAnimationHandoffDefaultDescEx();
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  uint64_t v3 = REAnimationComponentPlay();
  if (a2) {
    REAnimationComponentPauseAnimation();
  }
  type metadata accessor for AnimationPlaybackController();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  *(void *)(v4 + 16) = v3;
  swift_beginAccess();
  swift_weakAssign();
  return v4;
}

Swift::Void __swiftcall Entity.stopAllAnimations(recursive:)(Swift::Bool recursive)
{
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAnimationComponentStopAllAnimations();
    RENetworkMarkComponentDirty();
  }
  if (recursive)
  {
    swift_retain();
    if (REEntityGetChildCount() < 1)
    {
LABEL_39:
      swift_release();
    }
    else
    {
      uint64_t v2 = 0;
      while (v2 < REEntityGetChildCount())
      {
        uint64_t Child = REEntityGetChild();
        if (!Child) {
          goto LABEL_46;
        }
        uint64_t v4 = Child;
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed()) {
            goto LABEL_45;
          }
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          if (!REEntityGetCustomComponent()) {
            goto LABEL_36;
          }
          uint64_t Object = RECustomComponentGetObject();
          if (!Object) {
            goto LABEL_36;
          }
          unsigned __int8 v6 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v7 = 1;
          }
          else {
            BOOL v7 = v6 == 0;
          }
          if (v7)
          {
            swift_retain();
          }
          else
          {
            int v8 = *v6;
            uint64_t v9 = String.init(utf8String:)();
            if (v10) {
              Swift::Int v11 = v9;
            }
            else {
              Swift::Int v11 = 0;
            }
            if (v10) {
              unint64_t v12 = v10;
            }
            else {
              unint64_t v12 = 0xE000000000000000;
            }
            unsigned __int8 v6 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v8 == 42, v11, v12);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v6;
          }
          if (!v6) {
            goto LABEL_47;
          }
          swift_retain();
          uint64_t v13 = String.init(utf8String:)();
          unint64_t v15 = v14;
          swift_release();
          uint64_t v16 = v15 ? v13 : 0;
          unint64_t v17 = v15 ? v15 : 0xE000000000000000;
          CFTypeID v18 = (NSString *)MEMORY[0x22A688A50](v16, v17);
          swift_bridgeObjectRelease();
          Class v19 = NSClassFromString(v18);

          swift_release();
          if (!v19) {
            goto LABEL_36;
          }
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          uint64_t v20 = swift_dynamicCastMetatype();
          if (v20)
          {
            uint64_t v21 = (*(uint64_t (**)(void))(v20 + 232))();
            uint64_t v22 = *(void *)(v21 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v22, 0);
            *(void *)(v21 + 16) = v4;
            MEMORY[0x22A68E750](v4, v21);
            swift_release();
          }
          else
          {
LABEL_36:
            makeEntity(for:)(v4);
          }
        }
        if (v2 >= REEntityGetChildCount()) {
          goto LABEL_44;
        }
        ++v2;
        Entity.stopAllAnimations(recursive:)(1);
        swift_release();
        if (v2 >= REEntityGetChildCount()) {
          goto LABEL_39;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
  }
}

id Entity.defaultAnimationClock.getter()
{
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  id result = (id)REAnimationComponentCopyDefaultTimebaseRef();
  if (!result)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    id result = (id)MEMORY[0x22A692210](ServiceLocator);
    if (result)
    {
      RootTimebase = (void *)REAnimationServiceGetRootTimebase();
      return RootTimebase;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t key path setter for Entity.defaultAnimationClock : Entity()
{
  swift_unknownObjectRetain();
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETimebaseComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for CMTimebaseRef(0);
    swift_unknownObjectRetain();
    uint64_t v0 = (void *)swift_dynamicCastUnknownClassUnconditional();
    RETimebaseComponentAddTimebase();

    REAnimationComponentSetDefaultTimebaseID();
  }

  return swift_unknownObjectRelease();
}

uint64_t Entity.defaultAnimationClock.setter()
{
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETimebaseComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for CMTimebaseRef(0);
    swift_unknownObjectRetain();
    uint64_t v0 = (void *)swift_dynamicCastUnknownClassUnconditional();
    RETimebaseComponentAddTimebase();

    REAnimationComponentSetDefaultTimebaseID();
  }

  return swift_unknownObjectRelease();
}

void (*Entity.defaultAnimationClock.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  id v4 = (id)REAnimationComponentCopyDefaultTimebaseRef();
  if (v4) {
    goto LABEL_4;
  }
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  id result = (void (*)(void **, char))MEMORY[0x22A692210](ServiceLocator);
  if (result)
  {
    id v4 = (id)REAnimationServiceGetRootTimebase();
LABEL_4:
    v3[3] = v4;
    return Entity.defaultAnimationClock.modify;
  }
  __break(1u);
  return result;
}

void Entity.defaultAnimationClock.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RETimebaseComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      uint64_t v3 = (void *)swift_dynamicCastUnknownClassUnconditional();
      RETimebaseComponentAddTimebase();

      REAnimationComponentSetDefaultTimebaseID();
    }
    swift_unknownObjectRelease();
  }
  else
  {
    REAnimationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RETimebaseComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      id v4 = (void *)swift_dynamicCastUnknownClassUnconditional();
      RETimebaseComponentAddTimebase();

      REAnimationComponentSetDefaultTimebaseID();
    }
  }
  swift_unknownObjectRelease();

  free(v2);
}

void AnimationHandoffType.HandoffType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  switch(a2 >> 6)
  {
    case 1:
      Swift::UInt8 v2 = a2 & 1;
      Swift::UInt v3 = 1;
      goto LABEL_4;
    case 2:
      if (a2 == 128) {
        Swift::UInt v4 = 2;
      }
      else {
        Swift::UInt v4 = 3;
      }
      goto LABEL_9;
    case 3:
      Swift::UInt v4 = 4;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Swift::UInt8 v2 = a2 & 1;
      Swift::UInt v3 = 0;
LABEL_4:
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v2);
      break;
  }
}

unint64_t AnimationHandoffType.HandoffType.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6563616C706572;
      break;
    case 2:
      unint64_t result = 0x65736F706D6F63;
      break;
    case 3:
      unint64_t result = 1886352499;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int AnimationHandoffType.HandoffType.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  switch(a1 >> 6)
  {
    case 1:
      Swift::UInt8 v2 = a1 & 1;
      Swift::UInt v3 = 1;
      goto LABEL_4;
    case 2:
      if (a1 == 128) {
        Swift::UInt v4 = 2;
      }
      else {
        Swift::UInt v4 = 3;
      }
      goto LABEL_9;
    case 3:
      Swift::UInt v4 = 4;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Swift::UInt8 v2 = a1 & 1;
      Swift::UInt v3 = 0;
LABEL_4:
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v2);
      break;
  }
  return Hasher._finalize()();
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  return AnimationHandoffType.HandoffType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.HandoffType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnimationHandoffType.HandoffType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.ComposeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.ComposeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  return 12383;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.HandoffType.StopCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.HandoffType.StopCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationHandoffType.HandoffType()
{
  return AnimationHandoffType.HandoffType.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance AnimationHandoffType.HandoffType(uint64_t a1)
{
  AnimationHandoffType.HandoffType.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationHandoffType.HandoffType()
{
  unsigned int v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1 >> 6)
  {
    case 1u:
      Swift::UInt8 v2 = v1 & 1;
      Swift::UInt v3 = 1;
      goto LABEL_4;
    case 2u:
      if (v1 == 128) {
        Swift::UInt v4 = 2;
      }
      else {
        Swift::UInt v4 = 3;
      }
      goto LABEL_9;
    case 3u:
      Swift::UInt v4 = 4;
LABEL_9:
      Hasher._combine(_:)(v4);
      break;
    default:
      Swift::UInt8 v2 = v1 & 1;
      Swift::UInt v3 = 0;
LABEL_4:
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v2);
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationHandoffType.HandoffType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  switch(v2 >> 6)
  {
    case 1u:
      int v9 = v3 & 0xC0;
      char v10 = ((v2 & 1) == 0) ^ v3;
      if (v9 != 64) {
        char v10 = 0;
      }
      uint64_t result = v10 & 1;
      break;
    case 2u:
      BOOL v7 = v3 == 128;
      BOOL v8 = v3 == 129;
      if (v2 == 128) {
        BOOL v8 = v7;
      }
      uint64_t result = v8;
      break;
    case 3u:
      uint64_t result = v3 == 192;
      break;
    default:
      char v4 = ((v2 & 1) == 0) ^ v3;
      if (v3 >= 0x40) {
        char v5 = 0;
      }
      else {
        char v5 = v4;
      }
      uint64_t result = v5 & 1;
      break;
  }
  return result;
}

uint64_t static AnimationHandoffType.snapshotAndReplace(applyToAllLayers:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static AnimationHandoffType.replace(applyToAllLayers:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result | 0x40;
  return result;
}

void static AnimationHandoffType.stop.getter(unsigned char *a1@<X8>)
{
  *a1 = -127;
}

void static AnimationHandoffType.default.getter(unsigned char *a1@<X8>)
{
  *a1 = -64;
}

uint64_t static AnimationHandoffType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  switch(v2 >> 6)
  {
    case 1u:
      BOOL v6 = (v2 & 1) == 0;
      if ((v3 & 0xC0) != 0x40 || ((v6 ^ v3) & 1) == 0) {
        goto LABEL_15;
      }
      uint64_t result = 1;
      break;
    case 2u:
      if (v2 == 128)
      {
        if (v3 != 128) {
          goto LABEL_15;
        }
        uint64_t result = 1;
      }
      else
      {
        if (v3 != 129) {
          goto LABEL_15;
        }
        uint64_t result = 1;
      }
      break;
    case 3u:
      if (v3 != 192) {
        goto LABEL_15;
      }
      uint64_t result = 1;
      break;
    default:
      BOOL v4 = (v2 & 1) == 0;
      if (v3 <= 0x3F && ((v4 ^ v3) & 1) != 0) {
        uint64_t result = 1;
      }
      else {
LABEL_15:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationHandoffType.CodingKeys()
{
  return 0x5466666F646E6168;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationHandoffType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x5466666F646E6168 && a2 == 0xEB00000000657079)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationHandoffType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationHandoffType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationHandoffType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  switch(v2 >> 6)
  {
    case 1u:
      BOOL v4 = (v2 & 1) == 0;
      if ((v3 & 0xC0) != 0x40) {
        return 0;
      }
      return ((v4 ^ v3) & 1) != 0;
    case 2u:
      if (v2 != 128) {
        return v3 == 129;
      }
      return v3 == 128;
    case 3u:
      return v3 == 192;
    default:
      BOOL v4 = (v2 & 1) == 0;
      if (v3 > 0x3F) {
        return 0;
      }
      return ((v4 ^ v3) & 1) != 0;
  }
}

uint64_t AnimationHandoffType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  BOOL v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AnimationHandoffType.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  BOOL v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t AnimationHandoffType.HandoffType.encode(to:)(void *a1, int a2)
{
  int v40 = a2;
  int v39 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys>);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v36 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.StopCodingKeys>);
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.ComposeCodingKeys>);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  MEMORY[0x270FA5388](v7);
  Class v27 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.ReplaceCodingKeys>);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys>);
  uint64_t v33 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationHandoffType.HandoffType.CodingKeys>);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  CFTypeID v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v40 >> 6)
  {
    case 1:
      char v42 = 1;
      lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();
      uint64_t v20 = v15;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v21 = v35;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v21);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v20);
      break;
    case 2:
      if (v39 == 128)
      {
        char v43 = 2;
        lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();
        uint64_t v22 = v27;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v24 = v28;
        uint64_t v23 = v29;
      }
      else
      {
        char v44 = 3;
        lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();
        uint64_t v22 = v30;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v24 = v31;
        uint64_t v23 = v32;
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      break;
    case 3:
      char v45 = 4;
      lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();
      uint64_t v25 = v36;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v38);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      break;
    default:
      char v41 = 0;
      lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationHandoffType@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return AnimationHandoffType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationHandoffType(void *a1)
{
  return AnimationHandoffType.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationHandoffType.HandoffType@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized AnimationHandoffType.HandoffType.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationHandoffType.HandoffType(void *a1)
{
  return AnimationHandoffType.HandoffType.encode(to:)(a1, *v1);
}

uint64_t specialized AnimationHandoffType.HandoffType.init(from:)(void *a1)
{
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys>);
  uint64_t v42 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  float v51 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.StopCodingKeys>);
  uint64_t v41 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  char v50 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.ComposeCodingKeys>);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.ReplaceCodingKeys>);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys>);
  uint64_t v40 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  char v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationHandoffType.HandoffType.CodingKeys>);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  uint64_t v52 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys();
  uint64_t v17 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v38 = v9;
    int v39 = v8;
    CFTypeID v18 = v49;
    Class v19 = v50;
    uint64_t v20 = v51;
    uint64_t v53 = 0;
    uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v21 + 16) == 1)
    {
      switch(*(unsigned char *)(v21 + 32))
      {
        case 1:
          char v55 = 1;
          lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys();
          uint64_t v30 = v39;
          uint64_t v31 = v53;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v31) {
            goto LABEL_14;
          }
          uint64_t v32 = v44;
          char v33 = KeyedDecodingContainer.decode(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v32);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          uint64_t v12 = v33 & 1 | 0x40u;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
          return v12;
        case 2:
          char v56 = 2;
          lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys();
          uint64_t v34 = v53;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v34) {
            goto LABEL_14;
          }
          (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v46);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          uint64_t v12 = 128;
          break;
        case 3:
          char v57 = 3;
          lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys();
          uint64_t v35 = v53;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v35) {
            goto LABEL_14;
          }
          (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v48);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          uint64_t v12 = 129;
          break;
        case 4:
          char v58 = 4;
          lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys();
          uint64_t v36 = v53;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (v36) {
            goto LABEL_14;
          }
          (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v47);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          uint64_t v12 = 192;
          break;
        default:
          char v54 = 0;
          lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys();
          uint64_t v22 = v53;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          if (!v22)
          {
            uint64_t v23 = v38;
            uint64_t v24 = v12;
            char v25 = KeyedDecodingContainer.decode(_:forKey:)();
            (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v23);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
            uint64_t v12 = v25 & 1;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
            return v12;
          }
LABEL_14:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          break;
      }
    }
    else
    {
      uint64_t v26 = v15;
      uint64_t v27 = v12;
      uint64_t v12 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v29 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      void *v29 = &type metadata for AnimationHandoffType.HandoffType;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v29, *MEMORY[0x263F8DCB0], v12);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v27);
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  return v12;
}

uint64_t specialized AnimationHandoffType.HandoffType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000022835F100
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563616C706572 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65736F706D6F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1886352499 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000022835F120)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (a1 >> 62)
  {
LABEL_21:
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      unint64_t v15 = v5;
      unint64_t v7 = 0;
      unint64_t v8 = v5 & 0xC000000000000001;
      uint64_t v9 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      while (1)
      {
        if (v8)
        {
          uint64_t v10 = MEMORY[0x22A689930](v7, v5);
          unint64_t v11 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_18:
            __break(1u);
            return v17;
          }
        }
        else
        {
          if (v7 >= *(void *)(v9 + 16))
          {
            __break(1u);
            goto LABEL_21;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v7 + 32);
          swift_retain();
          unint64_t v11 = v7 + 1;
          if (__OFADD__(v7, 1)) {
            goto LABEL_18;
          }
        }
        uint64_t v12 = *(void *)(v10 + 32);
        if (v12
          && (*(void *)(v10 + 24) == a2 ? (BOOL v13 = v12 == a3) : (BOOL v13 = 0),
              v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          unint64_t v5 = v15;
          unint64_t v8 = v16;
        }
        else
        {
          swift_release();
        }
        ++v7;
        if (v11 == v6) {
          return v17;
        }
      }
    }
  }
  return MEMORY[0x263F8EE78];
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.CodingKeys and conformance AnimationHandoffType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType and conformance AnimationHandoffType.HandoffType);
  }
  return result;
}

id sub_22827BC34@<X0>(void *a1@<X8>)
{
  id result = Entity.defaultAnimationClock.getter();
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for AnimationHandoffType()
{
  return &type metadata for AnimationHandoffType;
}

uint64_t getEnumTagSinglePayload for AnimationHandoffType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7D) {
    goto LABEL_17;
  }
  if (a2 + 131 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 131) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 131;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 131;
    }
  }
LABEL_17:
  unsigned int v6 = ((*a1 >> 6) & 0xFFFFFF83 | (4 * ((*a1 >> 1) & 0x1F))) ^ 0x7F;
  if (v6 >= 0x7C) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

unsigned char *storeEnumTagSinglePayload for AnimationHandoffType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 131 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 131) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x7D) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x7C)
  {
    unsigned int v6 = ((a2 - 125) >> 8) + 1;
    char *result = a2 - 125;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22827BDF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for AnimationHandoffType.HandoffType(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 6;
  unsigned int v4 = (v1 | 0xFFFFFFFE) + 2 * (v1 >> 6);
  if (v2 >= 0) {
    return v3;
  }
  else {
    return v4;
  }
}

unsigned char *destructiveProjectEnumData for AnimationHandoffType.HandoffType(unsigned char *result)
{
  *result &= 0x3Fu;
  return result;
}

unsigned char *destructiveInjectEnumTag for AnimationHandoffType.HandoffType(unsigned char *result, unsigned int a2)
{
  if (a2 < 2) {
    char *result = *result & 1 | ((_BYTE)a2 << 6);
  }
  else {
    char *result = (a2 & 1 | ((a2 >> 1) << 6)) + 64;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationHandoffType.HandoffType()
{
  return &type metadata for AnimationHandoffType.HandoffType;
}

void *type metadata accessor for AnimationHandoffType.CodingKeys()
{
  return &unk_26DCBA5F0;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.CodingKeys and conformance AnimationHandoffType.HandoffType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys and conformance AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.StopCodingKeys and conformance AnimationHandoffType.HandoffType.StopCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ComposeCodingKeys and conformance AnimationHandoffType.HandoffType.ComposeCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.ReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.ReplaceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys and conformance AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys);
  }
  return result;
}

void specialized static AnimationLogger.logError(_:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static AnimationLogger.logger);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_227DD2000, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v8, -1, -1);
    MEMORY[0x22A696500](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

unsigned char *storeEnumTagSinglePayload for AnimationHandoffType.HandoffType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22827C470);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.CodingKeys()
{
  return &unk_26DCBA680;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.SnapshotAndReplaceCodingKeys()
{
  return &unk_26DCBA710;
}

unsigned char *storeEnumTagSinglePayload for AnimationHandoffType.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22827C554);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.ReplaceCodingKeys()
{
  return &unk_26DCBA7A0;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.ComposeCodingKeys()
{
  return &unk_26DCBA7C0;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.StopCodingKeys()
{
  return &unk_26DCBA7E0;
}

void *type metadata accessor for AnimationHandoffType.HandoffType.DefaultHandoffTypeCodingKeys()
{
  return &unk_26DCBA800;
}

uint64_t StateMachineController.currentState.getter()
{
  REStateMachineComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    unint64_t v6 = 0xD000000000000023;
    unint64_t v7 = 0x800000022835F170;
    REEntityGetName();
    v4._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!REStateMachineComponentGetCurrentStateName())
  {
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v6);
    uint64_t v1 = v6;
    uint64_t v2 = v7;
    swift_release();
    if (v2)
    {
      if (v1)
      {
        swift_retain();
        REStateMachineAssetGetInitialStateName();
        uint64_t v3 = String.init(cString:)();
        swift_release();
        outlined consume of StateMachineComponent?(v1, v2);
        return v3;
      }
    }
    else
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD000000000000023;
      unint64_t v7 = 0x800000022835F170;
      REEntityGetName();
      v5._countAndFlagsBits = String.init(cString:)();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    goto LABEL_11;
  }

  return String.init(cString:)();
}

uint64_t outlined consume of StateMachineComponent?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t StateMachineController.previousState.getter()
{
  return StateMachineController.previousState.getter(MEMORY[0x263F37388]);
}

uint64_t StateMachineController.currentTransition.getter()
{
  return StateMachineController.previousState.getter(MEMORY[0x263F37380]);
}

uint64_t StateMachineController.previousState.getter(uint64_t (*a1)(uint64_t, const char *))
{
  REStateMachineComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    uint64_t result = a1(ComponentByClass, "");
    if (result) {
      return String.init(cString:)();
    }
  }
  else
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    REEntityGetName();
    v4._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StateMachineController.ParametersReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  REStateMachineComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    static StateMachineUtils.convert<A>(_:)(a3);
    String.utf8CString.getter();
    int HasBoundParameterAtName = REStateMachineComponentHasBoundParameterAtName();
    swift_release();
    if (HasBoundParameterAtName)
    {
      String.utf8CString.getter();
      REStateMachineComponentGetBoundParameterIndexAtName();
      swift_release();
      REStateMachineComponentGetBoundParameterBindTargetAtIndex();
      unint64_t v11 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v11, v12, (uint64_t)&v17);
      swift_bridgeObjectRelease();
      long long v13 = v17;
      char v14 = v18;
    }
    else
    {
      long long v13 = 0uLL;
      char v14 = -1;
    }
    long long v17 = v13;
    char v18 = v14;
    StateMachineParameter.init(name:bindTarget:)(a1, a2, (uint64_t *)&v17, a4, a5);
    return swift_bridgeObjectRetain();
  }
  else
  {
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    REEntityGetName();
    v16._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t StateMachineController.ParametersReference.subscript.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for StateMachineParameter();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  char v14 = (uint64_t *)((char *)&v22 - v13);
  (*(void (**)(char *, void *, uint64_t, __n128))(v11 + 16))((char *)&v22 - v13, a1, v10, v12);
  BOOL v15 = *v14 == a2 && v14[1] == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v23 = *(void (**)(void *, uint64_t))(v11 + 8);
  v23(v14, v10);
  if (a4 != a5)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  REStateMachineComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    static StateMachineUtils.convert<A>(_:)(a5);
    int v16 = *((unsigned __int8 *)a1 + 32);
    if (v16 == 255)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentRemoveBoundParameterAtName();
      char v18 = a1;
      uint64_t v19 = v10;
    }
    else
    {
      uint64_t v22 = v10;
      long long v24 = *((_OWORD *)a1 + 1);
      char v25 = v16;
      specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v24, 1);
      String.utf8CString.getter();
      int HasBoundParameterAtName = REStateMachineComponentHasBoundParameterAtName();
      swift_release();
      if (!HasBoundParameterAtName)
      {
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REStateMachineComponentAddBoundParameter();
        v23(a1, v22);
        swift_release();
        return swift_release();
      }
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentGetBoundParameterIndexAtName();
      swift_release();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REStateMachineComponentSetBoundParameterBindTargetAtIndex();
      char v18 = a1;
      uint64_t v19 = v22;
    }
    v23(v18, v19);
    return swift_release();
  }
LABEL_17:
  *(void *)&long long v24 = 0;
  *((void *)&v24 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  *(void *)&long long v24 = 0xD000000000000023;
  *((void *)&v24 + 1) = 0x800000022835F170;
  REEntityGetName();
  v21._countAndFlagsBits = String.init(cString:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t StateMachineController.ParameterValuesReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = type metadata accessor for StateMachineParameter();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v14 = (char *)&v17 - v13;
  uint64_t v15 = *v5;
  StateMachineController.ParametersReference.subscript.getter(a1, a2, a3, a4, (uint64_t)&v17 - v13);
  StateMachineParameter.value(entity:)(v15, v11, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t StateMachineController.ParameterValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  specialized StateMachineController.ParameterValuesReference.subscript.setter(a1, a2, a3, a4, a5);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8);

  return v7(a1, a5);
}

void (*StateMachineController.ParameterValuesReference.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v13 = malloc(0x48uLL);
  *a1 = v13;
  v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  void *v13 = a2;
  v13[1] = a3;
  uint64_t v14 = *(void *)(a5 - 8);
  v13[6] = v14;
  size_t v15 = *(void *)(v14 + 64);
  v13[7] = malloc(v15);
  int v16 = malloc(v15);
  v13[8] = v16;
  StateMachineController.ParameterValuesReference.subscript.getter(a2, a3, a4, a5, (uint64_t)v16);
  return StateMachineController.ParameterValuesReference.subscript.modify;
}

void StateMachineController.ParameterValuesReference.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[7];
  Swift::String v4 = (void *)(*a1)[8];
  uint64_t v5 = (*a1)[6];
  uint64_t v6 = (*a1)[3];
  uint64_t v8 = (*a1)[1];
  uint64_t v7 = (*a1)[2];
  uint64_t v9 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))((*a1)[7], v4, v6);
    swift_bridgeObjectRetain();
    specialized StateMachineController.ParameterValuesReference.subscript.setter((uint64_t)v3, v9, v8, v7, v6);
    uint64_t v10 = *(void (**)(void *, uint64_t))(v5 + 8);
    v10(v3, v6);
    v10(v4, v6);
  }
  else
  {
    swift_bridgeObjectRetain();
    specialized StateMachineController.ParameterValuesReference.subscript.setter((uint64_t)v4, v9, v8, v7, v6);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t StateMachineController.ParameterBindTargetsReference.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for StateMachineParameter();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  StateMachineController.ParametersReference.subscript.getter(a1, a2, a3, a4, (uint64_t)&v17 - v12);
  uint64_t v14 = *((void *)v13 + 2);
  uint64_t v15 = *((void *)v13 + 3);
  LOBYTE(a4) = v13[32];
  outlined copy of BindTarget?(v14, v15, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(void *)a5 = v14;
  *(void *)(a5 + 8) = v15;
  *(unsigned char *)(a5 + 16) = a4;
  return result;
}

uint64_t StateMachineController.ParameterBindTargetsReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v20[1] = a6;
  uint64_t v21 = type metadata accessor for StateMachineParameter();
  uint64_t v11 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v13 = (void *)((char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v14);
  int v16 = (char *)v20 - v15;
  uint64_t v17 = *(void *)(a1 + 8);
  v20[0] = *(void *)a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 16);
  StateMachineController.ParametersReference.subscript.getter(a2, a3, a4, a5, (uint64_t)v20 - v15);
  outlined consume of BindTarget?(*((void *)v16 + 2), *((void *)v16 + 3), v16[32]);
  *((void *)v16 + 2) = v20[0];
  *((void *)v16 + 3) = v17;
  v16[32] = a1;
  uint64_t v18 = v21;
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v13, v16, v21);
  StateMachineController.ParametersReference.subscript.setter(v13, a2, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v18);
}

void (*StateMachineController.ParameterBindTargetsReference.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v13 = malloc(0x48uLL);
  *a1 = v13;
  v13[7] = a6;
  v13[8] = v6;
  v13[5] = a4;
  v13[6] = a5;
  v13[3] = a2;
  v13[4] = a3;
  StateMachineController.ParameterBindTargetsReference.subscript.getter(a2, a3, a4, a5, (uint64_t)v13);
  return StateMachineController.ParameterBindTargetsReference.subscript.modify;
}

void StateMachineController.ParameterBindTargetsReference.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  unsigned __int8 v5 = *((unsigned char *)*a1 + 16);
  uint64_t v6 = (*a1)[7];
  uint64_t v8 = (*a1)[5];
  uint64_t v7 = (*a1)[6];
  uint64_t v10 = (*a1)[3];
  uint64_t v9 = (*a1)[4];
  v11[0] = v4;
  v11[1] = v3;
  unsigned __int8 v12 = v5;
  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v3, v5);
    StateMachineController.ParameterBindTargetsReference.subscript.setter((uint64_t)v11, v10, v9, v8, v7, v6);
    outlined consume of BindTarget?(*v2, v2[1], *((unsigned char *)v2 + 16));
  }
  else
  {
    swift_bridgeObjectRetain();
    StateMachineController.ParameterBindTargetsReference.subscript.setter((uint64_t)v11, v10, v9, v8, v7, v6);
  }

  free(v2);
}

uint64_t (*StateMachineController.values.modify(void *a1))()
{
  uint64_t v3 = *(void *)(v1 + 16);
  *a1 = v3;
  a1[1] = v3;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t StateMachineController.bindTargets.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_retain();
}

uint64_t StateMachineController.values.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = swift_release();
  if (v2 != v3) {
    __break(1u);
  }
  return result;
}

uint64_t StateMachineController.deinit()
{
  swift_release();
  return v0;
}

uint64_t StateMachineController.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized StateMachineController.ParameterValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for StateMachineParameter();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = *v5;
  StateMachineController.ParametersReference.subscript.getter(a2, a3, a4, a5, (uint64_t)&v17 - v13);
  swift_bridgeObjectRelease();
  StateMachineParameter.setValue(entity:newValue:)(v15, a1, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_22827DE50@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 16);
  return swift_retain();
}

void *keypath_setTm(void *result, uint64_t a2)
{
  if (*result != *(void *)(*(void *)a2 + 16)) {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for StateMachineController()
{
  return self;
}

uint64_t method lookup function for StateMachineController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for StateMachineController);
}

uint64_t dispatch thunk of StateMachineController.currentState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of StateMachineController.previousState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of StateMachineController.currentTransition.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of StateMachineController.values.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of StateMachineController.values.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of StateMachineController.values.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of StateMachineController.bindTargets.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

ValueMetadata *type metadata accessor for StateMachineController.ParameterValuesReference()
{
  return &type metadata for StateMachineController.ParameterValuesReference;
}

ValueMetadata *type metadata accessor for StateMachineController.ParameterBindTargetsReference()
{
  return &type metadata for StateMachineController.ParameterBindTargetsReference;
}

ValueMetadata *type metadata accessor for StateMachineController.ParametersReference()
{
  return &type metadata for StateMachineController.ParametersReference;
}

RealityKit::REAngleF __swiftcall REAngleF.init(radians:)(RealityKit::REAngleF radians)
{
  v1->radians = radians.radians;
  return radians;
}

RealityKit::REAngleF __swiftcall REAngleF.init(degrees:)(Swift::Float degrees)
{
  result.radians = (float)(degrees * 3.1416) / 180.0;
  *uint64_t v1 = result.radians;
  return result;
}

float REAngleF.radians.getter()
{
  return *(float *)v0;
}

void REAngleF.radians.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*REAngleF.radians.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float REAngleF.degrees.getter()
{
  return (float)(*v0 * 180.0) / 3.1416;
}

float REAngleF.degrees.setter(float a1)
{
  float result = (float)(a1 * 3.1416) / 180.0;
  *uint64_t v1 = result;
  return result;
}

float (*REAngleF.degrees.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = (float)(*v1 * 180.0) / 3.1416;
  return REAngleF.degrees.modify;
}

float REAngleF.degrees.modify(uint64_t a1)
{
  float result = (float)(*(float *)(a1 + 8) * 3.1416) / 180.0;
  **(float **)a1 = result;
  return result;
}

void static RotationOrder.default.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static RotationOrder.sceneKit.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

RealityKit::RotationOrder_optional __swiftcall RotationOrder.init(rawValue:)(RealityKit::RotationOrder_optional rawValue)
{
  RealityKit::RotationOrder value = rawValue.value;
  if (rawValue.value >= RealityKit_RotationOrder_unknownDefault) {
    RealityKit::RotationOrder value = RealityKit_RotationOrder_unknownDefault;
  }
  *uint64_t v1 = value;
  return rawValue;
}

uint64_t RotationOrder.rawValue.getter()
{
  return *v0;
}

RealityKit::RotationOrder_optional protocol witness for RawRepresentable.init(rawValue:) in conformance RotationOrder(Swift::UInt8 *a1)
{
  return RotationOrder.init(rawValue:)(*a1);
}

double simd_quatf.init(eulerAngles:order:)()
{
  REConvertIntrinsicEulersToMatrices3x3();
  v1.columns[1] = 0u;
  v1.columns[2] = 0u;
  v1.columns[0] = 0u;
  return simd_quaternion(v1);
}

double simd_quaternion(simd_float3x3 a1)
{
  float v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    float v8 = sqrtf(v1 + 1.0);
    float32x2_t v9 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8));
    float32x2_t v10 = vmul_f32(v9, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v9));
    float32x2_t v20 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v10, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v10)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    float v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      float v21 = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      *(float *)&unsigned int v22 = v21 + v21;
      float32x2_t v23 = vrecpe_f32((float32x2_t)v22);
      float32x2_t v24 = vmul_f32(v23, vrecps_f32((float32x2_t)v22, v23));
      v25.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)v22, v24)).u32[0];
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v24.i32[1] = v22;
      v25.i32[1] = 0.25;
      float32x2_t v20 = vmul_f32(v24, v25);
    }
    else
    {
      float32x2_t v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      float32x2_t v5 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      float32x2_t v6 = vmul_f32(v5, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v5));
      float32x2_t v20 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(v6, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v6)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    float32x2_t v12 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, v11);
    v11.i32[0] = 2.0;
    v11.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), v11).u32[0];
    v11.i32[1] = v12.i32[1];
    float32x2_t v13 = vrecpe_f32((float32x2_t)v11.u32[0]);
    float32x2_t v14 = vmul_f32(v13, vrecps_f32((float32x2_t)v11.u32[0], v13));
    unsigned __int32 v15 = vmul_f32(v14, vrecps_f32((float32x2_t)v11.u32[0], v14)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v15;
    float32x2_t v20 = vmul_f32(v11, _D5);
  }
  return *(double *)&v20;
}

unint64_t lazy protocol witness table accessor for type RotationOrder and conformance RotationOrder()
{
  unint64_t result = lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder;
  if (!lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOrder and conformance RotationOrder);
  }
  return result;
}

float sub_22827E444@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float result = (float)(*a1 * 180.0) / 3.1416;
  *a2 = result;
  return result;
}

float sub_22827E46C(float *a1, float *a2)
{
  float result = (float)(*a1 * 3.1416) / 180.0;
  *a2 = result;
  return result;
}

ValueMetadata *type metadata accessor for REAngleF()
{
  return &type metadata for REAngleF;
}

unsigned char *storeEnumTagSinglePayload for RotationOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    char *result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22827E570);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RotationOrder()
{
  return &type metadata for RotationOrder;
}

uint64_t __RKVisibilityHideScaleAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityHideScaleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKVisibilityHideScaleUpAnimation.deinit()
{
  return v0;
}

uint64_t type metadata accessor for __RKVisibilityHideScaleAnimation()
{
  return self;
}

uint64_t type metadata accessor for __RKVisibilityHideScaleUpAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 128, 0, MEMORY[0x263F8EE78]);
      float32x2_t v13 = &outlined read-only object #1 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 83, 0, MEMORY[0x263F8EE78]);
      float32x2_t v13 = &outlined read-only object #2 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 127, 0, MEMORY[0x263F8EE78]);
    float32x2_t v13 = &outlined read-only object #0 of static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  int v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  float32x2_t v20 = &rawValue[6 * v18];
  void v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 120, 0, MEMORY[0x263F8EE78]);
      float32x2_t v13 = &outlined read-only object #1 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 96, 0, MEMORY[0x263F8EE78]);
      float32x2_t v13 = &outlined read-only object #2 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 53, 0, MEMORY[0x263F8EE78]);
    float32x2_t v13 = &outlined read-only object #0 of static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  int v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  float32x2_t v20 = &rawValue[6 * v18];
  void v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Entity.pins.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t EntityGeometricPins.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  REPinComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result
    && (String.utf8CString.getter(), PinByName = REPinComponentGetPinByName(), uint64_t result = swift_release(), PinByName))
  {
    REPinGetOffsetPose();
    long long v13 = v8;
    long long v14 = v9;
    if (REPinIsSkeletalJointPin())
    {
      REPinGetSkeletalJointName();
      uint64_t v10 = String.init(cString:)();
      uint64_t v12 = v11;
      RERelease();
      swift_weakInit();
      long long v20 = v13;
      long long v21 = v14;
      swift_weakAssign();
      uint64_t v16 = a1;
      uint64_t v17 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v18 = v10;
      uint64_t v19 = v12;
    }
    else
    {
      RERelease();
      swift_weakInit();
      long long v20 = v13;
      long long v21 = v14;
      swift_weakAssign();
      uint64_t v16 = a1;
      uint64_t v17 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    return outlined init with take of GeometricPin((uint64_t)v15, (uint64_t)a3);
  }
  else
  {
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t EntityGeometricPins.set(named:position:orientation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>, float32x4_t a5@<Q1>)
{
  float32x4_t v8 = vmulq_f32(a5, a5);
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v9.f32);
  v8.f32[0] = fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v8.f32)) + -1.0);
  v9.i32[0] = 981668463;
  int8x16_t v11 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v8, v9), 0), *(int8x16_t *)&zmmword_22830EC90[48], (int8x16_t)a5);
  REPoseIdentity();
  String.utf8CString.getter();
  REPinCreateExt();
  swift_release();
  REPinComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REPinComponentAddPin();
  RERelease();
  swift_weakInit();
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(__n128 *)(a3 + 48) = a4;
  *(int8x16_t *)(a3 + 64) = v11;
  swift_weakAssign();
  *(void *)(a3 + 8) = a1;
  *(void *)(a3 + 16) = a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  return result;
}

uint64_t EntityGeometricPins.set(named:position:orientation:relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>, float32x4_t a6@<Q1>)
{
  float32x4_t v7 = a6;
  a6.i32[0] = a5.n128_i32[2];
  __n128 v11 = transformPose(_:from:to:)(a3, *v6, a5.n128_f64[0], *(double *)a6.i64, v7);
  v11.n128_u32[2] = v12;
  return EntityGeometricPins.set(named:position:orientation:)(a1, a2, a4, v11, v13);
}

uint64_t EntityGeometricPins.set(named:skeletalJointName:position:orientation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>, float32x4_t a7@<Q1>)
{
  float32x4_t v12 = vmulq_f32(a7, a7);
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL);
  *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.f32);
  v12.f32[0] = fabsf(sqrtf(vaddv_f32(*(float32x2_t *)v12.f32)) + -1.0);
  v13.i32[0] = 981668463;
  int8x16_t v15 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v12, v13), 0), *(int8x16_t *)&zmmword_22830EC90[48], (int8x16_t)a7);
  REPoseIdentity();
  String.utf8CString.getter();
  String.utf8CString.getter();
  REPinCreateExt();
  swift_release();
  swift_release();
  REPinComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REPinComponentAddPin();
  RERelease();
  swift_weakInit();
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(__n128 *)(a5 + 48) = a6;
  *(int8x16_t *)(a5 + 64) = v15;
  swift_weakAssign();
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 32) = a4;
  return result;
}

Swift::Void __swiftcall EntityGeometricPins.remove(named:)(Swift::String named)
{
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    String.utf8CString.getter();
    REPinComponentRemovePin();
    swift_release();
  }
}

uint64_t EntityGeometricPins.count.getter()
{
  REPinComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    return REPinComponentGetPinCount();
  }
  return result;
}

BOOL EntityGeometricPins.isEmpty.getter()
{
  return !REEntityGetComponentByClass() || REPinComponentGetPinCount() == 0;
}

void EntityGeometricPins.Iterator.next()(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  *(void *)(v1 + 16) = v4;
  if (v4 >= *(void *)(v1 + 8))
  {
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return;
  }
  REPinComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_11;
  }
  REPinComponentGetPinNameAtIndex();
  uint64_t v5 = String.init(cString:)();
  uint64_t v7 = v6;
  REPinComponentGetPinOffsetPoseAtIndex();
  long long v13 = v8;
  long long v14 = v9;
  if (REPinComponentIsSkeletalJointPinAtIndex())
  {
    REPinComponentGetSkeletalJointNameAtIndex();
    uint64_t v10 = String.init(cString:)();
    uint64_t v12 = v11;
    swift_weakInit();
    long long v20 = v13;
    long long v21 = v14;
    swift_weakAssign();
    uint64_t v16 = v5;
    uint64_t v17 = v7;
    swift_bridgeObjectRelease();
    uint64_t v18 = v10;
    uint64_t v19 = v12;
  }
  else
  {
    swift_weakInit();
    long long v20 = v13;
    long long v21 = v14;
    swift_weakAssign();
    uint64_t v16 = v5;
    uint64_t v17 = v7;
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  outlined init with take of GeometricPin((uint64_t)v15, (uint64_t)a1);
}

uint64_t EntityGeometricPins.makeIterator()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain();
  REPinComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result) {
    uint64_t result = REPinComponentGetPinCount();
  }
  *a1 = v3;
  a1[1] = result;
  a1[2] = -1;
  return result;
}

uint64_t EntityGeometricPins.entity.getter()
{
  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator;
  if (!lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityGeometricPins.Iterator and conformance EntityGeometricPins.Iterator);
  }
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance EntityGeometricPins@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  swift_retain();
  REPinComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    uint64_t PinCount = REPinComponentGetPinCount();
  }
  else {
    uint64_t PinCount = 0;
  }
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = PinCount;
  a1[2] = -1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance EntityGeometricPins()
{
  uint64_t v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_release();
  return v0;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance EntityGeometricPins(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

ValueMetadata *type metadata accessor for EntityGeometricPins()
{
  return &type metadata for EntityGeometricPins;
}

ValueMetadata *type metadata accessor for EntityGeometricPins.Iterator()
{
  return &type metadata for EntityGeometricPins.Iterator;
}

void static PhysicsSimulationComponent.CollisionOptions.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t PhysicsSimulationComponent.CollisionOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static PhysicsSimulationComponent.CollisionOptions.reportKinematicVsStatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PhysicsSimulationComponent.CollisionOptions.reportKinematicVsKinematic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static PhysicsSimulationComponent.CollisionOptions.all.getter@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static PhysicsSimulationComponent.CollisionOptions.all;
  return result;
}

uint64_t PhysicsSimulationComponent.CollisionOptions.rawValue.getter()
{
  return *v0;
}

RealityFoundation::PhysicsSimulationComponent::SolverIterations __swiftcall PhysicsSimulationComponent.SolverIterations.init(positionIterations:velocityIterations:)(Swift::Int positionIterations, Swift::Int velocityIterations)
{
  *uint64_t v2 = positionIterations;
  v2[1] = velocityIterations;
  result.velocityIterations = velocityIterations;
  result.positionIterations = positionIterations;
  return result;
}

uint64_t PhysicsSimulationComponent.SolverIterations.positionIterations.getter()
{
  return *(void *)v0;
}

uint64_t PhysicsSimulationComponent.SolverIterations.positionIterations.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.SolverIterations.positionIterations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsSimulationComponent.SolverIterations.velocityIterations.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t PhysicsSimulationComponent.SolverIterations.velocityIterations.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.SolverIterations.velocityIterations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static PhysicsSimulationComponent.SolverIterations.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

__n128 PhysicsSimulationComponent.solverIterations.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 PhysicsSimulationComponent.solverIterations.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*PhysicsSimulationComponent.solverIterations.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PhysicsSimulationComponent.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 6;
  *(_OWORD *)a1 = xmmword_228348C60;
  *(_OWORD *)(a1 + 16) = xmmword_228348C70;
  *(unsigned char *)(a1 + 32) = byte_26DC86D58;
  *(void *)(a1 + 40) = 0;
  return result;
}

id PhysicsSimulationComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  GravityOverride = (long long *)REPhysicsSimulationComponentGetGravityOverride();
  if (GravityOverride)
  {
    long long v3 = *GravityOverride;
  }
  else
  {
    type metadata accessor for __ServiceLocator();
    uint64_t v4 = static __ServiceLocator.shared.getter();
    swift_beginAccess();
    uint64_t v5 = *(void *)(v4 + 16);
    swift_release();
    id result = (id)MEMORY[0x22A6922C0](v5);
    if (!result)
    {
      __break(1u);
      return result;
    }
    REPhysicsSimulationServiceGetDefaultGravity();
  }
  long long v11 = v3;
  char KinematicVsStaticFlag = REPhysicsSimulationComponentGetKinematicVsStaticFlag();
  if (REPhysicsSimulationComponentGetKinematicVsKinematicFlag()) {
    KinematicVsStaticFlag |= 2u;
  }
  REPhysicsSimulationComponentGetSolverIterations();
  uint64_t v9 = v8;
  id result = (id)REPhysicsSimulationComponentGetParentTimebase();
  *(void *)&long long v10 = v9;
  *((void *)&v10 + 1) = HIDWORD(v9);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 32) = KinematicVsStaticFlag;
  *(void *)(a1 + 40) = result;
  return result;
}

__n128 PhysicsSimulationComponent.gravity.getter()
{
  return v0[1];
}

void PhysicsSimulationComponent.gravity.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*PhysicsSimulationComponent.gravity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsSimulationComponent.collisionOptions.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

unsigned char *PhysicsSimulationComponent.collisionOptions.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 32) = *result;
  return result;
}

uint64_t (*PhysicsSimulationComponent.collisionOptions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsSimulationComponent.clock.getter()
{
  v5[1] = *(CMTimebaseRef *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1) {
    goto LABEL_8;
  }
  if (*(void *)(*(void *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    if (RETimebaseServiceCreateEngineSourceTimebase()) {
      goto LABEL_7;
    }
  }
  else
  {
    swift_retain();
  }
  v5[0] = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  long long v3 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v2, v3, v5);

  if (v5[0])
  {
LABEL_7:
    swift_release();
LABEL_8:
    id v4 = v1;
    return;
  }
  __break(1u);
}

void key path getter for PhysicsSimulationComponent.clock : PhysicsSimulationComponent(uint64_t a1@<X0>, CMTimebaseRef *a2@<X8>)
{
  timebaseOut[1] = *(CMTimebaseRef *)MEMORY[0x263EF8340];
  long long v3 = *(OpaqueCMTimebase **)(a1 + 40);
  if (!v3)
  {
    if (*(void *)(*(void *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
    {
      swift_retain();
      uint64_t EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
      if (EngineSourceTimebase)
      {
        CMTimebaseRef v4 = (CMTimebaseRef)EngineSourceTimebase;
LABEL_8:
        swift_release();
        long long v3 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      swift_retain();
    }
    timebaseOut[0] = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v7 = CMClockGetHostTimeClock();
    CMTimebaseCreateWithSourceClock(v6, v7, timebaseOut);

    CMTimebaseRef v4 = timebaseOut[0];
    if (!timebaseOut[0])
    {
      __break(1u);
      return;
    }
    goto LABEL_8;
  }
  CMTimebaseRef v4 = v3;
LABEL_9:
  *a2 = v4;

  uint64_t v8 = v3;
}

void PhysicsSimulationComponent.clock.setter(const void *a1)
{
  v6[1] = *(CMTimebaseRef *)MEMORY[0x263EF8340];
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CMClockGetTypeID())
  {
    v6[0] = 0;
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    type metadata accessor for CMClockRef(0);
    swift_unknownObjectRetain();
    CMTimebaseRef v4 = (OpaqueCMClock *)swift_dynamicCastUnknownClassUnconditional();
    CMTimebaseCreateWithSourceClock(v3, v4, v6);

    swift_unknownObjectRelease();
    CMTimebaseRef v5 = v6[0];
  }
  else
  {
    type metadata accessor for CMTimebaseRef(0);
    CMTimebaseRef v5 = (CMTimebaseRef)swift_dynamicCastUnknownClassUnconditional();
  }

  *(void *)(v1 + 40) = v5;
}

void PhysicsSimulationComponent.clock.modify(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  CFAllocatorRef v3 = *(void **)(v1 + 40);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 40);
LABEL_9:
    *(void *)a1 = v4;
    id v8 = v3;
    return;
  }
  if (*(void *)(*(void *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    uint64_t EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
    if (EngineSourceTimebase)
    {
      uint64_t v4 = EngineSourceTimebase;
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
  }
  *(void *)(a1 + 8) = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v7 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v6, v7, (CMTimebaseRef *)(a1 + 8));

  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    goto LABEL_8;
  }
  __break(1u);
}

void PhysicsSimulationComponent.clock.modify(const void **a1, char a2)
{
  if (a2)
  {
    CFTypeID v2 = (const void *)swift_unknownObjectRetain();
    PhysicsSimulationComponent.clock.setter(v2);
    swift_unknownObjectRelease();
  }
  else
  {
    PhysicsSimulationComponent.clock.setter(*a1);
  }
}

id static PhysicsSimulationComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  GravityOverride = (long long *)REPhysicsSimulationComponentGetGravityOverride();
  if (GravityOverride)
  {
    long long v3 = *GravityOverride;
  }
  else
  {
    uint64_t v4 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    id result = (id)MEMORY[0x22A6922C0](*(void *)(v4 + 16));
    if (!result)
    {
      __break(1u);
      return result;
    }
    REPhysicsSimulationServiceGetDefaultGravity();
  }
  long long v10 = v3;
  char KinematicVsStaticFlag = REPhysicsSimulationComponentGetKinematicVsStaticFlag();
  if (REPhysicsSimulationComponentGetKinematicVsKinematicFlag()) {
    KinematicVsStaticFlag |= 2u;
  }
  REPhysicsSimulationComponentGetSolverIterations();
  uint64_t v8 = v7;
  id result = (id)REPhysicsSimulationComponentGetParentTimebase();
  *(void *)&long long v9 = v8;
  *((void *)&v9 + 1) = HIDWORD(v8);
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = KinematicVsStaticFlag;
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t PhysicsSimulationComponent.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

void static PhysicsSimulationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4005;
}

id protocol witness for static Component.__fromCore(_:) in conformance PhysicsSimulationComponent@<X0>(uint64_t a1@<X8>)
{
  return PhysicsSimulationComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsSimulationComponent(_DWORD *a1@<X8>)
{
  *a1 = 4005;
}

void PhysicsSimulationComponent.customMirror.getter()
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *((unsigned char *)v0 + 32);
  long long v9 = (OpaqueCMTimebase *)*((void *)v0 + 5);
  long long v10 = *v0;
  long long v19 = v0[1];
  long long v21 = v10;
  long long v22 = v19;
  char v23 = v8;
  long long v24 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E360;
  *(void *)(v11 + 32) = 0x79746976617267;
  *(void *)(v11 + 40) = 0xE700000000000000;
  *(void *)(v11 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t v12 = swift_allocObject();
  *(void *)(v11 + 48) = v12;
  *(_OWORD *)(v12 + 16) = v19;
  *(void *)(v11 + 80) = 0xD000000000000010;
  *(void *)(v11 + 88) = 0x800000022835F2A0;
  *(unsigned char *)(v11 + 96) = v8;
  *(void *)(v11 + 120) = &type metadata for PhysicsSimulationComponent.CollisionOptions;
  *(void *)(v11 + 128) = 0x6B636F6C63;
  *(void *)(v11 + 136) = 0xE500000000000000;
  if (v9)
  {
    CMTimebaseRef v13 = v9;
LABEL_9:
    *(void *)(v11 + 168) = swift_getObjectType();
    *(void *)(v11 + 144) = v13;
    uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
    uint64_t v18 = v9;
    Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
    return;
  }
  if (*(void *)(*(void *)(specialized static __ServiceLocator.shared.getter() + 160) + 16))
  {
    swift_retain();
    uint64_t EngineSourceTimebase = RETimebaseServiceCreateEngineSourceTimebase();
    if (EngineSourceTimebase)
    {
      CMTimebaseRef v13 = (CMTimebaseRef)EngineSourceTimebase;
LABEL_8:
      swift_release();
      goto LABEL_9;
    }
  }
  else
  {
    swift_retain();
  }
  CMTimebaseRef timebaseOut = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  uint64_t v16 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v15, v16, &timebaseOut);

  CMTimebaseRef v13 = timebaseOut;
  if (timebaseOut) {
    goto LABEL_8;
  }
  __break(1u);
}

BOOL specialized static PhysicsSimulationComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = 0;
  long long v5 = *(_OWORD *)(a1 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  long long v8 = *(_OWORD *)(a2 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  long long v10 = *(void **)(a2 + 40);
  while (1)
  {
    long long v18 = v5;
    float v12 = *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    long long v19 = v8;
    float v13 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    BOOL v11 = v12 == v13;
    if (v4 == 2) {
      break;
    }
    while (1)
    {
      ++v4;
      if (v11) {
        break;
      }
      BOOL v11 = 0;
      BOOL result = 0;
      if (v4 == 2) {
        return result;
      }
    }
  }
  if (v12 != v13 || v6 != v9) {
    return 0;
  }
  if (v7)
  {
    if (v10)
    {
      type metadata accessor for CMTimebaseRef(0);
      lazy protocol witness table accessor for type CMTimebaseRef and conformance CMTimebaseRef();
      id v15 = v10;
      id v16 = v7;
      char v17 = static _CFObject.== infix(_:_:)();

      if (v17) {
        return 1;
      }
    }
    return 0;
  }
  return !v10;
}

uint64_t specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!MEMORY[0x22A6922C0](*(void *)(v0 + 16))) {
    return 0;
  }
  RootSimulationEntitdouble y = REPhysicsSimulationServiceGetRootSimulationEntity();
  if (!RootSimulationEntity) {
    return 0;
  }
  uint64_t v2 = RootSimulationEntity;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(v6 + 232))();
      uint64_t v7 = *(void *)(v4 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v4 + 16) = v2;
      MEMORY[0x22A68E750](v2, v4);
      swift_release();
      return v4;
    }
    return makeEntity(for:)(v2);
  }
  __break(1u);
  return result;
}

uint64_t sub_228280244()
{
  return MEMORY[0x270FA0238](v0, 32, 15);
}

unint64_t lazy protocol witness table accessor for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSimulationComponent.CollisionOptions and conformance PhysicsSimulationComponent.CollisionOptions);
  }
  return result;
}

void sub_2282803B4(uint64_t a1@<X0>, CMTimebaseRef *a2@<X8>)
{
  key path getter for PhysicsSimulationComponent.clock : PhysicsSimulationComponent(a1, a2);
}

void sub_22828040C()
{
  uint64_t v0 = (const void *)swift_unknownObjectRetain();
  PhysicsSimulationComponent.clock.setter(v0);
}

void destroy for PhysicsSimulationComponent(uint64_t a1)
{
}

uint64_t initializeWithCopy for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  long long v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for PhysicsSimulationComponent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsSimulationComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsSimulationComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent()
{
  return &type metadata for PhysicsSimulationComponent;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent.CollisionOptions()
{
  return &type metadata for PhysicsSimulationComponent.CollisionOptions;
}

ValueMetadata *type metadata accessor for PhysicsSimulationComponent.SolverIterations()
{
  return &type metadata for PhysicsSimulationComponent.SolverIterations;
}

unint64_t lazy protocol witness table accessor for type CMTimebaseRef and conformance CMTimebaseRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef;
  if (!lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef)
  {
    type metadata accessor for CMTimebaseRef(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef);
  }
  return result;
}

uint64_t USDDecodableContext.identifierForScene(uskNodePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v7 - 8);
  int v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v30 = a3;
    uint64_t v31 = 0;
    uint64_t v35 = a1;
    uint64_t v36 = a2;
    uint64_t v33 = 91;
    unint64_t v34 = 0xE100000000000000;
    unint64_t v32 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x263F8D310];
    uint64_t v35 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v36 = v11;
    uint64_t v33 = 93;
    unint64_t v34 = 0xE100000000000000;
    uint64_t v31 = 0;
    unint64_t v32 = 0xE000000000000000;
    uint64_t v12 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v3 + 32);
    if (*(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v14), (v17 & 1) != 0))
    {
      unint64_t v18 = v16;
      uint64_t v19 = *(void *)(v15 + 56);
      uint64_t v20 = type metadata accessor for UUID();
      uint64_t v21 = *(void *)(v20 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v9, v19 + *(void *)(v21 + 72) * v18, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v20);
    }
    else
    {
      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for UUID();
    uint64_t v22 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v9, 1, v20) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for UUID?);
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_22830EC60;
      *(void *)(v23 + 56) = v10;
      *(void *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v23 + 32) = a1;
      *(void *)(v23 + 40) = a2;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      long long v24 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v30, 1, 1, v20);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v28 = v30;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v30, v9, v20);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v28, 0, 1, v20);
    }
  }
  else
  {
    uint64_t v26 = type metadata accessor for UUID();
    long long v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    return v27(a3, 1, 1, v26);
  }
}

uint64_t USDDecodableContext.identifierForPath(uskNodePath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v34 - v13;
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v34 - v15;
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t v35 = a3;
  uint64_t v36 = 0;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v38 = 91;
  unint64_t v39 = 0xE100000000000000;
  unint64_t v37 = 0xE000000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v41 = v17;
  uint64_t v38 = 93;
  unint64_t v39 = 0xE100000000000000;
  uint64_t v36 = 0;
  unint64_t v37 = 0xE000000000000000;
  uint64_t v18 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v4 + 24);
  if (!*(void *)(v21 + 16) || (unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    a3 = v35;
    goto LABEL_10;
  }
  long long v24 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v25, v26, *(void *)(v4 + 16), v21);
  swift_bridgeObjectRelease();
  a3 = v35;
  if (!v27)
  {
LABEL_10:
    uint64_t v33 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a3, 1, 1, v33);
  }
  Entity.__interactionIdentifier.getter((uint64_t)v16);
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v16, 1, v28);
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  if (v31 == 1)
  {
    UUID.init()();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v14, 0, 1, v28);
    Entity.__interactionIdentifier.setter((uint64_t)v14);
  }
  Entity.__interactionIdentifier.getter((uint64_t)v11);
  uint64_t result = v30(v11, 1, v28);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(a3, v11, v28);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(a3, 0, 1, v28);
  }
  return result;
}

uint64_t __USDExportContext.pathTo(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v6)
    {
      uint64_t v7 = *(void **)(*(void *)(v4 + 56) + 8 * v5);
      id v8 = v7;
    }
    else
    {
      uint64_t v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = 0;
  }
  v10[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
  v10[0] = v7;
  outlined init with copy of Any((uint64_t)v10, (uint64_t)v11);
  outlined destroy of AnyMeshBuffer((uint64_t)v10);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  if (swift_dynamicCast()) {
    return v10[0];
  }
  else {
    return 0;
  }
}

uint64_t USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v82 = a5;
  long long v81 = a4;
  uint64_t v91 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v70 - v13;
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v70 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v70 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  char v23 = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, v91, a3, *v5);
  uint64_t v25 = v24;
  *(void *)&long long v87 = v21;
  long long v71 = v17;
  long long v73 = v14;
  long long v72 = v11;
  uint64_t v91 = v24;
  long long v75 = v23;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v25 = v91;
  }
  else
  {
    uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v27 = (uint64_t)v19;
  uint64_t v28 = v20;
  if (v26)
  {
    int v88 = a3;
    unint64_t v83 = v5;
    if (v26 >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = v83[1];
      unint64_t v89 = v25 & 0xC000000000000001;
      id v90 = v30;
      unint64_t v84 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
      uint64_t v85 = (char **)(v87 + 56);
      long long v76 = (void (**)(uint64_t, char *, uint64_t))(v87 + 32);
      uint64_t v74 = (void (**)(char *, uint64_t))(v87 + 8);
      long long v87 = xmmword_22831E350;
      long long v80 = "USD action loading";
      unint64_t v79 = (unint64_t)"named \"%s\" for node at path: %s";
      char v78 = "arReferenceByFullSchemePath";
      uint64_t v77 = v28;
      while (1)
      {
        if (v89) {
          id v36 = (id)MEMORY[0x22A689930](v29, v25);
        }
        else {
          id v36 = *(id *)(v25 + 8 * v29 + 32);
        }
        unint64_t v37 = v36;
        id v38 = objc_msgSend(v90, sel_objectAtPath_, v36);
        if (!v38) {
          goto LABEL_30;
        }
        unint64_t v39 = v38;
        self;
        uint64_t v40 = swift_dynamicCastObjCClass();

        if (!v40) {
          goto LABEL_30;
        }
        id v41 = objc_msgSend(v37, sel_stringValue);
        if (v41)
        {
          uint64_t v42 = v41;
          uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v45 = v44;

          uint64_t v96 = v43;
          uint64_t v97 = v45;
          uint64_t v86 = v45;
          uint64_t v94 = 91;
          unint64_t v95 = 0xE100000000000000;
          uint64_t v92 = 0;
          unint64_t v93 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v96 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v97 = v46;
          uint64_t v94 = 93;
          unint64_t v95 = 0xE100000000000000;
          uint64_t v92 = 0;
          unint64_t v93 = 0xE000000000000000;
          uint64_t v47 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v49 = v48;
          swift_bridgeObjectRelease();
          uint64_t v50 = (uint64_t)v83[3];
          if (*(void *)(v50 + 16) && (unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49), (v52 & 1) != 0))
          {
            uint64_t v53 = (uint64_t *)(*(void *)(v50 + 56) + 16 * v51);
            uint64_t v54 = *v53;
            unint64_t v55 = v53[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v56 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v54, v55, (uint64_t)v83[2], v50);
            swift_bridgeObjectRelease();
            if (v56)
            {
              swift_beginAccess();
              uint64_t v57 = (uint64_t)v73;
              char v58 = v85;
              uint64_t v28 = v77;
              if (static __RKEntityUUIDComponent.registration
                && REEntityGetCustomComponent()
                && RECustomComponentGetObject())
              {
                uint64_t v59 = v58;
                uint64_t v60 = (uint64_t)v71;
                UUID.init(uuid:)();
                uint64_t v14 = *v59;
                ((void (*)(uint64_t, void, uint64_t, uint64_t))*v59)(v60, 0, 1, v28);
                if ((*v84)(v60, 1, v28) == 1)
                {
                  uint64_t v57 = (uint64_t)v73;
                  goto LABEL_36;
                }
                outlined destroy of BodyTrackingComponent?(v60, &demangling cache variable for type metadata for UUID?);
              }
              else
              {
                uint64_t v14 = *v58;
                uint64_t v60 = (uint64_t)v71;
                ((void (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v71, 1, 1, v28);
LABEL_36:
                outlined destroy of BodyTrackingComponent?(v60, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                ((void (*)(uint64_t, void, uint64_t, uint64_t))v14)(v57, 0, 1, v28);
                Entity.__interactionIdentifier.setter(v57);
              }
              int v67 = v84;
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_50;
              }
              v70[1] = v56;
              int v68 = v72;
              UUID.init(uuid:)();
              ((void (*)(char *, void, uint64_t, uint64_t))v14)(v68, 0, 1, v28);
              uint64_t v63 = *v67;
              uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v63)(v68, 1, v28);
              if (result == 1) {
                goto LABEL_51;
              }
              swift_release();
              (*v76)(v27, v68, v28);
              ((void (*)(uint64_t, void, uint64_t, uint64_t))v14)(v27, 0, 1, v28);
              swift_bridgeObjectRelease();
              goto LABEL_28;
            }
            int v62 = v84;
            uint64_t v61 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v85;
          }
          else
          {
            swift_bridgeObjectRelease();
            int v62 = v84;
            uint64_t v61 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v85;
          }
          uint64_t v28 = v77;
        }
        else
        {
          int v62 = v84;
          uint64_t v61 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v85;
        }
        (*v61)(v27, 1, 1, v28);
        swift_bridgeObjectRelease();
        uint64_t v63 = *v62;
LABEL_28:
        if (v63(v27, 1, v28) != 1)
        {
          long long v66 = v75;
          (*v76)((uint64_t)v75, (char *)v27, v28);
          v81(v66);

          (*v74)(v66, v28);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v27, &demangling cache variable for type metadata for UUID?);
LABEL_30:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v64 = swift_allocObject();
        uint64_t v65 = (void *)v64;
        *(_OWORD *)(v64 + 16) = v87;
        if ((_BYTE)v88)
        {
          if (v88 == 1)
          {
            unint64_t v33 = v79 | 0x8000000000000000;
            unint64_t v31 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v31 = 0xD000000000000013;
          unint64_t v32 = &v98;
        }
        else
        {
          unint64_t v31 = 0xD000000000000014;
          unint64_t v32 = &v99;
        }
        unint64_t v33 = *(v32 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v64 + 56) = MEMORY[0x263F8D310];
        *(void *)(v64 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v65[4] = v31;
        v65[5] = v33;
        v65[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v65[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v65[9] = v37;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v34 = v37;
        uint64_t v35 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v29;
        uint64_t v25 = v91;
        if (v26 == v29) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_50:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v72, 1, 1, v28);
LABEL_51:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void __USDExportContext.InstanceMapper.addMapping(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v20 - v14;
  outlined init with copy of Any(a2, (uint64_t)v23);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
  swift_dynamicCast();
  uint64_t v16 = v22;
  outlined init with copy of UUID?(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    swift_beginAccess();
    id v17 = v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *(void *)(v3 + 16);
    *(void *)(v3 + 16) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v17, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + 16) = v21;
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
    v19(v12, v9);
    swift_endAccess();
    v19(v15, v9);
  }
}

uint64_t __USDExportContext.InstanceMapper.getMapping(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v7)
    {
      uint64_t v8 = *(void **)(*(void *)(v5 + 56) + 8 * v6);
      id v9 = v8;
    }
    else
    {
      uint64_t v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USKObjectPath?);
  a2[3] = result;
  *a2 = v8;
  return result;
}

uint64_t __USDExportContext.InstanceMapper.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __USDExportContext.InstanceMapper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t __USDExportContext.instanceMapper.getter()
{
  return swift_retain();
}

uint64_t __USDExportContext.instanceMapper.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*__USDExportContext.instanceMapper.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double __USDExportContext.init(with:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v6);
  __USDExportContext.init(with:resolver:)(v6, 0, 0, (uint64_t *)v7);
  outlined destroy of AnyMeshBuffer(a1);
  double result = *(double *)v7;
  long long v5 = v7[1];
  *a2 = v7[0];
  a2[1] = v5;
  return result;
}

double __USDExportContext.init(with:resolver:)@<D0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  type metadata accessor for __USDExportContext.InstanceMapper();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  outlined init with take of Any(a1, &v13);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKScene);
  swift_retain();
  if (swift_dynamicCast())
  {
    id v9 = v12;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    id v10 = v9;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);

    swift_release();
    *a4 = a2;
    a4[1] = a3;
    a4[2] = (uint64_t)v10;
    a4[3] = v8;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
    swift_release();
  }
  else
  {
    swift_release();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(0);
    swift_release();
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  return result;
}

uint64_t __USKNodeWrapper.erasedValue.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Any(v1, a1);
}

uint64_t __USKNodeWrapper.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  unint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v6(boxed_opaque_existential_1, a1, a2);
}

uint64_t __USDEncoder.exportContext.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  long long v5 = (void *)v1[2];
  uint64_t v4 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = (uint64_t)v5;
  a1[3] = v4;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v2);
  id v6 = v5;

  return swift_retain();
}

__n128 __USDEncoder.exportContext.setter(__n128 *a1)
{
  uint64_t v3 = a1->n128_u64[0];
  uint64_t v4 = a1->n128_i64[1];
  long long v5 = (void *)v1[2];
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*v1);
  swift_release();

  *uint64_t v1 = v3;
  v1[1] = v4;
  __n128 result = a1[1];
  *((__n128 *)v1 + 1) = result;
  return result;
}

uint64_t (*__USDEncoder.exportContext.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 __USDEncoder.init(exportContext:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t type metadata accessor for __USDExportContext.InstanceMapper()
{
  return self;
}

ValueMetadata *type metadata accessor for __USDExportContext()
{
  return &type metadata for __USDExportContext;
}

uint64_t method lookup function for __USDExportContext.InstanceMapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __USDExportContext.InstanceMapper);
}

uint64_t dispatch thunk of __USDExportContext.InstanceMapper.addMapping(from:to:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of __USDExportContext.InstanceMapper.getMapping(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

ValueMetadata *type metadata accessor for __USKSceneWrapper()
{
  return &type metadata for __USKSceneWrapper;
}

ValueMetadata *type metadata accessor for __USKNodeWrapper()
{
  return &type metadata for __USKNodeWrapper;
}

ValueMetadata *type metadata accessor for __USKObjectPathWrapper()
{
  return &type metadata for __USKObjectPathWrapper;
}

ValueMetadata *type metadata accessor for __USKNodeSpecifierTypeWrapper()
{
  return &type metadata for __USKNodeSpecifierTypeWrapper;
}

uint64_t dispatch thunk of __USDEncodablePublic.encode(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of __USDEncodablePublic.encode(to:at:sceneSpecifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t destroy for __USDExportContext(uint64_t a1)
{
  if (*(void *)a1) {
    swift_release();
  }

  return swift_release();
}

void *initializeWithCopy for __USDExportContext(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  long long v5 = (void *)a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  id v7 = v5;
  swift_retain();
  return a1;
}

void *assignWithCopy for __USDExportContext(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
LABEL_8:
  id v7 = (void *)a2[2];
  uint64_t v8 = (void *)a1[2];
  a1[2] = v7;
  id v9 = v7;

  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for __USDExportContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_release();
LABEL_8:

  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __USDEncoder()
{
  return &type metadata for __USDEncoder;
}

uint64_t specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(uint64_t a1, uint64_t a2)
{
  EntitiesArradouble y = (char *)RESceneGetEntitiesArray();
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v5);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 16);
  if (!v8)
  {
LABEL_16:
    swift_release();
    return 0;
  }
  uint64_t v9 = *(void *)(v6 + 32);
  REEntityGetName();
  if (String.init(cString:)() == a1 && v10 == a2)
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    return v9;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = 0;
    uint64_t v15 = v8 - 1;
    while (v15 != v14)
    {
      if ((unint64_t)(v14 + 1) >= *(void *)(v7 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = *(void *)(v7 + 8 * v14 + 40);
      REEntityGetName();
      if (String.init(cString:)() == a1 && v16 == a2) {
        goto LABEL_17;
      }
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      ++v14;
      if (v18) {
        goto LABEL_15;
      }
    }
    goto LABEL_16;
  }
LABEL_15:
  swift_release();
  return v9;
}

uint64_t specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = 47;
  unint64_t v56 = 0xE100000000000000;
  uint64_t v50 = &v55;
  swift_bridgeObjectRetain();
  uint64_t result = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v49, a1, a2);
  uint64_t v8 = (void *)result;
  if (*(void *)(a4 + 16)
    && (uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000), (v9 & 1) != 0))
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a4 + 56) + 16 * result);
    uint64_t v12 = *v10;
    unint64_t v11 = v10[1];
    uint64_t v55 = v12;
    unint64_t v56 = v11;
    uint64_t v53 = 12079;
    unint64_t v54 = 0xE200000000000000;
    uint64_t v51 = 47;
    unint64_t v52 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(v13, v15);
    unint64_t v17 = 0;
  }
  else
  {
    if (!v8[2])
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v18 = v8[4];
    uint64_t v19 = v8[5];
    uint64_t v20 = v8[6];
    uint64_t v21 = v8[7];
    swift_bridgeObjectRetain();
    uint64_t v22 = MEMORY[0x22A688B50](v18, v19, v20, v21);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized USDDecodableContext.sceneChildEntityWithName(childEntityName:scene:)(v22, v24);
    unint64_t v17 = 1;
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v25 = v8[2];
  if (v25 && v17 != v25)
  {
    uint64_t v48 = v8 + 4;
    unint64_t v47 = v8[2];
    while (v17 < v25)
    {
      if (!v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v17 >= v8[2]) {
        goto LABEL_39;
      }
      uint64_t v28 = v8;
      uint64_t v29 = &v48[4 * v17];
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v33 = v29[3];
      swift_bridgeObjectRetain();
      uint64_t v34 = MEMORY[0x22A688B50](v30, v31, v32, v33);
      uint64_t v36 = v35;
      swift_bridgeObjectRelease();
      uint64_t result = REEntityGetChildCount();
      if (result < 0) {
        goto LABEL_40;
      }
      uint64_t v37 = result;
      if (result)
      {
        uint64_t v38 = 0;
        while (v37 != v38)
        {
          uint64_t result = REEntityGetChild();
          if (!result) {
            goto LABEL_43;
          }
          uint64_t v39 = result;
          REEntityGetName();
          if (v34 == String.init(cString:)() && v36 == v40)
          {
            uint64_t result = swift_bridgeObjectRelease_n();
            uint64_t v16 = v39;
            goto LABEL_14;
          }
          char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = swift_bridgeObjectRelease();
          if (v41)
          {
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v16 = v39;
            goto LABEL_14;
          }
          if (v37 == ++v38) {
            goto LABEL_13;
          }
        }
        __break(1u);
        break;
      }
LABEL_13:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v16 = 0;
LABEL_14:
      ++v17;
      unint64_t v25 = v47;
      uint64_t v8 = v28;
      if (v17 == v47) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16) {
    return 0;
  }
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v42 = specialized static Entity.entityInfoType(_:)();
    if (v42)
    {
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 232))(v42, v43, v44, v45);
      uint64_t v46 = *(void *)(v27 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v46, 0);
      *(void *)(v27 + 16) = v16;
      MEMORY[0x22A68E750](v16, v27);
      swift_release();
      return v27;
    }
    return makeEntity(for:)(v16);
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, uint64_t (**a4)(char *, uint64_t, char *), void *a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v93 = a8;
  uint64_t v94 = a7;
  uint64_t v86 = a6;
  unint64_t v95 = a5;
  uint64_t v106 = a2;
  int v107 = a4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v82 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v82 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v82 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v82 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v82 - v27;
  uint64_t v29 = a1;
  uint64_t v30 = 0;
  unint64_t v31 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v29, v106, a3, v107);
  uint64_t v32 = v31;
  uint64_t v97 = v28;
  uint64_t v33 = (char *)v22;
  uint64_t v98 = v26;
  uint64_t v89 = v23;
  unint64_t v84 = v16;
  uint64_t v85 = v13;
  int v103 = a3;
  uint64_t v106 = v31;
  uint64_t v96 = v21;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v32 = v106;
  }
  else
  {
    uint64_t v34 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v35 = v95;
  if (v34)
  {
    unint64_t v83 = v19;
    if (v34 >= 1)
    {
      uint64_t v21 = v33;
      uint64_t v36 = 0;
      unint64_t v105 = v32 & 0xC000000000000001;
      int v107 = (uint64_t (**)(char *, uint64_t, char *))(v89 + 48);
      uint64_t v99 = (void (**)(void))(v89 + 32);
      int v88 = (void (**)(char *, char *, char *))(v89 + 16);
      uint64_t v87 = v89 + 8;
      long long v102 = xmmword_22831E350;
      uint64_t v92 = "USD action loading";
      unint64_t v91 = (unint64_t)"named \"%s\" for node at path: %s";
      id v90 = "arReferenceByFullSchemePath";
      uint64_t v104 = v34;
      uint64_t v100 = (void (**)(char *, uint64_t, uint64_t, char *))(v89 + 56);
      while (1)
      {
        if (v105) {
          id v42 = (id)MEMORY[0x22A689930](v36, v32);
        }
        else {
          id v42 = *(id *)(v32 + 8 * v36 + 32);
        }
        uint64_t v43 = v42;
        uint64_t v44 = (unsigned int (**)(uint64_t, uint64_t, char *))v107;
        id v45 = objc_msgSend(v35, sel_objectAtPath_, v42);
        if (!v45) {
          goto LABEL_28;
        }
        uint64_t v46 = v45;
        self;
        uint64_t v47 = swift_dynamicCastObjCClass();

        if (!v47) {
          goto LABEL_28;
        }
        id v48 = objc_msgSend(v43, sel_stringValue);
        if (v48)
        {
          uint64_t v49 = v48;
          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v52 = v51;

          uint64_t v112 = v50;
          uint64_t v113 = v52;
          uint64_t v101 = v52;
          uint64_t v110 = 91;
          unint64_t v111 = 0xE100000000000000;
          uint64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v112 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v113 = v53;
          uint64_t v110 = 93;
          unint64_t v111 = 0xE100000000000000;
          uint64_t v108 = 0;
          unint64_t v109 = 0xE000000000000000;
          uint64_t v54 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v56 = v55;
          swift_bridgeObjectRelease();
          uint64_t v57 = v94;
          if (*(void *)(v94 + 16) && (unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v56), (v59 & 1) != 0))
          {
            uint64_t v60 = (uint64_t *)(*(void *)(v57 + 56) + 16 * v58);
            uint64_t v61 = *v60;
            unint64_t v62 = v60[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v63 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v62, v86, v57);
            swift_bridgeObjectRelease();
            if (v63)
            {
              swift_beginAccess();
              uint64_t v35 = v95;
              uint64_t v19 = v85;
              uint64_t v64 = (uint64_t)v84;
              if (static __RKEntityUUIDComponent.registration
                && REEntityGetCustomComponent()
                && RECustomComponentGetObject())
              {
                uint64_t v65 = (uint64_t)v83;
                UUID.init(uuid:)();
                long long v66 = *v100;
                (*v100)((char *)v65, 0, 1, v21);
                if ((*v44)(v65, 1, v21) == 1)
                {
                  int v67 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v66;
                  uint64_t v19 = v85;
                  goto LABEL_38;
                }
                outlined destroy of BodyTrackingComponent?(v65, &demangling cache variable for type metadata for UUID?);
                uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, char *))v66;
                uint64_t v19 = v85;
              }
              else
              {
                int v67 = (void (*)(uint64_t, uint64_t, uint64_t, char *))*v100;
                uint64_t v65 = (uint64_t)v83;
                (*v100)(v83, 1, 1, v21);
LABEL_38:
                outlined destroy of BodyTrackingComponent?(v65, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                v67(v64, 0, 1, v21);
                Entity.__interactionIdentifier.setter(v64);
                uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, char *))v67;
              }
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_52;
              }
              UUID.init(uuid:)();
              v30(v19, 0, 1, v21);
              uint64_t v69 = (unsigned int (*)(uint64_t, uint64_t, char *))*v107;
              uint64_t result = (*v107)(v19, 1, v21);
              if (result == 1) {
                goto LABEL_53;
              }
              swift_release();
              uint64_t v68 = (uint64_t)v96;
              (*v99)();
              v30((char *)v68, 0, 1, v21);
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
            uint64_t v35 = v95;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v35 = v95;
          }
        }
        uint64_t v68 = (uint64_t)v96;
        (*v100)(v96, 1, 1, v21);
        swift_bridgeObjectRelease();
        uint64_t v69 = *v44;
LABEL_26:
        if (v69(v68, 1, v21) != 1)
        {
          long long v72 = *v99;
          uint64_t v73 = v68;
          uint64_t v74 = v97;
          ((void (*)(char *, uint64_t, char *))*v99)(v97, v73, v21);
          (*v88)(v98, v74, v21);
          long long v75 = v93;
          unint64_t v76 = *v93;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *long long v75 = v76;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v76 + 16) + 1, 1, v76);
            unint64_t *v93 = v76;
          }
          unint64_t v79 = *(void *)(v76 + 16);
          unint64_t v78 = *(void *)(v76 + 24);
          if (v79 >= v78 >> 1)
          {
            unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1, v76);
            unint64_t *v93 = v76;
          }
          *(void *)(v76 + 16) = v79 + 1;
          uint64_t v80 = v89;
          ((void (*)(unint64_t))v72)(v76+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(void *)(v89 + 72) * v79);

          (*(void (**)(char *, char *))(v80 + 8))(v97, v21);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v68, &demangling cache variable for type metadata for UUID?);
LABEL_28:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v70 = swift_allocObject();
        long long v71 = (void *)v70;
        *(_OWORD *)(v70 + 16) = v102;
        if ((_BYTE)v103)
        {
          if (v103 == 1)
          {
            unint64_t v39 = v91 | 0x8000000000000000;
            unint64_t v37 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v37 = 0xD000000000000013;
          uint64_t v38 = &v114;
        }
        else
        {
          unint64_t v37 = 0xD000000000000014;
          uint64_t v38 = &v115;
        }
        unint64_t v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v70 + 56) = MEMORY[0x263F8D310];
        *(void *)(v70 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v71[4] = v37;
        v71[5] = v39;
        v71[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v71[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v71[9] = v43;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v40 = v43;
        char v41 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v36;
        uint64_t v32 = v106;
        if (v104 == v36) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_52:
    uint64_t result = v30(v19, 1, 1, v21);
LABEL_53:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, void *a9)
{
  uint64_t v108 = a8;
  uint64_t v109 = a7;
  uint64_t v96 = a6;
  long long v118 = a4;
  id v119 = a5;
  uint64_t v117 = a1;
  uint64_t v106 = a9;
  uint64_t v105 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v107 = *(void *)(v105 - 8);
  MEMORY[0x270FA5388](v105);
  uint64_t v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v92 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v92 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v92 - v23;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  unint64_t v31 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v117, v29, (char)a3, v118);
  uint64_t v99 = v28;
  uint64_t v115 = v25;
  unint64_t v95 = v19;
  unint64_t v111 = v12;
  LODWORD(v117) = a3;
  unint64_t v32 = v31;
  uint64_t v94 = v22;
  if (v31 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_3;
    }
LABEL_48:
    return swift_bridgeObjectRelease();
  }
  uint64_t v33 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v33) {
    goto LABEL_48;
  }
LABEL_3:
  unint64_t v93 = v16;
  if (v33 >= 1)
  {
    uint64_t v34 = (uint64_t)v24;
    uint64_t v35 = v26;
    uint64_t v36 = 0;
    long long v118 = (void *)(v32 & 0xC000000000000001);
    uint64_t v112 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    uint64_t v113 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
    uint64_t v101 = (void (**)(uint64_t, char *, uint64_t))(v35 + 32);
    uint64_t v98 = (void (**)(char *, char *, uint64_t))(v35 + 16);
    uint64_t v97 = (void (**)(char *, uint64_t))(v35 + 8);
    long long v116 = xmmword_22831E350;
    uint64_t v104 = "USD action loading";
    unint64_t v103 = (unint64_t)"named \"%s\" for node at path: %s";
    long long v102 = "arReferenceByFullSchemePath";
    unint64_t v110 = v32;
    while (1)
    {
      if (v118) {
        id v42 = (id)MEMORY[0x22A689930](v36, v32);
      }
      else {
        id v42 = *(id *)(v32 + 8 * v36 + 32);
      }
      uint64_t v43 = v42;
      id v44 = objc_msgSend(v119, sel_objectAtPath_, v42);
      if (!v44) {
        goto LABEL_28;
      }
      id v45 = v44;
      self;
      uint64_t v46 = swift_dynamicCastObjCClass();

      if (!v46) {
        goto LABEL_28;
      }
      id v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        uint64_t v124 = v48;
        uint64_t v125 = v50;
        uint64_t v114 = v50;
        uint64_t v122 = 91;
        unint64_t v123 = 0xE100000000000000;
        uint64_t v120 = 0;
        unint64_t v121 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v124 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v125 = v51;
        uint64_t v122 = 93;
        unint64_t v123 = 0xE100000000000000;
        uint64_t v120 = 0;
        unint64_t v121 = 0xE000000000000000;
        uint64_t v52 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        uint64_t v55 = v109;
        uint64_t v56 = v113;
        if (*(void *)(v109 + 16) && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v54), (v58 & 1) != 0))
        {
          char v59 = (uint64_t *)(*(void *)(v55 + 56) + 16 * v57);
          uint64_t v60 = *v59;
          unint64_t v61 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v60, v61, v96, v55);
          swift_bridgeObjectRelease();
          uint64_t v100 = v62;
          if (v62)
          {
            swift_beginAccess();
            uint64_t v63 = (uint64_t)v95;
            uint64_t v64 = (uint64_t)v94;
            if (static __RKEntityUUIDComponent.registration
              && (CustomComponent = REEntityGetCustomComponent(), long long v66 = v112, CustomComponent)
              && RECustomComponentGetObject())
            {
              UUID.init(uuid:)();
              int v67 = *v56;
              uint64_t v68 = v115;
              uint64_t v30 = v67;
              v67(v64, 0, 1, v115);
              if ((*v66)(v64, 1, v68) == 1)
              {
                uint64_t v69 = v115;
                goto LABEL_38;
              }
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
            }
            else
            {
              uint64_t v30 = *v56;
              uint64_t v69 = v115;
              v30(v64, 1, 1, v115);
LABEL_38:
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              v30(v63, 0, 1, v69);
              Entity.__interactionIdentifier.setter(v63);
            }
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_52;
            }
            uint64_t v89 = v93;
            UUID.init(uuid:)();
            uint64_t v71 = v115;
            v30((uint64_t)v89, 0, 1, v115);
            long long v72 = *v112;
            uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*v112)(v89, 1, v71);
            if (result == 1) {
              goto LABEL_53;
            }
            swift_release();
            (*v101)(v34, v89, v71);
            v30(v34, 0, 1, v71);
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v56 = v113;
      }
      uint64_t v70 = *v56;
      uint64_t v71 = v115;
      v70(v34, 1, 1, v115);
      swift_bridgeObjectRelease();
      long long v72 = *v112;
LABEL_26:
      if (v72(v34, 1, v71) != 1)
      {
        long long v75 = v99;
        (*v101)((uint64_t)v99, (char *)v34, v71);
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        uint64_t v77 = v71;
        unint64_t v78 = v75;
        uint64_t v79 = *(int *)(v76 + 48);
        uint64_t v80 = *(int *)(v76 + 64);
        long long v81 = v111;
        (*v98)(v111, v78, v77);
        *(void *)&v81[v79] = *v106;
        *(void *)&v81[v80] = MEMORY[0x263F8EE78];
        swift_storeEnumTagMultiPayload();
        uint64_t v82 = v108;
        unint64_t v83 = *v108;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v82 = v83;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, v83);
          *uint64_t v108 = v83;
        }
        unint64_t v86 = *(void *)(v83 + 16);
        unint64_t v85 = *(void *)(v83 + 24);
        uint64_t v87 = v107;
        uint64_t v88 = (uint64_t)v111;
        if (v86 >= v85 >> 1)
        {
          uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v83);
          uint64_t v87 = v107;
          unint64_t v83 = v91;
          uint64_t v88 = (uint64_t)v111;
          *uint64_t v108 = v83;
        }
        *(void *)(v83 + 16) = v86 + 1;
        _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v88, v83+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v86, type metadata accessor for __RKEntityTriggerSpecification);

        (*v97)(v78, v115);
        unint64_t v32 = v110;
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v34, &demangling cache variable for type metadata for UUID?);
      unint64_t v32 = v110;
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v73 = swift_allocObject();
      uint64_t v74 = (void *)v73;
      *(_OWORD *)(v73 + 16) = v116;
      if ((_BYTE)v117)
      {
        if (v117 == 1)
        {
          unint64_t v39 = v103 | 0x8000000000000000;
          unint64_t v37 = 0xD000000000000012;
          goto LABEL_7;
        }
        unint64_t v37 = 0xD000000000000013;
        uint64_t v38 = &v126;
      }
      else
      {
        unint64_t v37 = 0xD000000000000014;
        uint64_t v38 = &v127;
      }
      unint64_t v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_7:
      *(void *)(v73 + 56) = MEMORY[0x263F8D310];
      *(void *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v74[4] = v37;
      v74[5] = v39;
      v74[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v74[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v74[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      id v40 = v43;
      char v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_8:
      if (v33 == ++v36) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_52:
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v30)(v93, 1, 1, v115);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9)
{
  uint64_t v106 = a8;
  uint64_t v107 = a7;
  uint64_t v95 = a6;
  long long v116 = a4;
  id v117 = a5;
  uint64_t v115 = a1;
  uint64_t v104 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v105 = *(void *)(v104 - 8);
  MEMORY[0x270FA5388](v104);
  uint64_t v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v92 - v19;
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v92 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v25 = (char *)&v92 - v24;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a2;
  unint64_t v31 = a3;
  unint64_t v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v115, v30, (char)a3, v116);
  uint64_t v98 = v29;
  uint64_t v113 = v26;
  uint64_t v94 = v20;
  uint64_t v109 = v13;
  LODWORD(v115) = a3;
  unint64_t v33 = v32;
  unint64_t v93 = v23;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_3;
    }
LABEL_48:
    return swift_bridgeObjectRelease();
  }
  uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v34) {
    goto LABEL_48;
  }
LABEL_3:
  uint64_t v92 = v17;
  if (v34 >= 1)
  {
    uint64_t v35 = (uint64_t)v25;
    uint64_t v36 = 0;
    long long v116 = (void *)(v33 & 0xC000000000000001);
    unint64_t v110 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    unint64_t v111 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v100 = (void (**)(uint64_t, char *, uint64_t))(v27 + 32);
    uint64_t v97 = (void (**)(char *, char *, uint64_t))(v27 + 16);
    uint64_t v96 = (void (**)(char *, uint64_t))(v27 + 8);
    long long v114 = xmmword_22831E350;
    unint64_t v103 = "USD action loading";
    unint64_t v102 = (unint64_t)"named \"%s\" for node at path: %s";
    uint64_t v101 = "arReferenceByFullSchemePath";
    unint64_t v108 = v33;
    while (1)
    {
      if (v116) {
        id v42 = (id)MEMORY[0x22A689930](v36, v33);
      }
      else {
        id v42 = *(id *)(v33 + 8 * v36 + 32);
      }
      uint64_t v43 = v42;
      id v44 = objc_msgSend(v117, sel_objectAtPath_, v42, v92);
      if (!v44) {
        goto LABEL_28;
      }
      id v45 = v44;
      self;
      uint64_t v46 = swift_dynamicCastObjCClass();

      if (!v46) {
        goto LABEL_28;
      }
      id v47 = objc_msgSend(v43, sel_stringValue);
      if (v47)
      {
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v49;

        uint64_t v122 = v48;
        uint64_t v123 = v50;
        uint64_t v112 = v50;
        uint64_t v120 = 91;
        unint64_t v121 = 0xE100000000000000;
        uint64_t v118 = 0;
        unint64_t v119 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v122 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v123 = v51;
        uint64_t v120 = 93;
        unint64_t v121 = 0xE100000000000000;
        uint64_t v118 = 0;
        unint64_t v119 = 0xE000000000000000;
        uint64_t v52 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v54 = v53;
        swift_bridgeObjectRelease();
        uint64_t v55 = v107;
        uint64_t v56 = v111;
        if (*(void *)(v107 + 16) && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v52, v54), (v58 & 1) != 0))
        {
          char v59 = (uint64_t *)(*(void *)(v55 + 56) + 16 * v57);
          uint64_t v60 = *v59;
          unint64_t v61 = v59[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v60, v61, v95, v55);
          swift_bridgeObjectRelease();
          uint64_t v99 = v62;
          if (v62)
          {
            swift_beginAccess();
            uint64_t v63 = (uint64_t)v94;
            uint64_t v64 = (uint64_t)v93;
            if (static __RKEntityUUIDComponent.registration
              && (CustomComponent = REEntityGetCustomComponent(), long long v66 = v110, CustomComponent)
              && RECustomComponentGetObject())
            {
              UUID.init(uuid:)();
              int v67 = *v56;
              uint64_t v68 = v113;
              unint64_t v31 = v67;
              v67(v64, 0, 1, v113);
              if ((*v66)(v64, 1, v68) == 1)
              {
                uint64_t v69 = v113;
                goto LABEL_38;
              }
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
            }
            else
            {
              unint64_t v31 = *v56;
              uint64_t v69 = v113;
              v31(v64, 1, 1, v113);
LABEL_38:
              outlined destroy of BodyTrackingComponent?(v64, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              v31(v63, 0, 1, v69);
              Entity.__interactionIdentifier.setter(v63);
            }
            if (!static __RKEntityUUIDComponent.registration
              || !REEntityGetCustomComponent()
              || !RECustomComponentGetObject())
            {
              goto LABEL_52;
            }
            uint64_t v89 = v92;
            UUID.init(uuid:)();
            uint64_t v71 = v113;
            v31((uint64_t)v89, 0, 1, v113);
            long long v72 = *v110;
            uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*v110)(v89, 1, v71);
            if (result == 1) {
              goto LABEL_53;
            }
            swift_release();
            (*v100)(v35, v89, v71);
            v31(v35, 0, 1, v71);
            swift_bridgeObjectRelease();
            goto LABEL_26;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v56 = v111;
      }
      uint64_t v70 = *v56;
      uint64_t v71 = v113;
      v70(v35, 1, 1, v113);
      swift_bridgeObjectRelease();
      long long v72 = *v110;
LABEL_26:
      if (v72(v35, 1, v71) != 1)
      {
        long long v75 = v98;
        (*v100)((uint64_t)v98, (char *)v35, v71);
        uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        uint64_t v77 = v71;
        unint64_t v78 = v75;
        uint64_t v79 = *(int *)(v76 + 48);
        uint64_t v80 = *(int *)(v76 + 64);
        long long v81 = v109;
        (*v97)(v109, v78, v77);
        *(float *)&v81[v79] = a9;
        v81[v80] = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v82 = v106;
        unint64_t v83 = *v106;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v82 = v83;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, v83);
          *uint64_t v106 = v83;
        }
        unint64_t v86 = *(void *)(v83 + 16);
        unint64_t v85 = *(void *)(v83 + 24);
        uint64_t v87 = v105;
        uint64_t v88 = (uint64_t)v109;
        if (v86 >= v85 >> 1)
        {
          uint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v83);
          uint64_t v87 = v105;
          unint64_t v83 = v91;
          uint64_t v88 = (uint64_t)v109;
          *uint64_t v106 = v83;
        }
        *(void *)(v83 + 16) = v86 + 1;
        _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v88, v83+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v86, type metadata accessor for __RKEntityTriggerSpecification);

        (*v96)(v78, v113);
        unint64_t v33 = v108;
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for UUID?);
      unint64_t v33 = v108;
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v73 = swift_allocObject();
      uint64_t v74 = (void *)v73;
      *(_OWORD *)(v73 + 16) = v114;
      if ((_BYTE)v115)
      {
        if (v115 == 1)
        {
          unint64_t v39 = v102 | 0x8000000000000000;
          unint64_t v37 = 0xD000000000000012;
          goto LABEL_7;
        }
        unint64_t v37 = 0xD000000000000013;
        uint64_t v38 = &v124;
      }
      else
      {
        unint64_t v37 = 0xD000000000000014;
        uint64_t v38 = &v125;
      }
      unint64_t v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_7:
      *(void *)(v73 + 56) = MEMORY[0x263F8D310];
      *(void *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v74[4] = v37;
      v74[5] = v39;
      v74[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v74[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v74[9] = v43;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      id v40 = v43;
      char v41 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
LABEL_8:
      if (v34 == ++v36) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_52:
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v31)(v92, 1, 1, v113);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.entityFromIdentifier(identifier:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)&v53 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v53 - v15;
  AllEntitiesArradouble y = (char *)RESceneGetAllEntitiesArray();
  uint64_t v19 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v18);
  uint64_t v63 = *(void *)(v19 + 16);
  uint64_t v64 = v19;
  if (!v63)
  {
LABEL_48:
    swift_release();
    return 0;
  }
  char v59 = v11;
  uint64_t v20 = 0;
  uint64_t v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  unint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v62 = v5;
  uint64_t v54 = a1;
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  char v58 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  while (1)
  {
    uint64_t v22 = *(void *)(v64 + 8 * v20 + 32);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v23 = swift_dynamicCastClassUnconditional();
LABEL_37:
      uint64_t v43 = v23;
      goto LABEL_38;
    }
    uint64_t result = REEntityIsBeingDestroyed();
    if (result) {
      break;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
      swift_once();
    }
    swift_beginAccess();
    if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v25 & 1) == 0))
    {
      swift_endAccess();
      uint64_t v26 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v67;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent()) {
      goto LABEL_36;
    }
    uint64_t Object = RECustomComponentGetObject();
    if (!Object) {
      goto LABEL_36;
    }
    uint64_t v29 = *(unsigned __int8 **)Object;
    if (*(void *)(Object + 8) || !v29)
    {
      uint64_t result = swift_retain();
    }
    else
    {
      int v30 = *v29;
      uint64_t v31 = String.init(utf8String:)();
      if (v32) {
        Swift::Int v33 = v31;
      }
      else {
        Swift::Int v33 = 0;
      }
      if (v32) {
        unint64_t v34 = v32;
      }
      else {
        unint64_t v34 = 0xE000000000000000;
      }
      uint64_t v29 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v30 == 42, v33, v34);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      uint64_t result = swift_allocObject();
      *(void *)(result + 16) = v29;
    }
    if (!v29) {
      goto LABEL_53;
    }
    swift_retain();
    uint64_t v35 = String.init(utf8String:)();
    unint64_t v37 = v36;
    swift_release();
    uint64_t v38 = v37 ? v35 : 0;
    unint64_t v39 = v37 ? v37 : 0xE000000000000000;
    id v40 = (NSString *)MEMORY[0x22A688A50](v38, v39);
    swift_bridgeObjectRelease();
    Class v41 = NSClassFromString(v40);

    swift_release();
    a1 = v54;
    if (!v41
      || (swift_getObjCClassMetadata(), type metadata accessor for Entity(), (uint64_t v42 = swift_dynamicCastMetatype()) == 0))
    {
LABEL_36:
      uint64_t v23 = makeEntity(for:)(v22);
      goto LABEL_37;
    }
    uint64_t v43 = (*(uint64_t (**)(void))(v42 + 232))();
    uint64_t v44 = *(void *)(v43 + 16);
    swift_retain();
    MEMORY[0x22A68E750](v44, 0);
    *(void *)(v43 + 16) = v22;
    MEMORY[0x22A68E750](v22, v43);
    swift_release();
LABEL_38:
    uint64_t v66 = v43;
    swift_beginAccess();
    if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
    {
      UUID.init(uuid:)();
      id v45 = *v65;
      (*v65)(v16, 0, 1, v2);
    }
    else
    {
      id v45 = *v65;
      (*v65)(v16, 1, 1, v2);
    }
    uint64_t v46 = a1;
    (*v61)(v14, a1, v2);
    v45(v14, 0, 1, v2);
    uint64_t v47 = (uint64_t)&v7[*(int *)(v62 + 48)];
    outlined init with copy of UUID?((uint64_t)v16, (uint64_t)v7);
    outlined init with copy of UUID?((uint64_t)v14, v47);
    uint64_t v48 = *v60;
    if ((*v60)(v7, 1, v2) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      unsigned int v21 = v48((char *)v47, 1, v2);
      a1 = v46;
      if (v21 == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
        uint64_t v52 = v66;
LABEL_50:
        swift_release();
        return v52;
      }
      goto LABEL_4;
    }
    uint64_t v49 = (uint64_t)v59;
    outlined init with copy of UUID?((uint64_t)v7, (uint64_t)v59);
    if (v48((char *)v47, 1, v2) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      (*v58)(v49, v2);
      a1 = v46;
LABEL_4:
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (UUID?, UUID?));
      goto LABEL_5;
    }
    uint64_t v50 = v56;
    (*v55)(v56, v47, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    int v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v51 = *v58;
    (*v58)((uint64_t)v50, v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    v51(v49, v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
    a1 = v46;
    uint64_t v52 = v66;
    if (v57) {
      goto LABEL_50;
    }
LABEL_5:
    ++v20;
    swift_release();
    if (v63 == v20) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9)
{
  uint64_t v105 = a8;
  uint64_t v106 = a7;
  uint64_t v95 = a6;
  uint64_t v107 = a5;
  id v117 = a4;
  uint64_t v103 = a9;
  uint64_t v102 = type metadata accessor for __RKEntityTriggerSpecification(0);
  uint64_t v104 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v112 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v88 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v88 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v88 - v23;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  LODWORD(a2) = a3;
  uint64_t v31 = 0;
  unint64_t v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v29, v30, a3, v117);
  unint64_t v33 = v32;
  uint64_t v109 = v28;
  uint64_t v113 = v25;
  unint64_t v93 = v22;
  uint64_t v92 = v16;
  int v115 = a2;
  unint64_t v111 = v32;
  uint64_t v91 = v19;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v35 = (uint64_t)v24;
    if (v34) {
      goto LABEL_3;
    }
LABEL_52:
    return swift_bridgeObjectRelease();
  }
  uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v35 = (uint64_t)v24;
  if (!v34) {
    goto LABEL_52;
  }
LABEL_3:
  unint64_t v36 = v111;
  if (v34 >= 1)
  {
    uint64_t v37 = 0;
    id v117 = (void *)(v111 & 0xC000000000000001);
    unint64_t v110 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v98 = (void (**)(uint64_t, uint64_t, unint64_t))(v26 + 32);
    uint64_t v97 = (void (**)(char *, char *, unint64_t))(v26 + 16);
    uint64_t v96 = (void (**)(uint64_t, uint64_t))(v26 + 8);
    long long v114 = xmmword_22831E350;
    uint64_t v101 = "USD action loading";
    unint64_t v100 = (unint64_t)"named \"%s\" for node at path: %s";
    uint64_t v99 = "arReferenceByFullSchemePath";
    uint64_t v38 = v107;
    uint64_t v116 = v34;
    unint64_t v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    uint64_t v90 = v35;
    while (1)
    {
      if (v117) {
        id v45 = (id)MEMORY[0x22A689930](v37, v36);
      }
      else {
        id v45 = *(id *)(v36 + 8 * v37 + 32);
      }
      uint64_t v46 = v45;
      id v47 = objc_msgSend(v38, sel_objectAtPath_, v45);
      if (!v47) {
        goto LABEL_28;
      }
      uint64_t v48 = v47;
      self;
      uint64_t v49 = swift_dynamicCastObjCClass();

      if (!v49) {
        goto LABEL_28;
      }
      id v50 = objc_msgSend(v46, sel_stringValue);
      if (v50)
      {
        uint64_t v51 = v50;
        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v54 = v53;

        uint64_t v122 = v52;
        uint64_t v123 = v54;
        uint64_t v120 = 91;
        unint64_t v121 = 0xE100000000000000;
        uint64_t v118 = 0;
        unint64_t v119 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v122 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v123 = v55;
        uint64_t v120 = 93;
        unint64_t v121 = 0xE100000000000000;
        uint64_t v118 = 0;
        unint64_t v119 = 0xE000000000000000;
        uint64_t v56 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v58 = v57;
        swift_bridgeObjectRelease();
        uint64_t v59 = v106;
        if (*(void *)(v106 + 16) && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v58), (v61 & 1) != 0))
        {
          uint64_t v62 = (uint64_t *)(*(void *)(v59 + 56) + 16 * v60);
          uint64_t v64 = *v62;
          unint64_t v63 = v62[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v65 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v64, v63, v95, v59);
          swift_bridgeObjectRelease();
          if (v65)
          {
            swift_beginAccess();
            uint64_t v94 = v65;
            if (static __RKEntityUUIDComponent.registration)
            {
              uint64_t CustomComponent = REEntityGetCustomComponent();
              uint64_t v67 = (uint64_t)v93;
              if (CustomComponent && RECustomComponentGetObject())
              {
                UUID.init(uuid:)();
                uint64_t v68 = v113;
                uint64_t v89 = *v110;
                v89(v67, 0, 1, v113);
                int v69 = (*v108)(v67, 1, v68);
                unint64_t v33 = (unint64_t)v92;
                if (v69 == 1)
                {
                  unint64_t v36 = v113;
                  uint64_t v70 = v89;
                  goto LABEL_43;
                }
                outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
                unint64_t v36 = v113;
                uint64_t v31 = v89;
LABEL_44:
                if (!static __RKEntityUUIDComponent.registration
                  || !REEntityGetCustomComponent()
                  || !RECustomComponentGetObject())
                {
                  goto LABEL_56;
                }
                UUID.init(uuid:)();
                v31(v33, 0, 1, v36);
                unint64_t v84 = v33;
                unint64_t v85 = v31;
                uint64_t v71 = *v108;
                uint64_t result = (*v108)(v84, 1, v36);
                if (result == 1) {
                  goto LABEL_57;
                }
                swift_release();
                uint64_t v35 = v90;
                (*v98)(v90, v84, v36);
                v85(v35, 0, 1, v36);
                swift_bridgeObjectRelease();
                uint64_t v38 = v107;
                goto LABEL_26;
              }
              uint64_t v70 = *v110;
            }
            else
            {
              uint64_t v70 = *v110;
              uint64_t v67 = (uint64_t)v93;
            }
            unint64_t v36 = v113;
            v70(v67, 1, 1, v113);
            unint64_t v33 = (unint64_t)v92;
LABEL_43:
            outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
            uint64_t v83 = (uint64_t)v91;
            UUID.init()();
            v70(v83, 0, 1, v36);
            Entity.__interactionIdentifier.setter(v83);
            uint64_t v31 = v70;
            goto LABEL_44;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v38 = v107;
      }
      unint64_t v36 = v113;
      (*v110)(v35, 1, 1, v113);
      swift_bridgeObjectRelease();
      uint64_t v71 = *v108;
LABEL_26:
      if (v71(v35, 1, v36) != 1)
      {
        uint64_t v74 = v109;
        (*v98)((uint64_t)v109, v35, v36);
        (*v97)(v112, v74, v36);
        swift_storeEnumTagMultiPayload();
        long long v75 = v105;
        unint64_t v76 = *v105;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *long long v75 = v76;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v76 + 16) + 1, 1, v76);
          *uint64_t v105 = v76;
        }
        unint64_t v79 = *(void *)(v76 + 16);
        unint64_t v78 = *(void *)(v76 + 24);
        uint64_t v80 = v104;
        unint64_t v36 = v111;
        uint64_t v81 = (uint64_t)v112;
        uint64_t v82 = (uint64_t)v109;
        if (v79 >= v78 >> 1)
        {
          uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1, v76);
          uint64_t v80 = v104;
          unint64_t v76 = v87;
          uint64_t v81 = (uint64_t)v112;
          *uint64_t v105 = v76;
        }
        *(void *)(v76 + 16) = v79 + 1;
        _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v81, v76+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(void *)(v80 + 72) * v79, type metadata accessor for __RKEntityTriggerSpecification);
        if (specialized USDDecodableContext.entityFromIdentifier(identifier:)(v82))
        {
          Entity.generateCollisionShapes(recursive:)(1);

          swift_release();
        }
        else
        {
        }
        uint64_t v44 = v116;
        (*v96)(v82, v113);
        goto LABEL_8;
      }
      outlined destroy of BodyTrackingComponent?(v35, &demangling cache variable for type metadata for UUID?);
      unint64_t v36 = v111;
LABEL_28:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v72 = swift_allocObject();
      uint64_t v73 = (void *)v72;
      *(_OWORD *)(v72 + 16) = v114;
      if ((_BYTE)v115)
      {
        if (v115 == 1)
        {
          unint64_t v41 = v100 | 0x8000000000000000;
          unint64_t v39 = 0xD000000000000012;
          goto LABEL_7;
        }
        unint64_t v39 = 0xD000000000000013;
        id v40 = &v124;
      }
      else
      {
        unint64_t v39 = 0xD000000000000014;
        id v40 = &v125;
      }
      unint64_t v41 = *(v40 - 32) | 0x8000000000000000;
LABEL_7:
      *(void *)(v72 + 56) = MEMORY[0x263F8D310];
      *(void *)(v72 + 64) = lazy protocol witness table accessor for type String and conformance String();
      v73[4] = v39;
      v73[5] = v41;
      v73[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      v73[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      v73[9] = v46;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      id v42 = v46;
      uint64_t v43 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      uint64_t v44 = v116;
LABEL_8:
      if (v44 == ++v37) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
LABEL_56:
  uint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t, unint64_t))v31)(v33, 1, 1, v36);
LABEL_57:
  __break(1u);
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, double a9, uint64_t a10, unint64_t *a11, unsigned __int8 a12, unsigned __int8 a13)
{
  unint64_t v100 = a8;
  uint64_t v101 = a7;
  uint64_t v89 = a6;
  uint64_t v103 = a5;
  unint64_t v110 = a4;
  int v99 = a13;
  int v98 = a12;
  uint64_t v97 = a11;
  uint64_t v96 = a10;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v85 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v85 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v85 - v27;
  uint64_t v29 = (void *)type metadata accessor for UUID();
  uint64_t v30 = *(v29 - 1);
  MEMORY[0x270FA5388](v29);
  unint64_t v32 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v33 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v110);
  unint64_t v34 = v33;
  uint64_t v35 = v30;
  uint64_t v91 = v32;
  uint64_t v87 = v26;
  unint64_t v85 = v23;
  uint64_t v88 = v20;
  int v107 = a3;
  unint64_t v109 = v33;
  uint64_t v104 = v28;
  if (v33 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v34 = v109;
  }
  else
  {
    uint64_t v36 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v37 = v103;
  unint64_t v110 = v29;
  if (v36)
  {
    if (v36 >= 1)
    {
      uint64_t v38 = 0;
      unint64_t v108 = v34 & 0xC000000000000001;
      uint64_t v105 = (char **)(v35 + 56);
      uint64_t v102 = (unsigned int (**)(uint64_t, uint64_t, void *))(v35 + 48);
      uint64_t v92 = (void (**)(char *, char *, void *))(v35 + 32);
      uint64_t v90 = (void (**)(uint64_t, void *))(v35 + 8);
      long long v106 = xmmword_22831E350;
      uint64_t v95 = "USD action loading";
      unint64_t v94 = (unint64_t)"named \"%s\" for node at path: %s";
      unint64_t v93 = "arReferenceByFullSchemePath";
      while (1)
      {
        if (v108) {
          id v44 = (id)MEMORY[0x22A689930](v38, v34);
        }
        else {
          id v44 = *(id *)(v34 + 8 * v38 + 32);
        }
        id v45 = v44;
        id v46 = objc_msgSend(v37, sel_objectAtPath_, v44, v85, v86);
        if (!v46) {
          goto LABEL_29;
        }
        id v47 = v46;
        self;
        uint64_t v48 = swift_dynamicCastObjCClass();

        if (!v48) {
          goto LABEL_29;
        }
        id v49 = objc_msgSend(v45, sel_stringValue);
        if (v49)
        {
          id v50 = v49;
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v53 = v52;

          uint64_t v115 = v51;
          uint64_t v116 = v53;
          uint64_t v113 = 91;
          unint64_t v114 = 0xE100000000000000;
          uint64_t v111 = 0;
          unint64_t v112 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v115 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v116 = v54;
          uint64_t v113 = 93;
          unint64_t v114 = 0xE100000000000000;
          uint64_t v111 = 0;
          unint64_t v112 = 0xE000000000000000;
          uint64_t v55 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v57 = v56;
          swift_bridgeObjectRelease();
          uint64_t v58 = v101;
          if (*(void *)(v101 + 16)
            && (unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v55, v57), (v60 & 1) != 0))
          {
            char v61 = (uint64_t *)(*(void *)(v58 + 56) + 16 * v59);
            uint64_t v63 = *v61;
            unint64_t v62 = v61[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v64 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v63, v62, v89, v58);
            swift_bridgeObjectRelease();
            if (v64)
            {
              swift_beginAccess();
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v66 = v102;
                if (CustomComponent && RECustomComponentGetObject())
                {
                  uint64_t v67 = (uint64_t)v87;
                  UUID.init(uuid:)();
                  uint64_t v68 = v110;
                  int v69 = *v105;
                  ((void (*)(uint64_t, void, uint64_t, void *))*v105)(v67, 0, 1, v110);
                  if ((*v66)(v67, 1, v68) == 1)
                  {
                    uint64_t v70 = v67;
                    goto LABEL_36;
                  }
                  outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
LABEL_37:
                  uint64_t v20 = v69;
                  uint64_t v86 = v53;
                  if (!static __RKEntityUUIDComponent.registration
                    || !REEntityGetCustomComponent()
                    || !RECustomComponentGetObject())
                  {
                    goto LABEL_49;
                  }
                  uint64_t v81 = v88;
                  UUID.init(uuid:)();
                  uint64_t v82 = v110;
                  ((void (*)(char *, void, uint64_t, void *))v20)(v81, 0, 1, v110);
                  uint64_t v83 = (void (*)(uint64_t, void, uint64_t, void *))v20;
                  uint64_t v72 = *v66;
                  uint64_t result = ((uint64_t (*)(char *, uint64_t, void *))*v66)(v81, 1, v82);
                  if (result == 1) {
                    goto LABEL_50;
                  }
                  swift_release();
                  uint64_t v71 = (uint64_t)v104;
                  (*v92)(v104, v81, v82);
                  v83(v71, 0, 1, v82);
                  swift_bridgeObjectRelease();
                  uint64_t v37 = v103;
                  goto LABEL_27;
                }
                int v69 = *v105;
                uint64_t v78 = (uint64_t)v87;
                ((void (*)(char *, uint64_t, uint64_t, void *))*v105)(v87, 1, 1, v110);
                uint64_t v70 = v78;
              }
              else
              {
                int v69 = *v105;
                uint64_t v79 = (uint64_t)v87;
                ((void (*)(char *, uint64_t, uint64_t, void *))*v105)(v87, 1, 1, v110);
                uint64_t v70 = v79;
                uint64_t v66 = v102;
              }
LABEL_36:
              outlined destroy of BodyTrackingComponent?(v70, &demangling cache variable for type metadata for UUID?);
              uint64_t v80 = (uint64_t)v85;
              UUID.init()();
              ((void (*)(uint64_t, void, uint64_t, void *))v69)(v80, 0, 1, v110);
              Entity.__interactionIdentifier.setter(v80);
              goto LABEL_37;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v37 = v103;
        }
        uint64_t v71 = (uint64_t)v104;
        ((void (*)(char *, uint64_t, uint64_t, void *))*v105)(v104, 1, 1, v110);
        swift_bridgeObjectRelease();
        uint64_t v72 = *v102;
LABEL_27:
        if (v72(v71, 1, v110) != 1)
        {
          uint64_t v75 = v71;
          uint64_t v76 = (uint64_t)v91;
          uint64_t v77 = v110;
          (*v92)(v91, (char *)v75, v110);
          specialized closure #1 in static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(v76, v100, v96, v97, v98, v99, a9);

          (*v90)(v76, v77);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v73 = swift_allocObject();
        uint64_t v74 = (void *)v73;
        *(_OWORD *)(v73 + 16) = v106;
        if ((_BYTE)v107)
        {
          if (v107 == 1)
          {
            unint64_t v41 = v94 | 0x8000000000000000;
            unint64_t v39 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v39 = 0xD000000000000013;
          id v40 = &v117;
        }
        else
        {
          unint64_t v39 = 0xD000000000000014;
          id v40 = &v118;
        }
        unint64_t v41 = *(v40 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v73 + 56) = MEMORY[0x263F8D310];
        *(void *)(v73 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v74[4] = v39;
        v74[5] = v41;
        v74[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v74[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v74[9] = v45;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v42 = v45;
        uint64_t v43 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v38;
        unint64_t v34 = v109;
        if (v36 == v38) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_49:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))v20)(v88, 1, 1, v110);
LABEL_50:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a6, uint64_t a7, unint64_t *a8, float a9, unsigned __int8 a10, unsigned __int8 a11)
{
  uint64_t v116 = a8;
  uint64_t v126 = a7;
  uint64_t v119 = a6;
  uint64_t v127 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a5;
  uint64_t v131 = a1;
  long long v132 = a4;
  int v114 = a11;
  int v113 = a10;
  uint64_t v112 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v115 = *(void *)(v112 - 8);
  MEMORY[0x270FA5388](v112);
  uint64_t v125 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v102 - v20;
  uint64_t v22 = MEMORY[0x270FA5388](v19);
  uint64_t v24 = (char *)&v102 - v23;
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v102 - v25;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  unint64_t v33 = (char *)&v102 - v32;
  uint64_t v34 = a2;
  LODWORD(a2) = a3;
  char v35 = a3;
  uint64_t v36 = 0;
  unint64_t v37 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v131, v34, v35, v132);
  unint64_t v38 = v37;
  int v130 = a2;
  unint64_t v39 = v127;
  uint64_t v122 = v33;
  uint64_t v117 = v31;
  uint64_t v118 = v26;
  uint64_t v103 = v24;
  uint64_t v105 = v21;
  uint64_t v104 = v18;
  long long v132 = (void *)v37;
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v38 = (unint64_t)v132;
  }
  else
  {
    uint64_t v40 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v41 = (uint64_t)v118;
  id v42 = v117;
  if (v40)
  {
    uint64_t v128 = v27;
    if (v40 >= 1)
    {
      uint64_t v43 = 0;
      unint64_t v44 = v38 & 0xC000000000000001;
      uint64_t v123 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
      unint64_t v121 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      unint64_t v108 = (void (**)(uint64_t, char *, uint64_t))(v28 + 32);
      int v107 = (void (**)(char *, char *, uint64_t))(v28 + 16);
      if (a9 < 0.0) {
        a9 = 1.0;
      }
      long long v106 = (void (**)(char *, uint64_t))(v28 + 8);
      long long v129 = xmmword_22831E350;
      uint64_t v111 = "USD action loading";
      unint64_t v110 = (unint64_t)"named \"%s\" for node at path: %s";
      unint64_t v109 = "arReferenceByFullSchemePath";
      uint64_t v131 = v40;
      unint64_t v120 = v38 & 0xC000000000000001;
      while (1)
      {
        if (v44) {
          id v50 = (id)MEMORY[0x22A689930](v43, v38);
        }
        else {
          id v50 = *(id *)(v38 + 8 * v43 + 32);
        }
        uint64_t v51 = v50;
        id v52 = objc_msgSend(v39, sel_objectAtPath_, v50);
        if (!v52) {
          goto LABEL_32;
        }
        uint64_t v53 = v52;
        self;
        uint64_t v54 = swift_dynamicCastObjCClass();

        if (!v54) {
          goto LABEL_32;
        }
        id v55 = objc_msgSend(v51, sel_stringValue);
        if (v55)
        {
          uint64_t v56 = v119;
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v59 = v58;

          uint64_t v137 = v57;
          uint64_t v138 = v59;
          uint64_t v124 = v59;
          uint64_t v135 = 91;
          unint64_t v136 = 0xE100000000000000;
          uint64_t v133 = 0;
          unint64_t v134 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v137 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v138 = v60;
          uint64_t v135 = 93;
          unint64_t v136 = 0xE100000000000000;
          uint64_t v133 = 0;
          unint64_t v134 = 0xE000000000000000;
          uint64_t v61 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v63 = v62;
          swift_bridgeObjectRelease();
          if (*(void *)(v126 + 16)
            && (unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v61, v63), v65 = v126, (v66 & 1) != 0))
          {
            uint64_t v67 = (uint64_t *)(*(void *)(v126 + 56) + 16 * v64);
            uint64_t v68 = *v67;
            unint64_t v69 = v67[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v70 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v68, v69, v56, v65);
            swift_bridgeObjectRelease();
            if (v70)
            {
              swift_beginAccess();
              uint64_t v71 = (uint64_t)v105;
              if (static __RKEntityUUIDComponent.registration
                && REEntityGetCustomComponent()
                && RECustomComponentGetObject())
              {
                uint64_t v72 = (uint64_t)v103;
                UUID.init(uuid:)();
                uint64_t v73 = v128;
                uint64_t v74 = *v123;
                (*v123)(v72, 0, 1, v128);
                uint64_t v75 = v73;
                uint64_t v76 = (uint64_t (**)(char *, uint64_t, uint64_t))v121;
                int v77 = (*v121)(v72, 1, v75);
                uint64_t v36 = v104;
                uint64_t v41 = (uint64_t)v118;
                if (v77 == 1)
                {
                  uint64_t v78 = v128;
                  goto LABEL_42;
                }
                outlined destroy of BodyTrackingComponent?(v72, &demangling cache variable for type metadata for UUID?);
              }
              else
              {
                uint64_t v74 = *v123;
                uint64_t v72 = (uint64_t)v103;
                uint64_t v78 = v128;
                (*v123)((uint64_t)v103, 1, 1, v128);
                uint64_t v36 = v104;
                uint64_t v41 = (uint64_t)v118;
LABEL_42:
                outlined destroy of BodyTrackingComponent?(v72, &demangling cache variable for type metadata for UUID?);
                UUID.init()();
                v74(v71, 0, 1, v78);
                Entity.__interactionIdentifier.setter(v71);
                uint64_t v76 = (uint64_t (**)(char *, uint64_t, uint64_t))v121;
              }
              unint64_t v39 = v74;
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_55;
              }
              UUID.init(uuid:)();
              uint64_t v80 = v128;
              v74((uint64_t)v36, 0, 1, v128);
              uint64_t v81 = *v76;
              uint64_t result = (*v76)(v36, 1, v80);
              if (result == 1) {
                goto LABEL_56;
              }
              swift_release();
              (*v108)(v41, v36, v80);
              v74(v41, 0, 1, v80);
              swift_bridgeObjectRelease();
              id v42 = v117;
              goto LABEL_30;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v41 = (uint64_t)v118;
          id v42 = v117;
          uint64_t v79 = v121;
        }
        else
        {
          uint64_t v79 = v121;
        }
        uint64_t v80 = v128;
        (*v123)(v41, 1, 1, v128);
        swift_bridgeObjectRelease();
        uint64_t v81 = (uint64_t (*)(char *, uint64_t, uint64_t))*v79;
LABEL_30:
        if (v81((char *)v41, 1, v80) != 1)
        {
          unint64_t v85 = *v108;
          uint64_t v86 = v122;
          (*v108)((uint64_t)v122, (char *)v41, v80);
          (*v107)(v42, v86, v80);
          uint64_t v87 = v125;
          v85((uint64_t)v125, v42, v80);
          uint64_t v88 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
          uint64_t v89 = &v87[v88[5]];
          uint64_t v90 = &v87[v88[6]];
          uint64_t v91 = v88[7];
          uint64_t v92 = v88[8];
          *(float *)uint64_t v89 = a9;
          v89[4] = 0;
          *(_DWORD *)uint64_t v90 = 1065353216;
          v90[4] = 0;
          v87[v91] = v113;
          v87[v92] = v114;
          swift_storeEnumTagMultiPayload();
          unint64_t v93 = v116;
          unint64_t v94 = *v116;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t *v93 = v94;
          unint64_t v39 = v127;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v94 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v94 + 16) + 1, 1, v94);
            unint64_t *v93 = v94;
          }
          unint64_t v97 = *(void *)(v94 + 16);
          unint64_t v96 = *(void *)(v94 + 24);
          uint64_t v98 = v115;
          uint64_t v99 = (uint64_t)v125;
          unint64_t v44 = v120;
          if (v97 >= v96 >> 1)
          {
            uint64_t v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1, v94);
            uint64_t v98 = v115;
            unint64_t v94 = v101;
            uint64_t v99 = (uint64_t)v125;
            *uint64_t v116 = v94;
          }
          *(void *)(v94 + 16) = v97 + 1;
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v99, v94+ ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80))+ *(void *)(v98 + 72) * v97, type metadata accessor for __RKEntityActionSpecification);

          (*v106)(v122, v128);
          goto LABEL_11;
        }
        outlined destroy of BodyTrackingComponent?(v41, &demangling cache variable for type metadata for UUID?);
        unint64_t v39 = v127;
        unint64_t v44 = v120;
LABEL_32:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v82 = swift_allocObject();
        uint64_t v83 = (void *)v82;
        *(_OWORD *)(v82 + 16) = v129;
        unint64_t v84 = v39;
        if ((_BYTE)v130)
        {
          if (v130 == 1)
          {
            unint64_t v47 = v110 | 0x8000000000000000;
            unint64_t v45 = 0xD000000000000012;
            goto LABEL_10;
          }
          unint64_t v45 = 0xD000000000000013;
          id v46 = &v138;
        }
        else
        {
          unint64_t v45 = 0xD000000000000014;
          id v46 = (uint64_t *)&v139;
        }
        unint64_t v47 = *(v46 - 32) | 0x8000000000000000;
LABEL_10:
        *(void *)(v82 + 56) = MEMORY[0x263F8D310];
        *(void *)(v82 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v83[4] = v45;
        v83[5] = v47;
        v83[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v83[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v83[9] = v51;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v48 = v51;
        id v49 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        unint64_t v39 = v84;
LABEL_11:
        ++v43;
        unint64_t v38 = (unint64_t)v132;
        if (v131 == v43) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_55:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v39)(v36, 1, 1, v128);
LABEL_56:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, __n128 a9)
{
  long long v116 = (__int128)a9;
  unint64_t v108 = a8;
  uint64_t v109 = a7;
  uint64_t v97 = a6;
  unint64_t v110 = a5;
  uint64_t v119 = a4;
  uint64_t v106 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v107 = *(void *)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  int v114 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v93 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v93 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v93 - v23);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v93 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, (void *)v119);
  uint64_t v101 = v28;
  uint64_t v115 = v25;
  uint64_t v30 = v24;
  uint64_t v95 = v22;
  int v117 = a3;
  unint64_t v113 = v29;
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v119 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v119 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v31 = (uint64_t)v24;
  uint64_t v32 = v110;
  unint64_t v94 = v19;
  if (v119)
  {
    unint64_t v93 = v16;
    unint64_t v33 = v113;
    if (v119 >= 1)
    {
      uint64_t v34 = 0;
      unint64_t v118 = v113 & 0xC000000000000001;
      uint64_t v111 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
      uint64_t v112 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
      uint64_t v102 = (void (**)(uint64_t, char *, uint64_t))(v26 + 32);
      unint64_t v100 = (void (**)(char *, char *, uint64_t))(v26 + 16);
      long long v99 = v116;
      uint64_t v98 = (void (**)(char *, uint64_t))(v26 + 8);
      long long v116 = xmmword_22831E350;
      uint64_t v105 = "USD action loading";
      unint64_t v104 = (unint64_t)"named \"%s\" for node at path: %s";
      uint64_t v103 = "arReferenceByFullSchemePath";
      while (1)
      {
        if (v118) {
          id v40 = (id)MEMORY[0x22A689930](v34, v33);
        }
        else {
          id v40 = *(id *)(v33 + 8 * v34 + 32);
        }
        uint64_t v41 = v40;
        id v42 = objc_msgSend(v32, sel_objectAtPath_, v40, v93);
        if (!v42) {
          goto LABEL_29;
        }
        uint64_t v43 = v42;
        self;
        uint64_t v44 = swift_dynamicCastObjCClass();

        if (!v44) {
          goto LABEL_29;
        }
        id v45 = objc_msgSend(v41, sel_stringValue);
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v49 = v48;

          uint64_t v124 = v47;
          uint64_t v125 = v49;
          uint64_t v122 = 91;
          unint64_t v123 = 0xE100000000000000;
          uint64_t v120 = 0;
          unint64_t v121 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v124 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v125 = v50;
          uint64_t v122 = 93;
          unint64_t v123 = 0xE100000000000000;
          uint64_t v120 = 0;
          unint64_t v121 = 0xE000000000000000;
          uint64_t v51 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v53 = v52;
          swift_bridgeObjectRelease();
          uint64_t v54 = v109;
          id v55 = v112;
          if (*(void *)(v109 + 16)
            && (unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v53), (v57 & 1) != 0))
          {
            uint64_t v58 = (uint64_t *)(*(void *)(v54 + 56) + 16 * v56);
            uint64_t v59 = *v58;
            unint64_t v60 = v58[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v61 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v59, v60, v97, v54);
            swift_bridgeObjectRelease();
            if (v61)
            {
              uint64_t v96 = v61;
              swift_beginAccess();
              uint64_t v62 = (uint64_t)v95;
              if (static __RKEntityUUIDComponent.registration
                && (CustomComponent = REEntityGetCustomComponent(), unint64_t v64 = v111, CustomComponent)
                && RECustomComponentGetObject())
              {
                UUID.init(uuid:)();
                uint64_t v65 = *v55;
                uint64_t v66 = v115;
                uint64_t v67 = v65;
                v65(v62, 0, 1, v115);
                if ((*v64)(v62, 1, v66) == 1)
                {
                  uint64_t v68 = v115;
                  goto LABEL_39;
                }
                outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for UUID?);
              }
              else
              {
                uint64_t v67 = *v55;
                uint64_t v68 = v115;
                v67(v62, 1, 1, v115);
LABEL_39:
                outlined destroy of BodyTrackingComponent?(v62, &demangling cache variable for type metadata for UUID?);
                uint64_t v89 = (uint64_t)v94;
                UUID.init()();
                v67(v89, 0, 1, v68);
                Entity.__interactionIdentifier.setter(v89);
              }
              uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v67;
              if (!static __RKEntityUUIDComponent.registration
                || !REEntityGetCustomComponent()
                || !RECustomComponentGetObject())
              {
                goto LABEL_53;
              }
              uint64_t v90 = v93;
              UUID.init(uuid:)();
              uint64_t v70 = v115;
              v67((uint64_t)v90, 0, 1, v115);
              uint64_t v71 = *v111;
              uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*v111)(v90, 1, v70);
              if (result == 1) {
                goto LABEL_54;
              }
              swift_release();
              (*v102)(v31, v90, v70);
              v67(v31, 0, 1, v70);
              swift_bridgeObjectRelease();
              uint64_t v32 = v110;
              goto LABEL_27;
            }
            uint64_t v32 = v110;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v32 = v110;
          }
        }
        else
        {
          id v55 = v112;
        }
        unint64_t v69 = *v55;
        uint64_t v70 = v115;
        v69(v31, 1, 1, v115);
        swift_bridgeObjectRelease();
        uint64_t v71 = *v111;
LABEL_27:
        if (v71(v31, 1, v70) != 1)
        {
          uint64_t v74 = v101;
          (*v102)((uint64_t)v101, (char *)v31, v70);
          uint64_t v75 = v70;
          uint64_t v76 = v74;
          int v77 = v114;
          (*v100)(v114, v76, v75);
          uint64_t v78 = type metadata accessor for __RKEntityForceActionArguments(0);
          uint64_t v79 = &v77[*(int *)(v78 + 20)];
          uint64_t v80 = &v77[*(int *)(v78 + 24)];
          *(void *)uint64_t v79 = 0;
          *((void *)v79 + 1) = 0;
          v79[16] = 1;
          uint64_t v81 = *((void *)&v99 + 1);
          *(void *)uint64_t v80 = v99;
          *((void *)v80 + 1) = v81;
          v80[16] = 0;
          swift_storeEnumTagMultiPayload();
          uint64_t v82 = v108;
          unint64_t v83 = *v108;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v82 = v83;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, v83);
            *uint64_t v82 = v83;
          }
          unint64_t v86 = *(void *)(v83 + 16);
          unint64_t v85 = *(void *)(v83 + 24);
          uint64_t v87 = v107;
          uint64_t v88 = (uint64_t)v114;
          if (v86 >= v85 >> 1)
          {
            uint64_t v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v83);
            uint64_t v87 = v107;
            unint64_t v83 = v92;
            uint64_t v88 = (uint64_t)v114;
            *unint64_t v108 = v83;
          }
          *(void *)(v83 + 16) = v86 + 1;
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v88, v83+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(void *)(v87 + 72) * v86, type metadata accessor for __RKEntityActionSpecification);

          (*v98)(v76, v115);
          unint64_t v33 = v113;
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v31, &demangling cache variable for type metadata for UUID?);
        unint64_t v33 = v113;
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v72 = swift_allocObject();
        uint64_t v73 = (void *)v72;
        *(_OWORD *)(v72 + 16) = v116;
        if ((_BYTE)v117)
        {
          if (v117 == 1)
          {
            unint64_t v37 = v104 | 0x8000000000000000;
            unint64_t v35 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v35 = 0xD000000000000013;
          uint64_t v36 = &v126;
        }
        else
        {
          unint64_t v35 = 0xD000000000000014;
          uint64_t v36 = &v127;
        }
        unint64_t v37 = *(v36 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v72 + 56) = MEMORY[0x263F8D310];
        *(void *)(v72 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v73[4] = v35;
        v73[5] = v37;
        v73[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v73[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v73[9] = v41;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v38 = v41;
        unint64_t v39 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        if (v119 == ++v34) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_53:
    uint64_t result = v30(v93, 1, 1, v115);
LABEL_54:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(unint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, __n128 a10, __n128 a11)
{
  __n128 v125 = a11;
  long long v123 = (__int128)a10;
  unint64_t v113 = a8;
  uint64_t v122 = a7;
  uint64_t v117 = a6;
  uint64_t v106 = a5;
  unint64_t v126 = a1;
  uint64_t v127 = a4;
  uint64_t v111 = type metadata accessor for __RKEntityActionSpecification(0);
  uint64_t v112 = *(void *)(v111 - 8);
  MEMORY[0x270FA5388](v111);
  uint64_t v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v97 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v97 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v97 - v26;
  uint64_t v28 = (void *)type metadata accessor for UUID();
  uint64_t v29 = *(v28 - 1);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v126, a2, a3, v127);
  unint64_t v33 = v32;
  int v124 = a3;
  uint64_t v34 = v106;
  uint64_t v119 = v31;
  int v114 = v15;
  long long v116 = v28;
  uint64_t v115 = v27;
  uint64_t v98 = v25;
  uint64_t v97 = v22;
  long long v99 = v19;
  uint64_t v127 = (void *)v32;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v33 = (unint64_t)v127;
  }
  else
  {
    uint64_t v35 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v36 = (uint64_t)v115;
  unint64_t v37 = v116;
  uint64_t v38 = (uint64_t)v114;
  if (v35)
  {
    if (v35 >= 1)
    {
      uint64_t v39 = 0;
      unint64_t v126 = v33 & 0xC000000000000001;
      uint64_t v120 = (void **)(v29 + 56);
      unint64_t v118 = (uint64_t (**)(uint64_t, uint64_t, void *))(v29 + 48);
      uint64_t v107 = (void (**)(char *, uint64_t, void *))(v29 + 32);
      uint64_t v105 = (void (**)(uint64_t, char *, void *))(v29 + 16);
      uint64_t v103 = *((void *)&v123 + 1);
      uint64_t v104 = v123;
      unint64_t v101 = v125.n128_u64[1];
      unint64_t v102 = v125.n128_u64[0];
      unint64_t v100 = (void (**)(char *, void *))(v29 + 8);
      long long v123 = xmmword_22831E350;
      unint64_t v110 = "USD action loading";
      unint64_t v109 = (unint64_t)"named \"%s\" for node at path: %s";
      unint64_t v108 = "arReferenceByFullSchemePath";
      v125.n128_u64[0] = v35;
      id v40 = v34;
      while (1)
      {
        if (v126) {
          id v46 = (id)MEMORY[0x22A689930](v39, v33);
        }
        else {
          id v46 = *(id *)(v33 + 8 * v39 + 32);
        }
        uint64_t v47 = v46;
        id v48 = objc_msgSend(v40, sel_objectAtPath_, v46, v97);
        if (!v48) {
          goto LABEL_30;
        }
        uint64_t v49 = v48;
        self;
        uint64_t v50 = swift_dynamicCastObjCClass();

        if (!v50) {
          goto LABEL_30;
        }
        id v51 = objc_msgSend(v47, sel_stringValue);
        if (v51)
        {
          uint64_t v52 = v117;
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          uint64_t v132 = v53;
          uint64_t v133 = v55;
          uint64_t v121 = v55;
          uint64_t v130 = 91;
          unint64_t v131 = 0xE100000000000000;
          uint64_t v128 = 0;
          unint64_t v129 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v132 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v133 = v56;
          uint64_t v130 = 93;
          unint64_t v131 = 0xE100000000000000;
          uint64_t v128 = 0;
          unint64_t v129 = 0xE000000000000000;
          uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v59 = v58;
          swift_bridgeObjectRelease();
          if (*(void *)(v122 + 16)
            && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v59), v61 = v122, (v62 & 1) != 0))
          {
            uint64_t v63 = (uint64_t *)(*(void *)(v122 + 56) + 16 * v60);
            uint64_t v64 = *v63;
            unint64_t v65 = v63[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v66 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v64, v65, v52, v61);
            swift_bridgeObjectRelease();
            if (v66)
            {
              swift_beginAccess();
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v68 = v120;
                if (CustomComponent && RECustomComponentGetObject())
                {
                  uint64_t v69 = (uint64_t)v98;
                  UUID.init(uuid:)();
                  uint64_t v28 = *v68;
                  unint64_t v37 = v116;
                  ((void (*)(uint64_t, void, uint64_t, void *))*v68)(v69, 0, 1, v116);
                  int v70 = (*v118)(v69, 1, v37);
                  uint64_t v34 = v99;
                  if (v70 == 1)
                  {
                    uint64_t v71 = v69;
                    goto LABEL_42;
                  }
                  outlined destroy of BodyTrackingComponent?(v69, &demangling cache variable for type metadata for UUID?);
LABEL_43:
                  unint64_t v94 = (uint64_t (**)(void *, uint64_t, void *))v118;
                  if (!static __RKEntityUUIDComponent.registration
                    || !REEntityGetCustomComponent()
                    || !RECustomComponentGetObject())
                  {
                    goto LABEL_55;
                  }
                  UUID.init(uuid:)();
                  ((void (*)(void *, void, uint64_t, void *))v28)(v34, 0, 1, v37);
                  uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, void *))*v94;
                  uint64_t result = (*v94)(v34, 1, v37);
                  if (result == 1) {
                    goto LABEL_56;
                  }
                  swift_release();
                  uint64_t v36 = (uint64_t)v115;
                  (*v107)(v115, (uint64_t)v34, v37);
                  ((void (*)(uint64_t, void, uint64_t, void *))v28)(v36, 0, 1, v37);
                  swift_bridgeObjectRelease();
                  uint64_t v38 = (uint64_t)v114;
                  id v40 = v106;
                  goto LABEL_28;
                }
                uint64_t v28 = *v68;
                uint64_t v71 = (uint64_t)v98;
                unint64_t v37 = v116;
                ((void (*)(char *, uint64_t, uint64_t, void *))v28)(v98, 1, 1, v116);
              }
              else
              {
                uint64_t v28 = *v120;
                uint64_t v71 = (uint64_t)v98;
                uint64_t v92 = v116;
                ((void (*)(char *, uint64_t, uint64_t, void *))*v120)(v98, 1, 1, v116);
                unint64_t v37 = v92;
              }
              uint64_t v34 = v99;
LABEL_42:
              outlined destroy of BodyTrackingComponent?(v71, &demangling cache variable for type metadata for UUID?);
              uint64_t v93 = (uint64_t)v97;
              UUID.init()();
              ((void (*)(uint64_t, void, uint64_t, void *))v28)(v93, 0, 1, v37);
              Entity.__interactionIdentifier.setter(v93);
              goto LABEL_43;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v36 = (uint64_t)v115;
          unint64_t v37 = v116;
          uint64_t v38 = (uint64_t)v114;
          uint64_t v72 = v118;
        }
        else
        {
          uint64_t v72 = v118;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, void *))*v120)(v36, 1, 1, v37);
        swift_bridgeObjectRelease();
        uint64_t v73 = *v72;
LABEL_28:
        if (v73(v36, 1, v37) != 1)
        {
          uint64_t v76 = v119;
          (*v107)(v119, v36, v37);
          (*v105)(v38, v76, v37);
          int v77 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
          uint64_t v78 = v38 + v77[5];
          uint64_t v79 = v38 + v77[6];
          uint64_t v80 = v38 + v77[7];
          uint64_t v81 = v38 + v77[8];
          uint64_t v82 = v77[10];
          uint64_t v83 = v38 + v77[9];
          *(float *)uint64_t v78 = a9;
          *(unsigned char *)(v78 + 4) = 0;
          *(_DWORD *)uint64_t v79 = 0;
          *(unsigned char *)(v79 + 4) = 0;
          uint64_t v84 = v103;
          *(void *)uint64_t v80 = v104;
          *(void *)(v80 + 8) = v84;
          *(unsigned char *)(v80 + 16) = 0;
          *(_DWORD *)uint64_t v81 = 0;
          *(unsigned char *)(v81 + 4) = 0;
          unint64_t v85 = v101;
          *(void *)uint64_t v83 = v102;
          *(void *)(v83 + 8) = v85;
          *(unsigned char *)(v83 + 16) = 0;
          *(unsigned char *)(v38 + v82) = 0;
          swift_storeEnumTagMultiPayload();
          unint64_t v86 = v113;
          unint64_t v87 = *v113;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t *v86 = v87;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v87 + 16) + 1, 1, v87);
            unint64_t *v86 = v87;
          }
          unint64_t v90 = *(void *)(v87 + 16);
          unint64_t v89 = *(void *)(v87 + 24);
          uint64_t v91 = v112;
          if (v90 >= v89 >> 1)
          {
            uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1, v87);
            uint64_t v91 = v112;
            unint64_t v87 = v96;
            *unint64_t v113 = v96;
          }
          *(void *)(v87 + 16) = v90 + 1;
          _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(v38, v87+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(void *)(v91 + 72) * v90, type metadata accessor for __RKEntityActionSpecification);

          (*v100)(v119, v37);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v36, &demangling cache variable for type metadata for UUID?);
LABEL_30:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v74 = swift_allocObject();
        uint64_t v75 = (void *)v74;
        *(_OWORD *)(v74 + 16) = v123;
        if ((_BYTE)v124)
        {
          if (v124 == 1)
          {
            unint64_t v43 = v109 | 0x8000000000000000;
            unint64_t v41 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v41 = 0xD000000000000013;
          id v42 = &v133;
        }
        else
        {
          unint64_t v41 = 0xD000000000000014;
          id v42 = (uint64_t *)&v134;
        }
        unint64_t v43 = *(v42 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v74 + 56) = MEMORY[0x263F8D310];
        *(void *)(v74 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v75[4] = v41;
        v75[5] = v43;
        v75[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v75[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v75[9] = v47;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v44 = v47;
        id v45 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v39;
        unint64_t v33 = (unint64_t)v127;
        if (v125.n128_u64[0] == v39) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_55:
    uint64_t result = ((uint64_t (*)(void *, uint64_t, uint64_t, void *))v28)(v34, 1, 1, v37);
LABEL_56:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v83 = a8;
  uint64_t v84 = a7;
  uint64_t v74 = a6;
  unint64_t v85 = a5;
  uint64_t v93 = a4;
  uint64_t v82 = a10;
  uint64_t v81 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v69 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v69 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v69 - v23;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v93);
  unint64_t v30 = v29;
  *(void *)&long long v89 = v26;
  uint64_t v76 = v28;
  uint64_t v72 = v22;
  uint64_t v73 = v19;
  int v90 = a3;
  uint64_t v93 = (void *)v29;
  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v30 = (unint64_t)v93;
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v32 = v85;
  uint64_t v33 = (uint64_t)v24;
  if (v31)
  {
    uint64_t v71 = v16;
    if (v31 >= 1)
    {
      uint64_t v24 = (char *)v25;
      uint64_t v34 = 0;
      unint64_t v92 = v30 & 0xC000000000000001;
      unint64_t v86 = (unsigned int (**)(uint64_t, uint64_t, char *))(v89 + 48);
      unint64_t v87 = (char **)(v89 + 56);
      int v77 = (void (**)(void))(v89 + 32);
      uint64_t v75 = (void (**)(uint64_t, char *))(v89 + 8);
      long long v89 = xmmword_22831E350;
      uint64_t v80 = "USD action loading";
      unint64_t v79 = (unint64_t)"named \"%s\" for node at path: %s";
      uint64_t v78 = "arReferenceByFullSchemePath";
      uint64_t v70 = v33;
      uint64_t v91 = v31;
      while (1)
      {
        if (v92) {
          id v40 = (id)MEMORY[0x22A689930](v34, v30);
        }
        else {
          id v40 = *(id *)(v30 + 8 * v34 + 32);
        }
        unint64_t v41 = v40;
        id v42 = objc_msgSend(v32, sel_objectAtPath_, v40);
        if (!v42) {
          goto LABEL_29;
        }
        unint64_t v43 = v42;
        self;
        uint64_t v44 = swift_dynamicCastObjCClass();

        if (!v44) {
          goto LABEL_29;
        }
        id v45 = objc_msgSend(v41, sel_stringValue);
        if (v45)
        {
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v48 = v47;

          uint64_t v98 = v46;
          uint64_t v99 = v48;
          uint64_t v88 = v48;
          uint64_t v96 = 91;
          unint64_t v97 = 0xE100000000000000;
          uint64_t v94 = 0;
          unint64_t v95 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v98 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v99 = v49;
          uint64_t v96 = 93;
          unint64_t v97 = 0xE100000000000000;
          uint64_t v94 = 0;
          unint64_t v95 = 0xE000000000000000;
          uint64_t v50 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v52 = v51;
          swift_bridgeObjectRelease();
          uint64_t v53 = v84;
          if (*(void *)(v84 + 16) && (unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v52), (v55 & 1) != 0))
          {
            uint64_t v56 = (uint64_t *)(*(void *)(v53 + 56) + 16 * v54);
            uint64_t v58 = *v56;
            unint64_t v57 = v56[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v59 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v58, v57, v74, v53);
            swift_bridgeObjectRelease();
            if (v59)
            {
              swift_beginAccess();
              unint64_t v32 = v85;
              uint64_t v60 = (uint64_t)v73;
              if (static __RKEntityUUIDComponent.registration
                && REEntityGetCustomComponent()
                && RECustomComponentGetObject())
              {
                uint64_t v61 = (uint64_t)v72;
                UUID.init(uuid:)();
                uint64_t v28 = *v87;
                ((void (*)(uint64_t, void, uint64_t, char *))*v87)(v61, 0, 1, v24);
                if ((*v86)(v61, 1, v24) == 1)
                {
LABEL_35:
                  outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for UUID?);
                  UUID.init()();
                  ((void (*)(uint64_t, void, uint64_t, char *))v28)(v60, 0, 1, v24);
                  Entity.__interactionIdentifier.setter(v60);
                }
                else
                {
                  outlined destroy of BodyTrackingComponent?(v61, &demangling cache variable for type metadata for UUID?);
                }
                if (!static __RKEntityUUIDComponent.registration
                  || !REEntityGetCustomComponent()
                  || !RECustomComponentGetObject())
                {
                  goto LABEL_49;
                }
                uint64_t v67 = v71;
                UUID.init(uuid:)();
                ((void (*)(char *, void, uint64_t, char *))v28)(v67, 0, 1, v24);
                uint64_t v63 = *v86;
                uint64_t result = ((uint64_t (*)(char *, uint64_t, char *))*v86)(v67, 1, v24);
                if (result == 1) {
                  goto LABEL_50;
                }
                swift_release();
                uint64_t v33 = v70;
                (*v77)();
                ((void (*)(uint64_t, void, uint64_t, char *))v28)(v33, 0, 1, v24);
                swift_bridgeObjectRelease();
                goto LABEL_27;
              }
              uint64_t v28 = *v87;
              uint64_t v61 = (uint64_t)v72;
              ((void (*)(char *, uint64_t, uint64_t, char *))*v87)(v72, 1, 1, v24);
              goto LABEL_35;
            }
            unint64_t v32 = v85;
            char v62 = v86;
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v32 = v85;
            char v62 = v86;
          }
        }
        else
        {
          char v62 = v86;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))*v87)(v33, 1, 1, v24);
        swift_bridgeObjectRelease();
        uint64_t v63 = *v62;
LABEL_27:
        if (v63(v33, 1, v24) != 1)
        {
          uint64_t v66 = (uint64_t)v76;
          ((void (*)(char *, uint64_t, char *))*v77)(v76, v33, v24);
          closure #1 in static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(v66, v83, v81, v82);

          (*v75)(v66, v24);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v33, &demangling cache variable for type metadata for UUID?);
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v64 = swift_allocObject();
        unint64_t v65 = (void *)v64;
        *(_OWORD *)(v64 + 16) = v89;
        if ((_BYTE)v90)
        {
          if (v90 == 1)
          {
            unint64_t v37 = v79 | 0x8000000000000000;
            unint64_t v35 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v35 = 0xD000000000000013;
          uint64_t v36 = &v100;
        }
        else
        {
          unint64_t v35 = 0xD000000000000014;
          uint64_t v36 = &v101;
        }
        unint64_t v37 = *(v36 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v64 + 56) = MEMORY[0x263F8D310];
        *(void *)(v64 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v65[4] = v35;
        v65[5] = v37;
        v65[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v65[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v65[9] = v41;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v38 = v41;
        uint64_t v39 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        unint64_t v30 = (unint64_t)v93;
        if (v91 == ++v34) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_49:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, char *))v28)(v71, 1, 1, v24);
LABEL_50:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, float a10, __n128 a11)
{
  __n128 v95 = a11;
  uint64_t v94 = a8;
  uint64_t v96 = a7;
  uint64_t v87 = a6;
  uint64_t v98 = a5;
  uint64_t v105 = a4;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v22 = (char *)&v83 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)&v83 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v83 - v26;
  uint64_t v28 = (void *)type metadata accessor for UUID();
  uint64_t v29 = *(v28 - 1);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v32 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v105);
  unint64_t v33 = v32;
  long long v89 = v31;
  unint64_t v85 = v25;
  uint64_t v83 = v22;
  unint64_t v86 = v19;
  int v102 = a3;
  uint64_t v99 = v27;
  if (v32 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v35 = v98;
  uint64_t v105 = v28;
  if (v34)
  {
    if (v34 >= 1)
    {
      uint64_t v36 = 0;
      unint64_t v104 = v33 & 0xC000000000000001;
      uint64_t v100 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v29 + 56);
      unint64_t v97 = (unsigned int (**)(uint64_t, uint64_t, void *))(v29 + 48);
      int v90 = (void (**)(char *, char *, void *))(v29 + 32);
      uint64_t v88 = (void (**)(uint64_t, void *))(v29 + 8);
      long long v101 = xmmword_22831E350;
      uint64_t v93 = "USD action loading";
      unint64_t v92 = (unint64_t)"named \"%s\" for node at path: %s";
      uint64_t v91 = "arReferenceByFullSchemePath";
      uint64_t v103 = (void (*)(void, void, void, void))v33;
      while (1)
      {
        if (v104) {
          id v42 = (id)MEMORY[0x22A689930](v36, v33);
        }
        else {
          id v42 = *(id *)(v33 + 8 * v36 + 32);
        }
        unint64_t v43 = v42;
        id v44 = objc_msgSend(v35, sel_objectAtPath_, v42, v83, v84);
        if (!v44) {
          goto LABEL_29;
        }
        id v45 = v44;
        self;
        uint64_t v46 = swift_dynamicCastObjCClass();

        if (!v46) {
          goto LABEL_29;
        }
        id v47 = objc_msgSend(v43, sel_stringValue);
        if (v47)
        {
          uint64_t v48 = v47;
          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v51 = v50;

          uint64_t v110 = v49;
          uint64_t v111 = v51;
          uint64_t v108 = 91;
          unint64_t v109 = 0xE100000000000000;
          uint64_t v106 = 0;
          unint64_t v107 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v110 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v111 = v52;
          uint64_t v108 = 93;
          unint64_t v109 = 0xE100000000000000;
          uint64_t v106 = 0;
          unint64_t v107 = 0xE000000000000000;
          uint64_t v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v55 = v54;
          swift_bridgeObjectRelease();
          uint64_t v56 = v96;
          if (*(void *)(v96 + 16) && (unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v55), (v58 & 1) != 0))
          {
            uint64_t v59 = (uint64_t *)(*(void *)(v56 + 56) + 16 * v57);
            uint64_t v61 = *v59;
            unint64_t v60 = v59[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v62 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v61, v60, v87, v56);
            swift_bridgeObjectRelease();
            if (v62)
            {
              swift_beginAccess();
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v64 = v97;
                if (CustomComponent && RECustomComponentGetObject())
                {
                  uint64_t v65 = (uint64_t)v85;
                  UUID.init(uuid:)();
                  uint64_t v66 = v105;
                  uint64_t v67 = *v100;
                  (*v100)(v65, 0, 1, v105);
                  if ((*v64)(v65, 1, v66) == 1)
                  {
                    uint64_t v68 = v65;
                    goto LABEL_36;
                  }
                  outlined destroy of BodyTrackingComponent?(v65, &demangling cache variable for type metadata for UUID?);
LABEL_37:
                  unint64_t v33 = (unint64_t)v67;
                  uint64_t v84 = v51;
                  if (!static __RKEntityUUIDComponent.registration
                    || !REEntityGetCustomComponent()
                    || !RECustomComponentGetObject())
                  {
                    goto LABEL_49;
                  }
                  unint64_t v79 = v86;
                  UUID.init(uuid:)();
                  uint64_t v80 = v105;
                  ((void (*)(char *, void, uint64_t, void *))v33)(v79, 0, 1, v105);
                  uint64_t v81 = (void (*)(uint64_t, void, uint64_t, void *))v33;
                  uint64_t v70 = *v64;
                  uint64_t result = ((uint64_t (*)(char *, uint64_t, void *))*v64)(v79, 1, v80);
                  if (result == 1) {
                    goto LABEL_50;
                  }
                  swift_release();
                  uint64_t v69 = (uint64_t)v99;
                  (*v90)(v99, v79, v80);
                  v81(v69, 0, 1, v80);
                  swift_bridgeObjectRelease();
                  unint64_t v35 = v98;
                  goto LABEL_27;
                }
                uint64_t v67 = *v100;
                uint64_t v76 = (uint64_t)v85;
                (*v100)((uint64_t)v85, 1, 1, v105);
                uint64_t v68 = v76;
              }
              else
              {
                uint64_t v67 = *v100;
                uint64_t v77 = (uint64_t)v85;
                (*v100)((uint64_t)v85, 1, 1, v105);
                uint64_t v68 = v77;
                uint64_t v64 = v97;
              }
LABEL_36:
              outlined destroy of BodyTrackingComponent?(v68, &demangling cache variable for type metadata for UUID?);
              uint64_t v78 = (uint64_t)v83;
              UUID.init()();
              v67(v78, 0, 1, v105);
              Entity.__interactionIdentifier.setter(v78);
              goto LABEL_37;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          unint64_t v35 = v98;
        }
        uint64_t v69 = (uint64_t)v99;
        (*v100)((uint64_t)v99, 1, 1, v105);
        swift_bridgeObjectRelease();
        uint64_t v70 = *v97;
LABEL_27:
        if (v70(v69, 1, v105) != 1)
        {
          uint64_t v73 = v69;
          uint64_t v74 = (uint64_t)v89;
          uint64_t v75 = v105;
          (*v90)(v89, (char *)v73, v105);
          closure #1 in static __RKEntityActionSpecification.generateSpinActionSpecifications(decodeContext:)(v74, v94, a9, a10, v95);

          (*v88)(v74, v75);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v69, &demangling cache variable for type metadata for UUID?);
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v71 = swift_allocObject();
        uint64_t v72 = (void *)v71;
        *(_OWORD *)(v71 + 16) = v101;
        if ((_BYTE)v102)
        {
          if (v102 == 1)
          {
            unint64_t v39 = v92 | 0x8000000000000000;
            unint64_t v37 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v37 = 0xD000000000000013;
          id v38 = &v112;
        }
        else
        {
          unint64_t v37 = 0xD000000000000014;
          id v38 = &v113;
        }
        unint64_t v39 = *(v38 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v71 + 56) = MEMORY[0x263F8D310];
        *(void *)(v71 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v72[4] = v37;
        v72[5] = v39;
        v72[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v72[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v72[9] = v43;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v40 = v43;
        unint64_t v41 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        unint64_t v33 = (unint64_t)v103;
        if (v34 == ++v36) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_49:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))v33)(v86, 1, 1, v105);
LABEL_50:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, double a9, double a10, float a11, unsigned __int8 a12, unsigned __int8 a13, unsigned __int8 a14)
{
  uint64_t v98 = a8;
  uint64_t v99 = a7;
  uint64_t v88 = a6;
  uint64_t v100 = a5;
  uint64_t v108 = a4;
  LODWORD(v103) = a14;
  LODWORD(v106) = a13;
  int v97 = a12;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v23 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v83 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (void (*)(uint64_t, uint64_t, uint64_t, void *))((char *)&v83 - v28);
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v83 - v30;
  unint64_t v32 = (void *)type metadata accessor for UUID();
  uint64_t v33 = *(v32 - 1);
  MEMORY[0x270FA5388](v32);
  unint64_t v35 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v36 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, a2, a3, v108);
  unint64_t v37 = v36;
  *(void *)&long long v104 = v33;
  char v38 = v103;
  unint64_t v92 = v35;
  uint64_t v87 = v29;
  unint64_t v86 = v23;
  int v105 = a3;
  unint64_t v85 = v26;
  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v40 = v100;
  uint64_t v108 = v32;
  if (v39)
  {
    if (v39 >= 1)
    {
      uint64_t v41 = 0;
      unint64_t v107 = v37 & 0xC000000000000001;
      int v102 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v104 + 56);
      long long v101 = (unsigned int (**)(uint64_t, uint64_t, void *))(v104 + 48);
      uint64_t v93 = (void (**)(char *, char *, void *))(v104 + 32);
      uint64_t v91 = (void (**)(uint64_t, void *))(v104 + 8);
      long long v104 = xmmword_22831E350;
      uint64_t v96 = "USD action loading";
      unint64_t v95 = (unint64_t)"named \"%s\" for node at path: %s";
      uint64_t v94 = "arReferenceByFullSchemePath";
      int v90 = v106 & 1;
      int v89 = v38 & 1;
      unint64_t v106 = v37;
      uint64_t v84 = v31;
      while (1)
      {
        if (v107) {
          id v47 = (id)MEMORY[0x22A689930](v41, v37);
        }
        else {
          id v47 = *(id *)(v37 + 8 * v41 + 32);
        }
        uint64_t v48 = v47;
        id v49 = objc_msgSend(v40, sel_objectAtPath_, v47);
        if (!v49) {
          goto LABEL_28;
        }
        uint64_t v50 = v49;
        self;
        uint64_t v51 = swift_dynamicCastObjCClass();

        if (!v51) {
          goto LABEL_28;
        }
        id v52 = objc_msgSend(v48, sel_stringValue);
        if (v52)
        {
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          uint64_t v113 = v53;
          uint64_t v114 = v55;
          uint64_t v103 = v55;
          uint64_t v111 = 91;
          unint64_t v112 = 0xE100000000000000;
          uint64_t v109 = 0;
          unint64_t v110 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v113 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v114 = v56;
          uint64_t v111 = 93;
          unint64_t v112 = 0xE100000000000000;
          uint64_t v109 = 0;
          unint64_t v110 = 0xE000000000000000;
          uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v59 = v58;
          swift_bridgeObjectRelease();
          uint64_t v60 = v99;
          if (*(void *)(v99 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v59), (v62 & 1) != 0))
          {
            uint64_t v63 = (uint64_t *)(*(void *)(v60 + 56) + 16 * v61);
            uint64_t v65 = *v63;
            unint64_t v64 = v63[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v66 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v65, v64, v88, v60);
            swift_bridgeObjectRelease();
            if (v66)
            {
              swift_beginAccess();
              uint64_t v67 = (uint64_t)v87;
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v69 = v101;
                if (!CustomComponent || !RECustomComponentGetObject())
                {
                  uint64_t v29 = *v102;
                  (*v102)(v67, 1, 1, v108);
                  goto LABEL_36;
                }
                UUID.init(uuid:)();
                uint64_t v70 = v108;
                uint64_t v29 = *v102;
                (*v102)(v67, 0, 1, v108);
                if ((*v69)(v67, 1, v70) == 1)
                {
LABEL_36:
                  outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
                  uint64_t v78 = (uint64_t)v85;
                  UUID.init()();
                  v29(v78, 0, 1, v108);
                  Entity.__interactionIdentifier.setter(v78);
                }
                else
                {
                  outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for UUID?);
                }
                if (!static __RKEntityUUIDComponent.registration
                  || !REEntityGetCustomComponent()
                  || !RECustomComponentGetObject())
                {
                  goto LABEL_49;
                }
                unint64_t v79 = v86;
                UUID.init(uuid:)();
                uint64_t v80 = v108;
                v29((uint64_t)v79, 0, 1, v108);
                uint64_t v71 = *v101;
                uint64_t result = ((uint64_t (*)(char *, uint64_t, void *))*v101)(v79, 1, v80);
                if (result == 1) {
                  goto LABEL_50;
                }
                swift_release();
                uint64_t v82 = v84;
                (*v93)(v84, v79, v80);
                v29((uint64_t)v82, 0, 1, v80);
                uint64_t v31 = v82;
                swift_bridgeObjectRelease();
                id v40 = v100;
                goto LABEL_26;
              }
              uint64_t v29 = *v102;
              (*v102)((uint64_t)v87, 1, 1, v108);
              goto LABEL_36;
            }
            id v40 = v100;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v40 = v100;
          }
        }
        (*v102)((uint64_t)v31, 1, 1, v108);
        swift_bridgeObjectRelease();
        uint64_t v71 = *v101;
LABEL_26:
        if (v71((uint64_t)v31, 1, v108) != 1)
        {
          uint64_t v74 = (uint64_t)v92;
          uint64_t v75 = v40;
          uint64_t v76 = v108;
          (*v93)(v92, v31, v108);
          closure #1 in static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(v74, v98, v97, v90, v89, a9, a10, a11);

          uint64_t v77 = v76;
          id v40 = v75;
          (*v91)(v74, v77);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for UUID?);
LABEL_28:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v72 = swift_allocObject();
        uint64_t v73 = (void *)v72;
        *(_OWORD *)(v72 + 16) = v104;
        if ((_BYTE)v105)
        {
          if (v105 == 1)
          {
            unint64_t v44 = v95 | 0x8000000000000000;
            unint64_t v42 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v42 = 0xD000000000000013;
          unint64_t v43 = &v115;
        }
        else
        {
          unint64_t v42 = 0xD000000000000014;
          unint64_t v43 = &v116;
        }
        unint64_t v44 = *(v43 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v72 + 56) = MEMORY[0x263F8D310];
        *(void *)(v72 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v73[4] = v42;
        v73[5] = v44;
        v73[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v73[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v73[9] = v48;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v45 = v48;
        uint64_t v46 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v41;
        unint64_t v37 = v106;
        if (v39 == v41) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_49:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))v29)(v86, 1, 1, v108);
LABEL_50:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, unint64_t *a8, __n128 a9, __n128 a10, __n128 a11, float a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, uint64_t a16)
{
  uint64_t v103 = a8;
  uint64_t v104 = a7;
  uint64_t v89 = a6;
  unint64_t v106 = a5;
  uint64_t v114 = a4;
  __n128 v102 = a11;
  __n128 v101 = a10;
  __n128 v100 = a9;
  uint64_t v99 = a16;
  int v98 = a15;
  int v97 = a14;
  LODWORD(v113) = a13;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v23 = (char *)&v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v26 = (char *)&v85 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v85 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v85 - v30;
  unint64_t v32 = (void *)type metadata accessor for UUID();
  uint64_t v33 = *(v32 - 1);
  MEMORY[0x270FA5388](v32);
  unint64_t v35 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  LODWORD(a1) = a3;
  unint64_t v37 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(v36, a2, a3, v114);
  unint64_t v38 = v37;
  unint64_t v92 = v35;
  unint64_t v85 = v29;
  uint64_t v87 = v26;
  unint64_t v86 = v23;
  int v110 = a1;
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v40 = v106;
  uint64_t v114 = v32;
  if (v39)
  {
    if (v39 >= 1)
    {
      uint64_t v41 = 0;
      int v91 = v113 & 1;
      unint64_t v113 = v38 & 0xC000000000000001;
      unint64_t v107 = (unint64_t *)(v33 + 56);
      int v105 = (unsigned int (**)(uint64_t, uint64_t, void *))(v33 + 48);
      uint64_t v93 = (void (**)(char *, char *, void *))(v33 + 32);
      int v90 = (void (**)(uint64_t, void *))(v33 + 8);
      long long v109 = xmmword_22831E350;
      uint64_t v96 = "USD action loading";
      unint64_t v95 = (unint64_t)"named \"%s\" for node at path: %s";
      uint64_t v94 = "arReferenceByFullSchemePath";
      uint64_t v111 = v39;
      unint64_t v112 = (void (*)(void, void, void, void))v38;
      while (1)
      {
        if (v113) {
          id v47 = (id)MEMORY[0x22A689930](v41, v38);
        }
        else {
          id v47 = *(id *)(v38 + 8 * v41 + 32);
        }
        uint64_t v48 = v47;
        id v49 = objc_msgSend(v40, sel_objectAtPath_, v47, v85);
        if (!v49) {
          goto LABEL_29;
        }
        uint64_t v50 = v49;
        self;
        uint64_t v51 = swift_dynamicCastObjCClass();

        if (!v51) {
          goto LABEL_29;
        }
        id v52 = objc_msgSend(v48, sel_stringValue);
        if (v52)
        {
          uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v55 = v54;

          uint64_t v119 = v53;
          uint64_t v120 = v55;
          uint64_t v108 = v55;
          uint64_t v117 = 91;
          unint64_t v118 = 0xE100000000000000;
          uint64_t v115 = 0;
          unint64_t v116 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v119 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v120 = v56;
          uint64_t v117 = 93;
          unint64_t v118 = 0xE100000000000000;
          uint64_t v115 = 0;
          unint64_t v116 = 0xE000000000000000;
          uint64_t v57 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v59 = v58;
          swift_bridgeObjectRelease();
          uint64_t v60 = v104;
          if (*(void *)(v104 + 16)
            && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v59), (v62 & 1) != 0))
          {
            uint64_t v63 = (uint64_t *)(*(void *)(v60 + 56) + 16 * v61);
            uint64_t v65 = *v63;
            unint64_t v64 = v63[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v66 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v65, v64, v89, v60);
            swift_bridgeObjectRelease();
            if (v66)
            {
              uint64_t v88 = v66;
              swift_beginAccess();
              uint64_t v67 = v106;
              uint64_t v68 = (uint64_t)v87;
              uint64_t v69 = v107;
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v71 = v105;
                if (CustomComponent && RECustomComponentGetObject())
                {
                  uint64_t v72 = (uint64_t)v85;
                  UUID.init(uuid:)();
                  uint64_t v73 = v114;
                  unint64_t v38 = *v69;
                  ((void (*)(uint64_t, void, uint64_t, void *))*v69)(v72, 0, 1, v114);
                  if ((*v71)(v72, 1, v73) == 1)
                  {
                    uint64_t v74 = v72;
                    goto LABEL_37;
                  }
                  outlined destroy of BodyTrackingComponent?(v72, &demangling cache variable for type metadata for UUID?);
LABEL_38:
                  if (!static __RKEntityUUIDComponent.registration) {
                    goto LABEL_50;
                  }
                  uint64_t v81 = v31;
                  if (!REEntityGetCustomComponent() || !RECustomComponentGetObject()) {
                    goto LABEL_50;
                  }
                  uint64_t v82 = v86;
                  UUID.init(uuid:)();
                  uint64_t v83 = v114;
                  ((void (*)(char *, void, uint64_t, void *))v38)(v82, 0, 1, v114);
                  uint64_t v76 = *v71;
                  uint64_t result = ((uint64_t (*)(char *, uint64_t, void *))*v71)(v82, 1, v83);
                  if (result == 1) {
                    goto LABEL_51;
                  }
                  swift_release();
                  (*v93)(v81, v82, v83);
                  ((void (*)(char *, void, uint64_t, void *))v38)(v81, 0, 1, v83);
                  uint64_t v31 = v81;
                  swift_bridgeObjectRelease();
                  id v40 = v67;
                  goto LABEL_27;
                }
                unint64_t v38 = *v69;
                uint64_t v74 = (uint64_t)v85;
                ((void (*)(char *, uint64_t, uint64_t, void *))v38)(v85, 1, 1, v114);
              }
              else
              {
                unint64_t v38 = *v107;
                uint64_t v74 = (uint64_t)v85;
                ((void (*)(char *, uint64_t, uint64_t, void *))*v107)(v85, 1, 1, v114);
                uint64_t v71 = v105;
              }
LABEL_37:
              outlined destroy of BodyTrackingComponent?(v74, &demangling cache variable for type metadata for UUID?);
              UUID.init()();
              ((void (*)(uint64_t, void, uint64_t, void *))v38)(v68, 0, 1, v114);
              Entity.__interactionIdentifier.setter(v68);
              goto LABEL_38;
            }
            id v40 = v106;
            uint64_t v75 = (void (**)(char *, uint64_t, uint64_t, void *))v107;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v40 = v106;
            uint64_t v75 = (void (**)(char *, uint64_t, uint64_t, void *))v107;
          }
        }
        else
        {
          uint64_t v75 = (void (**)(char *, uint64_t, uint64_t, void *))v107;
        }
        (*v75)(v31, 1, 1, v114);
        swift_bridgeObjectRelease();
        uint64_t v76 = *v105;
LABEL_27:
        if (v76((uint64_t)v31, 1, v114) != 1)
        {
          uint64_t v79 = (uint64_t)v92;
          uint64_t v80 = v114;
          (*v93)(v92, v31, v114);
          closure #1 in static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(v79, v103, v91, v97, v98, v99, v100, v101, v102, a12);

          (*v90)(v79, v80);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for UUID?);
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v77 = swift_allocObject();
        uint64_t v78 = (void *)v77;
        *(_OWORD *)(v77 + 16) = v109;
        if ((_BYTE)v110)
        {
          if (v110 == 1)
          {
            unint64_t v44 = v95 | 0x8000000000000000;
            unint64_t v42 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v42 = 0xD000000000000013;
          unint64_t v43 = &v120;
        }
        else
        {
          unint64_t v42 = 0xD000000000000014;
          unint64_t v43 = (uint64_t *)&v121;
        }
        unint64_t v44 = *(v43 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v77 + 56) = MEMORY[0x263F8D310];
        *(void *)(v77 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v78[4] = v42;
        v78[5] = v44;
        v78[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v78[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v78[9] = v48;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v45 = v48;
        uint64_t v46 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        unint64_t v38 = (unint64_t)v112;
        if (v111 == ++v41) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_50:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, void *))v38)(v86, 1, 1, v114);
LABEL_51:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, float a10, uint64_t a11, void **a12, unint64_t *a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16)
{
  uint64_t v104 = a8;
  uint64_t v105 = a7;
  uint64_t v91 = a6;
  unint64_t v107 = a5;
  uint64_t v114 = a4;
  int v103 = a16;
  int v102 = a15;
  int v101 = a14;
  int v98 = a13;
  __n128 v100 = a12;
  uint64_t v99 = a11;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  uint64_t v27 = (char *)&v87 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v30 = (char *)&v87 - v29;
  MEMORY[0x270FA5388](v28);
  unint64_t v32 = (char *)&v87 - v31;
  uint64_t v33 = (void *)type metadata accessor for UUID();
  uint64_t v34 = *(v33 - 1);
  MEMORY[0x270FA5388](v33);
  uint64_t v36 = (char *)&v87 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a2;
  uint64_t v38 = 0;
  uint64_t v39 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(a1, v37, a3, v114);
  uint64_t v40 = v39;
  uint64_t v93 = v36;
  int v90 = v30;
  uint64_t v87 = v27;
  uint64_t v89 = v24;
  int v111 = a3;
  uint64_t v108 = v32;
  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0) {
      uint64_t v38 = v39;
    }
    else {
      uint64_t v38 = v39 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v42 = v107;
  uint64_t v114 = v33;
  if (v41)
  {
    if (v41 >= 1)
    {
      uint64_t v43 = 0;
      unint64_t v113 = v40 & 0xC000000000000001;
      long long v109 = (void (**)(uint64_t, uint64_t, uint64_t, void *))(v34 + 56);
      unint64_t v106 = (unsigned int (**)(uint64_t, uint64_t, void *))(v34 + 48);
      uint64_t v94 = (void (**)(char *, uint64_t, void *))(v34 + 32);
      unint64_t v92 = (void (**)(uint64_t, void *))(v34 + 8);
      long long v110 = xmmword_22831E350;
      int v97 = "USD action loading";
      unint64_t v96 = (unint64_t)"named \"%s\" for node at path: %s";
      unint64_t v95 = "arReferenceByFullSchemePath";
      uint64_t v112 = v40;
      while (1)
      {
        if (v113) {
          id v49 = (id)MEMORY[0x22A689930](v43, v40);
        }
        else {
          id v49 = *(id *)(v40 + 8 * v43 + 32);
        }
        uint64_t v50 = v49;
        id v51 = objc_msgSend(v42, sel_objectAtPath_, v49, v87, v88);
        if (!v51) {
          goto LABEL_29;
        }
        id v52 = v51;
        self;
        uint64_t v53 = swift_dynamicCastObjCClass();

        if (!v53) {
          goto LABEL_29;
        }
        id v54 = objc_msgSend(v50, sel_stringValue);
        if (v54)
        {
          uint64_t v55 = v54;
          uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v58 = v57;

          uint64_t v119 = v56;
          uint64_t v120 = v58;
          uint64_t v117 = 91;
          unint64_t v118 = 0xE100000000000000;
          uint64_t v115 = 0;
          unint64_t v116 = 0xE000000000000000;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v119 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v120 = (void (*)(uint64_t, uint64_t, uint64_t, void *))v59;
          uint64_t v117 = 93;
          unint64_t v118 = 0xE100000000000000;
          uint64_t v115 = 0;
          unint64_t v116 = 0xE000000000000000;
          uint64_t v60 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v62 = v61;
          swift_bridgeObjectRelease();
          uint64_t v63 = v105;
          if (*(void *)(v105 + 16)
            && (unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v60, v62), (v65 & 1) != 0))
          {
            uint64_t v66 = (uint64_t *)(*(void *)(v63 + 56) + 16 * v64);
            uint64_t v68 = *v66;
            unint64_t v67 = v66[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            uint64_t v69 = specialized USDDecodableContext.entityFromEntityStringPath(entityStringPath:)(v68, v67, v91, v63);
            swift_bridgeObjectRelease();
            if (v69)
            {
              swift_beginAccess();
              if (static __RKEntityUUIDComponent.registration)
              {
                uint64_t CustomComponent = REEntityGetCustomComponent();
                uint64_t v71 = v106;
                if (CustomComponent && RECustomComponentGetObject())
                {
                  uint64_t v72 = (uint64_t)v90;
                  UUID.init(uuid:)();
                  uint64_t v73 = v114;
                  uint64_t v88 = *v109;
                  v88(v72, 0, 1, v114);
                  if ((*v71)(v72, 1, v73) == 1)
                  {
                    uint64_t v74 = (uint64_t)v90;
                    uint64_t v75 = v88;
                    goto LABEL_36;
                  }
                  outlined destroy of BodyTrackingComponent?((uint64_t)v90, &demangling cache variable for type metadata for UUID?);
                  uint64_t v24 = (char *)v88;
LABEL_37:
                  uint64_t v88 = v58;
                  uint64_t v38 = (uint64_t)v89;
                  if (!static __RKEntityUUIDComponent.registration
                    || !REEntityGetCustomComponent()
                    || !RECustomComponentGetObject())
                  {
                    goto LABEL_52;
                  }
                  UUID.init(uuid:)();
                  uint64_t v84 = v114;
                  ((void (*)(uint64_t, void, uint64_t, void *))v24)(v38, 0, 1, v114);
                  unint64_t v85 = (void (*)(uint64_t, void, uint64_t, void *))v24;
                  uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, void *))*v71;
                  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, void *))*v71)(v38, 1, v84);
                  if (result == 1) {
                    goto LABEL_53;
                  }
                  swift_release();
                  uint64_t v76 = (uint64_t)v108;
                  (*v94)(v108, v38, v84);
                  v85(v76, 0, 1, v84);
                  swift_bridgeObjectRelease();
                  unint64_t v42 = v107;
                  goto LABEL_27;
                }
                uint64_t v75 = *v109;
                uint64_t v74 = (uint64_t)v90;
                (*v109)((uint64_t)v90, 1, 1, v114);
              }
              else
              {
                uint64_t v75 = *v109;
                uint64_t v74 = (uint64_t)v90;
                (*v109)((uint64_t)v90, 1, 1, v114);
                uint64_t v71 = v106;
              }
LABEL_36:
              outlined destroy of BodyTrackingComponent?(v74, &demangling cache variable for type metadata for UUID?);
              uint64_t v83 = (uint64_t)v87;
              UUID.init()();
              v75(v83, 0, 1, v114);
              Entity.__interactionIdentifier.setter(v83);
              uint64_t v24 = (char *)v75;
              goto LABEL_37;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          unint64_t v42 = v107;
        }
        uint64_t v76 = (uint64_t)v108;
        (*v109)((uint64_t)v108, 1, 1, v114);
        swift_bridgeObjectRelease();
        uint64_t v77 = (uint64_t (*)(uint64_t, uint64_t, void *))*v106;
LABEL_27:
        if (v77(v76, 1, v114) != 1)
        {
          uint64_t v80 = v76;
          uint64_t v81 = (uint64_t)v93;
          uint64_t v82 = v114;
          (*v94)(v93, v80, v114);
          closure #1 in static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(v81, v104, v99, v100, v98, v101, v102, v103, a9, a10);

          (*v92)(v81, v82);
          goto LABEL_9;
        }
        outlined destroy of BodyTrackingComponent?(v76, &demangling cache variable for type metadata for UUID?);
LABEL_29:
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t v78 = swift_allocObject();
        uint64_t v79 = (void *)v78;
        *(_OWORD *)(v78 + 16) = v110;
        if ((_BYTE)v111)
        {
          if (v111 == 1)
          {
            unint64_t v46 = v96 | 0x8000000000000000;
            unint64_t v44 = 0xD000000000000012;
            goto LABEL_8;
          }
          unint64_t v44 = 0xD000000000000013;
          id v45 = &v121;
        }
        else
        {
          unint64_t v44 = 0xD000000000000014;
          id v45 = &v122;
        }
        unint64_t v46 = *(v45 - 32) | 0x8000000000000000;
LABEL_8:
        *(void *)(v78 + 56) = MEMORY[0x263F8D310];
        *(void *)(v78 + 64) = lazy protocol witness table accessor for type String and conformance String();
        v79[4] = v44;
        v79[5] = v46;
        v79[12] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
        v79[13] = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
        v79[9] = v50;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v47 = v50;
        uint64_t v48 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
LABEL_9:
        ++v43;
        uint64_t v40 = v112;
        if (v41 == v43) {
          return swift_bridgeObjectRelease();
        }
      }
    }
    __break(1u);
LABEL_52:
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *))v24)(v38, 1, 1, v114);
LABEL_53:
    __break(1u);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s10RealityKit29__RKEntityActionSpecificationOWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for USDDecodableContext(id *a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for USDDecodableContext(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  id v7 = v3;
  id v8 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for USDDecodableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for USDDecodableContext(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  swift_release();
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for USDDecodableContext()
{
  return &type metadata for USDDecodableContext;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  return swift_retain();
}

uint64_t static SpatialTrackingManager.shared.setter(void *a1)
{
  static SpatialTrackingManager.shared = a1;
  return swift_release();
}

uint64_t (*static SpatialTrackingManager.shared.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path getter for SpatialTrackingManager.rfConfigureCallback : SpatialTrackingManager@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    id v7 = partial apply for thunk for @callee_guaranteed () -> ();
  }
  else
  {
    id v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for SpatialTrackingManager.rfConfigureCallback : SpatialTrackingManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _sytIegr_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  *(void *)(v7 + 24) = v6;
  *(void *)(v7 + 32) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t SpatialTrackingManager.rfConfigureCallback.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t SpatialTrackingManager.rfConfigureCallback.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
}

id SpatialTrackingManager.rfServiceManager.getter()
{
  return *(id *)(v0 + 40);
}

uint64_t key path setter for SpatialTrackingManager.currentAnchorCapabilities : SpatialTrackingManager(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SpatialTrackingManager.currentAnchorCapabilities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SpatialTrackingManager.currentAnchorCapabilities.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for SpatialTrackingManager.currentConfiguration : SpatialTrackingManager@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(void *)(v3 + 64);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(v3 + 72);
  return outlined copy of SpatialTrackingSession.Configuration?(v4);
}

uint64_t key path setter for SpatialTrackingManager.currentConfiguration : SpatialTrackingManager(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  char v5 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v4 + 56);
  *(void *)(v4 + 56) = v2;
  *(void *)(v4 + 64) = v3;
  *(unsigned char *)(v4 + 72) = v5;
  outlined copy of SpatialTrackingSession.Configuration?(v2);
  return outlined consume of SpatialTrackingSession.Configuration?(v6);
}

uint64_t SpatialTrackingManager.currentConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v1 + 72);
  return outlined copy of SpatialTrackingSession.Configuration?(v3);
}

uint64_t outlined copy of SpatialTrackingSession.Configuration?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t SpatialTrackingManager.currentConfiguration.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v3;
  *(unsigned char *)(v1 + 72) = v4;
  return outlined consume of SpatialTrackingSession.Configuration?(v5);
}

uint64_t outlined consume of SpatialTrackingSession.Configuration?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t SpatialTrackingManager.arkitRunnable.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of __REAssetService(v1 + 80, a1);
}

uint64_t SpatialTrackingManager.isRunningUserSession.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t SpatialTrackingManager.isRunningUserSession.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 120) = a1;
  return result;
}

uint64_t SpatialTrackingManager.__allocating_init(serviceManager:arkitRunnable:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SpatialTrackingManager.init(serviceManager:arkitRunnable:)(a1, a2);
  return v4;
}

uint64_t SpatialTrackingManager.init(serviceManager:arkitRunnable:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(unsigned char *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  uint64_t v5 = MEMORY[0x263F8EE88];
  *(unsigned char *)(v3 + 120) = 0;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(unsigned char *)(v3 + 72) = 0;
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = v5;
  outlined init with copy of __REAssetService(a2, v3 + 80);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = *(void *)(v3 + 104);
  uint64_t v7 = *(void *)(v3 + 112);
  __swift_project_boxed_opaque_existential_1((void *)(v3 + 80), v8);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v9;
  v10[3] = partial apply for closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:);
  void v10[4] = v6;
  uint64_t v11 = *(void (**)(id, uint64_t (*)(), void *, uint64_t, uint64_t))(v7 + 8);
  id v12 = a1;
  swift_retain();
  swift_retain();
  v11(v12, partial apply for closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:), v10, v8, v7);
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a2);
  swift_release();
  return v3;
}

uint64_t sub_22828CD44()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 56);
    if (v2)
    {
      uint64_t v3 = *(void *)(v1 + 64);
      char v4 = *(unsigned char *)(v1 + 72) & 1;
      uint64_t v5 = *(void *)(v1 + 104);
      uint64_t v6 = *(void *)(v1 + 112);
      __swift_project_boxed_opaque_existential_1((void *)(v1 + 80), v5);
      v8[0] = v2;
      v8[1] = v3;
      char v9 = v4;
      uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(v6 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7(v8, v5, v6);
      swift_release();
      return outlined consume of SpatialTrackingSession.Configuration?(v2);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  return closure #1 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)();
}

uint64_t closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = swift_beginAccess();
    if (*(unsigned char *)(v6 + 16))
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(v6 + 24);
      *(void *)(v6 + 24) = a2;
      *(void *)(v6 + 32) = a3;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
    }
    else
    {
      a2(v7);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_22828CF4C()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)()
{
  return closure #2 in SpatialTrackingManager.init(serviceManager:arkitRunnable:)(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t SpatialTrackingManager.run(spatialTrackingConfiguration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 176) = a1;
  *(void *)(v3 + 184) = v2;
  *(_OWORD *)(v3 + 192) = *(_OWORD *)a2;
  *(unsigned char *)(v3 + 49) = *(unsigned char *)(a2 + 16);
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), 0, 0);
}

uint64_t SpatialTrackingManager.run(spatialTrackingConfiguration:)()
{
  *(void *)(v0 + 208) = type metadata accessor for MainActor();
  *(void *)(v0 + 216) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  swift_beginAccess();
  *(unsigned char *)(v1 + 16) = 1;
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), 0, 0);
}

{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  long long v18;
  void v19[2];
  char v20;
  long long v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  uint64_t v1 = *(unsigned char *)(v0 + 49);
  uint64_t v2 = *(void **)(v0 + 184);
  uint64_t v3 = v2 + 10;
  uint64_t v4 = v2[13];
  uint64_t v5 = v2[14];
  uint64_t v18 = *(_OWORD *)(v0 + 192);
  __swift_project_boxed_opaque_existential_1(v2 + 10, v4);
  uint64_t v21 = v18;
  uint64_t v22 = v1;
  (*(void (**)(void *__return_ptr, long long *, uint64_t, uint64_t))(v5 + 16))(v19, &v21, v4, v5);
  uint64_t v6 = (void *)v19[0];
  uint64_t v7 = (void *)v19[1];
  *(void *)(v0 + 224) = v19[0];
  *(void *)(v0 + 232) = v7;
  uint64_t v8 = v20;
  char v9 = *(void *)(v0 + 192);
  if (v6[2] <= *(void *)(v18 + 16) >> 3)
  {
    *(void *)&uint64_t v21 = *(void *)(v0 + 192);
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v6);
    uint64_t v10 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v6, v9);
  }
  *(void *)(v0 + 240) = v10;
  uint64_t v11 = *(void *)(v0 + 200);
  if (v7[2] <= *(void *)(v11 + 16) >> 3)
  {
    *(void *)&uint64_t v21 = *(void *)(v0 + 200);
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v7);
    id v12 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
    id v12 = specialized _NativeSet.subtracting<A>(_:)((uint64_t)v7, v11);
  }
  *(void *)(v0 + 248) = v12;
  uint64_t v13 = v2[13];
  uint64_t v14 = v2[14];
  __swift_project_boxed_opaque_existential_1(v3, v13);
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = v7;
  *(unsigned char *)(v0 + 168) = v8;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 24) + **(int **)(v14 + 24));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v15;
  *uint64_t v15 = v0;
  v15[1] = SpatialTrackingManager.run(spatialTrackingConfiguration:);
  return v17(v0 + 16, v0 + 152, v13, v14);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v2 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v7 = *(unsigned char *)(v0 + 48);
    *(void *)&uint64_t v21 = MEMORY[0x263F8EE88];
    *((void *)&v21 + 1) = v3;
    uint64_t v22 = v2;
    uint64_t v23 = MEMORY[0x263F8EE88];
    uint64_t v24 = 2;
    uint64_t v25 = v1;
    uint64_t v26 = v6;
    uint64_t v27 = v5;
    uint64_t v28 = v4;
    uint64_t v29 = v7;
    SpatialTrackingSession.UnavailableCapabilities.union(_:)((uint64_t)&v25, (uint64_t)&v17);
    outlined consume of RealityRenderer.CameraOutput?(v1);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = *((void *)&v17 + 1);
    char v9 = v17;
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    id v12 = v20;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 248);
    uint64_t v11 = MEMORY[0x263F8EE88];
    id v12 = 2;
    char v9 = MEMORY[0x263F8EE88];
  }
  *(void *)(v0 + 280) = v8;
  *(void *)(v0 + 288) = v9;
  *(void *)(v0 + 264) = v11;
  *(void *)(v0 + 272) = v10;
  *(unsigned char *)(v0 + 50) = v12;
  uint64_t v13 = *(unsigned char *)(v0 + 49);
  uint64_t v21 = *(_OWORD *)(v0 + 192);
  LOBYTE(v22) = v13;
  uint64_t v25 = v9;
  uint64_t v26 = v8;
  uint64_t v27 = v10;
  uint64_t v28 = v11;
  uint64_t v29 = v12;
  SpatialTrackingSession.Configuration.removing(unavailableCapabilities:)(&v25, (uint64_t)&v17);
  *(_OWORD *)(v0 + 296) = v17;
  *(unsigned char *)(v0 + 51) = v18;
  *(void *)(v0 + 312) = static MainActor.shared.getter();
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), v15, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(unsigned char *)(v0 + 51);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 184);
  swift_release();
  swift_beginAccess();
  *(void *)(v4 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 56);
  *(void *)(v4 + 56) = v3;
  *(void *)(v4 + 64) = v1;
  *(unsigned char *)(v4 + 72) = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of SpatialTrackingSession.Configuration?(v5);
  uint64_t v6 = *(void *)(v4 + 48);
  swift_bridgeObjectRetain();
  uint64_t v7 = (id)RFServiceManagerGetAnchorManagementService();
  if (v7)
  {
    uint64_t v8 = v7;
    RFAnchorManagementSetNeedClientAnchoring();
    specialized Set.contains(_:)(1, v6);
    RFAnchorManagementSetClientNeedWorldAnchoring();
    specialized Set.contains(_:)(2, v6);
    RFAnchorManagementSetClientNeedPlaneAnchoring();
    specialized Set.contains(_:)(4, v6);
    RFAnchorManagementSetClientNeedImageAnchoring();
    specialized Set.contains(_:)(8, v6);
    RFAnchorManagementSetClientNeedObjectAnchoring();
  }
  swift_bridgeObjectRelease();
  char v9 = *(void *)(v0 + 184);
  *(unsigned char *)(v9 + 16) = 0;
  swift_beginAccess();
  uint64_t v10 = *(void (**)(uint64_t))(v9 + 24);
  if (v10)
  {
    uint64_t v11 = swift_retain();
    v10(v11);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpatialTrackingManager.run(spatialTrackingConfiguration:), 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter();
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  if (v1)
  {
    uint64_t v6 = *(unsigned char *)(v0 + 50);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(v0 + 176);
  *(void *)uint64_t v7 = v2;
  *(void *)(v7 + 8) = v3;
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v5;
  *(unsigned char *)(v7 + 32) = v6;
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t SpatialTrackingManager.stop()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](SpatialTrackingManager.stop(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[13];
  uint64_t v3 = v1[14];
  __swift_project_boxed_opaque_existential_1(v1 + 10, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 40) + **(int **)(v3 + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v4;
  *uint64_t v4 = v0;
  v4[1] = SpatialTrackingManager.stop();
  return v6(v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpatialTrackingManager.stop(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 32) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](SpatialTrackingManager.stop(), v2, v1);
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_release();
  uint64_t v1 = (id)RFServiceManagerGetAnchorManagementService();
  if (v1)
  {
    uint64_t v2 = v1;
    RFAnchorManagementSetNeedClientAnchoring();
    uint64_t v3 = MEMORY[0x263F8EE88];
    specialized Set.contains(_:)(1, MEMORY[0x263F8EE88]);
    RFAnchorManagementSetClientNeedWorldAnchoring();
    specialized Set.contains(_:)(2, v3);
    RFAnchorManagementSetClientNeedPlaneAnchoring();
    specialized Set.contains(_:)(4, v3);
    RFAnchorManagementSetClientNeedImageAnchoring();
    specialized Set.contains(_:)(8, v3);
    RFAnchorManagementSetClientNeedObjectAnchoring();
  }
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t SpatialTrackingManager.deinit()
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 24));

  swift_bridgeObjectRelease();
  outlined consume of SpatialTrackingSession.Configuration?(*(void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return v0;
}

uint64_t SpatialTrackingManager.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 24));

  swift_bridgeObjectRelease();
  outlined consume of SpatialTrackingSession.Configuration?(*(void *)(v0 + 56));
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);

  return swift_deallocClassInstance();
}

uint64_t sub_22828DD2C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_22828DD74(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_22828DDC0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t sub_22828DE18@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 120);
  return result;
}

uint64_t sub_22828DE60(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 120) = v2;
  return result;
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return self;
}

uint64_t method lookup function for SpatialTrackingManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SpatialTrackingManager);
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SpatialTrackingManager.configurationIsOutdated.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SpatialTrackingManager.rfConfigureCallback.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentAnchorCapabilities.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SpatialTrackingManager.currentConfiguration.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SpatialTrackingManager.__allocating_init(serviceManager:arkitRunnable:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of SpatialTrackingManager.run(spatialTrackingConfiguration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 264) + **(int **)(*(void *)v2 + 264));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of SpatialTrackingManager.stop()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 272) + **(int **)(*(void *)v0 + 272));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return v4();
}

uint64_t sub_22828E324()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _sytIegr_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AF9TransformVs5NeverOTg504_s17d46Foundation12SkeletalPoseV2id4fromACSS_0A3Kit12fg5CAAE8i8VtcfcAF9k4VAJ5J54Vcfu0_33_95ebd61aca812b4992213a601e29e898AnLTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v14;
    uint64_t v4 = (long long *)(a1 + 160);
    do
    {
      long long v5 = *(v4 - 2);
      long long v6 = *(v4 - 1);
      long long v7 = *v4;
      uint64_t v15 = result;
      unint64_t v9 = *(void *)(result + 16);
      unint64_t v8 = *(void *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        long long v12 = *(v4 - 1);
        long long v13 = *(v4 - 2);
        long long v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        long long v7 = v11;
        long long v6 = v12;
        long long v5 = v13;
        uint64_t result = v15;
      }
      *(void *)(result + 16) = v9 + 1;
      uint64_t v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      void v10[4] = v7;
      v4 += 9;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_SSs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f54VtGtcfcS2S_AHt_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_U12SSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 8;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_AHs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f57VtGtcfcAHSS_AHt_tcfu0_33_4e2c78491f386e2498f24848ee793634o1_U12AHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v14;
    uint64_t v4 = (long long *)(a1 + 80);
    do
    {
      long long v5 = *(v4 - 2);
      long long v6 = *(v4 - 1);
      long long v7 = *v4;
      uint64_t v15 = result;
      unint64_t v9 = *(void *)(result + 16);
      unint64_t v8 = *(void *)(result + 24);
      if (v9 >= v8 >> 1)
      {
        long long v12 = *(v4 - 1);
        long long v13 = *(v4 - 2);
        long long v11 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        long long v7 = v11;
        long long v6 = v12;
        long long v5 = v13;
        uint64_t result = v15;
      }
      *(void *)(result + 16) = v9 + 1;
      uint64_t v10 = (_OWORD *)(result + 48 * v9);
      v10[2] = v5;
      v10[3] = v6;
      void v10[4] = v7;
      v4 += 4;
      --v2;
    }
    while (v2);
  }
  return result;
}

int64_t SkeletalPose.jointNames.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)v0) {
    return MEMORY[0x263F8EE78];
  }
  if (*(unsigned char *)(v0 + 16))
  {
    int64_t result = RESkeletalPoseComponentGetModelSpaceJointCount();
    if ((result & 0x8000000000000000) == 0)
    {
      int64_t v3 = result;
      uint64_t v1 = MEMORY[0x263F8EE78];
      if (result)
      {
        uint64_t v19 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
        uint64_t v4 = 0;
        uint64_t v1 = v19;
        do
        {
          RESkeletalPoseComponentGetModelSpaceJointName();
          uint64_t v5 = String.init(cString:)();
          uint64_t v7 = v6;
          unint64_t v9 = *(void *)(v19 + 16);
          unint64_t v8 = *(void *)(v19 + 24);
          if (v9 >= v8 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
          }
          ++v4;
          *(void *)(v19 + 16) = v9 + 1;
          uint64_t v10 = v19 + 16 * v9;
          *(void *)(v10 + 32) = v5;
          *(void *)(v10 + 40) = v7;
        }
        while (v3 != v4);
      }
      return v1;
    }
    __break(1u);
  }
  else
  {
    int64_t result = RESkeletalPoseComponentGetJointCount();
    if ((result & 0x8000000000000000) == 0)
    {
      int64_t v11 = result;
      uint64_t v1 = MEMORY[0x263F8EE78];
      if (result)
      {
        uint64_t v20 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
        uint64_t v12 = 0;
        uint64_t v1 = v20;
        do
        {
          RESkeletalPoseComponentGetJointName();
          uint64_t v13 = String.init(cString:)();
          uint64_t v15 = v14;
          unint64_t v17 = *(void *)(v20 + 16);
          unint64_t v16 = *(void *)(v20 + 24);
          if (v17 >= v16 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          }
          ++v12;
          *(void *)(v20 + 16) = v17 + 1;
          uint64_t v18 = v20 + 16 * v17;
          *(void *)(v18 + 32) = v13;
          *(void *)(v18 + 40) = v15;
        }
        while (v11 != v12);
      }
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SkeletalPose.PoseIndex(uint64_t a1, uint64_t a2)
{
  return (*(void *)a1 == *(void *)a2) & ~(*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8));
}

uint64_t SkeletalPose.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkeletalPose.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SkeletalPose.id.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPose.jointNames.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  char v4 = *((unsigned char *)v1 + 16);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v8 = *((void *)v1 + 5);
  uint64_t v7 = *((void *)v1 + 6);
  long long v16 = *v1;
  char v17 = v4;
  uint64_t v18 = v5;
  uint64_t v19 = v6;
  uint64_t v20 = v8;
  uint64_t v21 = v7;
  int64_t v9 = SkeletalPose.jointNames.getter();
  if (*(void *)(v7 + 16) >= *(void *)(v9 + 16)) {
    uint64_t v10 = *(void *)(v9 + 16);
  }
  else {
    uint64_t v10 = *(void *)(v7 + 16);
  }
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
    uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v11 = MEMORY[0x263F8EE80];
  }
  *(void *)&long long v16 = v11;
  swift_bridgeObjectRetain_n();
  uint64_t v12 = (void *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v12, v7, 1, &v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v2 + 5) = a1;
  swift_retain();
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So5RESRTas5NeverOTg572_s17RealityFoundation12SkeletalPoseV10jointNamesSaySSGvsSo5RESRTaSSXEfU_SDySSAHGTf1cn_nTf4ng_n(a1, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release_n();
  *((void *)v2 + 6) = v14;
  return result;
}

uint64_t (*SkeletalPose.jointNames.modify(int64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = SkeletalPose.jointNames.getter();
  return SkeletalPose.jointNames.modify;
}

uint64_t SkeletalPose.jointNames.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return SkeletalPose.jointNames.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  SkeletalPose.jointNames.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPose.jointTransforms.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t SkeletalPose.jointTransforms.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  return result;
}

uint64_t (*SkeletalPose.jointTransforms.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPose.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9 = *(void *)(v3 + 48);
  uint64_t v10 = (void *)SkeletalPose.jointNames.getter();
  unint64_t v11 = specialized Collection<>.firstIndex(of:)(a1, a2, v10);
  char v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    if ((v11 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v11 < *(void *)(v9 + 16))
    {
      uint64_t v15 = (void *)(v9 + 48 * v11);
      a1 = v15[4];
      unint64_t v11 = v15[5];
      uint64_t v9 = v15[6];
      uint64_t v10 = (void *)v15[7];
      uint64_t v5 = v15[8];
      uint64_t v4 = v15[9];
      if (one-time initialization token for identity == -1) {
        goto LABEL_6;
      }
LABEL_9:
      uint64_t result = swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
  a1 = 0;
  unint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
LABEL_6:
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v11;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = v10;
  *(void *)(a3 + 32) = v5;
  *(void *)(a3 + 40) = v4;
  *(unsigned char *)(a3 + 48) = v13 & 1;
  return result;
}

uint64_t key path getter for SkeletalPose.subscript(_:) : SkeletalPose@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)SkeletalPose.jointNames.getter();
  unint64_t v10 = specialized Collection<>.firstIndex(of:)(v7, v8, v9);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    if ((v10 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v10 < *(void *)(v6 + 16))
    {
      uint64_t v15 = (void *)(v6 + 48 * v10);
      uint64_t v8 = v15[4];
      uint64_t v16 = v15[5];
      uint64_t v3 = v15[6];
      uint64_t v9 = (void *)v15[7];
      unint64_t v10 = v15[8];
      uint64_t v4 = v15[9];
      if (one-time initialization token for identity == -1)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v14 = v16;
        goto LABEL_7;
      }
LABEL_10:
      swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v8 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v4 = 0;
LABEL_7:
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = v3;
  *(void *)(a3 + 24) = v9;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v4;
  *(unsigned char *)(a3 + 48) = v12 & 1;
  return result;
}

uint64_t key path setter for SkeletalPose.subscript(_:) : SkeletalPose(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  outlined init with take of Transform?(a1, (uint64_t)v6);
  swift_bridgeObjectRetain();
  return SkeletalPose.subscript.setter((uint64_t)v6, v3, v4);
}

uint64_t SkeletalPose.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char v8 = *((unsigned char *)v3 + 16);
  long long v9 = *(long long *)((char *)v3 + 24);
  uint64_t v10 = *((void *)v3 + 5);
  char v11 = (void *)*((void *)v3 + 6);
  long long v25 = *v3;
  v26[0] = v8;
  *(_OWORD *)&v26[8] = v9;
  *(void *)&v26[24] = v10;
  uint64_t v27 = v11;
  char v12 = (void *)SkeletalPose.jointNames.getter();
  char v13 = v12;
  uint64_t v14 = v12[2];
  if (!v14)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  BOOL v15 = v12[4] == a2 && v12[5] == a3;
  if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v19 = v13 + 7;
    uint64_t v20 = 1;
    while (v14 != v20)
    {
      if (*(v19 - 1) == a2 && *v19 == a3)
      {
        unint64_t v16 = v20;
        goto LABEL_8;
      }
      unint64_t v16 = v20++;
      v19 += 2;
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        goto LABEL_8;
      }
    }
    goto LABEL_22;
  }
  unint64_t v16 = 0;
LABEL_8:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined init with take of Transform?(a1, (uint64_t)&v25);
  if ((v27 & 1) == 0)
  {
    long long v23 = *(_OWORD *)v26;
    long long v24 = v25;
    long long v22 = *(_OWORD *)&v26[16];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      char v11 = (void *)result;
    }
    if (v16 >= v11[2])
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = &v11[6 * v16];
      v18[2] = v24;
      v18[3] = v23;
      v18[4] = v22;
      *((void *)v4 + 6) = v11;
    }
  }
  return result;
}

void (*SkeletalPose.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  long long v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[8] = a3;
  v9[9] = v3;
  v9[7] = a2;
  uint64_t v10 = *(void *)(v3 + 48);
  char v11 = (void *)SkeletalPose.jointNames.getter();
  unint64_t v12 = specialized Collection<>.firstIndex(of:)(a2, a3, v11);
  char v14 = v13;
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < *(void *)(v10 + 16))
    {
      BOOL v15 = (void *)(v10 + 48 * v12);
      a2 = v15[4];
      unint64_t v12 = v15[5];
      uint64_t v10 = v15[6];
      char v11 = (void *)v15[7];
      uint64_t v5 = v15[8];
      uint64_t v4 = v15[9];
      if (one-time initialization token for identity == -1) {
        goto LABEL_6;
      }
LABEL_9:
      swift_once();
      goto LABEL_6;
    }
    __break(1u);
    goto LABEL_9;
  }
  a2 = 0;
  unint64_t v12 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v5 = 0;
  uint64_t v4 = 0;
LABEL_6:
  *long long v9 = a2;
  v9[1] = v12;
  v9[2] = v10;
  _OWORD v9[3] = v11;
  v9[4] = v5;
  v9[5] = v4;
  *((unsigned char *)v9 + 48) = v14 & 1;
  return SkeletalPose.subscript.modify;
}

void SkeletalPose.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[8];
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (*a1)[3];
  uint64_t v19 = (*a1)[2];
  uint64_t v20 = **a1;
  uint64_t v6 = (*a1)[5];
  uint64_t v18 = (*a1)[4];
  int v7 = *((unsigned __int8 *)*a1 + 48);
  char v8 = *(void **)((*a1)[9] + 48);
  uint64_t v9 = (*a1)[7];
  if ((a2 & 1) == 0) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)SkeletalPose.jointNames.getter();
  unint64_t v11 = specialized Collection<>.firstIndex(of:)(v9, v3, v10);
  uint64_t v9 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 | v7)) {
    goto LABEL_12;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if (v11 < v8[2])
  {
LABEL_11:
    uint64_t v16 = v2[9];
    char v17 = &v8[6 * v11];
    v17[4] = v20;
    v17[5] = v4;
    v17[6] = v19;
    v17[7] = v5;
    v17[8] = v18;
    v17[9] = v6;
    *(void *)(v16 + 48) = v8;
    goto LABEL_12;
  }
  __break(1u);
LABEL_7:
  swift_bridgeObjectRetain();
  char v13 = (void *)SkeletalPose.jointNames.getter();
  unint64_t v11 = specialized Collection<>.firstIndex(of:)(v9, v3, v13);
  int v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (((v15 | v7) & 1) == 0)
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v11 & 0x8000000000000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_18;
    }
LABEL_17:
    char v8 = specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    if ((v11 & 0x8000000000000000) == 0)
    {
LABEL_10:
      if (v11 < v8[2]) {
        goto LABEL_11;
      }
LABEL_19:
      __break(1u);
      return;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_12:

  free(v2);
}

uint64_t SkeletalPose.init(id:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_SSs5NeverOTg504_s10d5Kit12fg5C0A10h2E8i36V04makeF3Defs13OpaquePointerVyFSSAF5J53Vcfu_32ff38342fabfe801430b9473eed3cf0a7AKSSTf3nnnpk_nTf1cn_n(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit12MeshResourceC0D10FoundationE8SkeletonV5JointVG_AF9TransformVs5NeverOTg504_s17d46Foundation12SkeletalPoseV2id4fromACSS_0A3Kit12fg5CAAE8i8VtcfcAF9k4VAJ5J54Vcfu0_33_95ebd61aca812b4992213a601e29e898AnLTf3nnnpk_nTf1cn_n(v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    unint64_t v11 = (long long *)(v9 + 64);
    uint64_t v12 = (void *)MEMORY[0x263F8EE78];
    do
    {
      long long v19 = *(v11 - 1);
      long long v20 = *(v11 - 2);
      long long v18 = *v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      v12[2] = v14 + 1;
      int v15 = &v12[6 * v14];
      v15[2] = v20;
      v15[3] = v19;
      _DWORD v15[4] = v18;
      v11 += 3;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EE78];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a1;
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = v7;
  *(void *)(a4 + 48) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SkeletalPose.init(id:joints:transforms:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6 == *(void *)(a4 + 16))
  {
    uint64_t v15 = result;
    if (v6)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = (long long *)(a4 + 64);
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
      do
      {
        long long v17 = *(v10 - 1);
        long long v18 = *(v10 - 2);
        long long v16 = *v10;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        }
        unint64_t v13 = v11[2];
        unint64_t v12 = v11[3];
        if (v13 >= v12 >> 1) {
          unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v11);
        }
        void v11[2] = v13 + 1;
        unint64_t v14 = &v11[6 * v13];
        v14[2] = v18;
        v14[3] = v17;
        v14[4] = v16;
        v10 += 3;
        --v6;
      }
      while (v6);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v11 = (void *)MEMORY[0x263F8EE78];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(unsigned char *)(a5 + 16) = 0;
    *(void *)(a5 + 24) = v15;
    *(void *)(a5 + 32) = a2;
    *(void *)(a5 + 40) = a3;
    *(void *)(a5 + 48) = v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 SkeletalPose.init(id:joints:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_SSs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f54VtGtcfcS2S_AHt_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_U12SSTf3nnnpk_nTf1cn_n(a3);
  uint64_t v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_10RealityKit9TransformVtG_AHs5NeverOTg504_s17d53Foundation12SkeletalPoseV2id6jointsACSS_SaySS_0A3Kit9f57VtGtcfcAHSS_AHt_tcfu0_33_4e2c78491f386e2498f24848ee793634o1_U12AHTf3nnnpk_nTf1cn_n(a3);
  swift_bridgeObjectRelease();
  SkeletalPose.init(id:joints:transforms:)(a1, a2, v8, v9, (uint64_t)&v14);
  char v10 = v15;
  __n128 result = v16;
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  *(_OWORD *)a4 = v14;
  *(unsigned char *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 24) = result;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v13;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance SkeletalPose@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 32);
  *a1 = *(void *)(v1 + 24);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(void *a1, uint64_t a2, char a3, void *a4)
{
  if (!a1[2]) {
    goto LABEL_7;
  }
  uint64_t v54 = *(void *)(a2 + 16);
  if (!v54) {
    goto LABEL_7;
  }
  uint64_t v53 = a1[2];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  long long v49 = *(_OWORD *)(a2 + 48);
  long long v51 = *(_OWORD *)(a2 + 64);
  long long v47 = *(_OWORD *)(a2 + 32);
  char v10 = (void *)*a4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  BOOL v15 = __OFADD__(v13, v14);
  uint64_t v16 = v13 + v14;
  if (v15)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v17 = v12;
  if (v10[3] < v16)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a3 & 1);
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v17 & 1) != (v18 & 1))
    {
LABEL_6:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_9:
    if (v17) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if (a3) {
    goto LABEL_9;
  }
  unint64_t v21 = v11;
  specialized _NativeDictionary.copy()();
  unint64_t v11 = v21;
  if (v17)
  {
LABEL_10:
    long long v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_31;
  }
LABEL_13:
  long long v22 = (void *)*a4;
  *(void *)(*a4 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  long long v23 = (uint64_t *)(v22[6] + 16 * v11);
  *long long v23 = v9;
  v23[1] = v8;
  long long v24 = (_OWORD *)(v22[7] + 48 * v11);
  *long long v24 = v47;
  v24[1] = v49;
  v24[2] = v51;
  uint64_t v25 = v22[2];
  BOOL v15 = __OFADD__(v25, 1);
  uint64_t v26 = v25 + 1;
  if (v15)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  void v22[2] = v26;
  if (v53 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  if (a1[2] >= 2uLL)
  {
    if (v54 == 1) {
      goto LABEL_17;
    }
    uint64_t v27 = a1 + 7;
    uint64_t v28 = (long long *)(a2 + 112);
    for (unint64_t i = 2; ; ++i)
    {
      uint64_t v31 = *(v27 - 1);
      uint64_t v30 = *v27;
      swift_bridgeObjectRetain();
      long long v50 = *(v28 - 1);
      long long v52 = *v28;
      long long v48 = *(v28 - 2);
      unint64_t v32 = (void *)*a4;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
      uint64_t v35 = v32[2];
      BOOL v36 = (v34 & 1) == 0;
      BOOL v15 = __OFADD__(v35, v36);
      uint64_t v37 = v35 + v36;
      if (v15) {
        break;
      }
      char v38 = v34;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v30);
        if ((v38 & 1) != (v39 & 1)) {
          goto LABEL_6;
        }
      }
      if (v38) {
        goto LABEL_10;
      }
      uint64_t v40 = (void *)*a4;
      *(void *)(*a4 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      uint64_t v41 = (uint64_t *)(v40[6] + 16 * v33);
      *uint64_t v41 = v31;
      v41[1] = v30;
      unint64_t v42 = (_OWORD *)(v40[7] + 48 * v33);
      _OWORD *v42 = v48;
      v42[1] = v50;
      v42[2] = v52;
      uint64_t v43 = v40[2];
      BOOL v15 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v15) {
        goto LABEL_29;
      }
      v40[2] = v44;
      if (v53 == i) {
        goto LABEL_17;
      }
      if (i >= a1[2]) {
        goto LABEL_30;
      }
      if (v54 == i) {
        goto LABEL_17;
      }
      v27 += 2;
      v28 += 3;
    }
    goto LABEL_28;
  }
LABEL_30:
  __break(1u);
LABEL_31:
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000022834F0F0;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)();
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_So5RESRTas5NeverOTg572_s17RealityFoundation12SkeletalPoseV10jointNamesSaySSGvsSo5RESRTaSSXEfU_SDySSAHGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v28;
    uint64_t v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v7 = *(v6 - 1);
        uint64_t v8 = *v6;
        swift_bridgeObjectRetain();
        unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        long long v10 = 0uLL;
        long long v11 = 0uLL;
        long long v12 = 0uLL;
        if (v13)
        {
          BOOL v14 = (long long *)(*(void *)(a2 + 56) + 48 * v9);
          long long v10 = *v14;
          long long v11 = v14[1];
          long long v12 = v14[2];
        }
        long long v22 = v12;
        long long v24 = v11;
        long long v26 = v10;
        swift_bridgeObjectRelease();
        long long v16 = v22;
        long long v15 = v24;
        long long v17 = v26;
      }
      else
      {
        long long v17 = 0uLL;
        long long v15 = 0uLL;
        long long v16 = 0uLL;
      }
      unint64_t v19 = *(void *)(v28 + 16);
      unint64_t v18 = *(void *)(v28 + 24);
      if (v19 >= v18 >> 1)
      {
        long long v25 = v15;
        long long v27 = v17;
        long long v23 = v16;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        long long v16 = v23;
        long long v15 = v25;
        long long v17 = v27;
      }
      *(void *)(v28 + 16) = v19 + 1;
      id v20 = (_OWORD *)(v28 + 48 * v19);
      void v20[2] = v17;
      v20[3] = v15;
      v20[4] = v16;
      v6 += 2;
      --v2;
    }
    while (v2);
  }
  return v3;
}

int64_t sub_22828FCB0@<X0>(int64_t *a1@<X8>)
{
  int64_t result = SkeletalPose.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22828FD04()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return SkeletalPose.jointNames.setter(v0);
}

uint64_t sub_22828FD38()
{
  return 0;
}

uint64_t destroy for SkeletalPose()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SkeletalPose(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SkeletalPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SkeletalPose(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SkeletalPose(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SkeletalPose(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)int64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SkeletalPose()
{
  return &type metadata for SkeletalPose;
}

ValueMetadata *type metadata accessor for SkeletalPose.PoseIndex()
{
  return &type metadata for SkeletalPose.PoseIndex;
}

uint64_t CustomMaterialResource.deinit()
{
  swift_beginAccess();
  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t CustomMaterialResource.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CustomMaterialResource()
{
  return self;
}

uint64_t specialized FromToByAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 200) = v8;
      *(unsigned char *)(a1 + 212) = 0;
      *(_DWORD *)(a1 + 208) = 0;
      *(unsigned char *)(a1 + 213) = 1;
      *(_DWORD *)(a1 + 216) = 0;
      *(unsigned char *)(a1 + 220) = 0;
      *(unsigned char *)(a1 + 221) = 1;
      *(_DWORD *)(a1 + 224) = 0;
      *(unsigned char *)(a1 + 228) = 0;
      *(unsigned char *)(a1 + 229) = 1;
      *(void *)(a1 + 232) = 0;
      *(unsigned char *)(a1 + 240) = 1;
      *(_DWORD *)(a1 + 272) = 0;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(unsigned char *)(a1 + 276) = 10;
      *(void *)(a1 + 280) = 0;
      *(_WORD *)(a1 + 288) = 514;
      *(unsigned char *)(a1 + 290) = 2;
      *(void *)(a1 + 296) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 200) = v8;
      *(void *)(a1 + 208) = 0;
      *(unsigned char *)(a1 + 216) = 0;
      *(unsigned char *)(a1 + 217) = 1;
      *(void *)(a1 + 224) = 0;
      *(unsigned char *)(a1 + 232) = 0;
      *(unsigned char *)(a1 + 233) = 1;
      *(void *)(a1 + 240) = 0;
      *(unsigned char *)(a1 + 248) = 0;
      *(unsigned char *)(a1 + 249) = 1;
      *(void *)(a1 + 256) = 0;
      *(unsigned char *)(a1 + 264) = 1;
      *(_DWORD *)(a1 + 288) = 0;
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 280) = 0;
      *(unsigned char *)(a1 + 292) = 10;
      *(void *)(a1 + 296) = 0;
      *(_WORD *)(a1 + 304) = 514;
      *(unsigned char *)(a1 + 306) = 2;
      *(void *)(a1 + 312) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 208) = 0;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 200) = v8;
      *(unsigned char *)(a1 + 224) = 0;
      *(unsigned char *)(a1 + 225) = 1;
      *(unsigned char *)(a1 + 256) = 0;
      *(void *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = 0;
      *(unsigned char *)(a1 + 257) = 1;
      *(unsigned char *)(a1 + 288) = 0;
      *(void *)(a1 + 272) = 0;
      *(void *)(a1 + 280) = 0;
      *(unsigned char *)(a1 + 289) = 1;
      *(void *)(a1 + 296) = 0;
      *(unsigned char *)(a1 + 304) = 1;
      *(void *)(a1 + 320) = 0;
      *(void *)(a1 + 328) = 0;
      *(_DWORD *)(a1 + 336) = 0;
      *(unsigned char *)(a1 + 340) = 10;
      *(void *)(a1 + 344) = 0;
      *(_WORD *)(a1 + 352) = 514;
      *(unsigned char *)(a1 + 354) = 2;
      *(void *)(a1 + 360) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 200) = v8;
      *(unsigned char *)(a1 + 256) = 0;
      *(_OWORD *)(a1 + 224) = 0u;
      *(_OWORD *)(a1 + 240) = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
      *(unsigned char *)(a1 + 257) = 1;
      *(unsigned char *)(a1 + 320) = 0;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(unsigned char *)(a1 + 321) = 1;
      *(unsigned char *)(a1 + 384) = 0;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(unsigned char *)(a1 + 385) = 1;
      *(void *)(a1 + 392) = 0;
      *(unsigned char *)(a1 + 400) = 1;
      *(void *)(a1 + 416) = 0;
      *(void *)(a1 + 424) = 0;
      *(_DWORD *)(a1 + 432) = 0;
      *(unsigned char *)(a1 + 436) = 10;
      *(void *)(a1 + 440) = 0;
      *(_WORD *)(a1 + 448) = 514;
      *(unsigned char *)(a1 + 450) = 2;
      *(void *)(a1 + 456) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t ClipSourceRef;
  int TimelineType;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  unsigned __int8 v16;

  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 200) = v8;
      *(int64x2_t *)(a1 + 208) = vdupq_n_s64(1uLL);
      *(_OWORD *)(a1 + 224) = xmmword_22830EC70;
      *(unsigned char *)(a1 + 240) = 1;
      *(_DWORD *)(a1 + 272) = 0;
      *(void *)(a1 + 256) = 0;
      *(void *)(a1 + 264) = 0;
      *(unsigned char *)(a1 + 276) = 10;
      *(void *)(a1 + 280) = 0;
      *(_WORD *)(a1 + 288) = 514;
      *(unsigned char *)(a1 + 290) = 2;
      *(void *)(a1 + 296) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationResource.__allocating_init(_:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AnimationResource.init(_:name:)(a1, a2, a3);
  return v6;
}

uint64_t AnimationResource.definition.getter@<X0>(uint64_t *a1@<X8>)
{
  int v2 = REAssetHandleAssetType();
  if (v2 != 5 && (v2 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
    JUMPOUT(0x228291750);
  }
  RETimelineDefinitionCreateFromTimeline();
  switch(RETimelineDefinitionGetTimelineType())
  {
    case 2u:
      a1[3] = (uint64_t)&type metadata for AnimationView;
      a1[4] = (uint64_t)&protocol witness table for AnimationView;
      uint64_t v3 = swift_allocObject();
      uint64_t v4 = v3 + 16;
      *a1 = v3;
      swift_retain();
      AnimationView.init(_:)(v4);
      goto LABEL_35;
    case 3u:
      a1[3] = (uint64_t)&type metadata for AnimationGroup;
      a1[4] = (uint64_t)&protocol witness table for AnimationGroup;
      uint64_t v5 = swift_allocObject();
      uint64_t v6 = v5 + 16;
      *a1 = v5;
      swift_retain();
      AnimationGroup.init(_:)(v6);
      goto LABEL_35;
    case 4u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      uint64_t v7 = swift_allocObject();
      uint64_t v8 = v7 + 16;
      *a1 = v7;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v8);
      goto LABEL_35;
    case 5u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_10;
    case 6u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
LABEL_10:
      uint64_t v9 = swift_allocObject();
      uint64_t v10 = v9 + 16;
      *a1 = v9;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v10);
      goto LABEL_35;
    case 7u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_14;
    case 8u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      goto LABEL_14;
    case 9u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<simd_quatf>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
LABEL_14:
      uint64_t v11 = swift_allocObject();
      uint64_t v12 = v11 + 16;
      *a1 = v11;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v12);
      goto LABEL_35;
    case 0xAu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      uint64_t v13 = swift_allocObject();
      uint64_t v14 = v13 + 16;
      *a1 = v13;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v14);
      goto LABEL_35;
    case 0xBu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for FromToByAnimation<A>;
      uint64_t v15 = swift_allocObject();
      uint64_t v16 = v15 + 16;
      *a1 = v15;
      swift_retain();
      specialized FromToByAnimation.init(_:)(v16);
      goto LABEL_35;
    case 0xCu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xDu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xEu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0xFu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x10u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x12u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
      goto LABEL_25;
    case 0x13u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for SampledAnimation<A>;
LABEL_25:
      uint64_t v18 = swift_allocObject();
      uint64_t v19 = v18 + 16;
      *a1 = v18;
      swift_retain();
      specialized SampledAnimation.init(_:)(v19);
      goto LABEL_35;
    case 0x14u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Float>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x15u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Double>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x16u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD2<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x17u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD3<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x18u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<SIMD4<Float>>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x19u:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<simd_quatf>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x1Au:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<Transform>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
      goto LABEL_34;
    case 0x1Bu:
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BlendTreeAnimation<JointTransforms>);
      a1[4] = (uint64_t)&protocol witness table for BlendTreeAnimation<A>;
LABEL_34:
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v20 + 16;
      *a1 = v20;
      swift_retain();
      specialized BlendTreeAnimation.init(_:)(v21);
      goto LABEL_35;
    case 0x1Cu:
      a1[3] = (uint64_t)&type metadata for OrbitAnimation;
      a1[4] = (uint64_t)&protocol witness table for OrbitAnimation;
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = v23 + 16;
      *a1 = v23;
      swift_retain();
      OrbitAnimation.init(_:)(v24);
LABEL_35:
      return RERelease();
    case 0x1Du:
      AnimationResource.eventTimelineDefinition.getter((uint64_t)&v27);
      if (v28)
      {
        outlined init with take of BindableDataInternal(&v27, (uint64_t)a1);
      }
      else
      {
        a1[3] = (uint64_t)&type metadata for AnyActionAnimation;
        a1[4] = (uint64_t)&protocol witness table for AnyActionAnimation;
        uint64_t v25 = swift_allocObject();
        uint64_t v26 = v25 + 16;
        *a1 = v25;
        swift_retain();
        AnyActionAnimation.init(_:)(v26);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v27, &demangling cache variable for type metadata for AnimationDefinition?);
      }
      return RERelease();
    default:
      a1[3] = (uint64_t)&type metadata for InvalidAnimationDefinition;
      a1[4] = (uint64_t)&protocol witness table for InvalidAnimationDefinition;
      uint64_t v17 = swift_allocObject();
      *a1 = v17;
      LOBYTE(v27) = 1;
      char v30 = 1;
      char v29 = 1;
      *(void *)(v17 + 16) = 0;
      *(void *)(v17 + 24) = 0xE000000000000000;
      *(_DWORD *)(v17 + 32) = 0;
      *(unsigned char *)(v17 + 36) = 0;
      *(_OWORD *)(v17 + 40) = xmmword_22831E960;
      *(unsigned char *)(v17 + 56) = 0;
      *(void *)(v17 + 64) = 0;
      *(unsigned char *)(v17 + 72) = 1;
      *(void *)(v17 + 80) = 0;
      *(unsigned char *)(v17 + 88) = 1;
      *(void *)(v17 + 96) = 0;
      *(unsigned char *)(v17 + 104) = 1;
      *(void *)(v17 + 112) = 0;
      *(void *)(v17 + 120) = 0;
      *(void *)(v17 + 125) = 0;
      return RERelease();
  }
}

uint64_t static AnimationResource.generate(with:)(uint64_t a1)
{
  return specialized static AnimationResource.generate(with:)(a1);
}

uint64_t specialized BlendTreeAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t v6 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = v6;
      if (v6)
      {
        if (RETimelineDefinitionGetTimelineType() == 2)
        {
          *(void *)(a1 + 56) = 0;
          *(_WORD *)(a1 + 64) = 256;
          *(void *)(a1 + 72) = 0;
          *(_WORD *)(a1 + 80) = 256;
          *(void *)(a1 + 88) = 0;
          *(_WORD *)(a1 + 96) = 256;
          *(void *)(a1 + 104) = 0;
          *(unsigned char *)(a1 + 112) = 1;
          *(void *)(a1 + 120) = 0;
          *(unsigned char *)(a1 + 128) = 1;
          *(_DWORD *)(a1 + 132) = 0;
          *(unsigned char *)(a1 + 136) = 1;
          *(unsigned char *)(a1 + 137) = 4;
          *(void *)(a1 + 176) = 0;
          *(_OWORD *)(a1 + 144) = 0u;
          *(_OWORD *)(a1 + 160) = 0u;
          *(unsigned char *)(a1 + 184) = -1;
          *(_DWORD *)(a1 + 188) = 0;
          *(unsigned char *)(a1 + 192) = 1;
          *(unsigned char *)(a1 + 193) = 0;
          *(unsigned char *)(a1 + 194) = 1;
          *(unsigned char *)(a1 + 195) = 2;
          *(void *)(a1 + 200) = v2;
          swift_retain();
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          if (ClipSourceRef)
          {
            uint64_t v8 = ClipSourceRef;
            uint64_t v9 = swift_allocObject();
            *(void *)(v9 + 16) = v8;
            RERetain();
            RERelease();
          }
          else
          {
            uint64_t v9 = swift_allocObject();
            *(void *)(v9 + 16) = 0;
          }
          goto LABEL_12;
        }
        swift_retain();
        RETimelineDefinitionGetName();
        uint64_t v6 = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = 0;
      *(void *)(a1 + 56) = 0;
      *(_WORD *)(a1 + 64) = 256;
      *(void *)(a1 + 72) = 0;
      *(_WORD *)(a1 + 80) = 256;
      *(void *)(a1 + 88) = 0;
      *(_WORD *)(a1 + 96) = 256;
      *(void *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 112) = 1;
      *(void *)(a1 + 120) = 0;
      *(unsigned char *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = 1025;
      *(void *)(a1 + 144) = v2;
      *(void *)(a1 + 152) = v6;
      *(void *)(a1 + 160) = v10;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 0;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 0;
      *(unsigned char *)(a1 + 195) = 0;
      uint64_t v9 = v2;
      *(void *)(a1 + 200) = v12;
LABEL_12:
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 32) = -1;
      *(void *)(a1 + 36) = 0x201000100000000;
      *(void *)(a1 + 48) = v9;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized SampledAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 32) = -1;
      *(_DWORD *)(a1 + 36) = 0;
      *(_WORD *)(a1 + 40) = 1;
      *(unsigned char *)(a1 + 42) = 1;
      *(unsigned char *)(a1 + 43) = 2;
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 65) = 1;
      *(void *)(a1 + 72) = 0;
      *(unsigned char *)(a1 + 80) = 0;
      *(unsigned char *)(a1 + 81) = 1;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 97) = 1;
      *(void *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 112) = 1;
      *(void *)(a1 + 120) = 0;
      *(unsigned char *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(unsigned char *)(a1 + 136) = 1;
      *(unsigned char *)(a1 + 137) = 4;
      *(void *)(a1 + 144) = v9;
      *(void *)(a1 + 152) = ClipSourceRef;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(void *)(a1 + 160) = v10;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_WORD *)(a1 + 192) = v16;
      *(unsigned char *)(a1 + 194) = v15;
      *(unsigned char *)(a1 + 195) = v14;
      *(void *)(a1 + 200) = v12;
      *(unsigned char *)(a1 + 208) = 2;
      *(_DWORD *)(a1 + 212) = 0;
      *(unsigned char *)(a1 + 216) = 1;
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 232) = 0;
      *(unsigned char *)(a1 + 240) = 1;
      *(void *)(a1 + 248) = 0;
      *(unsigned char *)(a1 + 256) = 1;
      *(void *)(a1 + 264) = 0;
      *(_WORD *)(a1 + 272) = 514;
      *(unsigned char *)(a1 + 274) = 2;
      *(void *)(a1 + 280) = 0;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationResource.timelineAsset()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  int v2 = REAssetHandleAssetType();
  if (v2 == 11) {
    return REAnimationSceneAssetGetRootTimeline();
  }
  if (v2 == 5) {
    return v1;
  }
  return 0;
}

uint64_t AnimationResource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void *AnimationResource.init(_:name:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v3[2] = a1;
  if (!a3)
  {
    if (REAssetHandleAssetType() == 11) {
      REAnimationSceneAssetGetRootTimeline();
    }
    if (REAnimationAssetGetName())
    {
      a2 = String.init(cString:)();
      a3 = v5;
    }
    else
    {
      a2 = 0;
      a3 = 0xE000000000000000;
    }
  }
  v3[3] = a2;
  v3[4] = a3;
  RERetain();
  REAssetSetSwiftObject();
  return v3;
}

uint64_t sub_228291ED4()
{
  swift_bridgeObjectRelease();
  outlined consume of BindTarget(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return MEMORY[0x270FA0238](v0, 133, 7);
}

uint64_t AnimationResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnimationResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t one-time initialization function for actionHandlerCreators()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static AnimationResource.actionHandlerCreators = result;
  return result;
}

unint64_t one-time initialization function for actionHandlers()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static AnimationResource.actionHandlers = result;
  return result;
}

unint64_t one-time initialization function for actionSubscriptions()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static AnimationResource.actionSubscriptions = result;
  return result;
}

unint64_t one-time initialization function for actionTypeMap()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static AnimationResource.actionTypeMap = result;
  return result;
}

unint64_t one-time initialization function for codableActionTypeMap()
{
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  static AnimationResource.codableActionTypeMap = result;
  return result;
}

BOOL static AnimationRepeatMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnimationRepeatMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationRepeatMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(uint64_t a1, char a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, char *a8, double a9, double a10, float a11)
{
  uint64_t v12 = v11;
  char v17 = *a8;
  if (a2) {
    *(double *)&a1 = NAN;
  }
  if (a4) {
    *(double *)&a3 = NAN;
  }
  if (a7) {
    *(double *)&a6 = NAN;
  }
  uint64_t v21 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v21, (uint64_t)v34);
  uint64_t v22 = v35;
  double v23 = v36;
  __swift_project_boxed_opaque_existential_1(v34, v35);
  (*(void (**)(uint64_t, double))(*(void *)&v23 + 32))(v22, COERCE_DOUBLE(*(void *)&v23));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  int v24 = REAssetHandleAssetType();
  if (v24 != 5 && (v24 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v34[0]) = 0;
  v34[1] = 0;
  v34[2] = a1;
  uint64_t v35 = a3;
  double v36 = a9;
  double v37 = a10;
  uint64_t v38 = a6;
  float v39 = a11;
  char v40 = v17;
  char v41 = a5 & 1;
  char v42 = 0;
  uint64_t TimelineClip = REAssetManagerTimelineAssetCreateTimelineClipEx();
  if (!TimelineClip)
  {
LABEL_19:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v26 = TimelineClip;
  if (REAssetHandleAssetType() == 11)
  {
    uint64_t v27 = REAnimationSceneAssetCreateWithTimeline();
    uint64_t v29 = *(void *)(v12 + 24);
    unint64_t v28 = *(void *)(v12 + 32);
    type metadata accessor for AnimationResource();
    uint64_t v30 = swift_allocObject();
    swift_bridgeObjectRetain();
    AnimationResource.init(_:name:)(v27, v29, v28);
    RERelease();
  }
  else
  {
    uint64_t v32 = *(void *)(v12 + 24);
    unint64_t v31 = *(void *)(v12 + 32);
    type metadata accessor for AnimationResource();
    uint64_t v30 = swift_allocObject();
    swift_bridgeObjectRetain();
    AnimationResource.init(_:name:)(v26, v32, v31);
  }
  RERelease();
  return v30;
}

uint64_t AnimationResource.repeat(duration:)(double a1)
{
  char v2 = 1;
  return AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(0, 1, 0, 1, 0, *(uint64_t *)&a1, 0, &v2, 0.0, 0.0, 1.0);
}

uint64_t AnimationResource.repeat(count:)(uint64_t a1)
{
  uint64_t result = REAssetHandleAssetType();
  if (result == 5 || result == 11 && (uint64_t result = REAnimationSceneAssetGetRootTimeline()) != 0)
  {
    REAnimationAssetGetTotalDuration();
    char v4 = 1;
    return AnimationResource.makeClip(clipStart:clipEnd:clipOffset:clipReversed:delay:duration:loopBehavior:speed:)(0, 1, 0, 1, 0, COERCE__INT64(v3 * (double)a1), 0, &v4, 0.0, 0.0, 1.0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static AnimationResource.group(with:)(unint64_t a1)
{
  unint64_t v2 = a1;
  unint64_t v3 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0, MEMORY[0x263F8EE78]);
  long long v49 = v5;
  if (!v3)
  {
    uint64_t v6 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_5;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    char v8 = 0;
LABEL_18:
    long long v47 = &type metadata for AnimationGroup;
    long long v48 = &protocol witness table for AnimationGroup;
    uint64_t v23 = swift_allocObject();
    v46[0] = v23;
    type metadata accessor for TimelineDefinition();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0;
    v33[1] = 0;
    v33[0] = 0;
    char v34 = -1;
    v35[0] = 0;
    char v32 = 0;
    TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(0x70756F7267, 0xE500000000000000, v33, 0, v35, &v32, 0, 1, (uint64_t)&v36, 0.0, 0.0, 1.0, 0, 1, 0, 1);
    *(_OWORD *)(v23 + 120) = v42;
    long long v25 = v44;
    *(_OWORD *)(v23 + 136) = v43;
    *(_OWORD *)(v23 + 152) = v25;
    long long v26 = v39;
    *(_OWORD *)(v23 + 56) = v38;
    *(_OWORD *)(v23 + 72) = v26;
    long long v27 = v41;
    *(_OWORD *)(v23 + 88) = v40;
    *(_OWORD *)(v23 + 104) = v27;
    long long v28 = v37;
    *(_OWORD *)(v23 + 24) = v36;
    LOBYTE(v33[0]) = 0;
    v35[0] = 0;
    *(void *)(v23 + 16) = v5;
    *(void *)(v23 + 168) = v45;
    *(_OWORD *)(v23 + 40) = v28;
    *(_OWORD *)(v23 + 176) = xmmword_2283491A0;
    *(void *)(v23 + 192) = 0;
    *(void *)(v23 + 200) = 0;
    *(unsigned char *)(v23 + 208) = -1;
    *(_DWORD *)(v23 + 212) = 0;
    *(unsigned char *)(v23 + 216) = v33[0];
    *(unsigned char *)(v23 + 217) = v8;
    *(_WORD *)(v23 + 218) = v35[0];
    *(void *)(v23 + 224) = v24;
    uint64_t v29 = specialized static AnimationResource.generate(with:)((uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    return v29;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_5:
  if (v6 >= 1)
  {
    uint64_t v30 = v1;
    char v8 = 0;
    uint64_t v9 = 0;
    unint64_t v31 = v2 & 0xC000000000000001;
    unint64_t v50 = v2;
    do
    {
      if (v31) {
        MEMORY[0x22A689930](v9, v2);
      }
      else {
        swift_retain();
      }
      AnimationResource.definition.getter((uint64_t *)&v36);
      uint64_t v10 = *((void *)&v37 + 1);
      uint64_t v11 = v38;
      __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 56))(v46, v10, v11);
      char v12 = v46[0];
      outlined init with copy of __REAssetService((uint64_t)&v36, (uint64_t)v46);
      char v13 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        long long v49 = v13;
      }
      unint64_t v15 = v13[2];
      unint64_t v14 = v13[3];
      if (v15 >= v14 >> 1) {
        long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
      }
      ++v9;
      v8 |= v12;
      unsigned __int8 v16 = v47;
      uint64_t v17 = (uint64_t)v48;
      uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v46, (uint64_t)v47);
      __n128 v19 = MEMORY[0x270FA5388](v18);
      uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v22 + 16))(v21, v19);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)&v49, (uint64_t)v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      unint64_t v2 = v50;
    }
    while (v6 != v9);
    swift_bridgeObjectRelease();
    unint64_t v5 = v49;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t static AnimationResource.sequence(with:)(unint64_t a1)
{
  unint64_t v5 = v1;
  if (!(a1 >> 62))
  {
    int64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7 > 0) {
      goto LABEL_3;
    }
LABEL_49:
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v58 = 0xD000000000000033;
    *(void *)(v58 + 8) = 0x800000022835F4D0;
    *(unsigned char *)(v58 + 16) = 0;
    swift_willThrow();
    return v2;
  }
  swift_bridgeObjectRetain();
  int64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v7 <= 0) {
    goto LABEL_49;
  }
LABEL_3:
  uint64_t v8 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0, MEMORY[0x263F8EE78]);
  unint64_t v63 = a1 & 0xC000000000000001;
  unint64_t v61 = v1;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_52:
    MEMORY[0x22A689930](0, a1);
LABEL_6:
    int v10 = REAssetHandleAssetType();
    if (v10 == 11)
    {
      RootTimeCTLineRef line = REAnimationSceneAssetGetRootTimeline();
      uint64_t result = swift_release();
      if (!RootTimeline) {
        goto LABEL_62;
      }
    }
    else
    {
      if (v10 != 5) {
        goto LABEL_61;
      }
      swift_release();
    }
    unint64_t v3 = &v73;
    REAnimationAssetGetTotalDuration();
    double v4 = v13;
    if (v63) {
      MEMORY[0x22A689930](0, a1);
    }
    else {
      swift_retain();
    }
    AnimationResource.definition.getter((uint64_t *)&v73);
    swift_release();
    v83[0] = v8;
    unint64_t v5 = *(void *)(v8 + 16);
    unint64_t v9 = *(void *)(v8 + 24);
    if (v5 < v9 >> 1) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
  unint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
LABEL_54:
  *((void *)v3 + 19) = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v5 + 1, 1, (void *)v8);
LABEL_14:
  uint64_t v14 = *((void *)v3 + 3);
  uint64_t v15 = *((void *)v3 + 4);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v73, v14);
  __n128 v17 = MEMORY[0x270FA5388](v16);
  __n128 v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v20 + 16))(v19, v17);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, (uint64_t)v19, v83, v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
  uint64_t v21 = v83[0];
  if (v7 == 1 || (~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_16:
    if (*(void *)(v21 + 16))
    {
      outlined init with copy of __REAssetService(v21 + 32, (uint64_t)&v73);
      uint64_t v22 = *((void *)&v74 + 1);
      uint64_t v23 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 56))(v72, v22, v23);
      LODWORD(v5) = LOBYTE(v72[0]);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
      if (one-time initialization token for backwards == -1) {
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_18:
    if ((static AnimationFillMode.backwards & ~v5) != 0) {
      char v24 = 0;
    }
    else {
      char v24 = static AnimationFillMode.backwards;
    }
    uint64_t v25 = v83[0];
    uint64_t v26 = *(void *)(v83[0] + 16);
    if (v26)
    {
      outlined init with copy of __REAssetService(v83[0] + 40 * v26 - 8, (uint64_t)&v73);
      uint64_t v27 = *((void *)&v74 + 1);
      uint64_t v28 = v75;
      __swift_project_boxed_opaque_existential_1(&v73, *((uint64_t *)&v74 + 1));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 56))(v72, v27, v28);
      LODWORD(v5) = LOBYTE(v72[0]);
      if (one-time initialization token for forwards == -1)
      {
LABEL_23:
        int v29 = static AnimationFillMode.forwards;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
        char v30 = static AnimationFillMode.forwards;
        if ((v29 & ~v5) != 0) {
          char v30 = 0;
        }
        char v31 = v30 | v24;
        v72[3] = (uint64_t)&type metadata for AnimationGroup;
        v72[4] = (uint64_t)&protocol witness table for AnimationGroup;
        uint64_t v32 = swift_allocObject();
        v72[0] = v32;
        type metadata accessor for TimelineDefinition();
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = 0;
        v65[0] = 0;
        v65[1] = 0;
        char v66 = -1;
        v69.i8[0] = 0;
        char v71 = 0;
        TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(0x65636E6575716573, 0xEE0070756F72672DLL, v65, 0, v69.i8, &v71, 0, 1, (uint64_t)&v73, 0.0, 0.0, 1.0, 0, 1, 0, 1);
        long long v34 = v80;
        *(_OWORD *)(v32 + 120) = v79;
        *(_OWORD *)(v32 + 136) = v34;
        *(_OWORD *)(v32 + 152) = v81;
        long long v35 = v76;
        *(_OWORD *)(v32 + 56) = v75;
        *(_OWORD *)(v32 + 72) = v35;
        long long v36 = v78;
        *(_OWORD *)(v32 + 88) = v77;
        *(_OWORD *)(v32 + 104) = v36;
        long long v37 = v74;
        *(_OWORD *)(v32 + 24) = v73;
        LOBYTE(v65[0]) = 0;
        v69.i8[0] = 0;
        *(void *)(v32 + 16) = v25;
        *(void *)(v32 + 168) = v82;
        *(_OWORD *)(v32 + 40) = v37;
        *(_OWORD *)(v32 + 176) = xmmword_2283491B0;
        *(void *)(v32 + 192) = 0;
        *(void *)(v32 + 200) = 0;
        *(unsigned char *)(v32 + 208) = -1;
        *(_DWORD *)(v32 + 212) = 0;
        *(unsigned char *)(v32 + 216) = 0;
        *(unsigned char *)(v32 + 217) = v31;
        *(unsigned char *)(v32 + 218) = 0;
        *(unsigned char *)(v32 + 219) = 0;
        *(void *)(v32 + 224) = v33;
        swift_bridgeObjectRetain();
        uint64_t v2 = specialized static AnimationResource.generate(with:)((uint64_t)v72);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_23;
  }
  uint64_t v38 = 0;
  uint64_t v60 = a1 & 0xFFFFFFFFFFFFFF8;
  int64_t v62 = v7 - 2;
  double v39 = 0.0;
  uint64_t v8 = 1;
  while (1)
  {
    int64_t v7 = v63;
    if (v63)
    {
      MEMORY[0x22A689930](v38 + 1, a1);
    }
    else
    {
      if ((unint64_t)(v38 + 1) >= *(void *)(v60 + 16))
      {
        __break(1u);
        goto LABEL_52;
      }
      swift_retain();
    }
    int v40 = REAssetHandleAssetType();
    if (v40 != 11) {
      break;
    }
    uint64_t v41 = REAnimationSceneAssetGetRootTimeline();
    swift_release();
    if (!v41) {
      goto LABEL_60;
    }
LABEL_35:
    REAnimationAssetGetTotalDuration();
    double v43 = v42;
    if (v7) {
      MEMORY[0x22A689930](v38 + 1, a1);
    }
    else {
      swift_retain();
    }
    AnimationResource.definition.getter(v72);
    swift_release();
    *(void *)&long long v73 = 0;
    *((void *)&v73 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)&v73, "sequence-anim(");
    HIBYTE(v73) = -18;
    v65[0] = v38 + 1;
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 41;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    long long v46 = v73;
    int8x16_t v69 = 0uLL;
    char v70 = -1;
    if (v7) {
      MEMORY[0x22A689930](v38 + 1, a1);
    }
    else {
      swift_retain();
    }
    double v39 = v4 + v39;
    AnimationResource.definition.getter(v65);
    swift_release();
    uint64_t v48 = v67;
    uint64_t v47 = v68;
    __swift_project_boxed_opaque_existential_1(v65, v67);
    (*(void (**)(char *__return_ptr, uint64_t, uint64_t))(v47 + 56))(&v71, v48, v47);
    char v64 = 0;
    *((void *)&v74 + 1) = &type metadata for AnimationView;
    *(void *)&long long v75 = &protocol witness table for AnimationView;
    *(void *)&long long v73 = swift_allocObject();
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v72, v46, *((uint64_t *)&v46 + 1), &v69, 0, &v64, &v71, 0, v73 + 16, 0.0, v39, 1.0, 1, 0, 1, 0, 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    long long v49 = (void *)v83[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49[2] + 1, 1, v49);
      v83[0] = (uint64_t)v49;
    }
    unint64_t v5 = v49[2];
    unint64_t v50 = v49[3];
    if (v5 >= v50 >> 1) {
      v83[0] = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v50 > 1), v5 + 1, 1, v49);
    }
    uint64_t v51 = *((void *)&v74 + 1);
    uint64_t v52 = v75;
    uint64_t v53 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v73, *((uint64_t *)&v74 + 1));
    __n128 v54 = MEMORY[0x270FA5388](v53);
    uint64_t v56 = (char *)&v59 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v57 + 16))(v56, v54);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, (uint64_t)v56, v83, v51, v52);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    uint64_t v21 = v83[0];
    if (v62 != v38)
    {
      ++v38;
      double v4 = v43;
      if ((~*(void *)&v43 & 0x7FF0000000000000) != 0) {
        continue;
      }
    }
    goto LABEL_16;
  }
  if (v40 == 5)
  {
    swift_release();
    goto LABEL_35;
  }
  swift_release();
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = swift_release();
  __break(1u);
LABEL_62:
  __break(1u);
  return result;
}

void AnimationResource.store(in:)()
{
  int v0 = REAssetHandleAssetType();
  if (v0 == 5 || v0 == 11 && REAnimationSceneAssetGetRootTimeline())
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    if (MEMORY[0x22A692220](ServiceLocator))
    {
      REAnimationLibraryComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if (REAnimationLibraryComponentGetAnimationLibraryAsset())
      {
        if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset())
        {
          static os_log_type_t.error.getter();
          type metadata accessor for OS_os_log();
          uint64_t v2 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();

          return;
        }
      }
      else
      {
        REAnimationLibraryDefinitionCreate();
      }
      REAnimationLibraryDefinitionAddEntryAsset();
      if (REAnimationLibraryDefinitionCreateAnimationLibraryAsset())
      {
        REAnimationLibraryComponentAssignAnimationLibraryAsset();
      }
      else
      {
        static os_log_type_t.error.getter();
        type metadata accessor for OS_os_log();
        unint64_t v3 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
      }
      RERelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    id v4 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
  }
}

uint64_t AnimationResource.eventTimelineDefinition.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t inited = swift_initStackObject();
  swift_retain();
  int v3 = REAssetHandleAssetType();
  if (v3 != 5 && (v3 != 11 || !REAnimationSceneAssetGetRootTimeline()))
  {
    __break(1u);
LABEL_16:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v4 = RETimelineDefinitionCreateFromTimeline();
  swift_release();
  *(void *)(inited + 16) = v4;
  if (!v4)
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_12;
  }
  if (!RETimelineDefinitionEventTimelineGetEventTypeName()) {
    goto LABEL_16;
  }
  uint64_t v5 = String.init(cString:)();
  int64_t v7 = v6;
  if (one-time initialization token for actionTypeMap != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static AnimationResource.actionTypeMap;
  if (*(void *)(static AnimationResource.actionTypeMap + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, (uint64_t)v7);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v9);
      swift_endAccess();
      swift_bridgeObjectRelease_n();
      *(void *)(a1 + 24) = type metadata accessor for ActionAnimation();
      *(void *)(a1 + 32) = &protocol witness table for ActionAnimation<A>;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
      static EntityAction.makeActionAnimation(_:)(v11, (uint64_t)boxed_opaque_existential_1);
LABEL_12:
      swift_bridgeObjectRelease();
      outlined consume of BindTarget?(0, 0, 0xFFu);
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  _StringGuts.grow(_:)(67);
  v14._countAndFlagsBits = 0xD000000000000040;
  v14._object = (void *)0x800000022835F680;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v5;
  v15._object = v7;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 39;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(0, 0, 0xFFu);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_228293748()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 224, 7);
}

uint64_t sub_2282937C8()
{
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 32), *(void *)(v0 + 40), v1);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 329, 15);
}

uint64_t objectdestroy_8Tm()
{
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 32), *(void *)(v0 + 40), v1);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  if (*(void *)(v0 + 248)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 224);
  }

  return MEMORY[0x270FA0238](v0, 264, 7);
}

uint64_t objectdestroy_32Tm_0()
{
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 32), *(void *)(v0 + 40), v1);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 304, 7);
}

uint64_t sub_2282939AC()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  if (*(void *)(v0 + 224) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 232) != 1) {
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 240) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 320, 15);
}

uint64_t sub_228293A6C()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 480, 15);
}

uint64_t objectdestroy_59Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 384, 15);
}

uint64_t objectdestroy_68Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 336, 15);
}

uint64_t sub_228293C30()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 200);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 184), *(void *)(v0 + 192), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 320, 15);
}

uint64_t sub_228293CC0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 152);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 136), *(void *)(v0 + 144), v1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(v0 + 208);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 192), *(void *)(v0 + 200), v2);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 232, 7);
}

uint64_t sub_228293D48()
{
  swift_release();
  swift_bridgeObjectRelease();
  int v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255) {
    outlined consume of BindTarget(*(void *)(v0 + 128), *(void *)(v0 + 136), v1);
  }
  swift_release();

  return MEMORY[0x270FA0238](v0, 168, 7);
}

void AnimationResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AnimationResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t static AnimationResource.makeActionAnimation<A>(for:duration:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t a8, double a9, double a10, double a11, float a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19)
{
  uint64_t v58 = a8;
  int v62 = a5;
  uint64_t v50 = a1;
  uint64_t v51 = a3;
  uint64_t v56 = a14;
  uint64_t v57 = a2;
  uint64_t v55 = a16;
  int v53 = a15 & 1;
  int v54 = a13 & 1;
  uint64_t v26 = *(void *)(a18 - 8);
  int v52 = a17 & 1;
  MEMORY[0x270FA5388](a1);
  long long v49 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v29 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v29 - 8);
  char v31 = (char *)&v45 - v30;
  uint64_t v46 = *(void *)a4;
  uint64_t v45 = *(void *)(a4 + 8);
  int v48 = *a6;
  int v47 = *a7;
  double v32 = fmax(a9, 0.0333333333);
  if (a9 <= 0.0) {
    a9 = v32;
  }
  unsigned __int8 v33 = *(unsigned char *)(a4 + 16);
  type metadata accessor for ActionEventDefinition();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v34 = static Array._adoptStorage(_:count:)();
  long long v36 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v31, 1, 1, AssociatedTypeWitness);
  ActionEventDefinition.init(startTime:duration:parameter:)((uint64_t)v31, v36, 0.0, a9);
  uint64_t v37 = _finalizeUninitializedArray<A>(_:)(v34);
  uint64_t v38 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v49, v50, a18);
  uint64_t v39 = v46;
  uint64_t v40 = v45;
  v59[0] = v46;
  v59[1] = v45;
  unsigned __int8 v60 = v33;
  char v64 = v48;
  unsigned __int8 v63 = v47;
  v61[3] = type metadata accessor for ActionAnimation();
  v61[4] = (uint64_t)&protocol witness table for ActionAnimation<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61);
  uint64_t v42 = v51;
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v39, v40, v33);
  ActionAnimation.init(for:events:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v38, v37, v57, v42, v59, v62, &v64, &v63, (uint64_t)boxed_opaque_existential_1, a10, a11, a12, v58, v54, v56, v53, v55, v52, a18,
    a19);
  uint64_t v43 = specialized static AnimationResource.generate(with:)((uint64_t)v61);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  return v43;
}

uint64_t specialized static AnimationResource.generate(with:)(uint64_t a1)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinitionInternal);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(v6, (uint64_t)v9);
    uint64_t v2 = v10;
    uint64_t v3 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for AnimationDefinitionInternal?);
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD00000000000001CLL;
    *(void *)(v4 + 8) = 0x800000022834E530;
    *(unsigned char *)(v4 + 16) = 0;
    swift_willThrow();
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type AnimationRepeatMode and conformance AnimationRepeatMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode;
  if (!lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationRepeatMode and conformance AnimationRepeatMode);
  }
  return result;
}

uint64_t type metadata accessor for AnimationResource()
{
  return self;
}

uint64_t method lookup function for AnimationResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnimationResource);
}

uint64_t dispatch thunk of AnimationResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of AnimationResource.__allocating_init(_:name:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for AnimationRepeatMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228294478);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationRepeatMode()
{
  return &type metadata for AnimationRepeatMode;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of REDecoder.Error();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnimationError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  outlined copy of REDecoder.Error();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of REDecoder.Error();
  return a1;
}

uint64_t assignWithTake for AnimationError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of REDecoder.Error();
  return a1;
}

ValueMetadata *type metadata accessor for AnimationError()
{
  return &type metadata for AnimationError;
}

void *specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A689930](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      unint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      id v13 = v8;
      char v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if (v11)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall Scene.updateAnchoring(with:frame:updatedAnchors:removedAnchors:)(ARSession with, ARFrame frame, Swift::OpaquePointer updatedAnchors, Swift::OpaquePointer removedAnchors)
{
  rawValue = removedAnchors._rawValue;
  int v103 = updatedAnchors._rawValue;
  isCGFloat a = frame.super.isa;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v114 = (uint64_t)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v96 - v8;
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  unint64_t v113 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v119 = (char *)&v96 - v13;
  uint64_t v104 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v104);
  uint64_t v111 = (uint64_t)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v15 - 8);
  __n128 v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v96 - v19;
  uint64_t v115 = (void *)v4;
  uint64_t ComponentsOfType = RESceneGetComponentsOfType();
  if (v22 < 0) {
    goto LABEL_105;
  }
  uint64_t v23 = v22;
  if (v22)
  {
    uint64_t v24 = ComponentsOfType;
    int v102 = v115 + 14;
    uint64_t v25 = v115 + 11;
    int v101 = v115 + 9;
    swift_beginAccess();
    __n128 v100 = v25;
    swift_beginAccess();
    uint64_t v120 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    long long v109 = (void (**)(uint64_t, char *, uint64_t))(v10 + 32);
    uint64_t v117 = (void (**)(char *, uint64_t))(v10 + 8);
    long long v99 = *(_OWORD *)&zmmword_22830EC90[48];
    long long v98 = *(_OWORD *)&zmmword_22830EC90[32];
    long long v97 = *(_OWORD *)&zmmword_22830EC90[16];
    long long v96 = *(_OWORD *)zmmword_22830EC90;
    uint64_t v121 = v20;
    uint64_t v122 = v9;
    long long v110 = v17;
    do
    {
      if (!v23)
      {
        __break(1u);
LABEL_104:
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
        return;
      }
      Entitdouble y = REComponentGetEntity();
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v27 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        if (REEntityIsBeingDestroyed()) {
          goto LABEL_104;
        }
        if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
          swift_once();
        }
        swift_beginAccess();
        if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
              (v28 & 1) == 0))
        {
          swift_endAccess();
          uint64_t v29 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v125 = static SceneManager.customComponentTypeObjectIdToHandles;
          static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
          static SceneManager.customComponentTypeObjectIdToHandles = v125;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        if (!REEntityGetCustomComponent()) {
          goto LABEL_37;
        }
        uint64_t Object = RECustomComponentGetObject();
        if (!Object) {
          goto LABEL_37;
        }
        double v32 = *(unsigned __int8 **)Object;
        if (*(void *)(Object + 8) || !v32)
        {
          swift_retain();
        }
        else
        {
          int v33 = *v32;
          uint64_t v34 = String.init(utf8String:)();
          if (v35) {
            Swift::Int v36 = v34;
          }
          else {
            Swift::Int v36 = 0;
          }
          if (v35) {
            unint64_t v37 = v35;
          }
          else {
            unint64_t v37 = 0xE000000000000000;
          }
          double v32 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v33 == 42, v36, v37);
          swift_bridgeObjectRelease();
          type metadata accessor for IntrospectionDataCleanupHelper();
          *(void *)(swift_allocObject() + 16) = v32;
        }
        if (!v32) {
          goto LABEL_106;
        }
        swift_retain();
        uint64_t v38 = String.init(utf8String:)();
        unint64_t v40 = v39;
        swift_release();
        uint64_t v41 = v40 ? v38 : 0;
        unint64_t v42 = v40 ? v40 : 0xE000000000000000;
        uint64_t v43 = (NSString *)MEMORY[0x22A688A50](v41, v42);
        swift_bridgeObjectRelease();
        Class v44 = NSClassFromString(v43);

        swift_release();
        if (!v44) {
          goto LABEL_37;
        }
        swift_getObjCClassMetadata();
        type metadata accessor for Entity();
        uint64_t v45 = swift_dynamicCastMetatype();
        if (v45)
        {
          uint64_t v27 = (*(uint64_t (**)(void))(v45 + 232))();
          uint64_t v46 = *(void *)(v27 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v46, 0);
          *(void *)(v27 + 16) = Entity;
          MEMORY[0x22A68E750](Entity, v27);
          swift_release();
        }
        else
        {
LABEL_37:
          uint64_t v27 = makeEntity(for:)(Entity);
        }
        uint64_t v20 = v121;
        unint64_t v9 = v122;
      }
      uint64_t v47 = swift_conformsToProtocol2();
      if (v47) {
        uint64_t v48 = v47;
      }
      else {
        uint64_t v48 = 0;
      }
      if (v47) {
        uint64_t v49 = v27;
      }
      else {
        uint64_t v49 = 0;
      }
      if (v49)
      {
        uint64_t v50 = *(void *)v49;
        swift_retain_n();
        RENetworkComponentGetComponentType();
        if (!REEntityGetComponentByClass())
        {
          swift_release();
          goto LABEL_52;
        }
        char IsAuthoritative = RENetworkComponentIsAuthoritative();
        swift_release();
        if (IsAuthoritative) {
          goto LABEL_52;
        }
        HasAnchoring.anchoring.getter((uint64_t)v20);
        outlined init with copy of AnchoringComponent.Target((uint64_t)v20, v111);
        if ((swift_getEnumCaseMultiPayload() | 8) != 8)
        {
          _s10RealityKit18AnchoringComponentVWOhTm_0(v111, type metadata accessor for AnchoringComponent.Target);
          _s10RealityKit18AnchoringComponentVWOhTm_0((uint64_t)v20, type metadata accessor for AnchoringComponent.Target);
LABEL_52:
          HasAnchoring.anchorIdentifier.getter((uint64_t)v9);
          int v52 = *v120;
          uint64_t v53 = v123;
          if ((*v120)(v9, 1, v123) == 1)
          {
            outlined destroy of UUID?((uint64_t)v9);
LABEL_88:
            Class v75 = isa;
            uint64_t v76 = v114;
            HasAnchoring.anchorIdentifier.getter(v114);
            unsigned int v77 = v52((char *)v76, 1, v123);
            outlined destroy of UUID?(v76);
            if (v77 != 1
              && (long long v78 = *(uint64_t (**)(uint64_t))(*(void *)v49 + 184),
                  uint64_t v79 = swift_retain(),
                  char v80 = v78(v79),
                  Class v75 = isa,
                  char v81 = v80,
                  swift_release(),
                  (v81 & 1) != 0))
            {
LABEL_92:
              swift_release_n();
            }
            else
            {
              uint64_t v82 = v75;
              uint64_t v83 = (uint64_t)v110;
              HasAnchoring.anchoring.getter((uint64_t)v110);
              id v84 = Scene.matchingAnchor(for:frame:)(v83, (unint64_t)v75);
              if (v84)
              {
                unint64_t v85 = v84;
                specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(v49, v84, v83, v75, 1, v50);

                _s10RealityKit18AnchoringComponentVWOhTm_0(v83, type metadata accessor for AnchoringComponent);
                goto LABEL_92;
              }
              _s10RealityKit18AnchoringComponentVWOhTm_0(v83, type metadata accessor for AnchoringComponent);
              swift_release_n();
            }
            uint64_t v20 = v121;
            unint64_t v9 = v122;
            goto LABEL_5;
          }
          (*v109)((uint64_t)v119, v9, v53);
          int v54 = v113;
          UUID.init(uuid:)();
          char v55 = static UUID.== infix(_:_:)();
          unint64_t v116 = *v117;
          v116(v54, v53);
          if (v55)
          {
            uint64_t Strong = swift_weakLoadStrong();
            if (Strong)
            {
              uint64_t active = Strong;
              goto LABEL_100;
            }
            uint64_t active = closure #1 in Scene.internalActiveCamera.getter(54, (uint64_t)v115);
            if (active
              || (uint64_t active = closure #1 in Scene.internalActiveCamera.getter(55, (uint64_t)v115)) != 0
              || (uint64_t active = closure #1 in Scene.internalActiveCamera.getter(56, (uint64_t)v115)) != 0)
            {
LABEL_100:
              *(double *)&long long v86 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(active, 0);
              long long v108 = v86;
              long long v107 = v87;
              long long v106 = v88;
              long long v105 = v89;
              swift_release();
            }
            else
            {
              if (!*v101)
              {
                uint64_t v72 = v115[10];
                uint64_t v71 = v115[11];
                v115[10] = v71;
                swift_retain_n();
                if (v72)
                {
                  if (!v71 || *(void *)(v72 + 16) != *(void *)(v71 + 16))
                  {
                    swift_retain();
                    REListenerComponentGetComponentType();
                    if (REEntityGetComponentByClass())
                    {
                      REListenerComponentSetSystemListener();
                      REListenerComponentGetComponentType();
                      REEntityRemoveComponentByClass();
                    }
                    swift_release();
                    if (v115[10])
                    {
LABEL_77:
                      swift_retain();
                      REListenerComponentGetComponentType();
                      REEntityGetOrAddComponentByClass();
                      REListenerComponentSetSystemListener();
                      swift_release();
                      swift_release();
                      goto LABEL_97;
                    }
                  }
                }
                else if (v71)
                {
                  goto LABEL_77;
                }
                swift_release();
LABEL_97:
                swift_release();
                uint64_t v53 = v123;
              }
              uint64_t active = *v100;
              long long v108 = v96;
              long long v107 = v97;
              long long v106 = v98;
              long long v105 = v99;
              if (active)
              {
                swift_retain();
                goto LABEL_100;
              }
            }
            int v90 = v113;
            UUID.init(uuid:)();
            uint64_t v91 = v53;
            id v92 = objc_allocWithZone(MEMORY[0x263EF8F00]);
            Class v93 = UUID._bridgeToObjectiveC()().super.isa;
            id v94 = objc_msgSend(v92, sel_initWithIdentifier_transform_, v93, *(double *)&v108, *(double *)&v107, *(double *)&v106, *(double *)&v105);

            unint64_t v95 = (void (*)(uint64_t, uint64_t))v116;
            v116(v90, v91);
            specialized Scene.updateEntity(_:with:)(v49, v48, v94);
            swift_release_n();

            unint64_t v9 = v122;
            v95((uint64_t)v119, v91);
            uint64_t v20 = v121;
            goto LABEL_5;
          }
          if (rawValue[2])
          {
            unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v119);
            if (v59)
            {
              unsigned __int8 v60 = *(void **)(rawValue[7] + 8 * v58);
              swift_retain();
              id v61 = v60;
              LOBYTE(v60) = specialized Scene.reanchorToReplacementAnchor(for:with:frame:)(v49, v61, isa, v50, v48);
              swift_release();
              if (v60)
              {
                v116(v119, v123);

                goto LABEL_88;
              }
              HasAnchoring.removeActiveAnchor()();

LABEL_86:
              uint64_t v69 = (uint64_t)v119;
              uint64_t v70 = v123;
LABEL_87:
              v116((char *)v69, v70);
              goto LABEL_88;
            }
          }
          if (!v103[2] || (unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v119), (v63 & 1) == 0))
          {
            uint64_t v69 = (uint64_t)v119;
            uint64_t v70 = v53;
            goto LABEL_87;
          }
          char v64 = *(void **)(v103[7] + 8 * v62);
          self;
          char v65 = (void *)swift_dynamicCastObjCClass();
          id v66 = v64;
          uint64_t v67 = v66;
          if (v65)
          {
            id v68 = v66;
            if (objc_msgSend(v65, sel_isDetectionOnly))
            {
              specialized Scene.updateEntity(_:with:)(v49, v48, v68);
LABEL_85:

              goto LABEL_86;
            }
          }
          int v124 = &unk_26DCD7438;
          uint64_t v73 = swift_dynamicCastObjCProtocolConditional();
          if (v73)
          {
            long long v74 = (void *)v73;
            id v68 = v67;
            if ((objc_msgSend(v74, sel_isTracked) & 1) == 0)
            {
              HasAnchoring.removeActiveAnchor()();
              goto LABEL_85;
            }
          }
          specialized Scene.updateEntity(_:with:)(v49, v48, v67);

          goto LABEL_86;
        }
        _s10RealityKit18AnchoringComponentVWOhTm_0((uint64_t)v20, type metadata accessor for AnchoringComponent.Target);
        swift_release_n();
      }
      else
      {
        swift_release();
      }
LABEL_5:
      v24 += 8;
      --v23;
    }
    while (v23);
  }
}

id Scene.cameraAnchor.getter()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t active = Scene.internalActiveCamera.getter();
  if (active)
  {
    *(double *)&long long v5 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(active, 0);
    long long v13 = v5;
    long long v14 = v6;
    long long v15 = v7;
    long long v16 = v8;
    swift_release();
  }
  else
  {
    long long v16 = *(_OWORD *)&zmmword_22830EC90[48];
    long long v15 = *(_OWORD *)&zmmword_22830EC90[32];
    long long v14 = *(_OWORD *)&zmmword_22830EC90[16];
    long long v13 = *(_OWORD *)zmmword_22830EC90;
  }
  UUID.init(uuid:)();
  id v9 = objc_allocWithZone(MEMORY[0x263EF8F00]);
  isCGFloat a = UUID._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v9, sel_initWithIdentifier_transform_, isa, *(double *)&v13, *(double *)&v14, *(double *)&v15, *(double *)&v16);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v11;
}

Swift::Void __swiftcall Scene.updateAnchoring()()
{
  uint64_t v1 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v69 = (uint64_t)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v77 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v73 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v64 - v9;
  id v78 = Scene.cameraAnchor.getter();
  uint64_t v71 = v0;
  uint64_t ComponentsOfType = RESceneGetComponentsOfType();
  if (v12 < 0) {
    goto LABEL_73;
  }
  uint64_t v13 = v12;
  if (!v12)
  {
    id v63 = v78;

    return;
  }
  uint64_t v14 = ComponentsOfType;
  uint64_t v68 = v71 + 64;
  swift_beginAccess();
  uint64_t v75 = v5;
  uint64_t v76 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v72 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  long long v74 = (void (**)(char *, uint64_t))(v6 + 8);
  while (v13)
  {
    Entitdouble y = REComponentGetEntity();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v16 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed()) {
        goto LABEL_72;
      }
      if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
            (v17 & 1) == 0))
      {
        swift_endAccess();
        uint64_t v18 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v79 = static SceneManager.customComponentTypeObjectIdToHandles;
        static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
        static SceneManager.customComponentTypeObjectIdToHandles = v79;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          uint64_t v21 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8) || !v21)
          {
            swift_retain();
          }
          else
          {
            int v22 = *v21;
            uint64_t v23 = String.init(utf8String:)();
            if (v24) {
              Swift::Int v25 = v23;
            }
            else {
              Swift::Int v25 = 0;
            }
            if (v24) {
              unint64_t v26 = v24;
            }
            else {
              unint64_t v26 = 0xE000000000000000;
            }
            uint64_t v21 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v22 == 42, v25, v26);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            *(void *)(swift_allocObject() + 16) = v21;
          }
          if (!v21) {
            goto LABEL_74;
          }
          swift_retain();
          uint64_t v27 = String.init(utf8String:)();
          unint64_t v29 = v28;
          swift_release();
          uint64_t v30 = v29 ? v27 : 0;
          unint64_t v31 = v29 ? v29 : 0xE000000000000000;
          double v32 = (NSString *)MEMORY[0x22A688A50](v30, v31);
          swift_bridgeObjectRelease();
          Class v33 = NSClassFromString(v32);

          swift_release();
          uint64_t v5 = v75;
          if (v33)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v34 = swift_dynamicCastMetatype();
            if (v34)
            {
              uint64_t v35 = (*(uint64_t (**)(void))(v34 + 232))();
              uint64_t v36 = *(void *)(v35 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v36, 0);
              *(void *)(v35 + 16) = Entity;
              MEMORY[0x22A68E750](Entity, v35);
              swift_release();
              goto LABEL_39;
            }
          }
        }
      }
      uint64_t v16 = makeEntity(for:)(Entity);
    }
    uint64_t v35 = v16;
LABEL_39:
    if (swift_conformsToProtocol2()) {
      unint64_t v37 = (uint64_t *)v35;
    }
    else {
      unint64_t v37 = 0;
    }
    if (v37)
    {
      uint64_t v38 = *v37;
      swift_retain();
      RENetworkComponentGetComponentType();
      if (REEntityGetComponentByClass() && (RENetworkComponentIsAuthoritative() & 1) == 0) {
        goto LABEL_51;
      }
      uint64_t v39 = v77;
      HasAnchoring.anchorIdentifier.getter(v77);
      if ((*v76)(v39, 1, v5) == 1)
      {
        outlined destroy of UUID?(v39);
        RENetworkComponentGetComponentType();
        if (!REEntityGetComponentByClass() || RENetworkComponentIsAuthoritative())
        {
          unint64_t v40 = (void *)MEMORY[0x22A696620](v68);
          id v41 = objc_msgSend(v40, sel_currentFrame);

          uint64_t v42 = v69;
          HasAnchoring.anchoring.getter(v69);
          id v43 = Scene.matchingAnchor(for:frame:)(v42, (unint64_t)v41);
          if (v43)
          {
            Class v44 = v43;
            specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)((uint64_t)v37, v43, v42, v41, 1, v38);

            _s10RealityKit18AnchoringComponentVWOhTm_0(v42, type metadata accessor for AnchoringComponent);
            swift_release_n();
          }
          else
          {
            _s10RealityKit18AnchoringComponentVWOhTm_0(v42, type metadata accessor for AnchoringComponent);
            swift_release_n();
          }
          uint64_t v5 = v75;
          goto LABEL_5;
        }
LABEL_51:
        swift_release_n();
        goto LABEL_5;
      }
      (*v72)(v10, v39, v5);
      uint64_t v45 = v73;
      UUID.init(uuid:)();
      char v46 = static UUID.== infix(_:_:)();
      uint64_t v47 = v45;
      uint64_t v48 = *v74;
      (*v74)(v47, v5);
      if (v46)
      {
        uint64_t v70 = v48;
        REAnchorComponentGetComponentType();
        uint64_t ComponentByClass = REEntityGetComponentByClass();
        if (!ComponentByClass && !REComponentCreateByType()) {
          goto LABEL_75;
        }
        self;
        uint64_t v50 = (void *)swift_dynamicCastObjCClass();
        id v51 = v78;
        if (v50)
        {
          id v52 = v78;
          if (objc_msgSend(v50, sel_alignment))
          {

            id v51 = v78;
            goto LABEL_58;
          }
          objc_msgSend(v50, sel_transform);
          if (one-time initialization token for identity != -1)
          {
            long long v67 = (__int128)v53;
            int32x4_t v66 = v54;
            int8x16_t v65 = v55;
            long long v64 = (__int128)v56;
            swift_once();
            int32x4_t v56 = (int32x4_t)v64;
            int8x16_t v55 = v65;
            int32x4_t v54 = v66;
            float32x4_t v53 = (float32x4_t)v67;
          }
          int32x4_t v57 = v56;
          v57.i32[3] = 0;
          int32x4_t v66 = v57;
          long long v67 = static simd_quatf.identity;
          LODWORD(v58) = simd_float4x4.scale.getter(v53, v54, v55).n64_u32[0];
          *(double *)v59.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v66.i64, (float32x4_t)v67, v58);
          long long v67 = (__int128)v59;
          int32x4_t v66 = v60;
          int8x16_t v65 = v61;
          long long v64 = v62;
        }
        else
        {
LABEL_58:
          objc_msgSend(v51, sel_transform);
        }
        uint64_t v5 = v75;
        REAnchorComponentSetWorldTransform();
        REAnchorComponentSetAnchoredLocally();
        if (!ComponentByClass)
        {
          REEntityAddExistingComponent();
          RERelease();
        }
        swift_release_n();
        v70(v10, v5);
        goto LABEL_5;
      }
      v48(v10, v5);
      swift_release_n();
    }
    else
    {
      swift_release();
    }
LABEL_5:
    v14 += 8;
    if (!--v13)
    {

      return;
    }
  }
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

id Scene.matchingAnchor(for:frame:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x270FA5388](v4 - 8);
  *(void *)&v102[0] = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x270FA5388](v6 - 8);
  *(void *)&long long v101 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v91 - v13;
  uint64_t v15 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v15);
  char v17 = (uint64_t *)((char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (long long *)((char *)&v91 - v19);
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)&v91 - v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    long long v22 = v20[3];
    long long v101 = v20[2];
    *(_OWORD *)int v102 = v22;
    long long v23 = v20[1];
    long long v99 = *v20;
    long long v100 = v23;
    UUID.init()();
    id v24 = objc_allocWithZone(MEMORY[0x263EF8F00]);
    isCGFloat a = UUID._bridgeToObjectiveC()().super.isa;
    a2 = (unint64_t)objc_msgSend(v24, sel_initWithIdentifier_transform_, isa, *(double *)&v99, *(double *)&v100, *(double *)&v101, v102[0]);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return (id)a2;
  }
  if (EnumCaseMultiPayload == 8) {
    return Scene.cameraAnchor.getter();
  }
  _s10RealityKit18AnchoringComponentVWOhTm_0((uint64_t)v20, type metadata accessor for AnchoringComponent.Target);
  if (!a2) {
    return (id)a2;
  }
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v17);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = v9;
      (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v17, v8);
      id v28 = (id)a2;
      id v29 = objc_msgSend(v28, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      MEMORY[0x270FA5388](v31);
      *(&v91 - 2) = (uint64_t)v11;
      a2 = (unint64_t)specialized Sequence.first(where:)(partial apply for closure #1 in Scene.matchingAnchor(for:frame:), (uint64_t)(&v91 - 4), v30);
      swift_bridgeObjectRelease();
      if (a2 && (v103 = &unk_26DCD7438, (double v32 = (void *)swift_dynamicCastObjCProtocolConditional()) != 0))
      {
        unsigned __int8 v33 = objc_msgSend(v32, sel_isTracked);

        (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v8);
        if ((v33 & 1) == 0)
        {

          return 0;
        }
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
      return (id)a2;
    case 2u:
      LODWORD(v34) = *(unsigned __int8 *)v17;
      *(void *)&v102[0] = v17[1];
      *(void *)&long long v26 = v17[2];
      long long v101 = v26;
      id v96 = (id)a2;
      id v35 = objc_msgSend(v96, sel_hitTest_types_, 16, 0.5, 0.5);
      type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARHitTestResult);
      a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (a2 >> 62) {
        goto LABEL_94;
      }
      uint64_t v36 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v36) {
        goto LABEL_95;
      }
      goto LABEL_13;
    case 3u:
      uint64_t v52 = *v17;
      uint64_t v53 = v17[1];
      uint64_t v55 = v17[2];
      uint64_t v54 = v17[3];
      id v56 = (id)a2;
      id v57 = objc_msgSend(v56, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float32x4_t v59 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t))closure #3 in Scene.matchingAnchor(for:frame:);
      goto LABEL_49;
    case 4u:
      uint64_t v60 = v101;
      outlined init with take of AnchoringComponent.Target((uint64_t)v17, v101, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
      id v61 = (id)a2;
      id v62 = objc_msgSend(v61, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v63 >> 62))
      {
        uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v64) {
          goto LABEL_40;
        }
LABEL_47:

        swift_bridgeObjectRelease();
        a2 = 0;
LABEL_86:
        swift_bridgeObjectRelease();
        _s10RealityKit18AnchoringComponentVWOhTm_0(v60, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
        return (id)a2;
      }
      swift_bridgeObjectRetain();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      if (!v64) {
        goto LABEL_47;
      }
LABEL_40:
      unint64_t v34 = v63 & 0xC000000000000001;
      uint64_t v65 = 4;
      while (1)
      {
        id v66 = v34 ? (id)MEMORY[0x22A689930](v65 - 4, v63) : *(id *)(v63 + 8 * v65);
        a2 = (unint64_t)v66;
        uint64_t v67 = v65 - 3;
        if (__OFADD__(v65 - 4, 1)) {
          break;
        }
        self;
        if (swift_dynamicCastObjCClass())
        {

          swift_bridgeObjectRelease();
          goto LABEL_86;
        }

        ++v65;
        if (v67 == v64) {
          goto LABEL_47;
        }
      }
      while (1)
      {
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        if (!v36) {
          break;
        }
LABEL_13:
        LODWORD(v100) = v34 & 2;
        int v97 = v34 & 1;
        uint64_t v94 = LOBYTE(v102[0]) & 8;
        uint64_t v95 = LOBYTE(v102[0]) & 0x10;
        uint64_t v92 = LOBYTE(v102[0]) & 2;
        uint64_t v93 = LOBYTE(v102[0]) & 4;
        uint64_t v98 = LOBYTE(v102[0]) & 1;
        float v37 = *((float *)&v101 + 1);
        uint64_t v38 = 4;
        while (1)
        {
          id v39 = (a2 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x22A689930](v38 - 4, a2)
              : *(id *)(a2 + 8 * v38);
          unint64_t v40 = v39;
          uint64_t v41 = v38 - 3;
          if (__OFADD__(v38 - 4, 1)) {
            break;
          }
          id v42 = objc_msgSend(v39, sel_anchor);
          if (v42)
          {
            id v43 = v42;
            self;
            Class v44 = (void *)swift_dynamicCastObjCClass();
            if (!v44) {
              goto LABEL_14;
            }
            uint64_t v45 = v44;
            id v46 = objc_msgSend(v44, sel_alignment);
            if (v34 != 255)
            {
              int v47 = v100;
              if (v46 != (id)1)
              {
                int v47 = v97;
                if (v46) {
                  goto LABEL_14;
                }
              }
              if (!v47) {
                goto LABEL_14;
              }
            }
            id v48 = objc_msgSend(v45, sel_classification);
            if (*(void *)&v102[0] != -1)
            {
              uint64_t v49 = v98;
              switch((unint64_t)v48)
              {
                case 1uLL:
                  break;
                case 2uLL:
                  uint64_t v49 = v92;
                  break;
                case 3uLL:
                  uint64_t v49 = v93;
                  break;
                case 4uLL:
                  uint64_t v49 = v94;
                  break;
                case 5uLL:
                  uint64_t v49 = v95;
                  break;
                default:
                  goto LABEL_14;
              }
              if (!v49) {
                goto LABEL_14;
              }
            }
            objc_msgSend(v45, sel_extent);
            if (*(float *)&v101 <= v50)
            {
              objc_msgSend(v45, sel_extent);
              long long v99 = v51;

              id v43 = v40;
              if (v37 <= *((float *)&v99 + 2)) {
                goto LABEL_96;
              }
            }
            else
            {
LABEL_14:
            }
          }
          else
          {
            id v43 = v40;
          }

          ++v38;
          if (v41 == v36) {
            goto LABEL_95;
          }
        }
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
      }
LABEL_95:
      unint64_t v40 = 0;
LABEL_96:
      swift_bridgeObjectRelease_n();
      id v89 = v40;
      a2 = (unint64_t)objc_msgSend(v89, sel_anchor);

      return (id)a2;
    case 5u:
      uint64_t v52 = *v17;
      uint64_t v53 = v17[1];
      uint64_t v55 = v17[2];
      uint64_t v54 = v17[3];
      id v56 = (id)a2;
      id v68 = objc_msgSend(v56, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      float32x4_t v59 = (uint64_t (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t))closure #5 in Scene.matchingAnchor(for:frame:);
LABEL_49:
      a2 = (unint64_t)specialized Sequence.first(where:)(v58, v52, v53, v55, v54, v59);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return (id)a2;
    case 6u:
      uint64_t v69 = *(void *)&v102[0];
      outlined init with take of AnchoringComponent.Target((uint64_t)v17, *(uint64_t *)&v102[0], type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
      id v70 = (id)a2;
      id v71 = objc_msgSend(v70, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v72 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        if (v73)
        {
LABEL_52:
          unint64_t v34 = 4;
          while (1)
          {
            if ((v72 & 0xC000000000000001) != 0) {
              id v74 = (id)MEMORY[0x22A689930](v34 - 4, v72);
            }
            else {
              id v74 = *(id *)(v72 + 8 * v34);
            }
            a2 = (unint64_t)v74;
            unint64_t v75 = v34 - 3;
            if (__OFADD__(v34 - 4, 1)) {
              goto LABEL_93;
            }
            self;
            if (swift_dynamicCastObjCClass()) {
              break;
            }

            ++v34;
            if (v75 == v73) {
              goto LABEL_59;
            }
          }

          swift_bridgeObjectRelease();
LABEL_88:
          swift_bridgeObjectRelease();
          _s10RealityKit18AnchoringComponentVWOhTm_0(v69, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
          return (id)a2;
        }
      }
      else
      {
        uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v73) {
          goto LABEL_52;
        }
      }
LABEL_59:

      swift_bridgeObjectRelease();
      a2 = 0;
      goto LABEL_88;
    case 9u:
      id v76 = (id)a2;
      id v77 = objc_msgSend(v76, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v78 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
        if (!v79) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v79 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v79) {
          goto LABEL_104;
        }
      }
      unint64_t v34 = 4;
      while (2)
      {
        if ((v78 & 0xC000000000000001) != 0) {
          id v80 = (id)MEMORY[0x22A689930](v34 - 4, v78);
        }
        else {
          id v80 = *(id *)(v78 + 8 * v34);
        }
        a2 = (unint64_t)v80;
        unint64_t v81 = v34 - 3;
        if (__OFADD__(v34 - 4, 1)) {
          goto LABEL_90;
        }
        self;
        uint64_t v82 = (void *)swift_dynamicCastObjCClass();
        if (!v82 || !objc_msgSend(v82, sel_isTracked))
        {

          ++v34;
          if (v81 == v79) {
            goto LABEL_104;
          }
          continue;
        }
        goto LABEL_83;
      }
    case 0xAu:
      id v76 = (id)a2;
      id v83 = objc_msgSend(v76, sel_anchors);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
      unint64_t v84 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v84 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
        if (v85)
        {
LABEL_75:
          unint64_t v34 = 4;
          while (1)
          {
            if ((v84 & 0xC000000000000001) != 0) {
              id v86 = (id)MEMORY[0x22A689930](v34 - 4, v84);
            }
            else {
              id v86 = *(id *)(v84 + 8 * v34);
            }
            a2 = (unint64_t)v86;
            unint64_t v87 = v34 - 3;
            if (__OFADD__(v34 - 4, 1)) {
              goto LABEL_91;
            }
            self;
            long long v88 = (void *)swift_dynamicCastObjCClass();
            if (v88)
            {
              if (objc_msgSend(v88, sel_isTracked)) {
                break;
              }
            }

            ++v34;
            if (v87 == v85) {
              goto LABEL_104;
            }
          }
LABEL_83:

          swift_bridgeObjectRelease();
LABEL_105:
          swift_bridgeObjectRelease();
          return (id)a2;
        }
      }
      else
      {
        uint64_t v85 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v85) {
          goto LABEL_75;
        }
      }
LABEL_104:

      swift_bridgeObjectRelease();
      a2 = 0;
      goto LABEL_105;
    default:
      _s10RealityKit18AnchoringComponentVWOhTm_0((uint64_t)v17, type metadata accessor for AnchoringComponent.Target);
      return 0;
  }
}

uint64_t closure #1 in Scene.matchingAnchor(for:frame:)(id *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = MEMORY[0x270FA5388](v2).n128_u64[0];
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(*a1, sel_identifier, v4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  char v8 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v8 & 1;
}

id closure #3 in Scene.matchingAnchor(for:frame:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a1;
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    id v11 = (void *)v10;
    uint64_t v12 = one-time initialization token for schemePrefix;
    id v13 = v9;
    if (v12 != -1) {
      swift_once();
    }
    if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix))
    {
      id v59 = v13;
      uint64_t v14 = type metadata accessor for __RealityFileURLResolver();
      uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v15, (uint64_t)&v55);
      uint64_t v16 = v57;
      uint64_t v17 = v58;
      uint64_t v18 = __swift_project_boxed_opaque_existential_1(&v55, v57);
      specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v18, v14, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
      v19._countAndFlagsBits = 47;
      v19._object = (void *)0xE100000000000000;
      if (String.hasSuffix(_:)(v19)
        || (uint64_t v20 = 47,
            uint64_t v21 = (void *)0xE100000000000000,
            v22._countAndFlagsBits = 47,
            v22._object = (void *)0xE100000000000000,
            String.hasPrefix(_:)(v22)))
      {
        uint64_t v20 = 0;
        uint64_t v21 = (void *)0xE000000000000000;
      }
      uint64_t v55 = a2;
      uint64_t v56 = a3;
      swift_bridgeObjectRetain();
      v23._countAndFlagsBits = v20;
      v23._object = v21;
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v24._countAndFlagsBits = a4;
      v24._object = a5;
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      uint64_t v26 = v55;
      uint64_t v25 = v56;
      id v27 = objc_msgSend(v11, sel_name);
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v31 = v30;

        id v13 = v59;
        if (v29 == v26 && v31 == v25)
        {
          swift_bridgeObjectRelease_n();
          swift_release();
LABEL_33:
          id v32 = objc_msgSend(v11, sel_isTracked);
          goto LABEL_34;
        }
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        id v32 = 0;
        if (v51) {
          goto LABEL_33;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        id v32 = 0;
        id v13 = v59;
      }
      goto LABEL_34;
    }
    v33._countAndFlagsBits = 979661685;
    v33._object = (void *)0xE400000000000000;
    if (String.hasPrefix(_:)(v33))
    {
      v34._countAndFlagsBits = 47;
      v34._object = (void *)0xE100000000000000;
      if (String.hasSuffix(_:)(v34)
        || (uint64_t v35 = 47,
            uint64_t v36 = (void *)0xE100000000000000,
            v37._countAndFlagsBits = 47,
            v37._object = (void *)0xE100000000000000,
            String.hasPrefix(_:)(v37)))
      {
        uint64_t v35 = 0;
        uint64_t v36 = (void *)0xE000000000000000;
      }
      uint64_t v55 = a2;
      uint64_t v56 = a3;
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = v35;
      v38._object = v36;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v39._countAndFlagsBits = a4;
      v39._object = a5;
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      uint64_t v40 = a2;
      id v41 = objc_msgSend(v11, sel_name);
      if (v41)
      {
        id v42 = v41;
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v44;

        if (v43 == v40 && v45 == a3)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_33;
        }
        char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v32 = 0;
        if (v52) {
          goto LABEL_33;
        }
LABEL_34:

        return v32;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      id v46 = objc_msgSend(v11, sel_name);
      if (v46)
      {
        int v47 = v46;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        float v50 = v49;

        if (v48 == a4 && v50 == a5)
        {
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        id v32 = 0;
        if (v53) {
          goto LABEL_33;
        }
        goto LABEL_34;
      }
    }
    id v32 = 0;
    goto LABEL_34;
  }
  return 0;
}

uint64_t closure #5 in Scene.matchingAnchor(for:frame:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a1;
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10) {
    goto LABEL_29;
  }
  id v11 = (void *)v10;
  uint64_t v12 = one-time initialization token for schemePrefix;
  id v13 = v9;
  if (v12 != -1) {
    swift_once();
  }
  if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix))
  {
    id v57 = v13;
    uint64_t v14 = type metadata accessor for __RealityFileURLResolver();
    uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v15, (uint64_t)&v53);
    uint64_t v16 = v55;
    uint64_t v17 = v56;
    uint64_t v18 = __swift_project_boxed_opaque_existential_1(&v53, v55);
    specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v18, v14, v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
    v19._countAndFlagsBits = 47;
    v19._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v19)
      || (uint64_t v20 = 47,
          uint64_t v21 = (void *)0xE100000000000000,
          v22._countAndFlagsBits = 47,
          v22._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v22)))
    {
      uint64_t v20 = 0;
      uint64_t v21 = (void *)0xE000000000000000;
    }
    uint64_t v53 = a2;
    uint64_t v54 = a3;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v20;
    v23._object = v21;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = a4;
    v24._object = a5;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v26 = v53;
    uint64_t v25 = v54;
    id v27 = objc_msgSend(v11, sel_name);
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      id v32 = v57;
      if (v29 == v26 && v31 == v25) {
        char v33 = 1;
      }
      else {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      return v33 & 1;
    }
    swift_bridgeObjectRelease();
    swift_release();

    goto LABEL_29;
  }
  v34._countAndFlagsBits = 979661685;
  v34._object = (void *)0xE400000000000000;
  if (String.hasPrefix(_:)(v34))
  {
    v35._countAndFlagsBits = 47;
    v35._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v35)
      || (uint64_t v36 = 47,
          Swift::String v37 = (void *)0xE100000000000000,
          v38._countAndFlagsBits = 47,
          v38._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v38)))
    {
      uint64_t v36 = 0;
      Swift::String v37 = (void *)0xE000000000000000;
    }
    uint64_t v54 = a3;
    swift_bridgeObjectRetain();
    v39._countAndFlagsBits = v36;
    v39._object = v37;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v40._countAndFlagsBits = a4;
    v40._object = a5;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    id v41 = objc_msgSend(v11, sel_name);
    if (v41)
    {
      id v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v45 = v44;

      if (v43 == a2 && v45 == a3) {
        char v33 = 1;
      }
      else {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v33 & 1;
    }
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  id v46 = objc_msgSend(v11, sel_name);
  if (!v46)
  {
LABEL_28:

LABEL_29:
    char v33 = 0;
    return v33 & 1;
  }
  int v47 = v46;
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  float v50 = v49;

  if (v48 == a4 && v50 == a5)
  {
    swift_bridgeObjectRelease();

    char v33 = 1;
    return v33 & 1;
  }
  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();

  return v52 & 1;
}

float SIMD3<>.rotationOnPlane(normal:forward:)(int32x4_t a1, int8x16_t a2, float32x4_t a3)
{
  float32x4_t v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a1, a1), (int8x16_t)a1, 0xCuLL);
  int32x4_t v4 = (int32x4_t)vmlaq_f32(vmulq_f32(v3, vnegq_f32(a3)), (float32x4_t)a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), (int8x16_t)a3, 0xCuLL));
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v4, v4), (int8x16_t)v4, 0xCuLL);
  float32x4_t v6 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), vnegq_f32((float32x4_t)a1)), v5, v3);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
  int32x4_t v8 = (int32x4_t)vmulq_f32(v6, v6);
  v5.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), *(float32x2_t *)v8.i8)).u32[0];
  *(float32x2_t *)v6.f32 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  *(float32x2_t *)v6.f32 = vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)));
  int8x16_t v9 = (int8x16_t)vmulq_n_f32(v7, vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32))).f32[0]);
  float32x4_t v19 = (float32x4_t)v9;
  v6.i32[1] = a2.i32[1];
  v7.f32[0] = vmuls_n_f32(*(float *)a2.i32, *(float *)v9.i32);
  v6.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v9.i32[0] = vextq_s8(v9, v9, 8uLL).u32[0];
  float32x2_t v10 = vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v9.i8);
  float result = acosf(fminf(fmaxf(v10.f32[0] + (float)(v7.f32[0] + v10.f32[1]), -1.0), 1.0));
  float32x4_t v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32((float32x4_t)a2)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), a2, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  int32x4_t v14 = (int32x4_t)vmulq_f32(v12, v12);
  v14.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8)).u32[0];
  float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
  int8x16_t v17 = (int8x16_t)vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  int8x16_t v18 = (int8x16_t)a1;
  *(float *)v14.i32 = vmuls_n_f32(*(float *)a1.i32, *(float *)v17.i32);
  v18.i32[0] = vextq_s8(v18, v18, 8uLL).u32[0];
  v17.i32[0] = vextq_s8(v17, v17, 8uLL).u32[0];
  *(float32x2_t *)v17.i8 = vmul_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v17.i8);
  if ((float)(*(float *)v17.i32 + (float)(*(float *)v14.i32 + *(float *)&v17.i32[1])) <= 0.0) {
    return -result;
  }
  return result;
}

void rotationThatFitsRect(rotation:size:rectSize:)(float a1, double a2, double a3)
{
  float v3 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a2, *(float32x2_t *)&a2)));
  if (v3 >= 0.00000011921)
  {
    float v4 = *((float *)&a3 + 1);
    float v5 = *((float *)&a3 + 1) / v3;
    char v6 = 2;
    char v7 = -2;
    char v8 = 1;
    if (a1 >= -0.7854) {
      char v9 = 0;
    }
    else {
      char v9 = -1;
    }
    if (a1 <= 0.7854) {
      char v8 = v9;
    }
    if (a1 >= -2.3562) {
      char v7 = v8;
    }
    if (a1 <= 2.3562) {
      char v6 = v7;
    }
    float32x2_t v11 = (float32x2_t)vbsl_s8((int8x8_t)vceqd_s64(v6 & 1, 0), *(int8x8_t *)&a2, (int8x8_t)vrev64_s32(*(int32x2_t *)&a2));
    if ((float)(*(float *)&a3 / v3) >= 1.0)
    {
      if (v5 >= 1.0) {
        return;
      }
      goto LABEL_19;
    }
    acosf(*(float *)&a3 / v3);
    if (vcgt_f32(*(float32x2_t *)&a3, v11).u8[0])
    {
      acosf(*(float *)&a2 / v3);
    }
    else if (vcgt_f32(*(float32x2_t *)&a3, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1)).u32[0])
    {
      acosf(*((float *)&a2 + 1) / v3);
    }
    if (v5 < 1.0)
    {
LABEL_19:
      acosf(v5);
      if (vcgt_f32(*(float32x2_t *)&a3, v11).i32[1])
      {
        acosf(*((float *)&a2 + 1) / v3);
      }
      else if (v11.f32[0] < v4)
      {
        acosf(*(float *)&a2 / v3);
      }
    }
  }
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(id *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v11 = 4;
    while (1)
    {
      id v12 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A689930](v11 - 4, a1) : *(id *)(a1 + 8 * v11);
      float32x4_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      id v20 = v12;
      char v15 = a6(&v20, a2, a3, a4, a5);
      if (v6)
      {
        swift_bridgeObjectRelease();

        return v13;
      }
      if (v15)
      {
        swift_bridgeObjectRelease();
        return v13;
      }

      ++v11;
      if (v14 == v10) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Scene.updateEntity(_:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  REAnchorComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    uint64_t result = REComponentCreateByType();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  if (v6)
  {
    char v7 = (void *)v6;
    id v8 = a3;
    if (!objc_msgSend(v7, sel_alignment))
    {
      objc_msgSend(v7, sel_transform);
      double v18 = v12;
      if (one-time initialization token for identity != -1)
      {
        int32x4_t v15 = v10;
        float32x4_t v17 = v9;
        int8x16_t v14 = v11;
        swift_once();
        int8x16_t v11 = v14;
        int32x4_t v10 = v15;
        float32x4_t v9 = v17;
      }
      float32x4_t v16 = (float32x4_t)static simd_quatf.identity;
      LODWORD(v13) = simd_float4x4.scale.getter(v9, v10, v11).n64_u32[0];
      specialized simd_float4x4.init(translation:rotation:scale:)(v18, v16, v13);

      goto LABEL_10;
    }
  }
  objc_msgSend(a3, sel_transform);
LABEL_10:
  REAnchorComponentSetWorldTransform();
  uint64_t result = REAnchorComponentSetAnchoredLocally();
  if (!ComponentByClass)
  {
    REEntityAddExistingComponent();
    return RERelease();
  }
  return result;
}

uint64_t specialized Scene.positionEntity(_:on:frame:minimumBounds:)(int a1, id a2, double a3, void *a4)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  objc_msgSend(a2, sel_center);
  objc_msgSend(a2, sel_center);
  objc_msgSend(a2, sel_extent);
  unsigned int v71 = v6;
  objc_msgSend(a2, sel_extent);
  unsigned int v70 = v7;
  if (objc_msgSend(a2, sel_alignment))
  {
    float32x4_t v66 = *(float32x4_t *)&zmmword_22830EC90[48];
    float32x4_t v65 = *(float32x4_t *)&zmmword_22830EC90[32];
    float32x4_t v64 = *(float32x4_t *)&zmmword_22830EC90[16];
    float32x4_t v63 = *(float32x4_t *)zmmword_22830EC90;
    float v8 = 0.0;
  }
  else
  {
    objc_msgSend(a2, sel_transform);
    v9.i32[3] = 0;
    float v10 = SIMD3<>.rotationOnPlane(normal:forward:)(*(int32x4_t *)&zmmword_22830EC90[16], *(int8x16_t *)&zmmword_22830EC90[32], v9);
    __float2 v11 = __sincosf_stret(v10 * 0.5);
    __n128 v12 = (__n128)vmulq_n_f32(*(float32x4_t *)&zmmword_22830EC90[16], v11.__sinval);
    v12.n128_u32[3] = LODWORD(v11.__cosval);
    *(double *)v13.i64 = MEMORY[0x22A6893A0](v12);
    float32x4_t v63 = v13;
    float32x4_t v64 = v14;
    float32x4_t v65 = v15;
    float32x4_t v66 = v16;
    id v17 = objc_msgSend(a4, sel_camera);
    objc_msgSend(v17, sel_transform);
    float32x4_t v74 = v18;

    float32x4_t v19 = v74;
    v19.i32[3] = 0;
    float32x4_t v75 = v19;
    objc_msgSend(a2, sel_transform);
    v20.i32[3] = 0;
    int32x4_t v58 = v20;
    objc_msgSend(a2, sel_transform);
    int8x16_t v22 = v21;
    v22.i32[3] = 0;
    float v23 = SIMD3<>.rotationOnPlane(normal:forward:)(v58, v22, v75);
    rotationThatFitsRect(rotation:size:rectSize:)(v23, a3, COERCE_DOUBLE(__PAIR64__(v70, v71)));
    float v8 = v24;
    float v25 = sqrtf(vaddv_f32(vmul_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a3)));
    if (v25 >= 0.00000011921)
    {
      float v26 = acosf(*(float *)&a3 / v25);
      fabsf(v25 * cosf(v8 + v26));
      float v27 = acosf(*((float *)&a3 + 1) / v25);
      cosf(v8 + v27);
    }
  }
  id v28 = objc_msgSend(a4, sel_camera);
  objc_msgSend(a2, sel_transform);
  objc_msgSend(v28, sel_unprojectPoint_ontoPlaneWithTransform_orientation_viewportSize_, 3, 0.5, 0.5, v29, v30, v31, v32, 1.0, 1.0);
  long long v76 = v33;

  if (((~v76 & 0x7F800000) != 0 || (v76 & 0x7FFFFF) == 0)
    && ((~DWORD1(v76) & 0x7F800000) == 0 ? (BOOL v34 = (DWORD1(v76) & 0x7FFFFF) == 0) : (BOOL v34 = 1),
        v34 && ((~DWORD2(v76) & 0x7F800000) == 0 ? (BOOL v35 = (DWORD2(v76) & 0x7FFFFF) == 0) : (BOOL v35 = 1), v35)))
  {
    objc_msgSend(a2, sel_transform);
    __invert_f4(v91);
    __sincosf_stret(v8 * 0.5);
    REComposeMatrix();
    float32x4_t v68 = v36;
    float32x4_t v72 = v37;
    float32x4_t v77 = v38;
    float32x4_t v79 = v39;
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v81);
    float v40 = *(float *)v81;
    uint64_t v42 = v81[2];
    uint64_t v41 = v81[3];
    double v43 = *(double *)&v81[4];
    swift_release();
    outlined init with take of Transform?((uint64_t)v81, (uint64_t)v84);
    if (v84[48])
    {
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      float v45 = *(float *)&static Transform.identity;
      float32x4_t v44 = (float32x4_t)xmmword_2681C7AB0;
      double v46 = *(double *)&xmmword_2681C7AC0;
    }
    else
    {
      float v45 = v40;
      v44.i64[0] = v42;
      v44.i64[1] = v41;
      double v46 = v43;
    }
    *(double *)v47.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v46, v44, v45);
    float32x4_t v59 = v47;
    float32x4_t v60 = v48;
    float32x4_t v61 = v50;
    float32x4_t v62 = v49;
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v82);
    swift_release();
    outlined init with take of Transform?((uint64_t)v82, (uint64_t)v83);
    if (v83[48] == 1 && one-time initialization token for identity != -1) {
      swift_once();
    }
    float32x4_t v51 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v68.f32[0]), v64, *(float32x2_t *)v68.f32, 1), v65, v68, 2), v66, v68, 3);
    float32x4_t v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v72.f32[0]), v64, *(float32x2_t *)v72.f32, 1), v65, v72, 2), v66, v72, 3);
    float32x4_t v53 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v77.f32[0]), v64, *(float32x2_t *)v77.f32, 1), v65, v77, 2), v66, v77, 3);
    float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v63, v79.f32[0]), v64, *(float32x2_t *)v79.f32, 1), v65, v79, 2), v66, v79, 3);
    float32x4_t v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v59.f32[0]), v52, *(float32x2_t *)v59.f32, 1), v53, v59, 2), v54, v59, 3);
    int32x4_t v69 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v60.f32[0]), v52, *(float32x2_t *)v60.f32, 1), v53, v60, 2), v54, v60, 3);
    float32x4_t v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v61.f32[0]), v52, *(float32x2_t *)v61.f32, 1), v53, v61, 2), v54, v61, 3);
    v55.i32[3] = 0;
    float32x4_t v80 = v55;
    long long v85 = 0u;
    int8x16_t v73 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, v62.f32[0]), v52, *(float32x2_t *)v62.f32, 1), v53, v62, 2), v54, v62, 3);
    REDecomposeMatrix();
    *(__n64 *)&long long v56 = simd_float4x4.scale.getter(v67, v69, v73);
    long long v85 = v56;
    uint64_t v86 = 0;
    uint64_t v87 = 0;
    float32x4_t v88 = v80;
    char v89 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v85);
    return swift_release();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v58 = a6;
  int v63 = a5;
  id v56 = a4;
  uint64_t v65 = a3;
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v64 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v64);
  uint64_t v57 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v61 = (uint64_t)&v55 - v10;
  v74.i64[0] = type metadata accessor for UUID();
  v73.i64[0] = *(void *)(v74.i64[0] - 8);
  MEMORY[0x270FA5388](v74.i64[0]);
  __n128 v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = a1;
  REAnchorComponentGetComponentType();
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  uint64_t v62 = ComponentByClass;
  if (!ComponentByClass) {
    uint64_t ComponentByClass = REComponentCreateByType();
  }
  id v14 = objc_msgSend(a2, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v15 = UUID.uuid.getter();
  LOBYTE(v14) = v15;
  char v17 = v16;
  unint64_t v18 = v15 >> 8;
  unint64_t v19 = v15 >> 16;
  float32x4_t v60 = a2;
  unint64_t v20 = v15 >> 24;
  unint64_t v21 = HIDWORD(v15);
  unint64_t v22 = v15 >> 40;
  unint64_t v23 = HIWORD(v15);
  unint64_t v66 = HIBYTE(v15);
  v67.i64[0] = v16 >> 8;
  v68.i64[0] = v16 >> 16;
  v69.i64[0] = v16 >> 24;
  v70.i64[0] = HIDWORD(v16);
  v71.i64[0] = v16 >> 40;
  v72.i64[0] = HIWORD(v16);
  float v24 = *(void (**)(char *, uint64_t))(v73.i64[0] + 8);
  v73.i64[0] = HIBYTE(v16);
  v24(v12, v74.i64[0]);
  LOBYTE(v77) = (_BYTE)v14;
  BYTE1(v77) = v18;
  BYTE2(v77) = v19;
  BYTE3(v77) = v20;
  BYTE4(v77) = v21;
  BYTE5(v77) = v22;
  BYTE6(v77) = v23;
  BYTE7(v77) = v66;
  BYTE8(v77) = v17;
  BYTE9(v77) = v67.i8[0];
  BYTE10(v77) = v68.i8[0];
  BYTE11(v77) = v69.i8[0];
  BYTE12(v77) = v70.i8[0];
  BYTE13(v77) = v71.i8[0];
  BYTE14(v77) = v72.i8[0];
  HIBYTE(v77) = v73.i8[0];
  if (!ComponentByClass) {
    __break(1u);
  }
  REAnchorComponentSetAnchorIdentifier();
  self;
  float v25 = v60;
  uint64_t v26 = swift_dynamicCastObjCClass();
  uint64_t v27 = v65;
  if (!v26) {
    goto LABEL_7;
  }
  id v28 = (void *)v26;
  id v29 = v25;
  if (objc_msgSend(v28, sel_alignment))
  {

LABEL_7:
    objc_msgSend(v25, sel_transform);
    goto LABEL_11;
  }
  objc_msgSend(v28, sel_transform);
  float32x4_t v38 = v37;
  v38.i32[3] = 0;
  float32x4_t v74 = v38;
  if (one-time initialization token for identity != -1)
  {
    int32x4_t v72 = v35;
    float32x4_t v73 = v34;
    float32x4_t v70 = v37;
    float32x4_t v71 = (float32x4_t)v36;
    swift_once();
    int8x16_t v36 = (int8x16_t)v71;
    int32x4_t v35 = v72;
    float32x4_t v34 = v73;
  }
  float32x4_t v73 = (float32x4_t)static simd_quatf.identity;
  LODWORD(v39) = simd_float4x4.scale.getter(v34, v35, v36).n64_u32[0];
  *(double *)v40.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v74.i64, v73, v39);
  float32x4_t v73 = v41;
  float32x4_t v74 = v40;
  float32x4_t v71 = v43;
  int32x4_t v72 = (int32x4_t)v42;

  float32x4_t v33 = v71;
  int8x16_t v32 = (int8x16_t)v72;
  float32x4_t v31 = v73;
  float32x4_t v30 = v74;
LABEL_11:
  float32x4_t v73 = v31;
  float32x4_t v74 = v30;
  float32x4_t v71 = v33;
  int32x4_t v72 = (int32x4_t)v32;
  REAnchorComponentSetWorldTransform();
  uint64_t v44 = v61;
  outlined init with copy of AnchoringComponent.Target(v27, v61);
  if ((swift_getEnumCaseMultiPayload() | 8) != 8) {
    _s10RealityKit18AnchoringComponentVWOhTm_0(v44, type metadata accessor for AnchoringComponent.Target);
  }
  REAnchorComponentSetRequiresLocalAnchoring();
  REAnchorComponentSetAnchoredLocally();
  float v45 = (float32x4_t *)(v27 + *(int *)(type metadata accessor for AnchoringComponent(0) + 28));
  if ((v45[4].i8[0] & 1) == 0)
  {
    float32x4_t v67 = *v45;
    float32x4_t v68 = v45[1];
    float32x4_t v69 = v45[2];
    float32x4_t v70 = v45[3];
    v79.columns[1] = (simd_float4)v73;
    v79.columns[0] = (simd_float4)v74;
    v79.columns[3] = (simd_float4)v71;
    v79.columns[2] = (simd_float4)v72;
    simd_float4x4 v80 = __invert_f4(v79);
    float32x4_t v74 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v80.columns[0], v67.f32[0]), (float32x4_t)v80.columns[1], *(float32x2_t *)v67.f32, 1), (float32x4_t)v80.columns[2], v67, 2), (float32x4_t)v80.columns[3], v67, 3);
    float32x4_t v73 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v80.columns[0], v68.f32[0]), (float32x4_t)v80.columns[1], *(float32x2_t *)v68.f32, 1), (float32x4_t)v80.columns[2], v68, 2), (float32x4_t)v80.columns[3], v68, 3);
    int32x4_t v72 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v80.columns[0], v69.f32[0]), (float32x4_t)v80.columns[1], *(float32x2_t *)v69.f32, 1), (float32x4_t)v80.columns[2], v69, 2), (float32x4_t)v80.columns[3], v69, 3);
    float32x4_t v71 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v80.columns[0], v70.f32[0]), (float32x4_t)v80.columns[1], *(float32x2_t *)v70.f32, 1), (float32x4_t)v80.columns[2], v70, 2), (float32x4_t)v80.columns[3], v70, 3);
    HasTransform.transform.getter();
    float32x4_t v46 = v71;
    v46.i32[3] = 0;
    float32x4_t v70 = v46;
    float32x4_t v76 = 0u;
    long long v77 = 0u;
    long long v75 = 0u;
    REDecomposeMatrix();
    float32x4_t v69 = v76;
    v47.n128_u64[0] = simd_float4x4.scale.getter(v74, (int32x4_t)v73, (int8x16_t)v72).n64_u64[0];
    HasTransform.transform.setter(v47, (__n128)v69, (__n128)v70);
  }
  if (!v62)
  {
    REEntityAddExistingComponent();
    RERelease();
  }
  self;
  if (!swift_dynamicCastObjCClass())
  {
    self;
    swift_dynamicCastObjCClass();
  }
  REAnchorComponentSetEnableShadows();
  if (v63)
  {
    self;
    uint64_t v48 = swift_dynamicCastObjCClass();
    if (v48)
    {
      float32x4_t v49 = (void *)v48;
      uint64_t v50 = v27;
      uint64_t v51 = v57;
      outlined init with copy of AnchoringComponent.Target(v50, v57);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        if (v56)
        {
          double v52 = *(double *)(v57 + 16);
          id v53 = v25;
          id v54 = v56;
          specialized Scene.positionEntity(_:on:frame:minimumBounds:)(v59, v49, v52, v54);
        }
      }
      else
      {
        _s10RealityKit18AnchoringComponentVWOhTm_0(v51, type metadata accessor for AnchoringComponent.Target);
      }
    }
  }
}

uint64_t specialized Scene.reanchorToReplacementAnchor(for:with:frame:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v133 = a3;
  uint64_t v141 = type metadata accessor for UUID();
  int v145 = *(char **)(v141 - 8);
  MEMORY[0x270FA5388](v141);
  *(void *)&long long v143 = (char *)v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  char v142 = (char *)v106 - v11;
  uint64_t v12 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v12);
  id v14 = (unsigned __int8 *)v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v15 - 8);
  char v17 = (char *)v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)v106 - v19;
  self;
  uint64_t v21 = swift_dynamicCastObjCClass();
  if (!v21) {
    return 0;
  }
  unint64_t v22 = (void *)v21;
  uint64_t v127 = v17;
  id v23 = a2;
  HasAnchoring.anchoring.getter((uint64_t)v20);
  outlined init with take of AnchoringComponent.Target((uint64_t)v20, (uint64_t)v14, type metadata accessor for AnchoringComponent.Target);
  if (swift_getEnumCaseMultiPayload() != 2)
  {

    _s10RealityKit18AnchoringComponentVWOhTm_0((uint64_t)v14, type metadata accessor for AnchoringComponent.Target);
    return 0;
  }
  id v130 = v23;
  int v135 = *v14;
  uint64_t v134 = *((void *)v14 + 1);
  *(void *)&long long v24 = *((void *)v14 + 2);
  long long v132 = v24;
  *(double *)v25.i64 = HasTransform.position.getter();
  v25.i32[1] = 0;
  float32x4_t v136 = v25;
  id v140 = v22;
  if (objc_msgSend(v140, sel_alignment))
  {
    id v26 = v130;

    objc_msgSend(v140, (SEL)&off_264838298);
    float32x4_t v28 = v27;
    float32x4_t v30 = v29;
    float32x4_t v32 = v31;
    float32x4_t v34 = v33;
  }
  else
  {
    objc_msgSend(v140, sel_transform);
    float32x4_t v39 = v38;
    v39.i32[3] = 0;
    float32x4_t v144 = v39;
    id v26 = v130;
    if (one-time initialization token for identity != -1)
    {
      simd_float3 v138 = (simd_float3)v36;
      long long v139 = (__int128)v35;
      simd_float3 v137 = (simd_float3)v37;
      int8x16_t v131 = (int8x16_t)v38;
      swift_once();
      int8x16_t v37 = (int8x16_t)v137;
      int32x4_t v36 = (int32x4_t)v138;
      float32x4_t v35 = (float32x4_t)v139;
    }
    long long v139 = static simd_quatf.identity;
    LODWORD(v40) = simd_float4x4.scale.getter(v35, v36, v37).n64_u32[0];
    *(double *)v41.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v144.i64, (float32x4_t)v139, v40);
    simd_float3 v137 = v42;
    simd_float3 v138 = v41;
    long long v139 = v43;
    float32x4_t v144 = v44;

    float32x4_t v34 = v144;
    float32x4_t v28 = (float32x4_t)v138;
    float32x4_t v32 = (float32x4_t)v139;
    float32x4_t v30 = (float32x4_t)v137;
  }
  simd_float3 v137 = (simd_float3)v30;
  simd_float3 v138 = (simd_float3)v28;
  long long v139 = (__int128)v32;
  float32x4_t v144 = v34;
  *(float32x2_t *)v45.f32 = simd_float4x4.transform(position:)(v136, v28, v30, v32, v34);
  int8x16_t v131 = (int8x16_t)v45;
  *(double *)&long long v46 = simd_float4x4.transform(normal:)(*(float32x4_t *)&zmmword_22830EC90[16], v138, v137, (simd_float3)v139);
  float v47 = *((float *)&v46 + 2);
  long long v126 = v46;
  id v48 = objc_msgSend(v133, sel__hitTestFromOrigin_withDirection_types_, 32, COERCE_DOUBLE(vadd_f32(*(float32x2_t *)v131.i8, vmul_f32(*(float32x2_t *)&v46, (float32x2_t)vdup_n_s32(0x3D4CCCCDu)))), COERCE_DOUBLE(vsub_f32(0, *(float32x2_t *)&v46)));
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARHitTestResult);
  unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v49 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v50) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
  uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v50)
  {
LABEL_49:

LABEL_50:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_11:
  v106[1] = a5;
  uint64_t v107 = a1;
  uint64_t v108 = a4;
  unint64_t v51 = v49 & 0xC000000000000001;
  *(void *)&long long v139 = v145 + 8;
  int v125 = v135 & 2;
  int v129 = v135 & 1;
  uint64_t v118 = v134 & 0x10;
  uint64_t v117 = v134 & 8;
  uint64_t v116 = v134 & 4;
  uint64_t v115 = v134 & 2;
  uint64_t v128 = v134 & 1;
  int8x16_t v52 = v131;
  v52.i32[0] = vextq_s8(v52, v52, 8uLL).u32[0];
  int8x16_t v114 = v52;
  float v53 = *((float *)&v132 + 1);
  uint64_t v54 = 4;
  uint64_t v55 = &off_264838000;
  float32x2_t v56 = (float32x2_t)vdup_n_s32(0x3DCCCCCDu);
  v138.i64[0] = v49;
  v137.i64[0] = v50;
  v136.i64[0] = v49 & 0xC000000000000001;
  while (1)
  {
    uint64_t v58 = (void *)(v54 - 4);
    uint64_t v59 = v51 ? (char *)MEMORY[0x22A689930](v54 - 4, v49) : (char *)*(id *)(v49 + 8 * v54);
    float32x4_t v60 = v59;
    uint64_t v61 = v54 - 3;
    if (__OFADD__(v58, 1)) {
      break;
    }
    uint64_t v62 = (char *)[v59 (SEL)v55[205]];
    if (!v62) {
      goto LABEL_14;
    }
    uint64_t v57 = v62;
    self;
    int v63 = (void *)swift_dynamicCastObjCClass();
    if (v63)
    {
      uint64_t v58 = v63;
      v144.i64[0] = (uint64_t)v57;
      int v145 = v60;
      id v64 = objc_msgSend(v63, sel_identifier);
      uint64_t v65 = v142;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v66 = objc_msgSend(v140, sel_identifier);
      uint64_t v67 = v143;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v68 = v141;
      char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      float32x4_t v70 = *(void (**)(char *, uint64_t))v139;
      (*(void (**)(uint64_t, uint64_t))v139)(v67, v68);
      v70(v65, v68);
      if (v69)
      {
        uint64_t v57 = (char *)v144.i64[0];
        unint64_t v49 = v138.i64[0];
        uint64_t v50 = v137.i64[0];
        float32x4_t v60 = v145;
        unint64_t v51 = v136.i64[0];
LABEL_23:
        uint64_t v55 = &off_264838000;
        goto LABEL_13;
      }
      id v71 = objc_msgSend(v58, sel_alignment);
      unint64_t v49 = v138.i64[0];
      uint64_t v50 = v137.i64[0];
      float32x4_t v60 = v145;
      unint64_t v51 = v136.i64[0];
      uint64_t v55 = &off_264838000;
      if (v135 == 255) {
        goto LABEL_29;
      }
      int v72 = v129;
      if (!v71) {
        goto LABEL_28;
      }
      if (v71 == (id)1)
      {
        int v72 = v125;
LABEL_28:
        if (v72)
        {
LABEL_29:
          id v73 = objc_msgSend(v58, sel_classification);
          if (v134 != -1)
          {
            uint64_t v74 = v128;
            switch((unint64_t)v73)
            {
              case 1uLL:
                goto LABEL_36;
              case 2uLL:
                long long v75 = (simd_float3 *)&v136;
                goto LABEL_35;
              case 3uLL:
                long long v75 = (simd_float3 *)&v136.u32[2];
                goto LABEL_35;
              case 4uLL:
                long long v75 = &v137;
                goto LABEL_35;
              case 5uLL:
                long long v75 = (simd_float3 *)&v137.u32[2];
LABEL_35:
                uint64_t v74 = v75[-16].i64[0];
LABEL_36:
                if (v74) {
                  break;
                }
                goto LABEL_12;
              default:
                goto LABEL_12;
            }
          }
          objc_msgSend(v58, sel_extent);
          if (*(float *)&v132 <= v76)
          {
            objc_msgSend(v58, (SEL)&selRef_unprojectPoint_ontoPlaneWithTransform_orientation_viewportSize_ + 7);
            if (v53 <= v77)
            {
              objc_msgSend(v58, sel_transform);
              float32x4_t v110 = v78;
              float32x4_t v111 = v79;
              float32x4_t v113 = v80;
              float32x4_t v112 = v81;
              objc_msgSend(v58, sel_center);
              float32x4_t v109 = v82;
              objc_msgSend(v58, sel_transform);
              v146.columns[0].i32[3] = 0;
              v146.columns[1].i32[3] = 0;
              v146.columns[2].i32[3] = 0;
              simd_float3x3 v86 = __invert_f3(v146);
              int32x4_t v83 = vdupq_laneq_s32((int32x4_t)v86.columns[0], 2);
              v86.columns[0].i32[3] = v120.i32[3];
              int32x4_t v84 = vdupq_laneq_s32((int32x4_t)v86.columns[1], 2);
              v86.columns[1].i32[3] = v119.i32[3];
              v85.i64[0] = vzip1q_s32(v83, v84).u64[0];
              v85.i64[1] = __PAIR64__(v124.u32[3], v86.columns[2].u32[2]);
              v86.columns[2].i32[3] = v121.i32[3];
              int32x4_t v87 = vzip1q_s32((int32x4_t)v86.columns[0], (int32x4_t)v86.columns[2]);
              float32x4_t v88 = (float32x4_t)vzip1q_s32((int32x4_t)v86.columns[1], (int32x4_t)0);
              v89.i64[0] = vzip1q_s32(v87, (int32x4_t)v88).u64[0];
              v90.i64[0] = vzip2q_s32(v87, (int32x4_t)v88).u64[0];
              v89.i64[1] = __PAIR64__(v122.u32[3], vdupq_lane_s32(*(int32x2_t *)(&v86 + 32), 0).u32[2]);
              v90.i64[1] = __PAIR64__(v123.u32[3], vdupq_lane_s32(*(int32x2_t *)(&v86 + 32), 1).u32[2]);
              int8x16_t v91 = (int8x16_t)vmlaq_f32(vaddq_f32(v90, vmulq_f32(v89, (float32x4_t)0)), (float32x4_t)0, v85);
              v88.i32[3] = HIDWORD(v126);
              *(float32x2_t *)v88.f32 = vsub_f32(*(float32x2_t *)&v126, *(float32x2_t *)v91.i8);
              v88.f32[2] = v47 - *(float *)&v91.i32[2];
              int8x16_t v92 = (int8x16_t)vabsq_f32(v88);
              if (*(float *)v92.i32 <= 0.1
                || (v92.i32[0] = vextq_s8(v92, v92, 8uLL).u32[0],
                    *(int32x2_t *)v92.i8 = vcgt_f32(*(float32x2_t *)v92.i8, v56),
                    (v92.i8[4] & 1) == 0)
                || (v92.i8[0] & 1) == 0)
              {
                float32x4_t v93 = vaddq_f32(v112, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v110, v109.f32[0]), v111, *(float32x2_t *)v109.f32, 1), v113, v109, 2));
                float32x4_t v94 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 3);
                float v95 = vmuls_n_f32(vsubq_f32((float32x4_t)v131, vdivq_f32(v93, v94)).f32[0], *(float *)v91.i32);
                v93.i32[0] = vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL).u32[0];
                v91.i32[0] = vextq_s8(v91, v91, 8uLL).u32[0];
                float32x2_t v96 = vmul_f32(vsub_f32(*(float32x2_t *)v114.i8, vdiv_f32(*(float32x2_t *)v93.f32, *(float32x2_t *)v94.f32)), *(float32x2_t *)v91.i8);
                uint64_t v55 = &off_264838000;
                if (fabsf(v96.f32[0] + (float)(v95 + v96.f32[1])) <= 0.05) {
                  goto LABEL_47;
                }
                uint64_t v57 = v60;
                float32x4_t v60 = (char *)v144.i64[0];
                float32x4_t v124 = v85;
                float32x4_t v123 = v90;
                float32x4_t v122 = v89;
                simd_float3 v120 = v86.columns[0];
                simd_float3 v119 = v86.columns[1];
                simd_float3 v121 = v86.columns[2];
                goto LABEL_13;
              }
              uint64_t v57 = v60;
              float32x4_t v60 = (char *)v144.i64[0];
              float32x4_t v124 = v85;
              float32x4_t v123 = v90;
              float32x4_t v122 = v89;
              simd_float3 v120 = v86.columns[0];
              simd_float3 v119 = v86.columns[1];
              simd_float3 v121 = v86.columns[2];
              goto LABEL_23;
            }
          }
        }
      }
LABEL_12:
      uint64_t v57 = (char *)v144.i64[0];
    }
LABEL_13:

LABEL_14:
    ++v54;
    if (v61 == v50)
    {

      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_47:
  swift_bridgeObjectRelease();
  uint64_t v97 = v108;
  uint64_t v98 = v107;
  *(double *)&long long v99 = HasTransform.position.getter();
  long long v143 = v99;
  uint64_t v100 = (uint64_t)v127;
  HasAnchoring.anchoring.getter((uint64_t)v127);
  uint64_t v101 = 1;
  HasAnchoring.reanchor(_:preservingWorldTransform:)(v100, 1);
  _s10RealityKit18AnchoringComponentVWOhTm_0(v100, type metadata accessor for AnchoringComponent.Target);
  HasAnchoring.anchoring.getter(v100);
  specialized Scene.anchorEntity(_:to:with:frame:allowPlanePositioning:)(v98, v58, v100, v133, 0, v97);
  _s10RealityKit18AnchoringComponentVWOhTm_0(v100, type metadata accessor for AnchoringComponent);
  v102.n128_f64[0] = HasTransform.transform.getter();
  v103.n128_u32[1] = DWORD1(v143);
  HasTransform.transform.setter(v102, v104, v103);

  return v101;
}

uint64_t outlined init with take of AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s10RealityKit18AnchoringComponentVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Scene.matchingAnchor(for:frame:)(id *a1)
{
  return closure #1 in Scene.matchingAnchor(for:frame:)(a1) & 1;
}

uint64_t __RKStartTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t __RKStartTrigger.init()()
{
  uint64_t result = v0;
  *(_DWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t type metadata accessor for __RKStartTrigger()
{
  return self;
}

uint64_t __RKStartTrigger.matches(with:)()
{
  type metadata accessor for __RKStartTrigger();
  if (swift_dynamicCastClass() && *(unsigned char *)(v0 + 19) != 1) {
    return 1;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v3 = *(void *)(v2 + 24);
  if (v3 >> 62)
  {
LABEL_37:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_15:
      swift_release();
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  unint64_t v6 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x22A689930](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v7 = *(void *)(v3 + 32);
    swift_retain();
  }
  char v8 = __RKStartTrigger.matches(with:)(v7);
  uint64_t result = swift_release();
  if (v8)
  {
LABEL_10:
    uint64_t v4 = 1;
    goto LABEL_15;
  }
  if (v4 == 1)
  {
LABEL_14:
    uint64_t v4 = 0;
    goto LABEL_15;
  }
  if (!v6)
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v9 = *(void *)(v3 + 40);
      swift_retain();
      goto LABEL_21;
    }
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v9 = MEMORY[0x22A689930](1, v3);
LABEL_21:
  char v10 = __RKStartTrigger.matches(with:)(v9);
  uint64_t result = swift_release();
  if (v10) {
    goto LABEL_10;
  }
  if (v4 == 2) {
    goto LABEL_14;
  }
  if (v6)
  {
    uint64_t v11 = MEMORY[0x22A689930](2, v3);
    goto LABEL_27;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
  {
    uint64_t v11 = *(void *)(v3 + 48);
    swift_retain();
LABEL_27:
    char v12 = __RKStartTrigger.matches(with:)(v11);
    uint64_t result = swift_release();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = 0;
      uint64_t v14 = v4 - 3;
      while (1)
      {
        uint64_t v4 = v14 != v13;
        if (v14 == v13) {
          goto LABEL_15;
        }
        unint64_t v17 = v13 + 3;
        if (v6)
        {
          uint64_t v15 = MEMORY[0x22A689930](v13 + 3, v3);
          if (__OFADD__(v17, 1)) {
            goto LABEL_36;
          }
        }
        else
        {
          if (v17 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_41;
          }
          uint64_t v15 = *(void *)(v3 + 8 * v13 + 56);
          swift_retain();
          if (__OFADD__(v17, 1))
          {
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
        }
        char v16 = __RKStartTrigger.matches(with:)(v15);
        uint64_t result = swift_release();
        ++v13;
        if (v16) {
          goto LABEL_15;
        }
      }
    }
    goto LABEL_10;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t __RKStartTrigger.deinit()
{
  return v0;
}

uint64_t __RKStartTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t method lookup function for __RKStartTrigger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKStartTrigger);
}

uint64_t static MeshResource.fromCore(_:)(uint64_t a1)
{
  if (!(id)REAssetGetSwiftObject()) {
    goto LABEL_4;
  }
  type metadata accessor for MeshResource();
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for MeshResource();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = a1;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t __MeshCompileOptions.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = REMeshCompileOptionsCreate();
  return v0;
}

uint64_t __MeshCompileOptions.coreOptions.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t type metadata accessor for MeshResource()
{
  return self;
}

uint64_t MeshResource.expectedMaterialCount.getter()
{
  uint64_t result = *(void *)(v0 + 16);
  if (result)
  {
    MaxMaterialIndedouble x = REMeshAssetGetMaxMaterialIndex();
    BOOL v3 = __OFADD__(MaxMaterialIndex, 1);
    uint64_t result = MaxMaterialIndex + 1;
    if (v3) {
      __break(1u);
    }
  }
  return result;
}

double MeshResource.bounds.getter()
{
  if (!*(void *)(v0 + 16)) {
    return 1.40444843e306;
  }
  REEntityComputeLocalBoundingBox();
  return result;
}

uint64_t MeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t MeshResource.init(_:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v1;
}

uint64_t MeshResource.deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  return v0;
}

uint64_t MeshResource.__deallocating_deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }

  return swift_deallocClassInstance();
}

uint64_t static MeshResource.__load(named:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v15);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  String.utf8CString.getter();
  uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_bridgeObjectRetain();
      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      swift_allocError();
      *(void *)uint64_t v12 = a1;
      *(void *)(v12 + 8) = a2;
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = v11;
      *(unsigned char *)(v12 + 32) = 1;
      swift_willThrow();
      return a2;
    }
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for MeshResource();
      uint64_t v13 = swift_dynamicCastClass();
      if (v13) {
        return v13;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for MeshResource();
    a2 = swift_allocObject();
    *(void *)(a2 + 16) = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    return a2;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)(float a1, float a2)
{
  return specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(0, a1, a1, a1, a2);
}

{
  uint64_t v2;
  void *v5;
  uint64_t (*v7)(char, float, float, float, float);
  uint64_t v8;

  uint64_t v7 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v7(0, a1, a1, a1, a2);
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)(__n128 a1, float a2)
{
  return specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(0, a1.n128_f32[0], a1.n128_f32[1], a1.n128_f32[2], a2);
}

{
  uint64_t v2;
  float v4;
  float v5;
  void *v6;
  float v8;
  uint64_t (*v9)(char, float, float, float, float);
  uint64_t v10;

  char v8 = a1.n128_f32[0];
  uint64_t v4 = a1.n128_f32[1];
  uint64_t v5 = a1.n128_f32[2];
  uint64_t v9 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = static ShapeResource.generateBox(width:height:depth:);
  return v9(0, v8, v4, v5, a2);
}

uint64_t static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5)
{
  uint64_t v13 = (uint64_t (*)(char, float, float, float, float))((char *)&async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)
                                                                 + async function pointer to specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = static ShapeResource.generateBox(width:height:depth:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t static MeshResource.generateBoxWithRoundedCorners(width:height:depth:majorRadius:minorRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5, float a6)
{
  float v11 = a2;
  if (a4 < a2) {
    a2 = a4;
  }
  if (a2 >= a3) {
    a2 = a3;
  }
  float v12 = a2 * 0.5;
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  __int16 v13 = v20;
  if (v12 >= a5) {
    float v14 = a5;
  }
  else {
    float v14 = v12;
  }
  if (v12 >= a6) {
    float v15 = a6;
  }
  else {
    float v15 = v12;
  }
  BOOL v16 = v14 > 0.0;
  if (v15 > 0.0) {
    BOOL v16 = 1;
  }
  if (v16)
  {
    __int16 v13 = 12;
    unsigned int v17 = -1;
  }
  else
  {
    unsigned int v17 = 0;
  }
  int8x8_t v19 = vbsl_s8((int8x8_t)vdup_n_s16(v17), (int8x8_t)0x10000200020002, v19);
  __int16 v20 = v13;
  float v21 = v14;
  float v22 = v15;
  float v23 = v11;
  float v24 = a3;
  float v25 = a4;
  char v26 = a1 ^ 1;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v19, a1);
}

uint64_t static MeshResource.generatePlane(width:height:cornerRadius:)(float a1, float a2, float a3)
{
  REGeomBuildPlaneDefaultOptions();
  __int16 v6 = v11;
  if (a3 > 0.0) {
    __int16 v6 = 16;
  }
  __int16 v11 = v6;
  float v12 = a1;
  float v13 = a2;
  float v14 = a3;
  int v15 = 4;
  uint64_t v7 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v10, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for MeshResource();
  *(void *)(inited + 64) = &protocol witness table for MeshResource;
  *(void *)(inited + 32) = v7;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v7;
}

{
  float *v3;

  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  return MEMORY[0x270FA2498](static MeshResource.generatePlane(width:height:cornerRadius:), 0, 0);
}

uint64_t static MeshResource.generatePlane(width:depth:cornerRadius:)(float a1, float a2, float a3)
{
  REGeomBuildPlaneDefaultOptions();
  __int16 v6 = v11;
  if (a3 > 0.0) {
    __int16 v6 = 16;
  }
  __int16 v11 = v6;
  float v12 = a1;
  float v13 = a2;
  float v14 = a3;
  int v15 = 2;
  uint64_t v7 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v10, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for MeshResource();
  *(void *)(inited + 64) = &protocol witness table for MeshResource;
  *(void *)(inited + 32) = v7;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v7;
}

{
  float *v3;

  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  return MEMORY[0x270FA2498](static MeshResource.generatePlane(width:depth:cornerRadius:), 0, 0);
}

uint64_t static MeshResource.generatePlane(width:height:cornerRadius:)()
{
  float v1 = *(float *)(v0 + 84);
  uint64_t v2 = *(void *)(v0 + 76);
  REGeomBuildPlaneDefaultOptions();
  __int16 v3 = v8;
  if (v1 > 0.0) {
    __int16 v3 = 16;
  }
  *(_DWORD *)(v0 + 48) = v7;
  *(_WORD *)(v0 + 52) = v3;
  *(void *)(v0 + 56) = v2;
  *(float *)(v0 + 64) = v1;
  *(unsigned char *)(v0 + 68) = v9;
  *(unsigned char *)(v0 + 69) = v10;
  *(_DWORD *)(v0 + 72) = 4;
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generatePlane(width:height:cornerRadius:), v5, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  swift_release();
  *(void *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)(v0 + 48, 0);
  __int16 v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  float v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *float v1 = v0;
  v1[1] = static MeshResource.generatePlane(width:height:cornerRadius:);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static MeshResource.generatePlane(width:height:cornerRadius:), 0, 0);
  }
  else
  {
    __int16 v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[3];
    return v3(v4);
  }
}

uint64_t static MeshResource.generatePlane(width:depth:cornerRadius:)()
{
  float v1 = *(float *)(v0 + 84);
  uint64_t v2 = *(void *)(v0 + 76);
  REGeomBuildPlaneDefaultOptions();
  __int16 v3 = v8;
  if (v1 > 0.0) {
    __int16 v3 = 16;
  }
  *(_DWORD *)(v0 + 48) = v7;
  *(_WORD *)(v0 + 52) = v3;
  *(void *)(v0 + 56) = v2;
  *(float *)(v0 + 64) = v1;
  *(unsigned char *)(v0 + 68) = v9;
  *(unsigned char *)(v0 + 69) = v10;
  *(_DWORD *)(v0 + 72) = 2;
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generatePlane(width:depth:cornerRadius:), v5, v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (__cdecl *v3)();
  uint64_t v4;

  swift_release();
  *(void *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)(v0 + 48, 0);
  __int16 v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  float v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *float v1 = v0;
  v1[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[5] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static MeshResource.generate(from:), 0, 0);
  }
  else
  {
    __int16 v3 = (uint64_t (*)(uint64_t))v2[1];
    uint64_t v4 = v2[3];
    return v3(v4);
  }
}

uint64_t static MeshResource.__generatePlane(width:widthSegmentCount:depth:depthSegmentCount:cornerRadius:cornerSegmentCount:addUVs:addNormals:)(unint64_t a1, unint64_t a2, unint64_t a3, char a4, char a5, float a6, float a7, float a8)
{
  REGeomBuildPlaneDefaultOptions();
  if (a1 >= 0x10000 || a2 >= 0x10000 || a3 >= 0x10000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v18[0] = a1;
    if (a8 <= 0.0) {
      __int16 v16 = a3;
    }
    else {
      __int16 v16 = 16;
    }
    v18[1] = a2;
    v18[2] = v16;
    float v19 = a6;
    float v20 = a7;
    float v21 = a8;
    char v22 = a4 & 1;
    char v23 = a5 & 1;
    int v24 = 2;
    return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)v18, 0);
  }
  return result;
}

uint64_t static MeshResource.__generateOccluderPlane(width:depth:cornerRadius:)(float a1, float a2, float a3)
{
  REGeomBuildPlaneDefaultOptions();
  __int16 v6 = v9;
  if (a3 > 0.0) {
    __int16 v6 = 16;
  }
  __int16 v9 = v6;
  float v10 = a1;
  float v11 = a2;
  float v12 = a3;
  int v13 = 2;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v8, 0);
}

uint64_t static MeshResource.generateSphere(radius:)(float a1)
{
  REGeomBuildSphereDefaultOptions();
  uint64_t v3 = specialized PrimitiveComponentType.init(options:splitMeshes:)(64, v2 & 0x10101, 0, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for MeshResource();
  *(void *)(inited + 64) = &protocol witness table for MeshResource;
  *(void *)(inited + 32) = v3;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v3;
}

{
  uint64_t v1;

  *(float *)(v1 + 80) = a1;
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), 0, 0);
}

uint64_t static MeshResource.generateSphere(radius:segmentCount:)(__int16 a1, float a2)
{
  REGeomBuildSphereDefaultOptions();
  uint64_t v5 = specialized PrimitiveComponentType.init(options:splitMeshes:)(a1, v4 & 0x10101, 0, a2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for MeshResource();
  *(void *)(inited + 64) = &protocol witness table for MeshResource;
  *(void *)(inited + 32) = v5;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v5;
}

uint64_t static MeshResource.generateSphere(radius:)()
{
  REGeomBuildSphereDefaultOptions();
  v0[2] = v1;
  v0[3] = type metadata accessor for MainActor();
  v0[4] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), v3, v2);
}

{
  uint64_t v1;

  swift_release();
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 40) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), v2, v1);
}

{
  uint64_t v1;

  swift_release();
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 48) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), v2, v1);
}

{
  uint64_t v0;
  int v1;
  float v2;
  void *v3;
  uint64_t (__cdecl *v5)();
  uint64_t v6;

  uint64_t v1 = *(_DWORD *)(v0 + 16);
  uint64_t v2 = *(float *)(v0 + 80);
  swift_release();
  *(void *)(v0 + 56) = specialized PrimitiveComponentType.init(options:splitMeshes:)(64, v1 & 0x10101, 0, v2);
  uint64_t v5 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = static MeshResource.generateSphere(radius:);
  return v5();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static MeshResource.generateSphere(radius:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    int v4 = v2[7];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static MeshResource.generateCapsule(height:radius:)(float a1, float a2)
{
  REGeomBuildCapsuleDefaultOptions();
  if (v10) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  int v5 = v4 | v9;
  if (v11) {
    int v6 = 0x10000;
  }
  else {
    int v6 = 0;
  }

  return specialized PrimitiveComponentType.init(options:splitMeshes:)(((unint64_t)v8 << 16) | 0x40, v5 | v6, 0, a2, a1);
}

uint64_t static MeshResource.generateBox(size:majorCornerRadius:minorCornerRadius:)(__n128 a1, float a2, float a3)
{
  float v5 = a1.n128_f32[2];
  if (a1.n128_f32[2] >= a1.n128_f32[0]) {
    float v5 = a1.n128_f32[0];
  }
  if (v5 >= a1.n128_f32[1]) {
    float v6 = a1.n128_f32[1];
  }
  else {
    float v6 = v5;
  }
  float v7 = v6 * 0.5;
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  __int16 v8 = v16;
  if (v7 >= a2) {
    float v9 = a2;
  }
  else {
    float v9 = v7;
  }
  if (v7 >= a3) {
    float v10 = a3;
  }
  else {
    float v10 = v7;
  }
  BOOL v11 = v9 > 0.0;
  if (v10 > 0.0) {
    BOOL v11 = 1;
  }
  if (v11)
  {
    __int16 v8 = 12;
    unsigned int v12 = -1;
  }
  else
  {
    unsigned int v12 = 0;
  }
  int8x8_t v15 = vbsl_s8((int8x8_t)vdup_n_s16(v12), (int8x8_t)0x10000200020002, v15);
  __int16 v16 = v8;
  float v17 = v9;
  float v18 = v10;
  unint64_t v19 = a1.n128_u64[0];
  unsigned __int32 v20 = a1.n128_u32[2];
  char v21 = 1;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v15, 0);
}

uint64_t static MeshResource.generateCone(height:radius:)(float a1, float a2)
{
  int v4 = REGeomBuildConeDefaultOptions() & 0xFFFF0000 | 0x40;

  return specialized PrimitiveComponentType.init(options:splitMeshes:)(v4, v5 & 0x1010101, 0, a1, a2);
}

uint64_t static MeshResource.generateCylinder(height:radius:)(float a1, float a2)
{
  REGeomBuildCylinderDefaultOptions();
  __int16 v5 = 64;
  float v6 = a1;
  float v7 = a2;
  float v8 = a2;
  return specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)&v5, 0);
}

uint64_t MeshDescriptor.init(convexPolyhedronShape:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RECollisionShapeGetType();
  if (result == 5)
  {
    uint64_t PositionCount = REConvexPolyhedronShapeGetPositionCount();
    unint64_t MeshTriangleIndices = REConvexPolyhedronShapeExtractMeshTriangleIndices();
    __int16 v5 = (void *)specialized Array.init(repeating:count:)(PositionCount, (__n128)0);
    uint64_t v6 = specialized Array.init(repeating:count:)(0, MeshTriangleIndices);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int16 v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2], 0, v5);
    }
    REConvexPolyhedronShapeExtractPositions();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16), 0, (char *)v6);
    }
    REConvexPolyhedronShapeExtractMeshTriangleIndices();
    uint64_t v7 = MEMORY[0x263F8EE78];
    unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    specialized MeshBuffer.init<A>(_:)((uint64_t)v5, (uint64_t)v15);
    swift_bridgeObjectRetain();
    specialized MeshBufferContainer.positions.setter((uint64_t)v15);
    outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v15);
    int64_t v8 = *(void *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
      uint64_t v9 = 0;
      uint64_t v10 = v7;
      unint64_t v11 = *(void *)(v7 + 16);
      do
      {
        int v12 = *(unsigned __int16 *)(v6 + 2 * v9 + 32);
        unint64_t v13 = *(void *)(v7 + 24);
        if (v11 >= v13 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v11 + 1, 1);
        }
        ++v9;
        *(void *)(v7 + 16) = v11 + 1;
        *(_DWORD *)(v7 + 4 * v11++ + 32) = v12;
      }
      while (v8 != v9);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0xE000000000000000;
    *(void *)(a1 + 16) = v14;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v10;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(void *)(a1 + 96) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MeshDescriptor.init(staticMeshShape:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = RECollisionShapeGetType();
  if (result == 12)
  {
    RECollisionMeshShapeGetMesh();
    uint64_t VertexCount = RECollisionMeshGetVertexCount();
    unint64_t IndexCount = RECollisionMeshGetIndexCount();
    __int16 v5 = (void *)specialized Array.init(repeating:count:)(VertexCount, (__n128)0);
    uint64_t v6 = specialized Array.init(repeating:count:)(0, IndexCount);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      __int16 v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2], 0, v5);
    }
    RECollisionMeshExtractVertexPositions();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16), 0, (char *)v6);
    }
    RECollisionMeshExtractIndices();
    unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0xE000000000000000;
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = -1;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(void *)(a1 + 96) = 0;
    specialized MeshBuffer.init<A>(_:)((uint64_t)v5, (uint64_t)v8);
    specialized MeshBufferContainer.positions.setter((uint64_t)v8);
    uint64_t result = outlined release of MeshBuffer<SIMD3<Float>>((uint64_t)v8);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 56) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL REPoseF.isIdentity.getter(float32x2_t a1, float a2, float32x4_t a3)
{
  if (sqrtf((float)(a2 * a2) + vaddv_f32(vmul_f32(a1, a1))) > 0.00001) {
    return 0;
  }
  float32x4_t v4 = vmulq_f32(a3, a3);
  float v5 = atan2f(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2), vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1))).f32[0]), a3.f32[3]);
  return fabsf(v5 + v5) <= 0.00001;
}

uint64_t MeshResource.Contents.offsetBy(pose:)@<X0>(uint64_t a1@<X8>, float32x2_t a2@<D0>, float a3@<S1>, float32x4_t a4@<Q2>)
{
  void (*v41)(long long *__return_ptr, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t (*v43)();
  unint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t (*v48)();
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  unint64_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  _OWORD *v91;
  uint64_t v92;
  _OWORD *v93;
  long long v94;
  long long v95;
  long long v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  _OWORD *v110;
  uint64_t v111;
  void *v112;
  _OWORD *v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  _UNKNOWN **v128;
  void (*v129)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  uint64_t v137;
  _UNKNOWN **v138;
  void (*v139)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  unint64_t v157;
  float32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  unint64_t v175;
  float32x4_t v176;
  int32x4_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  char v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  char v188;
  long long v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  __n128 v193;
  uint64_t v194;
  _OWORD *v195;
  uint64_t v196;
  long long v197;
  long long v198;
  long long v199;
  unint64_t v200;
  char v201;
  uint64_t v202;
  _UNKNOWN **v203;
  void (*v204)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  long long v218;
  uint64_t v219;
  char v220;
  uint64_t v221;
  __n128 v222;
  uint64_t v223;
  _OWORD *v224;
  uint64_t v225;
  long long v226;
  long long v227;
  long long v228;
  int64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  unint64_t v241;
  float32x4_t v242;
  int32x4_t v243;
  int8x16_t v244;
  float32x4_t v245;
  float32x4_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  char v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  char v254;
  float32x4_t v255;
  uint64_t v256;
  char v257;
  uint64_t v258;
  __n128 v259;
  uint64_t v260;
  _OWORD *v261;
  uint64_t v262;
  long long v263;
  long long v264;
  long long v265;
  char v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  void *v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  uint64_t v275;
  long long *v276;
  long long v277;
  long long v278;
  long long v279;
  long long v280;
  uint64_t v281;
  uint64_t result;
  void *v283;
  void v284[2];
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  long long v296;
  long long v297;
  float32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  float32x4_t v301;
  int8x16_t v302;
  int8x16_t v303;
  float32x4_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  void *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  float32x4_t v316;
  float32x4_t v317;
  long long v318;
  long long v319;
  long long v320;
  long long v321;
  uint64_t v322;
  _UNKNOWN **v323;
  long long v324;
  uint64_t v325;
  _UNKNOWN **v326;
  uint64_t v327;
  long long v328[4];
  long long v329;
  unsigned __int8 v330;
  char v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  long long v339[3];
  long long v340[2];
  _OWORD v341[2];
  _OWORD v342[6];
  _OWORD v343[2];
  _OWORD v344[4];
  __int16 v345;
  uint64_t v346;
  unsigned __int8 v347;
  _OWORD v348[6];
  _OWORD v349[2];
  _OWORD v350[4];
  __int16 v351;
  uint64_t v352;
  unsigned __int8 v353;
  _OWORD v354[6];
  _OWORD v355[2];
  _OWORD v356[4];
  __int16 v357;
  uint64_t v358;
  unsigned __int8 v359;
  void v360[8];
  char v361;
  char v362;
  uint64_t v363;
  __int8 v364;

  v304 = a4;
  v284[0] = a1;
  uint64_t v7 = v4[1];
  uint64_t v9 = v4[2];
  uint64_t v10 = v4[3];
  uint64_t v11 = v4[4];
  uint64_t v12 = v4[5];
  v333 = *v4;
  uint64_t v8 = v333;
  v334 = v7;
  v335 = v9;
  v336 = v10;
  v337 = v11;
  v338 = v12;
  swift_bridgeObjectRetain();
  uint64_t v13 = *(void *)(v333 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v13)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_117:
    v283 = (void *)v284[0];
    *(void *)v284[0] = v8;
    v283[1] = v7;
    v283[2] = v9;
    v283[3] = v10;
    v283[4] = v11;
    v283[5] = v12;
    return result;
  }
  unint64_t v14 = 0;
  v286 = v333 + 32;
  float32x4_t v15 = vmulq_f32(v304, (float32x4_t)xmmword_22831EFE0);
  int32x4_t v16 = (int32x4_t)vnegq_f32(v15);
  int8x16_t v17 = (int8x16_t)vtrn2q_s32((int32x4_t)v15, vtrn1q_s32((int32x4_t)v15, v16));
  int32x4_t v18 = vrev64q_s32((int32x4_t)v15);
  v18.i32[0] = v16.i32[1];
  v18.i32[3] = v16.i32[2];
  unint64_t v19 = *(void *)(v333 + 16);
  v284[1] = &v319;
  v285 = v333;
  v302 = vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL);
  v303 = vextq_s8(v17, v17, 8uLL);
  v300 = vdupq_lane_s32(*(int32x2_t *)v304.f32, 0);
  v301 = (float32x4_t)v18;
  v299 = vdupq_laneq_s32((int32x4_t)v304, 2);
  while (1)
  {
    if (v14 >= v19) {
      goto LABEL_121;
    }
    v287 = v14;
    char v21 = (uint64_t *)(v286 + 48 * v14);
    uint64_t v22 = *v21;
    v291 = v21[1];
    v292 = v22;
    uint64_t v23 = v21[2];
    uint64_t v24 = v21[3];
    uint64_t v25 = v21[4];
    uint64_t v26 = v21[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v27 = *(void *)(v23 + 16);
    v289 = v25;
    swift_bridgeObjectRetain();
    v288 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v290 = v24;
    swift_bridgeObjectRetain();
    if (v27) {
      break;
    }
    swift_bridgeObjectRelease();
    float32x4_t v29 = (void *)MEMORY[0x263F8EE78];
LABEL_111:
    *(void *)&v318 = v292;
    *((void *)&v318 + 1) = v291;
    *(void *)&v319 = v23;
    *((void *)&v319 + 1) = v290;
    *(void *)&v320 = v289;
    *((void *)&v320 + 1) = v288;
    v275 = v29[2];
    if (v275)
    {
      v276 = (long long *)(v29 + 4);
      do
      {
        v278 = v276[1];
        v277 = v276[2];
        v279 = *(long long *)((char *)v276 + 41);
        v280 = *v276;
        v276 += 4;
        v340[0] = v280;
        v340[1] = v278;
        *(_OWORD *)((char *)v341 + 9) = v279;
        v341[0] = v277;
        v281 = v278;
        outlined retain of MeshResource.Part((uint64_t)v340);
        swift_bridgeObjectRetain();
        specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v340, *((uint64_t *)&v280 + 1), v281, (uint64_t)v328);
        swift_bridgeObjectRelease();
        outlined release of MeshResource.Part((uint64_t)v340);
        outlined consume of MeshResource.Part?(*(uint64_t *)&v328[0]);
        --v275;
      }
      while (v275);
    }
    unint64_t v14 = v287 + 1;
    swift_bridgeObjectRelease();
    v339[0] = v318;
    v339[1] = v319;
    v339[2] = v320;
    long long v20 = v318;
    swift_bridgeObjectRetain();
    specialized OrderedIdentifiableCollection.updateValue(_:forKey:)(v339, v20, *((uint64_t *)&v20 + 1), v328);
    swift_bridgeObjectRelease();
    outlined release of MeshResource.Model((uint64_t)v339);
    outlined consume of MeshResource.Model?(*(uint64_t *)&v328[0], *((uint64_t *)&v328[0] + 1));
    unint64_t v19 = *(void *)(v285 + 16);
    if (v14 == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v333;
      uint64_t v7 = v334;
      uint64_t v9 = v335;
      uint64_t v10 = v336;
      uint64_t v11 = v337;
      uint64_t v12 = v338;
      goto LABEL_117;
    }
  }
  unint64_t v28 = 0;
  v306 = v23 + 32;
  float32x4_t v29 = (void *)MEMORY[0x263F8EE78];
  v305 = v23;
  while (1)
  {
    v311 = v28;
    v312 = v29;
    uint64_t v30 = v306 + (v28 << 6);
    uint64_t v32 = *(void *)v30;
    uint64_t v31 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v30 + 16);
    v309 = *(void *)(v30 + 24);
    v310 = v31;
    uint64_t v34 = *(void *)(v30 + 32);
    v307 = *(_DWORD *)(v30 + 40);
    v308 = *(void *)(v30 + 48);
    char v35 = *(unsigned char *)(v30 + 56);
    v332 = *(unsigned char *)(v30 + 44);
    v331 = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v36 = *(void *)(v32 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v314 = v34;
    swift_bridgeObjectRetain_n();
    v317.i64[0] = v32;
    v315 = v33;
    if (!v36) {
      goto LABEL_11;
    }
    unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    if (v38)
    {
      outlined init with copy of __REAssetService(*(void *)(v32 + 56) + 40 * v37, (uint64_t)v328);
      outlined init with take of BindableDataInternal(v328, (uint64_t)&v318);
      uint64_t v39 = *((void *)&v319 + 1);
      uint64_t v40 = v320;
      __swift_project_boxed_opaque_existential_1(&v318, *((uint64_t *)&v319 + 1));
      simd_float3 v41 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(v40 + 56);
      simd_float3 v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v41(v328, v42, v39, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v318);
      long long v43 = *(uint64_t (**)())&v328[0];
      if (*(void *)&v328[0])
      {
        v316.i32[0] = v330;
        v313 = *((void *)&v329 + 1);
        float32x4_t v44 = v329;
        float32x4_t v45 = *((void *)&v328[3] + 1);
        long long v46 = *(uint64_t (**)(uint64_t))&v328[3];
        float v47 = *((void *)&v328[2] + 1);
        id v48 = *(uint64_t (**)())&v328[2];
        unint64_t v49 = *((void *)&v328[1] + 1);
        uint64_t v50 = *(uint64_t (**)())&v328[1];
        unint64_t v51 = *((void *)&v328[0] + 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int8x16_t v52 = swift_bridgeObjectRelease();
        float v53 = v313;
        uint64_t v54 = v316.i8[0];
        uint64_t v55 = (v44 >> 8) & 1;
        goto LABEL_13;
      }
    }
    else
    {
LABEL_11:
      memset(v328, 0, sizeof(v328));
      v329 = 0u;
      v330 = 0;
    }
    unint64_t v51 = swift_allocObject();
    float32x2_t v56 = MEMORY[0x263F8EE78];
    *(void *)(v51 + 16) = MEMORY[0x263F8EE78];
    unint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v56;
    float v47 = swift_allocObject();
    *(void *)(v47 + 16) = v56;
    float32x4_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int8x16_t v52 = swift_bridgeObjectRelease();
    LOBYTE(v55) = 0;
    float v53 = 0;
    uint64_t v54 = 0;
    LOBYTE(v44) = 9;
    long long v46 = partial apply for specialized closure #4 in MeshBuffer.init<A>(_:);
    id v48 = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    uint64_t v50 = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    long long v43 = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
LABEL_13:
    v360[0] = v43;
    v360[1] = v51;
    v360[2] = v50;
    v360[3] = v49;
    v360[4] = v48;
    v360[5] = v47;
    v360[6] = v46;
    v360[7] = v45;
    v361 = v44;
    v362 = v55;
    v363 = v53;
    v364 = v54;
    uint64_t v57 = ((uint64_t (*)(uint64_t))v43)(v52);
    if (v57)
    {
      uint64_t v58 = v57;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v59 = *(void *)(v58 + 16);
      if (!v59) {
        goto LABEL_21;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v58 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v360);
      swift_release_n();
      swift_release_n();
      swift_release_n();
      swift_release_n();
      uint64_t v59 = *(void *)(v58 + 16);
      if (!v59)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        uint64_t v61 = MEMORY[0x263F8EE78];
        goto LABEL_22;
      }
    }
    *(void *)&v328[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v59, 0);
    float32x4_t v60 = 0;
    uint64_t v61 = *(void *)&v328[0];
    uint64_t v62 = *(void *)(*(void *)&v328[0] + 16);
    id v64 = (float32x4_t)v303;
    int v63 = v304;
    id v66 = v301;
    uint64_t v65 = (float32x4_t)v302;
    uint64_t v68 = (float32x4_t)v299;
    uint64_t v67 = (float32x4_t)v300;
    do
    {
      char v69 = *(float32x4_t *)(v58 + 16 * v60 + 32);
      *(void *)&v328[0] = v61;
      float32x4_t v70 = *(void *)(v61 + 24);
      if (v62 >= v70 >> 1)
      {
        v316 = v69;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v62 + 1, 1);
        char v69 = v316;
        uint64_t v68 = (float32x4_t)v299;
        uint64_t v67 = (float32x4_t)v300;
        id v66 = v301;
        uint64_t v65 = (float32x4_t)v302;
        id v64 = (float32x4_t)v303;
        int v63 = v304;
        uint64_t v61 = *(void *)&v328[0];
      }
      id v71 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v65, *(float32x2_t *)v69.f32, 1), v64, v69.f32[0]), v66, v69, 2);
      int v72 = (int32x4_t)vnegq_f32(v71);
      id v73 = (int8x16_t)vtrn2q_s32((int32x4_t)v71, vtrn1q_s32((int32x4_t)v71, v72));
      uint64_t v74 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL), *(float32x2_t *)v63.f32, 1), (float32x4_t)vextq_s8(v73, v73, 8uLL), v67);
      long long v75 = (float32x4_t)vrev64q_s32((int32x4_t)v71);
      v75.i32[0] = v72.i32[1];
      v75.i32[3] = v72.i32[2];
      float v76 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v71, v63, 3), v75, v68), v74);
      *(float32x2_t *)v72.i8 = vadd_f32(*(float32x2_t *)v76.f32, a2);
      *(float *)&v72.i32[2] = v76.f32[2] + a3;
      v72.i32[3] = 0;
      ++v60;
      *(void *)(v61 + 16) = v62 + 1;
      *(int32x4_t *)(v61 + 16 * v62++ + 32) = v72;
    }
    while (v59 != v60);
    swift_bridgeObjectRelease();
LABEL_22:
    float v77 = *(void *)(v61 + 16);
    float32x4_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = v61;
    float32x4_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = v61;
    float32x4_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = v61;
    float32x4_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = v61;
    v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
    *((void *)&v319 + 1) = v313;
    *(void *)&v320 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    float32x4_t v82 = swift_allocObject();
    *(void *)&v318 = v82;
    int32x4_t v83 = one-time initialization token for triangleIndices;
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v83 != -1) {
      swift_once();
    }
    int32x4_t v84 = v317.i64[0];
    if (static MeshBuffers.Identifier.triangleIndices == 0x6F50786574726576 && unk_2681C1CD0 == 0xEE006E6F69746973
      || (float32x4_t v85 = _stringCompareWithSmolCheck(_:_:expecting:)(), v86 = 0, (v85 & 1) != 0))
    {
      simd_float3x3 v86 = 2;
    }
    strcpy((char *)(v82 + 16), "vertexPosition");
    *(unsigned char *)(v82 + 31) = -18;
    *(_WORD *)(v82 + 32) = 0;
    *(void *)(v82 + 40) = v77;
    *(unsigned char *)(v82 + 48) = v86;
    *(_WORD *)(v82 + 49) = 9;
    *(void *)(v82 + 56) = partial apply for specialized closure #1 in MeshBuffer.init<A>(_:);
    *(void *)(v82 + 64) = v78;
    *(void *)(v82 + 72) = protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction;
    *(void *)(v82 + 80) = v79;
    *(void *)(v82 + 88) = partial apply for specialized closure #3 in MeshBuffer.init<A>(_:);
    *(void *)(v82 + 96) = v80;
    *(void *)(v82 + 104) = closure #4 in MeshBuffer.init<A>(_:)specialized partial apply;
    *(void *)(v82 + 112) = v81;
    *(_WORD *)(v82 + 120) = 9;
    *(void *)(v82 + 128) = v77;
    *(unsigned char *)(v82 + 136) = 0;
    outlined init with take of BindableDataInternal(&v318, (uint64_t)v328);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v327 = v84;
    float32x4_t v88 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v328, *((uint64_t *)&v328[1] + 1));
    float32x4_t v89 = MEMORY[0x270FA5388](v88);
    int8x16_t v91 = (_OWORD *)((char *)v284 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *, __n128))(v92 + 16))(v91, v89);
    v325 = v313;
    v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    float32x4_t v93 = (_OWORD *)swift_allocObject();
    *(void *)&v324 = v93;
    float32x4_t v94 = v91[5];
    v93[5] = v91[4];
    v93[6] = v94;
    v93[7] = v91[6];
    *(_OWORD *)((char *)v93 + 121) = *(_OWORD *)((char *)v91 + 105);
    float v95 = v91[1];
    v93[1] = *v91;
    v93[2] = v95;
    float32x2_t v96 = v91[3];
    v93[3] = v91[2];
    v93[4] = v96;
    uint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
    long long v99 = v84;
    uint64_t v100 = *(void *)(v84 + 16);
    uint64_t v101 = (v97 & 1) == 0;
    __n128 v102 = v100 + v101;
    if (__OFADD__(v100, v101)) {
      break;
    }
    __n128 v103 = v97;
    if (*(void *)(v99 + 24) >= v102)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v102, isUniquelyReferenced_nonNull_native);
      __n128 v104 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F50786574726576, 0xEE006E6F69746973, 0);
      if ((v103 & 1) != (v105 & 1)) {
        goto LABEL_122;
      }
      uint64_t v98 = v104;
    }
    v316.i64[0] = v327;
    if (v103)
    {
      long long v106 = *(void *)(v327 + 56) + 40 * v98;
      __swift_destroy_boxed_opaque_existential_1(v106);
      outlined init with take of BindableDataInternal(&v324, v106);
    }
    else
    {
      uint64_t v107 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v324, v325);
      uint64_t v108 = MEMORY[0x270FA5388](v107);
      float32x4_t v110 = (_OWORD *)((char *)v284 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0));
      float32x4_t v112 = (void *)v316.i64[0];
      (*(void (**)(_OWORD *, __n128))(v111 + 16))(v110, v108);
      v322 = v313;
      v323 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      float32x4_t v113 = (_OWORD *)swift_allocObject();
      *(void *)&v321 = v113;
      int8x16_t v114 = v110[3];
      v113[3] = v110[2];
      v113[4] = v114;
      uint64_t v115 = v110[1];
      v113[1] = *v110;
      v113[2] = v115;
      *(_OWORD *)((char *)v113 + 121) = *(_OWORD *)((char *)v110 + 105);
      uint64_t v116 = v110[6];
      uint64_t v117 = v110[4];
      v113[6] = v110[5];
      v113[7] = v116;
      v113[5] = v117;
      v112[(v98 >> 6) + 8] |= 1 << v98;
      uint64_t v118 = v112[6] + 24 * v98;
      strcpy((char *)v118, "vertexPosition");
      *(unsigned char *)(v118 + 15) = -18;
      *(_WORD *)(v118 + 16) = 0;
      outlined init with take of BindableDataInternal(&v321, v112[7] + 40 * v98);
      simd_float3 v119 = v112[2];
      simd_float3 v120 = __OFADD__(v119, 1);
      simd_float3 v121 = v119 + 1;
      if (v120) {
        goto LABEL_120;
      }
      v112[2] = v121;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v328);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    float32x4_t v122 = v317.i64[0];
    float32x4_t v29 = v312;
    float32x4_t v124 = v314;
    float32x4_t v123 = v315;
    if (!*(void *)(v317.i64[0] + 16)) {
      goto LABEL_44;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v125 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F4E786574726576, 0xEC0000006C616D72, 0);
    if ((v126 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      if (!*(void *)(v122 + 16)) {
        goto LABEL_73;
      }
      goto LABEL_45;
    }
    outlined init with copy of __REAssetService(*(void *)(v122 + 56) + 40 * v125, (uint64_t)&v321);
    outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
    uint64_t v127 = v325;
    uint64_t v128 = v326;
    __swift_project_boxed_opaque_existential_1(&v324, v325);
    int v129 = (void (*)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v128[7];
    id v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v129(v328, v130, v127, v128);
    float32x4_t v122 = v317.i64[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int8x16_t v131 = swift_bridgeObjectRelease();
    long long v132 = *(void *)&v328[0];
    if (!*(void *)&v328[0]) {
      goto LABEL_44;
    }
    v356[0] = v328[0];
    v298.i64[0] = *(void *)&v328[1];
    v356[1] = v328[1];
    *(void *)&v297 = *(void *)&v328[2];
    v356[2] = v328[2];
    *(void *)&v296 = *(void *)&v328[3];
    v356[3] = v328[3];
    v357 = v329 & 0x1FF;
    v358 = *((void *)&v329 + 1);
    v359 = v330;
    uint64_t v133 = (*(uint64_t (**)(uint64_t))&v328[0])(v131);
    if (v133)
    {
      uint64_t v134 = v133;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v134 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v356);
      outlined consume of MeshBuffer<SIMD3<Float>>?(v132);
    }
    outlined consume of MeshBuffer<SIMD3<Float>>?(v132);
    int v145 = *(void *)(v134 + 16);
    if (v145)
    {
      *(void *)&v324 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145, 0);
      simd_float3x3 v146 = 0;
      uint64_t v147 = v324;
      uint64_t v148 = *(void *)(v324 + 16);
      unsigned __int8 v150 = (float32x4_t)v303;
      uint64_t v149 = v304;
      char v152 = v301;
      uint64_t v151 = (float32x4_t)v302;
      uint64_t v154 = (float32x4_t)v299;
      int v153 = (float32x4_t)v300;
      uint64_t v155 = v295;
      do
      {
        long long v156 = *(float32x4_t *)(v134 + 16 * v146 + 32);
        *(void *)&v324 = v147;
        long long v157 = *(void *)(v147 + 24);
        if (v148 >= v157 >> 1)
        {
          v295 = v155;
          v298 = v156;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v157 > 1, v148 + 1, 1);
          long long v156 = v298;
          uint64_t v154 = (float32x4_t)v299;
          v155.i32[3] = v295.i32[3];
          int v153 = (float32x4_t)v300;
          char v152 = v301;
          uint64_t v151 = (float32x4_t)v302;
          unsigned __int8 v150 = (float32x4_t)v303;
          uint64_t v149 = v304;
          uint64_t v147 = v324;
        }
        ++v146;
        long long v158 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v151, *(float32x2_t *)v156.f32, 1), v150, v156.f32[0]), v152, v156, 2);
        long long v159 = (int32x4_t)vnegq_f32(v158);
        long long v160 = (int8x16_t)vtrn2q_s32((int32x4_t)v158, vtrn1q_s32((int32x4_t)v158, v159));
        uint64_t v161 = (float32x4_t)vrev64q_s32((int32x4_t)v158);
        v161.i32[0] = v159.i32[1];
        v161.i32[3] = v159.i32[2];
        uint64_t v162 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v158, v149, 3), v161, v154), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v158, (int8x16_t)v159, 8uLL), *(float32x2_t *)v149.f32, 1), (float32x4_t)vextq_s8(v160, v160, 8uLL), v153));
        v162.i32[3] = v155.i32[3];
        *(void *)(v147 + 16) = v148 + 1;
        *(float32x4_t *)(v147 + 16 * v148++ + 32) = v162;
        uint64_t v155 = v162;
      }
      while (v145 != v146);
      v298 = v162;
      swift_bridgeObjectRelease();
      v295 = v298;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v147 = MEMORY[0x263F8EE78];
    }
    specialized MeshBuffer.init<A>(_:)(v147, (uint64_t)v328);
    v296 = *(long long *)((char *)v328 + 8);
    v297 = *(long long *)((char *)&v328[1] + 8);
    v298 = *(float32x4_t *)((char *)&v328[2] + 8);
    v181 = *(void *)&v328[0];
    uint64_t v182 = *((void *)&v328[3] + 1);
    uint64_t v183 = v329;
    char v184 = BYTE1(v329);
    uint64_t v185 = *((void *)&v329 + 1);
    char v186 = v330;
    v325 = v313;
    v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
    v187 = swift_allocObject();
    *(void *)&v324 = v187;
    if (static MeshBuffers.Identifier.triangleIndices == 0x6F4E786574726576 && unk_2681C1CD0 == 0xEC0000006C616D72)
    {
      v188 = 2;
    }
    else if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
      v188 = 2;
    }
    else
    {
      v188 = v186;
    }
    strcpy((char *)(v187 + 16), "vertexNormal");
    *(unsigned char *)(v187 + 29) = 0;
    *(_WORD *)(v187 + 30) = -5120;
    *(_WORD *)(v187 + 32) = 0;
    *(void *)(v187 + 40) = v185;
    *(unsigned char *)(v187 + 48) = v188;
    *(unsigned char *)(v187 + 49) = v183;
    *(unsigned char *)(v187 + 50) = v184;
    *(void *)(v187 + 56) = v181;
    int v189 = v297;
    *(_OWORD *)(v187 + 64) = v296;
    *(_OWORD *)(v187 + 80) = v189;
    *(float32x4_t *)(v187 + 96) = v298;
    *(void *)(v187 + 112) = v182;
    *(unsigned char *)(v187 + 120) = v183;
    *(unsigned char *)(v187 + 121) = v184;
    *(void *)(v187 + 128) = v185;
    *(unsigned char *)(v187 + 136) = v186;
    outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v190 = v316.i64[0];
    uint64_t v191 = swift_isUniquelyReferenced_nonNull_native();
    v327 = v190;
    uint64_t v192 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
    uint64_t v193 = MEMORY[0x270FA5388](v192);
    uint64_t v195 = (_OWORD *)((char *)v284 - ((v194 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(_OWORD *, __n128))(v196 + 16))(v195, v193);
    int v197 = v195[5];
    v354[4] = v195[4];
    v354[5] = v197;
    v355[0] = v195[6];
    *(_OWORD *)((char *)v355 + 9) = *(_OWORD *)((char *)v195 + 105);
    uint64_t v198 = v195[1];
    v354[0] = *v195;
    v354[1] = v198;
    uint64_t v199 = v195[3];
    v354[2] = v195[2];
    v354[3] = v199;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v354, 0x6F4E786574726576, 0xEC0000006C616D72, 0, v191, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_26DCBB840);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    v316.i64[0] = v327;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    float32x4_t v29 = v312;
    float32x4_t v124 = v314;
    float32x4_t v123 = v315;
    float32x4_t v122 = v317.i64[0];
    if (!*(void *)(v317.i64[0] + 16))
    {
LABEL_73:
      if (!*(void *)(v122 + 16)) {
        goto LABEL_86;
      }
      goto LABEL_74;
    }
LABEL_45:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v135 = specialized __RawDictionaryStorage.find<A>(_:)(0x6154786574726576, 0xED0000746E65676ELL, 0);
    if (v136)
    {
      outlined init with copy of __REAssetService(*(void *)(v122 + 56) + 40 * v135, (uint64_t)&v321);
      outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
      simd_float3 v137 = v325;
      simd_float3 v138 = v326;
      __swift_project_boxed_opaque_existential_1(&v324, v325);
      long long v139 = (void (*)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v138[7];
      id v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v139(v328, v140, v137, v138);
      float32x4_t v122 = v317.i64[0];
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v141 = swift_bridgeObjectRelease();
      char v142 = *(void *)&v328[0];
      if (!*(void *)&v328[0]) {
        goto LABEL_73;
      }
      v350[0] = v328[0];
      v298.i64[0] = *(void *)&v328[1];
      v350[1] = v328[1];
      *(void *)&v297 = *(void *)&v328[2];
      v350[2] = v328[2];
      *(void *)&v296 = *(void *)&v328[3];
      v350[3] = v328[3];
      v351 = v329 & 0x1FF;
      v352 = *((void *)&v329 + 1);
      v353 = v330;
      long long v143 = (*(uint64_t (**)(uint64_t))&v328[0])(v141);
      if (v143)
      {
        float32x4_t v144 = v143;
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        float32x4_t v144 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v350);
        outlined consume of MeshBuffer<SIMD3<Float>>?(v142);
      }
      outlined consume of MeshBuffer<SIMD3<Float>>?(v142);
      long long v163 = *(void *)(v144 + 16);
      if (v163)
      {
        *(void *)&v324 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v163, 0);
        long long v164 = 0;
        long long v165 = v324;
        long long v166 = *(void *)(v324 + 16);
        char v168 = (float32x4_t)v303;
        long long v167 = v304;
        long long v170 = v301;
        long long v169 = (float32x4_t)v302;
        long long v172 = (float32x4_t)v299;
        long long v171 = (float32x4_t)v300;
        unint64_t v173 = v294;
        do
        {
          uint64_t v174 = *(float32x4_t *)(v144 + 16 * v164 + 32);
          *(void *)&v324 = v165;
          uint64_t v175 = *(void *)(v165 + 24);
          if (v166 >= v175 >> 1)
          {
            v294 = v173;
            v298 = v174;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v175 > 1, v166 + 1, 1);
            uint64_t v174 = v298;
            long long v172 = (float32x4_t)v299;
            v173.i32[3] = v294.i32[3];
            long long v171 = (float32x4_t)v300;
            long long v170 = v301;
            long long v169 = (float32x4_t)v302;
            char v168 = (float32x4_t)v303;
            long long v167 = v304;
            long long v165 = v324;
          }
          ++v164;
          uint64_t v176 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v169, *(float32x2_t *)v174.f32, 1), v168, v174.f32[0]), v170, v174, 2);
          long long v177 = (int32x4_t)vnegq_f32(v176);
          long long v178 = (int8x16_t)vtrn2q_s32((int32x4_t)v176, vtrn1q_s32((int32x4_t)v176, v177));
          long long v179 = (float32x4_t)vrev64q_s32((int32x4_t)v176);
          v179.i32[0] = v177.i32[1];
          v179.i32[3] = v177.i32[2];
          v180 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v176, v167, 3), v179, v172), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v176, (int8x16_t)v177, 8uLL), *(float32x2_t *)v167.f32, 1), (float32x4_t)vextq_s8(v178, v178, 8uLL), v171));
          v180.i32[3] = v173.i32[3];
          *(void *)(v165 + 16) = v166 + 1;
          *(float32x4_t *)(v165 + 16 * v166++ + 32) = v180;
          unint64_t v173 = v180;
        }
        while (v163 != v164);
        v298 = v180;
        swift_bridgeObjectRelease();
        v294 = v298;
      }
      else
      {
        swift_bridgeObjectRelease();
        long long v165 = MEMORY[0x263F8EE78];
      }
      specialized MeshBuffer.init<A>(_:)(v165, (uint64_t)v328);
      v296 = *(long long *)((char *)v328 + 8);
      v297 = *(long long *)((char *)&v328[1] + 8);
      v298 = *(float32x4_t *)((char *)&v328[2] + 8);
      long long v210 = *(void *)&v328[0];
      long long v211 = *((void *)&v328[3] + 1);
      char v212 = v329;
      long long v213 = BYTE1(v329);
      long long v214 = *((void *)&v329 + 1);
      long long v215 = v330;
      v325 = v313;
      v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
      long long v216 = swift_allocObject();
      *(void *)&v324 = v216;
      if (static MeshBuffers.Identifier.triangleIndices == 0x6154786574726576
        && unk_2681C1CD0 == 0xED0000746E65676ELL)
      {
        v217 = 2;
      }
      else if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        v217 = 2;
      }
      else
      {
        v217 = v215;
      }
      strcpy((char *)(v216 + 16), "vertexTangent");
      *(_WORD *)(v216 + 30) = -4864;
      *(_WORD *)(v216 + 32) = 0;
      *(void *)(v216 + 40) = v214;
      *(unsigned char *)(v216 + 48) = v217;
      *(unsigned char *)(v216 + 49) = v212;
      *(unsigned char *)(v216 + 50) = v213;
      *(void *)(v216 + 56) = v210;
      v218 = v297;
      *(_OWORD *)(v216 + 64) = v296;
      *(_OWORD *)(v216 + 80) = v218;
      *(float32x4_t *)(v216 + 96) = v298;
      *(void *)(v216 + 112) = v211;
      *(unsigned char *)(v216 + 120) = v212;
      *(unsigned char *)(v216 + 121) = v213;
      *(void *)(v216 + 128) = v214;
      *(unsigned char *)(v216 + 136) = v215;
      outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v219 = v316.i64[0];
      uint64_t v220 = swift_isUniquelyReferenced_nonNull_native();
      v327 = v219;
      long long v221 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
      long long v222 = MEMORY[0x270FA5388](v221);
      v224 = (_OWORD *)((char *)v284 - ((v223 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(_OWORD *, __n128))(v225 + 16))(v224, v222);
      v226 = v224[5];
      v348[4] = v224[4];
      v348[5] = v226;
      v349[0] = v224[6];
      *(_OWORD *)((char *)v349 + 9) = *(_OWORD *)((char *)v224 + 105);
      v227 = v224[1];
      v348[0] = *v224;
      v348[1] = v227;
      v228 = v224[3];
      v348[2] = v224[2];
      v348[3] = v228;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v348, 0x6154786574726576, 0xED0000746E65676ELL, 0, v220, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_26DCBB840);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
      v316.i64[0] = v327;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      float32x4_t v29 = v312;
      float32x4_t v124 = v314;
      float32x4_t v123 = v315;
      float32x4_t v122 = v317.i64[0];
      if (!*(void *)(v317.i64[0] + 16)) {
        goto LABEL_86;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!*(void *)(v122 + 16)) {
        goto LABEL_86;
      }
    }
LABEL_74:
    long long v200 = specialized __RawDictionaryStorage.find<A>(_:)(0x6942786574726576, 0xEF746E65676E6174, 0);
    if (v201)
    {
      outlined init with copy of __REAssetService(*(void *)(v122 + 56) + 40 * v200, (uint64_t)&v321);
      outlined init with take of BindableDataInternal(&v321, (uint64_t)&v324);
      long long v202 = v325;
      long long v203 = v326;
      __swift_project_boxed_opaque_existential_1(&v324, v325);
      long long v204 = (void (*)(long long *__return_ptr, uint64_t, uint64_t, _UNKNOWN **))v203[7];
      uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      v204(v328, v205, v202, v203);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v324);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v206 = swift_bridgeObjectRelease();
      long long v207 = *(void *)&v328[0];
      if (*(void *)&v328[0])
      {
        v344[0] = v328[0];
        v317.i64[0] = *(void *)&v328[1];
        v344[1] = v328[1];
        v298.i64[0] = *(void *)&v328[2];
        v344[2] = v328[2];
        *(void *)&v297 = *(void *)&v328[3];
        v344[3] = v328[3];
        v345 = v329 & 0x1FF;
        v346 = *((void *)&v329 + 1);
        v347 = v330;
        long long v208 = (*(uint64_t (**)(uint64_t))&v328[0])(v206);
        if (v208)
        {
          long long v209 = v208;
        }
        else
        {
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          long long v209 = specialized _copySequenceToContiguousArray<A>(_:)((uint64_t)v344);
          outlined consume of MeshBuffer<SIMD3<Float>>?(v207);
        }
        outlined consume of MeshBuffer<SIMD3<Float>>?(v207);
        v229 = *(void *)(v209 + 16);
        if (v229)
        {
          *(void *)&v324 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v229, 0);
          v230 = 0;
          v231 = v324;
          v232 = *(void *)(v324 + 16);
          v234 = (float32x4_t)v303;
          v233 = v304;
          v236 = v301;
          v235 = (float32x4_t)v302;
          v238 = (float32x4_t)v299;
          v237 = (float32x4_t)v300;
          v239 = v293;
          do
          {
            v240 = *(float32x4_t *)(v209 + 16 * v230 + 32);
            *(void *)&v324 = v231;
            v241 = *(void *)(v231 + 24);
            if (v232 >= v241 >> 1)
            {
              v293 = v239;
              v317 = v240;
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v241 > 1, v232 + 1, 1);
              v240 = v317;
              v239.i32[3] = v293.i32[3];
              v238 = (float32x4_t)v299;
              v237 = (float32x4_t)v300;
              v236 = v301;
              v235 = (float32x4_t)v302;
              v234 = (float32x4_t)v303;
              v233 = v304;
              v231 = v324;
            }
            ++v230;
            v242 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v235, *(float32x2_t *)v240.f32, 1), v234, v240.f32[0]), v236, v240, 2);
            v243 = (int32x4_t)vnegq_f32(v242);
            v244 = (int8x16_t)vtrn2q_s32((int32x4_t)v242, vtrn1q_s32((int32x4_t)v242, v243));
            v245 = (float32x4_t)vrev64q_s32((int32x4_t)v242);
            v245.i32[0] = v243.i32[1];
            v245.i32[3] = v243.i32[2];
            v246 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v242, v233, 3), v245, v238), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v242, (int8x16_t)v243, 8uLL), *(float32x2_t *)v233.f32, 1), (float32x4_t)vextq_s8(v244, v244, 8uLL), v237));
            v246.i32[3] = v239.i32[3];
            *(void *)(v231 + 16) = v232 + 1;
            *(float32x4_t *)(v231 + 16 * v232++ + 32) = v246;
            v239 = v246;
          }
          while (v229 != v230);
          v317 = v246;
          swift_bridgeObjectRelease();
          v293 = v317;
        }
        else
        {
          swift_bridgeObjectRelease();
          v231 = MEMORY[0x263F8EE78];
        }
        specialized MeshBuffer.init<A>(_:)(v231, (uint64_t)v328);
        v297 = *(long long *)((char *)v328 + 8);
        v298 = *(float32x4_t *)((char *)&v328[1] + 8);
        v317 = *(float32x4_t *)((char *)&v328[2] + 8);
        v247 = *(void *)&v328[0];
        v248 = *((void *)&v328[3] + 1);
        v249 = v329;
        v250 = BYTE1(v329);
        v251 = *((void *)&v329 + 1);
        v252 = v330;
        v325 = v313;
        v326 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
        v253 = swift_allocObject();
        *(void *)&v324 = v253;
        if (static MeshBuffers.Identifier.triangleIndices == 0x6942786574726576
          && unk_2681C1CD0 == 0xEF746E65676E6174)
        {
          v254 = 2;
        }
        else if (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          v254 = 2;
        }
        else
        {
          v254 = v252;
        }
        *(void *)(v253 + 16) = 0x6942786574726576;
        *(void *)(v253 + 24) = 0xEF746E65676E6174;
        *(_WORD *)(v253 + 32) = 0;
        *(void *)(v253 + 40) = v251;
        *(unsigned char *)(v253 + 48) = v254;
        *(unsigned char *)(v253 + 49) = v249;
        *(unsigned char *)(v253 + 50) = v250;
        *(void *)(v253 + 56) = v247;
        v255 = v298;
        *(_OWORD *)(v253 + 64) = v297;
        *(float32x4_t *)(v253 + 80) = v255;
        *(float32x4_t *)(v253 + 96) = v317;
        *(void *)(v253 + 112) = v248;
        *(unsigned char *)(v253 + 120) = v249;
        *(unsigned char *)(v253 + 121) = v250;
        *(void *)(v253 + 128) = v251;
        *(unsigned char *)(v253 + 136) = v252;
        outlined init with take of BindableDataInternal(&v324, (uint64_t)&v321);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        v256 = v316.i64[0];
        v257 = swift_isUniquelyReferenced_nonNull_native();
        v327 = v256;
        v258 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v321, v322);
        v259 = MEMORY[0x270FA5388](v258);
        v261 = (_OWORD *)((char *)v284 - ((v260 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(_OWORD *, __n128))(v262 + 16))(v261, v259);
        v263 = v261[5];
        v342[4] = v261[4];
        v342[5] = v263;
        v343[0] = v261[6];
        *(_OWORD *)((char *)v343 + 9) = *(_OWORD *)((char *)v261 + 105);
        v264 = v261[1];
        v342[0] = *v261;
        v342[1] = v264;
        v265 = v261[3];
        v342[2] = v261[2];
        v342[3] = v265;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v342, 0x6942786574726576, 0xEF746E65676E6174, 0, v257, &v327, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_26DCBB840);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
        v316.i64[0] = v327;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        float32x4_t v29 = v312;
        float32x4_t v124 = v314;
        float32x4_t v123 = v315;
      }
      goto LABEL_102;
    }
LABEL_86:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_102:
    v266 = v332;
    v267 = v331;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      float32x4_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
    }
    v269 = v29[2];
    v268 = v29[3];
    v270 = v311;
    if (v269 >= v268 >> 1)
    {
      v274 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v268 > 1), v269 + 1, 1, v29);
      v270 = v311;
      float32x4_t v29 = v274;
    }
    unint64_t v28 = v270 + 1;
    v29[2] = v269 + 1;
    v271 = &v29[8 * v269];
    v272 = v310;
    v271[4] = v316.i64[0];
    v271[5] = v272;
    v273 = v309;
    v271[6] = v123;
    v271[7] = v273;
    v271[8] = v124;
    *((_DWORD *)v271 + 18) = v307;
    *((unsigned char *)v271 + 76) = v266;
    v271[10] = v308;
    *((unsigned char *)v271 + 88) = v267;
    uint64_t v23 = v305;
    if (v28 == *(void *)(v305 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_111;
    }
    if (v28 >= *(void *)(v305 + 16)) {
      goto LABEL_119;
    }
  }
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t MeshResource.init(primitiveMeshShape:)()
{
  uint64_t v1 = v0;
  switch(RECollisionShapeGetType())
  {
    case 2u:
      REGeomBuildSphereDefaultOptions();
      RESphereShapeGetRadius();
      uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2, (uint64_t)&v49);
      uint64_t v3 = v56;
      uint64_t v4 = v57;
      __swift_project_boxed_opaque_existential_1(&v49, v56);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      uint64_t v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
      id v6 = (id)REAssetGetSwiftObject();
      swift_unknownObjectRelease();
      if (!v6) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_4:
      REBoxShapeGetExtent();
      long long v48 = v7;
      REGeomBuildBoxDefaultOptions();
      unint64_t v58 = v49;
      int v59 = v50;
      uint64_t v60 = v48;
      int v61 = DWORD2(v48);
      __int16 v62 = v56;
      char v63 = BYTE2(v56);
      uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v8, (uint64_t)&v49);
      uint64_t v9 = v56;
      uint64_t v10 = v57;
      __swift_project_boxed_opaque_existential_1(&v49, v56);
      (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
      uint64_t v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t)&v58);
      id v11 = (id)REAssetGetSwiftObject();
      swift_unknownObjectRelease();
      if (v11)
      {
        __break(1u);
LABEL_6:
        REGeomBuildCapsuleDefaultOptions();
        uint64_t v12 = *(unsigned int *)((char *)&v49 + 2);
        int v13 = v51;
        int v14 = v52;
        int v15 = v53;
        RECapsuleShapeGetHeight();
        float v17 = v16;
        RECapsuleShapeGetRadius();
        float v19 = v18;
        uint64_t v20 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v20, (uint64_t)&v49);
        uint64_t v21 = v56;
        uint64_t v22 = v57;
        __swift_project_boxed_opaque_existential_1(&v49, v56);
        (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
        int v23 = v14 ? 256 : 0;
        int v24 = v23 | v13;
        int v25 = v15 ? 0x10000 : 0;
        uint64_t v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((v12 << 16) | 0x40, v24 | v25, v19, v17);
        id v26 = (id)REAssetGetSwiftObject();
        swift_unknownObjectRelease();
        if (v26)
        {
          __break(1u);
LABEL_14:
          REGeomBuildCylinderDefaultOptions();
          unsigned int v27 = v49;
          unsigned __int8 v28 = v51;
          unsigned __int8 v29 = v52;
          unsigned __int8 v30 = v53;
          char v31 = v54;
          char v32 = v55;
          RECylinderShapeGetHeight();
          unsigned int v34 = v33;
          RECylinderShapeGetRadius();
          int v36 = v35;
          RECylinderShapeGetRadius();
          unint64_t v58 = __PAIR64__(v34, v27);
          int v59 = v36;
          LODWORD(v60) = v37;
          BYTE4(v60) = v28;
          BYTE5(v60) = v29;
          BYTE6(v60) = v30;
          HIBYTE(v60) = v31;
          LOBYTE(v61) = v32;
          uint64_t v38 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v38, (uint64_t)&v49);
          uint64_t v39 = v56;
          uint64_t v40 = v57;
          __swift_project_boxed_opaque_existential_1(&v49, v56);
          (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
          uint64_t v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)&v58);
          id v41 = (id)REAssetGetSwiftObject();
          swift_unknownObjectRelease();
          if (v41)
          {
            __break(1u);
LABEL_16:
            REGeomBuildConeDefaultOptions();
            REConeShapeGetHeight();
            REConeShapeGetRadius();
            uint64_t v42 = specialized static __ServiceLocator.shared.getter() + 120;
            swift_beginAccess();
            outlined init with copy of __REAssetService(v42, (uint64_t)&v49);
            uint64_t v43 = v56;
            uint64_t v44 = v57;
            __swift_project_boxed_opaque_existential_1(&v49, v56);
            (*(void (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
            uint64_t v5 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
            id v45 = (id)REAssetGetSwiftObject();
            swift_unknownObjectRelease();
            if (v45)
            {
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x22829E280);
            }
          }
        }
      }
LABEL_17:
      REAssetHandleLoadNow();
      REAssetSetNetworkSharingMode();
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(v1 + 120))(v5);
      RERelease();
      return v46;
    case 3u:
      goto LABEL_4;
    case 4u:
      goto LABEL_6;
    case 8u:
      goto LABEL_14;
    case 9u:
      goto LABEL_16;
    default:
      goto LABEL_19;
  }
}

uint64_t MeshResource.init(shape:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x263EF8340];
  if (!RECollisionShapeAssetGetCollisionShape()) {
    __break(1u);
  }
  uint64_t v4 = 0;
  switch(RECollisionShapeGetType())
  {
    case 0u:
    case 1u:
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      uint64_t v5 = REGeomMeshCreateFromCoreAttributes();
      if (!v5) {
        goto LABEL_18;
      }
      v20[0] = v5;
      uint64_t v6 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v6, (uint64_t)v21);
      uint64_t v7 = v22;
      uint64_t v8 = v23;
      __swift_project_boxed_opaque_existential_1(v21, v22);
      (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
      uint64_t v9 = REAssetManagerMeshMemoryAssetCreate();
      if (!v9) {
        goto LABEL_18;
      }
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 120))(v9, v10);
      RERelease();
      RERelease();
      goto LABEL_12;
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      uint64_t v11 = MeshResource.init(primitiveMeshShape:)();
      v21[0] = v11;
      RequestLoadable.enforceResourceSharingBeforeECSCommits()();
      if (!v4) {
        goto LABEL_12;
      }
      swift_unexpectedError();
      __break(1u);
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      MeshDescriptor.init(convexPolyhedronShape:)(inited + 32);
      uint64_t v13 = MeshResource.init(from:)(inited);
      if (v4)
      {
        swift_unexpectedError();
        __break(1u);
LABEL_10:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
        uint64_t v14 = swift_initStackObject();
        *(_OWORD *)(v14 + 16) = xmmword_22830EC60;
        MeshDescriptor.init(staticMeshShape:)(v14 + 32);
        uint64_t v13 = MeshResource.init(from:)(v14);
        if (v4) {
          goto LABEL_19;
        }
      }
      uint64_t v11 = v13;
LABEL_12:
      LODWORD(v15) = *(void *)(a1 + 40);
      long long v18 = *(_OWORD *)(a1 + 32);
      float32x4_t v19 = *(float32x4_t *)(a1 + 48);
      if (!REPoseF.isIdentity.getter(*(float32x2_t *)(a1 + 32), v15, v19))
      {
        MeshResource.Contents.init(_:)(*(void *)(v11 + 16), v20);
        MeshResource.Contents.offsetBy(pose:)((uint64_t)v21, *(float32x2_t *)&v18, v15, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20[0] = v21[0];
        v20[1] = v21[1];
        void v20[2] = v21[2];
        v20[3] = v22;
        v20[4] = v23;
        v20[5] = v24;
        MeshResource.replace(with:)((uint64_t)v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21[0] = v11;
        RequestLoadable.enforceResourceSharingBeforeECSCommits()();
        if (v16)
        {
LABEL_17:
          swift_unexpectedError();
          __break(1u);
LABEL_18:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_19:
          swift_unexpectedError();
          __break(1u);
          JUMPOUT(0x22829E6FCLL);
        }
      }
      swift_release();
      return v11;
    case 5u:
      goto LABEL_8;
    case 0xCu:
      goto LABEL_10;
    default:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      goto LABEL_17;
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2[59] = a1;
  v2[60] = v1;
  type metadata accessor for MainActor();
  v2[61] = static MainActor.shared.getter();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[62] = v3;
  v2[63] = v4;
  return MEMORY[0x270FA2498](MeshResource.init(shape:), v3, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 552) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = MeshResource.init(shape:);
  }
  else
  {
    v4[70] = a1;
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = MeshResource.init(shape:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 584) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = MeshResource.init(shape:);
  }
  else
  {
    v4[74] = a1;
    uint64_t v5 = v4[62];
    uint64_t v6 = v4[63];
    uint64_t v7 = MeshResource.init(shape:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t MeshResource.init(shape:)()
{
  uint64_t v29 = v0;
  v28[12] = *MEMORY[0x263EF8340];
  if (!RECollisionShapeAssetGetCollisionShape()) {
    __break(1u);
  }
  switch(RECollisionShapeGetType())
  {
    case 0u:
    case 1u:
    case 6u:
    case 7u:
    case 0xAu:
    case 0xBu:
      uint64_t v1 = REGeomMeshCreateFromCoreAttributes();
      if (!v1) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      *(void *)(v0 + 456) = v1;
      uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2, v0 + 384);
      uint64_t v3 = *(void *)(v0 + 408);
      uint64_t v4 = *(void *)(v0 + 416);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 384), v3);
      (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
      __swift_destroy_boxed_opaque_existential_1(v0 + 384);
      uint64_t v5 = REAssetManagerMeshMemoryAssetCreate();
      if (!v5) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v0 + 480) + 120))(v5, v6);
      RERelease();
      RERelease();
      *(void *)(v0 + 600) = v7;
      uint64_t v8 = *(void *)(v0 + 472);
      LODWORD(v9) = *(void *)(v8 + 40);
      long long v26 = *(_OWORD *)(v8 + 32);
      float32x4_t v27 = *(float32x4_t *)(v8 + 48);
      if (REPoseF.isIdentity.getter(*(float32x2_t *)(v8 + 32), v9, v27))
      {
        swift_release();
        swift_release();
        uint64_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
        uint64_t v11 = *(void *)(v0 + 600);
        return v10(v11);
      }
      else
      {
        MeshResource.Contents.init(_:)(*(void *)(v7 + 16), v28);
        v28[6] = v28[0];
        v28[7] = v28[1];
        v28[8] = v28[2];
        v28[9] = v28[3];
        v28[10] = v28[4];
        v28[11] = v28[5];
        MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v26, v9, v27);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = *(void *)(v0 + 336);
        uint64_t v17 = *(void *)(v0 + 344);
        *(void *)(v0 + 608) = v16;
        *(void *)(v0 + 616) = v17;
        uint64_t v18 = *(void *)(v0 + 352);
        uint64_t v19 = *(void *)(v0 + 360);
        *(void *)(v0 + 624) = v18;
        *(void *)(v0 + 632) = v19;
        uint64_t v20 = *(void *)(v0 + 368);
        uint64_t v21 = *(void *)(v0 + 376);
        *(void *)(v0 + 640) = v20;
        *(void *)(v0 + 648) = v21;
        *(void *)(v0 + 288) = v16;
        *(void *)(v0 + 296) = v17;
        *(void *)(v0 + 304) = v18;
        *(void *)(v0 + 312) = v19;
        *(void *)(v0 + 320) = v20;
        *(void *)(v0 + 328) = v21;
        uint64_t v22 = (void *)swift_task_alloc();
        *(void *)(v0 + 656) = v22;
        *uint64_t v22 = v0;
        v22[1] = MeshResource.init(shape:);
        return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
      }
    case 2u:
    case 3u:
    case 4u:
    case 8u:
    case 9u:
      uint64_t v13 = MeshResource.init(primitiveMeshShape:)();
      *(void *)(v0 + 512) = v13;
      *(void *)(v0 + 464) = v13;
      swift_retain();
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 520) = v14;
      void *v14 = v0;
      v14[1] = MeshResource.init(shape:);
      uint64_t v15 = *(void *)(v0 + 480);
      return RequestLoadable.awaitForResourceSharing()(v15, (uint64_t)&protocol witness table for MeshResource);
    case 5u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      uint64_t inited = swift_initStackObject();
      *(void *)(v0 + 536) = inited;
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      MeshDescriptor.init(convexPolyhedronShape:)(inited + 32);
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v24;
      *uint64_t v24 = v0;
      uint64_t v25 = MeshResource.init(shape:);
      goto LABEL_18;
    case 0xCu:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      uint64_t inited = swift_initStackObject();
      *(void *)(v0 + 568) = inited;
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      MeshDescriptor.init(staticMeshShape:)(inited + 32);
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v24;
      *uint64_t v24 = v0;
      uint64_t v25 = MeshResource.init(shape:);
LABEL_18:
      v24[1] = v25;
      return MeshResource.init(from:)(inited);
    default:
      __break(1u);
      JUMPOUT(0x22829EDF4);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 496);
    uint64_t v4 = *(void *)(v2 + 504);
    uint64_t v5 = MeshResource.init(shape:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 496);
    uint64_t v4 = *(void *)(v2 + 504);
    uint64_t v5 = MeshResource.init(shape:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  long long v14;
  float32x4_t v15;
  uint64_t v16[13];
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  v16[12] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 512);
  *(void *)(v0 + 600) = v1;
  uint64_t v2 = *(void *)(v0 + 472);
  LODWORD(v3) = *(void *)(v2 + 40);
  uint64_t v14 = *(_OWORD *)(v2 + 32);
  uint64_t v15 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v15))
  {
    swift_release();
    swift_release();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = *(void *)(v0 + 600);
    return v4(v5);
  }
  else
  {
    MeshResource.Contents.init(_:)(*(void *)(v1 + 16), v16);
    v16[6] = v16[0];
    v16[7] = v16[1];
    v16[8] = v16[2];
    v16[9] = v16[3];
    v16[10] = v16[4];
    v16[11] = v16[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v14, v3, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 344);
    *(void *)(v0 + 608) = v7;
    *(void *)(v0 + 616) = v8;
    float v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    *(void *)(v0 + 624) = v9;
    *(void *)(v0 + 632) = v10;
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 376);
    *(void *)(v0 + 640) = v11;
    *(void *)(v0 + 648) = v12;
    *(void *)(v0 + 288) = v7;
    *(void *)(v0 + 296) = v8;
    *(void *)(v0 + 304) = v9;
    *(void *)(v0 + 312) = v10;
    *(void *)(v0 + 320) = v11;
    *(void *)(v0 + 328) = v12;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v13;
    void *v13 = v0;
    v13[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  long long v14;
  float32x4_t v15;
  uint64_t v16[13];
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  v16[12] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 560);
  *(void *)(v0 + 600) = v1;
  uint64_t v2 = *(void *)(v0 + 472);
  LODWORD(v3) = *(void *)(v2 + 40);
  uint64_t v14 = *(_OWORD *)(v2 + 32);
  uint64_t v15 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v15))
  {
    swift_release();
    swift_release();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = *(void *)(v0 + 600);
    return v4(v5);
  }
  else
  {
    MeshResource.Contents.init(_:)(*(void *)(v1 + 16), v16);
    v16[6] = v16[0];
    v16[7] = v16[1];
    v16[8] = v16[2];
    v16[9] = v16[3];
    v16[10] = v16[4];
    v16[11] = v16[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v14, v3, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 344);
    *(void *)(v0 + 608) = v7;
    *(void *)(v0 + 616) = v8;
    float v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    *(void *)(v0 + 624) = v9;
    *(void *)(v0 + 632) = v10;
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 376);
    *(void *)(v0 + 640) = v11;
    *(void *)(v0 + 648) = v12;
    *(void *)(v0 + 288) = v7;
    *(void *)(v0 + 296) = v8;
    *(void *)(v0 + 304) = v9;
    *(void *)(v0 + 312) = v10;
    *(void *)(v0 + 320) = v11;
    *(void *)(v0 + 328) = v12;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v13;
    void *v13 = v0;
    v13[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  long long v14;
  float32x4_t v15;
  uint64_t v16[13];
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  v16[12] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 592);
  *(void *)(v0 + 600) = v1;
  uint64_t v2 = *(void *)(v0 + 472);
  LODWORD(v3) = *(void *)(v2 + 40);
  uint64_t v14 = *(_OWORD *)(v2 + 32);
  uint64_t v15 = *(float32x4_t *)(v2 + 48);
  if (REPoseF.isIdentity.getter(*(float32x2_t *)(v2 + 32), v3, v15))
  {
    swift_release();
    swift_release();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = *(void *)(v0 + 600);
    return v4(v5);
  }
  else
  {
    MeshResource.Contents.init(_:)(*(void *)(v1 + 16), v16);
    v16[6] = v16[0];
    v16[7] = v16[1];
    v16[8] = v16[2];
    v16[9] = v16[3];
    v16[10] = v16[4];
    v16[11] = v16[5];
    MeshResource.Contents.offsetBy(pose:)(v0 + 336, *(float32x2_t *)&v14, v3, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 344);
    *(void *)(v0 + 608) = v7;
    *(void *)(v0 + 616) = v8;
    float v9 = *(void *)(v0 + 352);
    uint64_t v10 = *(void *)(v0 + 360);
    *(void *)(v0 + 624) = v9;
    *(void *)(v0 + 632) = v10;
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 376);
    *(void *)(v0 + 640) = v11;
    *(void *)(v0 + 648) = v12;
    *(void *)(v0 + 288) = v7;
    *(void *)(v0 + 296) = v8;
    *(void *)(v0 + 304) = v9;
    *(void *)(v0 + 312) = v10;
    *(void *)(v0 + 320) = v11;
    *(void *)(v0 + 328) = v12;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 656) = v13;
    void *v13 = v0;
    v13[1] = MeshResource.init(shape:);
    return MeshResource.replace(with:)((_OWORD *)(v0 + 288));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void **)v1;
  *(void *)(*(void *)v1 + 664) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v4 = v2[62];
    uint64_t v5 = v2[63];
    return MEMORY[0x270FA2498](MeshResource.init(shape:), v4, v5);
  }
  else
  {
    v2[56] = v2[75];
    uint64_t v6 = (void *)swift_task_alloc();
    v2[84] = v6;
    *uint64_t v6 = v3;
    v6[1] = MeshResource.init(shape:);
    uint64_t v7 = v2[60];
    return RequestLoadable.awaitForResourceSharing()(v7, (uint64_t)&protocol witness table for MeshResource);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 680) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 496);
  uint64_t v4 = *(void *)(v2 + 504);
  if (v0) {
    uint64_t v5 = MeshResource.init(shape:);
  }
  else {
    uint64_t v5 = MeshResource.init(shape:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 600);
  return v1(v2);
}

{
  uint64_t v1;

  return swift_unexpectedError();
}

{
  uint64_t v1;

  return swift_unexpectedError();
}

{
  uint64_t v1;

  swift_release();
  return swift_unexpectedError();
}

{
  uint64_t v1;

  return swift_unexpectedError();
}

{
  uint64_t v1;

  return swift_unexpectedError();
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 24) & 1;
  char v3 = *(unsigned char *)(a1 + 25) & 1;
  char v4 = *(unsigned char *)(a1 + 26) & 1;
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v14);
  uint64_t v6 = v15;
  uint64_t v7 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v14);
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  __swift_project_boxed_opaque_existential_1(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  uint64_t v11 = *(void *)(a1 + 8);
  v14[0] = *(void *)a1;
  v14[1] = v11;
  v14[2] = *(void *)(a1 + 16);
  LOBYTE(v15) = v2;
  BYTE1(v15) = v3;
  BYTE2(v15) = v4;
  REMeshAssetCreateBoxDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(uint64_t *a1)
{
  __int16 v2 = *((_WORD *)a1 + 4);
  int v3 = *((_DWORD *)a1 + 7);
  char v4 = *((unsigned char *)a1 + 36) & 1;
  char v5 = *((unsigned char *)a1 + 37) & 1;
  char v6 = *((unsigned char *)a1 + 38) & 1;
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)&v17);
  uint64_t v8 = *(void *)&v20[4];
  uint64_t v9 = v21;
  __swift_project_boxed_opaque_existential_1(&v17, *(uint64_t *)&v20[4]);
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v8, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)&v17);
  uint64_t v11 = *(void *)&v20[4];
  uint64_t v12 = v21;
  __swift_project_boxed_opaque_existential_1(&v17, *(uint64_t *)&v20[4]);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
  uint64_t v17 = *a1;
  __int16 v18 = v2;
  uint64_t v19 = *(uint64_t *)((char *)a1 + 12);
  *(void *)uint64_t v20 = *(uint64_t *)((char *)a1 + 20);
  v13.i32[1] = *(_DWORD *)&v20[4];
  *(_DWORD *)&v20[8] = v3;
  v13.i32[0] = *((_DWORD *)a1 + 8);
  int16x8_t v14 = (int16x8_t)vmovl_u8(v13);
  v14.i64[0] &= 0xFF01FF01FF01FF01;
  LODWORD(v21) = vmovn_s16(v14).u32[0];
  BYTE4(v21) = v4;
  BYTE5(v21) = v5;
  BYTE6(v21) = v6;
  REMeshAssetCreateBoxWithRoundedCornersDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(int *a1)
{
  int v2 = *a1;
  __int16 v3 = *((_WORD *)a1 + 2);
  int v4 = a1[4];
  int v5 = a1[6];
  char v6 = a1[5] & 1;
  char v7 = *((unsigned char *)a1 + 21) & 1;
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v16);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  __swift_project_boxed_opaque_existential_1(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t v11 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11, (uint64_t)v16);
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  __swift_project_boxed_opaque_existential_1(v16, v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  LODWORD(v16[0]) = v2;
  WORD2(v16[0]) = v3;
  v16[1] = *((void *)a1 + 1);
  int v17 = v4;
  char v18 = v6;
  char v19 = v7;
  LODWORD(v20) = v5;
  REMeshAssetCreatePlaneDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

{
  int v2;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8x8_t v11;
  int16x8_t v12;
  uint64_t NewMutableWithAssetDescriptors;
  int v15;
  uint64_t v16;
  int v17;
  unsigned __int32 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  int v2 = *a1;
  __int16 v3 = a1[3];
  int v4 = a1[5] & 1;
  int v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)&v15);
  char v6 = v20;
  char v7 = v21;
  __swift_project_boxed_opaque_existential_1(&v15, v20);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)&v15);
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  __swift_project_boxed_opaque_existential_1(&v15, v20);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  uint64_t v15 = v2;
  uint64_t v16 = *(void *)(a1 + 1);
  v11.i32[1] = HIDWORD(v16);
  int v17 = v3;
  v11.i32[0] = a1[4];
  uint64_t v12 = (int16x8_t)vmovl_u8(v11);
  v12.i64[0] &= 0xFF01FF01FF01FF01;
  char v18 = vmovn_s16(v12).u32[0];
  char v19 = v4;
  REMeshAssetCreateCylinderDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  uint64_t v1 = v9;
  uint64_t v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  uint64_t v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  REMeshAssetCreateSphereDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t NewMutableWithAssetDescriptors;
  void v8[3];
  uint64_t v9;
  uint64_t v10;

  uint64_t v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v8);
  uint64_t v1 = v9;
  uint64_t v2 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  uint64_t v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, (uint64_t)v8);
  uint64_t v4 = v9;
  uint64_t v5 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  REMeshAssetCreateConeDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(unint64_t a1, int a2, float a3, float a4)
{
  __int16 v7 = a1;
  unint64_t v8 = a1 >> 16;
  unint64_t v9 = HIDWORD(a1);
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)&v18);
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  __swift_project_boxed_opaque_existential_1(&v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  uint64_t v13 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13, (uint64_t)&v18);
  uint64_t v14 = v23;
  uint64_t v15 = v24;
  __swift_project_boxed_opaque_existential_1(&v18, v23);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  LOWORD(v18) = v7;
  WORD1(v18) = v8;
  WORD2(v18) = v9;
  float v19 = a3;
  float v20 = a4;
  __int16 v21 = a2 & 0x101;
  char v22 = BYTE2(a2) & 1;
  REMeshAssetCreateCapsuleDescriptor();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(char *a1)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v17);
  uint64_t v3 = v20;
  uint64_t v4 = v21;
  __swift_project_boxed_opaque_existential_1(v17, v20);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v17);
  uint64_t v6 = v20;
  uint64_t v7 = v21;
  __swift_project_boxed_opaque_existential_1(v17, v20);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  char v8 = *a1;
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  __int16 v11 = *((_WORD *)a1 + 16);
  char v12 = a1[34];
  LOBYTE(v3) = a1[35];
  LOBYTE(v5) = a1[36];
  char v15 = a1[38];
  char v16 = a1[37];
  String.utf8CString.getter();
  String.utf8CString.getter();
  v17[0] = v8;
  uint64_t v18 = *(void *)(a1 + 4);
  uint64_t v19 = v9;
  uint64_t v20 = v10;
  LOWORD(v21) = v11;
  BYTE2(v21) = v12;
  BYTE3(v21) = v3;
  BYTE4(v21) = v5;
  BYTE5(v21) = v16;
  BYTE6(v21) = v15;
  REMeshAssetCreateExtrudedTextDescriptor();
  swift_release();
  swift_release();
  uint64_t NewMutableWithAssetDescriptors = REAssetHandleCreateNewMutableWithAssetDescriptors();
  RERelease();
  return NewMutableWithAssetDescriptors;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(_OWORD *a1, char a2)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v15);
  uint64_t v5 = v17;
  uint64_t v6 = v18;
  __swift_project_boxed_opaque_existential_1(&v15, v17);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  uint64_t v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t)a1);
  id v8 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for BoxMeshResource();
    uint64_t v10 = swift_allocObject();
    swift_retain();
    REGeomBuildBoxDefaultOptions();
    char v11 = v17;
    char v12 = BYTE1(v17);
    char v13 = BYTE2(v17);
    long long v14 = v16;
    *(void *)(v10 + 24) = v15;
    *(_OWORD *)(v10 + 32) = v14;
    *(unsigned char *)(v10 + 48) = v11;
    *(unsigned char *)(v10 + 49) = v12;
    *(unsigned char *)(v10 + 50) = v13;
    *(unsigned char *)(v10 + 52) = 0;
    swift_release();
    *(void *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *a1;
    *(_OWORD *)(v10 + 36) = *(_OWORD *)((char *)a1 + 12);
    *(unsigned char *)(v10 + 52) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(uint64_t a1, char a2)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v22);
  uint64_t v5 = *(void *)&v24[12];
  uint64_t v6 = v25;
  __swift_project_boxed_opaque_existential_1(&v22, *(uint64_t *)&v24[12]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v22);
  uint64_t v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((uint64_t *)a1);
  id v8 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for BoxWithRoundedCornersMeshResource();
    uint64_t v10 = swift_allocObject();
    swift_retain();
    REGeomBuildBoxWithRoundedCornersDefaultOptions();
    __int16 v11 = v23;
    int v12 = *(_DWORD *)&v24[16];
    char v13 = v25;
    char v14 = BYTE1(v25);
    char v15 = BYTE2(v25);
    char v16 = BYTE3(v25);
    char v17 = BYTE4(v25);
    char v18 = BYTE5(v25);
    char v19 = BYTE6(v25);
    long long v20 = *(_OWORD *)v24;
    *(void *)(v10 + 24) = v22;
    *(_WORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 36) = v20;
    *(_DWORD *)(v10 + 52) = v12;
    *(unsigned char *)(v10 + 56) = v13;
    *(unsigned char *)(v10 + 57) = v14;
    *(unsigned char *)(v10 + 58) = v15;
    *(unsigned char *)(v10 + 59) = v16;
    *(unsigned char *)(v10 + 60) = v17;
    *(unsigned char *)(v10 + 61) = v18;
    *(unsigned char *)(v10 + 62) = v19;
    *(unsigned char *)(v10 + 64) = 0;
    swift_release();
    *(void *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    long long v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 40) = v21;
    *(void *)(v10 + 56) = *(void *)(a1 + 32);
    *(unsigned char *)(v10 + 64) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  void v11[3];
  uint64_t v12;
  uint64_t v13;

  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v11);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  uint64_t v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)a1);
  id v8 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for PlaneMeshResource();
    uint64_t v10 = swift_allocObject();
    *(_DWORD *)(v10 + 24) = 0;
    *(_WORD *)(v10 + 28) = 0;
    *(_DWORD *)(v10 + 48) = 0;
    *(unsigned char *)(v10 + 52) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 38) = 0;
    *(void *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 36) = *(_OWORD *)(a1 + 12);
    *(unsigned char *)(v10 + 52) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v18);
  uint64_t v5 = v26;
  uint64_t v6 = v27;
  __swift_project_boxed_opaque_existential_1(&v18, v26);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
  uint64_t v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((int *)a1);
  id v8 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for CylinderMeshResource();
    uint64_t v10 = swift_allocObject();
    swift_retain();
    REGeomBuildCylinderDefaultOptions();
    __int16 v11 = v20;
    int v12 = v21;
    char v13 = v22;
    char v14 = v23;
    char v15 = v24;
    char v16 = v25;
    char v17 = v19;
    *(_DWORD *)(v10 + 24) = v18;
    *(void *)(v10 + 28) = v17;
    *(_DWORD *)(v10 + 36) = v11;
    *(unsigned char *)(v10 + 40) = v12;
    *(unsigned char *)(v10 + 41) = v13;
    *(unsigned char *)(v10 + 42) = v14;
    *(unsigned char *)(v10 + 43) = v15;
    *(unsigned char *)(v10 + 44) = v16;
    *(unsigned char *)(v10 + 48) = 0;
    swift_release();
    *(void *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    *(_OWORD *)(v10 + 24) = *(_OWORD *)a1;
    *(void *)(v10 + 40) = *(void *)(a1 + 16);
    *(unsigned char *)(v10 + 48) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  long long v20;
  long long v21;
  unsigned char v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v22);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  __swift_project_boxed_opaque_existential_1(v22, v25);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  uint64_t v7 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)((char *)a1);
  id v8 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for TextMeshResource();
    uint64_t v10 = swift_allocObject();
    swift_retain();
    REGeomBuildExtrudedTextDefaultOptions();
    __int16 v11 = v24;
    int v12 = v25;
    char v13 = v26;
    char v14 = BYTE2(v26);
    char v15 = BYTE3(v26);
    char v16 = BYTE4(v26);
    char v17 = BYTE5(v26);
    char v18 = BYTE6(v26);
    char v19 = v23;
    *(unsigned char *)(v10 + 24) = v22[0];
    *(void *)(v10 + 28) = v19;
    *(void *)(v10 + 40) = v11;
    *(void *)(v10 + 48) = v12;
    *(_WORD *)(v10 + 56) = v13;
    *(unsigned char *)(v10 + 58) = v14;
    *(unsigned char *)(v10 + 59) = v15;
    *(unsigned char *)(v10 + 60) = v16;
    *(unsigned char *)(v10 + 61) = v17;
    *(unsigned char *)(v10 + 62) = v18;
    *(void *)(v10 + 64) = 0xD000000000000013;
    *(void *)(v10 + 72) = 0x800000022835F7D0;
    *(void *)(v10 + 80) = 0;
    *(void *)(v10 + 88) = 0xE000000000000000;
    *(unsigned char *)(v10 + 96) = 0;
    swift_release();
    *(void *)(v10 + 16) = v7;
    RERetain();
    REAssetSetSwiftObject();
    long long v20 = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a1 + 16);
    long long v21 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v10 + 72) = v21;
    *(void *)(v10 + 88) = *(void *)(a1 + 64);
    *(_OWORD *)(v10 + 24) = v20;
    outlined retain of TextMeshResource.Options(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v10 + 96) = a2 & 1;
    RERelease();
    return v10;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(__int16 a1, unsigned int a2, char a3, float a4)
{
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v22);
  uint64_t v9 = v23;
  uint64_t v10 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  uint64_t v11 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
  id v12 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v12)
  {
    __break(1u);
  }
  else
  {
    int v14 = HIWORD(a2) & 1;
    int v15 = (a2 >> 8) & 1;
    char v16 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for SphereMeshResource();
    uint64_t v17 = swift_allocObject();
    swift_retain();
    uint64_t v18 = REGeomBuildSphereDefaultOptions();
    *(_WORD *)(v17 + 24) = v18;
    *(_DWORD *)(v17 + 28) = HIDWORD(v18);
    *(unsigned char *)(v17 + 32) = v19 & 1;
    *(unsigned char *)(v17 + 33) = v20 & 1;
    *(unsigned char *)(v17 + 34) = v21 & 1;
    *(unsigned char *)(v17 + 36) = 0;
    swift_release();
    *(void *)(v17 + 16) = v11;
    RERetain();
    REAssetSetSwiftObject();
    *(_WORD *)(v17 + 24) = a1;
    *(float *)(v17 + 28) = a4;
    *(unsigned char *)(v17 + 32) = v16;
    *(unsigned char *)(v17 + 33) = v15;
    *(unsigned char *)(v17 + 34) = v14;
    *(unsigned char *)(v17 + 36) = a3 & 1;
    RERelease();
    return v17;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(uint64_t a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v20);
  uint64_t v11 = v21;
  uint64_t v12 = v22;
  __swift_project_boxed_opaque_existential_1(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  uint64_t v13 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)(a1 & 0xFFFFFFFFFFFFLL, a2 & 0x10101, a4, a5);
  id v14 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    int v16 = HIWORD(a2) & 1;
    int v17 = (a2 >> 8) & 1;
    char v18 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for CapsuleMeshResource();
    uint64_t v19 = swift_allocObject();
    *(_DWORD *)(v19 + 24) = 0;
    *(_WORD *)(v19 + 28) = 0;
    *(unsigned char *)(v19 + 44) = 0;
    *(void *)(v19 + 32) = 0;
    *(_DWORD *)(v19 + 39) = 0;
    *(void *)(v19 + 16) = v13;
    RERetain();
    REAssetSetSwiftObject();
    *(_DWORD *)(v19 + 24) = a1;
    *(_WORD *)(v19 + 28) = WORD2(a1);
    *(float *)(v19 + 32) = a4;
    *(float *)(v19 + 36) = a5;
    *(unsigned char *)(v19 + 40) = v18;
    *(unsigned char *)(v19 + 41) = v17;
    *(unsigned char *)(v19 + 42) = v16;
    *(unsigned char *)(v19 + 44) = a3 & 1;
    RERelease();
    return v19;
  }
  return result;
}

uint64_t specialized PrimitiveComponentType.init(options:splitMeshes:)(int a1, unsigned int a2, char a3, float a4, float a5)
{
  uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v21);
  uint64_t v11 = v22;
  uint64_t v12 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  uint64_t v13 = specialized static PrimitiveComponentType.makeCoreAsset(options:splitMeshes:)();
  id v14 = (id)REAssetGetSwiftObject();
  uint64_t result = swift_unknownObjectRelease();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    int v16 = HIBYTE(a2) & 1;
    int v17 = HIWORD(a2) & 1;
    int v18 = (a2 >> 8) & 1;
    char v19 = a2 & 1;
    REAssetHandleLoadNow();
    REAssetSetNetworkSharingMode();
    type metadata accessor for ConeMeshResource();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(unsigned char *)(v20 + 40) = 0;
    *(void *)(v20 + 16) = v13;
    RERetain();
    REAssetSetSwiftObject();
    *(_DWORD *)(v20 + 24) = a1;
    *(float *)(v20 + 28) = a4;
    *(float *)(v20 + 32) = a5;
    *(unsigned char *)(v20 + 36) = v19;
    *(unsigned char *)(v20 + 37) = v18;
    *(unsigned char *)(v20 + 38) = v17;
    *(unsigned char *)(v20 + 39) = v16;
    *(unsigned char *)(v20 + 40) = a3 & 1;
    RERelease();
    return v20;
  }
  return result;
}

uint64_t PlaneMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(unsigned char *)(v2 + 52) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 38) = 0;
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t PlaneMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 48) = 0;
  *(unsigned char *)(v2 + 52) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 38) = 0;
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t PlaneMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

{
  uint64_t v0;
  uint64_t vars8;

  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }

  return swift_deallocClassInstance();
}

uint64_t SphereMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = REGeomBuildSphereDefaultOptions();
  *(_WORD *)(v2 + 24) = v3;
  *(_DWORD *)(v2 + 28) = HIDWORD(v3);
  *(unsigned char *)(v2 + 32) = v4 & 1;
  *(unsigned char *)(v2 + 33) = v5 & 1;
  *(unsigned char *)(v2 + 34) = v6 & 1;
  *(unsigned char *)(v2 + 36) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t SphereMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  uint64_t v3 = REGeomBuildSphereDefaultOptions();
  *(_WORD *)(v2 + 24) = v3;
  *(_DWORD *)(v2 + 28) = HIDWORD(v3);
  *(unsigned char *)(v2 + 32) = v4 & 1;
  *(unsigned char *)(v2 + 33) = v5 & 1;
  *(unsigned char *)(v2 + 34) = v6 & 1;
  *(unsigned char *)(v2 + 36) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t SphereMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t CapsuleMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 39) = 0;
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t CapsuleMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(unsigned char *)(v2 + 44) = 0;
  *(void *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 39) = 0;
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t CapsuleMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t ConeMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t ConeMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t ConeMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t CylinderMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildCylinderDefaultOptions();
  *(_DWORD *)(v2 + 24) = v4;
  *(void *)(v2 + 28) = v5;
  *(_DWORD *)(v2 + 36) = v6;
  *(unsigned char *)(v2 + 40) = v7;
  *(unsigned char *)(v2 + 41) = v8;
  *(unsigned char *)(v2 + 42) = v9;
  *(unsigned char *)(v2 + 43) = v10;
  *(unsigned char *)(v2 + 44) = v11;
  *(unsigned char *)(v2 + 48) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t CylinderMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildCylinderDefaultOptions();
  *(_DWORD *)(v2 + 24) = v4;
  *(void *)(v2 + 28) = v5;
  *(_DWORD *)(v2 + 36) = v6;
  *(unsigned char *)(v2 + 40) = v7;
  *(unsigned char *)(v2 + 41) = v8;
  *(unsigned char *)(v2 + 42) = v9;
  *(unsigned char *)(v2 + 43) = v10;
  *(unsigned char *)(v2 + 44) = v11;
  *(unsigned char *)(v2 + 48) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t CylinderMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t BoxMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxDefaultOptions();
  *(void *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = v5;
  *(unsigned char *)(v2 + 48) = v6;
  *(unsigned char *)(v2 + 49) = v7;
  *(unsigned char *)(v2 + 50) = v8;
  *(unsigned char *)(v2 + 52) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BoxMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxDefaultOptions();
  *(void *)(v2 + 24) = v4;
  *(_OWORD *)(v2 + 32) = v5;
  *(unsigned char *)(v2 + 48) = v6;
  *(unsigned char *)(v2 + 49) = v7;
  *(unsigned char *)(v2 + 50) = v8;
  *(unsigned char *)(v2 + 52) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  *(void *)(v2 + 24) = v4;
  *(_WORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 36) = v6;
  *(_DWORD *)(v2 + 52) = v7;
  *(unsigned char *)(v2 + 56) = v8;
  *(unsigned char *)(v2 + 57) = v9;
  *(unsigned char *)(v2 + 58) = v10;
  *(unsigned char *)(v2 + 59) = v11;
  *(unsigned char *)(v2 + 60) = v12;
  *(unsigned char *)(v2 + 61) = v13;
  *(unsigned char *)(v2 + 62) = v14;
  *(unsigned char *)(v2 + 64) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildBoxWithRoundedCornersDefaultOptions();
  *(void *)(v2 + 24) = v4;
  *(_WORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 36) = v6;
  *(_DWORD *)(v2 + 52) = v7;
  *(unsigned char *)(v2 + 56) = v8;
  *(unsigned char *)(v2 + 57) = v9;
  *(unsigned char *)(v2 + 58) = v10;
  *(unsigned char *)(v2 + 59) = v11;
  *(unsigned char *)(v2 + 60) = v12;
  *(unsigned char *)(v2 + 61) = v13;
  *(unsigned char *)(v2 + 62) = v14;
  *(unsigned char *)(v2 + 64) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v2;
}

uint64_t BoxWithRoundedCornersMeshResource.__deallocating_deinit()
{
  return PlaneMeshResource.__deallocating_deinit();
}

uint64_t TextMeshResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  TextMeshResource.init(_:)(a1);
  return v2;
}

uint64_t TextMeshResource.init(_:)(uint64_t a1)
{
  swift_retain();
  REGeomBuildExtrudedTextDefaultOptions();
  *(unsigned char *)(v1 + 24) = v4;
  *(void *)(v1 + 28) = v5;
  *(void *)(v1 + 40) = v6;
  *(void *)(v1 + 48) = v7;
  *(_WORD *)(v1 + 56) = v8;
  *(unsigned char *)(v1 + 58) = v9;
  *(unsigned char *)(v1 + 59) = v10;
  *(unsigned char *)(v1 + 60) = v11;
  *(unsigned char *)(v1 + 61) = v12;
  *(unsigned char *)(v1 + 62) = v13;
  *(void *)(v1 + 64) = 0xD000000000000013;
  *(void *)(v1 + 72) = 0x800000022835F7D0;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(unsigned char *)(v1 + 96) = 0;
  swift_release();
  *(void *)(v1 + 16) = a1;
  if (a1)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  return v1;
}

uint64_t TextMeshResource.__allocating_init(coreAsset:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_retain();
  REGeomBuildExtrudedTextDefaultOptions();
  *(unsigned char *)(v2 + 24) = v4;
  *(void *)(v2 + 28) = v5;
  *(void *)(v2 + 40) = v6;
  *(void *)(v2 + 48) = v7;
  *(_WORD *)(v2 + 56) = v8;
  *(unsigned char *)(v2 + 58) = v9;
  *(unsigned char *)(v2 + 59) = v10;
  *(unsigned char *)(v2 + 60) = v11;
  *(unsigned char *)(v2 + 61) = v12;
  *(unsigned char *)(v2 + 62) = v13;
  *(void *)(v2 + 64) = 0xD000000000000013;
  *(void *)(v2 + 72) = 0x800000022835F7D0;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0xE000000000000000;
  *(unsigned char *)(v2 + 96) = 0;
  swift_release();
  *(void *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

CFStringRef static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)(uint64_t a1, uint64_t a2, const __CTFont *a3, char a4, unsigned __int8 a5, char a6, float a7, double a8, double a9, double a10, double a11)
{
  REGeomBuildExtrudedTextDefaultOptions();
  char v20 = v54;
  char v21 = v55;
  char v22 = v56;
  char v23 = v57;
  char v44 = v58;
  double Size = CTFontGetSize(a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E350;
  float v26 = a8;
  float v27 = a9;
  *(float *)(inited + 32) = v26;
  *(float *)(inited + 36) = v27;
  specialized SIMD.init<A>(_:)(inited);
  uint64_t v29 = v28;
  swift_setDeallocating();
  uint64_t v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_22831E350;
  float v31 = a10;
  float v32 = a11;
  *(float *)(v30 + 32) = v31;
  *(float *)(v30 + 36) = v32;
  specialized SIMD.init<A>(_:)(v30);
  uint64_t v34 = v33;
  swift_setDeallocating();
  CFStringRef result = CTFontCopyName(a3, (CFStringRef)*MEMORY[0x263F03AB0]);
  if (result)
  {
    int v36 = (__CFString *)result;
    if ((a4 & 0xFC) != 0) {
      char v37 = 4;
    }
    else {
      char v37 = a4;
    }
    if (a5 >= 6u) {
      char v38 = 4;
    }
    else {
      char v38 = a5;
    }
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v42 = v41;

    REGeomBuildExtrudedTextDefaultOptions();
    v47[0] = a6;
    float v39 = Size;
    float v48 = v39;
    float v49 = a7;
    uint64_t v50 = v29;
    uint64_t v51 = v34;
    char v52 = v38;
    char v53 = v37;
    char v54 = v20;
    char v55 = v21;
    char v56 = v22;
    char v57 = v23;
    char v58 = v44;
    uint64_t v59 = v40;
    uint64_t v60 = v42;
    uint64_t v61 = a1;
    uint64_t v62 = a2;
    swift_bridgeObjectRetain();
    uint64_t v43 = specialized PrimitiveComponentType.init(options:splitMeshes:)((uint64_t)v47, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (CFStringRef)v43;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TextMeshResource.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t TextMeshResource.deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextMeshResource.__deallocating_deinit()
{
  if (*(void *)(v0 + 16))
  {
    REAssetSetSwiftObject();
    RERelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t __MeshCompileOptions.init()()
{
  *(void *)(v0 + 16) = REMeshCompileOptionsCreate();
  return v0;
}

uint64_t __MeshCompileOptions.deinit()
{
  RERelease();
  return v0;
}

uint64_t __MeshCompileOptions.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.getter()
{
  return REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.setter(char a1)
{
  return MEMORY[0x270F1EE00](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
  return __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify;
}

uint64_t __MeshCompileOptions.generateVertexFaceAdjacencyAttributes.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE00](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.reorderVertexCaching.getter()
{
  return REMeshCompileOptionsGetReorderVertexCaching();
}

uint64_t __MeshCompileOptions.reorderVertexCaching.setter(char a1)
{
  return MEMORY[0x270F1EE20](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.reorderVertexCaching.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetReorderVertexCaching();
  return __MeshCompileOptions.reorderVertexCaching.modify;
}

uint64_t __MeshCompileOptions.reorderVertexCaching.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE20](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.repairTangents.getter()
{
  return REMeshCompileOptionsGetRepairTangents();
}

uint64_t __MeshCompileOptions.repairTangents.setter(char a1)
{
  return MEMORY[0x270F1EE28](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.repairTangents.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetRepairTangents();
  return __MeshCompileOptions.repairTangents.modify;
}

uint64_t __MeshCompileOptions.repairTangents.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE28](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.getter()
{
  return REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.setter(char a1)
{
  return MEMORY[0x270F1EE08](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.mergeVerticesIfPolygonSoup.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
  return __MeshCompileOptions.mergeVerticesIfPolygonSoup.modify;
}

uint64_t __MeshCompileOptions.mergeVerticesIfPolygonSoup.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE08](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.getter()
{
  return REMeshCompileOptionsGetPreserveSharpFeatures();
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.setter(char a1)
{
  return MEMORY[0x270F1EE10](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.preserveSharpFeatures.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetPreserveSharpFeatures();
  return __MeshCompileOptions.preserveSharpFeatures.modify;
}

uint64_t __MeshCompileOptions.preserveSharpFeatures.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE10](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.getter()
{
  return REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.setter(char a1)
{
  return MEMORY[0x270F1EE18](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.preserveSubdivisonSurfaceData.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
  return __MeshCompileOptions.preserveSubdivisonSurfaceData.modify;
}

uint64_t __MeshCompileOptions.preserveSubdivisonSurfaceData.modify(uint64_t a1)
{
  return MEMORY[0x270F1EE18](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.getter()
{
  return REMeshCompileOptionsGetGenerateDecimatedMesh();
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.setter(char a1)
{
  return MEMORY[0x270F1EDF8](*(void *)(v1 + 16), a1 & 1);
}

uint64_t (*__MeshCompileOptions.generateDecimatedMesh.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = REMeshCompileOptionsGetGenerateDecimatedMesh();
  return __MeshCompileOptions.generateDecimatedMesh.modify;
}

uint64_t __MeshCompileOptions.generateDecimatedMesh.modify(uint64_t a1)
{
  return MEMORY[0x270F1EDF8](*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

BOOL static __MeshCompileOptions.AttributeCompressionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void __MeshCompileOptions.AttributeCompressionType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int __MeshCompileOptions.AttributeCompressionType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t __MeshCompileOptions.subscript.getter@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  int AttributeCompressionType = REMeshCompileOptionsGetAttributeCompressionType();
  uint64_t result = swift_release();
  if (AttributeCompressionType) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 3;
  }
  *a1 = v4;
  return result;
}

uint64_t __MeshCompileOptions.subscript.setter(void *a1)
{
  if (*a1 == 3)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMeshCompileOptionsClearAttributeCompressionType();
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REMeshCompileOptionsSetAttributeCompressionType();
  }

  return swift_release();
}

void (*__MeshCompileOptions.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[8] = 0;
  *((unsigned char *)v7 + 36) = 0;
  *((void *)v7 + 1) = a2;
  *((void *)v7 + 2) = a3;
  *((void *)v7 + 3) = *(void *)(v3 + 16);
  String.utf8CString.getter();
  int AttributeCompressionType = REMeshCompileOptionsGetAttributeCompressionType();
  swift_release();
  if (AttributeCompressionType && (unint64_t v9 = *((unsigned __int8 *)v7 + 36), v9 <= 2)) {
    unint64_t v10 = v9 | ((unint64_t)v7[8] << 32);
  }
  else {
    unint64_t v10 = 3;
  }
  *(void *)uint64_t v7 = v10;
  return __MeshCompileOptions.subscript.modify;
}

void __MeshCompileOptions.subscript.modify(void **a1)
{
  Swift::UInt v1 = *a1;
  if (**a1 == 3)
  {
    String.utf8CString.getter();
    REMeshCompileOptionsClearAttributeCompressionType();
  }
  else
  {
    String.utf8CString.getter();
    REMeshCompileOptionsSetAttributeCompressionType();
  }
  swift_release();

  free(v1);
}

uint64_t static MeshResource.generateMesh(vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = *(void *)(a2 + 16);
  if (!HIDWORD(v8))
  {
    if (a1)
    {
      uint64_t v14 = v8 / a1;
      uint64_t v15 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, a1);
      uint64_t v16 = specialized static MeshResource.generateMesh(polygonCount:vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(v14, v15, a2, a3, a4, a5, a6, a7);
      swift_release();
      return v16;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void MeshResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t MeshResource.addToLoadRequest(_:)()
{
  if (*(void *)(v0 + 16)) {
    return REAssetLoadRequestAddAsset();
  }
  return result;
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance MeshResource()
{
  if (*(void *)(*(void *)v0 + 16)) {
    return REAssetLoadRequestAddAsset();
  }
  return result;
}

uint64_t MeshResource.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22831E360;
  *(void *)(v9 + 32) = 0xD000000000000015;
  *(void *)(v9 + 40) = 0x800000022835F7F0;
  uint64_t v10 = *(void *)(v1 + 16);
  if (!v10) {
    goto LABEL_5;
  }
  swift_retain();
  MaxMaterialIndedouble x = REMeshAssetGetMaxMaterialIndex();
  uint64_t v12 = MaxMaterialIndex + 1;
  if (__OFADD__(MaxMaterialIndex, 1))
  {
    __break(1u);
LABEL_5:
    swift_retain();
    uint64_t v12 = 0;
  }
  uint64_t v13 = MEMORY[0x263F8D6C8];
  *(void *)(v9 + 48) = v12;
  *(void *)(v9 + 72) = v13;
  *(void *)(v9 + 80) = 0x73746E65746E6F63;
  *(void *)(v9 + 88) = 0xE800000000000000;
  *(void *)(v9 + 120) = &type metadata for MeshResource.Contents;
  uint64_t v14 = swift_allocObject();
  *(void *)(v9 + 96) = v14;
  MeshResource.Contents.init(_:)(v10, (uint64_t *)(v14 + 16));
  *(void *)(v9 + 128) = 0x73646E756F62;
  *(void *)(v9 + 136) = 0xE600000000000000;
  if (v10)
  {
    REEntityComputeLocalBoundingBox();
    long long v21 = v15;
    long long v22 = v16;
  }
  else
  {
    long long v22 = xmmword_22831FD20;
    long long v21 = xmmword_22831FD10;
  }
  *(void *)(v9 + 168) = &type metadata for BoundingBox;
  uint64_t v17 = swift_allocObject();
  *(void *)(v9 + 144) = v17;
  long long v18 = v22;
  *(_OWORD *)(v17 + 16) = v21;
  *(_OWORD *)(v17 + 32) = v18;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  type metadata accessor for MeshResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance MeshResource()
{
  return MeshResource.customMirror.getter();
}

uint64_t specialized closure #1 in MeshBuffer.init<A>(_:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized closure #4 in MeshBuffer.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<IndexingIterator<[SIMD3<Float>]>>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = 0;
  swift_bridgeObjectRetain();
  return 1;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, void *a6)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>, (uint64_t)&unk_26DCBB840);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt8>, (uint64_t)&unk_26DCBB9A8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt16>, (uint64_t)&unk_26DCBB9D0);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<UInt32>, (uint64_t)&unk_26DCBB9F8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int8>, (uint64_t)&unk_26DCBBA20);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int16>, (uint64_t)&unk_26DCBBA48);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Int32>, (uint64_t)&unk_26DCBBA70);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Float>, (uint64_t)&unk_26DCBBA98);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<Double>, (uint64_t)&unk_26DCBBAC0);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD2<Float>>, (uint64_t)&unk_26DCBBAE8);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD4<Float>>, (uint64_t)&unk_26DCBBB38);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<MeshJointInfluence>, (uint64_t)&unk_26DCBBB60);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, a5, a6, &demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<FloatVector3Packed>, (uint64_t)&unk_26DCBBB10);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, __int16 a4, char a5, void *a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a7);
  uint64_t v45 = v16;
  uint64_t v46 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  uint64_t v43 = a8;
  uint64_t v17 = (_OWORD *)swift_allocObject();
  *(void *)&long long v44 = v17;
  long long v18 = a1[5];
  v17[5] = a1[4];
  v17[6] = v18;
  v17[7] = a1[6];
  *(_OWORD *)((char *)v17 + 121) = *(_OWORD *)((char *)a1 + 105);
  long long v19 = a1[1];
  v17[1] = *a1;
  v17[2] = v19;
  long long v20 = a1[3];
  v17[3] = a1[2];
  unsigned char v17[4] = v20;
  __int16 v21 = a4 & 0x101;
  long long v22 = (void *)*a6;
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v21);
  uint64_t v25 = v22[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v28 = v23;
  uint64_t v29 = v22[3];
  if (v29 >= v27 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v30 = (void *)*a6;
    if (v28)
    {
LABEL_8:
      uint64_t v31 = v30[7] + 40 * v24;
      __swift_destroy_boxed_opaque_existential_1(v31);
      return outlined init with take of BindableDataInternal(&v44, v31);
    }
    goto LABEL_11;
  }
  if (v29 >= v27 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, a5 & 1);
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, v21);
  if ((v28 & 1) != (v34 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v24 = v33;
  uint64_t v30 = (void *)*a6;
  if (v28) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v35 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v44, v16);
  __n128 v36 = MEMORY[0x270FA5388](v35);
  char v38 = (_OWORD *)((char *)&v43 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *, __n128))(v39 + 16))(v38, v36);
  long long v40 = v38[5];
  unsigned char v47[4] = v38[4];
  v47[5] = v40;
  v48[0] = v38[6];
  *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v38 + 105);
  long long v41 = v38[1];
  v47[0] = *v38;
  v47[1] = v41;
  long long v42 = v38[3];
  v47[2] = v38[2];
  v47[3] = v42;
  specialized _NativeDictionary._insert(at:key:value:)(v24, a2, a3, v21, v47, v30, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, _OWORD *a5, void *a6, uint64_t *a7)
{
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(a7);
  unint64_t v24 = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  uint64_t v13 = (_OWORD *)swift_allocObject();
  *(void *)&long long v22 = v13;
  long long v14 = a5[5];
  v13[5] = a5[4];
  v13[6] = v14;
  v13[7] = a5[6];
  *(_OWORD *)((char *)v13 + 121) = *(_OWORD *)((char *)a5 + 105);
  long long v15 = a5[1];
  v13[1] = *a5;
  v13[2] = v15;
  long long v16 = a5[3];
  v13[3] = a5[2];
  v13[4] = v16;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v17 = a6[6] + 24 * a1;
  *(void *)uint64_t v17 = a2;
  *(void *)(v17 + 8) = a3;
  *(unsigned char *)(v17 + 16) = a4 & 1;
  *(unsigned char *)(v17 + 17) = HIBYTE(a4) & 1;
  uint64_t result = outlined init with take of BindableDataInternal(&v22, a6[7] + 40 * a1);
  uint64_t v19 = a6[2];
  BOOL v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    a6[2] = v21;
  }
  return result;
}

uint64_t specialized MeshBufferContainer.positions.setter(uint64_t a1)
{
  long long v15 = *(_OWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)a1;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v14 = *(_OWORD *)(a1 + 32);
  char v2 = *(unsigned char *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 65);
  uint64_t v4 = *(void *)(a1 + 72);
  char v5 = *(unsigned char *)(a1 + 80);
  v17[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MeshBufferDictionary.BufferEntry<SIMD3<Float>>);
  unsigned char v17[4] = &protocol witness table for MeshBufferDictionary.BufferEntry<A>;
  uint64_t v6 = swift_allocObject();
  v17[0] = v6;
  outlined retain of MeshBuffer<SIMD3<Float>>(a1);
  if (one-time initialization token for triangleIndices != -1) {
    swift_once();
  }
  BOOL v7 = static MeshBuffers.Identifier.triangleIndices == 0x6F50786574726576 && unk_2681C1CD0 == 0xEE006E6F69746973;
  if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    char v8 = 2;
  }
  else {
    char v8 = *(unsigned char *)(a1 + 80);
  }
  uint64_t v9 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 64);
  char v11 = *(unsigned char *)(a1 + 65);
  strcpy((char *)(v6 + 16), "vertexPosition");
  *(unsigned char *)(v6 + 31) = -18;
  *(_WORD *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = v9;
  *(unsigned char *)(v6 + 48) = v8;
  *(unsigned char *)(v6 + 49) = v10;
  *(unsigned char *)(v6 + 50) = v11;
  *(_OWORD *)(v6 + 56) = v16;
  *(_OWORD *)(v6 + 72) = v15;
  *(_OWORD *)(v6 + 88) = v14;
  *(_OWORD *)(v6 + 104) = v13;
  *(unsigned char *)(v6 + 120) = v2;
  *(unsigned char *)(v6 + 121) = v3 & 1;
  *(void *)(v6 + 128) = v4;
  *(unsigned char *)(v6 + 136) = v5;
  return specialized Dictionary.subscript.setter((uint64_t)v17, 0x6F50786574726576, 0xEE006E6F69746973, 0);
}

uint64_t specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)(char a1, float a2, float a3, float a4, float a5)
{
  float v10 = fminf(a5, fminf(a2, fminf(a3, fminf(a2, a4))) * 0.5);
  REGeomBuildBoxDefaultOptions();
  __int16 v11 = WORD3(v15);
  if (a5 > 0.0) {
    __int16 v11 = 16;
  }
  WORD3(v15) = v11;
  *((void *)&v15 + 1) = __PAIR64__(LODWORD(a2), LODWORD(v10));
  float v16 = a3;
  float v17 = a4;
  char v18 = a1 ^ 1;
  uint64_t v12 = specialized PrimitiveComponentType.init(options:splitMeshes:)(&v15, a1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for MeshResource();
  *(void *)(inited + 64) = &protocol witness table for MeshResource;
  *(void *)(inited + 32) = v12;
  swift_retain();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return v12;
}

{
  uint64_t v5;

  *(unsigned char *)(v5 + 92) = a1;
  *(float *)(v5 + 84) = a4;
  *(float *)(v5 + 88) = a5;
  *(float *)(v5 + 76) = a2;
  *(float *)(v5 + 80) = a3;
  return MEMORY[0x270FA2498](specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:), 0, 0);
}

uint64_t specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:)()
{
  char v1 = *(unsigned char *)(v0 + 92);
  float v3 = *(float *)(v0 + 84);
  float v2 = *(float *)(v0 + 88);
  float v5 = *(float *)(v0 + 76);
  float v4 = *(float *)(v0 + 80);
  float v6 = fminf(v2, fminf(v5, fminf(v4, fminf(v5, v3))) * 0.5);
  REGeomBuildBoxDefaultOptions();
  __int16 v7 = v13;
  if (v2 > 0.0) {
    __int16 v7 = 16;
  }
  *(_DWORD *)(v0 + 48) = v11;
  *(_WORD *)(v0 + 52) = v12;
  *(_WORD *)(v0 + 54) = v7;
  *(float *)(v0 + 56) = v6;
  *(float *)(v0 + 60) = v5;
  *(float *)(v0 + 64) = v4;
  *(float *)(v0 + 68) = v3;
  *(unsigned char *)(v0 + 72) = v14;
  *(unsigned char *)(v0 + 73) = v15;
  *(unsigned char *)(v0 + 74) = (v1 & 1) == 0;
  type metadata accessor for MainActor();
  *(void *)(v0 + 16) = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](specialized static MeshResource.generateBox(width:height:depth:cornerRadius:splitFaces:), v9, v8);
}

{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  char v1 = *(unsigned char *)(v0 + 92);
  swift_release();
  *(void *)(v0 + 24) = specialized PrimitiveComponentType.init(options:splitMeshes:)((_OWORD *)(v0 + 48), v1);
  float v4 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  float v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *float v2 = v0;
  v2[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v4();
}

uint64_t specialized static MeshResource.generateMesh(polygonCount:vertexCountPerPolygon:vertexIndicesPerPolygon:vertexPositions:vertexUVs:vertexNormals:vertexTangents:vertexBitangents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (a5) {
    uint64_t v8 = a5;
  }
  else {
    uint64_t v8 = a4;
  }
  unint64_t v9 = *(void *)(v8 + 16);
  if (v9 != *(void *)(a4 + 16))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a6 && *(void *)(a6 + 16) != v9) {
    goto LABEL_20;
  }
  if (a7 && *(void *)(a7 + 16) != v9) {
    goto LABEL_21;
  }
  if (a8 && *(void *)(a8 + 16) != v9) {
LABEL_22:
  }
    __break(1u);
  if (HIDWORD(v9))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (REGeomMeshCreateFromCoreAttributes())
  {
    uint64_t v10 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v10, (uint64_t)v17);
    uint64_t v11 = v18;
    uint64_t v12 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    uint64_t v13 = REAssetManagerMeshMemoryAssetCreate();
    if (v13)
    {
      uint64_t v14 = v13;
      if ((id)REAssetGetSwiftObject())
      {
        type metadata accessor for MeshResource();
        uint64_t v15 = swift_dynamicCastClass();
        if (v15)
        {
LABEL_18:
          RERelease();
          RERelease();
          return v15;
        }
        swift_unknownObjectRelease();
      }
      type metadata accessor for MeshResource();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v14;
      RERetain();
      REAssetSetSwiftObject();
      goto LABEL_18;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_2282A3FD8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_2282A4038()
{
  return MEMORY[0x270FA0238](v0, 48, 15);
}

unint64_t lazy protocol witness table accessor for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType()
{
  unint64_t result = lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType;
  if (!lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MeshCompileOptions.AttributeCompressionType and conformance __MeshCompileOptions.AttributeCompressionType);
  }
  return result;
}

uint64_t sub_2282A40A0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetGenerateVertexFaceAdjacencyAttributes();
  *a1 = result;
  return result;
}

uint64_t sub_2282A40D0(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE00](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A40E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetReorderVertexCaching();
  *a1 = result;
  return result;
}

uint64_t sub_2282A4114(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE20](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A4128@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetRepairTangents();
  *a1 = result;
  return result;
}

uint64_t sub_2282A4158(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE28](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A416C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetMergeVerticesIfPolygonSoup();
  *a1 = result;
  return result;
}

uint64_t sub_2282A419C(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE08](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A41B0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetPreserveSharpFeatures();
  *a1 = result;
  return result;
}

uint64_t sub_2282A41E0(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE10](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A41F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetPreserveSubdivisonSurfaceData();
  *a1 = result;
  return result;
}

uint64_t sub_2282A4224(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EE18](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A4238@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REMeshCompileOptionsGetGenerateDecimatedMesh();
  *a1 = result;
  return result;
}

uint64_t sub_2282A4268(unsigned __int8 *a1, uint64_t a2)
{
  return MEMORY[0x270F1EDF8](*(void *)(*(void *)a2 + 16), *a1);
}

uint64_t sub_2282A427C@<X0>(void *a1@<X8>)
{
  uint64_t result = __MeshCompileOptions.subscript.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_2282A42BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  return __MeshCompileOptions.subscript.setter(&v2);
}

uint64_t sub_2282A4310()
{
  return 0;
}

uint64_t method lookup function for MeshResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MeshResource);
}

uint64_t dispatch thunk of MeshResource.coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of MeshResource.expectedMaterialCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of MeshResource.bounds.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of MeshResource.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for PlaneMeshResource()
{
  return self;
}

uint64_t type metadata accessor for SphereMeshResource()
{
  return self;
}

uint64_t type metadata accessor for CapsuleMeshResource()
{
  return self;
}

uint64_t type metadata accessor for ConeMeshResource()
{
  return self;
}

uint64_t type metadata accessor for CylinderMeshResource()
{
  return self;
}

uint64_t type metadata accessor for BoxMeshResource()
{
  return self;
}

uint64_t type metadata accessor for BoxWithRoundedCornersMeshResource()
{
  return self;
}

uint64_t type metadata accessor for TextMeshResource()
{
  return self;
}

uint64_t type metadata accessor for __MeshCompileOptions()
{
  return self;
}

uint64_t method lookup function for __MeshCompileOptions(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __MeshCompileOptions);
}

uint64_t dispatch thunk of __MeshCompileOptions.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unsigned char *storeEnumTagSinglePayload for __MeshCompileOptions.AttributeCompressionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282A45F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __MeshCompileOptions.AttributeCompressionType()
{
  return &type metadata for __MeshCompileOptions.AttributeCompressionType;
}

uint64_t destroy for TextMeshResource.Options()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for TextMeshResource.Options(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(unsigned char *)(a1 + 37) = *(unsigned char *)(a2 + 37);
  *(unsigned char *)(a1 + 38) = *(unsigned char *)(a2 + 38);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextMeshResource.Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextMeshResource.Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextMeshResource.Options()
{
  return &type metadata for TextMeshResource.Options;
}

uint64_t outlined retain of TextMeshResource.Options(uint64_t a1)
{
  return a1;
}

uint64_t sub_2282A4920()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

double CollisionComponent.init(shapes:mode:filter:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a2;
  *(_DWORD *)(a4 + 12) = 0;
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = v4;
  double result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

void CollisionComponent.collisionOptions.getter(void *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 12) & 1 | (2 * ((*(_DWORD *)(v1 + 12) >> 2) & 1u));
}

double CollisionComponent.init(shapes:isStatic:filter:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 12) = a2 & 1;
  double result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

BOOL static CollisionComponent.Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void CollisionComponent.Mode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CollisionComponent.Mode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CollisionComponent.InteractionType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionComponent.InteractionType.static.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionComponent.InteractionType.trigger.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CollisionComponent.InteractionType.reportCollisionContactsFull.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CollisionComponent.InteractionType.solveContacts.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

uint64_t CollisionComponent.InteractionType.rawValue.getter()
{
  return *v0;
}

uint64_t *CollisionComponent.InteractionType.setOptions(options:)(uint64_t *result)
{
  uint64_t v2 = *result;
  unsigned int v3 = *v1;
  if (*result)
  {
    if (v3) {
      goto LABEL_7;
    }
    v3 |= 1u;
  }
  else
  {
    if ((v3 & 1) == 0) {
      goto LABEL_7;
    }
    v3 &= ~1u;
  }
  *Swift::UInt v1 = v3;
LABEL_7:
  if ((v2 & 2) != 0)
  {
    if ((v3 & 4) != 0) {
      return result;
    }
    unsigned int v4 = v3 | 4;
  }
  else
  {
    if ((v3 & 4) == 0) {
      return result;
    }
    unsigned int v4 = v3 & 0xFFFFFFFB;
  }
  *Swift::UInt v1 = v4;
  return result;
}

uint64_t CollisionComponent.shapes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CollisionComponent.shapes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::UInt v1 = a1;
  return result;
}

uint64_t (*CollisionComponent.shapes.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionComponent.mode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *CollisionComponent.mode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

uint64_t (*CollisionComponent.mode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CollisionComponent.interactionType.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 12);
}

_DWORD *CollisionComponent.interactionType.setter(_DWORD *result)
{
  *(_DWORD *)(v1 + 12) = *result;
  return result;
}

uint64_t (*CollisionComponent.interactionType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CollisionComponent.filter.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

double CollisionComponent.filter.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 16) = *a1;
  return result;
}

uint64_t (*CollisionComponent.filter.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CollisionComponent.init(shapes:interactionType:filter:)@<D0>(uint64_t a1@<X0>, int *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a2;
  *(void *)a4 = a1;
  *(_DWORD *)(a4 + 12) = v4;
  *(unsigned char *)(a4 + 8) = 0;
  double result = *a3;
  *(double *)(a4 + 16) = *a3;
  return result;
}

uint64_t CollisionComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = MEMORY[0x263F8EE78];
  uint64_t Shape = REColliderComponentGetShape();
  if (!Shape)
  {
LABEL_20:
    unsigned int InteractionType = REColliderComponentGetInteractionType();
    if ((InteractionType & 2) != 0) {
      char v27 = 1;
    }
    else {
      char v27 = (InteractionType >> 2) & 2;
    }
    int Group = REColliderComponentGetGroup();
    uint64_t result = REColliderComponentGetMask();
    *(void *)a1 = v32;
    *(unsigned char *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 12) = InteractionType;
    *(_DWORD *)(a1 + 16) = Group;
    *(_DWORD *)(a1 + 20) = result;
    return result;
  }
  uint64_t v3 = Shape;
  if (RECollisionShapeAssetGetType() != 7)
  {
    id v18 = (id)REAssetGetSwiftObject();
    type metadata accessor for ShapeResource();
    if (v18)
    {
      uint64_t v19 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v3;
      REPoseIdentity();
      *(_OWORD *)(v19 + 32) = v20;
      *(_OWORD *)(v19 + 48) = v21;
      RERetain();
      REAssetSetSwiftObject();
    }
    swift_retain();
    REPoseIdentity();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = *(void *)(v19 + 16);
    REPoseMultiply();
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v22 + 48) = v24;
    RERetain();
    uint64_t v25 = swift_release();
    MEMORY[0x22A688E10](v25);
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  uint64_t ChildCount = RECompoundShapeAssetGetChildCount();
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(ChildCount, 0);
  specialized Array._endMutation()();
  if (ChildCount < 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_19:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    goto LABEL_20;
  }
  if (!ChildCount) {
    goto LABEL_20;
  }
  uint64_t v5 = 0;
  while (1)
  {
    if (ChildCount == v5)
    {
      __break(1u);
      goto LABEL_25;
    }
    Childuint64_t Shape = RECompoundShapeAssetGetChildShape();
    if (!ChildShape) {
      break;
    }
    uint64_t v7 = ChildShape;
    id v8 = (id)REAssetGetSwiftObject();
    type metadata accessor for ShapeResource();
    if (v8)
    {
      uint64_t v9 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      REPoseIdentity();
      long long v11 = v10;
      HIDWORD(v11) = v30;
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      RERetain();
      REAssetSetSwiftObject();
    }
    RECompoundShapeAssetGetChildPose();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = *(void *)(v9 + 16);
    swift_retain();
    REPoseMultiply();
    long long v15 = v14;
    HIDWORD(v15) = v31;
    *(_OWORD *)(v13 + 32) = v15;
    *(_OWORD *)(v13 + 48) = v16;
    RERetain();
    uint64_t v17 = swift_release();
    MEMORY[0x22A688E10](v17);
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v5;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    if (ChildCount == v5) {
      goto LABEL_20;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static CollisionComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return CollisionComponent.init(_:)(a1);
}

uint64_t CollisionComponent.__toCore(_:)()
{
  unint64_t v1 = *v0;
  uint64_t result = specialized static ShapeResource.findShapeResource(_:)(*v0);
  if (result)
  {
LABEL_15:
    REColliderComponentSetShape();
    REColliderComponentSetGroup();
    REColliderComponentSetMask();
    REColliderComponentSetInteractionType();
    RENetworkMarkComponentDirty();
    return swift_release();
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v3 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_slowAlloc();
  if ((unint64_t)(v3 - 0x400000000000000) >> 59 != 31)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v4 = (void *)result;
  uint64_t result = swift_slowAlloc();
  uint64_t v22 = result;
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (v3)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = 0;
        uint64_t v6 = (_OWORD *)(result + 16);
        do
        {
          uint64_t v7 = *(void *)(MEMORY[0x22A689930](v5, v1) + 16);
          swift_unknownObjectRelease();
          v4[v5] = v7;
          uint64_t v8 = MEMORY[0x22A689930](v5, v1);
          long long v23 = *(_OWORD *)(v8 + 48);
          long long v24 = *(_OWORD *)(v8 + 32);
          swift_unknownObjectRelease();
          *(v6 - 1) = v24;
          *uint64_t v6 = v23;
          v6 += 2;
          ++v5;
        }
        while (v3 != v5);
      }
      else
      {
        uint64_t v9 = (uint64_t *)(v1 + 32);
        long long v10 = (_OWORD *)(result + 16);
        long long v11 = v4;
        uint64_t v12 = v3;
        do
        {
          uint64_t v13 = *v9++;
          *v11++ = *(void *)(v13 + 16);
          long long v14 = *(_OWORD *)(v13 + 48);
          *(v10 - 1) = *(_OWORD *)(v13 + 32);
          *long long v10 = v14;
          v10 += 2;
          --v12;
        }
        while (v12);
      }
    }
    uint64_t v15 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v15, (uint64_t)v25);
    uint64_t v16 = v26;
    uint64_t v17 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    uint64_t Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v19 + 32) = v20;
    *(_OWORD *)(v19 + 48) = v21;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x22A696500](v22, -1, -1);
    MEMORY[0x22A696500](v4, -1, -1);
    goto LABEL_15;
  }
LABEL_19:
  __break(1u);
  return result;
}

void static CollisionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 57;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance CollisionComponent@<X0>(uint64_t a1@<X8>)
{
  return CollisionComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance CollisionComponent(_DWORD *a1@<X8>)
{
  *a1 = 57;
}

uint64_t CollisionComponent.isStatic.getter()
{
  return *(_DWORD *)(v0 + 12) & 1;
}

uint64_t CollisionComponent.isStatic.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(v1 + 12);
  if (result)
  {
    if (v2) {
      return result;
    }
    unsigned int v3 = v2 | 1;
  }
  else
  {
    if ((v2 & 1) == 0) {
      return result;
    }
    unsigned int v3 = v2 & 0xFFFFFFFE;
  }
  *(_DWORD *)(v1 + 12) = v3;
  return result;
}

unsigned char *(*CollisionComponent.isStatic.modify(uint64_t a1))(unsigned char *result, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 12) & 1;
  return CollisionComponent.isStatic.modify;
}

unsigned char *CollisionComponent.isStatic.modify(unsigned char *result, char a2)
{
  uint64_t v2 = *(void *)result;
  int v3 = *(_DWORD *)(*(void *)result + 12);
  if (a2)
  {
    if (result[8])
    {
      if (v3) {
        return result;
      }
LABEL_7:
      *(_DWORD *)(v2 + 12) = v3 | 1;
      return result;
    }
    goto LABEL_8;
  }
  if (!result[8])
  {
LABEL_8:
    if (v3) {
      *(_DWORD *)(v2 + 12) = v3 & 0xFFFFFFFE;
    }
    return result;
  }
  if ((v3 & 1) == 0) {
    goto LABEL_7;
  }
  return result;
}

void static CollisionComponent.CollisionOptions.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t CollisionComponent.CollisionOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static CollisionComponent.CollisionOptions.static.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static CollisionComponent.CollisionOptions.fullContactInformation.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t CollisionComponent.CollisionOptions.rawValue.getter()
{
  return *(void *)v0;
}

double CollisionComponent.init(shapes:mode:collisionOptions:filter:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  char v7 = *a2;
  *(void *)(a5 + 12) = 0x100000000;
  uint64_t v8 = *a3;
  *(_DWORD *)(a5 + 20) = -1;
  *(void *)a5 = a1;
  *(unsigned char *)(a5 + 8) = v7;
  uint64_t v10 = v8;
  CollisionComponent.InteractionType.setOptions(options:)(&v10);
  double result = *a4;
  *(double *)(a5 + 16) = *a4;
  return result;
}

uint64_t *CollisionComponent.collisionOptions.setter(uint64_t *result)
{
  uint64_t v2 = *result;
  int v3 = *(_DWORD *)(v1 + 12);
  if (*result)
  {
    if (v3) {
      goto LABEL_7;
    }
    v3 |= 1u;
  }
  else
  {
    if ((v3 & 1) == 0) {
      goto LABEL_7;
    }
    v3 &= ~1u;
  }
  *(_DWORD *)(v1 + 12) = v3;
LABEL_7:
  if ((v2 & 2) != 0)
  {
    if ((v3 & 4) != 0) {
      return result;
    }
    unsigned int v4 = v3 | 4;
  }
  else
  {
    if ((v3 & 4) == 0) {
      return result;
    }
    unsigned int v4 = v3 & 0xFFFFFFFB;
  }
  *(_DWORD *)(v1 + 12) = v4;
  return result;
}

uint64_t *(*CollisionComponent.collisionOptions.modify(void *a1))(uint64_t *a1)
{
  *a1 = *(_DWORD *)(v1 + 12) & 1 | (2 * ((*(_DWORD *)(v1 + 12) >> 2) & 1u));
  a1[1] = v1;
  return CollisionComponent.collisionOptions.modify;
}

uint64_t *CollisionComponent.collisionOptions.modify(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return CollisionComponent.InteractionType.setOptions(options:)(&v2);
}

uint64_t CollisionComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v18 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  unsigned int v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  char v9 = *((unsigned char *)v1 + 8);
  unsigned int v11 = *((_DWORD *)v1 + 3);
  int v10 = *((_DWORD *)v1 + 4);
  int v12 = *((_DWORD *)v1 + 5);
  uint64_t v20 = v8;
  char v21 = v9;
  unsigned int v22 = v11;
  int v23 = v10;
  int v24 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_22831E320;
  *(void *)(v13 + 32) = 0x736570616873;
  *(void *)(v13 + 40) = 0xE600000000000000;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ShapeResource]);
  *(void *)(v13 + 48) = v8;
  *(void *)(v13 + 72) = v14;
  *(void *)(v13 + 80) = 1701080941;
  *(void *)(v13 + 88) = 0xE400000000000000;
  *(unsigned char *)(v13 + 96) = v9;
  *(void *)(v13 + 120) = &type metadata for CollisionComponent.Mode;
  *(void *)(v13 + 128) = 0x7265746C6966;
  *(void *)(v13 + 136) = 0xE600000000000000;
  *(_DWORD *)(v13 + 144) = v10;
  *(_DWORD *)(v13 + 148) = v12;
  *(void *)(v13 + 168) = &type metadata for CollisionFilter;
  *(void *)(v13 + 176) = 0xD000000000000010;
  *(void *)(v13 + 184) = 0x800000022835F2A0;
  *(void *)(v13 + 192) = v11 & 1 | (2 * ((v11 >> 2) & 1));
  *(void *)(v13 + 216) = &type metadata for CollisionComponent.CollisionOptions;
  *(void *)(v13 + 224) = 0x6369746174537369;
  *(void *)(v13 + 232) = 0xE800000000000000;
  *(void *)(v13 + 264) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v13 + 240) = v11 & 1;
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v18);
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static CollisionComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 20);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 12);
  int v8 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  if ((specialized static Array<A>.== infix(_:_:)(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  BOOL v11 = v4 == v8 && v5 == v9;
  return v2 == v6 && v3 == v7 && v11;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.Mode and conformance CollisionComponent.Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode;
  if (!lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.Mode and conformance CollisionComponent.Mode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType;
  if (!lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.InteractionType and conformance CollisionComponent.InteractionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions;
  if (!lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollisionComponent.CollisionOptions and conformance CollisionComponent.CollisionOptions);
  }
  return result;
}

uint64_t sub_2282A5B6C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 12) & 1;
  return result;
}

unsigned char *sub_2282A5B7C(unsigned char *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (*result == 1)
  {
    if (v2) {
      return result;
    }
    unsigned int v3 = v2 | 1;
  }
  else
  {
    if ((v2 & 1) == 0) {
      return result;
    }
    unsigned int v3 = v2 & 0xFFFFFFFE;
  }
  *(_DWORD *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_2282A5BA8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 12) & 1 | (2 * ((*(_DWORD *)(result + 12) >> 2) & 1u));
  return result;
}

uint64_t *sub_2282A5BC0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return CollisionComponent.InteractionType.setOptions(options:)(&v2);
}

uint64_t initializeBufferWithCopyOfBuffer for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for CollisionComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

ValueMetadata *type metadata accessor for CollisionComponent()
{
  return &type metadata for CollisionComponent;
}

unsigned char *storeEnumTagSinglePayload for CollisionComponent.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282A5DD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionComponent.Mode()
{
  return &type metadata for CollisionComponent.Mode;
}

ValueMetadata *type metadata accessor for CollisionComponent.InteractionType()
{
  return &type metadata for CollisionComponent.InteractionType;
}

ValueMetadata *type metadata accessor for CollisionComponent.CollisionOptions()
{
  return &type metadata for CollisionComponent.CollisionOptions;
}

uint64_t one-time initialization function for resourceCoreLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, resourceCoreLogger);
  __swift_project_value_buffer(v0, (uint64_t)resourceCoreLogger);
  return Logger.init(subsystem:category:)();
}

void one-time initialization function for sharedManager()
{
  type metadata accessor for InteractionNotificationsManager();
  uint64_t v0 = swift_allocObject();
  id v1 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_notificationTriggerDidPostWithNotification_, static __RKCustomTriggerNotification.name, 0);

  static InteractionNotificationsManager.sharedManager = v0;
}

uint64_t InteractionNotificationsManager.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, static __RKCustomTriggerNotification.name, 0);

  return swift_deallocClassInstance();
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [String : AnimationResource].Iterator._Variant();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [String : AnimationResource].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    long long v27 = v24;
    outlined init with take of Any(v26, v28);
    long long v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      int v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int v8 = v16;
      int v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      unint64_t result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for InteractionNotificationsManager()
{
  return self;
}

uint64_t specialized InteractionNotificationsManager.notificationTriggerDidPost(notification:)()
{
  uint64_t result = Notification.userInfo.getter();
  if (result)
  {
    unint64_t v1 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(result);
    uint64_t result = swift_bridgeObjectRelease();
    if (v1)
    {
      if (*(void *)(v1 + 16))
      {
        unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000024, 0x8000000228350CD0);
        if (v3)
        {
          outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v17);
          type metadata accessor for Scene();
          if (swift_dynamicCast())
          {
            if (*(void *)(v1 + 16)
              && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000029, 0x8000000228350D00),
                  (v5 & 1) != 0)
              && (outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v4, (uint64_t)&v17),
                  (swift_dynamicCast() & 1) != 0))
            {
              if (*(void *)(v1 + 16)
                && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000028, 0x800000022835FAD0),
                    (v7 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v6, (uint64_t)&v17);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity]);
                if (swift_dynamicCast()) {
                  uint64_t v8 = v15;
                }
                else {
                  uint64_t v8 = 0;
                }
              }
              else
              {
                uint64_t v8 = 0;
              }
              if (*(void *)(v1 + 16)
                && (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002ELL, 0x8000000228350D60),
                    (v10 & 1) != 0))
              {
                outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v9, (uint64_t)&v17);
              }
              else
              {
                long long v17 = 0u;
                long long v18 = 0u;
              }
              swift_bridgeObjectRelease();
              if (*((void *)&v18 + 1))
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
                if (swift_dynamicCast()) {
                  uint64_t v11 = v15;
                }
                else {
                  uint64_t v11 = 0;
                }
              }
              else
              {
                outlined destroy of BodyTrackingComponent?((uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
                uint64_t v11 = 0;
              }
              Scene.__interactionService.getter();
              uint64_t v13 = v12;
              uint64_t ObjectType = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, v16, v11, v8, ObjectType, v13);
              swift_release();
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
            }
          }
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t AnchoringComponent.Target.Alignment.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t AnchoringComponent.Target.Classification.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t AnchoringComponent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = (int *)type metadata accessor for AnchoringComponent(0);
  *(void *)(a2 + v4[5]) = 1;
  *(void *)(a2 + v4[6]) = 1;
  uint64_t v5 = a2 + v4[7];
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(unsigned char *)(v5 + 64) = 1;
  return _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(a1, a2, type metadata accessor for AnchoringComponent.Target);
}

{
  id v4;
  id v5;
  int *v6;
  uint64_t v7;
  unsigned char v9[32];
  id v10;

  outlined init with copy of Any(a1, (uint64_t)v9);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  swift_dynamicCast();
  unint64_t v4 = v10;
  uint64_t v5 = objc_msgSend(v10, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for AnchoringComponent.Target(0);
  swift_storeEnumTagMultiPayload();
  unint64_t v6 = (int *)type metadata accessor for AnchoringComponent(0);
  *(void *)(a2 + v6[5]) = 1;
  *(void *)(a2 + v6[6]) = 1;
  char v7 = a2 + v6[7];
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)char v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(unsigned char *)(v7 + 64) = 1;
  return outlined destroy of __AnyARKitObject(a1);
}

uint64_t type metadata accessor for AnchoringComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent);
}

uint64_t type metadata accessor for AnchoringComponent.Target(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.Target);
}

void static AnchoringComponent.Target.Classification.any.getter(void *a1@<X8>)
{
  *a1 = -1;
}

uint64_t AnchoringComponent.init(_:trackingMode:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  unint64_t v6 = (int *)type metadata accessor for AnchoringComponent(0);
  uint64_t v7 = v6[5];
  *(void *)(a3 + v7) = 1;
  uint64_t v8 = v6[6];
  *(void *)(a3 + v8) = 1;
  uint64_t v9 = a3 + v6[7];
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(unsigned char *)(v9 + 64) = 1;
  uint64_t result = _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(a1, a3, type metadata accessor for AnchoringComponent.Target);
  *(void *)(a3 + v7) = v5;
  *(void *)(a3 + v8) = 1;
  return result;
}

uint64_t AnchoringComponent.init(_:trackingMode:physicsSimulation:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a3;
  uint64_t v8 = (int *)type metadata accessor for AnchoringComponent(0);
  uint64_t v9 = v8[5];
  *(void *)(a4 + v9) = 1;
  uint64_t v10 = v8[6];
  *(void *)(a4 + v10) = 1;
  uint64_t v11 = a4 + v8[7];
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(unsigned char *)(v11 + 64) = 1;
  uint64_t result = _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(a1, a4, type metadata accessor for AnchoringComponent.Target);
  *(void *)(a4 + v9) = v6;
  *(void *)(a4 + v10) = v7;
  return result;
}

uint64_t static AnchoringComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return AnchoringComponent.init(from:)(a1);
}

uint64_t AnchoringComponent.__toCore(_:)()
{
  uint64_t v1 = v0;
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v3 = MEMORY[0x270FA5388](v2 - 8);
  float32x4_t v80 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  float32x4_t v79 = (char *)&v76 - v6;
  MEMORY[0x270FA5388](v5);
  float32x4_t v81 = (char *)&v76 - v7;
  *(void *)&long long v84 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v84);
  uint64_t v83 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x270FA5388](v9 - 8);
  *(void *)&long long v85 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v87 = type metadata accessor for URL();
  *(void *)&long long v86 = *(void *)(v87 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v87);
  float v77 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  float32x4_t v78 = (char *)&v76 - v14;
  MEMORY[0x270FA5388](v13);
  float32x4_t v82 = (char *)&v76 - v15;
  uint64_t v16 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v16);
  long long v18 = (uint64_t *)((char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v25 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v26);
  char v28 = (char *)&v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = v1;
  outlined init with copy of AnchoringComponent.Target(v1, (uint64_t)v28, type metadata accessor for AnchoringComponent.Target);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v28, v22);
      *(void *)&long long v89 = UUID.uuid.getter();
      WORD4(v89) = v36;
      BYTE10(v89) = v37;
      BYTE11(v89) = v38;
      BYTE12(v89) = v39;
      BYTE13(v89) = v40;
      BYTE14(v89) = v41;
      HIBYTE(v89) = v42;
      REAnchoringComponentSetDescriptorAnchorIdentifier();
      REAnchoringComponentSetDescriptorType();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      goto LABEL_26;
    case 2u:
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorAlignment();
      REAnchoringComponentSetDescriptorClassification();
      REAnchoringComponentSetDescriptorBounds();
      goto LABEL_26;
    case 3u:
      uint64_t v32 = *(void *)v28;
      uint64_t v31 = *((void *)v28 + 1);
      uint64_t v33 = *((void *)v28 + 2);
      uint64_t v34 = *((void *)v28 + 3);
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceStyle();
      String.utf8CString.getter();
      REAnchoringComponentSetDescriptorResourceGroup();
      swift_release();
      String.utf8CString.getter();
      REAnchoringComponentSetDescriptorResourceName();
      swift_release();
      id v35 = loadImage(group:name:)(v32, v31, v33, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v35) {
        goto LABEL_26;
      }
      REAnchoringComponentSetTrackingImage();
      goto LABEL_25;
    case 4u:
      _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v28, (uint64_t)v21, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
      REAnchoringComponentSetDescriptorType();
      outlined init with copy of AnchoringComponent.Target((uint64_t)v21, (uint64_t)v18, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(void *)&long long v46 = *(uint64_t *)((char *)v18
                                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
                                              + 48));
        long long v85 = v46;
        uint64_t v47 = v86;
        uint64_t v48 = (uint64_t)v82;
        uint64_t v49 = v87;
        (*(void (**)(char *, uint64_t *, void))(v86 + 32))(v82, v18, v87);
        REAnchoringComponentSetDescriptorResourceStyle();
        URL.absoluteString.getter();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceName();
        swift_release();
        LODWORD(v89) = 83886597;
        specialized static TextureResource.load(contentsOf:withName:options:)(v48, 0, 0);
        REAnchoringComponentSetTrackingImage();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
      }
      else
      {
        uint64_t v50 = *v18;
        uint64_t v51 = v18[1];
        uint64_t v52 = v18[2];
        uint64_t v53 = v18[3];
        REAnchoringComponentSetDescriptorResourceStyle();
        String.utf8CString.getter();
        REAnchoringComponentSetDescriptorResourceGroup();
        swift_release();
        String.utf8CString.getter();
        REAnchoringComponentSetDescriptorResourceName();
        swift_release();
        id v54 = loadImage(group:name:)(v50, v51, v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v54)
        {
          REAnchoringComponentSetTrackingImage();
          swift_release();
        }
      }
      outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v21, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
      goto LABEL_26;
    case 5u:
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceStyle();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REAnchoringComponentSetDescriptorResourceGroup();
      swift_release();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REAnchoringComponentSetDescriptorResourceName();
      goto LABEL_25;
    case 6u:
      uint64_t v43 = v85;
      _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v28, v85, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
      REAnchoringComponentSetDescriptorType();
      uint64_t v44 = v83;
      outlined init with copy of AnchoringComponent.Target(v43, v83, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          REAnchoringComponentSetDescriptorResourceStyle();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REAnchoringComponentSetDescriptorResourceGroup();
          swift_release();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REAnchoringComponentSetDescriptorResourceName();
        }
        else
        {
          char v58 = *(void **)v44;
          uint64_t v59 = (void *)MEMORY[0x22A688A50](*(void *)(v44 + 8), *(void *)(v44 + 16));
          swift_bridgeObjectRelease();
          uint64_t v60 = (void *)MEMORY[0x22A688A50](0xD000000000000012, 0x800000022835FB00);
          id v61 = objc_msgSend(v58, sel_URLForResource_withExtension_, v59, v60);

          if (v61)
          {
            uint64_t v62 = (uint64_t)v79;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v63 = 0;
            uint64_t v64 = v87;
            uint64_t v65 = v86;
            uint64_t v66 = (uint64_t)v81;
            uint64_t v67 = (uint64_t)v80;
          }
          else
          {
            uint64_t v63 = 1;
            uint64_t v64 = v87;
            uint64_t v65 = v86;
            uint64_t v66 = (uint64_t)v81;
            uint64_t v67 = (uint64_t)v80;
            uint64_t v62 = (uint64_t)v79;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 56))(v62, v63, 1, v64);
          outlined init with take of URL?(v62, v66);
          REAnchoringComponentSetDescriptorResourceStyle();
          outlined init with copy of URL?(v66, v67);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v67, 1, v64) == 1)
          {

            outlined destroy of BodyTrackingComponent?(v66, &demangling cache variable for type metadata for URL?);
            outlined destroy of AnchoringComponent.ObjectAnchoringSource(v43, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
            outlined destroy of BodyTrackingComponent?(v67, &demangling cache variable for type metadata for URL?);
            goto LABEL_26;
          }
          uint64_t v68 = v77;
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v77, v67, v64);
          URL.absoluteString.getter();
          String.utf8CString.getter();
          swift_bridgeObjectRelease();
          REAnchoringComponentSetDescriptorResourceName();

          (*(void (**)(char *, uint64_t))(v65 + 8))(v68, v64);
          outlined destroy of BodyTrackingComponent?(v66, &demangling cache variable for type metadata for URL?);
        }
      }
      else
      {
        uint64_t v55 = v86;
        char v56 = v78;
        uint64_t v57 = v87;
        (*(void (**)(char *, uint64_t, void))(v86 + 32))(v78, v44, v87);
        REAnchoringComponentSetDescriptorResourceStyle();
        URL.absoluteString.getter();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REAnchoringComponentSetDescriptorResourceName();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
      }
      outlined destroy of AnchoringComponent.ObjectAnchoringSource(v43, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
LABEL_25:
      swift_release();
LABEL_26:
      uint64_t v69 = v88 + *(int *)(type metadata accessor for AnchoringComponent(0) + 28);
      if ((*(unsigned char *)(v69 + 64) & 1) == 0)
      {
        long long v71 = *(_OWORD *)(v69 + 16);
        long long v70 = *(_OWORD *)(v69 + 32);
        long long v72 = *(_OWORD *)v69;
        uint64_t v74 = *(void *)(v69 + 48);
        uint64_t v73 = *(void *)(v69 + 56);
        long long v89 = v72;
        long long v90 = v71;
        long long v91 = v70;
        uint64_t v92 = v74;
        uint64_t v93 = v73;
      }
      REAnchoringComponentSetPreviousWorldTransform();
      REAnchoringComponentSetMode();
      REAnchoringComponentSetDescriptorPhysicsSimulation();
      return RENetworkMarkComponentDirty();
    case 7u:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      JUMPOUT(0x2282A7698);
    case 8u:
    case 9u:
    case 0xAu:
      REAnchoringComponentSetDescriptorType();
      goto LABEL_26;
    case 0xBu:
      goto LABEL_26;
    default:
      long long v29 = *((_OWORD *)v28 + 3);
      long long v86 = *((_OWORD *)v28 + 2);
      long long v87 = v29;
      long long v30 = *((_OWORD *)v28 + 1);
      long long v84 = *(_OWORD *)v28;
      long long v85 = v30;
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorTransform();
      goto LABEL_26;
  }
}

id loadImage(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone(MEMORY[0x263F38378]);
  id v9 = specialized @nonobjc CUICatalog.init(name:from:error:)(0x737465737341, 0xE600000000000000, 0);
  uint64_t v12 = v9;
  if (!v9) {
    return 0;
  }
  uint64_t v13 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v14 = objc_msgSend(v12, sel_namedRecognitionGroupWithName_, v13);

  if (!v14)
  {

    return 0;
  }
  uint64_t v15 = (void *)MEMORY[0x22A688A50](a3, a4);
  id v16 = objc_msgSend(v14, sel_recognitionImageWithName_, v15);

  if (!v16)
  {

    return 0;
  }
  id result = objc_msgSend(v16, sel_image);
  if (result)
  {
    v17[0] = 83886597;
    uint64_t v10 = specialized TextureResource.init(image:withName:options:)(result, 0, 0, (unsigned __int8 *)v17);
    objc_msgSend(v16, sel_physicalSizeInMeters);
    objc_msgSend(v16, sel_physicalSizeInMeters);

    return (id)v10;
  }
  __break(1u);
  return result;
}

void static AnchoringComponent.Target.Alignment.horizontal.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static AnchoringComponent.Target.Alignment.vertical.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static AnchoringComponent.Target.Alignment.any.getter(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

uint64_t AnchoringComponent.Target.Alignment.rawValue.getter()
{
  return *v0;
}

void static AnchoringComponent.Target.Classification.ceiling.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static AnchoringComponent.Target.Classification.table.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static AnchoringComponent.Target.Classification.seat.getter(void *a1@<X8>)
{
  *a1 = 16;
}

uint64_t AnchoringComponent.Target.Classification.rawValue.getter()
{
  return *(void *)v0;
}

BOOL static AnchoringComponent.Target.Chirality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnchoringComponent.Target.Chirality.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnchoringComponent.Target.Chirality.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static AnchoringComponent.Target.HandLocation.== infix(_:_:)()
{
  return 1;
}

Swift::Int AnchoringComponent.Target.HandLocation.hashValue.getter()
{
  return Hasher._finalize()();
}

void AnchoringComponent.Target.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x270FA5388](v7 - 8);
  id v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v14);
  id v16 = (__n128 *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AnchoringComponent.Target(v2, (uint64_t)v16, type metadata accessor for AnchoringComponent.Target);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, __n128 *, uint64_t))(v11 + 32))(v13, v16, v10);
      Hasher._combine(_:)(2uLL);
      _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return;
    case 2u:
      Swift::UInt64 v22 = v16->n128_u64[1];
      double v23 = v16[1].n128_f64[0];
      Swift::UInt8 v24 = v16->n128_u8[0];
      Hasher._combine(_:)(3uLL);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v22);
      specialized SIMD.hash(into:)(v23);
      return;
    case 3u:
      Swift::UInt v25 = 4;
      goto LABEL_13;
    case 4u:
      _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v16, (uint64_t)v9, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
      Hasher._combine(_:)(4uLL);
      AnchoringComponent.ImageAnchoringSource.Source.hash(into:)();
      uint64_t v20 = type metadata accessor for AnchoringComponent.ImageAnchoringSource;
      uint64_t v21 = (uint64_t)v9;
      goto LABEL_15;
    case 5u:
      Swift::UInt v25 = 5;
LABEL_13:
      Hasher._combine(_:)(v25);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return;
    case 6u:
      _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v16, (uint64_t)v6, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
      Hasher._combine(_:)(5uLL);
      AnchoringComponent.ObjectAnchoringSource.Source.hash(into:)();
      uint64_t v20 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource;
      uint64_t v21 = (uint64_t)v6;
LABEL_15:
      outlined destroy of AnchoringComponent.ObjectAnchoringSource(v21, v20);
      return;
    case 7u:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      JUMPOUT(0x2282A7E60);
    case 8u:
      Swift::UInt v19 = 0;
      goto LABEL_11;
    case 9u:
      Swift::UInt v19 = 6;
      goto LABEL_11;
    case 0xAu:
      Swift::UInt v19 = 7;
      goto LABEL_11;
    case 0xBu:
      Swift::UInt v19 = 9;
LABEL_11:
      Hasher._combine(_:)(v19);
      break;
    default:
      __n128 v17 = v16[1];
      __n128 v26 = *v16;
      __n128 v27 = v17;
      __n128 v18 = v16[3];
      __n128 v28 = v16[2];
      __n128 v29 = v18;
      Hasher._combine(_:)(1uLL);
      specialized SIMD.hash(into:)(a1, v26);
      specialized SIMD.hash(into:)(a1, v27);
      specialized SIMD.hash(into:)(a1, v28);
      specialized SIMD.hash(into:)(a1, v29);
      break;
  }
}

Swift::Int AnchoringComponent.Target.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnchoringComponent.Target.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(unsigned char *))AnchoringComponent.Target.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(unsigned char *))AnchoringComponent.Target.hash(into:));
}

uint64_t AnchoringComponent.target.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnchoringComponent.Target(v1, a1, type metadata accessor for AnchoringComponent.Target);
}

uint64_t AnchoringComponent.trackingMode.getter@<X0>(unint64_t *a1@<X8>)
{
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  unint64_t v4 = *(void *)(v1 + *(int *)(result + 20));
  if (v4 >= 3) {
    unint64_t v4 = 1;
  }
  *a1 = v4;
  return result;
}

uint64_t AnchoringComponent.physicsSimulation.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *a1 = *(void *)(v1 + *(int *)(result + 24)) == 1;
  return result;
}

uint64_t AnchoringComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for AnchoringComponent(0);
  uint64_t v62 = v13[5];
  *(void *)(a1 + v62) = 1;
  uint64_t v63 = v13[6];
  *(void *)(a1 + v63) = 1;
  uint64_t v14 = a1 + v13[7];
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(unsigned char *)(v14 + 64) = 1;
  switch(REAnchoringComponentGetDescriptorType())
  {
    case 0u:
    case 6u:
    case 7u:
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 1u:
LABEL_20:
      REAnchoringComponentGetDescriptorTransform();
      *(_OWORD *)a1 = v35;
      *(_OWORD *)(a1 + 16) = v36;
      *(_OWORD *)(a1 + 32) = v37;
      *(_OWORD *)(a1 + 48) = v38;
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 2u:
      REAnchoringComponentGetDescriptorAnchorIdentifier();
      UUID.init(uuid:)();
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v12, v9);
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 3u:
      char DescriptorAlignment = REAnchoringComponentGetDescriptorAlignment();
      uint64_t DescriptorClassification = REAnchoringComponentGetDescriptorClassification();
      REAnchoringComponentGetDescriptorBounds();
      *(unsigned char *)a1 = DescriptorAlignment;
      *(void *)(a1 + 8) = DescriptorClassification;
      *(void *)(a1 + 16) = v24;
      type metadata accessor for AnchoringComponent.Target(0);
      goto LABEL_21;
    case 4u:
      switch(REAnchoringComponentGetDescriptorResourceStyle())
      {
        case 1u:
          if (!REAnchoringComponentGetDescriptorResourceGroup() || !REAnchoringComponentGetDescriptorResourceName()) {
            goto LABEL_20;
          }
          uint64_t v25 = String.init(cString:)();
          uint64_t v27 = v26;
          uint64_t v28 = String.init(cString:)();
          *(void *)a1 = v25;
          *(void *)(a1 + 8) = v27;
          *(void *)(a1 + 16) = v28;
          *(void *)(a1 + 24) = v29;
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        case 3u:
          if (!REAnchoringComponentGetDescriptorResourceName()) {
            goto LABEL_20;
          }
          String.init(cString:)();
          URL.init(string:)();
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
          {
            outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
            goto LABEL_20;
          }
          uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
          v55(v8, v4, v5);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_22831E350;
          REAnchoringComponentGetTrackingImageWidth();
          *(_DWORD *)(inited + 32) = v57;
          REAnchoringComponentGetTrackingImageHeight();
          *(_DWORD *)(inited + 36) = v58;
          specialized SIMD.init<A>(_:)(inited);
          uint64_t v60 = v59;
          swift_setDeallocating();
          v55((char *)a1, v8, v5);
          *(void *)(a1
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
                             + 48)) = v60;
          type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        default:
          goto LABEL_20;
      }
LABEL_21:
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = v62;
      uint64_t v19 = v63;
      goto LABEL_22;
    case 5u:
      int DescriptorResourceStyle = REAnchoringComponentGetDescriptorResourceStyle();
      uint64_t v20 = v62;
      uint64_t v19 = v63;
      switch(DescriptorResourceStyle)
      {
        case 0:
        case 2:
        case 3:
          goto LABEL_15;
        case 1:
          if (!REAnchoringComponentGetDescriptorResourceGroup() || !REAnchoringComponentGetDescriptorResourceName()) {
            goto LABEL_15;
          }
          uint64_t v50 = String.init(cString:)();
          uint64_t v52 = v51;
          uint64_t v53 = String.init(cString:)();
          *(void *)a1 = v50;
          *(void *)(a1 + 8) = v52;
          *(void *)(a1 + 16) = v53;
          *(void *)(a1 + 24) = v54;
          type metadata accessor for AnchoringComponent.Target(0);
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_16;
    default:
      if (one-time initialization token for logger != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)logger);
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v20 = v62;
      uint64_t v19 = v63;
      if (v18)
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_227DD2000, v16, v17, "Encountered unsupported AnchoringComponent on the platform. Defaulting to world anchor", v21, 2u);
        MEMORY[0x22A696500](v21, -1, -1);
      }

LABEL_15:
      REAnchoringComponentGetDescriptorTransform();
      *(_OWORD *)a1 = v31;
      *(_OWORD *)(a1 + 16) = v32;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)(a1 + 48) = v34;
      type metadata accessor for AnchoringComponent.Target(0);
LABEL_16:
      swift_storeEnumTagMultiPayload();
LABEL_22:
      PreviousWorldTransform = (void *)REAnchoringComponentGetPreviousWorldTransform();
      if (PreviousWorldTransform)
      {
        uint64_t v40 = PreviousWorldTransform[1];
        uint64_t v42 = PreviousWorldTransform[2];
        uint64_t v41 = PreviousWorldTransform[3];
        uint64_t v44 = PreviousWorldTransform[4];
        uint64_t v43 = PreviousWorldTransform[5];
        uint64_t v46 = PreviousWorldTransform[6];
        uint64_t v45 = PreviousWorldTransform[7];
        *(void *)uint64_t v14 = *PreviousWorldTransform;
        *(void *)(v14 + 8) = v40;
        *(void *)(v14 + 16) = v42;
        *(void *)(v14 + 24) = v41;
        *(void *)(v14 + 32) = v44;
        *(void *)(v14 + 40) = v43;
        *(void *)(v14 + 48) = v46;
        *(void *)(v14 + 56) = v45;
        *(unsigned char *)(v14 + 64) = 0;
      }
      unsigned int Mode = REAnchoringComponentGetMode();
      if (Mode >= 3) {
        uint64_t v48 = 1;
      }
      else {
        uint64_t v48 = Mode;
      }
      *(void *)(a1 + v20) = v48;
      uint64_t result = REAnchoringComponentGetDescriptorPhysicsSimulation();
      *(void *)(a1 + v19) = result != 0;
      return result;
  }
}

uint64_t AnchoringComponent.ImageAnchoringSource.init(_:physicalSize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
              + 48);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  *(double *)(a2 + v6) = a3;
  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.trackingMode.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *(void *)(v1 + *(int *)(result + 20)) = v2;
  return result;
}

uint64_t AnchoringComponent.physicsSimulation.setter(unsigned __int8 *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *(void *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

void static AnchoringComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 63;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AnchoringComponent@<X0>(uint64_t a1@<X8>)
{
  return AnchoringComponent.init(from:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AnchoringComponent(_DWORD *a1@<X8>)
{
  *a1 = 63;
}

void static AnchoringComponent.TrackingMode.once.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static AnchoringComponent.TrackingMode.continuous.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AnchoringComponent.TrackingMode.predicted.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void AnchoringComponent.TrackingMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static AnchoringComponent.TrackingMode.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t type metadata accessor for AnchoringComponent.ObjectAnchoringSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ObjectAnchoringSource);
}

uint64_t type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata accessor for AnchoringComponent.ImageAnchoringSource(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for AnchoringComponent.ImageAnchoringSource);
}

uint64_t _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

Swift::Int AnchoringComponent.TrackingMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*AnchoringComponent.trackingMode.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 8) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AnchoringComponent(0) + 20);
  *(_DWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  uint64_t v5 = 1;
  if (v4 == 2) {
    uint64_t v5 = 2;
  }
  if (v4) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)a1 = v6;
  return AnchoringComponent.trackingMode.modify;
}

uint64_t AnchoringComponent.trackingMode.modify(uint64_t result)
{
  *(void *)(*(void *)(result + 8) + *(int *)(result + 16)) = *(void *)result;
  return result;
}

void AnchoringComponent.ObjectAnchoringSource.Source.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void **)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of AnchoringComponent.Target(v1, (uint64_t)v8, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      Hasher._combine(_:)(1uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = *v8;
      Hasher._combine(_:)(2uLL);
      NSObject.hash(into:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(0);
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(unsigned char *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource.Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(unsigned char *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(name:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  a4[1] = a1;
  a4[2] = a2;
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return AnchoringComponent.ObjectAnchoringSource.init(group:name:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source, a5);
}

Swift::Int AnchoringComponent.ObjectAnchoringSource.hashValue.getter()
{
  return AnchoringComponent.ObjectAnchoringSource.hashValue.getter((void (*)(unsigned char *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

uint64_t AnchoringComponent.ImageAnchoringSource.Source.hash(into:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AnchoringComponent.Target(v1, (uint64_t)v8, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v9 = *(double *)&v8[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
                               + 48)];
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
    dispatch thunk of Hashable.hash(into:)();
    specialized SIMD.hash(into:)(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    return swift_bridgeObjectRelease();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource(a1, a2, (void (*)(unsigned char *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, (void (*)(unsigned char *))AnchoringComponent.ObjectAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(a1, a2, (void (*)(unsigned char *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(a1, a2, a3, (void (*)(unsigned char *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AnchoringComponent.ImageAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return AnchoringComponent.ObjectAnchoringSource.init(group:name:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source, a5);
}

uint64_t AnchoringComponent.ObjectAnchoringSource.init(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a5(0);

  return swift_storeEnumTagMultiPayload();
}

Swift::Int AnchoringComponent.ImageAnchoringSource.hashValue.getter()
{
  return AnchoringComponent.ObjectAnchoringSource.hashValue.getter((void (*)(unsigned char *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int AnchoringComponent.ObjectAnchoringSource.hashValue.getter(void (*a1)(unsigned char *))
{
  Hasher.init(_seed:)();
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource(a1, a2, (void (*)(unsigned char *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  Hasher.init(_seed:)();
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, (void (*)(unsigned char *))AnchoringComponent.ImageAnchoringSource.Source.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *))
{
  Hasher.init(_seed:)();
  a4(v6);
  return Hasher._finalize()();
}

uint64_t AnchoringComponent.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x270FA5388](v9);
  outlined init with copy of AnchoringComponent.Target(v1, (uint64_t)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AnchoringComponent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E350;
  *(void *)(v11 + 32) = 0x746567726174;
  *(void *)(v11 + 40) = 0xE600000000000000;
  *(void *)(v11 + 72) = type metadata accessor for AnchoringComponent.Target(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v11 + 48));
  outlined init with copy of AnchoringComponent.Target(v1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for AnchoringComponent.Target);
  strcpy((char *)(v11 + 80), "trackingMode");
  *(unsigned char *)(v11 + 93) = 0;
  *(_WORD *)(v11 + 94) = -5120;
  *(void *)(v11 + 120) = &type metadata for AnchoringComponent.TrackingMode;
  uint64_t v13 = *(void *)(v1 + *(int *)(v9 + 20));
  uint64_t v14 = 1;
  if (v13 == 2) {
    uint64_t v14 = 2;
  }
  if (v13) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  *(void *)(v11 + 96) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL static AnchoringComponent.PhysicsSimulation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void AnchoringComponent.PhysicsSimulation.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnchoringComponent.PhysicsSimulation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t (*AnchoringComponent.physicsSimulation.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for AnchoringComponent(0) + 24);
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = *(void *)(v1 + v3) == 1;
  return AnchoringComponent.physicsSimulation.modify;
}

uint64_t AnchoringComponent.physicsSimulation.modify(uint64_t result)
{
  *(void *)(*(void *)result + *(int *)(result + 8)) = *(unsigned __int8 *)(result + 12);
  return result;
}

uint64_t specialized static AnchoringComponent.ImageAnchoringSource.Source.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (uint64_t *)((char *)&v37 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.ImageAnchoringSource.Source, AnchoringComponent.ImageAnchoringSource.Source));
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v17 = &v15[*(int *)(v16 + 56)];
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  outlined init with copy of AnchoringComponent.Target(a2, (uint64_t)v17, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AnchoringComponent.Target((uint64_t)v15, (uint64_t)v12, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    uint64_t v27 = *v12;
    uint64_t v26 = v12[1];
    uint64_t v29 = v12[2];
    uint64_t v28 = v12[3];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v31 = *((void *)v17 + 2);
      uint64_t v30 = *((void *)v17 + 3);
      if (v27 == *(void *)v17 && v26 == *((void *)v17 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      if (v29 == v31 && v28 == v30)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0) {
          goto LABEL_21;
        }
      }
      outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
      char v25 = 1;
      return v25 & 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for (AnchoringComponent.ImageAnchoringSource.Source, AnchoringComponent.ImageAnchoringSource.Source));
LABEL_22:
    char v25 = 0;
    return v25 & 1;
  }
  outlined init with copy of AnchoringComponent.Target((uint64_t)v15, (uint64_t)v9, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  uint64_t v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>))
               + 48);
  float32x2_t v19 = *(float32x2_t *)&v9[v18];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v38);
    goto LABEL_8;
  }
  float32x2_t v20 = *(float32x2_t *)&v17[v18];
  uint64_t v21 = v38;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v17, v38);
  char v22 = MEMORY[0x22A687D40](v9, v6);
  double v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v23(v6, v21);
  v23(v9, v21);
  if ((v22 & 1) == 0)
  {
LABEL_21:
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    goto LABEL_22;
  }
  int32x2_t v24 = vceq_f32(v19, v20);
  char v25 = v24.i8[0] & v24.i8[4];
  outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v15, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
  return v25 & 1;
}

uint64_t specialized static AnchoringComponent.ObjectAnchoringSource.Source.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v45 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (void **)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (void **)((char *)&v45 - v10);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.ObjectAnchoringSource.Source, AnchoringComponent.ObjectAnchoringSource.Source));
  MEMORY[0x270FA5388](v15 - 8);
  os_log_type_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  float32x2_t v19 = (void **)&v17[*(int *)(v18 + 56)];
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v17, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  outlined init with copy of AnchoringComponent.Target(v46, (uint64_t)v19, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of AnchoringComponent.Target((uint64_t)v17, (uint64_t)v11, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
      char v22 = *v11;
      uint64_t v21 = v11[1];
      int32x2_t v24 = v11[2];
      double v23 = v11[3];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v26 = v19[2];
        char v25 = v19[3];
        if (v22 == *v19 && v21 == v19[1])
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v28 & 1) == 0) {
            goto LABEL_32;
          }
        }
        if (v24 != v26 || v23 != v25)
        {
          char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v43) {
            goto LABEL_37;
          }
LABEL_33:
          outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v17, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
          goto LABEL_34;
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with copy of AnchoringComponent.Target((uint64_t)v17, (uint64_t)v8, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
      long long v32 = *v8;
      uint64_t v31 = v8[1];
      char v33 = v8[2];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        char v35 = *v19;
        long long v34 = v19[1];
        long long v36 = v19[2];
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        char v37 = static NSObject.== infix(_:_:)();

        if ((v37 & 1) == 0)
        {
LABEL_32:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        if (v31 != v34 || v33 != v36)
        {
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0) {
            goto LABEL_33;
          }
LABEL_37:
          outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v17, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
          char v40 = 1;
          return v40 & 1;
        }
LABEL_36:
        swift_bridgeObjectRelease_n();
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease();
LABEL_23:
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for (AnchoringComponent.ObjectAnchoringSource.Source, AnchoringComponent.ObjectAnchoringSource.Source));
LABEL_34:
    char v40 = 0;
    return v40 & 1;
  }
  uint64_t v29 = v5;
  uint64_t v30 = v45;
  outlined init with copy of AnchoringComponent.Target((uint64_t)v17, (uint64_t)v14, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v3);
    goto LABEL_23;
  }
  (*(void (**)(char *, void **, uint64_t))(v30 + 32))(v29, v19, v3);
  char v40 = MEMORY[0x22A687D40](v14, v29);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v30 + 8);
  v41(v29, v3);
  v41(v14, v3);
  outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v17, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
  return v40 & 1;
}

uint64_t specialized static AnchoringComponent.Target.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v84 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v83 = (uint64_t)&v78 - v6;
  uint64_t v7 = type metadata accessor for AnchoringComponent.ImageAnchoringSource(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v80 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v79 = (uint64_t)&v78 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v86 = *(void *)(v11 - 8);
  uint64_t v87 = v11;
  MEMORY[0x270FA5388](v11);
  float32x4_t v82 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  float32x4_t v81 = (char *)&v78 - v14;
  uint64_t v15 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v15);
  os_log_type_t v17 = (uint64_t *)((char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v18);
  float32x2_t v20 = (uint64_t *)((char *)&v78 - v19);
  MEMORY[0x270FA5388](v21);
  uint64_t v88 = (uint64_t)&v78 - v22;
  MEMORY[0x270FA5388](v23);
  uint64_t v85 = (uint64_t)&v78 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (unsigned __int8 *)&v78 - v26;
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v78 - v29;
  MEMORY[0x270FA5388](v31);
  char v33 = (float32x4_t *)((char *)&v78 - v32);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (AnchoringComponent.Target, AnchoringComponent.Target));
  MEMORY[0x270FA5388](v34 - 8);
  long long v36 = (char *)&v78 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (float32x4_t *)&v36[*(int *)(v37 + 56)];
  outlined init with copy of AnchoringComponent.Target(v89, (uint64_t)v36, type metadata accessor for AnchoringComponent.Target);
  uint64_t v39 = a2;
  char v40 = v38;
  outlined init with copy of AnchoringComponent.Target(v39, (uint64_t)v38, type metadata accessor for AnchoringComponent.Target);
  uint64_t v41 = (uint64_t *)v38;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, (uint64_t)v30, type metadata accessor for AnchoringComponent.Target);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v43 = v86;
        uint64_t v42 = v87;
        uint64_t v44 = (uint64_t)v36;
        uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
        uint64_t v46 = v81;
        v45(v81, v30, v87);
        uint64_t v47 = v82;
        v45(v82, (char *)v40, v42);
        LOBYTE(v40) = static UUID.== infix(_:_:)();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v43 + 8);
        v48(v47, v42);
        v48(v46, v42);
        goto LABEL_56;
      }
      (*(void (**)(char *, uint64_t))(v86 + 8))(v30, v87);
      goto LABEL_39;
    case 2u:
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, (uint64_t)v27, type metadata accessor for AnchoringComponent.Target);
      float32x2_t v49 = *(float32x2_t *)(v27 + 16);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_39;
      }
      LOBYTE(v40) = 0;
      if (*v27 == v38->u8[0] && *((void *)v27 + 1) == v38->i64[1])
      {
        int32x2_t v50 = vceq_f32(v49, *(float32x2_t *)v38[1].f32);
        if (v50.i8[0]) {
          LOBYTE(v40) = v50.i8[4];
        }
        else {
          LOBYTE(v40) = 0;
        }
      }
      goto LABEL_24;
    case 3u:
      uint64_t v51 = (uint64_t)v36;
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, (uint64_t)v20, type metadata accessor for AnchoringComponent.Target);
      uint64_t v53 = *v20;
      uint64_t v52 = v20[1];
      uint64_t v55 = v20[2];
      uint64_t v54 = v20[3];
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v36 = (char *)v51;
        goto LABEL_39;
      }
      uint64_t v56 = v40->i64[1];
      uint64_t v58 = v41[2];
      uint64_t v57 = v41[3];
      if (v53 == *v41 && v52 == v56)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v76 & 1) == 0)
        {
          LOBYTE(v40) = 0;
          goto LABEL_53;
        }
      }
      if (v55 == v58 && v54 == v57) {
        LOBYTE(v40) = 1;
      }
      else {
        LOBYTE(v40) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
LABEL_53:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AnchoringComponent.ObjectAnchoringSource(v51, type metadata accessor for AnchoringComponent.Target);
      return v40 & 1;
    case 4u:
      uint64_t v59 = v85;
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, v85, type metadata accessor for AnchoringComponent.Target);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        uint64_t v64 = v59;
        uint64_t v61 = v79;
        _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(v64, v79, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
        uint64_t v62 = v80;
        _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v38, v80, type metadata accessor for AnchoringComponent.ImageAnchoringSource);
        LOBYTE(v40) = specialized static AnchoringComponent.ImageAnchoringSource.Source.== infix(_:_:)(v61, v62);
        uint64_t v63 = type metadata accessor for AnchoringComponent.ImageAnchoringSource;
        goto LABEL_23;
      }
      uint64_t v74 = type metadata accessor for AnchoringComponent.ImageAnchoringSource;
      goto LABEL_37;
    case 5u:
      uint64_t v66 = v36;
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, (uint64_t)v17, type metadata accessor for AnchoringComponent.Target);
      uint64_t v68 = *v17;
      uint64_t v67 = v17[1];
      uint64_t v70 = v17[2];
      uint64_t v69 = v17[3];
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v36 = v66;
        goto LABEL_39;
      }
      uint64_t v71 = v40->i64[1];
      uint64_t v73 = v41[2];
      uint64_t v72 = v41[3];
      if (v68 == *v41 && v67 == v71)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v77 & 1) == 0)
        {
          LOBYTE(v40) = 0;
          goto LABEL_55;
        }
      }
      if (v70 == v73 && v69 == v72) {
        LOBYTE(v40) = 1;
      }
      else {
        LOBYTE(v40) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
LABEL_55:
      uint64_t v44 = (uint64_t)v66;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_56:
      outlined destroy of AnchoringComponent.ObjectAnchoringSource(v44, type metadata accessor for AnchoringComponent.Target);
      return v40 & 1;
    case 6u:
      uint64_t v59 = v88;
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, v88, type metadata accessor for AnchoringComponent.Target);
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v60 = v59;
        uint64_t v61 = v83;
        _s10RealityKit18AnchoringComponentV6TargetOWObTm_0(v60, v83, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
        uint64_t v62 = v84;
        _s10RealityKit18AnchoringComponentV6TargetOWObTm_0((uint64_t)v38, v84, type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
        LOBYTE(v40) = specialized static AnchoringComponent.ObjectAnchoringSource.Source.== infix(_:_:)(v61, v62);
        uint64_t v63 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource;
LABEL_23:
        uint64_t v65 = v63;
        outlined destroy of AnchoringComponent.ObjectAnchoringSource(v62, v63);
        outlined destroy of AnchoringComponent.ObjectAnchoringSource(v61, v65);
LABEL_24:
        outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v36, type metadata accessor for AnchoringComponent.Target);
      }
      else
      {
        uint64_t v74 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource;
LABEL_37:
        outlined destroy of AnchoringComponent.ObjectAnchoringSource(v59, v74);
LABEL_39:
        outlined destroy of BodyTrackingComponent?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for (AnchoringComponent.Target, AnchoringComponent.Target));
        LOBYTE(v40) = 0;
      }
      return v40 & 1;
    case 7u:
      goto LABEL_39;
    case 8u:
      if (swift_getEnumCaseMultiPayload() != 8) {
        goto LABEL_39;
      }
      goto LABEL_32;
    case 9u:
      if (swift_getEnumCaseMultiPayload() != 9) {
        goto LABEL_39;
      }
      goto LABEL_32;
    case 0xAu:
      if (swift_getEnumCaseMultiPayload() == 10) {
        goto LABEL_32;
      }
      goto LABEL_39;
    case 0xBu:
      if (swift_getEnumCaseMultiPayload() != 11) {
        goto LABEL_39;
      }
LABEL_32:
      outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)v36, type metadata accessor for AnchoringComponent.Target);
      LOBYTE(v40) = 1;
      return v40 & 1;
    default:
      outlined init with copy of AnchoringComponent.Target((uint64_t)v36, (uint64_t)v33, type metadata accessor for AnchoringComponent.Target);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_39;
      }
      LODWORD(v40) = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v33[1], v38[1]), (int8x16_t)vceqq_f32(*v33, *v38)), vandq_s8((int8x16_t)vceqq_f32(v33[2], v38[2]), (int8x16_t)vceqq_f32(v33[3], v38[3])))) >> 31;
      goto LABEL_24;
  }
}

BOOL specialized static AnchoringComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((specialized static AnchoringComponent.Target.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for AnchoringComponent(0);
  if (*(void *)(a1 + v4[5]) != *(void *)(a2 + v4[5]) || *(void *)(a1 + v4[6]) != *(void *)(a2 + v4[6])) {
    return 0;
  }
  uint64_t v5 = v4[7];
  uint64_t v6 = (float32x4_t *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 64);
  uint64_t v8 = (float32x4_t *)(a2 + v5);
  if ((v7 & 1) == 0) {
    return (v8[4].i8[0] & 1) == 0
  }
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v6[2], v8[2]), (int8x16_t)vceqq_f32(v6[3], v8[3])), vandq_s8((int8x16_t)vceqq_f32(v6[1], v8[1]), (int8x16_t)vceqq_f32(*v6, *v8)))) & 0x80000000) != 0;
  return (v8[4].i8[0] & 1) != 0;
}

id specialized @nonobjc CUICatalog.init(name:from:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = (void *)MEMORY[0x22A688A50]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithName_fromBundle_error_, v5, a3, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t outlined destroy of AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Classification and conformance AnchoringComponent.Target.Classification);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Chirality and conformance AnchoringComponent.Target.Chirality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.HandLocation and conformance AnchoringComponent.Target.HandLocation);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.Target()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type AnchoringComponent.Target and conformance AnchoringComponent.Target, (void (*)(uint64_t))type metadata accessor for AnchoringComponent.Target);
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.TrackingMode and conformance AnchoringComponent.TrackingMode);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ObjectAnchoringSource()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type AnchoringComponent.ObjectAnchoringSource and conformance AnchoringComponent.ObjectAnchoringSource, (void (*)(uint64_t))type metadata accessor for AnchoringComponent.ObjectAnchoringSource);
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ImageAnchoringSource()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type AnchoringComponent.ImageAnchoringSource and conformance AnchoringComponent.ImageAnchoringSource, (void (*)(uint64_t))type metadata accessor for AnchoringComponent.ImageAnchoringSource);
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.PhysicsSimulation and conformance AnchoringComponent.PhysicsSimulation);
  }
  return result;
}

uint64_t sub_2282AB1CC@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  unint64_t v5 = *(void *)(a1 + *(int *)(result + 20));
  if (v5 >= 3) {
    unint64_t v5 = 1;
  }
  *a2 = v5;
  return result;
}

uint64_t sub_2282AB20C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *(void *)(a2 + *(int *)(result + 20)) = v3;
  return result;
}

uint64_t sub_2282AB240@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *a2 = *(void *)(a1 + *(int *)(result + 24)) == 1;
  return result;
}

uint64_t sub_2282AB280(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t result = type metadata accessor for AnchoringComponent(0);
  *(void *)(a2 + *(int *)(result + 24)) = v3;
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent(char *a1, char **a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for AnchoringComponent.Target(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_16;
      case 3u:
      case 5u:
        uint64_t v10 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v10;
        uint64_t v11 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1) {
          goto LABEL_11;
        }
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)&a1[*(int *)(v13 + 48)] = *(char **)((char *)a2 + *(int *)(v13 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          os_log_type_t v17 = *a2;
          uint64_t v18 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v18;
          *((void *)a1 + 2) = a2[2];
          uint64_t v19 = v17;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_11:
          uint64_t v15 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v15;
          uint64_t v16 = a2[3];
          *((void *)a1 + 2) = a2[2];
          *((void *)a1 + 3) = v16;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v20 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
        }
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_17;
    }
    swift_storeEnumTagMultiPayload();
LABEL_16:
    swift_storeEnumTagMultiPayload();
LABEL_17:
    uint64_t v21 = a3[6];
    *(void *)&a1[a3[5]] = *(char **)((char *)a2 + a3[5]);
    *(void *)&a1[v21] = *(char **)((char *)a2 + v21);
    uint64_t v22 = a3[7];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = (char *)a2 + v22;
    long long v25 = *((_OWORD *)v24 + 3);
    *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
    *((_OWORD *)v23 + 3) = v25;
    v23[64] = v24[64];
    long long v26 = *((_OWORD *)v24 + 1);
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *((_OWORD *)v23 + 1) = v26;
  }
  return a1;
}

uint64_t destroy for AnchoringComponent(id *a1)
{
  type metadata accessor for AnchoringComponent.Target(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v3 = type metadata accessor for UUID();
      goto LABEL_9;
    case 3:
    case 5:
      goto LABEL_12;
    case 4:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 6:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch(result)
      {
        case 2:

          goto LABEL_13;
        case 1:
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_13:
          return swift_bridgeObjectRelease();
        case 0:
LABEL_8:
          uint64_t v3 = type metadata accessor for URL();
LABEL_9:
          uint64_t v4 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
          return v4(a1, v3);
      }
      return result;
    default:
      return result;
  }
}

void *initializeWithCopy for AnchoringComponent(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_14;
    case 3u:
    case 5u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[3];
      a1[2] = a2[2];
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_9;
      }
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)((char *)a1 + *(int *)(v11 + 48)) = *(void *)((char *)a2 + *(int *)(v11 + 48));
      break;
    case 6u:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v15 = (void *)*a2;
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        a1[2] = a2[2];
        id v17 = v15;
        swift_bridgeObjectRetain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
LABEL_9:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v18 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
      }
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      goto LABEL_15;
  }
  swift_storeEnumTagMultiPayload();
LABEL_14:
  swift_storeEnumTagMultiPayload();
LABEL_15:
  uint64_t v19 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  long long v23 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v23;
  v21[64] = v22[64];
  long long v24 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v24;
  return a1;
}

void *assignWithCopy for AnchoringComponent(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_15;
      case 3u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1) {
          goto LABEL_10;
        }
        uint64_t v8 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)((char *)a1 + *(int *)(v9 + 48)) = *(void *)((char *)a2 + *(int *)(v9 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v11 = (void *)*a2;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          id v12 = v11;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_10:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v13 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        }
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        goto LABEL_16;
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
  }
LABEL_16:
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  long long v17 = *((_OWORD *)v16 + 1);
  long long v18 = *((_OWORD *)v16 + 2);
  long long v19 = *((_OWORD *)v16 + 3);
  v15[64] = v16[64];
  *((_OWORD *)v15 + 2) = v18;
  *((_OWORD *)v15 + 3) = v19;
  *((_OWORD *)v15 + 1) = v17;
  return a1;
}

char *initializeWithTake for AnchoringComponent(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      uint64_t v9 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_13;
    case 4:
      uint64_t v10 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)&a1[*(int *)(v12 + 48)] = *(void *)&a2[*(int *)(v12 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      goto LABEL_13;
    case 1:
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      goto LABEL_14;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_14:
  uint64_t v14 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  long long v17 = &a2[v15];
  long long v18 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  v16[64] = v17[64];
  long long v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  return a1;
}

char *assignWithTake for AnchoringComponent(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        uint64_t v9 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v13 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_14;
      case 4:
        uint64_t v10 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v11 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
          *(void *)&a1[*(int *)(v12 + 48)] = *(void *)&a2[*(int *)(v12 + 48)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        goto LABEL_14;
      case 1:
        uint64_t v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
LABEL_14:
        swift_storeEnumTagMultiPayload();
        goto LABEL_15;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_15:
  uint64_t v14 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v14] = *(void *)&a2[v14];
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  long long v17 = &a2[v15];
  long long v18 = *((_OWORD *)v17 + 3);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  v16[64] = v17[64];
  long long v19 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2282AC374);
}

uint64_t sub_2282AC374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, type metadata accessor for AnchoringComponent.Target);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2282AC3A0);
}

uint64_t sub_2282AC3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.Target);
}

uint64_t type metadata completion function for AnchoringComponent()
{
  uint64_t result = type metadata accessor for AnchoringComponent.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.Target(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 5u:
        uint64_t v10 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v10;
        uint64_t v11 = a2[2];
        uint64_t v12 = a2[3];
        *((void *)a1 + 2) = v11;
        *((void *)a1 + 3) = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1) {
          goto LABEL_12;
        }
        uint64_t v13 = type metadata accessor for URL();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)&a1[*(int *)(v14 + 48)] = *(char **)((char *)a2 + *(int *)(v14 + 48));
        goto LABEL_13;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          long long v19 = *a2;
          uint64_t v20 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v20;
          *((void *)a1 + 2) = a2[2];
          uint64_t v21 = v19;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_12:
          uint64_t v16 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v16;
          long long v17 = a2[2];
          long long v18 = a2[3];
          *((void *)a1 + 2) = v17;
          *((void *)a1 + 3) = v18;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v22 = type metadata accessor for URL();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.Target(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v3 = type metadata accessor for UUID();
      goto LABEL_9;
    case 3:
    case 5:
      goto LABEL_12;
    case 4:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_12;
      }
      goto LABEL_8;
    case 6:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      switch(result)
      {
        case 2:

          goto LABEL_13;
        case 1:
LABEL_12:
          swift_bridgeObjectRelease();
LABEL_13:
          return swift_bridgeObjectRelease();
        case 0:
LABEL_8:
          uint64_t v3 = type metadata accessor for URL();
LABEL_9:
          uint64_t v4 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
          return v4(a1, v3);
      }
      return result;
    default:
      return result;
  }
}

void *initializeWithCopy for AnchoringComponent.Target(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_14;
    case 3u:
    case 5u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 4u:
      type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_9;
      }
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)((char *)a1 + *(int *)(v11 + 48)) = *(void *)((char *)a2 + *(int *)(v11 + 48));
      break;
    case 6u:
      type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v16 = (void *)*a2;
        uint64_t v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        a1[2] = a2[2];
        id v18 = v16;
        swift_bridgeObjectRetain();
      }
      else if (EnumCaseMultiPayload == 1)
      {
LABEL_9:
        uint64_t v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        uint64_t v14 = a2[2];
        uint64_t v15 = a2[3];
        a1[2] = v14;
        a1[3] = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v19 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
      }
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
  swift_storeEnumTagMultiPayload();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnchoringComponent.Target(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_15;
      case 3u:
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 4u:
        type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() != 1) {
          goto LABEL_10;
        }
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)((char *)a1 + *(int *)(v8 + 48)) = *(void *)((char *)a2 + *(int *)(v8 + 48));
        break;
      case 6u:
        type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v10 = (void *)*a2;
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          id v11 = v10;
          swift_bridgeObjectRetain();
        }
        else if (EnumCaseMultiPayload == 1)
        {
LABEL_10:
          *a1 = *a2;
          a1[1] = a2[1];
          a1[2] = a2[2];
          a1[3] = a2[3];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v12 = type metadata accessor for URL();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        }
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
    swift_storeEnumTagMultiPayload();
LABEL_15:
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.Target(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 6:
      uint64_t v8 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_13;
    case 4:
      uint64_t v9 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v10 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
        *(void *)&a1[*(int *)(v11 + 48)] = *(void *)&a2[*(int *)(v11 + 48)];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      goto LABEL_13;
    case 1:
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_13:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for AnchoringComponent.Target(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.Target);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 6:
        uint64_t v8 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v12 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_14;
      case 4:
        uint64_t v9 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v10 = type metadata accessor for URL();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
          uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
          *(void *)&a1[*(int *)(v11 + 48)] = *(void *)&a2[*(int *)(v11 + 48)];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        goto LABEL_14;
      case 1:
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.Target()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Alignment()
{
  return &type metadata for AnchoringComponent.Target.Alignment;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Classification()
{
  return &type metadata for AnchoringComponent.Target.Classification;
}

unsigned char *storeEnumTagSinglePayload for AnchoringComponent.Target.Chirality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282AD588);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.Chirality()
{
  return &type metadata for AnchoringComponent.Target.Chirality;
}

ValueMetadata *type metadata accessor for AnchoringComponent.Target.HandLocation()
{
  return &type metadata for AnchoringComponent.Target.HandLocation;
}

ValueMetadata *type metadata accessor for AnchoringComponent.TrackingMode()
{
  return &type metadata for AnchoringComponent.TrackingMode;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.ObjectAnchoringSource(char *a1, char **a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0) - 8)
                 + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v11;
      *((void *)a1 + 2) = a2[2];
      uint64_t v12 = v10;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      unsigned int v6 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v6;
      uint64_t v7 = a2[2];
      uint64_t v8 = a2[3];
      *((void *)a1 + 2) = v7;
      *((void *)a1 + 3) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ObjectAnchoringSource(id *a1)
{
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:

      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
      uint64_t v3 = type metadata accessor for URL();
      int v4 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnchoringComponent.ObjectAnchoringSource(void *a1, uint64_t a2)
{
  type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v9;
    a1[2] = *(void *)(a2 + 16);
    id v10 = v8;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v5;
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AnchoringComponent.ObjectAnchoringSource(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      id v6 = v5;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for AnchoringComponent.ObjectAnchoringSource(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  else
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AnchoringComponent.ObjectAnchoringSource(void *a1, const void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    uint64_t v4 = type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2282ADBE0);
}

uint64_t sub_2282ADBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2282ADC7C);
}

uint64_t sub_2282ADC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoringComponent.ImageAnchoringSource(uint64_t *a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0) - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(uint64_t *)((char *)a1 + *(int *)(v6 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 48));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ImageAnchoringSource(uint64_t a1)
{
  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for URL();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for AnchoringComponent.ImageAnchoringSource(void *a1, void *a2)
{
  type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(void *)((char *)a1 + *(int *)(v5 + 48)) = *(void *)((char *)a2 + *(int *)(v5 + 48));
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnchoringComponent.ImageAnchoringSource(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)((char *)a1 + *(int *)(v5 + 48)) = *(void *)((char *)a2 + *(int *)(v5 + 48));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.ImageAnchoringSource(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(void *)&a1[*(int *)(v6 + 48)] = *(void *)&a2[*(int *)(v6 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AnchoringComponent.ImageAnchoringSource(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    uint64_t v4 = type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)&a1[*(int *)(v6 + 48)] = *(void *)&a2[*(int *)(v6 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2282AE2D4);
}

uint64_t sub_2282AE2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t storeEnumTagSinglePayload for AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2282AE300);
}

uint64_t sub_2282AE300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata completion function for AnchoringComponent.ImageAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AnchoringComponent.ObjectAnchoringSource(a1, a2, a3, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnchoringComponent.PhysicsSimulation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282AE48CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnchoringComponent.PhysicsSimulation()
{
  return &type metadata for AnchoringComponent.PhysicsSimulation;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnchoringComponent.ImageAnchoringSource.Source(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 48));
    }
    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      uint64_t v10 = a2[2];
      uint64_t v11 = a2[3];
      a1[2] = v10;
      a1[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ImageAnchoringSource.Source(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for URL();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for AnchoringComponent.ImageAnchoringSource.Source(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(void *)((char *)a1 + *(int *)(v5 + 48)) = *(void *)((char *)a2 + *(int *)(v5 + 48));
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[2];
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for AnchoringComponent.ImageAnchoringSource.Source(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)((char *)a1 + *(int *)(v5 + 48)) = *(void *)((char *)a2 + *(int *)(v5 + 48));
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for AnchoringComponent.ImageAnchoringSource.Source(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for AnchoringComponent.ImageAnchoringSource.Source(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, size: SIMD2<Float>));
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.ImageAnchoringSource.Source()
{
  void v2[4] = &unk_22834A258;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AnchoringComponent.ObjectAnchoringSource.Source(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v12;
      *((void *)a1 + 2) = a2[2];
      uint64_t v13 = v11;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v7;
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      *((void *)a1 + 2) = v8;
      *((void *)a1 + 3) = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AnchoringComponent.ObjectAnchoringSource.Source(id *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch(result)
  {
    case 2:

      break;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
      uint64_t v3 = type metadata accessor for URL();
      uint64_t v4 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8);
      return v4(a1, v3);
    default:
      return result;
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnchoringComponent.ObjectAnchoringSource.Source(void *a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = *(void **)a2;
    uint64_t v9 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v9;
    a1[2] = *(void *)(a2 + 16);
    id v10 = v8;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v5;
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    a1[2] = v6;
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for AnchoringComponent.ObjectAnchoringSource.Source(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      id v6 = v5;
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for AnchoringComponent.ObjectAnchoringSource.Source(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AnchoringComponent.ObjectAnchoringSource((uint64_t)a1, type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for AnchoringComponent.ObjectAnchoringSource.Source()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ObjectAnchoringSource.Source()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type AnchoringComponent.ObjectAnchoringSource.Source and conformance AnchoringComponent.ObjectAnchoringSource.Source, (void (*)(uint64_t))type metadata accessor for AnchoringComponent.ObjectAnchoringSource.Source);
}

uint64_t base witness table accessor for Equatable in AnchoringComponent.ImageAnchoringSource.Source()
{
  return _s10Foundation4UUIDVACSHAAWlTm_1(&lazy protocol witness table cache variable for type AnchoringComponent.ImageAnchoringSource.Source and conformance AnchoringComponent.ImageAnchoringSource.Source, (void (*)(uint64_t))type metadata accessor for AnchoringComponent.ImageAnchoringSource.Source);
}

id one-time initialization function for coreRE()
{
  id result = (id)REGetCoreREBundle();
  static NSBundle.coreRE = (uint64_t)result;
  return result;
}

id one-time initialization function for realityFoundation()
{
  type metadata accessor for Entity();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static NSBundle.realityFoundation = (uint64_t)result;
  return result;
}

uint64_t HasPhysicsBody.physicsBody.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  uint64_t v2 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined release of PhysicsBodyComponent?((uint64_t)v5);
  swift_release();
  return v2(v4, 0);
}

uint64_t HasPhysicsBody.physicsBody.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

uint64_t key path getter for HasPhysicsBody.physicsBody : <A>A@<X0>(uint64_t a1@<X8>)
{
  HasPhysicsBody.physicsBody.getter((uint64_t)v3);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  return outlined init with take of Transform?((uint64_t)v4, a1, &demangling cache variable for type metadata for PhysicsBodyComponent?);
}

uint64_t key path setter for HasPhysicsBody.physicsBody : <A>A(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v3, (uint64_t)v2, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined retain of PhysicsBodyComponent?((uint64_t)v3);
  return HasPhysicsBody.physicsBody.setter((uint64_t)v2);
}

void (*HasPhysicsBody.physicsBody.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v7 = malloc(0x2D8uLL);
  *a1 = v7;
  v7[90] = v3;
  v7[89] = a3;
  v7[88] = a2;
  HasPhysicsBody.physicsBody.getter((uint64_t)v7);
  return HasPhysicsBody.physicsBody.modify;
}

void HasPhysicsBody.physicsBody.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 176;
  uint64_t v4 = *a1 + 352;
  if (a2)
  {
    outlined init with take of Transform?(*a1, v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?(v4, (uint64_t)v2 + 528, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined retain of PhysicsBodyComponent?(v4);
    HasPhysicsBody.physicsBody.setter((uint64_t)v2 + 528);
    outlined init with take of Transform?((uint64_t)v2, v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined release of PhysicsBodyComponent?(v3);
  }
  else
  {
    outlined init with take of Transform?(*a1, v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?(v3, v4, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    HasPhysicsBody.physicsBody.setter(v4);
  }

  free(v2);
}

uint64_t HasPhysicsMotion.physicsMotion.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for HasPhysicsMotion.physicsMotion : <A>A@<D0>(uint64_t a1@<X8>)
{
  HasPhysicsMotion.physicsMotion.getter((uint64_t)v5);
  char v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t key path setter for HasPhysicsMotion.physicsMotion : <A>A(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 32);
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  char v5 = v1;
  return HasPhysicsMotion.physicsMotion.setter((uint64_t)v4);
}

uint64_t HasPhysicsMotion.physicsMotion.setter(uint64_t a1)
{
  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PhysicsMotionComponent?);
  long long v2 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  swift_release();
  return v2(v4, 0);
}

void (*HasPhysicsMotion.physicsMotion.modify(void *a1, uint64_t a2, uint64_t a3))(void **a1)
{
  uint64_t v7 = malloc(0x40uLL);
  *a1 = v7;
  v7[6] = a3;
  v7[7] = v3;
  v7[5] = a2;
  HasPhysicsMotion.physicsMotion.getter((uint64_t)v7);
  return HasPhysicsMotion.physicsMotion.modify;
}

void HasPhysicsMotion.physicsMotion.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v3 = (*a1)[3];
  char v5 = *((unsigned char *)*a1 + 32);
  v6[0] = **a1;
  v6[1] = v2;
  long long v6[2] = v4;
  v6[3] = v3;
  char v7 = v5;
  HasPhysicsMotion.physicsMotion.setter((uint64_t)v6);

  free(v1);
}

uint64_t HasPhysicsBody.resetPhysicsTransform(_:recursive:)(char a1, __n128 a2, __n128 a3, __n128 a4)
{
  HasTransform.transform.setter(a2, a3, a4);

  return HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(a1);
}

uint64_t HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(char a1)
{
  HasPhysicsBody.physicsBody.getter((uint64_t)v30);
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v32, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)v33, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v33) == 1)
  {
    outlined init with take of Transform?((uint64_t)v32, (uint64_t)v29, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    uint64_t result = HasPhysicsBody.physicsBody.setter((uint64_t)v29);
    if ((a1 & 1) == 0) {
      return result;
    }
  }
  else
  {
    char v31 = 1;
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)v29, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    outlined init with take of Transform?((uint64_t)v29, (uint64_t)v28, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    uint64_t result = HasPhysicsBody.physicsBody.setter((uint64_t)v28);
    if ((a1 & 1) == 0) {
      return result;
    }
  }
  HasHierarchy.children.getter(v30);
  if (REEntityGetChildCount() < 1) {
    return swift_release();
  }
  uint64_t v3 = 0;
  while (1)
  {
    uint64_t result = REEntityGetChildCount();
    if (v3 >= result) {
      break;
    }
    uint64_t result = REEntityGetChild();
    if (!result) {
      goto LABEL_54;
    }
    uint64_t v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result) {
        goto LABEL_53;
      }
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          char v7 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8)) {
            BOOL v8 = 1;
          }
          else {
            BOOL v8 = v7 == 0;
          }
          if (v8)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v9 = *v7;
            uint64_t v10 = String.init(utf8String:)();
            if (v11) {
              Swift::Int v12 = v10;
            }
            else {
              Swift::Int v12 = 0;
            }
            if (v11) {
              unint64_t v13 = v11;
            }
            else {
              unint64_t v13 = 0xE000000000000000;
            }
            char v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v7;
          }
          if (!v7) {
            goto LABEL_55;
          }
          swift_retain();
          uint64_t v14 = String.init(utf8String:)();
          unint64_t v16 = v15;
          swift_release();
          uint64_t v17 = v16 ? v14 : 0;
          unint64_t v18 = v16 ? v16 : 0xE000000000000000;
          uint64_t v19 = (NSString *)MEMORY[0x22A688A50](v17, v18);
          swift_bridgeObjectRelease();
          Class v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              uint64_t v22 = (*(uint64_t (**)(void))(v21 + 232))();
              uint64_t v23 = *(void *)(v22 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v23, 0);
              *(void *)(v22 + 16) = v4;
              MEMORY[0x22A68E750](v4, v22);
              swift_release();
              goto LABEL_40;
            }
          }
        }
      }
      uint64_t v5 = makeEntity(for:)(v4);
    }
    uint64_t v22 = v5;
LABEL_40:
    uint64_t result = REEntityGetChildCount();
    if (v3 >= result) {
      goto LABEL_52;
    }
    uint64_t v24 = swift_conformsToProtocol2();
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v24) {
      long long v26 = (uint64_t *)v22;
    }
    else {
      long long v26 = 0;
    }
    if (v26)
    {
      uint64_t v27 = *v26;
      swift_retain();
      HasPhysicsBody.resetPhysicsTransformInternal(recursive:)(1, v27, v25);
      swift_release();
    }
    ++v3;
    swift_release();
    if (v3 >= REEntityGetChildCount()) {
      return swift_release();
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_2282AFB90()
{
  return 16;
}

__n128 sub_2282AFB9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_2282AFBB0()
{
  return 16;
}

__n128 sub_2282AFBBC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void one-time initialization function for basicJiggleAnimationData()
{
  static EmphasizeAnimations.basicJiggleAnimationDatCGFloat a = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicJiggleAnimationData;
}

void one-time initialization function for playfulJiggleAnimationData()
{
  static EmphasizeAnimations.playfulJiggleAnimationDatCGFloat a = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulJiggleAnimationData;
}

void one-time initialization function for wildJiggleAnimationData()
{
  static EmphasizeAnimations.wildJiggleAnimationDatCGFloat a = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildJiggleAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeJiggleAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicJiggleAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 203, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulJiggleAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildJiggleAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t CharacterControllerComponent.Collision.init(characterEntity:hitEntity:hitPosition:hitNormal:moveDirection:moveDistance:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>, float a7@<S3>)
{
  a3->n128_u64[0] = result;
  a3->n128_u64[1] = a2;
  a3[1] = a4;
  a3[2] = a5;
  a3[3] = a6;
  a3[4].n128_f32[0] = a7;
  return result;
}

uint64_t CharacterControllerComponent.CollisionFlags.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t CharacterControllerComponent.Collision.characterEntity.getter()
{
  return swift_retain();
}

uint64_t CharacterControllerComponent.Collision.characterEntity.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*CharacterControllerComponent.Collision.characterEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CharacterControllerComponent.Collision.hitEntity.getter()
{
  return swift_retain();
}

uint64_t CharacterControllerComponent.Collision.hitEntity.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CharacterControllerComponent.Collision.hitEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.hitPosition.getter()
{
  return v0[1];
}

void CharacterControllerComponent.Collision.hitPosition.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.hitPosition.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.hitNormal.getter()
{
  return v0[2];
}

void CharacterControllerComponent.Collision.hitNormal.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.hitNormal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.Collision.moveDirection.getter()
{
  return v0[3];
}

void CharacterControllerComponent.Collision.moveDirection.setter(__n128 a1)
{
  v1[3] = a1;
}

uint64_t (*CharacterControllerComponent.Collision.moveDirection.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.Collision.moveDistance.getter()
{
  return *(float *)(v0 + 64);
}

void CharacterControllerComponent.Collision.moveDistance.setter(float a1)
{
  *(float *)(v1 + 64) = a1;
}

uint64_t (*CharacterControllerComponent.Collision.moveDistance.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CharacterControllerComponent.CollisionFlags.rawValue.getter()
{
  return *v0;
}

void static CharacterControllerComponent.CollisionFlags.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static CharacterControllerComponent.CollisionFlags.side.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static CharacterControllerComponent.CollisionFlags.top.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static CharacterControllerComponent.CollisionFlags.bottom.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

double CharacterControllerComponent.init()@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultUpVector != -1) {
    swift_once();
  }
  long long v2 = static CharacterControllerComponent.defaultUpVector;
  *(_OWORD *)a1 = xmmword_22834A4A0;
  *(_DWORD *)(a1 + 16) = 1045220557;
  *(_OWORD *)(a1 + 32) = v2;
  double result = NAN;
  *(void *)(a1 + 48) = 0xFFFFFFFF00000001;
  return result;
}

float static CharacterControllerComponent.defaultSkinWidth.getter()
{
  return 0.01;
}

float static CharacterControllerComponent.defaultSlopeLimit.getter()
{
  return 0.7854;
}

float static CharacterControllerComponent.defaultStepLimit.getter()
{
  return 0.2;
}

double static CharacterControllerComponent.defaultUpVector.getter()
{
  if (one-time initialization token for defaultUpVector != -1) {
    swift_once();
  }
  return *(double *)&static CharacterControllerComponent.defaultUpVector;
}

unint64_t *CharacterControllerComponent.init(radius:height:skinWidth:slopeLimit:stepLimit:upVector:collisionFilter:)@<X0>(unint64_t *result@<X0>, __n128 *a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>, float a6@<S3>, float a7@<S4>, __n128 a8@<Q5>)
{
  unint64_t v14 = *result;
  if (one-time initialization token for defaultUpVector != -1)
  {
    __n128 v15 = a8;
    double result = (unint64_t *)swift_once();
    a8 = v15;
  }
  a2->n128_f32[0] = a3;
  a2->n128_f32[1] = a4;
  a2->n128_f32[2] = a5;
  a2->n128_f32[3] = a6;
  a2[1].n128_f32[0] = a7;
  a2[2] = a8;
  a2[3].n128_u64[0] = v14;
  return result;
}

float CharacterControllerComponent.radius.getter()
{
  return *(float *)v0;
}

void CharacterControllerComponent.radius.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*CharacterControllerComponent.radius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.height.getter()
{
  return *(float *)(v0 + 4);
}

void CharacterControllerComponent.height.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*CharacterControllerComponent.height.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.skinWidth.getter()
{
  return *(float *)(v0 + 8);
}

void CharacterControllerComponent.skinWidth.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*CharacterControllerComponent.skinWidth.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.slopeLimit.getter()
{
  return *(float *)(v0 + 12);
}

void CharacterControllerComponent.slopeLimit.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*CharacterControllerComponent.slopeLimit.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float CharacterControllerComponent.stepLimit.getter()
{
  return *(float *)(v0 + 16);
}

void CharacterControllerComponent.stepLimit.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

uint64_t (*CharacterControllerComponent.stepLimit.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CharacterControllerComponent.upVector.getter()
{
  return v0[2];
}

void CharacterControllerComponent.upVector.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*CharacterControllerComponent.upVector.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double CharacterControllerComponent.collisionFilter.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double CharacterControllerComponent.collisionFilter.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

uint64_t (*CharacterControllerComponent.collisionFilter.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float static CharacterControllerComponent.defaultRadius.getter()
{
  return 0.25;
}

float static CharacterControllerComponent.defaultHeight.getter()
{
  return 2.0;
}

float one-time initialization function for defaultUpVector()
{
  *(void *)&long long v0 = qword_26DC3C010;
  *((void *)&v0 + 1) = *(unsigned int *)algn_26DC3C018;
  static CharacterControllerComponent.defaultUpVector = v0;
  return *(float *)&v0;
}

__n128 protocol witness for static Component.__fromCore(_:) in conformance CharacterControllerComponent@<Q0>(__n128 *a1@<X8>)
{
  RECharacterControllerComponentGetRadius();
  unsigned __int32 v3 = v2;
  RECharacterControllerComponentGetHeight();
  unsigned __int32 v5 = v4;
  RECharacterControllerComponentGetSkinWidth();
  unsigned __int32 v7 = v6;
  RECharacterControllerComponentGetSlopeLimit();
  unsigned __int32 v9 = v8;
  RECharacterControllerComponentGetStepLimit();
  unsigned __int32 v11 = v10;
  RECharacterControllerComponentGetUpVector();
  __n128 v16 = v12;
  Collisionint Group = RECharacterControllerComponentGetCollisionGroup();
  unsigned __int32 CollisionMask = RECharacterControllerComponentGetCollisionMask();
  if (one-time initialization token for defaultUpVector != -1) {
    swift_once();
  }
  a1->n128_u32[0] = v3;
  a1->n128_u32[1] = v5;
  a1->n128_u32[2] = v7;
  a1->n128_u32[3] = v9;
  a1[1].n128_u32[0] = v11;
  __n128 result = v16;
  a1[2] = v16;
  a1[3].n128_u32[0] = CollisionGroup;
  a1[3].n128_u32[1] = CollisionMask;
  return result;
}

__n128 static CharacterControllerComponent.__fromCore(_:)@<Q0>(__n128 *a1@<X8>)
{
  RECharacterControllerComponentGetRadius();
  unsigned __int32 v3 = v2;
  RECharacterControllerComponentGetHeight();
  unsigned __int32 v5 = v4;
  RECharacterControllerComponentGetSkinWidth();
  unsigned __int32 v7 = v6;
  RECharacterControllerComponentGetSlopeLimit();
  unsigned __int32 v9 = v8;
  RECharacterControllerComponentGetStepLimit();
  unsigned __int32 v11 = v10;
  RECharacterControllerComponentGetUpVector();
  __n128 v16 = v12;
  Collisionint Group = RECharacterControllerComponentGetCollisionGroup();
  unsigned __int32 CollisionMask = RECharacterControllerComponentGetCollisionMask();
  if (one-time initialization token for defaultUpVector != -1) {
    swift_once();
  }
  a1->n128_u32[0] = v3;
  a1->n128_u32[1] = v5;
  a1->n128_u32[2] = v7;
  a1->n128_u32[3] = v9;
  a1[1].n128_u32[0] = v11;
  __n128 result = v16;
  a1[2] = v16;
  a1[3].n128_u32[0] = CollisionGroup;
  a1[3].n128_u32[1] = CollisionMask;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance CharacterControllerComponent()
{
  RECharacterControllerComponentSetRadius();
  RECharacterControllerComponentSetHeight();
  RECharacterControllerComponentSetSkinWidth();
  RECharacterControllerComponentSetSlopeLimit();
  RECharacterControllerComponentSetStepLimit();
  RECharacterControllerComponentSetUpVector();

  return RECharacterControllerComponentSetCollisionFilter();
}

uint64_t CharacterControllerComponent.__toCore(_:)()
{
  RECharacterControllerComponentSetRadius();
  RECharacterControllerComponentSetHeight();
  RECharacterControllerComponentSetSkinWidth();
  RECharacterControllerComponentSetSlopeLimit();
  RECharacterControllerComponentSetStepLimit();
  RECharacterControllerComponentSetUpVector();

  return RECharacterControllerComponentSetCollisionFilter();
}

void protocol witness for static Component.__coreComponentType.getter in conformance CharacterControllerComponent(_DWORD *a1@<X8>)
{
  *a1 = 2100;
}

void static CharacterControllerComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2100;
}

uint64_t CharacterControllerComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unsigned __int32 v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  unsigned __int32 v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *v0;
  int v9 = v0[1];
  int v10 = v0[2];
  int v11 = v0[3];
  int v12 = v0[4];
  long long v20 = *((_OWORD *)v0 + 2);
  int v14 = v0[12];
  int v13 = v0[13];
  int v21 = v8;
  int v22 = v9;
  int v23 = v10;
  int v24 = v11;
  int v25 = v12;
  long long v26 = v20;
  int v27 = v14;
  int v28 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22834A4B0;
  uint64_t v16 = MEMORY[0x263F8D5C8];
  *(void *)(v15 + 32) = 0x746867696568;
  *(void *)(v15 + 40) = 0xE600000000000000;
  *(_DWORD *)(v15 + 48) = v9;
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = 0x737569646172;
  *(void *)(v15 + 88) = 0xE600000000000000;
  *(_DWORD *)(v15 + 96) = v8;
  *(void *)(v15 + 120) = v16;
  *(void *)(v15 + 128) = 0x746469576E696B73;
  *(void *)(v15 + 136) = 0xE900000000000068;
  *(_DWORD *)(v15 + 144) = v10;
  *(void *)(v15 + 168) = v16;
  *(void *)(v15 + 176) = 0x6D694C65706F6C73;
  *(void *)(v15 + 184) = 0xEA00000000007469;
  *(_DWORD *)(v15 + 192) = v11;
  *(void *)(v15 + 216) = v16;
  *(void *)(v15 + 224) = 0x696D694C70657473;
  *(void *)(v15 + 232) = 0xE900000000000074;
  *(_DWORD *)(v15 + 240) = v12;
  *(void *)(v15 + 264) = v16;
  *(void *)(v15 + 272) = 0x726F746365567075;
  *(void *)(v15 + 280) = 0xE800000000000000;
  *(void *)(v15 + 312) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t v17 = swift_allocObject();
  *(void *)(v15 + 288) = v17;
  *(_OWORD *)(v17 + 16) = v20;
  *(void *)(v15 + 320) = 0x6F6973696C6C6F63;
  *(void *)(v15 + 328) = 0xEF7265746C69466ELL;
  *(void *)(v15 + 360) = &type metadata for CollisionFilter;
  *(_DWORD *)(v15 + 336) = v14;
  *(_DWORD *)(v15 + 340) = v13;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_2282B08B8()
{
  return MEMORY[0x270FA0238](v0, 32, 15);
}

unint64_t lazy protocol witness table accessor for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags;
  if (!lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CharacterControllerComponent.CollisionFlags and conformance CharacterControllerComponent.CollisionFlags);
  }
  return result;
}

__n128 __swift_memcpy56_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CharacterControllerComponent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CharacterControllerComponent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent()
{
  return &type metadata for CharacterControllerComponent;
}

uint64_t initializeWithCopy for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for CharacterControllerComponent.Collision(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CharacterControllerComponent.Collision(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 68)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CharacterControllerComponent.Collision(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 68) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 68) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent.Collision()
{
  return &type metadata for CharacterControllerComponent.Collision;
}

ValueMetadata *type metadata accessor for CharacterControllerComponent.CollisionFlags()
{
  return &type metadata for CharacterControllerComponent.CollisionFlags;
}

uint64_t BodyTrackingComponent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t result = type metadata accessor for BodyTrackingComponent(0);
  *(unsigned char *)(a1 + *(int *)(result + 20)) = 0;
  return result;
}

uint64_t type metadata accessor for BodyTrackingComponent(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for BodyTrackingComponent);
}

uint64_t HasBodyTracking.bodyTracking.setter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a1, (uint64_t)v5, type metadata accessor for BodyTrackingComponent);
  uint64_t v6 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
  unsigned __int32 v7 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v9);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for BodyTrackingComponent?);
  swift_release();
  v7(v9, 0);
  return _s10RealityKit21BodyTrackingComponentVWOhTm_0(a1, type metadata accessor for BodyTrackingComponent);
}

uint64_t HasBodyTracking.bodyTracking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  __n128 v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, __n128))(*(void *)v1 + 96))(&v11, v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v6);
  swift_release();
  uint64_t v7 = type metadata accessor for BodyTrackingComponent(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) != 1) {
    return outlined init with take of BodyTrackingComponent((uint64_t)v6, a1);
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  *(unsigned char *)(a1 + *(int *)(v7 + 20)) = 0;
  return outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for BodyTrackingComponent?);
}

uint64_t key path setter for HasBodyTracking.bodyTracking : <A>A(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BodyTrackingComponent(0);
  MEMORY[0x270FA5388](v2 - 8);
  __n128 v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a1, (uint64_t)v4, type metadata accessor for BodyTrackingComponent);
  return HasBodyTracking.bodyTracking.setter((uint64_t)v4);
}

void (*HasBodyTracking.bodyTracking.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  _OWORD v7[2] = v3;
  *uint64_t v7 = a2;
  size_t v8 = *(void *)(*(void *)(type metadata accessor for BodyTrackingComponent(0) - 8) + 64);
  _OWORD v7[3] = malloc(v8);
  int v9 = malloc(v8);
  v7[4] = v9;
  HasBodyTracking.bodyTracking.getter((uint64_t)v9);
  return HasBodyTracking.bodyTracking.modify;
}

void HasBodyTracking.bodyTracking.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  __n128 v4 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    _s10RealityKit21BodyTrackingComponentVWOcTm_0(*(void *)(*(void *)a1 + 32), (uint64_t)v3, type metadata accessor for BodyTrackingComponent);
    HasBodyTracking.bodyTracking.setter((uint64_t)v3);
    _s10RealityKit21BodyTrackingComponentVWOhTm_0((uint64_t)v4, type metadata accessor for BodyTrackingComponent);
  }
  else
  {
    HasBodyTracking.bodyTracking.setter(*(void *)(*(void *)a1 + 32));
  }
  free(v4);
  free(v3);

  free(v2);
}

void BodyTrackingComponent.Target.hash(into:)()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  __n128 v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v0, (uint64_t)v7, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int BodyTrackingComponent.Target.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, (uint64_t)v8, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance BodyTrackingComponent.Target()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v0, (uint64_t)v7, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BodyTrackingComponent.Target()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, (uint64_t)v8, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1uLL);
    _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

uint64_t BodyTrackingComponent.target.getter@<X0>(uint64_t a1@<X8>)
{
  return _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, a1, type metadata accessor for BodyTrackingComponent.Target);
}

uint64_t BodyTrackingComponent.target.setter(uint64_t a1)
{
  return outlined assign with take of BodyTrackingComponent.Target(a1, v1);
}

uint64_t (*BodyTrackingComponent.target.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BodyTrackingComponent.isPaused.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20));
}

uint64_t BodyTrackingComponent.isPaused.setter(char a1)
{
  uint64_t result = type metadata accessor for BodyTrackingComponent(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*BodyTrackingComponent.isPaused.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BodyTrackingComponent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(unsigned char *)(a2 + *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20)) = 0;

  return outlined assign with take of BodyTrackingComponent.Target(a1, a2);
}

uint64_t BodyTrackingComponent.init(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  v7(a1, 1, 1, v6);
  uint64_t v8 = *(int *)(type metadata accessor for BodyTrackingComponent(0) + 20);
  *(unsigned char *)(a1 + v8) = 0;
  int TargetType = REBodyTrackingComponentGetTargetType();
  if (TargetType == 1)
  {
    REBodyTrackingComponentGetTargetBodyIdentifier();
    UUID.init(uuid:)();
    _s10RealityKit21BodyTrackingComponentVWOhTm_0(a1, type metadata accessor for BodyTrackingComponent.Target);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
    uint64_t v10 = a1;
    uint64_t v11 = 0;
    goto LABEL_5;
  }
  if (!TargetType)
  {
    _s10RealityKit21BodyTrackingComponentVWOhTm_0(a1, type metadata accessor for BodyTrackingComponent.Target);
    uint64_t v10 = a1;
    uint64_t v11 = 1;
LABEL_5:
    v7(v10, v11, 1, v6);
  }
  uint64_t result = REBodyTrackingComponentIsPaused();
  *(unsigned char *)(a1 + v8) = result;
  return result;
}

uint64_t static BodyTrackingComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return BodyTrackingComponent.init(from:)(a1);
}

uint64_t BodyTrackingComponent.__toCore(_:)()
{
  uint64_t v1 = v0;
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, (uint64_t)v8, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    REBodyTrackingComponentSetTargetType();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    REBodyTrackingComponentSetTargetType();
    v19[1] = UUID.uuid.getter();
    char v20 = v10;
    char v21 = v11;
    char v22 = v12;
    char v23 = v13;
    char v24 = v14;
    char v25 = v15;
    char v26 = v16;
    char v27 = v17;
    REBodyTrackingComponentSetTargetBodyIdentifier();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  type metadata accessor for BodyTrackingComponent(0);
  REBodyTrackingComponentSetIsPaused();
  return RENetworkMarkComponentDirty();
}

void static BodyTrackingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 66;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance BodyTrackingComponent@<X0>(uint64_t a1@<X8>)
{
  return BodyTrackingComponent.init(from:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance BodyTrackingComponent(_DWORD *a1@<X8>)
{
  *a1 = 66;
}

uint64_t BodyTrackingComponent.customMirror.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BodyTrackingComponent(0);
  MEMORY[0x270FA5388](v9);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, (uint64_t)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BodyTrackingComponent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22831E350;
  *(void *)(v11 + 32) = 0x746567726174;
  *(void *)(v11 + 40) = 0xE600000000000000;
  *(void *)(v11 + 72) = type metadata accessor for BodyTrackingComponent.Target(0);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v11 + 48));
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(v1, (uint64_t)boxed_opaque_existential_1, type metadata accessor for BodyTrackingComponent.Target);
  *(void *)(v11 + 80) = 0x6465737561507369;
  *(void *)(v11 + 88) = 0xE800000000000000;
  char v13 = *(unsigned char *)(v1 + *(int *)(v9 + 20));
  *(void *)(v11 + 120) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v11 + 96) = v13;
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8E830], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static BodyTrackingComponent.Target.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v11 - 8);
  char v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v16[*(int *)(v17 + 56)];
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a1, (uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a2, v18, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  char v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  if (v20((uint64_t)v16, 1, v19) != 1)
  {
    _s10RealityKit21BodyTrackingComponentVWOcTm_0((uint64_t)v16, (uint64_t)v13, type metadata accessor for BodyTrackingComponent.Target);
    if (v20(v18, 1, v19) != 1)
    {
      char v22 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v22(v10, v13, v4);
      v22(v7, (char *)v18, v4);
      char v21 = static UUID.== infix(_:_:)();
      char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      _s10RealityKit21BodyTrackingComponentVWOhTm_0((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
      return v21 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_6;
  }
  if (v20(v18, 1, v19) != 1)
  {
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
    char v21 = 0;
    return v21 & 1;
  }
  _s10RealityKit21BodyTrackingComponentVWOhTm_0((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  char v21 = 1;
  return v21 & 1;
}

uint64_t specialized static BodyTrackingComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x270FA5388](v11 - 8);
  char v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v16[*(int *)(v17 + 56)];
  uint64_t v27 = a1;
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a1, (uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v28 = a2;
  _s10RealityKit21BodyTrackingComponentVWOcTm_0(a2, v18, type metadata accessor for BodyTrackingComponent.Target);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  char v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  if (v20((uint64_t)v16, 1, v19) != 1)
  {
    _s10RealityKit21BodyTrackingComponentVWOcTm_0((uint64_t)v16, (uint64_t)v13, type metadata accessor for BodyTrackingComponent.Target);
    if (v20(v18, 1, v19) != 1)
    {
      char v21 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
      v21(v10, v13, v4);
      v21(v7, (char *)v18, v4);
      char v22 = static UUID.== infix(_:_:)();
      char v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v23(v10, v4);
      _s10RealityKit21BodyTrackingComponentVWOhTm_0((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
      if (v22) {
        goto LABEL_8;
      }
LABEL_9:
      char v25 = 0;
      return v25 & 1;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for (BodyTrackingComponent.Target, BodyTrackingComponent.Target));
    goto LABEL_9;
  }
  if (v20(v18, 1, v19) != 1) {
    goto LABEL_6;
  }
  _s10RealityKit21BodyTrackingComponentVWOhTm_0((uint64_t)v16, type metadata accessor for BodyTrackingComponent.Target);
LABEL_8:
  uint64_t v24 = type metadata accessor for BodyTrackingComponent(0);
  char v25 = *(unsigned char *)(v27 + *(int *)(v24 + 20)) ^ *(unsigned char *)(v28 + *(int *)(v24 + 20)) ^ 1;
  return v25 & 1;
}

uint64_t outlined init with take of BodyTrackingComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BodyTrackingComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BodyTrackingComponent.Target(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for BodyTrackingComponent.Target);
}

uint64_t _s10RealityKit21BodyTrackingComponentVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BodyTrackingComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for Equatable in BodyTrackingComponent.Target()
{
  return _s10Foundation4UUIDVACSHAAWlTm_2(&lazy protocol witness table cache variable for type BodyTrackingComponent.Target and conformance BodyTrackingComponent.Target, (void (*)(uint64_t))type metadata accessor for BodyTrackingComponent.Target);
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2282B2B60@<X0>(uint64_t a1@<X8>)
{
  return HasBodyTracking.bodyTracking.getter(a1);
}

uint64_t sub_2282B2B88()
{
  return 16;
}

__n128 sub_2282B2B94(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyTrackingComponent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = type metadata accessor for BodyTrackingComponent.Target(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

void *initializeWithCopy for BodyTrackingComponent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithCopy for BodyTrackingComponent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 24))(a1, a2, v14);
      goto LABEL_7;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v12 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *initializeWithTake for BodyTrackingComponent(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for BodyTrackingComponent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 40))(a1, a2, v14);
      goto LABEL_7;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v12 = type metadata accessor for BodyTrackingComponent.Target(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyTrackingComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2282B3354);
}

uint64_t sub_2282B3354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BodyTrackingComponent.Target(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for BodyTrackingComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2282B3438);
}

uint64_t sub_2282B3438(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BodyTrackingComponent.Target(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata completion function for BodyTrackingComponent()
{
  uint64_t result = type metadata accessor for BodyTrackingComponent.Target(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BodyTrackingComponent.Target(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for BodyTrackingComponent(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = type metadata accessor for UUID();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(a1, v4);
  }
  return result;
}

void *initializeWithCopy for BodyTrackingComponent.Target(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithCopy for BodyTrackingComponent.Target(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 24))(a1, a2, v13);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *initializeWithTake for BodyTrackingComponent.Target(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *assignWithTake for BodyTrackingComponent.Target(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 40))(a1, a2, v13);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (identifier: UUID));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyTrackingComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_2282B3D74);
}

uint64_t sub_2282B3D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for BodyTrackingComponent.Target(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_2282B3DF8);
}

uint64_t sub_2282B3DF8(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for BodyTrackingComponent.Target(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t type metadata completion function for BodyTrackingComponent.Target()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t _s10RealityKit21BodyTrackingComponentVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static System.coreCustomSystem(scene:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = RESceneGetECSManagerNullable();
  if (result)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    if ((SystemRegistry.getId(of:)(a2) & 0x100000000) != 0) {
      return 0;
    }
    else {
      return REECSManagerGetCustomSystemAtID();
    }
  }
  return result;
}

uint64_t SceneUpdateContext.Stats.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SceneUpdateContext.scene.getter()
{
  return swift_retain();
}

uint64_t SceneUpdateContext.scene.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*SceneUpdateContext.scene.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SceneUpdateContext.deltaTime.getter()
{
  return *(double *)(v0 + 8);
}

void SceneUpdateContext.deltaTime.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SceneUpdateContext.deltaTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SceneUpdateContext.systemsArePausedInEditor.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

void one-time initialization function for queryBasedUpdateRate()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  char v1 = NSUserDefaults.BOOL(forKey:default:)(0xD000000000000027, 0x800000022835FDF0, 1);

  static SceneUpdateContext.queryBasedUpdateRate = v1 & 1;
}

uint64_t static System.dependencies.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t SceneUpdateContext.entities(matching:when:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  char v6 = *((unsigned char *)v2 + 24);
  uint64_t v11 = *v2;
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  char v14 = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = v3;
  return SceneUpdateContext.entities(matching:updatingSystemWhen:)((uint64_t)v9, a2);
}

uint64_t SceneUpdateContext.entities(matching:updatingSystemWhen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(v2 + 16);
  long long v6 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v6;
  v17[2] = *(_OWORD *)(a1 + 32);
  uint64_t v18 = v4;
  uint64_t result = Scene.performQuery(_:rootEntity:)(v17, 0, (uint64_t)v19);
  uint64_t v9 = v19[0];
  uint64_t v8 = v19[1];
  int v10 = v20;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v5 + 16) = v13;
    if (v10) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v8;
    }
    uint64_t v15 = *(void *)(v5 + 24);
    BOOL v12 = __OFADD__(v15, v14);
    uint64_t v16 = v15 + v14;
    if (!v12)
    {
      *(void *)(v5 + 24) = v16;
LABEL_8:
      *(void *)a2 = v9;
      *(void *)(a2 + 8) = v8;
      *(unsigned char *)(a2 + 16) = v10;
      return result;
    }
  }
  __break(1u);
  return result;
}

void PhysicsSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance PhysicsSystem()
{
}

void NetworkSendSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance NetworkSendSystem()
{
}

void NetworkReceiveSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance NetworkReceiveSystem()
{
}

void AnimationPlaybackSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance AnimationPlaybackSystem()
{
}

void SkeletalPoseSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance SkeletalPoseSystem()
{
}

void MeshDeformerSystem.update(context:)()
{
}

void protocol witness for System.update(context:) in conformance MeshDeformerSystem()
{
}

uint64_t static System.registerSystem()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  long long v7 = static SystemRegistry.shared;
  uint64_t v8 = (void **)((char *)static SystemRegistry.shared + 24);
  uint64_t result = swift_beginAccess();
  uint64_t v10 = v7[3];
  unint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    BOOL v12 = (void *)(v10 + 32);
    unint64_t v13 = v11;
    while (*v12 != a1)
    {
      v12 += 2;
      if (!--v13)
      {
        if (!(v11 >> 31)) {
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_21;
      }
    }
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    uint64_t v3 = *v8;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v8 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_21:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
      *uint64_t v8 = v3;
    }
    unint64_t v16 = v3[2];
    unint64_t v15 = v3[3];
    if (v16 >= v15 >> 1)
    {
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v3);
      *uint64_t v8 = v3;
    }
    v3[2] = v16 + 1;
    uint64_t v17 = &v3[2 * v16];
    unsigned char v17[4] = a1;
    void v17[5] = a2;
    swift_endAccess();
    int v18 = SystemRegistry.getOrAddId(of:)(v4, a2);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a1;
    *(void *)(v19 + 24) = a2;
    uint64_t v30 = v19;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a1;
    *(void *)(v20 + 24) = a2;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    int64_t v22 = *(void *)(v21 + 16);
    if (v22)
    {
      uint64_t v37 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
      uint64_t v23 = 0;
      uint64_t v24 = v37;
      do
      {
        long long aBlock = *(_OWORD *)(v21 + 16 * v23 + 32);
        closure #4 in static System.registerSystem()((uint64_t)&aBlock, v18, &v36);
        uint64_t v25 = v36;
        uint64_t v37 = v24;
        unint64_t v27 = *(void *)(v24 + 16);
        unint64_t v26 = *(void *)(v24 + 24);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          uint64_t v24 = v37;
        }
        ++v23;
        *(void *)(v24 + 16) = v27 + 1;
        *(void *)(v24 + 8 * v27 + 32) = v25;
      }
      while (v22 != v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v34 = partial apply for closure #2 in static System.registerSystem();
    uint64_t v35 = v30;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> (@unowned UnsafeMutableRawPointer);
    char v33 = &block_descriptor_47;
    uint64_t v28 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    uint64_t v34 = partial apply for closure #3 in static System.registerSystem();
    uint64_t v35 = v20;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v32 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned OpaquePointer?, @unowned OpaquePointer) -> ();
    char v33 = &block_descriptor_6_2;
    uint64_t v29 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RERegisterCustomSystem();
    _Block_release(v29);
    _Block_release(v28);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a2;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)&v26 - v10;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t v33 = MEMORY[0x263F8DD08];
  v32[0] = v15;
  outlined init with copy of Any((uint64_t)v32, (uint64_t)v30);
  swift_dynamicCast();
  uint64_t v16 = v28;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  id v17 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v17)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v16);
  }
  int v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
  uint64_t v19 = swift_retain();
  v18(v19, a3, a4);
  if (swift_isClassType()) {
    uint64_t v20 = a3;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, a3);
  }
  else
  {
    type metadata accessor for SystemBox();
    int64_t v22 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v22(v11, v14, a3);
    uint64_t v21 = SystemBox.__allocating_init(system:)((uint64_t)v11);
    v22(v8, v14, a3);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SystemUpdateRateProtocol);
  if (swift_dynamicCast())
  {
    outlined init with take of BindableDataInternal(v30, (uint64_t)v32);
    uint64_t v23 = v33;
    uint64_t v24 = v34;
    __swift_project_boxed_opaque_existential_1(v32, v33);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v24 + 16))(v30, v23, v24);
    uint64_t v28 = *(void *)&v30[0];
    char v29 = BYTE8(v30[0]);
    specialized _SystemUpdateRateProtocol.setUpdateRate(coreCustomSystem:updateRate:)(v27, (uint64_t)&v28);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  }
  else
  {
    uint64_t v31 = 0;
    memset(v30, 0, sizeof(v30));
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for _SystemUpdateRateProtocol?);
    RECustomSystemSetScheduleType();
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, a3);
  }
  return v21;
}

uint64_t SystemBox.__allocating_init(system:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 88), a1);
  return v2;
}

uint64_t closure #3 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v39 - v12;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v39 - v15;
  if (swift_isClassType()) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
    v45[0] = a1;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v13, a4);
    if (a2) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t result = RECustomSystemUpdateContextGetDeltaTime();
    goto LABEL_29;
  }
  type metadata accessor for SystemBox();
  swift_unknownObjectRetain();
  uint64_t v21 = swift_dynamicCastClassUnconditional();
  uint64_t v22 = v21 + *(void *)(*(void *)v21 + 88);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v22, a4);
  swift_release();
  if (!a2) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v46 = MEMORY[0x263F8DD08];
  v45[0] = a2;
  outlined init with copy of Any((uint64_t)v45, (uint64_t)v44);
  swift_dynamicCast();
  uint64_t v18 = v43;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  id v19 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  uint64_t v40 = v17;
  if (v19)
  {
    uint64_t v20 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    uint64_t v20 = Scene.init(coreScene:)(v18);
  }
  uint64_t v24 = v20;
  uint64_t v39 = v10;
  uint64_t v41 = v8;
  uint64_t result = RECustomSystemUpdateContextGetDeltaTime();
  if (v24)
  {
    double v26 = v25;
    swift_retain();
    char SystemsArePausedInEditor = RECustomSystemUpdateContextGetSystemsArePausedInEditor();
    type metadata accessor for SceneUpdateContext.Stats();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + 24) = 0;
    v45[0] = v24;
    *(double *)&v45[1] = v26;
    v45[2] = v28;
    LOBYTE(v46) = SystemsArePausedInEditor;
    uint64_t v29 = v42;
    uint64_t v30 = *(void (**)(void *, uint64_t, uint64_t))(v42 + 24);
    swift_retain();
    v30(v45, a4, v29);
    if (one-time initialization token for queryBasedUpdateRate != -1) {
      swift_once();
    }
    uint64_t v31 = v41;
    if (static SceneUpdateContext.queryBasedUpdateRate == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v39, v16, a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SystemUpdateRateProtocol);
      int v32 = swift_dynamicCast();
      uint64_t v33 = v40;
      if (v32)
      {
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
        if (!v33) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v34 = swift_retain();
        uint64_t v35 = static System.coreCustomSystem(scene:)(v34, a4);
        swift_release();
        if (v35 && *(uint64_t *)(v28 + 16) > 0)
        {
          uint64_t v36 = *(void *)(v28 + 24);
          swift_release();
          if (v36 > 0) {
            RECustomSystemEnqueueUpdateWithDeadline();
          }
          if (!v33) {
            goto LABEL_27;
          }
        }
        else
        {
          swift_release();
          if (!v33)
          {
LABEL_27:
            swift_unknownObjectRetain();
            swift_release();
            type metadata accessor for SystemBox();
            uint64_t v37 = swift_dynamicCastClassUnconditional();
            uint64_t v38 = v37 + *(void *)(*(void *)v37 + 88);
            swift_beginAccess();
            (*(void (**)(uint64_t, char *, uint64_t))(v31 + 40))(v38, v16, a4);
            swift_endAccess();
            swift_release();
            goto LABEL_28;
          }
        }
      }
    }
    else
    {
      swift_release();
      if (!v40) {
        goto LABEL_27;
      }
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, a4);
LABEL_28:
    swift_release();
    return swift_release();
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t System.customSystem(scene:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static System.coreCustomSystem(scene:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t closure #4 in static System.registerSystem()@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = *(ValueMetadata **)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  if (!(v7 >> 62))
  {
    if (v6 != &type metadata for PhysicsSystem)
    {
      if (v6 == &type metadata for NetworkSendSystem)
      {
        unint64_t result = RECustomSystemNetworkSendID();
      }
      else if (v6 == &type metadata for NetworkReceiveSystem)
      {
        unint64_t result = RECustomSystemNetworkReceiveID();
      }
      else if (v6 == &type metadata for AnimationPlaybackSystem)
      {
        unint64_t result = RECustomSystemAnimationPlaybackID();
      }
      else if (v6 == &type metadata for SkeletalPoseSystem)
      {
        unint64_t result = RECustomSkeletalPoseID();
      }
      else if (v6 == &type metadata for MeshDeformerSystem)
      {
        unint64_t result = RECustomSystemMeshDeformerID();
      }
      else
      {
        unint64_t result = SystemRegistry.getOrAddId(of:)((uint64_t)v6, v7);
      }
      goto LABEL_18;
    }
LABEL_17:
    unint64_t result = RECustomSystemPhysicsID();
LABEL_18:
    *a3 = a2;
    a3[1] = result;
    return result;
  }
  if (v7 >> 62 != 1) {
    goto LABEL_17;
  }
  if (v6 == &type metadata for PhysicsSystem)
  {
    unint64_t result = RECustomSystemPhysicsID();
  }
  else if (v6 == &type metadata for NetworkSendSystem)
  {
    unint64_t result = RECustomSystemNetworkSendID();
  }
  else if (v6 == &type metadata for NetworkReceiveSystem)
  {
    unint64_t result = RECustomSystemNetworkReceiveID();
  }
  else if (v6 == &type metadata for AnimationPlaybackSystem)
  {
    unint64_t result = RECustomSystemAnimationPlaybackID();
  }
  else if (v6 == &type metadata for SkeletalPoseSystem)
  {
    unint64_t result = RECustomSkeletalPoseID();
  }
  else if (v6 == &type metadata for MeshDeformerSystem)
  {
    unint64_t result = RECustomSystemMeshDeformerID();
  }
  else
  {
    unint64_t result = SystemRegistry.getOrAddId(of:)((uint64_t)v6, v7 & 0x3FFFFFFFFFFFFFFFLL);
  }
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> (@unowned UnsafeMutableRawPointer)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned OpaquePointer?, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

uint64_t static SystemRegistry.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t SystemRegistry.getId(of:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
LABEL_5:
    unint64_t v6 = 0;
    LOBYTE(v8) = 1;
    return v6 | ((unint64_t)v8 << 32);
  }
  unint64_t v6 = 0;
  unint64_t v7 = (void *)(v4 + 32);
  while (*v7 != a1)
  {
    ++v6;
    v7 += 2;
    if (v5 == v6) {
      goto LABEL_5;
    }
  }
  unint64_t v8 = v6 >> 31;
  if (!(v6 >> 31)) {
    return v6 | ((unint64_t)v8 << 32);
  }
  __break(1u);
  return result;
}

unint64_t SystemRegistry.getOrAddId(of:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(v2 + 16);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
LABEL_5:
    swift_beginAccess();
    uint64_t v10 = *v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v5 = v10;
    }
    id v10[2] = v13 + 1;
    uint64_t v14 = &v10[2 * v13];
    v14[4] = a1;
    v14[5] = a2;
    uint64_t v15 = *v5;
    unint64_t result = swift_endAccess();
    unint64_t v16 = v15[2];
    if (v16 <= 0x80000000) {
      return (v16 - 1);
    }
    __break(1u);
    goto LABEL_14;
  }
  unint64_t result = 0;
  uint64_t v9 = (void *)(v6 + 32);
  while (*v9 != a1)
  {
    ++result;
    v9 += 2;
    if (v7 == result) {
      goto LABEL_5;
    }
  }
  if (result >> 31) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t SystemRegistry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SystemRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Scene.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (static System.coreCustomSystem(scene:)(v3, a1) && RECustomSystemGetSwiftSystemForScene())
  {
    if (swift_isClassType()) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6)
    {
      swift_unknownObjectRetain();
      swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 0, 1, a1);
    }
    else
    {
      type metadata accessor for SystemBox();
      swift_unknownObjectRetain();
      uint64_t v9 = swift_dynamicCastClassUnconditional();
      uint64_t v10 = v9 + *(void *)(*(void *)v9 + 88);
      swift_beginAccess();
      uint64_t v11 = *(void *)(a1 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, v10, a1);
      swift_release();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, a1);
    }
  }
  else
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    return v8(a2, 1, 1, a1);
  }
}

uint64_t sub_2282B5C70()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #2 in static System.registerSystem()(uint64_t a1, uint64_t a2)
{
  return closure #2 in static System.registerSystem()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_2282B5C88()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #3 in static System.registerSystem()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #3 in static System.registerSystem()(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t type metadata accessor for SystemBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_2282B5CD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t initializeWithCopy for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for SceneUpdateContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneUpdateContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUpdateContext()
{
  return &type metadata for SceneUpdateContext;
}

uint64_t type metadata accessor for SceneUpdateContext.Stats()
{
  return self;
}

uint64_t dispatch thunk of static System.dependencies.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of System.init(scene:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of System.update(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SystemUpdateCondition()
{
  return &type metadata for SystemUpdateCondition;
}

ValueMetadata *type metadata accessor for PhysicsSystem()
{
  return &type metadata for PhysicsSystem;
}

ValueMetadata *type metadata accessor for NetworkSendSystem()
{
  return &type metadata for NetworkSendSystem;
}

ValueMetadata *type metadata accessor for NetworkReceiveSystem()
{
  return &type metadata for NetworkReceiveSystem;
}

ValueMetadata *type metadata accessor for AnimationPlaybackSystem()
{
  return &type metadata for AnimationPlaybackSystem;
}

ValueMetadata *type metadata accessor for SkeletalPoseSystem()
{
  return &type metadata for SkeletalPoseSystem;
}

ValueMetadata *type metadata accessor for MeshDeformerSystem()
{
  return &type metadata for MeshDeformerSystem;
}

uint64_t type metadata accessor for SystemRegistry()
{
  return self;
}

uint64_t method lookup function for SystemRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for SystemRegistry);
}

uint64_t dispatch thunk of SystemRegistry.registeredSystems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SystemRegistry.systems.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v63 = (float *)((char *)v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v62 = (void *)((char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v60 = type metadata accessor for __RKEntityInteractionSpecification(0);
  uint64_t v51 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v61 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)v50 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v50 - v10;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)(v12 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = specialized Dictionary.init(dictionaryLiteral:)(v13);
  gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1, v12, v14);
  uint64_t v15 = type metadata accessor for Entity();
  swift_retain();
  v50[1] = v12;
  specialized static Entity.enumerateCore(entity:recursive:block:)(a1, 1, v15, v12, v14);
  uint64_t v64 = v14;
  swift_release();
  swift_beginAccess();
  uint64_t v16 = *(void *)(v12 + 16);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v52 = v16 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v53 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v54 = v16;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  uint64_t v23 = (uint64_t)v59;
  uint64_t v24 = (uint64_t)v61;
  if (v20) {
    goto LABEL_6;
  }
LABEL_7:
  while (2)
  {
    int64_t v27 = v22 + 1;
    if (!__OFADD__(v22, 1))
    {
      if (v27 < v53)
      {
        unint64_t v28 = *(void *)(v52 + 8 * v27);
        ++v22;
        if (v28) {
          goto LABEL_20;
        }
        int64_t v22 = v27 + 1;
        if (v27 + 1 >= v53) {
          goto LABEL_40;
        }
        unint64_t v28 = *(void *)(v52 + 8 * v22);
        if (v28) {
          goto LABEL_20;
        }
        int64_t v22 = v27 + 2;
        if (v27 + 2 >= v53) {
          goto LABEL_40;
        }
        unint64_t v28 = *(void *)(v52 + 8 * v22);
        if (v28)
        {
LABEL_20:
          unint64_t v20 = (v28 - 1) & v28;
          for (unint64_t i = __clz(__rbit64(v28)) + (v22 << 6); ; unint64_t i = v25 | (v22 << 6))
          {
            uint64_t v30 = 8 * i;
            uint64_t v31 = *(void *)(*(void *)(v54 + 48) + v30);
            uint64_t v32 = *(void *)(*(void *)(v54 + 56) + v30);
            int64_t v33 = *(void *)(v32 + 16);
            if (v33)
            {
              unint64_t v57 = v20;
              int64_t v58 = v22;
              uint64_t v69 = MEMORY[0x263F8EE78];
              uint64_t v56 = v31;
              swift_retain();
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
              uint64_t v34 = *(unsigned __int8 *)(v51 + 80);
              uint64_t v55 = v32;
              uint64_t v66 = (v34 + 32) & ~v34;
              uint64_t v35 = v32 + v66;
              uint64_t v65 = *(void *)(v51 + 72);
              uint64_t v36 = v69;
              do
              {
                uint64_t v68 = v36;
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0(v35, v23, type metadata accessor for __RKEntityInteractionSpecification);
                uint64_t v37 = v64;
                swift_retain_n();
                uint64_t v38 = v62;
                specialized __RKEntityTriggerSpecification.remapUUIDs(entityIdentifierMapping:)(v23, v37, v62);
                uint64_t v39 = v60;
                uint64_t v40 = v63;
                __RKEntityActionSpecification.remapUUIDs(entityIdentifierMapping:identifierMapping:)((void (*)(uint64_t))partial apply for closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:), v37, (uint64_t)closure #2 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:), 0, v63);
                uint64_t v41 = (uint64_t *)(v23 + *(int *)(v39 + 24));
                uint64_t v42 = v41[1];
                uint64_t v67 = *v41;
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v38, v24, type metadata accessor for __RKEntityTriggerSpecification);
                _s10RealityKit34__RKEntityInteractionSpecificationVWOcTm_0((uint64_t)v40, v24 + *(int *)(v39 + 20), type metadata accessor for __RKEntityActionSpecification);
                uint64_t v43 = (void *)(v24 + *(int *)(v39 + 24));
                *uint64_t v43 = 0;
                v43[1] = 0;
                swift_bridgeObjectRetain();
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v40, type metadata accessor for __RKEntityActionSpecification);
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0((uint64_t)v38, type metadata accessor for __RKEntityTriggerSpecification);
                outlined init with take of __RKEntityInteractionSpecification(v24, (uint64_t)v11);
                uint64_t v44 = *(int *)(v39 + 24);
                uint64_t v36 = v68;
                uint64_t v45 = &v11[v44];
                swift_release();
                swift_bridgeObjectRelease();
                *(void *)uint64_t v45 = v67;
                *((void *)v45 + 1) = v42;
                _s10RealityKit29__RKEntityActionSpecificationOWOhTm_0(v23, type metadata accessor for __RKEntityInteractionSpecification);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
                  uint64_t v36 = v69;
                }
                unint64_t v47 = *(void *)(v36 + 16);
                unint64_t v46 = *(void *)(v36 + 24);
                if (v47 >= v46 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
                  uint64_t v36 = v69;
                }
                *(void *)(v36 + 16) = v47 + 1;
                uint64_t v48 = v65;
                outlined init with take of __RKEntityInteractionSpecification((uint64_t)v11, v36 + v66 + v47 * v65);
                v35 += v48;
                --v33;
              }
              while (v33);
              swift_bridgeObjectRelease();
              unint64_t v20 = v57;
              int64_t v22 = v58;
              uint64_t v31 = v56;
            }
            else
            {
              swift_retain();
              uint64_t v36 = MEMORY[0x263F8EE78];
            }
            swift_beginAccess();
            if (!static __RKEntityInteractionsComponent.registration) {
              break;
            }
            uint64_t v49 = *((void *)static __RKEntityInteractionsComponent.registration + 3);
            if (*(void *)(v36 + 16))
            {
              if (!REEntityGetCustomComponent() && !MEMORY[0x22A68E460](*(void *)(v31 + 16), v49)
                || !RECustomComponentGetObject())
              {
                break;
              }
              __RKEntityInteractionsComponent.specifications.setter(v36);
            }
            else
            {
              swift_bridgeObjectRelease();
              if (REEntityGetCustomComponent()) {
                REEntityRemoveComponentByClass();
              }
            }
            uint64_t result = swift_release();
            if (!v20) {
              goto LABEL_7;
            }
LABEL_6:
            unint64_t v25 = __clz(__rbit64(v20));
            v20 &= v20 - 1;
          }
          swift_release();
          uint64_t result = swift_bridgeObjectRelease();
          if (!v20) {
            continue;
          }
          goto LABEL_6;
        }
        int64_t v29 = v27 + 3;
        if (v29 < v53)
        {
          unint64_t v28 = *(void *)(v52 + 8 * v29);
          if (v28)
          {
            int64_t v22 = v29;
            goto LABEL_20;
          }
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_42;
            }
            if (v22 >= v53) {
              break;
            }
            unint64_t v28 = *(void *)(v52 + 8 * v22);
            ++v29;
            if (v28) {
              goto LABEL_20;
            }
          }
        }
      }
LABEL_40:
      swift_release();
      swift_release();
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_2282B676C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t gatherInteractionSpecificationsAndUpdateUuid #1 (from:) in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = &v22[-v10];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v22[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
  {
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (Object)
      {
        uint64_t v17 = *(void *)(Object + 16);
        outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v22);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = __RKEntityInteractionsComponent.decodedJSON()();
        }
        swift_bridgeObjectRetain();
        outlined destroy of __RKEntityInteractionsComponent((uint64_t)v22);
        if (!*(void *)(v18 + 16)) {
          goto LABEL_10;
        }
LABEL_7:
        uint64_t v19 = (uint64_t *)(a2 + 16);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v23 = *v19;
        *uint64_t v19 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, a1, isUniquelyReferenced_nonNull_native);
        *uint64_t v19 = v23;
        swift_release();
        swift_bridgeObjectRelease();
        swift_endAccess();
        goto LABEL_11;
      }
    }
  }
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (*(void *)(MEMORY[0x263F8EE78] + 16)) {
    goto LABEL_7;
  }
LABEL_10:
  swift_bridgeObjectRelease();
LABEL_11:
  Entity.__interactionIdentifier.getter((uint64_t)v11);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1) {
    return outlined destroy of UUID?((uint64_t)v11);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v15, v11, v12);
  swift_beginAccess();
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)((uint64_t)v15, (uint64_t *)(a3 + 16), (uint64_t)v8);
  swift_endAccess();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  Entity.__interactionIdentifier.setter((uint64_t)v8);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t static UuidRemapHelper.getOrAddUuidMapping(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *a2;
  if (!*(void *)(*a2 + 16) || (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) == 0))
  {
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v20(v16, 1, 1, v6, v14);
LABEL_6:
    outlined destroy of UUID?((uint64_t)v16);
    UUID.init()();
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v21(v9, a1, v6);
    v21(v12, a3, v6);
    ((void (*)(char *, void, uint64_t, uint64_t))v20)(v12, 0, 1, v6);
    return specialized Dictionary.subscript.setter((uint64_t)v12, (uint64_t)v9);
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v16, *(void *)(v17 + 56) + *(void *)(v7 + 72) * v18, v6);
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))v20)(v16, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1, v6) == 1) {
    goto LABEL_6;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v16, v6);
}

uint64_t closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  static UuidRemapHelper.getOrAddUuidMapping(_:_:)(a1, v5, a3);
  return swift_endAccess();
}

uint64_t partial apply for closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(a1, v2, a2);
}

id AsyncUpdateStreamContainer.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return AsyncUpdateStreamContainer.init(name:)(a1, a2);
}

id AsyncUpdateStreamContainer.init(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = direct field offset for AsyncUpdateStreamContainer.streams;
  type metadata accessor for AsyncUpdateStream();
  uint64_t v6 = v2;
  *(void *)&v2[v5] = static Array._allocateUninitialized(_:)();
  uint64_t v7 = &v6[direct field offset for AsyncUpdateStreamContainer.name];
  *(void *)uint64_t v7 = a1;
  *((void *)v7 + 1) = a2;

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for AsyncUpdateStreamContainer();
  return objc_msgSendSuper2(&v9, sel_init);
}

uint64_t AsyncUpdateStreamContainer.numberOfStreams.getter()
{
  swift_beginAccess();
  uint64_t updated = type metadata accessor for AsyncUpdateStream();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = MEMORY[0x22A688F10](v1, updated);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t AsyncUpdateStreamContainer.makeUpdater()()
{
  type metadata accessor for AsyncUpdateStream();
  uint64_t updated = type metadata accessor for AsyncUpdateStreamContainer();
  id v2 = v0;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = swift_allocObject();
  AsyncUpdateStream.init<A>(parent:)(v2, updated, WitnessTable);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)logger);
  uint64_t v6 = (char *)v2;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    objc_super v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v14[0] = v10;
    *(_DWORD *)objc_super v9 = 136446210;
    uint64_t v12 = *(void *)&v6[direct field offset for AsyncUpdateStreamContainer.name];
    unint64_t v11 = *(void *)&v6[direct field offset for AsyncUpdateStreamContainer.name + 8];
    swift_bridgeObjectRetain();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v7, v8, "AsyncUpdateContainer[\"%{public}s\"]: Making and adding new async updater...", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v10, -1, -1);
    MEMORY[0x22A696500](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v15 = v4;
  swift_beginAccess();
  type metadata accessor for Array();
  swift_retain();
  Array.append(_:)();
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
  return v4;
}

uint64_t AsyncUpdateStream.__allocating_init<A>(parent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  AsyncUpdateStream.init<A>(parent:)(a1, a2, a3);
  return v6;
}

uint64_t AsyncUpdateStreamContainer.publishUpdate(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  objc_super v9 = (char *)&v32 - v8;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v11(v9, (char *)a1, v3);
  uint64_t v12 = v1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    int v35 = v15;
    uint64_t v17 = v16;
    uint64_t v36 = swift_slowAlloc();
    v39[0] = v36;
    *(_DWORD *)uint64_t v17 = 136315394;
    int64_t v33 = v11;
    os_log_t v34 = v13;
    id v37 = v12;
    uint64_t v19 = *(void *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.name);
    unint64_t v18 = *(void *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.name + 8);
    swift_bridgeObjectRetain();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v33(v6, v9, v3);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v39);
    uint64_t v12 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    uint64_t v13 = v34;
    _os_log_impl(&dword_227DD2000, v34, (os_log_type_t)v35, "AsyncUpdateContainer[\"%s\"]: Publishing new value: %{public}s", (uint8_t *)v17, 0x16u);
    uint64_t v22 = v36;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v22, -1, -1);
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  uint64_t v23 = (void *)((char *)v12 + direct field offset for AsyncUpdateStreamContainer.streams);
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t updated = type metadata accessor for AsyncUpdateStream();
  uint64_t v26 = swift_bridgeObjectRetain();
  if (MEMORY[0x22A688F30](v26, updated))
  {
    uint64_t v27 = 4;
    do
    {
      uint64_t v28 = v27 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        uint64_t v30 = v27 - 3;
        if (__OFADD__(v28, 1)) {
          goto LABEL_14;
        }
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v30 = v27 - 3;
        if (__OFADD__(v28, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      AsyncUpdateStream.publishUpdate(_:)(a1);
      swift_release();
      ++v27;
    }
    while (v30 != MEMORY[0x22A688F30](v24, updated));
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AsyncUpdateStreamContainer.finish()()
{
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  unint64_t v46 = (char *)v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v44 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)logger);
  uint64_t v7 = v0;
  v39[2] = v6;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v49 = v3;
    unint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = v1;
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)unint64_t v11 = 136446210;
    uint64_t v48 = (uint64_t)(v11 + 4);
    uint64_t v15 = *(void *)&v7[direct field offset for AsyncUpdateStreamContainer.name];
    unint64_t v14 = *(void *)&v7[direct field offset for AsyncUpdateStreamContainer.name + 8];
    swift_bridgeObjectRetain();
    v52[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v8, v9, "AsyncUpdateContainer[\"%{public}s\"].finish(): Clearing all async updaters...", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v13;
    uint64_t v1 = v12;
    MEMORY[0x22A696500](v16, -1, -1);
    uint64_t v17 = v11;
    uint64_t v3 = v49;
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
  }
  AsyncUpdateStreamContainer.logMyself()();
  v39[1] = v7;
  unint64_t v18 = &v7[direct field offset for AsyncUpdateStreamContainer.streams];
  swift_beginAccess();
  uint64_t v19 = *(void *)v18;
  uint64_t updated = type metadata accessor for AsyncUpdateStream();
  uint64_t v21 = swift_bridgeObjectRetain();
  if (MEMORY[0x22A688F30](v21, updated))
  {
    unint64_t v22 = type metadata accessor for OS_dispatch_queue();
    uint64_t v42 = v52;
    unint64_t v43 = v22;
    uint64_t v41 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v40 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v23 = 4;
    uint64_t v24 = v44;
    unint64_t v25 = v46;
    do
    {
      uint64_t v26 = v23 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v28 = *(void *)(v19 + 8 * v23);
        swift_retain();
        uint64_t v29 = v23 - 3;
        if (__OFADD__(v26, 1)) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v28 = _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v29 = v23 - 3;
        if (__OFADD__(v26, 1))
        {
LABEL_14:
          __break(1u);
          break;
        }
      }
      uint64_t v49 = v29;
      uint64_t v48 = static OS_dispatch_queue.main.getter();
      v52[2] = partial apply for closure #1 in AsyncUpdateStreamContainer.finish();
      v52[3] = v28;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      v52[0] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v52[1] = &block_descriptor_48;
      uint64_t v30 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v50 = MEMORY[0x263F8EE78];
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      uint64_t v31 = updated;
      uint64_t v32 = v47;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      int64_t v33 = (void *)v48;
      MEMORY[0x22A689420](0, v24, v25, v30);
      _Block_release(v30);
      swift_release();

      uint64_t v34 = v32;
      uint64_t updated = v31;
      (*v41)(v25, v34);
      (*v40)(v24, v45);
      swift_release();
      uint64_t v35 = MEMORY[0x22A688F30](v19, v31);
      ++v23;
    }
    while (v49 != v35);
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for Array();
  Array.removeAll(keepingCapacity:)(0);
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_227DD2000, v36, v37, "... done clearing async updaters.", v38, 2u);
    MEMORY[0x22A696500](v38, -1, -1);
  }
}

void AsyncUpdateStreamContainer.onTerminated(_:)()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = v0;
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v11[0] = v10;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v6 = *(void *)&v2[direct field offset for AsyncUpdateStreamContainer.name];
    unint64_t v7 = *(void *)&v2[direct field offset for AsyncUpdateStreamContainer.name + 8];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    type metadata accessor for UUID();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v3, v4, "AsyncUpdateContainer[\"%{public}s\"]: Removing stream id=%{public}s...", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v10, -1, -1);
    MEMORY[0x22A696500](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  type metadata accessor for AsyncUpdateStream();
  type metadata accessor for Array();
  swift_getWitnessTable();
  swift_getWitnessTable();
  RangeReplaceableCollection<>.removeAll(where:)();
  swift_endAccess();
  AsyncUpdateStreamContainer.logMyself()();
}

void AsyncUpdateStreamContainer.logMyself()()
{
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)logger);
  uint64_t v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    v32[0] = v6;
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v7 = *(void *)&v2[direct field offset for AsyncUpdateStreamContainer.name];
    unint64_t v8 = *(void *)&v2[direct field offset for AsyncUpdateStreamContainer.name + 8];
    swift_bridgeObjectRetain();
    v31[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2050;
    swift_beginAccess();
    uint64_t updated = type metadata accessor for AsyncUpdateStream();
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = MEMORY[0x22A688F10](v10, updated);
    swift_bridgeObjectRelease();
    v31[0] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_227DD2000, v3, v4, "AsyncUpdateContainer name=\"%{public}s\" has %{public}ld active streams: {", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v6, -1, -1);
    MEMORY[0x22A696500](v5, -1, -1);
  }
  else
  {
  }
  uint64_t v12 = &v2[direct field offset for AsyncUpdateStreamContainer.streams];
  swift_beginAccess();
  uint64_t v13 = *(void *)v12;
  uint64_t v14 = type metadata accessor for AsyncUpdateStream();
  uint64_t v15 = swift_bridgeObjectRetain();
  if (MEMORY[0x22A688F30](v15, v14))
  {
    uint64_t v16 = 4;
    uint64_t v30 = v14;
    do
    {
      uint64_t v17 = v16 - 4;
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        swift_retain();
        uint64_t v19 = v16 - 3;
        if (__OFADD__(v17, 1)) {
          goto LABEL_16;
        }
      }
      else
      {
        _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v19 = v16 - 3;
        if (__OFADD__(v17, 1))
        {
LABEL_16:
          __break(1u);
          break;
        }
      }
      swift_retain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        v31[0] = v23;
        *(_DWORD *)uint64_t v22 = 136446210;
        type metadata accessor for UUID();
        _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v31);
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_227DD2000, v20, v21, "Got AsyncUpdateStream: \"%{public}s\"", (uint8_t *)v22, 0xCu);
        swift_arrayDestroy();
        uint64_t v26 = v23;
        uint64_t v14 = v30;
        MEMORY[0x22A696500](v26, -1, -1);
        MEMORY[0x22A696500](v22, -1, -1);
        swift_release();
      }
      else
      {

        swift_release_n();
      }
      ++v16;
    }
    while (v19 != MEMORY[0x22A688F30](v13, v14));
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_227DD2000, v27, v28, "} // AsyncUpdateContainer", v29, 2u);
    MEMORY[0x22A696500](v29, -1, -1);
  }
}

id AsyncUpdateStreamContainer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void AsyncUpdateStreamContainer.init()()
{
}

void @objc AsyncUpdateStreamContainer.init()()
{
}

id AsyncUpdateStreamContainer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncUpdateStreamContainer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc AsyncUpdateStreamContainer.__ivar_destroyer()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t AsyncUpdateStream.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for AsyncUpdateStream.id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t key path setter for AsyncUpdateStream.stream : <A>AsyncUpdateStream<A>(uint64_t a1)
{
  type metadata accessor for AsyncStream();
  uint64_t v2 = type metadata accessor for Optional();
  __n128 v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))((char *)&v8 - v4, a1, v3);
  return AsyncUpdateStream.stream.setter((uint64_t)v5);
}

uint64_t AsyncUpdateStream.stream.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  type metadata accessor for AsyncStream();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AsyncUpdateStream.stream.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  swift_beginAccess();
  type metadata accessor for AsyncStream();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t AsyncUpdateStream.onPublishToStream.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 104));
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t AsyncUpdateStream.onFinish.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 112));
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t AsyncUpdateStream.parent.getter()
{
  return MEMORY[0x22A696620](v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t AsyncUpdateStream.init<A>(parent:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a2;
  os_log_type_t v21 = a1;
  uint64_t v19 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v5 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for AsyncStream();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - v10;
  UUID.init()();
  uint64_t v12 = v3 + *(void *)(*(void *)v3 + 96);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
  v13(v12, 1, 1, v8);
  uint64_t v14 = (void *)(v3 + *(void *)(*(void *)v3 + 104));
  void *v14 = 0;
  v14[1] = 0;
  uint64_t v15 = (void *)(v3 + *(void *)(*(void *)v3 + 112));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(void *)(v3 + *(void *)(*(void *)v3 + 120) + 8) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v24 = v20;
  uint64_t v25 = a3;
  uint64_t v16 = v21;
  uint64_t v26 = v3;
  uint64_t v27 = v21;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F580], v19);
  AsyncStream.init(_:bufferingPolicy:_:)();

  v13((uint64_t)v11, 0, 1, v8);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 40))(v12, v11, v23);
  swift_endAccess();
  return v3;
}

uint64_t closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a3;
  uint64_t v36 = a5;
  uint64_t v34 = a4;
  uint64_t v37 = a1;
  uint64_t v32 = *(void *)(*(void *)a2 + 80);
  uint64_t v7 = v32;
  uint64_t v8 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __n128 v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)v31 - v12;
  int64_t v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v33((char *)v31 - v12, a1, v8, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v31[1] = v14 + v10;
  uint64_t v15 = (char *)swift_allocObject();
  uint64_t v16 = v34;
  *((void *)v15 + 2) = v7;
  *((void *)v15 + 3) = v16;
  *((void *)v15 + 4) = v36;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v17(&v15[v14], v13, v8);
  uint64_t v18 = (uint64_t *)(a2 + *(void *)(*(void *)a2 + 104));
  uint64_t v19 = *v18;
  *uint64_t v18 = (uint64_t)partial apply for closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  v18[1] = (uint64_t)v15;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v19);
  ((void (*)(char *, uint64_t, uint64_t))v33)(v13, v37, v8);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v32;
  *((void *)v20 + 3) = v16;
  uint64_t v21 = v16;
  uint64_t v22 = v36;
  *((void *)v20 + 4) = v36;
  v17(&v20[v14], v13, v8);
  uint64_t v23 = (uint64_t *)(a2 + *(void *)(*(void *)a2 + 112));
  uint64_t v24 = *v23;
  *uint64_t v23 = (uint64_t)partial apply for closure #2 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  v23[1] = (uint64_t)v20;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v24);
  uint64_t v25 = (void *)swift_allocObject();
  _OWORD v25[2] = v21;
  void v25[3] = v22;
  void v25[4] = a2;
  swift_retain();
  AsyncStream.Continuation.onTermination.setter();
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)logger);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl(&dword_227DD2000, v27, v28, "setUp() called...", v29, 2u);
    MEMORY[0x22A696500](v29, -1, -1);
  }

  *(void *)(a2 + *(void *)(*(void *)a2 + 120) + 8) = v22;
  return swift_unknownObjectWeakAssign();
}

uint64_t closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a3, v10);
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  __n128 v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v18[0] - 8);
  MEMORY[0x270FA5388](v18[0]);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  void v15[3] = a4;
  _DWORD v15[4] = a2;
  aBlock[4] = partial apply for closure #1 in closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_14_1;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = MEMORY[0x263F8EE78];
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x22A689420](0, v13, v10, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void))(v11 + 8))(v13, v18[0]);
  return swift_release();
}

void AsyncUpdateStream.publishUpdate(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v21 - v8;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)logger);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v11(v9, v24, v3);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v26 = v23;
    uint64_t v22 = v14;
    *(_DWORD *)uint64_t v14 = 136446210;
    uint64_t v21 = v14 + 4;
    v11(v6, (uint64_t)v9, v3);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    uint64_t v17 = v22;
    _os_log_impl(&dword_227DD2000, v12, v13, "Publishing new value %{public}s to async stream...", v22, 0xCu);
    uint64_t v18 = v23;
    swift_arrayDestroy();
    MEMORY[0x22A696500](v18, -1, -1);
    MEMORY[0x22A696500](v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  }

  uint64_t v19 = (uint64_t *)(v2 + *(void *)(*(void *)v2 + 104));
  uint64_t v20 = (void (*)(uint64_t))*v19;
  if (*v19)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v19);
    v20(v24);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v20);
  }
}

Swift::Void __swiftcall AsyncUpdateStream.finish()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227DD2000, v3, v4, "Terminate called...", v5, 2u);
    MEMORY[0x22A696500](v5, -1, -1);
  }

  uint64_t v6 = (uint64_t *)(v1 + *(void *)(*(void *)v1 + 112));
  uint64_t v7 = (void (*)(uint64_t))*v6;
  if (*v6)
  {
    uint64_t v8 = outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v6);
    v7(v8);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
  }
}

void AsyncUpdateStream.tearDown()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for logger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_227DD2000, v3, v4, "AsyncUpdateStream: tearDown() called...", v5, 2u);
    MEMORY[0x22A696500](v5, -1, -1);
  }

  uint64_t v6 = (void *)MEMORY[0x22A696620](v0 + *(void *)(*(void *)v0 + 120));
  oslog = Logger.logObject.getter();
  if (!v6)
  {
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_227DD2000, oslog, v13, "Parent container was already nil!", v14, 2u);
      MEMORY[0x22A696500](v14, -1, -1);
    }
    goto LABEL_12;
  }
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_227DD2000, oslog, v7, "Calling parent onTerminated()...", v8, 2u);
    MEMORY[0x22A696500](v8, -1, -1);
  }

  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 120);
  uint64_t v10 = MEMORY[0x22A696620](v9);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 8);
    oslog = v10;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, ObjectType, v11);
LABEL_12:
  }
}

uint64_t AsyncUpdateStream.deinit()
{
  uint64_t v1 = v0 + direct field offset for AsyncUpdateStream.id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for AsyncStream();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + *(void *)(*(void *)v0 + 104)));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + *(void *)(*(void *)v0 + 112)));
  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + *(void *)(*(void *)v0 + 120));
  return v0;
}

uint64_t AsyncUpdateStream.__deallocating_deinit()
{
  AsyncUpdateStream.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance AsyncUpdateStream<A>@<X0>(uint64_t a1@<X8>)
{
  return AsyncUpdateStream.id.getter(a1);
}

uint64_t type metadata accessor for AsyncUpdateStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AsyncUpdateStreamContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in AsyncUpdateStreamContainer.onTerminated(_:)()
{
  return static UUID.== infix(_:_:)() & 1;
}

void specialized AsyncUpdateStreamContainer.init()()
{
}

uint64_t partial apply for closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  return closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in AsyncUpdateStream<A>()
{
  return _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2282B9E28@<X0>(uint64_t a1@<X8>)
{
  return AsyncUpdateStream.stream.getter(a1);
}

uint64_t sub_2282B9E50()
{
  return 8;
}

void *sub_2282B9E5C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t dispatch thunk of AsyncUpdateStreamObserver.onTerminated(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Finishable.finish()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for AsyncUpdateStreamContainer()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for AsyncUpdateStreamContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AsyncUpdateStreamContainer);
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.__allocating_init(name:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.numberOfStreams.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.makeUpdater()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.publishUpdate(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.finish()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of AsyncUpdateStreamContainer.onTerminated(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t type metadata completion function for AsyncUpdateStream()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    type metadata accessor for AsyncStream();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for AsyncUpdateStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AsyncUpdateStream);
}

uint64_t dispatch thunk of AsyncUpdateStream.stream.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AsyncUpdateStream.__allocating_init<A>(parent:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of AsyncUpdateStream.publishUpdate(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of AsyncUpdateStream.finish()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t partial apply for closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for AsyncStream.Continuation() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v5, v3);
}

uint64_t objectdestroyTm_7()
{
  uint64_t v1 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

void partial apply for closure #2 in closure #1 in AsyncUpdateStream.init<A>(parent:)()
{
}

uint64_t partial apply for closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(uint64_t a1)
{
  return closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2282BA33C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

void partial apply for closure #1 in closure #3 in closure #1 in AsyncUpdateStream.init<A>(parent:)()
{
}

void UnlitMaterial.color.getter(uint64_t a1@<X8>)
{
  v5[3] = &type metadata for UnlitMaterial;
  v5[4] = &protocol witness table for UnlitMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v5[0] + 16);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v3 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v5, v4, v3, a1);
}

uint64_t sub_2282BA42C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 172, 7);
}

void UnlitMaterial.blending.getter(uint64_t a1@<X8>)
{
  if (*(_WORD *)(v1 + 152))
  {
    uint64_t v5 = v1;
    outlined init with copy of UnlitMaterial(v1, (uint64_t)v18);
    float v6 = 1.0;
    if (RELinkedOnOrAfterFall2024OSVersions())
    {
      unint64_t v7 = specialized Material.getFloatParameter(key:)(0x537974696361706FLL, 0xEC000000656C6163);
      if ((v7 & 0x100000000) != 0) {
        float v6 = 1.0;
      }
      else {
        float v6 = *(float *)&v7;
      }
    }
    specialized Material.getTextureParameter(key:)(0x4F65727574786574, 0xEE00797469636170, (uint64_t)&v14);
    uint64_t v8 = (uint64_t)v15;
    if (v15)
    {
      int v4 = v17;
      uint64_t v3 = v16;
      uint64_t v9 = v14;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v3 = 0;
      int v4 = 0;
    }
    outlined copy of MaterialParameters.Texture?(v9, (uint64_t)v15);
    outlined destroy of UnlitMaterial((uint64_t)v18);
    outlined consume of MaterialParameters.Texture?(v9, v8);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      v18[3] = &type metadata for UnlitMaterial;
      _WORD v18[4] = &protocol witness table for UnlitMaterial;
      v18[0] = swift_allocObject();
      outlined init with copy of UnlitMaterial(v5, v18[0] + 16);
      uint64_t v11 = *(void *)(v5 + 80);
      uint64_t v10 = *(void **)(v5 + 88);
      swift_bridgeObjectRetain();
      PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v18, v11, v10, (uint64_t)&v14);
      uint64_t v12 = (CGColor *)v14;
      outlined consume of MaterialParameters.Texture?(v15, v16);
      AlphCGFloat a = CGColorGetAlpha(v12);

      float v6 = Alpha;
    }
    *(void *)a1 = LODWORD(v6);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
  }
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = v4;
}

uint64_t UnlitMaterial.opacityThreshold.getter()
{
  unint64_t v0 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  return v0 | ((HIDWORD(v0) & 1) << 32);
}

void UnlitMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  *a1 = *(void *)(v1 + 112) == 1;
}

uint64_t UnlitMaterial.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v17 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (v7)
  {
    uint64_t v8 = v7;
    __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
    __int16 v10 = FeatureFlags;
    if ((FeatureFlags & 8) != 0) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    if ((FeatureFlags & 8) != 0) {
      char v12 = 1;
    }
    else {
      char v12 = ~(2 * FeatureFlags) & 2;
    }
    BOOL v13 = (FeatureFlags & 4) == 0;
    if ((FeatureFlags & 0x10) != 0) {
      char v14 = 1;
    }
    else {
      char v14 = 2;
    }
    type metadata accessor for UnlitMaterial.Program();
    uint64_t v15 = swift_allocObject();
    *(unsigned char *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + 17) = v12;
    *(void *)(v15 + 24) = v8;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = v8;
    *(void *)(a3 + 48) = v17;
    *(unsigned char *)(a3 + 56) = v4;
    *(void *)(a3 + 64) = v5;
    *(void *)(a3 + 72) = v6;
    *(void *)(a3 + 80) = 0x6E6954726F6C6F63;
    *(void *)(a3 + 88) = 0xE900000000000074;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(unsigned char *)(a3 + 128) = 1;
    *(_WORD *)(a3 + 129) = 257;
    *(void *)(a3 + 136) = v15;
    *(void *)(a3 + 144) = 0;
    *(_WORD *)(a3 + 152) = v10;
    *(unsigned char *)(a3 + 154) = v11;
    *(unsigned char *)(a3 + 155) = v14;
    return swift_retain();
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void specialized MaterialWithShaderCache.shaderParameters.setter(unsigned int a1)
{
  if (*(unsigned __int16 *)(v1 + 152) != (unsigned __int16)a1) {
    goto LABEL_12;
  }
  int v2 = *(unsigned __int8 *)(v1 + 154);
  int v3 = *(unsigned __int8 *)(v1 + 155);
  if (v2 == 2)
  {
    if (BYTE2(a1) != 2) {
      goto LABEL_12;
    }
  }
  else if (BYTE2(a1) == 2 || (HIWORD(a1) & 1) != (v2 & 1))
  {
    goto LABEL_12;
  }
  unsigned int v4 = HIBYTE(a1);
  if (v3 == 2)
  {
    if (v4 != 2) {
LABEL_12:
    }
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(a1);
  }
  else
  {
    BOOL v5 = (v3 & 1) == 0;
    if (v4 == 2 || ((v5 ^ ((a1 & 0x1000000) >> 24)) & 1) == 0) {
      goto LABEL_12;
    }
  }
}

uint64_t UnlitMaterial.__usesTransparency.getter()
{
  return *(_WORD *)(v0 + 152) & 1;
}

void UnlitMaterial.Program.Descriptor.init()(_WORD *a1@<X8>)
{
  *a1 = 513;
}

uint64_t UnlitMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of __REAssetService?(v1, (uint64_t)&v5);
  if (v6) {
    return outlined init with take of BindableDataInternal(&v5, a1);
  }
  outlined destroy of __REAssetService?((uint64_t)&v5);
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, a1);
  outlined destroy of __REAssetService?(v1);
  return outlined init with copy of __REAssetService(a1, v1);
}

uint64_t UnlitMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t UnlitMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  char v3 = *(unsigned char *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 64);
  long long v5 = *(void **)(v1 + 72);
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  id v6 = v5;

  return swift_bridgeObjectRetain();
}

uint64_t UnlitMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = v2;
  *(unsigned char *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  *(void *)(v1 + 72) = v5;
  return result;
}

uint64_t (*UnlitMaterial.__parameterBlock.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double key path getter for UnlitMaterial.color : UnlitMaterial@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD v9[3] = &type metadata for UnlitMaterial;
  v9[4] = &protocol witness table for UnlitMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(a1, v9[0] + 16);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v9, v5, v4, (uint64_t)&v10);
  uint64_t v6 = v12;
  int v7 = v13;
  *(void *)a2 = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 8) = v11;
  *(void *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

void key path setter for UnlitMaterial.color : UnlitMaterial(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  char v3 = *(void **)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 32);
  v6[0] = *(id *)a1;
  v6[1] = v1;
  long long v6[2] = v2;
  v6[3] = v3;
  int v7 = v4;
  id v5 = v6[0];
  outlined copy of MaterialParameters.Texture?(v1, (uint64_t)v2);
  UnlitMaterial.color.setter((uint64_t)v6);
}

void UnlitMaterial.color.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v2;
  int v17 = *(_DWORD *)(a1 + 32);
  v13[3] = &type metadata for UnlitMaterial;
  v13[4] = &protocol witness table for UnlitMaterial;
  v13[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v13[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v13, 0, 0, (uint64_t)v14);
  int v4 = (void *)v14[0];
  char v3 = (void *)v14[1];
  uint64_t v5 = v14[2];
  uint64_t v6 = v14[3];
  int v7 = v15;
  outlined init with take of MaterialParameters.Texture?((uint64_t)v16 + 8, (uint64_t)v13);
  outlined init with take of MaterialParameters.Texture?((uint64_t)v13, (uint64_t)v14);
  v11[0] = v3;
  v11[1] = v5;
  void v11[2] = v6;
  int v12 = v7;
  UnlitMaterial.checkMultiUV(_:_:)((uint64_t)v14, (uint64_t)v11);
  swift_bridgeObjectRetain();
  specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v16);
  swift_bridgeObjectRelease();
  outlined release of PhysicallyBasedMaterial.BaseColor((uint64_t)v16);
  if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
  {
    uint64_t v8 = (CGColor *)specialized Material.getColor(name:)(*(void *)(v1 + 80), *(void *)(v1 + 88));
    if (v8)
    {
      uint64_t v9 = v8;
      AlphCGFloat a = CGColorGetAlpha(v8);

      LOBYTE(v8) = Alpha < 1.0;
    }
    UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v8);
  }

  outlined consume of MaterialParameters.Texture?(v3, v5);
}

void UnlitMaterial.checkMultiUV(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 8) && *(void *)(a1 + 16))
  {
    if ((*(unsigned char *)(v2 + 155) & 1) == 0) {
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16) | 0x1000000);
    }
  }
  else
  {
    v13[3] = &type metadata for UnlitMaterial;
    v13[4] = &protocol witness table for UnlitMaterial;
    v13[0] = swift_allocObject();
    outlined init with copy of UnlitMaterial(v2, v13[0] + 16);
    PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v13, (uint64_t)v14);
    id v6 = v14[0];
    id v7 = v14[1];
    id v8 = v14[2];
    if (v3 && v5)
    {
      id v9 = v4;
      swift_retain();
      if (REMaterialParameterBlockValueNumberOfTexturesWithNonZeroUVIndex() == 1)
      {
        int v10 = *(unsigned __int8 *)(v2 + 155);
        if (v10 == 2 || (v10 & 1) != 0) {
          specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(*(unsigned __int16 *)(v2 + 152) | (*(unsigned __int8 *)(v2 + 154) << 16));
        }
      }

      outlined consume of MaterialParameters.Texture?(v7, (uint64_t)v8);
      long long v11 = v4;
      uint64_t v12 = v3;
    }
    else
    {

      long long v11 = v7;
      uint64_t v12 = (uint64_t)v8;
    }
    outlined consume of MaterialParameters.Texture?(v11, v12);
  }
}

void (*UnlitMaterial.color.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  _OWORD v7[3] = &type metadata for UnlitMaterial;
  v7[4] = &protocol witness table for UnlitMaterial;
  v7[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial(v1, v7[0] + 16);
  uint64_t v5 = *(void *)(v1 + 80);
  int v4 = *(void **)(v1 + 88);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v7, v5, v4, (uint64_t)v3);
  return UnlitMaterial.color.modify;
}

void UnlitMaterial.color.modify(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  int v4 = (*a1)[1];
  uint64_t v6 = (uint64_t)(*a1)[2];
  uint64_t v5 = (*a1)[3];
  int v7 = *((_DWORD *)*a1 + 8);
  v11[0] = v3;
  v11[1] = v4;
  void v11[2] = v6;
  void v11[3] = v5;
  int v12 = v7;
  if (a2)
  {
    id v8 = v3;
    outlined copy of MaterialParameters.Texture?(v4, v6);
    UnlitMaterial.color.setter((uint64_t)v11);
    id v9 = v2[1];
    uint64_t v10 = (uint64_t)v2[2];

    outlined consume of MaterialParameters.Texture?(v9, v10);
  }
  else
  {
    UnlitMaterial.color.setter((uint64_t)v11);
  }

  free(v2);
}

CGColorRef UnlitMaterial.__tintColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 96);
  if (v1)
  {
    CGColorRef GenericRGB = *(CGColorRef *)(v0 + 96);
  }
  else
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    uint64_t v1 = 0;
  }
  id v3 = v1;
  return GenericRGB;
}

void UnlitMaterial.__tintColor.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = v1[10];
  uint64_t v4 = v1[11];
  id v23 = (id)v1[13];
  if (v23)
  {
    id v6 = a1;
    id v7 = v23;
    id v8 = (CGColor *)v6;
    id v9 = v7;
    swift_bridgeObjectRetain();
    specialized SIMD4<>.init(_:)(v8);
    float32x4_t v22 = v10;
    long long v11 = (CGColor *)v9;
    specialized SIMD4<>.init(_:)(v11);
    uint64_t v13 = specialized SIMD4<>.cgColor.getter((__n128)vmulq_f32(v22, v12));

    id v14 = (id)v13;
  }
  else
  {
    id v14 = a1;
    swift_bridgeObjectRetain();
    uint64_t v13 = (uint64_t)a1;
  }
  uint64_t v24 = v13;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  char v29 = 6;
  int v15 = (const char *)(String.utf8CString.getter() + 32);
  id v16 = v14;
  __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v15, (uint64_t)&v24);

  swift_release();
  int v17 = (void *)v2[12];
  v2[10] = v5;
  v2[11] = v4;
  v2[12] = a1;
  v2[13] = v23;
  id v18 = a1;

  uint64_t v19 = (CGColor *)specialized Material.getColor(name:)(v5, v4);
  if (v19)
  {
    uint64_t v20 = v19;
    AlphCGFloat a = CGColorGetAlpha(v19);

    LOBYTE(v19) = Alpha < 1.0;
  }
  UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v19);
  swift_bridgeObjectRelease();
}

void (*UnlitMaterial.__tintColor.modify(CGColorRef *a1))(void **a1, char a2)
{
  a1[1] = (CGColorRef)v1;
  CGColorRef v3 = v1[12];
  if (v3)
  {
    CGColorRef GenericRGB = v1[12];
  }
  else
  {
    CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    CGColorRef v3 = 0;
  }
  *a1 = GenericRGB;
  uint64_t v5 = v3;
  return UnlitMaterial.__tintColor.modify;
}

void UnlitMaterial.__tintColor.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    id v3 = v2;
    UnlitMaterial.__tintColor.setter(v3);
  }
  else
  {
    UnlitMaterial.__tintColor.setter(v2);
  }
}

void UnlitMaterial.__baseColor.getter(uint64_t a1@<X8>)
{
  specialized Material.getLegacyBase(legacy:)(*(void *)(v1 + 80), *(void **)(v1 + 88), *(CGColor **)(v1 + 104), a1);
}

uint64_t UnlitMaterial.__baseColor.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = v1[11];
  uint64_t v5 = (void *)v1[12];
  id v6 = (void *)v1[13];
  uint64_t v21 = v1[10];
  uint64_t v22 = v4;
  id v23 = v5;
  uint64_t v24 = v6;
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = v6;
  specialized Material.setLegacyBase(legacy:value:)((uint64_t)&v21, v2, v3);
  outlined consume of __MaterialColorParameter(v2, v3);
  uint64_t v10 = v21;
  uint64_t v9 = v22;
  float32x4_t v12 = v23;
  long long v11 = v24;
  uint64_t v13 = (void *)v1[12];
  id v14 = (void *)v1[13];
  v1[10] = v21;
  v1[11] = v9;
  v1[12] = v12;
  v1[13] = v11;
  id v15 = v11;
  swift_bridgeObjectRetain();
  id v16 = v12;
  swift_bridgeObjectRelease();

  int v17 = (CGColor *)specialized Material.getColor(name:)(v10, v9);
  if (v17)
  {
    id v18 = v17;
    AlphCGFloat a = CGColorGetAlpha(v17);

    LOBYTE(v17) = Alpha < 1.0;
  }
  UnlitMaterial.setTransparencyFromBlending(_:)((Swift::Bool)v17);

  return swift_bridgeObjectRelease();
}

void (*UnlitMaterial.__baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = v1[10];
  uint64_t v4 = (void *)v1[11];
  uint64_t v5 = (CGColor *)v1[13];
  v12[3] = &type metadata for UnlitMaterial;
  v12[4] = &protocol witness table for UnlitMaterial;
  v12[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial((uint64_t)v1, v12[0] + 16);
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v12, v3, v4, (uint64_t)&v13);
  id v7 = v13;
  id v6 = v14;
  uint64_t v8 = v15;
  outlined copy of MaterialParameters.Texture?(v14, v15);

  outlined consume of MaterialParameters.Texture?(v6, v8);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    *(void *)a1 = v8;
    *(unsigned char *)(a1 + 8) = 1;
  }
  else
  {
    CGColorRef GenericRGB = v5;
    if (!v5) {
      CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    }
    *(void *)a1 = GenericRGB;
    *(unsigned char *)(a1 + 8) = 0;
    uint64_t v10 = v5;
  }
  return UnlitMaterial.__baseColor.modify;
}

void UnlitMaterial.__baseColor.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void **)a1;
    char v5 = v3;
    outlined copy of __MaterialColorParameter(v2, v3);
    UnlitMaterial.__baseColor.setter((uint64_t)&v4);
    outlined consume of __MaterialColorParameter(v2, v3);
  }
  else
  {
    uint64_t v4 = *(void **)a1;
    char v5 = v3;
    UnlitMaterial.__baseColor.setter((uint64_t)&v4);
  }
}

void UnlitMaterial.__usesTransparency.setter(char a1)
{
  int v2 = *(unsigned __int16 *)(v1 + 152);
  if ((a1 & 1) == 0)
  {
    int v3 = v2 & 0xFFFE;
    if (v2 == v3) {
      return;
    }
    goto LABEL_5;
  }
  int v3 = v2 | 1;
  if (v2 != (v2 | 1)) {
LABEL_5:
  }
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

Swift::Void __swiftcall UnlitMaterial.setTransparencyFromBlending(_:)(Swift::Bool a1)
{
  int v2 = *(unsigned __int16 *)(v1 + 152);
  if (!a1)
  {
    int v3 = v2 & 0xFFFE;
    if (v2 == v3) {
      return;
    }
    goto LABEL_5;
  }
  int v3 = v2 | 1;
  if (v2 != (v2 | 1)) {
LABEL_5:
  }
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

void (*UnlitMaterial.__usesTransparency.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 152) & 1;
  return UnlitMaterial.__usesTransparency.modify;
}

void UnlitMaterial.__usesTransparency.modify(uint64_t *a1, char a2)
{
  int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v4 = *a1;
  if (a2)
  {
    UnlitMaterial.__usesTransparency.setter(v3);
    return;
  }
  int v5 = *(unsigned __int16 *)(v4 + 152);
  if (!v3)
  {
    int v6 = v5 & 0xFFFE;
    if (v5 == v6) {
      return;
    }
    goto LABEL_7;
  }
  int v6 = v5 | 1;
  if (v5 != (v5 | 1)) {
LABEL_7:
  }
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v6 | (*(unsigned __int8 *)(v4 + 155) << 24) | (*(unsigned __int8 *)(v4 + 154) << 16));
}

uint64_t UnlitMaterial.init(color:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v6);
  return UnlitMaterial.init(color:assetService:)(a1, (uint64_t)v6, a2);
}

uint64_t UnlitMaterial.init(color:assetService:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(void *)(a3 + 80) = 0x6E6954726F6C6F63;
  *(void *)(a3 + 88) = 0xE900000000000074;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(unsigned char *)(a3 + 128) = 1;
  *(_WORD *)(a3 + 129) = 257;
  *(void *)(a3 + 144) = 0;
  *(_DWORD *)(a3 + 152) = 33685504;
  uint64_t v6 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000022835FED0);
  *(void *)(a3 + 40) = v6;
  uint64_t v7 = REMaterialParameterBlockValueCreate();
  *(void *)(a3 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = v7;
  type metadata accessor for UnlitMaterial.Program();
  uint64_t v8 = swift_allocObject();
  *(_WORD *)(v8 + 16) = 513;
  *(void *)(v8 + 24) = v6;
  *(void *)(a3 + 136) = v8;
  long long v13 = (unint64_t)a1;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  swift_retain();
  id v9 = a1;
  UnlitMaterial.color.setter((uint64_t)&v13);
  uint64_t v10 = *(void **)(a3 + 104);
  id v11 = v9;

  *(void *)(a3 + 104) = v9;
  outlined init with copy of __REAssetService(a2, (uint64_t)&v13);
  outlined destroy of __REAssetService?(a3);
  outlined init with take of BindableDataInternal(&v13, a3);

  return __swift_destroy_boxed_opaque_existential_1(a2);
}

uint64_t UnlitMaterial.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)&v6);
  UnlitMaterial.init(assetService:)((uint64_t)&v6, a1);
  uint64_t v3 = *(void *)(a1 + 40);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v3;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  return swift_release();
}

uint64_t UnlitMaterial.init(assetService:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 80) = 0x6E6954726F6C6F63;
  *(void *)(a2 + 88) = 0xE900000000000074;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(unsigned char *)(a2 + 128) = 1;
  *(_WORD *)(a2 + 129) = 257;
  *(void *)(a2 + 144) = 0;
  *(_DWORD *)(a2 + 152) = 33685504;
  uint64_t v4 = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000022835FED0);
  *(void *)(a2 + 40) = v4;
  uint64_t v5 = REMaterialParameterBlockValueCreate();
  *(void *)(a2 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v5;
  type metadata accessor for UnlitMaterial.Program();
  uint64_t v6 = swift_allocObject();
  *(_WORD *)(v6 + 16) = 513;
  *(void *)(v6 + 24) = v4;
  *(void *)(a2 + 136) = v6;
  outlined init with copy of __REAssetService(a1, (uint64_t)v8);
  swift_retain();
  outlined destroy of __REAssetService?(a2);
  outlined init with take of BindableDataInternal(v8, a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

Swift::Void __swiftcall UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(Swift::Bool a1)
{
  int v2 = *(unsigned __int16 *)(v1 + 152);
  if (!a1)
  {
    unsigned int v3 = v2 & 0xFFFFFFFD;
    if (v2 == (v2 & 0xFFFFFFFD)) {
      return;
    }
    goto LABEL_5;
  }
  unsigned int v3 = v2 | 2;
  if (v2 != (v2 | 2)) {
LABEL_5:
  }
    specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v3 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
}

void key path setter for UnlitMaterial.opacityThreshold : UnlitMaterial(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 4);
  UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(v3 != 1);
  if ((v3 & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v4 = REMaterialParameterBlockValueCopy();
      uint64_t v5 = *(void **)(a2 + 72);
      *(void *)(a2 + 72) = v4;
    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void UnlitMaterial.opacityThreshold.setter(uint64_t a1)
{
  int v2 = *(unsigned __int16 *)(v1 + 152);
  if ((a1 & 0x100000000) != 0)
  {
    if (v2 != (v2 & 0xFFFFFFFD)) {
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v2 & 0xFFFFFFFD | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
    }
  }
  else
  {
    if (v2 != (v2 | 2)) {
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)(v2 | 2 | (*(unsigned __int8 *)(v1 + 155) << 24) | (*(unsigned __int8 *)(v1 + 154) << 16));
    }
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v3 = REMaterialParameterBlockValueCopy();
      uint64_t v4 = *(void **)(v1 + 72);
      *(void *)(v1 + 72) = v3;
    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void (*UnlitMaterial.opacityThreshold.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  unint64_t v3 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = BYTE4(v3) & 1;
  return UnlitMaterial.opacityThreshold.modify;
}

void UnlitMaterial.opacityThreshold.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v2 = *((unsigned char *)a1 + 12);
  UnlitMaterial.setOpacityThresholdFunctionConstant(_:)(v2 != 1);
  if ((v2 & 1) == 0)
  {
    unint64_t v3 = (void **)(v1 + 72);
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      uint64_t v4 = REMaterialParameterBlockValueCopy();
      uint64_t v5 = *v3;
      *unint64_t v3 = (void *)v4;
    }
    REMaterialParameterBlockValueSetFloat();
  }
}

void UnlitMaterial.blending.setter(uint64_t a1)
{
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

void (*UnlitMaterial.blending.modify(void *a1))(uint64_t *a1, char a2)
{
  unint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UnlitMaterial.blending.getter((uint64_t)(v3 + 10));
  return UnlitMaterial.blending.modify;
}

void UnlitMaterial.blending.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 80;
  if (a2)
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2);
    outlined retain of PhysicallyBasedMaterial.Blending(v2);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2);
    outlined consume of PhysicallyBasedMaterial.Blending(*(void *)(v2 + 80), *(void **)(v2 + 88), *(void *)(v2 + 96));
  }
  else
  {
    outlined init with take of PhysicallyBasedMaterial.Blending(v3, v2 + 40);
    specialized MaterialWithBlendingInternal.blendingInternal.setter(v2 + 40);
  }

  free((void *)v2);
}

uint64_t UnlitMaterial.__triangleFillMode.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t UnlitMaterial.__triangleFillMode.setter(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t (*UnlitMaterial.__triangleFillMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t UnlitMaterial.__faceCullMode.getter()
{
  return *(void *)(v0 + 120);
}

uint64_t UnlitMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*UnlitMaterial.__faceCullMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*UnlitMaterial.__writesDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*UnlitMaterial.__readsDepthInternal.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t UnlitMaterial.shaderCache.getter()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 144);
  }
  else
  {
    uint64_t v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1) {
      swift_once();
    }
    swift_retain();
    UnlitMaterial.assetService.getter((uint64_t)v4);
    uint64_t v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(void *)(v2 + 144) = v1;
  }
  swift_retain();
  return v1;
}

Swift::Int UnlitMaterial.UnlitShaderParameters.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 3);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2) {
      goto LABEL_3;
    }
LABEL_5:
    Swift::UInt8 v4 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2) {
    goto LABEL_5;
  }
LABEL_3:
  Swift::UInt8 v4 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.UnlitShaderParameters()
{
  int v1 = *(unsigned __int8 *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2) {
      goto LABEL_3;
    }
LABEL_5:
    Swift::UInt8 v3 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2) {
    goto LABEL_5;
  }
LABEL_3:
  Swift::UInt8 v3 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.UnlitShaderParameters()
{
  int v1 = *(unsigned __int8 *)(v0 + 2);
  int v2 = *(unsigned __int8 *)(v0 + 3);
  Swift::UInt16 v3 = *(_WORD *)v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v1 != 2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
    if (v2 != 2) {
      goto LABEL_3;
    }
LABEL_5:
    Swift::UInt8 v4 = 0;
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v2 == 2) {
    goto LABEL_5;
  }
LABEL_3:
  Swift::UInt8 v4 = v2 & 1;
  Hasher._combine(_:)(1u);
LABEL_6:
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance UnlitMaterial()
{
  return *(void *)(v0 + 112);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance UnlitMaterial(uint64_t result)
{
  *(void *)(v1 + 112) = result;
  return result;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance UnlitMaterial()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance UnlitMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 129) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance UnlitMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance UnlitMaterial()
{
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance UnlitMaterial(uint64_t result)
{
  *(unsigned char *)(v1 + 130) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance UnlitMaterial())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance UnlitMaterial()
{
  return *(void *)(v0 + 120);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance UnlitMaterial(uint64_t result, char a2)
{
  *(void *)(v2 + 120) = result;
  *(unsigned char *)(v2 + 128) = a2 & 1;
  return result;
}

unsigned __int8 *UnlitMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  *(void *)(v1 + 112) = *result;
  return result;
}

unsigned __int8 *(*UnlitMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(void *)(v1 + 112) == 1;
  return UnlitMaterial.triangleFillMode.modify;
}

unsigned __int8 *UnlitMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(void *)(*(void *)result + 112) = result[8];
  return result;
}

void UnlitMaterial.init(color:applyPostProcessToneMap:)(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  id v5 = a1;
  uint64_t v6 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6, (uint64_t)v7);
  UnlitMaterial.init(color:assetService:)(v5, (uint64_t)v7, a3);
  if ((a2 & 1) == 0) {
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(a3 + 152) | 4);
  }
}

void UnlitMaterial.init(applyPostProcessToneMap:)(char a1@<W0>, uint64_t a2@<X8>)
{
  if ((a1 & 1) == 0) {
    specialized MaterialWithShaderCache.shaderParameters.setter(*(_DWORD *)(a2 + 152) | 4);
  }
}

uint64_t UnlitMaterial.writesDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t UnlitMaterial.writesDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 129) = result;
  return result;
}

unsigned char *(*UnlitMaterial.writesDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 129);
  return UnlitMaterial.writesDepth.modify;
}

unsigned char *UnlitMaterial.writesDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 129) = result[8];
  return result;
}

uint64_t UnlitMaterial.readsDepth.getter()
{
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t UnlitMaterial.readsDepth.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 130) = result;
  return result;
}

unsigned char *(*UnlitMaterial.readsDepth.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 130);
  return UnlitMaterial.readsDepth.modify;
}

unsigned char *UnlitMaterial.readsDepth.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 130) = result[8];
  return result;
}

void UnlitMaterial.Program.descriptor.getter(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 17);
  *a1 = *(unsigned char *)(v1 + 16);
  a1[1] = v2;
}

uint64_t UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.getter()
{
  return *v0;
}

uint64_t UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*UnlitMaterial.Program.Descriptor.applyPostProcessToneMap.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void UnlitMaterial.Program.Descriptor.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *UnlitMaterial.Program.Descriptor.blendMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

uint64_t (*UnlitMaterial.Program.Descriptor.blendMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static UnlitMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0) {
      return 0;
    }
  }
  return 1;
}

void UnlitMaterial.Program.Descriptor.hash(into:)()
{
  int v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int UnlitMaterial.Program.Descriptor.hashValue.getter()
{
  Swift::UInt8 v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnlitMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v3 = a1[1];
  int v4 = a2[1];
  if (v3 == 2)
  {
    if (v4 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v4 ^ v3) & 1;
    if (v4 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.Program.Descriptor()
{
  int v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.Program.Descriptor()
{
  Swift::UInt8 v1 = *v0;
  int v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

void UnlitMaterial.Program.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

uint64_t UnlitMaterial.Program.__allocating_init(descriptor:)(unsigned char *a1)
{
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 112) = *a1;
  *(unsigned char *)(v4 + 113) = a1[1];
  return MEMORY[0x270FA2498](UnlitMaterial.Program.init(descriptor:), 0, 0);
}

uint64_t UnlitMaterial.Program.init(descriptor:)(unsigned char *a1)
{
  *(void *)(v2 + 80) = v1;
  *(unsigned char *)(v2 + 112) = *a1;
  *(unsigned char *)(v2 + 113) = a1[1];
  return MEMORY[0x270FA2498](UnlitMaterial.Program.init(descriptor:), 0, 0);
}

uint64_t UnlitMaterial.Program.init(descriptor:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 113);
  int v2 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  *(unsigned char *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 17) = v1;
  if (one-time initialization token for shaderCacheRegistry != -1) {
    swift_once();
  }
  if (v2) {
    int v4 = 0;
  }
  else {
    int v4 = 4;
  }
  int v5 = v4 | (v1 != 2);
  int v6 = *(unsigned __int8 *)(v0 + 113);
  swift_retain();
  uint64_t v7 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, v0 + 16);
  *(void *)(v0 + 88) = specialized AssetServiceScopedRegistry.instance(for:)((void *)(v0 + 16));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to specialized ShaderCache.getResource(_:)
                                       + async function pointer to specialized ShaderCache.getResource(_:));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v8;
  *uint64_t v8 = v0;
  v8[1] = UnlitMaterial.Program.init(descriptor:);
  return v10(v5 | (v6 << 16) | 0x2000000u);
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t UnlitMaterial.Program.init(descriptor:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
    int v5 = UnlitMaterial.Program.init(descriptor:);
  }
  else
  {
    swift_release();
    *(void *)(v4 + 104) = a1;
    int v5 = PhysicallyBasedMaterial.Program.init(descriptor:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t UnlitMaterial.Program.deinit()
{
  swift_release();
  return v0;
}

uint64_t UnlitMaterial.Program.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

Swift::Int UnlitMaterial.Program.hashValue.getter()
{
  Hasher.init(_seed:)();
  int v1 = *(unsigned __int8 *)(v0 + 17);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UnlitMaterial.Program(uint64_t *a1, uint64_t *a2)
{
  return specialized static UnlitMaterial.Program.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UnlitMaterial.Program()
{
  return UnlitMaterial.Program.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UnlitMaterial.Program()
{
  int v1 = *(unsigned __int8 *)(*(void *)v0 + 17);
  Hasher._combine(_:)(*(unsigned char *)(*(void *)v0 + 16));
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UnlitMaterial.Program()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt8 v2 = *(unsigned char *)(v1 + 16);
  int v3 = *(unsigned __int8 *)(v1 + 17);
  Hasher._combine(_:)(v2);
  if (v3 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 & 1);
  }
  return Hasher._finalize()();
}

uint64_t UnlitMaterial.program.getter()
{
  return swift_retain();
}

uint64_t key path setter for UnlitMaterial.program : UnlitMaterial(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_retain_n();
  swift_release();
  *(void *)(a2 + 136) = v3;
  uint64_t v4 = *(void *)(v3 + 24);
  swift_retain();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(a2 + 40) = v4;
  return result;
}

uint64_t UnlitMaterial.program.setter(uint64_t a1)
{
  swift_retain();
  swift_release();
  *(void *)(v1 + 136) = a1;
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*UnlitMaterial.program.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 136);
  a1[1] = v1;
  swift_retain();
  return UnlitMaterial.program.modify;
}

uint64_t UnlitMaterial.program.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  if (a2)
  {
    swift_retain();
    swift_release();
    *(void *)(v4 + 136) = v3;
    uint64_t v5 = *(void *)(v3 + 24);
    swift_retain();
    swift_release();
    swift_release();
    *(void *)(v4 + 40) = v5;
    return swift_release();
  }
  else
  {
    swift_release();
    *(void *)(v4 + 136) = v3;
    uint64_t v7 = *(void *)(v3 + 24);
    swift_retain();
    swift_release();
    uint64_t result = swift_release();
    *(void *)(v4 + 40) = v7;
  }
  return result;
}

uint64_t UnlitMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 80) = 0x6E6954726F6C6F63;
  *(void *)(a2 + 88) = 0xE900000000000074;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(unsigned char *)(a2 + 128) = 1;
  *(_WORD *)(a2 + 129) = 257;
  *(_DWORD *)(a2 + 152) = 33685504;
  *(void *)(a2 + 136) = a1;
  *(void *)(a2 + 144) = 0;
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v3;
  swift_retain();
  swift_retain();
  uint64_t v4 = REMaterialParameterBlockValueCreate();
  *(void *)(a2 + 48) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = v4;
  uint64_t v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)v12);
  outlined destroy of __REAssetService?(a2);
  outlined init with take of BindableDataInternal(v12, a2);
  uint64_t v6 = *(void *)(a2 + 40);
  swift_beginAccess();
  __int16 FeatureFlags = REMaterialAssetGetFeatureFlags();
  if ((FeatureFlags & 8) != 0) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  *(_WORD *)(a2 + 152) = FeatureFlags;
  if ((FeatureFlags & 0x10) != 0) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  *(unsigned char *)(a2 + 154) = v8;
  *(unsigned char *)(a2 + 155) = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 56) = type metadata accessor for __MaterialResource();
  *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
  *(void *)(inited + 32) = v6;
  swift_retain_n();
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  swift_release();
  return swift_release();
}

uint64_t UnlitMaterial.init(texture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v8);
  UnlitMaterial.init(assetService:)((uint64_t)v8, a2);
  if (one-time initialization token for linearSRGBWhite != -1) {
    swift_once();
  }
  id v5 = (id)static CGColorRef.linearSRGBWhite;
  swift_retain();
  id v6 = (id)REMaterialCreateDefaultSamplerDescriptor();
  v8[0] = v5;
  v8[1] = v6;
  long long v8[2] = a1;
  void v8[3] = 0;
  int v9 = 84148994;
  UnlitMaterial.color.setter((uint64_t)v8);
  return swift_release();
}

void UnlitMaterial.faceCulling.getter(char *a1@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 128) & 1) == 0)
  {
    if (*(void *)(v1 + 120) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 120);
    }
  }
  *a1 = v2;
}

unsigned __int8 *UnlitMaterial.faceCulling.setter(unsigned __int8 *result)
{
  unsigned int v2 = *result;
  BOOL v3 = v2 > 1;
  *(void *)(v1 + 120) = v3 ^ (v2 != 0);
  *(unsigned char *)(v1 + 128) = v3;
  return result;
}

uint64_t *(*UnlitMaterial.faceCulling.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = 2;
  if ((*(unsigned char *)(v1 + 128) & 1) == 0)
  {
    if (*(void *)(v1 + 120) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(v1 + 120);
    }
  }
  *(unsigned char *)(a1 + 8) = v2;
  return UnlitMaterial.faceCulling.modify;
}

uint64_t *UnlitMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned int v2 = *((unsigned __int8 *)result + 8);
  BOOL v3 = v2 == 1;
  BOOL v4 = v2 > 1;
  uint64_t v5 = v3;
  *(void *)(v1 + 120) = v5;
  *(unsigned char *)(v1 + 128) = v4;
  return result;
}

void UnlitMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

uint64_t UnlitMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return UnlitMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*UnlitMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return UnlitMaterial.textureCoordinateTransform.modify;
}

uint64_t UnlitMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return UnlitMaterial.textureCoordinateTransform.modify(a1, a2, 0, (void *)0xE000000000000000);
}

void UnlitMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
}

uint64_t UnlitMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return UnlitMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t UnlitMaterial.textureCoordinateTransform.setter(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a2, a3, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t (*UnlitMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return UnlitMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t UnlitMaterial.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return UnlitMaterial.textureCoordinateTransform.modify(a1, a2, 49, (void *)0xE100000000000000);
}

uint64_t UnlitMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a3, a4, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t specialized static UnlitMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 17);
  int v4 = *(unsigned __int8 *)(a2 + 17);
  if (v3 == 2)
  {
    if (v4 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v4 ^ v3) & 1;
    if (v4 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized static UnlitMaterial.UnlitShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a1 + 2);
  int v3 = *((unsigned __int8 *)a1 + 3);
  int v4 = *((unsigned __int8 *)a2 + 2);
  int v5 = *((unsigned __int8 *)a2 + 3);
  if (v2 != 2)
  {
    int v6 = (v4 ^ v2) & 1;
    if (v4 == 2 || v6 != 0) {
      return 0;
    }
LABEL_10:
    if (v3 == 2)
    {
      if (v5 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL v8 = (v3 & 1) == 0;
      if (v5 == 2 || ((v8 ^ v5) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  if (v4 == 2) {
    goto LABEL_10;
  }
  return 0;
}

uint64_t type metadata accessor for UnlitMaterial.Program()
{
  return self;
}

uint64_t outlined retain of PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.Program.Descriptor and conformance UnlitMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.Program and conformance UnlitMaterial.Program()
{
  unint64_t result = lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program)
  {
    type metadata accessor for UnlitMaterial.Program();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.Program and conformance UnlitMaterial.Program);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters()
{
  unint64_t result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters;
  if (!lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters);
  }
  return result;
}

void sub_2282BDA18(id *a1)
{
}

void sub_2282BDA44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Material.getLegacyBase(legacy:)(*(void *)(a1 + 80), *(void **)(a1 + 88), *(CGColor **)(a1 + 104), (uint64_t)&v4);
  char v3 = v5;
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v3;
}

uint64_t sub_2282BDA94(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  char v3 = *(void **)a1;
  char v4 = v1;
  outlined copy of __MaterialColorParameter(v3, v1);
  return UnlitMaterial.__baseColor.setter((uint64_t)&v3);
}

uint64_t sub_2282BDADC@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 152) & 1;
  return result;
}

void sub_2282BDAEC(char *a1)
{
}

unint64_t sub_2282BDB14@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

double sub_2282BDB4C@<D0>(uint64_t a1@<X8>)
{
  UnlitMaterial.blending.getter((uint64_t)v5);
  int v2 = v6;
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v2;
  return result;
}

void sub_2282BDB90(uint64_t a1)
{
  outlined init with take of PhysicallyBasedMaterial.Blending(a1, (uint64_t)v1);
  outlined retain of PhysicallyBasedMaterial.Blending((uint64_t)v1);
  specialized MaterialWithBlendingInternal.blendingInternal.setter((uint64_t)v1);
}

uint64_t sub_2282BDBD0@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(void *)(result + 112) == 1;
  return result;
}

unsigned __int8 *sub_2282BDBE4(unsigned __int8 *result, uint64_t a2)
{
  *(void *)(a2 + 112) = *result;
  return result;
}

uint64_t sub_2282BDBF0@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 129);
  return result;
}

unsigned char *sub_2282BDBFC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 129) = *result;
  return result;
}

uint64_t sub_2282BDC08@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 130);
  return result;
}

unsigned char *sub_2282BDC14(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 130) = *result;
  return result;
}

uint64_t sub_2282BDC20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 136);
  return swift_retain();
}

uint64_t sub_2282BDC30@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2;
  if ((*(unsigned char *)(result + 128) & 1) == 0)
  {
    if (*(void *)(result + 120) >= 3uLL) {
      char v2 = 2;
    }
    else {
      char v2 = *(void *)(result + 120);
    }
  }
  *a2 = v2;
  return result;
}

unsigned __int8 *sub_2282BDC50(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return UnlitMaterial.faceCulling.setter(&v2);
}

double sub_2282BDC88@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_44Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_2282BDC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_45Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_2282BDCA0@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_44Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_44Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  double result = *(double *)v7;
  float32x2_t v5 = v7[1];
  __int32 v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_2282BDCF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_45Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t keypath_set_45Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a5, a6, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t destroy for UnlitMaterial(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for UnlitMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  __int32 v8 = *(void **)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void **)(a2 + 96);
  uint64_t v11 = *(void **)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_WORD *)(a1 + 129) = *(_WORD *)(a2 + 129);
  uint64_t v13 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v13;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v8;
  swift_bridgeObjectRetain();
  id v15 = v10;
  id v16 = v11;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UnlitMaterial(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)*((void *)a2 + 9);
  __int32 v8 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v7;
  id v9 = v7;

  *(void *)(a1 + 80) = *((void *)a2 + 10);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void **)(a1 + 96);
  uint64_t v11 = (void *)*((void *)a2 + 12);
  *(void *)(a1 + 96) = v11;
  id v12 = v11;

  uint64_t v13 = *(void **)(a1 + 104);
  id v14 = (void *)*((void *)a2 + 13);
  *(void *)(a1 + 104) = v14;
  id v15 = v14;

  *(void *)(a1 + 112) = *((void *)a2 + 14);
  uint64_t v16 = *((void *)a2 + 15);
  *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
  *(void *)(a1 + 120) = v16;
  *(unsigned char *)(a1 + 129) = *((unsigned char *)a2 + 129);
  *(unsigned char *)(a1 + 130) = *((unsigned char *)a2 + 130);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  swift_retain();
  swift_release();
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 152) = *((_WORD *)a2 + 76);
  *(unsigned char *)(a1 + 154) = *((unsigned char *)a2 + 154);
  *(unsigned char *)(a1 + 155) = *((unsigned char *)a2 + 155);
  return a1;
}

__n128 __swift_memcpy156_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for UnlitMaterial(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  long long v6 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  long long v8 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  id v9 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);

  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnlitMaterial(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 156)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 156) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 156) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial()
{
  return &type metadata for UnlitMaterial;
}

uint64_t method lookup function for UnlitMaterial.Program(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for UnlitMaterial.Program);
}

uint64_t dispatch thunk of UnlitMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  long long v6 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 96) + **(int **)(v1 + 96));
  long long v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *long long v4 = v2;
  v4[1] = dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  return v6(a1);
}

uint64_t getEnumTagSinglePayload for UnlitMaterial.Program.Descriptor(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial.Program.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282BE50CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial.Program.Descriptor()
{
  return &type metadata for UnlitMaterial.Program.Descriptor;
}

_DWORD *__swift_memcpy4_2(_DWORD *result, _DWORD *a2)
{
  char *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for UnlitMaterial.UnlitShaderParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*(unsigned __int8 *)(a1 + 2) <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 2);
  }
  int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 2) < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UnlitMaterial.UnlitShaderParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 4) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 2) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnlitMaterial.UnlitShaderParameters()
{
  return &type metadata for UnlitMaterial.UnlitShaderParameters;
}

unint64_t instantiation function for generic protocol witness table for UnlitMaterial.UnlitShaderParameters(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnlitMaterial.UnlitShaderParameters and conformance UnlitMaterial.UnlitShaderParameters();
  *(void *)(a1 + 8) = result;
  return result;
}

BOOL static BlendingType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void BlendingType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int BlendingType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for materialParametersService()
{
  type metadata accessor for __ServiceLocator();
  uint64_t v0 = static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  uint64_t result = MEMORY[0x22A692290](v1);
  if (result)
  {
    static MaterialResourceUtility.materialParametersService = result;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for dummyResource()
{
  uint64_t result = specialized static LoadableResource.loadEngineResource(assetPath:)(0xD000000000000017, (void *)0x800000022835FED0);
  static MaterialResourceUtility.dummyResource = result;
  return result;
}

uint64_t UnlitMaterialResource.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t (*UnlitMaterialResource.__parameterBlock.modify(uint64_t a1))()
{
  uint64_t v2 = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t UnlitMaterialResource.__parameters.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:)(unsigned char *a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  *(void *)(v6 + 56) = a4;
  *(void *)(v6 + 64) = v5;
  *(float *)(v6 + 120) = a5;
  *(void *)(v6 + 48) = a3;
  *(unsigned char *)(v6 + 125) = a2;
  *(unsigned char *)(v6 + 126) = *a1;
  return MEMORY[0x270FA2498](static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:), 0, 0);
}

uint64_t static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:)()
{
  *(_DWORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 124) = 0;
  *(void *)(v0 + 24) = 0;
  *(_DWORD *)(v0 + 20) = 0;
  RECGColorToColorGamut();
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v0 + 127) = *(unsigned char *)(v0 + 124);
  if (one-time initialization token for materialParametersService != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 72) = static MaterialResourceUtility.materialParametersService;
  if (v1)
  {
    type metadata accessor for MainActor();
    *(void *)(v0 + 80) = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x270FA2498](static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:), v3, v2);
  }
  else
  {
    uint64_t UnlitParameters = REMaterialParametersServiceCreateUnlitParameters();
    uint64_t v5 = swift_allocObject();
    *(void *)(v0 + 96) = v5;
    *(void *)(v5 + 16) = UnlitParameters;
    uint64_t v6 = async function pointer to specialized RequestLoadable.awaitForResourceSharing();
    BOOL v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v7;
    *BOOL v7 = v0;
    v7[1] = static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:);
    return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                  + v6))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  *(void *)(v0 + 88) = *(void *)(v1 + 16);
  return MEMORY[0x270FA2498](static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:), 0, 0);
}

{
  uint64_t v0;
  uint64_t UnlitParameters;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t UnlitParameters = REMaterialParametersServiceCreateUnlitParameters();
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 96) = v2;
  *(void *)(v2 + 16) = UnlitParameters;
  uint64_t v3 = async function pointer to specialized RequestLoadable.awaitForResourceSharing();
  int v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  *int v4 = v0;
  v4[1] = static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:);
  return ((uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                                + v3))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[14] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](static UnlitMaterialResource.load(blending:applyPostProcessToneMap:colorTint:cutoutThreshold:colorTexture:), 0, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(uint64_t))v2[1];
    int v4 = v2[12];
    return v3(v4);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t UnlitMaterialResource.deinit()
{
  RERelease();
  return v0;
}

uint64_t UnlitMaterialResource.blending.getter@<X0>(char *a1@<X8>)
{
  return UnlitMaterialResource.blending.getter(MEMORY[0x263F37580], a1);
}

uint64_t UnlitMaterialResource.tonemapDisabled.getter()
{
  return REUnlitMaterialParametersGetDisableTonemap();
}

id UnlitMaterialResource.color.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ColorTexture = REUnlitMaterialParametersGetColorTexture();
  REUnlitMaterialParametersGetColorTint();
  uint64_t v3 = RECreateCGColorFromColorGamut();
  id result = 0;
  if (ColorTexture)
  {
    type metadata accessor for TextureResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = ColorTexture;
    *(void *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v6 = 84148994;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t UnlitMaterialResource.color.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  RECGColorToColorGamut();
  REUnlitMaterialParametersSetColorTint();
  if (v3)
  {
    id v4 = v1;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_release();
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v1, 0);
  }
  return REUnlitMaterialParametersSetColorTexture();
}

void (*UnlitMaterialResource.color.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  UnlitMaterialResource.color.getter((uint64_t)v3);
  return UnlitMaterialResource.color.modify;
}

void UnlitMaterialResource.color.modify(void ***a1, char a2)
{
}

uint64_t UnlitMaterialResource.cutoutThreshold.getter()
{
  return REUnlitMaterialParametersGetOpacityThreshold();
}

uint64_t UnlitMaterialResource.cutoutThreshold.setter()
{
  return MEMORY[0x270F21150](*(void *)(v0 + 16));
}

uint64_t (*UnlitMaterialResource.cutoutThreshold.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  REUnlitMaterialParametersGetOpacityThreshold();
  *(_DWORD *)(a1 + 8) = v3;
  return UnlitMaterialResource.cutoutThreshold.modify;
}

uint64_t UnlitMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, MEMORY[0x263F37590]);
}

uint64_t protocol witness for Material.__parameterBlock.getter in conformance UnlitMaterialResource@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  return result;
}

uint64_t (*protocol witness for Material.__parameterBlock.modify in conformance UnlitMaterialResource(uint64_t a1))()
{
  uint64_t v2 = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t UnlitMaterialResource.__resource.getter()
{
  if (one-time initialization token for dummyResource != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t UnlitMaterialResource.__parameterBlock.setter(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*PhysicallyBasedMaterialResource.__parameterBlock.modify(uint64_t a1))()
{
  uint64_t v2 = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v2;
  return UnlitMaterialResource.__parameterBlock.modify;
}

uint64_t static PhysicallyBasedMaterialResource.load(blending:hasClearcoat:isAnisotropic:hasSheen:)(unsigned char *a1, char a2, char a3, char a4)
{
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 50) = a4;
  *(unsigned char *)(v5 + 49) = a3;
  *(unsigned char *)(v5 + 48) = a2;
  *(unsigned char *)(v5 + 51) = *a1;
  return MEMORY[0x270FA2498](static PhysicallyBasedMaterialResource.load(blending:hasClearcoat:isAnisotropic:hasSheen:), 0, 0);
}

uint64_t static PhysicallyBasedMaterialResource.load(blending:hasClearcoat:isAnisotropic:hasSheen:)()
{
  if (one-time initialization token for materialParametersService != -1) {
    swift_once();
  }
  uint64_t PbrParameters = REMaterialParametersServiceCreatePbrParameters();
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 24) = v2;
  *(void *)(v2 + 16) = PbrParameters;
  uint64_t v5 = (uint64_t (*)(void))((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                         + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  int v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *int v3 = v0;
  v3[1] = static MeshResource.generatePlane(width:depth:cornerRadius:);
  return v5();
}

uint64_t PhysicallyBasedMaterialResource.blending.getter@<X0>(char *a1@<X8>)
{
  return UnlitMaterialResource.blending.getter(MEMORY[0x263F37148], a1);
}

uint64_t UnlitMaterialResource.blending.getter@<X0>(uint64_t (*a1)(void)@<X0>, char *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16));
  char v5 = result == 1;
  if (result == 2) {
    char v5 = 2;
  }
  *a2 = v5;
  return result;
}

uint64_t PhysicallyBasedMaterialResource.hasClearcoat.getter()
{
  return REPbrMaterialParametersHasClearcoat();
}

uint64_t PhysicallyBasedMaterialResource.isAnisotropic.getter()
{
  return REPbrMaterialParametersIsAnisotropic();
}

uint64_t PhysicallyBasedMaterialResource.hasSheen.getter()
{
  return REPbrMaterialParametersHasSheen();
}

id PhysicallyBasedMaterialResource.color.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t ColorTexture = REPbrMaterialParametersGetColorTexture();
  REPbrMaterialParametersGetColorTint();
  uint64_t v3 = RECreateCGColorFromColorGamut();
  id result = 0;
  if (ColorTexture)
  {
    type metadata accessor for TextureResource();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = ColorTexture;
    *(void *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v6 = 84148994;
  }
  else
  {
    uint64_t v5 = 0;
    int v6 = 0;
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = v6;
  return result;
}

uint64_t key path setter for UnlitMaterialResource.color : UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(id *))
{
  int v6 = *(void **)(a1 + 8);
  BOOL v7 = *(void **)(a1 + 16);
  uint64_t v8 = *(void **)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 32);
  v12[0] = *(id *)a1;
  v12[1] = v6;
  long long v12[2] = v7;
  v12[3] = v8;
  int v13 = v9;
  id v10 = v12[0];
  outlined copy of MaterialParameters.Texture?(v6, (uint64_t)v7);
  return a5(v12);
}

void PhysicallyBasedMaterialResource.color.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  RECGColorToColorGamut();
  REPbrMaterialParametersSetColorTint();
  if (v3)
  {
    id v4 = v1;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v1, v3);
    swift_release();
    REPbrMaterialParametersSetColorTexture();
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v1, 0);
  }
}

void (*PhysicallyBasedMaterialResource.color.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.color.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.color.modify;
}

void PhysicallyBasedMaterialResource.color.modify(void ***a1, char a2)
{
}

void UnlitMaterialResource.color.modify(void ***a1, char a2, void (*a3)(void *))
{
  id v4 = *a1;
  uint64_t v5 = **a1;
  int v6 = (*a1)[1];
  uint64_t v8 = (uint64_t)(*a1)[2];
  BOOL v7 = (*a1)[3];
  int v9 = *((_DWORD *)*a1 + 8);
  v13[0] = v5;
  v13[1] = v6;
  v13[2] = v8;
  v13[3] = v7;
  int v14 = v9;
  if (a2)
  {
    id v10 = v5;
    outlined copy of MaterialParameters.Texture?(v6, v8);
    a3(v13);
    uint64_t v11 = v4[1];
    uint64_t v12 = (uint64_t)v4[2];

    outlined consume of MaterialParameters.Texture?(v11, v12);
  }
  else
  {
    a3(v13);
  }

  free(v4);
}

id PhysicallyBasedMaterialResource.normal.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x263F371A8], a1);
}

uint64_t PhysicallyBasedMaterialResource.normal.setter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(void **)result;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v2, v1);
    swift_release();
    return REPbrMaterialParametersSetNormalTexture();
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.normal.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.normal.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.normal.modify;
}

void PhysicallyBasedMaterialResource.normal.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8);
  if (a2)
  {
    if (v3)
    {
      REPbrMaterialParametersSetNormalTexture();
      uint64_t v4 = *(void *)(v2 + 8);
    }
    else
    {
      uint64_t v4 = 0;
    }
    outlined consume of MaterialParameters.Texture?(*(void **)v2, v4);
  }
  else if (v3)
  {
    uint64_t v5 = *(void **)v2;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v5, v3);
    swift_release();
    REPbrMaterialParametersSetNormalTexture();
  }

  free((void *)v2);
}

id PhysicallyBasedMaterialResource.roughness.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F371C0];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F371B8];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.roughness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37288], MEMORY[0x263F37290]);
}

void (*PhysicallyBasedMaterialResource.roughness.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.roughness.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.roughness.modify;
}

void PhysicallyBasedMaterialResource.roughness.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.metallic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F371A0];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F37198];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.metallic.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37270], MEMORY[0x263F37278]);
}

void (*PhysicallyBasedMaterialResource.metallic.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.metallic.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.metallic.modify;
}

void PhysicallyBasedMaterialResource.metallic.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.specular.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F371E0];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F371D8];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.specular.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F372A8], MEMORY[0x263F372B0]);
}

void (*PhysicallyBasedMaterialResource.specular.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.specular.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.specular.modify;
}

void PhysicallyBasedMaterialResource.specular.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.emissive.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F37188];
  uint64_t v2 = (void (*)(void, long long *, char *))MEMORY[0x263F37178];

  return PhysicallyBasedMaterialResource.emissive.getter(v1, v2, a1);
}

void PhysicallyBasedMaterialResource.emissive.setter(uint64_t a1)
{
  uint64_t v1 = (void (*)(void, void, __n128))MEMORY[0x263F37258];
  uint64_t v2 = (void (*)(void, uint64_t))MEMORY[0x263F37268];

  PhysicallyBasedMaterialResource.emissive.setter(a1, v1, v2);
}

void (*PhysicallyBasedMaterialResource.emissive.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.emissive.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.emissive.modify;
}

void PhysicallyBasedMaterialResource.emissive.modify(void ***a1, char a2)
{
}

float PhysicallyBasedMaterialResource.emissiveIntensity.getter()
{
  uint64_t v0 = (void (*)(void, float *))MEMORY[0x263F37180];

  return PhysicallyBasedMaterialResource.emissiveIntensity.getter(v0, 1.0);
}

uint64_t PhysicallyBasedMaterialResource.emissiveIntensity.setter()
{
  return MEMORY[0x270F1F150](*(void *)(v0 + 16));
}

uint64_t (*PhysicallyBasedMaterialResource.emissiveIntensity.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 12) = 1065353216;
  uint64_t v3 = (_DWORD *)(a1 + 12);
  REPbrMaterialParametersGetEmissiveScale();
  *(_DWORD *)(a1 + 8) = *v3;
  return PhysicallyBasedMaterialResource.emissiveIntensity.modify;
}

uint64_t PhysicallyBasedMaterialResource.emissiveIntensity.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, MEMORY[0x263F37260]);
}

id PhysicallyBasedMaterialResource.ambientOcclusion.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x263F37120], a1);
}

uint64_t PhysicallyBasedMaterialResource.ambientOcclusion.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.ambientOcclusion.setter(a1, MEMORY[0x263F37208]);
}

void (*PhysicallyBasedMaterialResource.ambientOcclusion.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.ambientOcclusion.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.ambientOcclusion.modify;
}

void PhysicallyBasedMaterialResource.ambientOcclusion.modify(uint64_t *a1, char a2)
{
}

id PhysicallyBasedMaterialResource.clearcoat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F37170];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F37168];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.clearcoat.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37248], MEMORY[0x263F37250]);
}

void (*PhysicallyBasedMaterialResource.clearcoat.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.clearcoat.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoat.modify;
}

void PhysicallyBasedMaterialResource.clearcoat.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.clearcoatRougness.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F37160];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F37158];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.clearcoatRougness.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37238], MEMORY[0x263F37240]);
}

void (*PhysicallyBasedMaterialResource.clearcoatRougness.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.clearcoatRougness.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoatRougness.modify;
}

void PhysicallyBasedMaterialResource.clearcoatRougness.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.anisotropyLevel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F37140];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F37138];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.anisotropyLevel.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37220], MEMORY[0x263F37228]);
}

void (*PhysicallyBasedMaterialResource.anisotropyLevel.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.anisotropyLevel.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.anisotropyLevel.modify;
}

void PhysicallyBasedMaterialResource.anisotropyLevel.modify(float **a1, char a2)
{
}

id PhysicallyBasedMaterialResource.anisotropyAngle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F37130];
  uint64_t v2 = (void (*)(void, int *))MEMORY[0x263F37128];

  return PhysicallyBasedMaterialResource.roughness.getter(v1, v2, a1);
}

id PhysicallyBasedMaterialResource.roughness.getter@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void, int *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1(*(void *)(v3 + 16));
  int v11 = 0;
  a2(*(void *)(v3 + 16), &v11);
  int v7 = v11;
  id result = 0;
  if (v6)
  {
    type metadata accessor for TextureResource();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v10 = 84148994;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
  }
  *(_DWORD *)a3 = v7;
  *(void *)(a3 + 8) = result;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = v10;
  return result;
}

uint64_t key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, float), uint64_t (*a6)(uint64_t, uint64_t))
{
  float v7 = *(float *)a1;
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(*a2 + 16);
  outlined copy of MaterialParameters.Texture?(v9, v8);
  uint64_t result = a5(v11, v7);
  if (v8)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v9, v8);
    uint64_t v13 = *(void *)(v8 + 16);
    swift_release();
    uint64_t v14 = *(void *)(v10 + 16);
    return a6(v14, v13);
  }
  return result;
}

uint64_t PhysicallyBasedMaterialResource.anisotropyAngle.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.roughness.setter(a1, MEMORY[0x263F37210], MEMORY[0x263F37218]);
}

uint64_t PhysicallyBasedMaterialResource.roughness.setter(uint64_t a1, uint64_t (*a2)(void, float), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = a2(*(void *)(v3 + 16), *(float *)a1);
  if (v4)
  {
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v5, v4);
    uint64_t v7 = *(void *)(v4 + 16);
    swift_release();
    uint64_t v8 = *(void *)(v3 + 16);
    return a3(v8, v7);
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.anisotropyAngle.modify(void *a1))(float **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.anisotropyAngle.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.anisotropyAngle.modify;
}

void PhysicallyBasedMaterialResource.anisotropyAngle.modify(float **a1, char a2)
{
}

void PhysicallyBasedMaterialResource.roughness.modify(float **a1, char a2, void (*a3)(uint64_t, float), void (*a4)(void, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = *((void *)*a1 + 5);
  float v8 = **a1;
  uint64_t v10 = (void *)*((void *)*a1 + 1);
  uint64_t v9 = *((void *)*a1 + 2);
  uint64_t v11 = *(void *)(v7 + 16);
  if (a2)
  {
    outlined copy of MaterialParameters.Texture?(*((void **)*a1 + 1), v9);
    a3(v11, v8);
    if (v9)
    {
      swift_retain();
      outlined consume of MaterialParameters.Texture?(v10, v9);
      uint64_t v12 = *(void *)(v9 + 16);
      swift_release();
      a4(*(void *)(v7 + 16), v12);
    }
    outlined consume of MaterialParameters.Texture?(*((void **)v6 + 1), *((void *)v6 + 2));
  }
  else
  {
    a3(*(void *)(v7 + 16), v8);
    if (v9)
    {
      swift_retain();
      outlined consume of MaterialParameters.Texture?(v10, v9);
      uint64_t v13 = *(void *)(v9 + 16);
      swift_release();
      a4(*(void *)(v7 + 16), v13);
    }
  }

  free(v6);
}

id PhysicallyBasedMaterialResource.sheenColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = (uint64_t (*)(void))MEMORY[0x263F371C8];
  uint64_t v2 = (void (*)(void, long long *, char *))MEMORY[0x263F371D0];

  return PhysicallyBasedMaterialResource.emissive.getter(v1, v2, a1);
}

id PhysicallyBasedMaterialResource.emissive.getter@<X0>(uint64_t (*a1)(void)@<X0>, void (*a2)(void, long long *, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1(*(void *)(v3 + 16));
  char v12 = 0;
  long long v11 = 0uLL;
  a2(*(void *)(v3 + 16), &v11, &v12);
  uint64_t v7 = RECreateCGColorFromColorGamut();
  id result = 0;
  if (v6)
  {
    type metadata accessor for TextureResource();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    *(void *)(v9 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v10 = 84148994;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
  }
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = result;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = v10;
  return result;
}

void PhysicallyBasedMaterialResource.sheenColor.setter(uint64_t a1)
{
  uint64_t v1 = (void (*)(void, void, __n128))MEMORY[0x263F372A0];
  uint64_t v2 = (void (*)(void, uint64_t))MEMORY[0x263F37298];

  PhysicallyBasedMaterialResource.emissive.setter(a1, v1, v2);
}

void PhysicallyBasedMaterialResource.emissive.setter(uint64_t a1, void (*a2)(void, void, __n128), void (*a3)(void, uint64_t))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  RECGColorToColorGamut();
  __n128 v9 = 0uLL;
  v9.n128_u32[3] = 0;
  a2(*(void *)(v3 + 16), 0, v9);
  if (v8)
  {
    id v10 = v6;
    swift_retain();

    outlined consume of MaterialParameters.Texture?(v6, v8);
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v6, v8);
    uint64_t v11 = *(void *)(v8 + 16);
    swift_release();
    a3(*(void *)(v3 + 16), v11);
  }
  else
  {

    outlined consume of MaterialParameters.Texture?(v6, 0);
  }
}

void (*PhysicallyBasedMaterialResource.sheenColor.modify(void *a1))(void ***a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  PhysicallyBasedMaterialResource.sheenColor.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.sheenColor.modify;
}

void PhysicallyBasedMaterialResource.sheenColor.modify(void ***a1, char a2)
{
}

float PhysicallyBasedMaterialResource.cutoutThreshold.getter()
{
  uint64_t v0 = (void (*)(void, float *))MEMORY[0x263F371B0];

  return PhysicallyBasedMaterialResource.emissiveIntensity.getter(v0, 0.0);
}

float PhysicallyBasedMaterialResource.emissiveIntensity.getter(void (*a1)(void, float *), float a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  float v4 = a2;
  a1(*(void *)(v2 + 16), &v4);
  return v4;
}

uint64_t PhysicallyBasedMaterialResource.cutoutThreshold.setter()
{
  return MEMORY[0x270F1F160](*(void *)(v0 + 16));
}

uint64_t (*PhysicallyBasedMaterialResource.cutoutThreshold.modify(uint64_t a1))(float *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 12) = 0;
  uint64_t v3 = (_DWORD *)(a1 + 12);
  REPbrMaterialParametersGetOpacityThreshold();
  *(_DWORD *)(a1 + 8) = *v3;
  return PhysicallyBasedMaterialResource.cutoutThreshold.modify;
}

uint64_t PhysicallyBasedMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2)
{
  return UnlitMaterialResource.cutoutThreshold.modify(a1, a2, MEMORY[0x263F37280]);
}

uint64_t UnlitMaterialResource.cutoutThreshold.modify(float *a1, uint64_t a2, uint64_t (*a3)(void, float))
{
  return a3(*(void *)(*(void *)a1 + 16), a1[2]);
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  uint64_t v1 = (void (*)(void, void *))MEMORY[0x263F371E8];
  uint64_t v2 = (void (*)(void, long long *))MEMORY[0x263F371F8];

  PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(v1, v2, a1);
}

uint64_t PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(a1, MEMORY[0x263F372B8], MEMORY[0x263F372C8]);
}

void (*PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((void *)v3 + 6) = v1;
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 10) = 0;
  REPbrMaterialParametersGetUVOffset0();
  *(_OWORD *)uint64_t v3 = xmmword_22831E370;
  REPbrMaterialParametersGetUVTransform0();
  uint64_t v4 = *((void *)v3 + 5);
  float32x2_t v5 = *(float32x2_t *)(v3 + 4);
  v6.i32[0] = *(_DWORD *)v3;
  v6.i32[1] = *((_DWORD *)v3 + 3);
  float32x2_t v7 = vsqrt_f32(vadd_f32(vmul_f32(v5, v5), vmul_f32(v6, v6)));
  float v8 = atan2f(v5.f32[0], *(float *)v3);
  *((void *)v3 + 2) = v4;
  *((float32x2_t *)v3 + 3) = v7;
  *((float *)v3 + 8) = v8;
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.modify;
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
}

void PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  uint64_t v1 = (void (*)(void, void *))MEMORY[0x263F371F0];
  uint64_t v2 = (void (*)(void, long long *))MEMORY[0x263F37200];

  PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(v1, v2, a1);
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.getter(void (*a1)(void, void *)@<X0>, void (*a2)(void, long long *)@<X1>, float32x2_t *a3@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  v11[0] = 0;
  a1(*(void *)(v3 + 16), v11);
  long long v10 = xmmword_22831E370;
  a2(*(void *)(v3 + 16), &v10);
  float32x2_t v6 = (float32x2_t)v11[0];
  v7.i32[0] = v10;
  v7.i32[1] = *(_DWORD *)((unint64_t)&v10 | 0xC);
  float32x2_t v8 = vsqrt_f32(vadd_f32(vmul_f32(*(float32x2_t *)((char *)&v10 + 4), *(float32x2_t *)((char *)&v10 + 4)), vmul_f32(v7, v7)));
  float v9 = atan2f(*((float *)&v10 + 1), *(float *)&v10);
  *a3 = v6;
  a3[1] = v8;
  a3[2].f32[0] = v9;
}

uint64_t PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(a1, MEMORY[0x263F372C0], MEMORY[0x263F372D0]);
}

uint64_t PhysicallyBasedMaterialResource.textureCoordinateTransform.setter(uint64_t a1, void (*a2)(void, double), uint64_t (*a3)(uint64_t, __n128))
{
  *(void *)long long v10 = *(void *)(a1 + 8);
  float v4 = *(float *)(a1 + 16);
  a2(*(void *)(v3 + 16), *(double *)a1);
  uint64_t v5 = *(void *)(v3 + 16);
  __float2 v6 = __sincosf_stret(v4);
  v7.f32[0] = -v10[1];
  v7.i32[1] = LODWORD(v6.__cosval);
  v8.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v6.__sinval), LODWORD(v6.__cosval)), v10[0]);
  *(float32x2_t *)&v8.n128_i8[8] = vmul_f32((float32x2_t)__PAIR64__(LODWORD(v10[1]), LODWORD(v6.__sinval)), v7);

  return a3(v5, v8);
}

void (*PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  *((void *)v3 + 6) = v1;
  *((_DWORD *)v3 + 11) = 0;
  *((_DWORD *)v3 + 10) = 0;
  REPbrMaterialParametersGetUVOffset1();
  *(_OWORD *)uint64_t v3 = xmmword_22831E370;
  REPbrMaterialParametersGetUVTransform1();
  uint64_t v4 = *((void *)v3 + 5);
  float32x2_t v5 = *(float32x2_t *)(v3 + 4);
  v6.i32[0] = *(_DWORD *)v3;
  v6.i32[1] = *((_DWORD *)v3 + 3);
  float32x2_t v7 = vsqrt_f32(vadd_f32(vmul_f32(v5, v5), vmul_f32(v6, v6)));
  float v8 = atan2f(v5.f32[0], *(float *)v3);
  *((void *)v3 + 2) = v4;
  *((float32x2_t *)v3 + 3) = v7;
  *((float *)v3 + 8) = v8;
  return PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify;
}

void PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
}

void PhysicallyBasedMaterialResource.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, void (*a3)(void, double), void (*a4)(uint64_t, __n128))
{
  float32x2_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 48);
  uint64_t v12 = *(void *)(*(void *)a1 + 24);
  float v7 = *(float *)(*(void *)a1 + 32);
  a3(*(void *)(v6 + 16), *(double *)(*(void *)a1 + 16));
  uint64_t v8 = *(void *)(v6 + 16);
  __float2 v9 = __sincosf_stret(v7);
  v10.f32[0] = -*((float *)&v12 + 1);
  v10.i32[1] = LODWORD(v9.__cosval);
  v11.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), *(float *)&v12);
  *(float32x2_t *)&v11.n128_i8[8] = vmul_f32((float32x2_t)__PAIR64__(HIDWORD(v12), LODWORD(v9.__sinval)), v10);
  a4(v8, v11);

  free(v5);
}

uint64_t UnlitMaterialResource.__parameterBlock.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void UnlitMaterialResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t UnlitMaterialResource.addToLoadRequest(_:)(uint64_t a1)
{
  return UnlitMaterialResource.addToLoadRequest(_:)(a1, MEMORY[0x263F37588]);
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(a1, a2, a3, MEMORY[0x263F37588]);
}

uint64_t PhysicallyBasedMaterialResource.addToLoadRequest(_:)(uint64_t a1)
{
  return UnlitMaterialResource.addToLoadRequest(_:)(a1, MEMORY[0x263F37190]);
}

uint64_t UnlitMaterialResource.addToLoadRequest(_:)(uint64_t a1, void (*a2)(void))
{
  a2(*(void *)(v2 + 16));

  return REAssetLoadRequestAddAsset();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance PhysicallyBasedMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(a1, a2, a3, MEMORY[0x263F37190]);
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance UnlitMaterialResource(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4(*(void *)(*(void *)v4 + 16));

  return REAssetLoadRequestAddAsset();
}

id PhysicallyBasedMaterialResource.clearcoatNormal.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterialResource.normal.getter(MEMORY[0x263F37150], a1);
}

id PhysicallyBasedMaterialResource.normal.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  id result = (id)a1(*(void *)(v2 + 16));
  if (result)
  {
    id v5 = result;
    type metadata accessor for TextureResource();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    *(void *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v7 = 84148994;
  }
  else
  {
    uint64_t v6 = 0;
    int v7 = 0;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v7;
  return result;
}

uint64_t PhysicallyBasedMaterialResource.clearcoatNormal.setter(uint64_t a1)
{
  return PhysicallyBasedMaterialResource.ambientOcclusion.setter(a1, MEMORY[0x263F37230]);
}

uint64_t PhysicallyBasedMaterialResource.ambientOcclusion.setter(uint64_t result, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(result + 8);
  if (v3)
  {
    uint64_t v4 = *(void **)result;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v4, v3);
    uint64_t v5 = *(void *)(v3 + 16);
    swift_release();
    uint64_t v6 = *(void *)(v2 + 16);
    return a2(v6, v5);
  }
  return result;
}

void (*PhysicallyBasedMaterialResource.clearcoatNormal.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  PhysicallyBasedMaterialResource.clearcoatNormal.getter((uint64_t)v3);
  return PhysicallyBasedMaterialResource.clearcoatNormal.modify;
}

void PhysicallyBasedMaterialResource.clearcoatNormal.modify(uint64_t *a1, char a2)
{
}

void PhysicallyBasedMaterialResource.ambientOcclusion.modify(uint64_t *a1, char a2, void (*a3)(void, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 8);
  if (a2)
  {
    if (v5)
    {
      a3(*(void *)(*(void *)(v4 + 32) + 16), *(void *)(v5 + 16));
      uint64_t v6 = *(void *)(v4 + 8);
    }
    else
    {
      uint64_t v6 = 0;
    }
    outlined consume of MaterialParameters.Texture?(*(void **)v4, v6);
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(v4 + 32);
    uint64_t v8 = *(void **)v4;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v8, v5);
    uint64_t v9 = *(void *)(v5 + 16);
    swift_release();
    a3(*(void *)(v7 + 16), v9);
  }

  free((void *)v4);
}

unint64_t lazy protocol witness table accessor for type BlendingType and conformance BlendingType()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendingType and conformance BlendingType;
  if (!lazy protocol witness table cache variable for type BlendingType and conformance BlendingType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendingType and conformance BlendingType);
  }
  return result;
}

uint64_t sub_2282C1B1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REMaterialParameterBlockValueCreate();
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  return result;
}

double sub_2282C1B58@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_7Tm_0((void (*)(uint64_t *__return_ptr))UnlitMaterialResource.color.getter, a1);
}

uint64_t sub_2282C1B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))UnlitMaterialResource.color.setter);
}

uint64_t sub_2282C1B9C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REUnlitMaterialParametersGetOpacityThreshold();
  *a1 = v3;
  return result;
}

uint64_t sub_2282C1BCC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F21150](*(void *)(*(void *)a2 + 16));
}

double sub_2282C1BE0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_7Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.color.getter, a1);
}

double keypath_get_7Tm_0@<D0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v6);
  uint64_t v3 = v8;
  int v4 = v9;
  *(void *)a2 = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 8) = v7;
  *(void *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_2282C1C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.color.setter);
}

double sub_2282C1C7C@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterialResource.normal.getter, a1);
}

uint64_t sub_2282C1C94(uint64_t result)
{
  if (*(void *)(result + 8)) {
    return REPbrMaterialParametersSetNormalTexture();
  }
  return result;
}

double sub_2282C1CB0@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.roughness.getter, a1);
}

uint64_t sub_2282C1CC8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37288], MEMORY[0x263F37290]);
}

double sub_2282C1D08@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.metallic.getter, a1);
}

double keypath_get_17Tm_0@<D0>(void (*a1)(uint64_t *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v6);
  uint64_t v3 = v8;
  int v4 = v9;
  *(_DWORD *)a2 = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 8) = v7;
  *(void *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_2282C1D78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37270], MEMORY[0x263F37278]);
}

double sub_2282C1DB8@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.specular.getter, a1);
}

uint64_t sub_2282C1DD0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F372A8], MEMORY[0x263F372B0]);
}

double sub_2282C1E10@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_7Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.emissive.getter, a1);
}

uint64_t sub_2282C1E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.emissive.setter);
}

float sub_2282C1E54@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2 = (void (*)(void, float *))MEMORY[0x263F37180];

  return keypath_get_25Tm(a1, v2, a2, 1.0);
}

uint64_t sub_2282C1EC4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F1F150](*(void *)(*(void *)a2 + 16));
}

double sub_2282C1ED4@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterialResource.ambientOcclusion.getter, a1);
}

double keypath_get_15Tm@<D0>(void (*a1)(long long *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v6);
  uint64_t v3 = v7;
  int v4 = v8;
  double result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_2282C1F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_28Tm(a1, a2, a3, a4, MEMORY[0x263F37208]);
}

double sub_2282C1F54@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.clearcoat.getter, a1);
}

uint64_t sub_2282C1F6C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37248], MEMORY[0x263F37250]);
}

double sub_2282C1FAC@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.clearcoatRougness.getter, a1);
}

uint64_t sub_2282C1FC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37238], MEMORY[0x263F37240]);
}

double sub_2282C2004@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.anisotropyLevel.getter, a1);
}

uint64_t sub_2282C201C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37220], MEMORY[0x263F37228]);
}

double sub_2282C205C@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_17Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.anisotropyAngle.getter, a1);
}

uint64_t sub_2282C2074(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PhysicallyBasedMaterialResource.roughness : PhysicallyBasedMaterialResource(a1, a2, a3, a4, MEMORY[0x263F37210], MEMORY[0x263F37218]);
}

double sub_2282C20B4@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_7Tm_0((void (*)(uint64_t *__return_ptr))PhysicallyBasedMaterialResource.sheenColor.getter, a1);
}

uint64_t sub_2282C20CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for UnlitMaterialResource.color : UnlitMaterialResource(a1, a2, a3, a4, (uint64_t (*)(id *))PhysicallyBasedMaterialResource.sheenColor.setter);
}

float sub_2282C20F8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2 = (void (*)(void, float *))MEMORY[0x263F371B0];

  return keypath_get_25Tm(a1, v2, a2, 0.0);
}

float keypath_get_25Tm@<S0>(uint64_t *a1@<X0>, void (*a2)(void, float *)@<X3>, float *a3@<X8>, float a4@<S0>)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  float v7 = a4;
  a2(*(void *)(v5 + 16), &v7);
  float result = v7;
  *a3 = v7;
  return result;
}

uint64_t sub_2282C21DC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F1F160](*(void *)(*(void *)a2 + 16));
}

double sub_2282C21EC@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_41Tm((void (*)(void *__return_ptr))PhysicallyBasedMaterialResource.textureCoordinateTransform.getter, a1);
}

uint64_t sub_2282C2204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_42Tm(a1, a2, a3, a4, (uint64_t (*)(void *))PhysicallyBasedMaterialResource.textureCoordinateTransform.setter);
}

double sub_2282C221C@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_41Tm((void (*)(void *__return_ptr))PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.getter, a1);
}

double keypath_get_41Tm@<D0>(void (*a1)(void *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(v6);
  double result = *(double *)v6;
  uint64_t v4 = v6[1];
  int v5 = v7;
  *(void *)a2 = v6[0];
  *(void *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_2282C227C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_42Tm(a1, a2, a3, a4, (uint64_t (*)(void *))PhysicallyBasedMaterialResource.secondaryTextureCoordinateTransform.setter);
}

uint64_t keypath_set_42Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  v8[0] = *(void *)a1;
  v8[1] = v5;
  int v9 = v6;
  return a5(v8);
}

double sub_2282C22D8@<D0>(uint64_t a1@<X8>)
{
  return keypath_get_15Tm((void (*)(long long *__return_ptr))PhysicallyBasedMaterialResource.clearcoatNormal.getter, a1);
}

uint64_t sub_2282C22F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_28Tm(a1, a2, a3, a4, MEMORY[0x263F37230]);
}

uint64_t keypath_set_28Tm(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  uint64_t v5 = *(void *)(result + 8);
  if (v5) {
    return a5(*(void *)(*(void *)a2 + 16), *(void *)(v5 + 16));
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BlendingType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282C23F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlendingType()
{
  return &type metadata for BlendingType;
}

uint64_t type metadata accessor for MaterialResourceUtility()
{
  return self;
}

uint64_t type metadata accessor for UnlitMaterialResource()
{
  return self;
}

uint64_t method lookup function for UnlitMaterialResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for UnlitMaterialResource);
}

uint64_t type metadata accessor for PhysicallyBasedMaterialResource()
{
  return self;
}

uint64_t method lookup function for PhysicallyBasedMaterialResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PhysicallyBasedMaterialResource);
}

BOOL static ComponentInfo.Access.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Void __swiftcall SceneManager.registerBuiltInComponents()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo.SupportedPlatform>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_228324960;
  v1._countAndFlagsBits = 0x35312E3031;
  v1._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v1);
  long long v2 = v291;
  int v3 = v292;
  if (one-time initialization token for macOS != -1)
  {
    swift_once();
    long long v2 = v291;
  }
  uint64_t v4 = unk_2681C77D0;
  uint64_t v5 = qword_2681C77E8;
  *(void *)(v0 + 32) = static ComponentInfo.Platform.macOS;
  *(void *)(v0 + 40) = v4;
  *(_OWORD *)(v0 + 48) = xmmword_2681C77D8;
  *(void *)(v0 + 64) = v5;
  *(_OWORD *)(v0 + 72) = v2;
  *(void *)(v0 + 88) = v3;
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 808334129;
  v6._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v6);
  long long v7 = v291;
  uint64_t v8 = v292;
  if (one-time initialization token for macCatalyst != -1)
  {
    swift_once();
    long long v7 = v291;
  }
  uint64_t v9 = *(void *)algn_2681C77F8;
  uint64_t v10 = qword_2681C7810;
  *(void *)(v0 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(void *)(v0 + 104) = v9;
  *(_OWORD *)(v0 + 112) = xmmword_2681C7800;
  *(void *)(v0 + 128) = v10;
  *(_OWORD *)(v0 + 136) = v7;
  *(void *)(v0 + 152) = v8;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 808334129;
  v11._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v11);
  long long v12 = v291;
  uint64_t v13 = v292;
  if (one-time initialization token for iOS != -1)
  {
    swift_once();
    long long v12 = v291;
  }
  uint64_t v14 = unk_2681C7820;
  uint64_t v15 = qword_2681C7838;
  *(void *)(v0 + 160) = static ComponentInfo.Platform.iOS;
  *(void *)(v0 + 168) = v14;
  *(_OWORD *)(v0 + 176) = xmmword_2681C7828;
  *(void *)(v0 + 192) = v15;
  *(_OWORD *)(v0 + 200) = v12;
  *(void *)(v0 + 216) = v13;
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = 3157553;
  v16._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v16);
  long long v17 = v291;
  id v18 = v292;
  if (one-time initialization token for xrOS != -1)
  {
    swift_once();
    long long v17 = v291;
  }
  uint64_t v19 = static ComponentInfo.Platform.xrOS;
  uint64_t v20 = *(void *)algn_2681C7848;
  long long v21 = xmmword_2681C7850;
  long long v22 = xmmword_2681C7850;
  uint64_t v23 = qword_2681C7860;
  uint64_t v265 = qword_2681C7860;
  *(void *)(v0 + 224) = static ComponentInfo.Platform.xrOS;
  *(void *)(v0 + 232) = v20;
  uint64_t v24 = v19;
  uint64_t v266 = v19;
  *(_OWORD *)(v0 + 240) = v21;
  *(void *)(v0 + 256) = v23;
  *(_OWORD *)(v0 + 264) = v17;
  *(void *)(v0 + 280) = v18;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v26._countAndFlagsBits = 0x342E35312E3031;
  v26._object = (void *)0xE700000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v26);
  long long v27 = v292;
  long long v28 = v291;
  uint64_t v29 = unk_2681C77D0;
  long long v30 = xmmword_2681C77D8;
  uint64_t v267 = qword_2681C77E8;
  uint64_t v31 = qword_2681C77E8;
  uint64_t v268 = static ComponentInfo.Platform.macOS;
  *(void *)(v25 + 32) = static ComponentInfo.Platform.macOS;
  *(void *)(v25 + 40) = v29;
  *(_OWORD *)(v25 + 48) = v30;
  *(void *)(v25 + 64) = v31;
  *(_OWORD *)(v25 + 72) = v28;
  *(void *)(v25 + 88) = v27;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 875442993;
  v32._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v32);
  int64_t v33 = v292;
  long long v34 = v291;
  uint64_t v35 = *(void *)algn_2681C77F8;
  long long v36 = xmmword_2681C7800;
  uint64_t v285 = xmmword_2681C7800;
  uint64_t v287 = static ComponentInfo.Platform.macCatalyst;
  uint64_t v37 = qword_2681C7810;
  uint64_t v281 = qword_2681C7810;
  uint64_t v283 = *((void *)&xmmword_2681C7800 + 1);
  *(void *)(v25 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(void *)(v25 + 104) = v35;
  *(_OWORD *)(v25 + 112) = v36;
  *(void *)(v25 + 128) = v37;
  *(_OWORD *)(v25 + 136) = v34;
  *(void *)(v25 + 152) = v33;
  swift_bridgeObjectRetain();
  v38._countAndFlagsBits = 875442993;
  v38._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v38);
  uint64_t v39 = v292;
  long long v40 = v291;
  uint64_t v41 = unk_2681C7820;
  uint64_t v273 = static ComponentInfo.Platform.iOS;
  uint64_t v275 = *((void *)&xmmword_2681C7828 + 1);
  uint64_t v277 = qword_2681C7838;
  uint64_t v42 = qword_2681C7838;
  uint64_t v279 = xmmword_2681C7828;
  *(void *)(v25 + 160) = static ComponentInfo.Platform.iOS;
  *(void *)(v25 + 168) = v41;
  *(void *)(v25 + 176) = v279;
  *(void *)(v25 + 184) = v275;
  *(void *)(v25 + 192) = v42;
  *(_OWORD *)(v25 + 200) = v40;
  *(void *)(v25 + 216) = v39;
  swift_bridgeObjectRetain();
  v43._countAndFlagsBits = 3157553;
  v43._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v43);
  uint64_t v44 = v292;
  long long v45 = v291;
  *(void *)(v25 + 224) = v24;
  *(void *)(v25 + 232) = v20;
  *(_OWORD *)(v25 + 240) = v22;
  *(void *)(v25 + 256) = v265;
  *(_OWORD *)(v25 + 264) = v45;
  uint64_t v259 = v25;
  *(void *)(v25 + 280) = v44;
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v47._countAndFlagsBits = 0x35312E3031;
  v47._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v47);
  uint64_t v48 = v292;
  long long v49 = v291;
  *(void *)(v46 + 32) = v268;
  *(void *)(v46 + 40) = v29;
  *(_OWORD *)(v46 + 48) = v30;
  *(void *)(v46 + 64) = v267;
  *(_OWORD *)(v46 + 72) = v49;
  *(void *)(v46 + 88) = v48;
  swift_bridgeObjectRetain();
  v50._countAndFlagsBits = 808334385;
  v50._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v50);
  uint64_t v51 = v292;
  long long v52 = v291;
  *(void *)(v46 + 96) = v287;
  *(void *)(v46 + 104) = v35;
  *(void *)(v46 + 112) = v285;
  *(void *)(v46 + 120) = v283;
  *(void *)(v46 + 128) = v281;
  *(_OWORD *)(v46 + 136) = v52;
  *(void *)(v46 + 152) = v51;
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = 808334129;
  v53._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v53);
  uint64_t v54 = v292;
  long long v55 = v291;
  *(void *)(v46 + 160) = v273;
  *(void *)(v46 + 168) = v41;
  *(void *)(v46 + 176) = v279;
  *(void *)(v46 + 184) = v275;
  *(void *)(v46 + 192) = v277;
  *(_OWORD *)(v46 + 200) = v55;
  *(void *)(v46 + 216) = v54;
  swift_bridgeObjectRetain();
  v56._countAndFlagsBits = 3157553;
  v56._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v56);
  unint64_t v57 = v292;
  long long v58 = v291;
  *(void *)(v46 + 224) = v266;
  *(void *)(v46 + 232) = v20;
  *(_OWORD *)(v46 + 240) = v22;
  *(void *)(v46 + 256) = v265;
  *(_OWORD *)(v46 + 264) = v58;
  uint64_t v264 = v46;
  *(void *)(v46 + 280) = v57;
  uint64_t v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_22831E360;
  swift_bridgeObjectRetain();
  v60._countAndFlagsBits = 808334385;
  v60._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v60);
  uint64_t v61 = v292;
  long long v62 = v291;
  *(void *)(v59 + 32) = v287;
  *(void *)(v59 + 40) = v35;
  *(void *)(v59 + 48) = v285;
  *(void *)(v59 + 56) = v283;
  *(void *)(v59 + 64) = v281;
  *(_OWORD *)(v59 + 72) = v62;
  *(void *)(v59 + 88) = v61;
  swift_bridgeObjectRetain();
  v63._countAndFlagsBits = 808334129;
  v63._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v63);
  uint64_t v64 = v292;
  long long v65 = v291;
  *(void *)(v59 + 96) = v273;
  *(void *)(v59 + 104) = v41;
  *(void *)(v59 + 112) = v279;
  *(void *)(v59 + 120) = v275;
  *(void *)(v59 + 128) = v277;
  *(_OWORD *)(v59 + 136) = v65;
  *(void *)(v59 + 152) = v64;
  swift_bridgeObjectRetain();
  v66._countAndFlagsBits = 3157553;
  v66._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v66);
  uint64_t v67 = v292;
  long long v68 = v291;
  *(void *)(v59 + 160) = v266;
  *(void *)(v59 + 168) = v20;
  *(_OWORD *)(v59 + 176) = v22;
  *(void *)(v59 + 192) = v265;
  *(_OWORD *)(v59 + 200) = v68;
  uint64_t v263 = v59;
  *(void *)(v59 + 216) = v67;
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v70._countAndFlagsBits = 808333617;
  v70._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v70);
  uint64_t v71 = v292;
  long long v72 = v291;
  *(void *)(v69 + 32) = v268;
  *(void *)(v69 + 40) = v29;
  *(_OWORD *)(v69 + 48) = v30;
  *(void *)(v69 + 64) = v267;
  *(_OWORD *)(v69 + 72) = v72;
  *(void *)(v69 + 88) = v71;
  swift_bridgeObjectRetain();
  v73._countAndFlagsBits = 808334385;
  v73._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v73);
  uint64_t v74 = v292;
  long long v75 = v291;
  *(void *)(v69 + 96) = v287;
  *(void *)(v69 + 104) = v35;
  *(void *)(v69 + 112) = v285;
  *(void *)(v69 + 120) = v283;
  *(void *)(v69 + 128) = v281;
  *(_OWORD *)(v69 + 136) = v75;
  *(void *)(v69 + 152) = v74;
  swift_bridgeObjectRetain();
  v76._countAndFlagsBits = 808334385;
  v76._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v76);
  char v77 = v292;
  long long v78 = v291;
  *(void *)(v69 + 160) = v273;
  *(void *)(v69 + 168) = v41;
  *(void *)(v69 + 176) = v279;
  *(void *)(v69 + 184) = v275;
  *(void *)(v69 + 192) = v277;
  *(_OWORD *)(v69 + 200) = v78;
  *(void *)(v69 + 216) = v77;
  swift_bridgeObjectRetain();
  v79._countAndFlagsBits = 3157553;
  v79._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v79);
  uint64_t v80 = v292;
  long long v81 = v291;
  *(void *)(v69 + 224) = v266;
  *(void *)(v69 + 232) = v20;
  *(_OWORD *)(v69 + 240) = v22;
  *(void *)(v69 + 256) = v265;
  *(_OWORD *)(v69 + 264) = v81;
  uint64_t v260 = v69;
  *(void *)(v69 + 280) = v80;
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v83._countAndFlagsBits = 808333873;
  v83._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v83);
  uint64_t v84 = v292;
  long long v85 = v291;
  *(void *)(v82 + 32) = v268;
  *(void *)(v82 + 40) = v29;
  *(_OWORD *)(v82 + 48) = v30;
  *(void *)(v82 + 64) = v267;
  *(_OWORD *)(v82 + 72) = v85;
  *(void *)(v82 + 88) = v84;
  swift_bridgeObjectRetain();
  v86._countAndFlagsBits = 808334641;
  v86._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v86);
  uint64_t v87 = v292;
  long long v88 = v291;
  *(void *)(v82 + 96) = v287;
  *(void *)(v82 + 104) = v35;
  *(void *)(v82 + 112) = v285;
  *(void *)(v82 + 120) = v283;
  *(void *)(v82 + 128) = v281;
  *(_OWORD *)(v82 + 136) = v88;
  *(void *)(v82 + 152) = v87;
  swift_bridgeObjectRetain();
  v89._countAndFlagsBits = 808334641;
  v89._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v89);
  long long v90 = v292;
  long long v91 = v291;
  *(void *)(v82 + 160) = v273;
  *(void *)(v82 + 168) = v41;
  *(void *)(v82 + 176) = v279;
  *(void *)(v82 + 184) = v275;
  *(void *)(v82 + 192) = v277;
  *(_OWORD *)(v82 + 200) = v91;
  *(void *)(v82 + 216) = v90;
  swift_bridgeObjectRetain();
  v92._countAndFlagsBits = 3157553;
  v92._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v92);
  uint64_t v93 = v292;
  long long v94 = v291;
  *(void *)(v82 + 224) = v266;
  *(void *)(v82 + 232) = v20;
  *(_OWORD *)(v82 + 240) = v22;
  *(void *)(v82 + 256) = v265;
  *(_OWORD *)(v82 + 264) = v94;
  uint64_t v270 = v82;
  *(void *)(v82 + 280) = v93;
  swift_bridgeObjectRetain();
  v95._countAndFlagsBits = 808334129;
  v95._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v95);
  swift_bridgeObjectRetain();
  v96._countAndFlagsBits = 808334897;
  v96._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v96);
  swift_bridgeObjectRetain();
  v97._countAndFlagsBits = 808334897;
  v97._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v97);
  swift_bridgeObjectRetain();
  v98._countAndFlagsBits = 3157553;
  v98._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = xmmword_228324960;
  v100._countAndFlagsBits = 808334385;
  v100._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v100);
  uint64_t v101 = v292;
  long long v102 = v291;
  uint64_t v103 = static ComponentInfo.Platform.macOS;
  uint64_t v104 = unk_2681C77D0;
  long long v105 = xmmword_2681C77D8;
  uint64_t v289 = *((void *)&xmmword_2681C77D8 + 1);
  uint64_t v106 = qword_2681C77E8;
  uint64_t v280 = qword_2681C77E8;
  *(void *)(v99 + 32) = static ComponentInfo.Platform.macOS;
  *(void *)(v99 + 40) = v104;
  uint64_t v107 = v103;
  *(_OWORD *)(v99 + 48) = v105;
  *(void *)(v99 + 64) = v106;
  *(_OWORD *)(v99 + 72) = v102;
  *(void *)(v99 + 88) = v101;
  swift_bridgeObjectRetain();
  v108._countAndFlagsBits = 808335153;
  v108._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v108);
  float32x4_t v109 = v292;
  long long v110 = v291;
  uint64_t v111 = *(void *)algn_2681C77F8;
  long long v112 = xmmword_2681C7800;
  uint64_t v286 = *((void *)&xmmword_2681C7800 + 1);
  uint64_t v288 = static ComponentInfo.Platform.macCatalyst;
  uint64_t v113 = qword_2681C7810;
  uint64_t v282 = qword_2681C7810;
  *(void *)(v99 + 96) = static ComponentInfo.Platform.macCatalyst;
  *(void *)(v99 + 104) = v111;
  *(_OWORD *)(v99 + 112) = v112;
  *(void *)(v99 + 128) = v113;
  *(_OWORD *)(v99 + 136) = v110;
  *(void *)(v99 + 152) = v109;
  swift_bridgeObjectRetain();
  v114._countAndFlagsBits = 808335153;
  v114._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v114);
  uint64_t v115 = v292;
  long long v116 = v291;
  uint64_t v117 = unk_2681C7820;
  uint64_t v284 = static ComponentInfo.Platform.iOS;
  long long v118 = xmmword_2681C7828;
  uint64_t v278 = xmmword_2681C7828;
  uint64_t v119 = qword_2681C7838;
  uint64_t v272 = qword_2681C7838;
  uint64_t v274 = *((void *)&xmmword_2681C7828 + 1);
  *(void *)(v99 + 160) = static ComponentInfo.Platform.iOS;
  *(void *)(v99 + 168) = v117;
  *(_OWORD *)(v99 + 176) = v118;
  *(void *)(v99 + 192) = v119;
  *(_OWORD *)(v99 + 200) = v116;
  *(void *)(v99 + 216) = v115;
  swift_bridgeObjectRetain();
  v120._countAndFlagsBits = 3157553;
  v120._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v120);
  simd_float3 v121 = v292;
  long long v122 = v291;
  uint64_t v123 = *(void *)algn_2681C7848;
  uint64_t v276 = static ComponentInfo.Platform.xrOS;
  long long v124 = xmmword_2681C7850;
  uint64_t v125 = qword_2681C7860;
  uint64_t v290 = qword_2681C7860;
  *(void *)(v99 + 224) = static ComponentInfo.Platform.xrOS;
  *(void *)(v99 + 232) = v123;
  uint64_t v258 = v123;
  *(_OWORD *)(v99 + 240) = v124;
  *(void *)(v99 + 256) = v125;
  *(_OWORD *)(v99 + 264) = v122;
  uint64_t v261 = v99;
  *(void *)(v99 + 280) = v121;
  uint64_t v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v127._countAndFlagsBits = 808334641;
  v127._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v127);
  uint64_t v128 = v292;
  long long v129 = v291;
  uint64_t v271 = v107;
  *(void *)(v126 + 32) = v107;
  *(void *)(v126 + 40) = v104;
  *(void *)(v126 + 48) = v105;
  *(void *)(v126 + 56) = v289;
  *(void *)(v126 + 64) = v280;
  *(_OWORD *)(v126 + 72) = v129;
  *(void *)(v126 + 88) = v128;
  swift_bridgeObjectRetain();
  v130._countAndFlagsBits = 808335409;
  v130._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v130);
  int8x16_t v131 = v292;
  long long v132 = v291;
  *(void *)(v126 + 96) = v288;
  *(void *)(v126 + 104) = v111;
  *(void *)(v126 + 112) = v112;
  *(void *)(v126 + 120) = v286;
  *(void *)(v126 + 128) = v282;
  *(_OWORD *)(v126 + 136) = v132;
  *(void *)(v126 + 152) = v131;
  swift_bridgeObjectRetain();
  v133._countAndFlagsBits = 808335409;
  v133._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v133);
  uint64_t v134 = v292;
  long long v135 = v291;
  *(void *)(v126 + 160) = v284;
  *(void *)(v126 + 168) = v117;
  *(void *)(v126 + 176) = v278;
  *(void *)(v126 + 184) = v274;
  *(void *)(v126 + 192) = v272;
  *(_OWORD *)(v126 + 200) = v135;
  *(void *)(v126 + 216) = v134;
  swift_bridgeObjectRetain();
  v136._countAndFlagsBits = 3157553;
  v136._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v136);
  simd_float3 v137 = v292;
  long long v138 = v291;
  *(void *)(v126 + 224) = v276;
  *(void *)(v126 + 232) = v123;
  *(_OWORD *)(v126 + 240) = v124;
  *(void *)(v126 + 256) = v290;
  *(_OWORD *)(v126 + 264) = v138;
  uint64_t v262 = v126;
  *(void *)(v126 + 280) = v137;
  uint64_t v139 = swift_allocObject();
  *(_OWORD *)(v139 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v140._countAndFlagsBits = 0x35312E3031;
  v140._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v140);
  uint64_t v141 = v292;
  long long v142 = v291;
  *(void *)(v139 + 32) = v107;
  *(void *)(v139 + 40) = v104;
  *(void *)(v139 + 48) = v105;
  *(void *)(v139 + 56) = v289;
  *(void *)(v139 + 64) = v280;
  *(_OWORD *)(v139 + 72) = v142;
  *(void *)(v139 + 88) = v141;
  swift_bridgeObjectRetain();
  v143._countAndFlagsBits = 808334129;
  v143._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v143);
  float32x4_t v144 = v292;
  long long v145 = v291;
  *(void *)(v139 + 96) = v288;
  *(void *)(v139 + 104) = v111;
  *(void *)(v139 + 112) = v112;
  *(void *)(v139 + 120) = v286;
  *(void *)(v139 + 128) = v282;
  *(_OWORD *)(v139 + 136) = v145;
  *(void *)(v139 + 152) = v144;
  swift_bridgeObjectRetain();
  v146._countAndFlagsBits = 808334129;
  v146._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v146);
  uint64_t v147 = v292;
  long long v148 = v291;
  *(void *)(v139 + 160) = v284;
  *(void *)(v139 + 168) = v117;
  *(void *)(v139 + 176) = v278;
  *(void *)(v139 + 184) = v274;
  *(void *)(v139 + 192) = v272;
  *(_OWORD *)(v139 + 200) = v148;
  *(void *)(v139 + 216) = v147;
  swift_bridgeObjectRetain();
  v149._countAndFlagsBits = 3157554;
  v149._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v149);
  unsigned __int8 v150 = v292;
  long long v151 = v291;
  *(void *)(v139 + 224) = v276;
  *(void *)(v139 + 232) = v123;
  *(_OWORD *)(v139 + 240) = v124;
  *(void *)(v139 + 256) = v290;
  *(_OWORD *)(v139 + 264) = v151;
  *(void *)(v139 + 280) = v150;
  uint64_t v152 = swift_allocObject();
  *(_OWORD *)(v152 + 16) = xmmword_228324960;
  swift_bridgeObjectRetain();
  v153._countAndFlagsBits = 808334641;
  v153._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v153);
  uint64_t v154 = v292;
  long long v155 = v291;
  *(void *)(v152 + 32) = v271;
  *(void *)(v152 + 40) = v104;
  *(void *)(v152 + 48) = v105;
  *(void *)(v152 + 56) = v289;
  *(void *)(v152 + 64) = v280;
  *(_OWORD *)(v152 + 72) = v155;
  *(void *)(v152 + 88) = v154;
  swift_bridgeObjectRetain();
  v156._countAndFlagsBits = 808335409;
  v156._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v156);
  long long v157 = v292;
  long long v158 = v291;
  *(void *)(v152 + 96) = v288;
  *(void *)(v152 + 104) = v111;
  *(void *)(v152 + 112) = v112;
  *(void *)(v152 + 120) = v286;
  *(void *)(v152 + 128) = v282;
  *(_OWORD *)(v152 + 136) = v158;
  *(void *)(v152 + 152) = v157;
  swift_bridgeObjectRetain();
  v159._countAndFlagsBits = 808335409;
  v159._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v159);
  long long v160 = v292;
  long long v161 = v291;
  *(void *)(v152 + 160) = v284;
  *(void *)(v152 + 168) = v117;
  *(void *)(v152 + 176) = v278;
  *(void *)(v152 + 184) = v274;
  *(void *)(v152 + 192) = v272;
  *(_OWORD *)(v152 + 200) = v161;
  *(void *)(v152 + 216) = v160;
  swift_bridgeObjectRetain();
  v162._countAndFlagsBits = 3157554;
  v162._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v162);
  long long v163 = v292;
  long long v164 = v291;
  *(void *)(v152 + 224) = v276;
  *(void *)(v152 + 232) = v123;
  *(_OWORD *)(v152 + 240) = v124;
  *(void *)(v152 + 256) = v290;
  *(_OWORD *)(v152 + 264) = v164;
  uint64_t v269 = v152;
  *(void *)(v152 + 280) = v163;
  swift_bridgeObjectRetain();
  v165._countAndFlagsBits = 3157554;
  v165._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v165);
  uint64_t v166 = swift_allocObject();
  *(_OWORD *)(v166 + 16) = xmmword_228324960;
  v167._countAndFlagsBits = 825111857;
  v167._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v167);
  char v168 = v292;
  long long v169 = v291;
  *(void *)(v166 + 32) = v271;
  *(void *)(v166 + 40) = v104;
  *(void *)(v166 + 48) = v105;
  *(void *)(v166 + 56) = v289;
  *(void *)(v166 + 64) = v280;
  *(_OWORD *)(v166 + 72) = v169;
  *(void *)(v166 + 88) = v168;
  swift_bridgeObjectRetain();
  v170._countAndFlagsBits = 825112625;
  v170._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v170);
  long long v171 = v292;
  long long v172 = v291;
  *(void *)(v166 + 96) = v288;
  *(void *)(v166 + 104) = v111;
  *(void *)(v166 + 112) = v112;
  *(void *)(v166 + 120) = v286;
  *(void *)(v166 + 128) = v282;
  *(_OWORD *)(v166 + 136) = v172;
  *(void *)(v166 + 152) = v171;
  swift_bridgeObjectRetain();
  v173._countAndFlagsBits = 825112625;
  v173._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v173);
  uint64_t v174 = v292;
  long long v175 = v291;
  *(void *)(v166 + 160) = v284;
  *(void *)(v166 + 168) = v117;
  *(void *)(v166 + 176) = v278;
  *(void *)(v166 + 184) = v274;
  *(void *)(v166 + 192) = v272;
  *(_OWORD *)(v166 + 200) = v175;
  *(void *)(v166 + 216) = v174;
  swift_bridgeObjectRetain();
  v176._countAndFlagsBits = 3223090;
  v176._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v176);
  long long v177 = v292;
  long long v178 = v291;
  *(void *)(v166 + 224) = v276;
  *(void *)(v166 + 232) = v258;
  *(_OWORD *)(v166 + 240) = v124;
  *(void *)(v166 + 256) = v290;
  *(_OWORD *)(v166 + 264) = v178;
  *(void *)(v166 + 280) = v177;
  type metadata accessor for BuiltInComponentRegistry();
  ObjCClassFromMetadatCGFloat a = swift_getObjCClassFromMetadata();
  v180 = self;
  swift_bridgeObjectRetain();
  id v181 = objc_msgSend(v180, sel_bundleForClass_, ObjCClassFromMetadata);
  id v182 = objc_msgSend(v181, sel_bundleIdentifier);

  if (v182)
  {
    uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v185 = v184;
  }
  else
  {
    unint64_t v185 = 0x8000000228352640;
    uint64_t v183 = 0xD00000000000001BLL;
  }
  uint64_t ComponentType = RERigidBodyComponentGetComponentType();
  if (!ComponentType) {
    uint64_t ComponentType = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsBodyComponent, (uint64_t)&protocol witness table for PhysicsBodyComponent);
  }
  uint64_t v187 = ComponentType;
  swift_beginAccess();
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PhysicsBodyComponent;
  v293 = &protocol witness table for PhysicsBodyComponent;
  int v294 = 22;
  char v295 = 0;
  uint64_t v296 = v187;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsBodyComponent, (uint64_t)&protocol witness table for PhysicsBodyComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v188 = REMotionStateComponentGetComponentType();
  if (!v188) {
    uint64_t v188 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsMotionComponent, (uint64_t)&protocol witness table for PhysicsMotionComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PhysicsMotionComponent;
  v293 = &protocol witness table for PhysicsMotionComponent;
  int v294 = 58;
  char v295 = 0;
  uint64_t v296 = v188;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsMotionComponent, (uint64_t)&protocol witness table for PhysicsMotionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v189 = REPointLightComponentGetComponentType();
  if (!v189) {
    uint64_t v189 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PointLightComponent, (uint64_t)&protocol witness table for PointLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PointLightComponent;
  v293 = &protocol witness table for PointLightComponent;
  int v294 = 51;
  char v295 = 0;
  uint64_t v296 = v189;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v139;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PointLightComponent, (uint64_t)&protocol witness table for PointLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v190 = REColliderComponentGetComponentType();
  if (!v190) {
    uint64_t v190 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CollisionComponent, (uint64_t)&protocol witness table for CollisionComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for CollisionComponent;
  v293 = &protocol witness table for CollisionComponent;
  int v294 = 57;
  char v295 = 0;
  uint64_t v296 = v190;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CollisionComponent, (uint64_t)&protocol witness table for CollisionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v191 = REDirectionalLightComponentGetComponentType();
  if (!v191) {
    uint64_t v191 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent, (uint64_t)&protocol witness table for DirectionalLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for DirectionalLightComponent;
  v293 = &protocol witness table for DirectionalLightComponent;
  int v294 = 49;
  char v295 = 0;
  uint64_t v296 = v191;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent, (uint64_t)&protocol witness table for DirectionalLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v192 = REShadowMapComponentGetComponentType();
  if (!v192) {
    uint64_t v192 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for DirectionalLightComponent.Shadow;
  v293 = &protocol witness table for DirectionalLightComponent.Shadow;
  int v294 = 53;
  char v295 = 0;
  uint64_t v296 = v192;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v193 = REMeshComponentGetComponentType();
  if (!v193) {
    uint64_t v193 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelComponent, (uint64_t)&protocol witness table for ModelComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ModelComponent;
  v293 = &protocol witness table for ModelComponent;
  int v294 = 7;
  char v295 = 0;
  uint64_t v296 = v193;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelComponent, (uint64_t)&protocol witness table for ModelComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v194 = REPerspectiveCameraComponentGetComponentType();
  if (!v194) {
    uint64_t v194 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PerspectiveCameraComponent, (uint64_t)&protocol witness table for PerspectiveCameraComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PerspectiveCameraComponent;
  v293 = &protocol witness table for PerspectiveCameraComponent;
  int v294 = 54;
  char v295 = 0;
  uint64_t v296 = v194;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PerspectiveCameraComponent, (uint64_t)&protocol witness table for PerspectiveCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v195 = RESpotLightComponentGetComponentType();
  if (!v195) {
    uint64_t v195 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent, (uint64_t)&protocol witness table for SpotLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SpotLightComponent;
  v293 = &protocol witness table for SpotLightComponent;
  int v294 = 50;
  char v295 = 0;
  uint64_t v296 = v195;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v139;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpotLightComponent, (uint64_t)&protocol witness table for SpotLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v196 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SpotLightComponent.Shadow;
  v293 = &protocol witness table for SpotLightComponent.Shadow;
  int v294 = 0;
  char v295 = 1;
  uint64_t v296 = v196;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v197 = RENetworkComponentGetComponentType();
  if (!v197) {
    uint64_t v197 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SynchronizationComponent, (uint64_t)&protocol witness table for SynchronizationComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SynchronizationComponent;
  v293 = &protocol witness table for SynchronizationComponent;
  int v294 = 9;
  char v295 = 0;
  uint64_t v296 = v197;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SynchronizationComponent, (uint64_t)&protocol witness table for SynchronizationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v198 = RETransformComponentGetComponentType();
  if (!v198) {
    uint64_t v198 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for Transform, (uint64_t)&protocol witness table for Transform);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for Transform;
  v293 = &protocol witness table for Transform;
  int v294 = 28;
  char v295 = 0;
  uint64_t v296 = v198;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for Transform, (uint64_t)&protocol witness table for Transform);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v199 = type metadata accessor for AnchoringComponent(0);
  uint64_t v200 = REAnchoringComponentGetComponentType();
  if (!v200) {
    uint64_t v200 = SceneManager.componentTypeToComponentClass(_:)(v199, (uint64_t)&protocol witness table for AnchoringComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = (ValueMetadata *)v199;
  v293 = &protocol witness table for AnchoringComponent;
  int v294 = 63;
  char v295 = 0;
  uint64_t v296 = v200;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v264;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v199, (uint64_t)&protocol witness table for AnchoringComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v201 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for __EntityInfoComponent;
  v293 = &protocol witness table for __EntityInfoComponent;
  int v294 = 0;
  char v295 = 1;
  uint64_t v296 = v201;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v202 = REAREnvironmentProbeComponentGetComponentType();
  if (!v202) {
    uint64_t v202 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AREnvironmentProbeComponent, (uint64_t)&protocol witness table for AREnvironmentProbeComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AREnvironmentProbeComponent;
  v293 = &protocol witness table for AREnvironmentProbeComponent;
  int v294 = 42;
  char v295 = 0;
  uint64_t v296 = v202;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AREnvironmentProbeComponent, (uint64_t)&protocol witness table for AREnvironmentProbeComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v203 = REVideoComponentGetComponentType();
  if (!v203) {
    uint64_t v203 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VideoComponent, (uint64_t)&protocol witness table for VideoComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for VideoComponent;
  v293 = &protocol witness table for VideoComponent;
  int v294 = 1004;
  char v295 = 0;
  uint64_t v296 = v203;
  char v297 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VideoComponent, (uint64_t)&protocol witness table for VideoComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v204 = REVFXSceneComponentGetComponentType();
  if (!v204) {
    uint64_t v204 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VFXComponent, (uint64_t)&protocol witness table for VFXComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for VFXComponent;
  v293 = &protocol witness table for VFXComponent;
  int v294 = 2003;
  char v295 = 0;
  uint64_t v296 = v204;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VFXComponent, (uint64_t)&protocol witness table for VFXComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v205 = REAccessibilityComponentGetComponentType();
  if (!v205) {
    uint64_t v205 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __AccessibilityComponent, (uint64_t)&protocol witness table for __AccessibilityComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for __AccessibilityComponent;
  v293 = &protocol witness table for __AccessibilityComponent;
  int v294 = 69;
  char v295 = 0;
  uint64_t v296 = v205;
  char v297 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v259;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __AccessibilityComponent, (uint64_t)&protocol witness table for __AccessibilityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v206 = REAmbientLightComponentGetComponentType();
  if (!v206) {
    uint64_t v206 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __AmbientLightComponent, (uint64_t)&protocol witness table for __AmbientLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for __AmbientLightComponent;
  v293 = &protocol witness table for __AmbientLightComponent;
  int v294 = 48;
  char v295 = 0;
  uint64_t v296 = v206;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __AmbientLightComponent, (uint64_t)&protocol witness table for __AmbientLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v207 = REARSegmentationComponentGetComponentType();
  if (!v207) {
    uint64_t v207 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for RKARSegmentationComponent, (uint64_t)&protocol witness table for RKARSegmentationComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for RKARSegmentationComponent;
  v293 = &protocol witness table for RKARSegmentationComponent;
  int v294 = 46;
  char v295 = 0;
  uint64_t v296 = v207;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for RKARSegmentationComponent, (uint64_t)&protocol witness table for RKARSegmentationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v208 = REDebugMeshComponentGetComponentType();
  if (!v208) {
    uint64_t v208 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelDebugOptionsComponent, (uint64_t)&protocol witness table for ModelDebugOptionsComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ModelDebugOptionsComponent;
  v293 = &protocol witness table for ModelDebugOptionsComponent;
  int v294 = 1006;
  char v295 = 0;
  uint64_t v296 = v208;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v260;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelDebugOptionsComponent, (uint64_t)&protocol witness table for ModelDebugOptionsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v209 = RECharacterControllerComponentGetComponentType();
  if (!v209) {
    uint64_t v209 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CharacterControllerComponent, (uint64_t)&protocol witness table for CharacterControllerComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for CharacterControllerComponent;
  v293 = &protocol witness table for CharacterControllerComponent;
  int v294 = 2100;
  char v295 = 0;
  uint64_t v296 = v209;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v270;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CharacterControllerComponent, (uint64_t)&protocol witness table for CharacterControllerComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v210 = RECharacterControllerComponentStateGetComponentType();
  if (!v210) {
    uint64_t v210 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for CharacterControllerStateComponent, (uint64_t)&protocol witness table for CharacterControllerStateComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for CharacterControllerStateComponent;
  v293 = &protocol witness table for CharacterControllerStateComponent;
  int v294 = 2102;
  char v295 = 0;
  uint64_t v296 = v210;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v270;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for CharacterControllerStateComponent, (uint64_t)&protocol witness table for CharacterControllerStateComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v211 = REImageBasedLightComponentGetComponentType();
  if (!v211) {
    uint64_t v211 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __ImageBasedLightComponent, (uint64_t)&protocol witness table for __ImageBasedLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for __ImageBasedLightComponent;
  v293 = &protocol witness table for __ImageBasedLightComponent;
  int v294 = 5;
  char v295 = 0;
  uint64_t v296 = v211;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v270;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __ImageBasedLightComponent, (uint64_t)&protocol witness table for __ImageBasedLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v212 = RESkyboxComponentGetComponentType();
  if (!v212) {
    uint64_t v212 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for __SkyboxComponent, (uint64_t)&protocol witness table for __SkyboxComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for __SkyboxComponent;
  v293 = &protocol witness table for __SkyboxComponent;
  int v294 = 23;
  char v295 = 0;
  uint64_t v296 = v212;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v270;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for __SkyboxComponent, (uint64_t)&protocol witness table for __SkyboxComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v213 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SceneOriginComponent;
  v293 = &protocol witness table for SceneOriginComponent;
  int v294 = 0;
  char v295 = 1;
  uint64_t v296 = v213;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v270;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v214 = type metadata accessor for AccessibilityComponent(0);
  uint64_t v215 = REAccessibilityComponentGetComponentType();
  if (!v215) {
    uint64_t v215 = SceneManager.componentTypeToComponentClass(_:)(v214, (uint64_t)&protocol witness table for AccessibilityComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = (ValueMetadata *)v214;
  v293 = &protocol witness table for AccessibilityComponent;
  int v294 = 69;
  char v295 = 0;
  uint64_t v296 = v215;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v261;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v214, (uint64_t)&protocol witness table for AccessibilityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v216 = REVideoPlayerComponentGetComponentType();
  if (!v216) {
    uint64_t v216 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VideoPlayerComponent, (uint64_t)&protocol witness table for VideoPlayerComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for VideoPlayerComponent;
  v293 = &protocol witness table for VideoPlayerComponent;
  int v294 = 3020;
  char v295 = 0;
  uint64_t v296 = v216;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VideoPlayerComponent, (uint64_t)&protocol witness table for VideoPlayerComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v217 = REPhysicsSimulationComponentGetComponentType();
  if (!v217) {
    uint64_t v217 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsSimulationComponent, (uint64_t)&protocol witness table for PhysicsSimulationComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PhysicsSimulationComponent;
  v293 = &protocol witness table for PhysicsSimulationComponent;
  int v294 = 4005;
  char v295 = 0;
  uint64_t v296 = v217;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsSimulationComponent, (uint64_t)&protocol witness table for PhysicsSimulationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v218 = REImageBasedLightComponentGetComponentType();
  if (!v218) {
    uint64_t v218 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ImageBasedLightComponent, (uint64_t)&protocol witness table for ImageBasedLightComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ImageBasedLightComponent;
  v293 = &protocol witness table for ImageBasedLightComponent;
  int v294 = 5;
  char v295 = 0;
  uint64_t v296 = v218;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ImageBasedLightComponent, (uint64_t)&protocol witness table for ImageBasedLightComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v219 = REImageBasedLightReceiverComponentGetComponentType();
  if (!v219) {
    uint64_t v219 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ImageBasedLightReceiverComponent, (uint64_t)&protocol witness table for ImageBasedLightReceiverComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ImageBasedLightReceiverComponent;
  v293 = &protocol witness table for ImageBasedLightReceiverComponent;
  int v294 = 2028;
  char v295 = 0;
  uint64_t v296 = v219;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ImageBasedLightReceiverComponent, (uint64_t)&protocol witness table for ImageBasedLightReceiverComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v220 = REDirectionalLightShadowMapComponentGetComponentType();
  if (!v220) {
    uint64_t v220 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for DirectionalLightComponent.Shadow;
  v293 = &protocol witness table for DirectionalLightComponent.Shadow;
  int v294 = 76;
  char v295 = 0;
  uint64_t v296 = v220;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DirectionalLightComponent.Shadow, (uint64_t)&protocol witness table for DirectionalLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v221 = RESpotLightShadowMapComponentGetComponentType();
  if (!v221) {
    uint64_t v221 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SpotLightComponent.Shadow;
  v293 = &protocol witness table for SpotLightComponent.Shadow;
  int v294 = 77;
  char v295 = 0;
  uint64_t v296 = v221;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpotLightComponent.Shadow, (uint64_t)&protocol witness table for SpotLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v222 = REHierarchicalFadeComponentGetComponentType();
  if (!v222) {
    uint64_t v222 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for OpacityComponent, (uint64_t)&protocol witness table for OpacityComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for OpacityComponent;
  v293 = &protocol witness table for OpacityComponent;
  int v294 = 2005;
  char v295 = 0;
  uint64_t v296 = v222;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for OpacityComponent, (uint64_t)&protocol witness table for OpacityComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v223 = REPointLightShadowMapComponentGetComponentType();
  if (!v223) {
    uint64_t v223 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PointLightComponent.Shadow, (uint64_t)&protocol witness table for PointLightComponent.Shadow);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PointLightComponent.Shadow;
  v293 = &protocol witness table for PointLightComponent.Shadow;
  int v294 = 75;
  char v295 = 0;
  uint64_t v296 = v223;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PointLightComponent.Shadow, (uint64_t)&protocol witness table for PointLightComponent.Shadow);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v224 = REMeshSortingComponentGetComponentType();
  if (!v224) {
    uint64_t v224 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ModelSortGroupComponent, (uint64_t)&protocol witness table for ModelSortGroupComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ModelSortGroupComponent;
  v293 = &protocol witness table for ModelSortGroupComponent;
  int v294 = 2018;
  char v295 = 0;
  uint64_t v296 = v224;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ModelSortGroupComponent, (uint64_t)&protocol witness table for ModelSortGroupComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v225 = REAdaptiveResolutionComponentGetComponentType();
  if (!v225) {
    uint64_t v225 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AdaptiveResolutionComponent, (uint64_t)&protocol witness table for AdaptiveResolutionComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AdaptiveResolutionComponent;
  v293 = &protocol witness table for AdaptiveResolutionComponent;
  int v294 = 4006;
  char v295 = 0;
  uint64_t v296 = v225;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AdaptiveResolutionComponent, (uint64_t)&protocol witness table for AdaptiveResolutionComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v226 = REChannelAudioComponentGetComponentType();
  if (!v226) {
    uint64_t v226 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ChannelAudioComponent, (uint64_t)&protocol witness table for ChannelAudioComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ChannelAudioComponent;
  v293 = &protocol witness table for ChannelAudioComponent;
  int v294 = 3008;
  char v295 = 0;
  uint64_t v296 = v226;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ChannelAudioComponent, (uint64_t)&protocol witness table for ChannelAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v227 = REAmbientAudioComponentGetComponentType();
  if (!v227) {
    uint64_t v227 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AmbientAudioComponent, (uint64_t)&protocol witness table for AmbientAudioComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AmbientAudioComponent;
  v293 = &protocol witness table for AmbientAudioComponent;
  int v294 = 3009;
  char v295 = 0;
  uint64_t v296 = v227;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AmbientAudioComponent, (uint64_t)&protocol witness table for AmbientAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v228 = RESpatialAudioComponentGetComponentType();
  if (!v228) {
    uint64_t v228 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SpatialAudioComponent, (uint64_t)&protocol witness table for SpatialAudioComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SpatialAudioComponent;
  v293 = &protocol witness table for SpatialAudioComponent;
  int v294 = 3010;
  char v295 = 0;
  uint64_t v296 = v228;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SpatialAudioComponent, (uint64_t)&protocol witness table for SpatialAudioComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v229 = REAudioMixGroupsComponentGetComponentType();
  if (!v229) {
    uint64_t v229 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AudioMixGroupsComponent, (uint64_t)&protocol witness table for AudioMixGroupsComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AudioMixGroupsComponent;
  v293 = &protocol witness table for AudioMixGroupsComponent;
  int v294 = 3013;
  char v295 = 0;
  uint64_t v296 = v229;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AudioMixGroupsComponent, (uint64_t)&protocol witness table for AudioMixGroupsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v230 = REVFXEmitterComponentGetComponentType();
  if (!v230) {
    uint64_t v230 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ParticleEmitterComponent, (uint64_t)&protocol witness table for ParticleEmitterComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ParticleEmitterComponent;
  v293 = &protocol witness table for ParticleEmitterComponent;
  int v294 = 3003;
  char v295 = 0;
  uint64_t v296 = v230;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ParticleEmitterComponent, (uint64_t)&protocol witness table for ParticleEmitterComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v231 = REPortalComponentGetComponentType();
  if (!v231) {
    uint64_t v231 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PortalComponent, (uint64_t)&protocol witness table for PortalComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PortalComponent;
  v293 = &protocol witness table for PortalComponent;
  int v294 = 1008;
  char v295 = 0;
  uint64_t v296 = v231;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PortalComponent, (uint64_t)&protocol witness table for PortalComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v232 = REWorldRootComponentGetComponentType();
  if (!v232) {
    uint64_t v232 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for WorldComponent, (uint64_t)&protocol witness table for WorldComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for WorldComponent;
  v293 = &protocol witness table for WorldComponent;
  int v294 = 1009;
  char v295 = 0;
  uint64_t v296 = v232;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for WorldComponent, (uint64_t)&protocol witness table for WorldComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v233 = type metadata accessor for TextComponent();
  uint64_t v234 = RETextComponentGetComponentType();
  if (!v234) {
    uint64_t v234 = SceneManager.componentTypeToComponentClass(_:)(v233, (uint64_t)&protocol witness table for TextComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = (ValueMetadata *)v233;
  v293 = &protocol witness table for TextComponent;
  int v294 = 2027;
  char v295 = 0;
  uint64_t v296 = v234;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v233, (uint64_t)&protocol witness table for TextComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v235 = REGroundingShadowComponentGetComponentType();
  if (!v235) {
    uint64_t v235 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for GroundingShadowComponent, (uint64_t)&protocol witness table for GroundingShadowComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for GroundingShadowComponent;
  v293 = &protocol witness table for GroundingShadowComponent;
  int v294 = 4009;
  char v295 = 0;
  uint64_t v296 = v235;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for GroundingShadowComponent, (uint64_t)&protocol witness table for GroundingShadowComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v236 = REInputTargetComponentGetComponentType();
  if (!v236) {
    uint64_t v236 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for InputTargetComponent;
  v293 = &protocol witness table for InputTargetComponent;
  int v294 = 4010;
  char v295 = 0;
  uint64_t v296 = v236;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v237 = RERemoteEffectsComponentGetComponentType();
  if (!v237) {
    uint64_t v237 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for HoverEffectComponent, (uint64_t)&protocol witness table for HoverEffectComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for HoverEffectComponent;
  v293 = &protocol witness table for HoverEffectComponent;
  int v294 = 3022;
  char v295 = 0;
  uint64_t v296 = v237;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for HoverEffectComponent, (uint64_t)&protocol witness table for HoverEffectComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v238 = REAcousticMeshComponentGetComponentType();
  if (!v238) {
    uint64_t v238 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AcousticModelComponent, (uint64_t)&protocol witness table for AcousticModelComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AcousticModelComponent;
  v293 = &protocol witness table for AcousticModelComponent;
  int v294 = 32;
  char v295 = 0;
  uint64_t v296 = v238;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v262;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AcousticModelComponent, (uint64_t)&protocol witness table for AcousticModelComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v239 = type metadata accessor for BodyTrackingComponent(0);
  uint64_t v240 = REBodyTrackingComponentGetComponentType();
  if (!v240) {
    uint64_t v240 = SceneManager.componentTypeToComponentClass(_:)(v239, (uint64_t)&protocol witness table for BodyTrackingComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = (ValueMetadata *)v239;
  v293 = &protocol witness table for BodyTrackingComponent;
  int v294 = 66;
  char v295 = 0;
  uint64_t v296 = v240;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v264;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)(v239, (uint64_t)&protocol witness table for BodyTrackingComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v241 = RESceneUnderstandingComponentGetComponentType();
  if (!v241) {
    uint64_t v241 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SceneUnderstandingComponent, (uint64_t)&protocol witness table for SceneUnderstandingComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SceneUnderstandingComponent;
  v293 = &protocol witness table for SceneUnderstandingComponent;
  int v294 = 67;
  char v295 = 0;
  uint64_t v296 = v241;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v263;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SceneUnderstandingComponent, (uint64_t)&protocol witness table for SceneUnderstandingComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v242 = REPinComponentGetComponentType();
  if (!v242) {
    uint64_t v242 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for GeometricPinsComponent, (uint64_t)&protocol witness table for GeometricPinsComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for GeometricPinsComponent;
  v293 = &protocol witness table for GeometricPinsComponent;
  int v294 = 2023;
  char v295 = 0;
  uint64_t v296 = v242;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for GeometricPinsComponent, (uint64_t)&protocol witness table for GeometricPinsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v243 = REPhysicsJointsComponentGetComponentType();
  if (!v243) {
    uint64_t v243 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for PhysicsJointsComponent, (uint64_t)&protocol witness table for PhysicsJointsComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for PhysicsJointsComponent;
  v293 = &protocol witness table for PhysicsJointsComponent;
  int v294 = 4012;
  char v295 = 0;
  uint64_t v296 = v243;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for PhysicsJointsComponent, (uint64_t)&protocol witness table for PhysicsJointsComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v244 = REOrthographicCameraComponentGetComponentType();
  if (!v244) {
    uint64_t v244 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for OrthographicCameraComponent, (uint64_t)&protocol witness table for OrthographicCameraComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for OrthographicCameraComponent;
  v293 = &protocol witness table for OrthographicCameraComponent;
  int v294 = 55;
  char v295 = 0;
  uint64_t v296 = v244;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for OrthographicCameraComponent, (uint64_t)&protocol witness table for OrthographicCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v245 = RECustomMatrixCameraComponentGetComponentType();
  if (!v245) {
    uint64_t v245 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ProjectiveTransformCameraComponent, (uint64_t)&protocol witness table for ProjectiveTransformCameraComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ProjectiveTransformCameraComponent;
  v293 = &protocol witness table for ProjectiveTransformCameraComponent;
  int v294 = 56;
  char v295 = 0;
  uint64_t v296 = v245;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ProjectiveTransformCameraComponent, (uint64_t)&protocol witness table for ProjectiveTransformCameraComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v246 = REVirtualEnvironmentProbeComponentGetComponentType();
  if (!v246) {
    uint64_t v246 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for VirtualEnvironmentProbeComponent, (uint64_t)&protocol witness table for VirtualEnvironmentProbeComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for VirtualEnvironmentProbeComponent;
  v293 = &protocol witness table for VirtualEnvironmentProbeComponent;
  int v294 = 5002;
  char v295 = 0;
  uint64_t v296 = v246;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for VirtualEnvironmentProbeComponent, (uint64_t)&protocol witness table for VirtualEnvironmentProbeComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v247 = REIkParametersComponentGetComponentType();
  if (!v247) {
    uint64_t v247 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for IKComponent, (uint64_t)&protocol witness table for IKComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for IKComponent;
  v293 = &protocol witness table for IKComponent;
  int v294 = 5008;
  char v295 = 0;
  uint64_t v296 = v247;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for IKComponent, (uint64_t)&protocol witness table for IKComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v248 = RESkeletalPoseComponentGetComponentType();
  if (!v248) {
    uint64_t v248 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for SkeletalPosesComponent, (uint64_t)&protocol witness table for SkeletalPosesComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for SkeletalPosesComponent;
  v293 = &protocol witness table for SkeletalPosesComponent;
  int v294 = 26;
  char v295 = 0;
  uint64_t v296 = v248;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for SkeletalPosesComponent, (uint64_t)&protocol witness table for SkeletalPosesComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v249 = REReferenceComponentGetComponentType();
  if (!v249) {
    uint64_t v249 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ReferenceComponent, (uint64_t)&protocol witness table for ReferenceComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ReferenceComponent;
  v293 = &protocol witness table for ReferenceComponent;
  int v294 = 5009;
  char v295 = 0;
  uint64_t v296 = v249;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ReferenceComponent, (uint64_t)&protocol witness table for ReferenceComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v250 = REEnvironmentLightingConfigurationComponentGetComponentType();
  if (!v250) {
    uint64_t v250 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for EnvironmentLightingConfigurationComponent, (uint64_t)&protocol witness table for EnvironmentLightingConfigurationComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for EnvironmentLightingConfigurationComponent;
  v293 = &protocol witness table for EnvironmentLightingConfigurationComponent;
  int v294 = 5003;
  char v295 = 0;
  uint64_t v296 = v250;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for EnvironmentLightingConfigurationComponent, (uint64_t)&protocol witness table for EnvironmentLightingConfigurationComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v251 = REDynamicLightShadowComponentGetComponentType();
  if (!v251) {
    uint64_t v251 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for DynamicLightShadowComponent, (uint64_t)&protocol witness table for DynamicLightShadowComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for DynamicLightShadowComponent;
  v293 = &protocol witness table for DynamicLightShadowComponent;
  int v294 = 78;
  char v295 = 0;
  uint64_t v296 = v251;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for DynamicLightShadowComponent, (uint64_t)&protocol witness table for DynamicLightShadowComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v252 = REReverbComponentGetComponentType();
  if (!v252) {
    uint64_t v252 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ReverbComponent, (uint64_t)&protocol witness table for ReverbComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ReverbComponent;
  v293 = &protocol witness table for ReverbComponent;
  int v294 = 5000;
  char v295 = 0;
  uint64_t v296 = v252;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ReverbComponent, (uint64_t)&protocol witness table for ReverbComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v253 = REForceEffectComponentGetComponentType();
  if (!v253) {
    uint64_t v253 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ForceEffectComponent, (uint64_t)&protocol witness table for ForceEffectComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ForceEffectComponent;
  v293 = &protocol witness table for ForceEffectComponent;
  int v294 = 5004;
  char v295 = 0;
  uint64_t v296 = v253;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ForceEffectComponent, (uint64_t)&protocol witness table for ForceEffectComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v254 = REAudioLibraryComponentGetComponentType();
  if (!v254) {
    uint64_t v254 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AudioLibraryComponent, (uint64_t)&protocol witness table for AudioLibraryComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AudioLibraryComponent;
  v293 = &protocol witness table for AudioLibraryComponent;
  int v294 = 5006;
  char v295 = 0;
  uint64_t v296 = v254;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AudioLibraryComponent, (uint64_t)&protocol witness table for AudioLibraryComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v255 = REBillboardComponentGetComponentType();
  if (!v255) {
    uint64_t v255 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for BillboardComponent, (uint64_t)&protocol witness table for BillboardComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for BillboardComponent;
  v293 = &protocol witness table for BillboardComponent;
  int v294 = 5007;
  char v295 = 0;
  uint64_t v296 = v255;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for BillboardComponent, (uint64_t)&protocol witness table for BillboardComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v256 = REAnimationLibraryComponentGetComponentType();
  if (!v256) {
    uint64_t v256 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for AnimationLibraryComponent, (uint64_t)&protocol witness table for AnimationLibraryComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for AnimationLibraryComponent;
  v293 = &protocol witness table for AnimationLibraryComponent;
  int v294 = 45;
  char v295 = 0;
  uint64_t v296 = v256;
  char v297 = 2;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v269;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for AnimationLibraryComponent, (uint64_t)&protocol witness table for AnimationLibraryComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v257 = REClippingPrimitiveComponentGetComponentType();
  if (!v257) {
    uint64_t v257 = SceneManager.componentTypeToComponentClass(_:)((uint64_t)&type metadata for ClippingPrimitiveComponent, (uint64_t)&protocol witness table for ClippingPrimitiveComponent);
  }
  *(void *)&long long v291 = v183;
  *((void *)&v291 + 1) = v185;
  v292 = &type metadata for ClippingPrimitiveComponent;
  v293 = &protocol witness table for ClippingPrimitiveComponent;
  int v294 = 2017;
  char v295 = 0;
  uint64_t v296 = v257;
  char v297 = 1;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v298 = v166;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  BuiltInComponentRegistry.register(_:)(&v291);
  swift_release();
  REComponentClassFromType();
  SceneManager.registerBuiltInType(_:typeEnum:)((uint64_t)&type metadata for ClippingPrimitiveComponent, (uint64_t)&protocol witness table for ClippingPrimitiveComponent);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t ComponentInfo.Availability.init(introduced:deprecated:obsoleted:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

uint64_t static Component.registerBuiltin(bundleIdentifier:reComponentClass:access:availability:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  char v11 = *a4;
  uint64_t v12 = *a5;
  uint64_t v13 = a5[1];
  uint64_t v14 = a5[2];
  uint64_t v15 = specialized static __ServiceLocator.__sharedEngine.getter();
  if (!v15)
  {
    __break(1u);
    goto LABEL_6;
  }
  Swift::String v16 = v15;
  swift_beginAccess();
  uint64_t v17 = v16[5];
  if (!v17)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v18 = v17 + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v18, (uint64_t)&v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    swift_retain();
    swift_release();
    *(void *)&long long v21 = a1;
    *((void *)&v21 + 1) = a2;
    uint64_t v22 = v20;
    uint64_t v23 = a7;
    int v24 = 0;
    char v25 = 1;
    uint64_t v26 = a3;
    char v27 = v11;
    uint64_t v28 = v12;
    uint64_t v29 = v13;
    uint64_t v30 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    BuiltInComponentRegistry.register(_:)(&v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_7:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t BuiltInComponentRegistry.register(_:)(_OWORD *a1)
{
  long long v2 = a1[3];
  v11[0] = a1[2];
  v11[1] = v2;
  void v11[2] = a1[4];
  long long v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  uint64_t v4 = v3;
  swift_beginAccess();
  outlined retain of ComponentInfo((uint64_t)v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::UInt v13 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(v1 + 16) = v13;
  swift_bridgeObjectRelease();
  swift_endAccess();
  outlined init with take of REComponentClassPtr?((uint64_t)v11 + 8, (uint64_t)v12);
  uint64_t result = outlined init with take of REComponentClassPtr?((uint64_t)v12, (uint64_t)&v13);
  Swift::UInt v7 = v13;
  if (v13)
  {
    swift_beginAccess();
    outlined retain of ComponentInfo((uint64_t)v10);
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v1 + 24);
    *(void *)(v1 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, v7, v8);
    *(void *)(v1 + 24) = v9;
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  return result;
}

void *BuiltInComponentRegistry.allComponentInfo.getter()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

double BuiltInComponentRegistry.componentInfo(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
    uint64_t v9 = *(void *)(v8 + 24);
    int v10 = *(_DWORD *)(v8 + 32);
    char v11 = *(unsigned char *)(v8 + 36);
    uint64_t v12 = *(void *)(v8 + 40);
    char v13 = *(unsigned char *)(v8 + 48);
    uint64_t v14 = *(void *)(v8 + 56);
    uint64_t v15 = *(void *)(v8 + 64);
    uint64_t v16 = *(void *)(v8 + 72);
    *(void *)a2 = *(void *)v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v8 + 8);
    *(void *)(a2 + 24) = v9;
    *(_DWORD *)(a2 + 32) = v10;
    *(unsigned char *)(a2 + 36) = v11;
    *(void *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v14;
    *(void *)(a2 + 64) = v15;
    *(void *)(a2 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

double BuiltInComponentRegistry.componentInfo(forClassOpaquePointer:)@<D0>(Swift::UInt a1@<X0>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  if (*(void *)(v5 + 16) && (uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
    uint64_t v9 = *(void *)(v8 + 24);
    int v10 = *(_DWORD *)(v8 + 32);
    char v11 = *(unsigned char *)(v8 + 36);
    uint64_t v12 = *(void *)(v8 + 40);
    char v13 = *(unsigned char *)(v8 + 48);
    uint64_t v14 = *(void *)(v8 + 56);
    uint64_t v15 = *(void *)(v8 + 64);
    uint64_t v16 = *(void *)(v8 + 72);
    *(void *)a2 = *(void *)v8;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v8 + 8);
    *(void *)(a2 + 24) = v9;
    *(_DWORD *)(a2 + 32) = v10;
    *(unsigned char *)(a2 + 36) = v11;
    *(void *)(a2 + 40) = v12;
    *(unsigned char *)(a2 + 48) = v13;
    *(void *)(a2 + 56) = v14;
    *(void *)(a2 + 64) = v15;
    *(void *)(a2 + 72) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  return result;
}

uint64_t BuiltInComponentRegistry.componentInfo(ofComponentsAccessableAs:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  long long v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = v3 + 12;
    uint64_t v6 = MEMORY[0x263F8EE78];
    int v16 = v1;
    do
    {
      if (*((unsigned __int8 *)v5 - 16) == v1)
      {
        uint64_t v10 = *((void *)v5 - 8);
        uint64_t v11 = *((void *)v5 - 5);
        int v17 = *((_DWORD *)v5 - 8);
        char v12 = *((unsigned char *)v5 - 28);
        uint64_t v13 = *((void *)v5 - 3);
        uint64_t v14 = *((void *)v5 - 1);
        long long v18 = *v5;
        long long v19 = *(_OWORD *)((char *)v5 - 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
        }
        unint64_t v8 = *(void *)(v6 + 16);
        unint64_t v7 = *(void *)(v6 + 24);
        if (v8 >= v7 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        }
        *(void *)(v6 + 16) = v8 + 1;
        uint64_t v9 = v6 + 80 * v8;
        *(void *)(v9 + 32) = v10;
        *(_OWORD *)(v9 + 40) = v19;
        *(void *)(v9 + 56) = v11;
        int v1 = v16;
        *(_DWORD *)(v9 + 64) = v17;
        *(unsigned char *)(v9 + 68) = v12;
        *(void *)(v9 + 72) = v13;
        *(unsigned char *)(v9 + 80) = v16;
        *(void *)(v9 + 88) = v14;
        *(_OWORD *)(v9 + 96) = v18;
      }
      v5 += 5;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = MEMORY[0x263F8EE78];
  }
  swift_release();
  return v6;
}

uint64_t BuiltInComponentRegistry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BuiltInComponentRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

RealityFoundation::ComponentInfo::PlatformVersion __swiftcall ComponentInfo.PlatformVersion.init(stringLiteral:)(Swift::String stringLiteral)
{
  uint64_t v2 = v1;
  RealityFoundation::ComponentInfo::PlatformVersion result = ComponentInfo.PlatformVersion.init(_:)(stringLiteral);
  *(_OWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 16) = v4;
  return result;
}

void ComponentInfo.Access.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ComponentInfo.Access.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ComponentInfo.Availability.introduced.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.Availability.deprecated.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.Availability.obsoleted.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ComponentInfo.bundleIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ComponentInfo.type.getter()
{
  return *(void *)(v0 + 16);
}

void ComponentInfo.reComponentType.getter(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 36))
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    int v3 = *(_DWORD *)(v1 + 32);
    type metadata accessor for REComponentType(0);
    *(void *)(a1 + 24) = v4;
    *(_DWORD *)a1 = v3;
  }
}

uint64_t ComponentInfo.reComponentClass.getter()
{
  return *(void *)(v0 + 40);
}

void ComponentInfo.access.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 48);
}

uint64_t ComponentInfo.availability.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  *a1 = v1[7];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 ComponentInfo.init(bundleIdentifier:type:reComponentClass:access:availability:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X6>, __n128 *a8@<X8>)
{
  unsigned __int8 v8 = *a6;
  unint64_t v9 = *(void *)a7;
  a8->n128_u64[0] = a1;
  a8->n128_u64[1] = a2;
  a8[1].n128_u64[0] = a3;
  a8[1].n128_u64[1] = a4;
  a8[2].n128_u32[0] = 0;
  a8[2].n128_u8[4] = 1;
  a8[2].n128_u64[1] = a5;
  a8[3].n128_u8[0] = v8;
  a8[3].n128_u64[1] = v9;
  __n128 result = *(__n128 *)(a7 + 8);
  a8[4] = result;
  return result;
}

uint64_t ComponentInfo.description.getter()
{
  _StringGuts.grow(_:)(28);
  v0._countAndFlagsBits = 0x6E656E6F706D6F43;
  v0._object = (void *)0xED00006F666E4974;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x203A6570797428;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x737365636361202CLL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = ComponentInfo.Availability.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t ComponentInfo.Availability.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String?>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E360;
  strcpy((char *)v28, "introduced: ");
  BYTE5(v28[1]) = 0;
  HIWORD(v28[1]) = -5120;
  uint64_t v4 = swift_bridgeObjectRetain();
  v5._countAndFlagsBits = MEMORY[0x22A688E60](v4, &type metadata for ComponentInfo.SupportedPlatform);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v28[0];
  uint64_t v6 = v28[1];
  *(void *)(inited + 32) = v28[0];
  *(void *)(inited + 40) = v6;
  if (v1)
  {
    strcpy((char *)v28, "deprecated: ");
    BYTE5(v28[1]) = 0;
    HIWORD(v28[1]) = -5120;
    uint64_t v8 = swift_bridgeObjectRetain();
    v9._countAndFlagsBits = MEMORY[0x22A688E60](v8, &type metadata for ComponentInfo.SupportedPlatform);
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v11 = v28[0];
    uint64_t v10 = v28[1];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v10;
  swift_bridgeObjectRelease();
  if (v2)
  {
    strcpy((char *)v28, "obsoleted: ");
    HIDWORD(v28[1]) = -352321536;
    uint64_t v12 = swift_bridgeObjectRetain();
    v13._countAndFlagsBits = MEMORY[0x22A688E60](v12, &type metadata for ComponentInfo.SupportedPlatform);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t v15 = v28[0];
    uint64_t v14 = v28[1];
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 72) = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  unint64_t v18 = v16[2];
  unint64_t v17 = v16[3];
  unint64_t v19 = v18 + 1;
  if (v18 >= v17 >> 1) {
    int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v16);
  }
  _OWORD v16[2] = v19;
  uint64_t v20 = &v16[2 * v18];
  v20[4] = v7;
  v20[5] = v6;
  if (v10)
  {
    unint64_t v21 = v16[3];
    swift_bridgeObjectRetain();
    if (v19 >= v21 >> 1) {
      int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v18 + 2, 1, v16);
    }
    _OWORD v16[2] = v18 + 2;
    uint64_t v22 = &v16[2 * v19];
    v22[4] = v11;
    v22[5] = v10;
  }
  if (v14)
  {
    unint64_t v23 = v16[2];
    unint64_t v24 = v16[3];
    swift_bridgeObjectRetain();
    if (v23 >= v24 >> 1) {
      int v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v23 + 1, 1, v16);
    }
    _OWORD v16[2] = v23 + 1;
    char v25 = &v16[2 * v23];
    void v25[4] = v15;
    v25[5] = v14;
  }
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v26;
}

__n128 ComponentInfo.Platform.oldestSupportedVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[2].n128_u64[0];
  __n128 result = v1[1];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

double one-time initialization function for macOS()
{
  v0._countAndFlagsBits = 0x35312E3031;
  v0._object = (void *)0xE500000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  double result = *(double *)&v2;
  static ComponentInfo.Platform.macOS = 0x736F63616DLL;
  unk_2681C77D0 = 0xE500000000000000;
  xmmword_2681C77D8 = v2;
  qword_2681C77E8 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.macOS.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for macOS != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C77D0;
  uint64_t v3 = qword_2681C77E8;
  *(void *)a1 = static ComponentInfo.Platform.macOS;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2681C77D8;
  *(void *)(a1 + 32) = v3;

  return swift_bridgeObjectRetain();
}

double one-time initialization function for macCatalyst()
{
  v0._countAndFlagsBits = 808334129;
  v0._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  double result = *(double *)&v2;
  static ComponentInfo.Platform.macCatalyst = 0x6C6174616363616DLL;
  *(void *)algn_2681C77F8 = 0xEB00000000747379;
  xmmword_2681C7800 = v2;
  qword_2681C7810 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.macCatalyst.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for macCatalyst != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C77F8;
  uint64_t v3 = qword_2681C7810;
  *(void *)a1 = static ComponentInfo.Platform.macCatalyst;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2681C7800;
  *(void *)(a1 + 32) = v3;

  return swift_bridgeObjectRetain();
}

double one-time initialization function for iOS()
{
  v0._countAndFlagsBits = 808334129;
  v0._object = (void *)0xE400000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  double result = *(double *)&v2;
  static ComponentInfo.Platform.iOS = 7565161;
  unk_2681C7820 = 0xE300000000000000;
  xmmword_2681C7828 = v2;
  qword_2681C7838 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.iOS.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for iOS != -1) {
    swift_once();
  }
  uint64_t v2 = unk_2681C7820;
  uint64_t v3 = qword_2681C7838;
  *(void *)a1 = static ComponentInfo.Platform.iOS;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2681C7828;
  *(void *)(a1 + 32) = v3;

  return swift_bridgeObjectRetain();
}

double one-time initialization function for xrOS()
{
  v0._countAndFlagsBits = 3157553;
  v0._object = (void *)0xE300000000000000;
  ComponentInfo.PlatformVersion.init(_:)(v0);
  double result = *(double *)&v2;
  static ComponentInfo.Platform.xrOS = 1936683640;
  *(void *)algn_2681C7848 = 0xE400000000000000;
  xmmword_2681C7850 = v2;
  qword_2681C7860 = v3;
  return result;
}

uint64_t static ComponentInfo.Platform.xrOS.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for xrOS != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_2681C7848;
  uint64_t v3 = qword_2681C7860;
  *(void *)a1 = static ComponentInfo.Platform.xrOS;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = xmmword_2681C7850;
  *(void *)(a1 + 32) = v3;

  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Platform(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = v3;
    uint64_t v18 = v4;
    *(void *)&long long v15 = v5;
    *((void *)&v15 + 1) = v6;
    uint64_t v16 = v7;
    BOOL result = 0;
    if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v17, &v15) & 1) == 0)
    {
      *(void *)&long long v13 = v2;
      *((void *)&v13 + 1) = v3;
      uint64_t v14 = v4;
      *(void *)&long long v11 = v5;
      *((void *)&v11 + 1) = v6;
      uint64_t v12 = v7;
      if ((specialized static ComponentInfo.Version.< infix(_:_:)(&v11, &v13) & 1) == 0) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t ComponentInfo.Platform.description.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ComponentInfo.SupportedPlatform.platform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(void *)(a1 + 32) = v3;
  return swift_bridgeObjectRetain();
}

__n128 ComponentInfo.SupportedPlatform.version.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + 56);
  __n128 result = *(__n128 *)(v1 + 40);
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  return result;
}

void __swiftcall ComponentInfo.SupportedPlatform.init(platform:version:)(RealityFoundation::ComponentInfo::SupportedPlatform *__return_ptr retstr, RealityFoundation::ComponentInfo::Platform *platform, RealityFoundation::ComponentInfo::PlatformVersion version)
{
  object = platform->name._object;
  Swift::Int patch = platform->oldestSupportedVersion.version.patch;
  Swift::Int v5 = *(void *)(version.version.major + 16);
  retstr->platform.name._countAndFlagsBits = platform->name._countAndFlagsBits;
  retstr->platform.name._object = object;
  *(_OWORD *)&retstr->platform.oldestSupportedVersion.version.major = *(_OWORD *)&platform->oldestSupportedVersion.version.major;
  retstr->platform.oldestSupportedVersion.version.Swift::Int patch = patch;
  *(_OWORD *)&retstr->version.version.major = *(_OWORD *)version.version.major;
  retstr->version.version.Swift::Int patch = v5;
}

uint64_t ComponentInfo.SupportedPlatform.description.getter()
{
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ComponentInfo.SupportedPlatform()
{
  uint64_t v4 = *v0;
  swift_bridgeObjectRetain();
  v1._countAndFlagsBits = 32;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t one-time initialization function for unknown()
{
  v0._countAndFlagsBits = 0x302E302E30;
  v0._object = (void *)0xE500000000000000;
  return (unint64_t)ComponentInfo.PlatformVersion.init(_:)(v0);
}

RealityFoundation::ComponentInfo::PlatformVersion __swiftcall ComponentInfo.PlatformVersion.init(_:)(Swift::String a1)
{
  Swift::String v2 = v1;
  unint64_t v29 = 46;
  uint64_t v30 = 0xE100000000000000;
  char v27 = &v29;
  uint64_t v3 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, _sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtFSbABXEfU_SS_TG5TA_0, (uint64_t)v26, a1._countAndFlagsBits, (unint64_t)a1._object);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    Swift::Int v5 = (unint64_t *)(v3 + 56);
    uint64_t v6 = (void *)MEMORY[0x263F8EE78];
    while (1)
    {
      unint64_t v8 = *(v5 - 3);
      unint64_t v7 = *(v5 - 2);
      if ((v7 ^ v8) >= 0x4000)
      {
        unint64_t v10 = *(v5 - 1);
        unint64_t v9 = *v5;
        if ((*v5 & 0x1000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v8, v7, v10, v9, 10);
          char v17 = v16;
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0) {
            goto LABEL_12;
          }
        }
        else
        {
          if ((v9 & 0x2000000000000000) != 0)
          {
            unint64_t v29 = *(v5 - 1);
            uint64_t v30 = v9 & 0xFFFFFFFFFFFFFFLL;
            long long v11 = &v29;
          }
          else if ((v10 & 0x1000000000000000) != 0)
          {
            long long v11 = (unint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else
          {
            long long v11 = (unint64_t *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v12 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, v8, v7, v10, v9, 10);
          char v28 = v13 & 1;
          if ((v13 & 1) == 0)
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
            }
            unint64_t v15 = v6[2];
            unint64_t v14 = v6[3];
            if (v15 >= v14 >> 1) {
              uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v6);
            }
            void v6[2] = v15 + 1;
            v6[v15 + 4] = v12;
          }
        }
      }
      v5 += 4;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
  }
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v18 = v6[2];
  if (v18 == 1) {
    goto LABEL_25;
  }
  if (v18 != 2)
  {
    if (v18 != 3)
    {
LABEL_33:
      unint64_t v29 = 0;
      uint64_t v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      unint64_t v29 = 0xD000000000000020;
      uint64_t v30 = 0x8000000228360160;
      v25._countAndFlagsBits = MEMORY[0x22A688E60](v6, MEMORY[0x263F8D6C8]);
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      Swift::Int v21 = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v19 = v6[4];
    uint64_t v20 = v6[5];
    uint64_t v24 = v6[6];
    Swift::Int v21 = swift_bridgeObjectRelease();
    if (((v20 | v19 | v24) & 0x8000000000000000) == 0) {
      goto LABEL_30;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v19 = v6[4];
  uint64_t v20 = v6[5];
  Swift::Int v21 = swift_bridgeObjectRelease();
  if ((v20 | v19) < 0)
  {
    __break(1u);
LABEL_25:
    uint64_t v19 = v6[4];
    Swift::Int v21 = swift_bridgeObjectRelease();
    if ((v19 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = 0;
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_27:
  uint64_t v24 = 0;
LABEL_30:
  *Swift::String v2 = v19;
  v2[1] = v20;
  v2[2] = v24;
LABEL_34:
  result.version.Swift::Int patch = v23;
  result.version.minor = v22;
  result.version.major = v21;
  return result;
}

double static ComponentInfo.PlatformVersion.unknown.getter@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2681C7878;
  double result = *(double *)&static ComponentInfo.PlatformVersion.unknown;
  *(_OWORD *)a1 = static ComponentInfo.PlatformVersion.unknown;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t ComponentInfo.PlatformVersion.versionString.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  uint64_t result = v7;
  if (v1)
  {
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t ComponentInfo.PlatformVersion.major.getter()
{
  return *(void *)v0;
}

uint64_t ComponentInfo.PlatformVersion.minor.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ComponentInfo.PlatformVersion.patch.getter()
{
  return *(void *)(v0 + 16);
}

RealityFoundation::ComponentInfo::Version __swiftcall ComponentInfo.Version.init(_:_:_:)(Swift::Int a1, Swift::Int a2, Swift::Int a3)
{
  if ((a2 | a1 | a3) < 0)
  {
    __break(1u);
  }
  else
  {
    *Swift::String v3 = a1;
    v3[1] = a2;
    v3[2] = a3;
  }
  result.Swift::Int patch = a3;
  result.minor = a2;
  result.major = a1;
  return result;
}

uint64_t static ComponentInfo.Version.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4 = specialized static ComponentInfo.Version.< infix(_:_:)((long long *)a1, (long long *)a2);
  uint64_t v5 = *(void *)(a1 + 16);
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  long long v9 = *(_OWORD *)a2;
  uint64_t v10 = v6;
  if (v4) {
    char v7 = 0;
  }
  else {
    char v7 = specialized static ComponentInfo.Version.< infix(_:_:)(&v9, &v11) ^ 1;
  }
  return v7 & 1;
}

uint64_t ComponentInfo.PlatformVersion.description.getter()
{
  return ComponentInfo.Version.description.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ComponentInfo.PlatformVersion()
{
  v0._countAndFlagsBits = 0;
  v0._object = (void *)0xE000000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = ComponentInfo.Version.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t static ComponentInfo.PlatformVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = v2;
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = v2;
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = v3;
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = v2;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = v2;
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = v3;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ComponentInfo.PlatformVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = v3;
  long long v5 = *(_OWORD *)a1;
  uint64_t v6 = v2;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v7, &v5) & 1;
}

double protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance ComponentInfo.PlatformVersion@<D0>(Swift::String *a1@<X0>, uint64_t a2@<X8>)
{
  ComponentInfo.PlatformVersion.init(_:)(*a1);
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  return result;
}

uint64_t ComponentInfo.Version.major.getter()
{
  return *(void *)v0;
}

uint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(result + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(result + 32);
    if (v4 < v5) {
      return 1;
    }
    if (v5 < v4) {
      return 0;
    }
    uint64_t v6 = 0;
    uint64_t v7 = result + 40;
    while (v2 - 1 != v6)
    {
      if (v3 - 1 == v6) {
        return 0;
      }
      uint64_t v8 = *(void *)(a2 + 40 + 8 * v6);
      uint64_t v9 = *(void *)(v7 + 8 * v6);
      if (v8 < v9) {
        return 1;
      }
      double result = 0;
      ++v6;
      if (v9 < v8) {
        return result;
      }
    }
  }
  else
  {
    unint64_t v3 = *(void *)(result + 16);
  }
  if (v2 == v3) {
    return 0;
  }
  if (v2 < v3) {
    return 1;
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = v2;
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = v3;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v5, &v7) & 1) == 0;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  long long v7 = *(_OWORD *)a1;
  uint64_t v8 = v2;
  long long v5 = *(_OWORD *)a2;
  uint64_t v6 = v3;
  return specialized static ComponentInfo.Version.< infix(_:_:)(&v5, &v7) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Version(uint64_t a1, uint64_t a2)
{
  if (specialized static ComponentInfo.Version.< infix(_:_:)((long long *)a1, (long long *)a2))
  {
    char v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a1 + 16);
    long long v10 = *(_OWORD *)a1;
    uint64_t v11 = v6;
    long long v8 = *(_OWORD *)a2;
    uint64_t v9 = v5;
    char v4 = specialized static ComponentInfo.Version.< infix(_:_:)(&v8, &v10) ^ 1;
  }
  return v4 & 1;
}

uint64_t ComponentInfo.Version.description.getter()
{
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  void v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    char v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  char v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  char v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      char v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    long long v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    _WORD v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  char v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5H15VGXEfU_Si_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

uint64_t specialized static ComponentInfo.Version.< infix(_:_:)(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 2);
  long long v8 = *a1;
  long long v9 = *a2;
  uint64_t v3 = *((void *)a2 + 2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E360;
  *(_OWORD *)(inited + 32) = v8;
  *(void *)(inited + 48) = v2;
  uint64_t v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_22831E360;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)(v5 + 48) = v3;
  if (specialized static Array<A>.== infix(_:_:)((void *)inited, (void *)v5)) {
    char v6 = 0;
  }
  else {
    char v6 = specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(v5, inited);
  }
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  return v6 & 1;
}

uint64_t specialized static ComponentInfo.PlatformVersion.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  *(void *)&long long v15 = *a1;
  *((void *)&v15 + 1) = v2;
  uint64_t v16 = v3;
  *(void *)&long long v13 = v4;
  *((void *)&v13 + 1) = v5;
  uint64_t v14 = v6;
  *(void *)&long long v11 = v15;
  *((void *)&v11 + 1) = v2;
  uint64_t v12 = v3;
  *(void *)&long long v9 = v4;
  *((void *)&v9 + 1) = v5;
  uint64_t v10 = v6;
  if (specialized static ComponentInfo.Version.< infix(_:_:)(&v15, &v13)) {
    char v7 = 0;
  }
  else {
    char v7 = specialized static ComponentInfo.Version.< infix(_:_:)(&v9, &v11) ^ 1;
  }
  return v7 & 1;
}

BOOL specialized static ComponentInfo.SupportedPlatform.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v12 = a2[7];
  *(void *)&long long v21 = *(void *)a1;
  *((void *)&v21 + 1) = v2;
  long long v22 = *(_OWORD *)(a1 + 16);
  uint64_t v23 = v3;
  *(void *)&long long v18 = v7;
  *((void *)&v18 + 1) = v8;
  long long v19 = *((_OWORD *)a2 + 1);
  uint64_t v20 = v9;
  if (!protocol witness for static Equatable.== infix(_:_:) in conformance ComponentInfo.Platform(&v21, &v18)) {
    return 0;
  }
  *(void *)&long long v21 = v4;
  *((void *)&v21 + 1) = v5;
  *(void *)&long long v22 = v6;
  *(void *)&long long v18 = v10;
  *((void *)&v18 + 1) = v11;
  *(void *)&long long v19 = v12;
  if (specialized static ComponentInfo.Version.< infix(_:_:)(&v21, &v18)) {
    return 0;
  }
  *(void *)&long long v16 = v4;
  *((void *)&v16 + 1) = v5;
  uint64_t v17 = v6;
  *(void *)&long long v14 = v10;
  *((void *)&v14 + 1) = v11;
  uint64_t v15 = v12;
  return (specialized static ComponentInfo.Version.< infix(_:_:)(&v14, &v16) & 1) == 0;
}

uint64_t outlined retain of ComponentInfo(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of REComponentClassPtr?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REComponentClassPtr?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtFSbABXEfU_SS_TG5TA_0(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.Access and conformance ComponentInfo.Access()
{
  unint64_t result = lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access;
  if (!lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.Access and conformance ComponentInfo.Access);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion;
  if (!lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.PlatformVersion and conformance ComponentInfo.PlatformVersion);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ComponentInfo.Version and conformance ComponentInfo.Version()
{
  unint64_t result = lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version;
  if (!lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ComponentInfo.Version and conformance ComponentInfo.Version);
  }
  return result;
}

uint64_t type metadata accessor for BuiltInComponentRegistry()
{
  return self;
}

uint64_t method lookup function for BuiltInComponentRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for BuiltInComponentRegistry);
}

uint64_t dispatch thunk of BuiltInComponentRegistry.register(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.allComponentInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(forClassOpaquePointer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of BuiltInComponentRegistry.componentInfo(ofComponentsAccessableAs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t destroy for ComponentInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ComponentInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ComponentInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ComponentInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo()
{
  return &type metadata for ComponentInfo;
}

unsigned char *storeEnumTagSinglePayload for ComponentInfo.Access(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282C9AE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentInfo.Access()
{
  return &type metadata for ComponentInfo.Access;
}

void *assignWithCopy for ComponentInfo.Availability(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ComponentInfo.Availability(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.Availability()
{
  return &type metadata for ComponentInfo.Availability;
}

uint64_t initializeWithCopy for ComponentInfo.Platform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ComponentInfo.Platform(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ComponentInfo.Platform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.Platform()
{
  return &type metadata for ComponentInfo.Platform;
}

uint64_t initializeWithCopy for ComponentInfo.SupportedPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ComponentInfo.SupportedPlatform(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for ComponentInfo.SupportedPlatform(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for ComponentInfo.SupportedPlatform()
{
  return &type metadata for ComponentInfo.SupportedPlatform;
}

ValueMetadata *type metadata accessor for ComponentInfo.PlatformVersion()
{
  return &type metadata for ComponentInfo.PlatformVersion;
}

ValueMetadata *type metadata accessor for ComponentInfo.Version()
{
  return &type metadata for ComponentInfo.Version;
}

uint64_t sub_2282C9E38()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2282C9E70()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t type metadata accessor for OrderedIdentifiableCollection()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance OrderedIdentifiableCollection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  return result;
}

uint64_t specialized OrderedIdentifiableCollection.init(dictionaryLiteral:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  unint64_t v48 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  Swift::String v56 = (char *)&v39 - v12;
  uint64_t v39 = v13;
  MEMORY[0x270FA5388](v14);
  long long v16 = (char *)&v39 - v15;
  uint64_t v17 = static Array._allocateUninitialized(_:)();
  uint64_t v61 = v17;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v18 = a2;
  uint64_t v49 = a4;
  uint64_t v60 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v57 = a1;
  if (!MEMORY[0x22A688F30](a1, TupleTypeMetadata2)) {
    return v17;
  }
  uint64_t v19 = 0;
  unsigned int v43 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v46 = (void (**)(char *, uint64_t *, uint64_t))(v9 + 16);
  uint64_t v47 = v16;
  uint64_t v41 = a3 - 8;
  uint64_t v42 = a2 - 8;
  unsigned __int8 v40 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v44 = v9;
  uint64_t v45 = TupleTypeMetadata2;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v47, v57+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v19, TupleTypeMetadata2);
      uint64_t v21 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_10;
      }
      goto LABEL_5;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v39 != 8) {
      break;
    }
    uint64_t v58 = result;
    (*v46)(v47, &v58, TupleTypeMetadata2);
    swift_unknownObjectRelease();
    uint64_t v21 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_10:
      __break(1u);
      return v61;
    }
LABEL_5:
    uint64_t v54 = v21;
    long long v22 = &v56[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v23 = v18;
    uint64_t v53 = *(void *)(v18 - 8);
    uint64_t v24 = v53;
    unsigned __int8 v25 = v56;
    (*(void (**)(void))(v53 + 32))();
    uint64_t v26 = *(void *)(a3 - 8);
    uint64_t v55 = v19;
    uint64_t v27 = v26;
    char v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v51 = v22;
    v28(v22, v43, a3);
    uint64_t v29 = v48;
    uint64_t v30 = &v48[*(int *)(TupleTypeMetadata2 + 48)];
    long long v52 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    v52(v48, v25, v23);
    Swift::String v50 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v50(v30, v22, a3);
    uint64_t v31 = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x22A688F10](v31, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = v32;
    char v59 = 0;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    unsigned __int8 v33 = v30;
    TupleTypeMetadata2 = v45;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, a3);
    uint64_t v34 = v55;
    uint64_t v35 = v56;
    unsigned int v36 = &v29[*(int *)(TupleTypeMetadata2 + 48)];
    v52(v29, v56, v23);
    v50(v36, v51, a3);
    uint64_t v9 = v44;
    type metadata accessor for Array();
    Array.append(_:)();
    (*v40)(v35, TupleTypeMetadata2);
    uint64_t v18 = v23;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v29, v23);
    uint64_t v37 = MEMORY[0x22A688F30](v57, TupleTypeMetadata2);
    uint64_t v19 = v34 + 1;
    if (v54 == v37) {
      return v61;
    }
  }
  __break(1u);
  return result;
}

uint64_t __RKVisibilityHideDropAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityHideDropAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHideDropAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #1 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 119, 0, MEMORY[0x263F8EE78]);
      uint64_t v13 = &outlined read-only object #2 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 130, 0, MEMORY[0x263F8EE78]);
    uint64_t v13 = &outlined read-only object #0 of static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  long long v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  uint64_t v20 = &rawValue[6 * v18];
  void v20[2] = v25;
  void v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void Cancellable.storeWhileEntityActive(_:)(uint64_t a1)
{
  if (REEntityIsActive())
  {
    swift_retain();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent);
    if (REEntityGetCustomComponent())
    {
      uint64_t Object = RECustomComponentGetObject();
      if (!Object)
      {
        __break(1u);
LABEL_19:
        __break(1u);
        return;
      }
      outlined init with copy of EventSubscriptionComponent(Object, (uint64_t)&v11);
      swift_release();
      if (*((void *)&v13 + 1))
      {
        long long v14 = v11;
        long long v15 = v12;
        long long v16 = v13;
LABEL_11:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCancellable]);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [AnyCancellable] and conformance [A], &demangling cache variable for type metadata for [AnyCancellable]);
        Cancellable.store<A>(in:)();
        outlined init with copy of Cancellable?((uint64_t)&v14, (uint64_t)&v11);
        uint64_t v3 = *((void *)&v12 + 1);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
        if (v3)
        {
LABEL_17:
          outlined init with copy of EventSubscriptionComponent((uint64_t)&v14, (uint64_t)&v11);
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v11);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for EventSubscriptionComponent?);
          swift_release();
          outlined destroy of EventSubscriptionComponent((uint64_t)&v14);
          return;
        }
        uint64_t SceneNullable = REEntityGetSceneNullable();
        if (SceneNullable)
        {
          uint64_t v5 = SceneNullable;
          id v6 = (id)RESceneGetSwiftObject();
          type metadata accessor for Scene();
          if (v6)
          {
            swift_dynamicCastClassUnconditional();
          }
          else
          {
            swift_allocObject();
            Scene.init(coreScene:)(v5);
          }
          v10[3] = type metadata accessor for Entity();
          void v10[4] = &protocol witness table for Entity;
          v10[0] = a1;
          swift_retain();
          specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v10, 0, 0, 0, (char **)&v11);
          uint64_t v7 = swift_allocObject();
          *(void *)(v7 + 16) = closure #1 in Cancellable.storeWhileEntityActive(_:);
          *(void *)(v7 + 24) = 0;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<ComponentEvents.WillDeactivate> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<ComponentEvents.WillDeactivate>);
          uint64_t v8 = Publisher<>.sink(receiveValue:)();
          swift_release();
          swift_release();
          *((void *)&v12 + 1) = type metadata accessor for AnyCancellable();
          *(void *)&long long v13 = MEMORY[0x263EFDD10];
          swift_release();
          *(void *)&long long v11 = v8;
          outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for EventSource?);
          outlined assign with take of Cancellable?((uint64_t)&v11, (uint64_t)&v14);
          goto LABEL_17;
        }
        goto LABEL_19;
      }
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      swift_release();
    }
    long long v14 = 0u;
    long long v15 = 0u;
    *(void *)&long long v16 = 0;
    *((void *)&v16 + 1) = MEMORY[0x263F8EE78];
    outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for EventSubscriptionComponent?);
    goto LABEL_11;
  }
  static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log();
  id v9 = (id)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
}

uint64_t closure #1 in Cancellable.storeWhileEntityActive(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v4 = 0u;
  long long v5 = 0u;
  uint64_t v6 = 0;
  uint64_t v7 = MEMORY[0x263F8EE78];
  outlined init with copy of EventSubscriptionComponent((uint64_t)&v4, (uint64_t)v3);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v3);
  outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for EventSubscriptionComponent?);
  outlined destroy of EventSubscriptionComponent((uint64_t)&v4);
  swift_release();
  v3[0] = v1;
  uint64_t v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  swift_retain();
  Entity.ComponentSet.doSetExistential(_:newValue:)(&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent, (uint64_t)&v4);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v4, &demangling cache variable for type metadata for Component?);
  return swift_release_n();
}

uint64_t sub_2282CAB34()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(long long *a1)
{
  uint64_t v2 = *(uint64_t (**)(long long *))(v1 + 16);
  uint64_t v3 = *((void *)a1 + 2);
  long long v5 = *a1;
  uint64_t v6 = v3;
  return v2(&v5);
}

uint64_t destroy for EventSubscriptionComponent(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EventSubscriptionComponent(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EventSubscriptionComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventSubscriptionComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventSubscriptionComponent()
{
  return &type metadata for EventSubscriptionComponent;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_SSs5NeverOTg5079_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcS2S_p40_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_P12SSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    long long v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v4 += 3;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_Sfs5NeverOTg5077_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcSfo1_p42_tcfu0_33_893d56a90535c8a5d4eba8be3a3470f6o1_pR10Tf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v8;
    long long v4 = (int *)(a1 + 48);
    do
    {
      int v5 = *v4;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      unint64_t v6 = *(void *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(_DWORD *)(result + 4 * v7 + 32) = v5;
      v4 += 6;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 < 0) {
    goto LABEL_58;
  }
  uint64_t v4 = result;
  if (!a2)
  {
    BOOL v42 = 0;
LABEL_55:
    *(void *)a4 = v4;
    *(unsigned char *)(a4 + 8) = v42;
    return result;
  }
  uint64_t v5 = a3;
  uint64_t v6 = 0;
  while (1)
  {
    BOOL v42 = v4 == v5;
    if (v4 == v5)
    {
      uint64_t v4 = 0;
      goto LABEL_55;
    }
    if (__OFADD__(v4++, 1)) {
      goto LABEL_57;
    }
    uint64_t result = REEntityGetComponentCount();
    if (v4 < result) {
      break;
    }
LABEL_5:
    if (++v6 == a2) {
      goto LABEL_55;
    }
  }
  while (1)
  {
    uint64_t Shared = REEngineGetShared();
    if (Shared)
    {
      uint64_t v9 = Shared;
      if (one-time initialization token for lock != -1) {
        swift_once();
      }
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v9)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v9);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      uint64_t v10 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine) {
        goto LABEL_35;
      }
    }
    else
    {
      static __ServiceLocator.sharedEngine = 0;
      swift_release();
      uint64_t v10 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine) {
        goto LABEL_35;
      }
    }
    uint64_t Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v13 = REEngineConfigurationClone();
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v13;
      swift_release_n();
      uint64_t v12 = v14;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v15 = REEngineConfigurationClone();
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v15;
      swift_release_n();
      uint64_t v12 = v16;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v17 = REEngineConfigurationClone();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v17;
      swift_release_n();
      uint64_t v12 = v18;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v19 = REEngineConfigurationClone();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      swift_release_n();
      uint64_t v12 = v20;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v21 = REEngineConfigurationClone();
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      swift_release_n();
      uint64_t v12 = v22;
    }
    REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter())
    {
      v44[0] = v12;
      long long v23 = specialized static __Engine.makeSharedEngine(_:)(v44);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v23;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    uint64_t result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    uint64_t v10 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine) {
      goto LABEL_60;
    }
LABEL_35:
    uint64_t result = swift_beginAccess();
    uint64_t v24 = v10[5];
    if (!v24) {
      goto LABEL_59;
    }
    uint64_t v25 = v24 + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v25, (uint64_t)v44);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    REEntityGetComponentAtIndex();
    Swift::UInt Class = REComponentGetClass();
    swift_beginAccess();
    uint64_t v27 = *(void *)(v43 + 16);
    swift_beginAccess();
    uint64_t v28 = *(void *)(v27 + 24);
    if (!*(void *)(v28 + 16)) {
      goto LABEL_63;
    }
    uint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
    if (v30)
    {
      int v31 = *(unsigned __int8 *)(*(void *)(v28 + 56) + 80 * v29 + 48);
      uint64_t result = swift_release();
      if (v31 == 2) {
        goto LABEL_4;
      }
    }
    else
    {
LABEL_63:
      if (one-time initialization token for handlesToCustomComponentTypes != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v32 = static SceneManager.handlesToCustomComponentTypes;
      if (*(void *)(static SceneManager.handlesToCustomComponentTypes + 16)
        && (uint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v34 & 1) != 0))
      {
        uint64_t v35 = *(void *)(*(void *)(v32 + 56) + 16 * v33);
        swift_endAccess();
        uint64_t v36 = *(void *)(v43 + 16);
        swift_beginAccess();
        if (!*(void *)(*(void *)(v36 + 16) + 16)
          || (specialized __RawDictionaryStorage.find<A>(_:)(v35), (v37 & 1) == 0))
        {
          uint64_t result = swift_release();
          goto LABEL_4;
        }
      }
      else
      {
        swift_endAccess();
      }
      uint64_t result = swift_release();
    }
    uint64_t v38 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    uint64_t result = REEntityGetComponentCount();
    ++v4;
    if (v38 >= result)
    {
      uint64_t v4 = v38;
LABEL_4:
      uint64_t v5 = a3;
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = a2;
    uint64_t v4 = result;
    if (!a2) {
      return v4;
    }
    uint64_t v6 = a2 + result;
    for (uint64_t i = result; ; ++i)
    {
      if (a3 == i) {
        return 0;
      }
      if (v4 < 0) {
        break;
      }
      uint64_t result = REEntityGetChildCount();
      if (i >= result) {
        goto LABEL_13;
      }
      if (!--v3) {
        return v6;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    uint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      uint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      uint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      unint64_t v7 = v4 & 3;
      if ((v4 & 3) == 0) {
        unint64_t v7 = 4;
      }
      uint64_t v5 = v4 - v7;
      uint64_t v8 = 0uLL;
      v9.i64[0] = 0;
      v9.i64[1] = result;
      uint64_t v10 = vdupq_n_s64(1uLL);
      uint64_t v11 = v5;
      do
      {
        uint64_t v8 = vaddq_s64(v8, v10);
        uint64_t v9 = vaddq_s64(v9, v10);
        v11 -= 4;
      }
      while (v11);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip1q_s64(v9, v8), vzip2q_s64(v9, v8)));
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = v5 + result - a3;
    uint64_t v14 = a2 - v5;
    uint64_t result = v6;
    while (1)
    {
      if (!v13) {
        return 0;
      }
      if (!v12) {
        break;
      }
      ++result;
      ++v12;
      ++v13;
      if (!--v14) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    uint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      uint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      uint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      unint64_t v7 = v4 & 3;
      if ((v4 & 3) == 0) {
        unint64_t v7 = 4;
      }
      uint64_t v5 = v4 - v7;
      uint64_t v8 = 0uLL;
      uint64_t v9 = (int64x2_t)(unint64_t)result;
      uint64_t v10 = vdupq_n_s64(1uLL);
      uint64_t v11 = v5;
      do
      {
        uint64_t v8 = vaddq_s64(v8, v10);
        uint64_t v9 = vaddq_s64(v9, v10);
        v11 -= 4;
      }
      while (v11);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip2q_s64(v9, v8), vzip1q_s64(v9, v8)));
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = v5 + result - a3;
    uint64_t v14 = a2 - v5;
    uint64_t result = v6;
    while (1)
    {
      if (!v13) {
        return 0;
      }
      if (!v12) {
        break;
      }
      ++result;
      ++v12;
      ++v13;
      if (!--v14) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  if (a4 < 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }
  else
  {
    uint64_t v9 = v8;
    uint64_t v12 = a4;
    uint64_t v14 = a2;
    unint64_t v15 = result;
    char v17 = a3 & 1;
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (v12)
    {
      uint64_t v34 = a8;
      uint64_t v18 = 0;
      char v19 = a3 | a7;
      uint64_t v20 = a7 & 1;
      char v21 = v19 & 1;
      uint64_t v22 = a5;
      uint64_t v36 = v12;
      while (1)
      {
        if (v21) {
          goto LABEL_45;
        }
        if (v14 != a6)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v15 == v22)
        {
          uint64_t result = outlined consume of [String : AnimationResource].Index._Variant(v22, v14, 0);
          *(void *)uint64_t v34 = 0;
          *(void *)(v34 + 8) = 0;
          *(unsigned char *)(v34 + 16) = -1;
          return result;
        }
        long long v23 = *(_OWORD *)(v9 + 16);
        v37[0] = *(_OWORD *)v9;
        v37[1] = v23;
        uint64_t v38 = *(void *)(v9 + 32);
        outlined init with take of Transform?((uint64_t)v37 + 8, (uint64_t)v40, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
        uint64_t result = outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
        uint64_t v24 = v41;
        if (!v41)
        {
          outlined init with take of Transform?((uint64_t)v37, (uint64_t)v39, &demangling cache variable for type metadata for AnimationLibraryResource?);
          outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v42, &demangling cache variable for type metadata for AnimationLibraryResource?);
          if (v42) {
            uint64_t result = AnimationLibraryResource.keyedResources.getter();
          }
          else {
            uint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
          }
          uint64_t v24 = result;
        }
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_41;
        }
        uint64_t v25 = 1 << *(unsigned char *)(v24 + 32);
        if ((uint64_t)v15 >= v25) {
          goto LABEL_41;
        }
        unint64_t v26 = v15 >> 6;
        uint64_t v27 = v24 + 64;
        unint64_t v28 = *(void *)(v24 + 64 + 8 * (v15 >> 6));
        if (((v28 >> v15) & 1) == 0) {
          goto LABEL_42;
        }
        if (*(_DWORD *)(v24 + 36) != a6) {
          goto LABEL_43;
        }
        unint64_t v29 = v28 & (-2 << (v15 & 0x3F));
        if (!v29) {
          break;
        }
        unint64_t v15 = __clz(__rbit64(v29)) | v15 & 0xFFFFFFFFFFFFFFC0;
        outlined retain of [String : String]((uint64_t)v40);
        uint64_t result = swift_bridgeObjectRelease();
LABEL_5:
        ++v18;
        uint64_t v14 = a6;
        char v21 = v20;
        if (v18 == v12)
        {
          char v17 = 0;
          uint64_t v14 = a6;
          a8 = v34;
          goto LABEL_39;
        }
      }
      uint64_t v30 = v20;
      unint64_t v31 = v26 + 1;
      unint64_t v32 = (unint64_t)(v25 + 63) >> 6;
      if (v26 + 1 >= v32)
      {
        outlined retain of [String : String]((uint64_t)v40);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v15 = v25;
LABEL_35:
        uint64_t v20 = v30;
        uint64_t v12 = v36;
        goto LABEL_5;
      }
      unint64_t v33 = *(void *)(v27 + 8 * v31);
      if (v33) {
        goto LABEL_21;
      }
      unint64_t v31 = v26 + 2;
      if (v26 + 2 >= v32)
      {
        outlined retain of [String : String]((uint64_t)v40);
      }
      else
      {
        unint64_t v33 = *(void *)(v27 + 8 * v31);
        if (v33)
        {
LABEL_21:
          outlined retain of [String : String]((uint64_t)v40);
LABEL_22:
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v15 = __clz(__rbit64(v33)) + (v31 << 6);
LABEL_34:
          uint64_t v22 = a5;
          goto LABEL_35;
        }
        unint64_t v31 = v26 + 3;
        if (v26 + 3 < v32)
        {
          unint64_t v33 = *(void *)(v27 + 8 * v31);
          if (v33)
          {
LABEL_31:
            outlined retain of [String : String]((uint64_t)v40);
            outlined consume of [String : AnimationResource].Index._Variant(v15, v14, 0);
            goto LABEL_22;
          }
          while (v32 - 4 != v26)
          {
            unint64_t v33 = *(void *)(v24 + 96 + 8 * v26++);
            if (v33)
            {
              unint64_t v31 = v26 + 3;
              goto LABEL_31;
            }
          }
        }
        outlined retain of [String : String]((uint64_t)v40);
        outlined consume of [String : AnimationResource].Index._Variant(v15, v14, 0);
      }
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v15 = v25;
      goto LABEL_34;
    }
LABEL_39:
    *(void *)a8 = v15;
    *(void *)(a8 + 8) = v14;
    *(unsigned char *)(a8 + 16) = v17;
  }
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
  }
  uint64_t v5 = BlendShapeWeightsCount;
  uint64_t v38 = a2;
  uint64_t v6 = (void *)MEMORY[0x263F8EE78];
  if (BlendShapeWeightsCount)
  {
    uint64_t v7 = 0;
    uint64_t v39 = BlendShapeWeightsCount;
    while (v7 != v5)
    {
      uint64_t BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (BlendWeightCount < 0) {
        goto LABEL_40;
      }
      uint64_t v9 = BlendWeightCount;
      if (BlendWeightCount)
      {
        uint64_t v10 = 0;
        uint64_t v11 = (void *)MEMORY[0x263F8EE78];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          uint64_t v12 = String.init(cString:)();
          uint64_t v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
          }
          unint64_t v16 = v11[2];
          unint64_t v15 = v11[3];
          if (v16 >= v15 >> 1) {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v11);
          }
          ++v10;
          void v11[2] = v16 + 1;
          char v17 = &v11[2 * v16];
          unsigned char v17[4] = v12;
          void v17[5] = v14;
        }
        while (v9 != v10);
      }
      else
      {
        uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
      }
      unint64_t v19 = v6[2];
      unint64_t v18 = v6[3];
      if (v19 >= v18 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v6);
      }
      ++v7;
      void v6[2] = v19 + 1;
      v6[v19 + 4] = v11;
      uint64_t v5 = v39;
      if (v7 == v39) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_20:
  uint64_t v42 = (void *)MEMORY[0x263F8EE78];
  uint64_t v43 = (void *)MEMORY[0x263F8EE78];
  uint64_t BlendShapeWeightsMeshMapCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMapCount();
  uint64_t v40 = -1;
  uint64_t v41 = -1;
  if (BlendShapeWeightsMeshMapCount < 0) {
    goto LABEL_44;
  }
  uint64_t v21 = BlendShapeWeightsMeshMapCount;
  if (BlendShapeWeightsMeshMapCount)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = v22 + 1;
      v44[0] = 0;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      int v47 = 0;
      closure #1 in _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(v44, v3, v22, &v40, (unint64_t)&v41, &v43, &v42);
      uint64_t v22 = v23;
    }
    while (v21 != v23);
    uint64_t v25 = v42;
    uint64_t v24 = v43;
  }
  else
  {
    uint64_t v25 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v26 = v24[2];
  if (v26 == v25[2])
  {
    if (v26)
    {
      uint64_t v27 = v25 + 4;
      unint64_t v28 = v24 + 4;
      unint64_t v29 = (void *)MEMORY[0x263F8EE78];
      while (1)
      {
        unint64_t v31 = *v27++;
        unint64_t v30 = v31;
        if ((v31 & 0x8000000000000000) != 0) {
          break;
        }
        if (v30 >= v6[2]) {
          goto LABEL_42;
        }
        uint64_t v32 = v6[v30 + 4];
        uint64_t v33 = *v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        unint64_t v35 = v29[2];
        unint64_t v34 = v29[3];
        if (v35 >= v34 >> 1) {
          unint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v29);
        }
        _OWORD v29[2] = v35 + 1;
        uint64_t v36 = &v29[2 * v35];
        v36[4] = v32;
        v36[5] = v33;
        ++v28;
        if (!--v26) {
          goto LABEL_38;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v29 = (void *)MEMORY[0x263F8EE78];
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v38 = v29;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

RealityFoundation::BlendShapeWeightsData __swiftcall BlendShapeWeightsData.init(id:weights:)(Swift::String id, Swift::OpaquePointer weights)
{
  object = id._object;
  uint64_t countAndFlagsBits = id._countAndFlagsBits;
  uint64_t v6 = v2;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_SSs5NeverOTg5079_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcS2S_p40_tcfu_32a168a102879cc1a6a91172b0770f0c91o1_P12SSTf3nnnpk_nTf1cn_n((uint64_t)weights._rawValue);
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_SftG_Sfs5NeverOTg5077_s17RealityFoundation21BlendShapeWeightsDataV2id7weightsACSS_SaySS_SftGtcfcSfo1_p42_tcfu0_33_893d56a90535c8a5d4eba8be3a3470f6o1_pR10Tf3nnnpk_nTf1cn_n((uint64_t)weights._rawValue);
  uint64_t v9 = swift_bridgeObjectRelease();
  *uint64_t v6 = countAndFlagsBits;
  v6[1] = (uint64_t)object;
  void v6[2] = v8;
  v6[3] = v7;
  result._weightNames._rawValue = v12;
  result._weights.coreWeights._rawValue = v11;
  result._blendShapeName._object = v10;
  result._blendShapeName._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t BlendShapeWeightsData.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BlendShapeWeightsData.weights.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t BlendShapeWeightsData.weights.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = v2;
  return result;
}

uint64_t (*BlendShapeWeightsData.weights.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify;
}

uint64_t BlendShapeWeightsData.weightNames.getter()
{
  return swift_bridgeObjectRetain();
}

RealityFoundation::BlendShapeWeightsSet __swiftcall BlendShapeWeightsSet.init()()
{
  *uint64_t v0 = MEMORY[0x263F8EE78];
  return result;
}

double BlendShapeWeightsSet.default.getter@<D0>(void *a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v3 = v2[5];
    uint64_t v4 = v2[6];
    uint64_t v5 = v2[7];
    *a1 = v2[4];
    a1[1] = v3;
    a1[2] = v4;
    a1[3] = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t key path setter for BlendShapeWeightsSet.default : BlendShapeWeightsSet(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  _OWORD v5[2] = v2;
  v5[3] = v3;
  outlined copy of MeshDescriptor.Skinning?(v5[0], v1);
  return BlendShapeWeightsSet.default.setter((uint64_t)v5);
}

uint64_t BlendShapeWeightsSet.default.setter(uint64_t result)
{
  uint64_t v3 = *(void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = *(void **)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    if (!v2) {
      return result;
    }
    uint64_t v6 = *(void *)(v5[6] + 16);
    uint64_t v7 = *(void *)(v4 + 16);
    if (v6)
    {
      if (v7 && v6 == v7)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        outlined consume of StateMachineGraph?(v3, v2);
        double result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if (v5[2])
          {
LABEL_8:
            double result = swift_bridgeObjectRelease();
            v5[6] = v4;
            *(void *)uint64_t v1 = v5;
            return result;
          }
        }
        else
        {
          double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
          uint64_t v5 = (void *)result;
          if (*(void *)(result + 16)) {
            goto LABEL_8;
          }
        }
        __break(1u);
        return result;
      }
    }
    else if (!v7)
    {
      goto LABEL_6;
    }
  }
  uint64_t v8 = *(void *)result;

  return outlined consume of StateMachineGraph?(v8, v2);
}

void (*BlendShapeWeightsSet.default.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  uint64_t v4 = v3;
  *a1 = v3;
  v3[4] = v1;
  uint64_t v5 = *(void **)v1;
  if (*(void *)(*(void *)v1 + 16))
  {
    uint64_t v6 = v5[5];
    uint64_t v7 = v5[6];
    uint64_t v8 = v5[7];
    *uint64_t v4 = v5[4];
    v4[1] = v6;
    _OWORD v4[2] = v7;
    v4[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return BlendShapeWeightsSet.default.modify;
}

void BlendShapeWeightsSet.default.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  v8[0] = v4;
  v8[1] = v5;
  void v8[2] = v6;
  void v8[3] = v7;
  if (a2)
  {
    outlined copy of MeshDescriptor.Skinning?(v4, v5);
    BlendShapeWeightsSet.default.setter((uint64_t)v8);
    outlined consume of StateMachineGraph?(*v3, v3[1]);
  }
  else
  {
    BlendShapeWeightsSet.default.setter((uint64_t)v8);
  }

  free(v3);
}

uint64_t BlendShapeWeightsSet.count.getter()
{
  return *(void *)(*(void *)v0 + 16);
}

BOOL BlendShapeWeightsSet.isEmpty.getter()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t BlendShapeWeightsSet.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6)
  {
    uint64_t v8 = result;
    uint64_t v9 = (uint64_t *)(v5 + 32);
    while (*v9 != v8 || v9[1] != a2)
    {
      double result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result)
      {
        uint64_t v8 = *v9;
        a2 = v9[1];
        break;
      }
      v9 += 4;
      if (!--v6) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = v9[2];
    uint64_t v12 = v9[3];
    *a3 = v8;
    a3[1] = a2;
    a3[2] = v11;
    a3[3] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  else
  {
LABEL_9:
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

Swift::Bool __swiftcall BlendShapeWeightsSet.contains(_:)(Swift::String a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3) {
    return 0;
  }
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  for (uint64_t i = (void *)(v2 + 40); ; i += 4)
  {
    BOOL v7 = *(i - 1) == countAndFlagsBits && *i == (void)object;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (!--v3) {
      return 0;
    }
  }
  return 1;
}

RealityFoundation::BlendShapeWeightsData_optional __swiftcall BlendShapeWeightsSet.set(_:)(RealityFoundation::BlendShapeWeightsData_optional result)
{
  uint64_t v3 = v1;
  uint64_t countAndFlagsBits = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = *(void *)result.value._blendShapeName._countAndFlagsBits;
    uint64_t v8 = *(void *)(result.value._blendShapeName._countAndFlagsBits + 8);
    uint64_t v9 = 7;
    uint64_t v17 = *(void *)(result.value._blendShapeName._countAndFlagsBits + 16);
    uint64_t v18 = *(void *)(result.value._blendShapeName._countAndFlagsBits + 24);
    while (1)
    {
      uint64_t v10 = &countAndFlagsBits[v9];
      if (countAndFlagsBits[v9 - 3] == v7 && countAndFlagsBits[v9 - 2] == v8)
      {
        uint64_t v12 = v8;
        uint64_t v16 = v7;
        goto LABEL_12;
      }
      result.value._blendShapeName._uint64_t countAndFlagsBits = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result.value._blendShapeName._countAndFlagsBits) {
        break;
      }
      ++v6;
      v9 += 4;
      if (v5 == v6) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = countAndFlagsBits[v9 - 2];
    uint64_t v16 = countAndFlagsBits[v9 - 3];
LABEL_12:
    uint64_t v13 = *(v10 - 1);
    uint64_t v14 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result.value._blendShapeName._uint64_t countAndFlagsBits = swift_isUniquelyReferenced_nonNull_native();
    if ((result.value._blendShapeName._countAndFlagsBits & 1) == 0)
    {
      result.value._blendShapeName._uint64_t countAndFlagsBits = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(countAndFlagsBits);
      uint64_t countAndFlagsBits = (void *)result.value._blendShapeName._countAndFlagsBits;
    }
    if (v6 >= countAndFlagsBits[2])
    {
      __break(1u);
    }
    else
    {
      unint64_t v15 = &countAndFlagsBits[v9];
      *(v15 - 3) = v7;
      *(v15 - 2) = v8;
      *(v15 - 1) = v17;
      *unint64_t v15 = v18;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result.value._blendShapeName._uint64_t countAndFlagsBits = swift_bridgeObjectRelease();
      *(void *)uint64_t v2 = countAndFlagsBits;
      *uint64_t v3 = v16;
      v3[1] = v12;
      v3[2] = v13;
      v3[3] = v14;
    }
  }
  else
  {
LABEL_9:
    *(_OWORD *)uint64_t v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return result;
}

RealityFoundation::BlendShapeWeightsData_optional __swiftcall BlendShapeWeightsSet.Iterator.next()()
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)uint64_t v0 = 0u;
    *(_OWORD *)(v0 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 32 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    *(void *)uint64_t v0 = v4[4];
    *(void *)(v0 + 8) = v5;
    *(void *)(v0 + 16) = v6;
    *(void *)(v0 + 24) = v7;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
  }
  result.value._weightNames._rawValue = v11;
  result.value._weights.coreWeights._rawValue = v10;
  result.value._blendShapeName._object = v9;
  result.value._blendShapeName._uint64_t countAndFlagsBits = v8;
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance BlendShapeWeightsSet.Iterator@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (void *)(*v1 + 32 * v2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    *(void *)a1 = v4[4];
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    v1[1] = v2 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t BlendShapeWeightsSet.makeIterator()@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance BlendShapeWeightsSet()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance BlendShapeWeightsSet(void *a1, void *a2, unint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t BlendShapeWeightsSet.startIndex.getter()
{
  return 0;
}

Swift::Int_optional __swiftcall BlendShapeWeightsSet.index(of:)(Swift::String of)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    object = of._object;
    uint64_t countAndFlagsBits = of._countAndFlagsBits;
    Swift::Int v6 = 0;
    uint64_t v7 = (void *)(v2 + 40);
    while (1)
    {
      BOOL v8 = *(v7 - 1) == countAndFlagsBits && *v7 == (void)object;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      ++v6;
      v7 += 4;
      if (v3 == v6) {
        goto LABEL_9;
      }
    }
    Swift::Bool v9 = 0;
  }
  else
  {
LABEL_9:
    Swift::Int v6 = 0;
    Swift::Bool v9 = 1;
  }
  Swift::Int v10 = v6;
  result.RealityKit::RotationOrder value = v10;
  result.is_nil = v9;
  return result;
}

unint64_t BlendShapeWeightsSet.subscript.getter@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(*(void *)v2 + 16) <= result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v3 = (void *)(*(void *)v2 + 32 * result);
  uint64_t v4 = v3[5];
  uint64_t v5 = v3[6];
  uint64_t v6 = v3[7];
  *a2 = v3[4];
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t key path getter for BlendShapeWeightsSet.subscript(_:) : BlendShapeWeightsSet@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= *(void *)(*(void *)result + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v4 = (void *)(*(void *)result + 32 * v3);
  uint64_t v5 = v4[5];
  uint64_t v6 = v4[6];
  uint64_t v7 = v4[7];
  *a3 = v4[4];
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t key path setter for BlendShapeWeightsSet.subscript(_:) : BlendShapeWeightsSet(uint64_t *a1, void **a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  Swift::Bool v9 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  Swift::Bool v9 = (void *)result;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v4 < v9[2])
  {
    uint64_t v11 = &v9[4 * v4];
    void v11[4] = v6;
    v11[5] = v5;
    v11[6] = v7;
    v11[7] = v8;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *a2 = v9;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsSet.subscript.setter(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  long long v9 = *(_OWORD *)(a1 + 1);
  uint64_t v5 = a1[3];
  uint64_t v6 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  uint64_t v6 = (void *)result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (v6[2] > a2)
  {
    uint64_t v8 = &v6[4 * a2];
    void v8[4] = v4;
    *(_OWORD *)(v8 + 5) = v9;
    v8[7] = v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*BlendShapeWeightsSet.subscript.modify(void (**a1)(uint64_t **a1, char a2), unint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1 = result;
  *((void *)result + 4) = a2;
  *((void *)result + 5) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = (void *)(*(void *)v2 + 32 * a2);
    uint64_t v8 = v7[5];
    uint64_t v9 = v7[6];
    uint64_t v10 = v7[7];
    *(void *)uint64_t v6 = v7[4];
    *((void *)v6 + 1) = v8;
    *((void *)v6 + 2) = v9;
    *((void *)v6 + 3) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return BlendShapeWeightsSet.subscript.modify;
  }
  __break(1u);
  return result;
}

void BlendShapeWeightsSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v6 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  uint64_t v7 = *(void **)(*a1)[5];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    }
    unint64_t v8 = v2[4];
    if (v7[2] > v8)
    {
      uint64_t v9 = (void *)v2[5];
      uint64_t v10 = &v7[4 * v8];
      void v10[4] = v4;
      void v10[5] = v3;
      float v10[6] = v6;
      v10[7] = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v9 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_13:
  }
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
  unint64_t v11 = v2[4];
  if (v7[2] <= v11)
  {
    __break(1u);
    return;
  }
  uint64_t v12 = (void *)v2[5];
  uint64_t v13 = &v7[4 * v11];
  void v13[4] = v4;
  void v13[5] = v3;
  v13[6] = v6;
  v13[7] = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v12 = v7;
LABEL_9:

  free(v2);
}

Swift::Int __swiftcall BlendShapeWeightsSet.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BlendShapeWeightsSet(uint64_t (**a1)(), unint64_t *a2))(void *a1)
{
  uint64_t v4 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v4;
  *((void *)v4 + 4) = BlendShapeWeightsSet.subscript.read(v4, *a2);
  return protocol witness for Collection.subscript.read in conformance IKRig.JointCollection;
}

uint64_t (*BlendShapeWeightsSet.subscript.read(uint64_t (*result)(), unint64_t a2))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(*(void *)v2 + 16) > a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)(*(void *)v2 + 32 * a2);
    uint64_t v5 = v4[5];
    uint64_t v6 = v4[6];
    uint64_t v7 = v4[7];
    *(void *)uint64_t v3 = v4[4];
    *((void *)v3 + 1) = v5;
    *((void *)v3 + 2) = v6;
    *((void *)v3 + 3) = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return BlendShapeWeightsSet.subscript.read;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeightsSet.subscript.read()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance BlendShapeWeightsSet@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

RealityFoundation::_Proto_BlendShapeWeightsAndMeshesGroup_v1 __swiftcall _Proto_BlendShapeWeightsAndMeshesGroup_v1.init(weightNames:meshDescriptors:)(Swift::OpaquePointer weightNames, Swift::OpaquePointer meshDescriptors)
{
  v2->_rawValue = weightNames._rawValue;
  v2[1]._rawValue = meshDescriptors._rawValue;
  result.meshDescriptors = meshDescriptors;
  result.weightNames = weightNames;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsAndMeshesGroup_v1.weightNames.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsAndMeshesGroup_v1.meshDescriptors.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::_Proto_BlendShapeWeightsMappingDefinition_v1 __swiftcall _Proto_BlendShapeWeightsMappingDefinition_v1.init(weightsAndMeshesGroups:)(RealityFoundation::_Proto_BlendShapeWeightsMappingDefinition_v1 weightsAndMeshesGroups)
{
  v1->_weightsAndMeshesGroups._rawValue = weightsAndMeshesGroups._weightsAndMeshesGroups._rawValue;
  return weightsAndMeshesGroups;
}

uint64_t closure #1 in _Proto_BlendShapeWeightsMappingDefinition_v1.init(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, void **a6, void **a7)
{
  REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsMeshMap();
  int v12 = *a1;
  if ((v12 - 3) <= 0xFFFFFFFD)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (*((void *)a1 + 2))
  {
    uint64_t v13 = (void *)String.init(cString:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = *((unsigned int *)a1 + 6);
  if (*a4 == v16)
  {
    a5 = *(void *)a5;
    a7 = (void **)String.init(cString:)();
    a4 = v17;
    uint64_t v18 = *a6;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a6 = v18;
    if (isUniquelyReferenced_nonNull_native)
    {
      if ((a5 & 0x8000000000000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
      *a6 = v18;
      if ((a5 & 0x8000000000000000) == 0)
      {
LABEL_8:
        if (a5 < v18[2])
        {
          uint64_t v36 = v15;
          uint64_t v20 = v13;
          uint64_t v21 = a7;
          uint64_t v22 = v18 + 4;
          uint64_t v23 = (void *)v18[a5 + 4];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          v18[a5 + 4] = v23;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
            uint64_t v23 = (void *)result;
            v22[a5] = result;
          }
          unint64_t v26 = v23[2];
          unint64_t v25 = v23[3];
          if (v26 >= v25 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v23);
            uint64_t v23 = (void *)result;
            v22[a5] = result;
          }
          v23[2] = v26 + 1;
          uint64_t v27 = &v23[5 * v26];
          uint64_t v27[4] = v21;
          v27[5] = a4;
          *((unsigned char *)v27 + 48) = v12 != 1;
          v27[7] = v20;
          v27[8] = v36;
          return result;
        }
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  *a4 = v16;
  if (__OFADD__(*(void *)a5, 1)) {
    goto LABEL_25;
  }
  ++*(void *)a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeMeshDescriptor_v1>);
  a5 = swift_allocObject();
  *(_OWORD *)(a5 + 16) = xmmword_22830EC60;
  *(void *)(a5 + 32) = String.init(cString:)();
  *(void *)(a5 + 40) = v28;
  *(unsigned char *)(a5 + 48) = v12 != 1;
  *(void *)(a5 + 56) = v13;
  *(void *)(a5 + 64) = v15;
  uint64_t v13 = *a6;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  *a6 = v13;
  if ((v29 & 1) == 0)
  {
LABEL_27:
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *a6 = v13;
  }
  unint64_t v31 = v13[2];
  unint64_t v30 = v13[3];
  if (v31 >= v30 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v13);
    *a6 = v13;
  }
  v13[2] = v31 + 1;
  v13[v31 + 4] = a5;
  uint64_t v32 = *a4;
  uint64_t v33 = *a7;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a7 = v33;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    uint64_t v33 = (void *)result;
    *a7 = (void *)result;
  }
  unint64_t v35 = v33[2];
  unint64_t v34 = v33[3];
  if (v35 >= v34 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v33);
    uint64_t v33 = (void *)result;
  }
  _OWORD v33[2] = v35 + 1;
  v33[v35 + 4] = v32;
  *a7 = v33;
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.createResource()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  uint64_t v78 = *v0;
  uint64_t v79 = *(void *)(*v0 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v79)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v1 + 32;
    while (v4 < *(void *)(v1 + 16))
    {
      uint64_t v6 = *(void *)(*(void *)(v5 + 16 * v4 + 8) + 16);
      if (v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, v2);
        }
        unint64_t v7 = v2[2];
        uint64_t v1 = v78;
        do
        {
          unint64_t v8 = v2[3];
          if (v7 >= v8 >> 1)
          {
            uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v7 + 1, 1, v2);
            uint64_t v1 = v78;
            uint64_t v2 = v9;
          }
          v2[2] = v7 + 1;
          v2[v7++ + 4] = v4;
          --v6;
        }
        while (v6);
      }
      if (++v4 == v79) {
        goto LABEL_13;
      }
    }
    goto LABEL_88;
  }
LABEL_13:
  uint64_t v84 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
  uint64_t inited = swift_initStackObject();
  unint64_t v11 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_22830EC60;
  *(void *)(inited + 32) = v3;
  if (!v79)
  {
    long long v75 = (void *)inited;
LABEL_72:
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    if (!MEMORY[0x22A692220](ServiceLocator)) {
      goto LABEL_95;
    }
    swift_bridgeObjectRetain();
    uint64_t AssetWithDefinitions = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1();
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = AssetWithDefinitions;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    Swift::String v66 = v75;
    uint64_t v67 = v75[2];
    if (!v67)
    {
LABEL_82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v65;
    }
    unint64_t v68 = 0;
    uint64_t v69 = v75 + 4;
    while (1)
    {
      if (v68 >= v66[2]) {
        goto LABEL_91;
      }
      uint64_t v70 = *(void *)(v69[v68] + 16);
      if (v70) {
        break;
      }
LABEL_75:
      ++v68;
      Swift::String v66 = v75;
      if (v68 == v67) {
        goto LABEL_82;
      }
    }
    unint64_t v71 = 0;
    while (1)
    {
      uint64_t v72 = v69[v68];
      if (v71 >= *(void *)(v72 + 16)) {
        break;
      }
      unint64_t v73 = v71 + 1;
      free(*(void **)(v72 + 8 * v71 + 32));
      unint64_t v71 = v73;
      if (v70 == v73) {
        goto LABEL_75;
      }
    }
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
  }
  unint64_t v12 = 0;
  uint64_t v13 = v78;
  uint64_t v77 = v78 + 32;
  uint64_t v80 = (void *)MEMORY[0x263F8EE78];
  do
  {
    if (v12 >= *(void *)(v13 + 16)) {
      goto LABEL_89;
    }
    uint64_t v14 = *(void *)(v77 + 16 * v12);
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v16 = v14 + 40;
      uint64_t v17 = (void *)MEMORY[0x263F8EE78];
      do
      {
        uint64_t v18 = (const char *)(String.utf8CString.getter() + 32);
        swift_bridgeObjectRetain();
        unint64_t v19 = strdup(v18);
        swift_release();
        swift_bridgeObjectRelease();
        if (v19)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          }
          unint64_t v21 = v17[2];
          unint64_t v20 = v17[3];
          if (v21 >= v20 >> 1) {
            uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v17);
          }
          v17[2] = v21 + 1;
          v17[v21 + 4] = v19;
        }
        v16 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      uint64_t v17 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v22 = v17[2];
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v23 = v80;
    }
    else {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v23);
    }
    v23[2] = v25 + 1;
    uint64_t v80 = v23;
    unint64_t v26 = &v23[2 * v25];
    v26[4] = v22;
    uint64_t v26[5] = v17 + 4;
    unint64_t v28 = v11[2];
    unint64_t v27 = v11[3];
    if (v28 >= v27 >> 1) {
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v11);
    }
    ++v12;
    void v11[2] = v28 + 1;
    v11[v28 + 4] = v17;
    char v29 = v84;
    uint64_t v13 = v78;
  }
  while (v12 != v79);
  unint64_t v30 = 0;
  uint64_t v82 = v84 + 4;
  unint64_t v31 = (void *)MEMORY[0x263F8EE78];
  long long v75 = v11;
  while (1)
  {
    if (v30 >= *(void *)(v13 + 16)) {
      goto LABEL_90;
    }
    long long v85 = v31;
    unint64_t v76 = v30;
    uint64_t v32 = v77 + 16 * v30;
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v33 = v32 + 8;
    uint64_t v83 = *(void *)(v34 + 16);
    if (v83) {
      break;
    }
LABEL_36:
    unint64_t v30 = v76 + 1;
    uint64_t v13 = v78;
    unint64_t v31 = v85;
    if (v76 + 1 == v79) {
      goto LABEL_72;
    }
  }
  unint64_t v35 = 0;
  uint64_t v36 = 64;
  uint64_t v81 = v33;
  while (1)
  {
    if (v35 >= *(void *)(*(void *)v33 + 16)) {
      goto LABEL_84;
    }
    uint64_t v38 = (uint64_t *)(*(void *)v33 + v36);
    int v39 = *((unsigned __int8 *)v38 - 16);
    uint64_t v40 = *v38;
    uint64_t v41 = *(v38 - 4);
    uint64_t v42 = *(v38 - 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    uint64_t v43 = (void *)MEMORY[0x22A688A50](v41, v42);
    swift_bridgeObjectRelease();
    id v44 = v43;
    id v45 = objc_msgSend(v44, sel_UTF8String);
    if (v40) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39) {
      char v57 = 2;
    }
    else {
      char v57 = 1;
    }
    if (!v45) {
      goto LABEL_94;
    }
    if (v35 >= v29[2]) {
      goto LABEL_87;
    }
    unint64_t v58 = v82[v35];
    if ((v58 & 0x8000000000000000) != 0 || HIDWORD(v58)) {
      goto LABEL_96;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      char v59 = v85;
    }
    else {
      char v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
    }
    unint64_t v61 = v59[2];
    unint64_t v60 = v59[3];
    if (v61 >= v60 >> 1) {
      char v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, v59);
    }
    uint64_t v59[2] = v61 + 1;
    long long v85 = v59;
    long long v62 = &v59[4 * v61];
    *((unsigned char *)v62 + 32) = v57;
    v62[5] = v45;
    v62[6] = 0;
    *((_DWORD *)v62 + 14) = v58;
LABEL_41:
    ++v35;

    v36 += 40;
    char v29 = v84;
    if (v83 == v35) {
      goto LABEL_36;
    }
  }
  if (v35 >= *(void *)(*(void *)v33 + 16)) {
    goto LABEL_85;
  }
  uint64_t v46 = (uint64_t *)(*(void *)v33 + v36);
  uint64_t v47 = *v46;
  if (!*v46) {
    goto LABEL_92;
  }
  uint64_t v48 = *(v46 - 1);
  swift_bridgeObjectRetain();
  uint64_t v49 = (void *)MEMORY[0x22A688A50](v48, v47);
  swift_bridgeObjectRelease();
  id v50 = v49;
  id v51 = objc_msgSend(v50, sel_UTF8String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v39) {
    char v52 = 2;
  }
  else {
    char v52 = 1;
  }
  if (!v45) {
    goto LABEL_93;
  }
  if (v35 >= v29[2]) {
    goto LABEL_86;
  }
  unint64_t v53 = v82[v35];
  if ((v53 & 0x8000000000000000) == 0 && !HIDWORD(v53))
  {
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v54 = v85;
    }
    else {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
    }
    unint64_t v56 = v54[2];
    unint64_t v55 = v54[3];
    if (v56 >= v55 >> 1) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v54);
    }
    v54[2] = v56 + 1;
    long long v85 = v54;
    char v37 = &v54[4 * v56];
    *((unsigned char *)v37 + 32) = v52;
    v37[5] = v45;
    v37[6] = v51;
    *((_DWORD *)v37 + 14) = v53;

    uint64_t v33 = v81;
    goto LABEL_41;
  }
LABEL_96:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.generate()()
{
  uint64_t result = _Proto_BlendShapeWeightsMappingDefinition_v1.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1();
    swift_allocError();
    *uint64_t v1 = 0xD00000000000002ELL;
    v1[1] = 0x8000000228360330;
    return swift_willThrow();
  }
  return result;
}

uint64_t _Proto_BlendShapeWeightsMappingDefinition_v1.weightsAndMeshesGroups.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.init(mappingResource:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = MEMORY[0x263F8EE78];
  a2[1] = result;
  return result;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weightNames.getter()
{
  uint64_t result = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (result < 0)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v1 = result;
  if (result)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (void *)MEMORY[0x263F8EE78];
    uint64_t v15 = result;
    while (v2 != v1)
    {
      uint64_t result = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (result < 0) {
        goto LABEL_24;
      }
      uint64_t v4 = result;
      if (result)
      {
        uint64_t v5 = 0;
        uint64_t v6 = (void *)MEMORY[0x263F8EE78];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          uint64_t v7 = String.init(cString:)();
          uint64_t v9 = v8;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
          }
          unint64_t v11 = v6[2];
          unint64_t v10 = v6[3];
          if (v11 >= v10 >> 1) {
            uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v6);
          }
          ++v5;
          void v6[2] = v11 + 1;
          unint64_t v12 = &v6[2 * v11];
          id v12[4] = v7;
          void v12[5] = v9;
        }
        while (v4 != v5);
      }
      else
      {
        uint64_t v6 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        uint64_t v3 = (void *)result;
      }
      uint64_t v1 = v15;
      unint64_t v14 = v3[2];
      unint64_t v13 = v3[3];
      if (v14 >= v13 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v3);
        uint64_t v3 = (void *)result;
      }
      ++v2;
      v3[2] = v14 + 1;
      v3[v14 + 4] = v6;
      if (v2 == v15) {
        return (uint64_t)v3;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weights.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.weights.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*_Proto_BlendShapeWeightsComponent_v1.weights.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return AnimationGroup.group.modify;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.mappingResource.getter()
{
  return swift_retain();
}

uint64_t static _Proto_BlendShapeWeightsComponent_v1.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  uint64_t BlendShapeWeightsDefinition = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (!BlendShapeWeightsDefinition) {
    goto LABEL_27;
  }
  uint64_t v3 = BlendShapeWeightsDefinition;
  type metadata accessor for _Proto_BlendShapeWeightsMappingResource_v1();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  uint64_t BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v6 = BlendShapeWeightsCount;
  if (BlendShapeWeightsCount)
  {
    uint64_t v20 = v4;
    uint64_t v7 = 0;
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
    while (v7 != v6)
    {
      uint64_t BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (BlendWeightCount < 0) {
        goto LABEL_25;
      }
      uint64_t v10 = BlendWeightCount;
      if (BlendWeightCount)
      {
        uint64_t v11 = 0;
        unint64_t v12 = (char *)MEMORY[0x263F8EE78];
        do
        {
          REBlendShapeWeightsComponentGetBlendWeight();
          int v14 = v13;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
          }
          unint64_t v16 = *((void *)v12 + 2);
          unint64_t v15 = *((void *)v12 + 3);
          if (v16 >= v15 >> 1) {
            unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v12);
          }
          ++v11;
          *((void *)v12 + 2) = v16 + 1;
          *(_DWORD *)&v12[4 * v16 + 32] = v14;
        }
        while (v10 != v11);
      }
      else
      {
        unint64_t v12 = (char *)MEMORY[0x263F8EE78];
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v8);
      }
      ++v7;
      void v8[2] = v18 + 1;
      v8[v18 + 4] = v12;
      if (v7 == v6)
      {
        uint64_t v4 = v20;
        uint64_t result = swift_release();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = swift_release();
  uint64_t v8 = (void *)MEMORY[0x263F8EE78];
LABEL_23:
  *a1 = v8;
  a1[1] = v4;
  return result;
}

uint64_t _Proto_BlendShapeWeightsComponent_v1.__toCore(_:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t result = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (result) {
    BOOL v4 = *(void *)(v1 + 16) == result;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    uint64_t result = REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  }
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = v2 + 32;
    while (v6 < *(void *)(v2 + 16))
    {
      uint64_t v8 = *(void *)(*(void *)(v7 + 8 * v6) + 16);
      if (v8)
      {
        unint64_t v9 = 0;
        while (v9 < *(void *)(*(void *)(v7 + 8 * v6) + 16))
        {
          unint64_t v10 = v9 + 1;
          uint64_t result = REBlendShapeWeightsComponentSetBlendWeight();
          unint64_t v9 = v10;
          if (v8 == v10) {
            goto LABEL_8;
          }
        }
        __break(1u);
        break;
      }
LABEL_8:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    return RENetworkMarkComponentDirty();
  }
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance _Proto_BlendShapeWeightsComponent_v1(_DWORD *a1@<X8>)
{
  *a1 = 37;
}

uint64_t BlendShapeWeightsComponent.init(weightsMapping:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_retain();
  uint64_t result = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (result < 0)
  {
LABEL_41:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  if (result)
  {
    uint64_t v30 = a1;
    unint64_t v31 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v32 = result;
    while (v6 != v5)
    {
      REBlendShapeWeightsDefinitionAssetGetBlendShapeName();
      uint64_t v9 = String.init(cString:)();
      uint64_t v34 = v10;
      uint64_t result = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      if (result < 0) {
        goto LABEL_39;
      }
      uint64_t v11 = result;
      uint64_t v33 = v7;
      if (result)
      {
        uint64_t v12 = 0;
        int v13 = (void *)MEMORY[0x263F8EE78];
        int v14 = (char *)MEMORY[0x263F8EE78];
        do
        {
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          uint64_t v15 = String.init(cString:)();
          uint64_t v17 = v16;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v19 = v13[2];
          unint64_t v18 = v13[3];
          if (v19 >= v18 >> 1) {
            int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v13);
          }
          v13[2] = v19 + 1;
          uint64_t v20 = &v13[2 * v19];
          v20[4] = v15;
          v20[5] = v17;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
          }
          unint64_t v22 = *((void *)v14 + 2);
          unint64_t v21 = *((void *)v14 + 3);
          if (v22 >= v21 >> 1) {
            int v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v14);
          }
          ++v12;
          *((void *)v14 + 2) = v22 + 1;
          *(_DWORD *)&v14[4 * v22 + 32] = 0;
        }
        while (v11 != v12);
      }
      else
      {
        int v13 = (void *)MEMORY[0x263F8EE78];
        int v14 = (char *)MEMORY[0x263F8EE78];
      }
      uint64_t v7 = v33;
      uint64_t v23 = v34;
      unint64_t v24 = v33[2];
      if (v24)
      {
        unint64_t v25 = 0;
        unint64_t v26 = v33 + 7;
        while (1)
        {
          uint64_t result = *(v26 - 3);
          if (result == v9 && *(v26 - 2) == v23) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v23 = v34;
          if (result) {
            break;
          }
          ++v25;
          v26 += 4;
          if (v24 == v25) {
            goto LABEL_29;
          }
        }
        if (v25 >= v24) {
          goto LABEL_40;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v32;
      }
      else
      {
LABEL_29:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24 + 1, 1, v33);
        }
        uint64_t v5 = v32;
        unint64_t v29 = v7[2];
        unint64_t v28 = v7[3];
        if (v29 >= v28 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v7);
        }
        float32x2_t v7[2] = v29 + 1;
        uint64_t v8 = &v7[4 * v29];
        void v8[4] = v9;
        v8[5] = v34;
        v8[6] = v14;
        v8[7] = v13;
      }
      ++v6;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v6 == v5)
      {
        a1 = v30;
        uint64_t result = swift_release();
        a2 = v31;
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t result = swift_release();
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
LABEL_37:
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t BlendShapeWeightsComponent.weightSet.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
  return swift_bridgeObjectRetain();
}

void BlendShapeWeightsComponent.weightSet.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  uint64_t v4 = *(void *)(v1 + 8);
  if (v3 == *(void *)(v4 + 16))
  {
    uint64_t v35 = v1;
    if (!v3)
    {
LABEL_44:
      swift_bridgeObjectRelease();
      *(void *)(v35 + 8) = v2;
      return;
    }
    uint64_t v5 = 0;
    uint64_t v6 = v2 + 32;
    uint64_t v7 = v4 + 32;
    uint64_t v36 = v4 + 32;
    while (1)
    {
      uint64_t v12 = (void *)(v6 + 32 * v5);
      int v13 = (void *)(v7 + 32 * v5);
      BOOL v14 = *v12 == *v13 && v12[1] == v13[1];
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v16 = v12[3];
      uint64_t v15 = v12 + 3;
      uint64_t v17 = *(void *)(v16 + 16);
      uint64_t v19 = v13[3];
      unint64_t v18 = v13 + 3;
      if (v17 != *(void *)(v19 + 16)) {
        goto LABEL_45;
      }
      uint64_t v20 = *(v15 - 1);
      uint64_t v21 = *(void *)(v20 + 16);
      uint64_t v22 = *(void *)(*(void *)(v7 + 32 * v5 + 16) + 16);
      if (v22)
      {
        if (v21 != v22 || v17 != v21) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v21) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v17 == 0;
        }
        if (!v24)
        {
LABEL_45:
          swift_bridgeObjectRelease();
          if (one-time initialization token for logger != -1) {
            swift_once();
          }
          uint64_t v33 = type metadata accessor for Logger();
          __swift_project_value_buffer(v33, (uint64_t)static BlendShapeLogger.logger);
          oslog = Logger.logObject.getter();
          os_log_type_t v9 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(oslog, v9))
          {
            uint64_t v10 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v10 = 0;
            uint64_t v11 = "BlendShapeWeightsSet.set() has invalid weight counts.";
            goto LABEL_40;
          }
          goto LABEL_41;
        }
      }
      uint64_t v25 = v4;
      if (v21)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        uint64_t v28 = v20 + 32;
        while (*(float *)(v28 + 4 * v27) >= 0.0)
        {
          if (v27 >= *(void *)(*v15 + 16))
          {
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          uint64_t v29 = *v18;
          if (v27 >= *(void *)(*v18 + 16)) {
            goto LABEL_54;
          }
          uint64_t v30 = *v15 + v26;
          BOOL v31 = *(void *)(v30 + 32) == *(void *)(v29 + v26 + 32)
             && *(void *)(v30 + 40) == *(void *)(v29 + v26 + 40);
          if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          ++v27;
          v26 += 16;
          if (v21 == v27) {
            goto LABEL_7;
          }
        }
        swift_bridgeObjectRelease();
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static BlendShapeLogger.logger);
        oslog = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          uint64_t v11 = "BlendShapeWeightsSet.set() has invalid weight data.";
          goto LABEL_40;
        }
        goto LABEL_41;
      }
LABEL_7:
      ++v5;
      uint64_t v4 = v25;
      uint64_t v7 = v36;
      uint64_t v6 = v2 + 32;
      if (v5 == v3) {
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static BlendShapeLogger.logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v11 = "BlendShapeWeightsSet.set() has invalid weight names.";
      goto LABEL_40;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for logger != -1) {
LABEL_55:
    }
      swift_once();
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static BlendShapeLogger.logger);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      uint64_t v11 = "BlendShapeWeightsSet.set() has invalid number of weight sets.";
LABEL_40:
      _os_log_impl(&dword_227DD2000, oslog, v9, v11, v10, 2u);
      MEMORY[0x22A696500](v10, -1, -1);
    }
  }
LABEL_41:
}

void (*BlendShapeWeightsComponent.weightSet.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return BlendShapeWeightsComponent.weightSet.modify;
}

void BlendShapeWeightsComponent.weightSet.modify(uint64_t *a1, char a2)
{
  if (a2)
  {
    uint64_t v2 = *a1;
    swift_bridgeObjectRetain();
    BlendShapeWeightsComponent.weightSet.setter(&v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *a1;
    BlendShapeWeightsComponent.weightSet.setter(&v2);
  }
}

uint64_t static BlendShapeWeightsComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t BlendShapeWeightsDefinition = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (!BlendShapeWeightsDefinition) {
    goto LABEL_42;
  }
  uint64_t v3 = BlendShapeWeightsDefinition;
  type metadata accessor for BlendShapeWeightsMapping();
  *(void *)(swift_allocObject() + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  uint64_t v4 = swift_retain();
  BlendShapeWeightsComponent.init(weightsMapping:)(v4, &v42);
  uint64_t BlendShapeWeightsCount = REBlendShapeWeightsDefinitionAssetGetBlendShapeWeightsCount();
  if (BlendShapeWeightsCount < 0)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v36 = a1;
  if (BlendShapeWeightsCount)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    uint64_t v37 = BlendShapeWeightsCount;
    while (v6 != BlendShapeWeightsCount)
    {
      uint64_t BlendWeightCount = REBlendShapeWeightsDefinitionAssetGetBlendWeightCount();
      REBlendShapeWeightsDefinitionAssetGetBlendShapeName();
      uint64_t v10 = String.init(cString:)();
      if (BlendWeightCount < 0) {
        goto LABEL_39;
      }
      uint64_t v39 = v10;
      uint64_t v40 = v11;
      uint64_t v38 = v7;
      if (BlendWeightCount)
      {
        uint64_t v12 = 0;
        int v13 = (void *)MEMORY[0x263F8EE78];
        BOOL v14 = (char *)MEMORY[0x263F8EE78];
        do
        {
          REBlendShapeWeightsComponentGetBlendWeight();
          int v16 = v15;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
          }
          unint64_t v18 = *((void *)v14 + 2);
          unint64_t v17 = *((void *)v14 + 3);
          if (v18 >= v17 >> 1) {
            BOOL v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, v14);
          }
          *((void *)v14 + 2) = v18 + 1;
          *(_DWORD *)&v14[4 * v18 + 32] = v16;
          uint64_t v19 = v3;
          REBlendShapeWeightsDefinitionAssetGetBlendWeightName();
          uint64_t v20 = String.init(cString:)();
          uint64_t v22 = v21;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          }
          unint64_t v24 = v13[2];
          unint64_t v23 = v13[3];
          if (v24 >= v23 >> 1) {
            int v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v13);
          }
          ++v12;
          v13[2] = v24 + 1;
          uint64_t v25 = &v13[2 * v24];
          void v25[4] = v20;
          v25[5] = v22;
          uint64_t v3 = v19;
        }
        while (BlendWeightCount != v12);
      }
      else
      {
        int v13 = (void *)MEMORY[0x263F8EE78];
        BOOL v14 = (char *)MEMORY[0x263F8EE78];
      }
      uint64_t v7 = v38;
      uint64_t v26 = v39;
      unint64_t v27 = v38[2];
      uint64_t v28 = v40;
      if (v27)
      {
        unint64_t v29 = 0;
        uint64_t v30 = v38 + 7;
        while (*(v30 - 3) != v26 || *(v30 - 2) != v28)
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v26 = v39;
          uint64_t v28 = v40;
          if (v32) {
            break;
          }
          ++v29;
          v30 += 4;
          if (v27 == v29) {
            goto LABEL_30;
          }
        }
        if (v29 >= v27) {
          goto LABEL_40;
        }
      }
      else
      {
LABEL_30:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27 + 1, 1, v38);
        }
        unint64_t v34 = v7[2];
        unint64_t v33 = v7[3];
        if (v34 >= v33 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v34 + 1, 1, v7);
        }
        float32x2_t v7[2] = v34 + 1;
        uint64_t v8 = &v7[4 * v34];
        void v8[4] = v39;
        v8[5] = v40;
        v8[6] = v14;
        v8[7] = v13;
      }
      ++v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t BlendShapeWeightsCount = v37;
      if (v6 == v37) {
        goto LABEL_37;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
LABEL_37:
  uint64_t v41 = v7;
  BlendShapeWeightsComponent.weightSet.setter((uint64_t *)&v41);
  uint64_t result = swift_release();
  *uint64_t v36 = v42;
  return result;
}

uint64_t BlendShapeWeightsComponent.__toCore(_:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t result = REBlendShapeWeightsComponentGetBlendShapeWeightsDefinition();
  if (result) {
    BOOL v4 = *(void *)(v2 + 16) == result;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4) {
    uint64_t result = REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  }
  uint64_t v5 = *(void *)(v1 + 16);
  if (v5)
  {
    unint64_t v6 = 0;
    while (v6 < *(void *)(v1 + 16))
    {
      uint64_t v7 = v1 + 32 + 32 * v6;
      uint64_t v9 = *(void *)(v7 + 16);
      uint64_t v8 = v7 + 16;
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        unint64_t v11 = 0;
        while (v11 < *(void *)(*(void *)v8 + 16))
        {
          unint64_t v12 = v11 + 1;
          uint64_t result = REBlendShapeWeightsComponentSetBlendWeight();
          unint64_t v11 = v12;
          if (v10 == v12) {
            goto LABEL_8;
          }
        }
        __break(1u);
        break;
      }
LABEL_8:
      if (++v6 == v5) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    return RENetworkMarkComponentDirty();
  }
  return result;
}

void static BlendShapeWeightsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 37;
}

unint64_t lazy protocol witness table accessor for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1()
{
  unint64_t result = lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1;
  if (!lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Proto_BlendShapeWeightsMappingError_v1 and conformance _Proto_BlendShapeWeightsMappingError_v1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator;
  if (!lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeightsSet.Iterator and conformance BlendShapeWeightsSet.Iterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet;
  if (!lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeightsSet and conformance BlendShapeWeightsSet);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BlendShapeWeightsSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeightsSet> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeightsSet>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BlendShapeWeightsSet()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeightsSet> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeightsSet>);
}

uint64_t sub_2282CEE94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_2282CEEA0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v3;
  return result;
}

double sub_2282CEEE4@<D0>(_OWORD *a1@<X8>)
{
  BlendShapeWeightsSet.default.getter(v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t sub_2282CEF34()
{
  return 0;
}

uint64_t sub_2282CEF44@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_2282CEF50(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_2282CEF94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

void sub_2282CEFA0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  BlendShapeWeightsComponent.weightSet.setter(&v1);
}

ValueMetadata *type metadata accessor for BlendShapeWeightsData()
{
  return &type metadata for BlendShapeWeightsData;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsSet()
{
  return &type metadata for BlendShapeWeightsSet;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsSet.Iterator()
{
  return &type metadata for BlendShapeWeightsSet.Iterator;
}

void *assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(void *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, MEMORY[0x263F8EEA0], MEMORY[0x263F8EEA0]);
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsAndMeshesGroup_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsAndMeshesGroup_v1;
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsMappingDefinition_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsMappingDefinition_v1;
}

uint64_t destroy for _Proto_BlendShapeWeightsComponent_v1()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for _Proto_BlendShapeWeightsComponent_v1(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _Proto_BlendShapeWeightsComponent_v1(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for _Proto_BlendShapeWeightsComponent_v1(void *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
}

ValueMetadata *type metadata accessor for _Proto_BlendShapeWeightsComponent_v1()
{
  return &type metadata for _Proto_BlendShapeWeightsComponent_v1;
}

void *assignWithTake for BlendShapeWeightsComponent(void *a1, _OWORD *a2, uint64_t a3)
{
  return assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(a1, a2, a3, MEMORY[0x263F8EED8], MEMORY[0x263F8EEA0]);
}

void *assignWithTake for _Proto_BlendShapeWeightsAndMeshesGroup_v1(void *a1, _OWORD *a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t))
{
  a4(*a1);
  uint64_t v8 = a1[1];
  *(_OWORD *)a1 = *a2;
  a5(v8);
  return a1;
}

ValueMetadata *type metadata accessor for BlendShapeWeightsComponent()
{
  return &type metadata for BlendShapeWeightsComponent;
}

float SpinAction.revolutions.getter()
{
  return *(float *)v0;
}

void SpinAction.revolutions.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SpinAction.revolutions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpinAction.localAxis.getter()
{
  return v0[1];
}

void SpinAction.localAxis.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*SpinAction.localAxis.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpinAction.timingFunction.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v2 = v1[3].n128_u32[0];
  unsigned __int8 v3 = v1[3].n128_u8[4];
  __n128 result = v1[2];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 SpinAction.timingFunction.setter(__n128 *a1)
{
  unsigned __int32 v2 = a1[1].n128_u32[0];
  unsigned __int8 v3 = a1[1].n128_u8[4];
  __n128 result = *a1;
  v1[2] = *a1;
  v1[3].n128_u32[0] = v2;
  v1[3].n128_u8[4] = v3;
  return result;
}

uint64_t (*SpinAction.timingFunction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SpinAction.isAdditive.getter()
{
  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t SpinAction.isAdditive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 53) = result;
  return result;
}

uint64_t (*SpinAction.isAdditive.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *SpinAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

__n128 SpinAction.init(revolutions:localAxis:timingFunction:isAdditive:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, float32x4_t a5@<Q1>)
{
  unsigned __int32 v5 = a1[1].n128_u32[0];
  unsigned __int8 v6 = a1[1].n128_u8[4];
  int32x4_t v7 = (int32x4_t)vmulq_f32(a5, a5);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  *(float *)a3 = a4;
  __n128 result = *a1;
  *(float32x4_t *)(a3 + 16) = vmulq_n_f32(a5, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  *(__n128 *)(a3 + 32) = result;
  *(_DWORD *)(a3 + 48) = v5;
  *(unsigned char *)(a3 + 52) = v6;
  *(unsigned char *)(a3 + 53) = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpinAction.CodingKeys()
{
  uint64_t result = 0x6974756C6F766572;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6978416C61636F6CLL;
      break;
    case 2:
      uint64_t result = 0x7546676E696D6974;
      break;
    case 3:
      uint64_t result = 0x6974696464417369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpinAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SpinAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpinAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpinAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t SpinAction.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpinAction.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  int32x4_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = *(_OWORD *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v16 = *(void *)(v1 + 40);
  uint64_t v17 = v8;
  LODWORD(v8) = *(_DWORD *)(v1 + 48);
  int v14 = *(unsigned __int8 *)(v1 + 52);
  int v15 = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    int v9 = v15;
    uint64_t v11 = v16;
    uint64_t v10 = v17;
    long long v19 = v18;
    char v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v19 = v10;
    *((void *)&v19 + 1) = v11;
    int v20 = v9;
    char v21 = v14;
    char v22 = 2;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v19) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys);
  }
  return result;
}

uint64_t SpinAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpinAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpinAction.CodingKeys and conformance SpinAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v18) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    int v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    char v21 = 1;
    lazy protocol witness table accessor for type SIMD3<Float> and conformance SIMD3<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v17 = v18;
    char v21 = 2;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v12 = v18;
    int v15 = v20;
    int v16 = v19;
    LOBYTE(v18) = 3;
    char v13 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v12;
    *(_DWORD *)(a2 + 48) = v16;
    *(unsigned char *)(a2 + 52) = v15;
    *(unsigned char *)(a2 + 53) = v13 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance SpinAction()
{
  return *(unsigned __int8 *)(v0 + 53);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpinAction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SpinAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpinAction(void *a1)
{
  return SpinAction.encode(to:)(a1);
}

__n128 __swift_memcpy54_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 46) = *(void *)(a2 + 46);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpinAction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 54)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 53);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpinAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 54) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 54) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 53) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpinAction()
{
  return &type metadata for SpinAction;
}

unsigned char *storeEnumTagSinglePayload for SpinAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282CFD68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SpinAction.CodingKeys()
{
  return &unk_26DCBD7B8;
}

uint64_t SpinActionHandler.actionStarted(event:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  long long v3 = a1[13];
  v31[12] = a1[12];
  v31[13] = v3;
  long long v4 = a1[15];
  v31[14] = a1[14];
  v31[15] = v4;
  long long v5 = a1[9];
  v31[8] = a1[8];
  v31[9] = v5;
  long long v6 = a1[11];
  v31[10] = a1[10];
  v31[11] = v6;
  long long v7 = a1[5];
  uint64_t v31[4] = a1[4];
  v31[5] = v7;
  long long v8 = a1[7];
  v31[6] = a1[6];
  v31[7] = v8;
  long long v9 = a1[1];
  v31[0] = *a1;
  v31[1] = v9;
  long long v10 = a1[3];
  void v31[2] = a1[2];
  v31[3] = v10;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 1;
  uint64_t v11 = outlined retain of ActionEvent<SpinAction>((uint64_t)v31);
  specialized ActionEvent.animationState.getter(&v24, v11);
  outlined release of ActionEvent<SpinAction>((uint64_t)v31);
  if (!v26) {
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v24);
  }
  outlined init with take of BindableDataInternal(&v24, (uint64_t)v28);
  uint64_t v12 = v29;
  uint64_t v13 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  v23[0] = *(void *)(v13 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  v23[1] = v23;
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  long long v18 = (char *)v23 - v17;
  ((void (*)(uint64_t, uint64_t))v23[0])(v12, v13);
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  else
  {
    v27[3] = AssociatedTypeWitness;
    uint64_t v27[4] = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
    (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, AssociatedTypeWitness);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
    if (swift_dynamicCast())
    {
      uint64_t v22 = v26;
      *(void *)uint64_t v2 = v25;
      *(void *)(v2 + 8) = v22;
      *(unsigned char *)(v2 + 16) = 0;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

float32x4_t *SpinActionHandler.actionUpdated(event:)(float32x4_t *result)
{
  float32x4_t v2 = result[13];
  v53[3] = result[12];
  v53[4] = v2;
  float32x4_t v3 = result[15];
  v53[5] = result[14];
  v53[6] = v3;
  float32x4_t v4 = result[9];
  float32x4_t v52 = result[8];
  v53[0] = v4;
  float32x4_t v5 = result[11];
  v53[1] = result[10];
  v53[2] = v5;
  float32x4_t v6 = result[5];
  *(float32x4_t *)&v48[16] = result[4];
  float32x4_t v49 = v6;
  float32x4_t v7 = result[7];
  float32x4_t v50 = result[6];
  float32x4_t v51 = v7;
  float32x4_t v8 = result[1];
  float32x4_t v45 = *result;
  float32x4_t v46 = v8;
  float32x4_t v9 = result[3];
  float32x4_t v47 = result[2];
  *(float32x4_t *)uint64_t v48 = v9;
  if ((v1[1].i8[0] & 1) == 0)
  {
    float32x4_t v34 = *v1;
    uint64_t v10 = outlined retain of ActionEvent<SpinAction>((uint64_t)&v45);
    specialized ActionEvent.animationState.getter(v36, v10);
    outlined release of ActionEvent<SpinAction>((uint64_t)&v45);
    if (*(void *)&v36[24])
    {
      outlined init with take of BindableDataInternal((long long *)v36, (uint64_t)v42);
      uint64_t v11 = v43;
      uint64_t v12 = v44;
      __swift_project_boxed_opaque_existential_1(v42, v43);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v15 = type metadata accessor for Optional();
      v35.i64[0] = (uint64_t)&v32;
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v15);
      long long v18 = (char *)&v32 - v17;
      v13(v11, v12);
      uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      }
      else
      {
        uint64_t v40 = AssociatedTypeWitness;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v38);
        (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, AssociatedTypeWitness);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
        if (swift_dynamicCast())
        {
          long long v33 = *(_OWORD *)v36;
          float32x4_t v35 = v37;
          outlined init with take of Double?((uint64_t)v53 + 8, (uint64_t)v54);
          outlined init with take of Double?((uint64_t)v54, (uint64_t)&v38);
          if (v39 != 1)
          {
            float v21 = v46.f32[0];
            float32x4_t v32 = v47;
            *(_OWORD *)uint64_t v36 = *(_OWORD *)v48;
            *(void *)&v36[13] = *(void *)&v48[13];
            char v22 = v48[21];
            float v23 = v38;
            if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
            {
              REEasingFunctionEvaluateEx();
              float v23 = v24;
            }
            swift_release();
            __float2 v25 = __sincosf_stret((float)((float)((float)(v21 * v23) + (float)(v21 * v23)) * 3.1416) * 0.5);
            float32x4_t v26 = vmulq_n_f32(v32, v25.__sinval);
            v26.i32[3] = LODWORD(v25.__cosval);
            if (v22)
            {
              float32x4_t v35 = v26;
              uint64_t v30 = v43;
              uint64_t v31 = v44;
              __swift_project_boxed_opaque_existential_1(v42, v43);
              if (one-time initialization token for identity != -1) {
                swift_once();
              }
              *(_OWORD *)uint64_t v36 = xmmword_22830EC80;
              *(float32x4_t *)&v36[16] = v35;
              float32x4_t v37 = 0uLL;
            }
            else
            {
              int32x4_t v27 = (int32x4_t)vnegq_f32(v26);
              int8x16_t v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v26, vtrn1q_s32((int32x4_t)v26, v27));
              float32x4_t v29 = (float32x4_t)vrev64q_s32((int32x4_t)v26);
              v29.i32[0] = v27.i32[1];
              v29.i32[3] = v27.i32[2];
              float32x4_t v34 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v26, v34, 3), v29, v34, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v27, 8uLL), *(float32x2_t *)v34.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v34.f32[0]));
              uint64_t v30 = v43;
              uint64_t v31 = v44;
              __swift_project_boxed_opaque_existential_1(v42, v43);
              *(_OWORD *)uint64_t v36 = v33;
              *(float32x4_t *)&v36[16] = v34;
              float32x4_t v37 = v35;
            }
            (*(void (**)(unsigned char *, ValueMetadata *, uint64_t, uint64_t))(v31 + 64))(v36, &type metadata for Transform, v30, v31);
          }
        }
      }
      return (float32x4_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    }
    else
    {
      return (float32x4_t *)outlined destroy of AnimationStateProtocol?((uint64_t)v36);
    }
  }
  return result;
}

uint64_t specialized SpinAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974756C6F766572 && a2 == 0xEB00000000736E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6978416C61636F6CLL && a2 == 0xE900000000000073 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7546676E696D6974 && a2 == 0xEE006E6F6974636ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t outlined retain of ActionEvent<SpinAction>(uint64_t a1)
{
  return a1;
}

uint64_t storeEnumTagSinglePayload for SpinActionHandler(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpinActionHandler()
{
  return &type metadata for SpinActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SpinActionHandler()
{
  return &protocol witness table for SpinAction;
}

uint64_t PixelCastHit.entity.getter()
{
  return swift_retain();
}

__n128 PixelCastHit.normal.getter()
{
  return v0[1];
}

__n128 PixelCastHit.position.getter()
{
  return v0[2];
}

uint64_t PixelCastHit.meshPart.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t PixelCastHit.instance.getter()
{
  return *(unsigned int *)(v0 + 56);
}

uint64_t PixelCastHit.primitive.getter()
{
  return *(unsigned int *)(v0 + 60);
}

uint64_t PixelCastHit.barycentric.getter()
{
  return *(void *)(v0 + 64);
}

unint64_t PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned __int32 a3@<W2>, unsigned __int32 a4@<W3>, unint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, __n128 *a8@<X8>, __n128 a9@<Q0>, __n128 a10@<Q1>)
{
  a8->n128_u64[0] = result;
  a8[1] = a9;
  a8[2] = a10;
  a8[3].n128_u64[0] = a2;
  a8[3].n128_u32[2] = a3;
  a8[3].n128_u32[3] = a4;
  a8[4].n128_u64[0] = a5;
  a8[4].n128_u64[1] = a6;
  a8[5].n128_u8[0] = a7 & 1;
  return result;
}

uint64_t static Scene.pixelCastRequest.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = static Scene.pixelCastRequest;
  uint64_t v3 = *(void *)algn_2681C79C8;
  long long v4 = xmmword_2681C79D0;
  uint64_t v5 = qword_2681C79E0;
  uint64_t v6 = unk_2681C79E8;
  uint64_t v7 = qword_2681C79F0;
  uint64_t v8 = unk_2681C79F8;
  uint64_t v9 = unk_2681C7A08;
  uint64_t v11 = qword_2681C7A00;
  uint64_t result = outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(static Scene.pixelCastRequest);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v9;
  return result;
}

uint64_t static Scene.pixelCastRequest.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = static Scene.pixelCastRequest;
  outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(a1, (uint64_t)&static Scene.pixelCastRequest);
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v2);
}

uint64_t (*static Scene.pixelCastRequest.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t static Scene.pixelCastArrayRequest.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = static Scene.pixelCastArrayRequest;
  uint64_t v3 = qword_2681C7A18;
  long long v4 = xmmword_2681C7A20;
  uint64_t v5 = qword_2681C7A30;
  uint64_t v6 = qword_2681C7A38;
  uint64_t v7 = qword_2681C7A40;
  uint64_t v8 = qword_2681C7A48;
  uint64_t v9 = qword_2681C7A58;
  uint64_t v11 = qword_2681C7A50;
  uint64_t result = outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(static Scene.pixelCastArrayRequest);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v9;
  return result;
}

uint64_t static Scene.pixelCastArrayRequest.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = static Scene.pixelCastArrayRequest;
  outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(a1, (uint64_t)&static Scene.pixelCastArrayRequest);
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v2);
}

uint64_t (*static Scene.pixelCastArrayRequest.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t Scene._proto_pixelCast_v1(origin:direction:length:relativeTo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7)
{
  *(float *)&a7 = vmuls_lane_f32(*(float *)&a6, a5, 2);
  *(float32x2_t *)v7.f32 = vadd_f32(*(float32x2_t *)a4.f32, vmul_n_f32(*(float32x2_t *)a5.f32, *(float *)&a6));
  *(float *)&a6 = a4.f32[2] + *(float *)&a7;
  v7.f32[2] = a4.f32[2] + *(float *)&a7;
  v7.i32[3] = 0;
  return Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(a1, a2, a3, a4, v7, a6, a7);
}

uint64_t Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5, double a6, double a7)
{
  float32x4_t v31 = a4;
  if (a1)
  {
    *(double *)v32.columns[0].i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(0, a1);
    simd_float4x4 v33 = __invert_f4(v32);
    float32x4_t v24 = (float32x4_t)v33.columns[1];
    float32x4_t v25 = (float32x4_t)v33.columns[0];
    float32x4_t v22 = (float32x4_t)v33.columns[3];
    float32x4_t v23 = (float32x4_t)v33.columns[2];
    *(float32x2_t *)v9.f32 = simd_float4x4.transform(position:)(v31, (float32x4_t)v33.columns[0], (float32x4_t)v33.columns[1], (float32x4_t)v33.columns[2], (float32x4_t)v33.columns[3]);
    float32x4_t v31 = v9;
    *(float32x2_t *)v10.f32 = simd_float4x4.transform(position:)(a5, v25, v24, v23, v22);
    float32x4_t v11 = vsubq_f32(v10, v31);
    int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
    unsigned __int32 v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
    float32x2_t v14 = vrsqrte_f32((float32x2_t)v13);
    float32x2_t v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
    float v26 = sqrtf(*(float *)&v12.i32[2] + (float)(*(float *)v12.i32
                                              + vmuls_lane_f32(v11.f32[1], *(float32x2_t *)v11.f32, 1)));
    float32x4_t v29 = vmulq_n_f32(v11, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, vmul_f32(v15, v15))).f32[0]);
  }
  else
  {
    float32x4_t v16 = vsubq_f32(a5, a4);
    float32x4_t v17 = vmulq_f32(v16, v16);
    *(float *)&a7 = sqrtf(v17.f32[2] + (float)(v17.f32[0] + vmuls_lane_f32(v16.f32[1], *(float32x2_t *)v16.f32, 1)));
    *(float32x2_t *)v18.f32 = vdiv_f32(*(float32x2_t *)v16.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0));
    v18.f32[2] = v16.f32[2] / *(float *)&a7;
    v18.i32[3] = 0;
    float v26 = *(float *)&a7;
    float32x4_t v29 = v18;
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  uint64_t v20 = LODWORD(v26);
  swift_beginAccess();
  uint64_t v27 = static Scene.pixelCastArrayRequest;
  static Scene.pixelCastArrayRequest = v30;
  qword_2681C7A18 = 0;
  xmmword_2681C7A20 = (__int128)v31;
  *(float32x4_t *)&qword_2681C7A30 = v29;
  qword_2681C7A40 = v20;
  qword_2681C7A48 = 0;
  qword_2681C7A50 = (uint64_t)partial apply for closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:);
  qword_2681C7A58 = v19;
  swift_retain();
  swift_retain();
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v27);
}

void closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(id a1, char a2, void (*a3)(uint64_t))
{
  if (a2)
  {
    id v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_getErrorValue();
    Error.localizedDescription.getter();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    a3(v5);
    outlined consume of Result<[PixelCastHit], Error>(a1, 0);
  }
}

uint64_t Scene.pixelCast(origin:direction:length:)(unint64_t a1, __n128 a2, float32x4_t a3, float a4)
{
  _OWORD v4[2] = type metadata accessor for MainActor();
  v4[3] = static MainActor.shared.getter();
  v6.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a2.n128_u64[0], vmul_n_f32(*(float32x2_t *)a3.f32, a4));
  v6.n128_u64[1] = COERCE_UNSIGNED_INT(a2.n128_f32[2] + vmuls_lane_f32(a4, a3, 2));
  __n128 v11 = v6;
  float32x4_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *float32x4_t v7 = v4;
  v7[1] = Scene.pixelCast(origin:direction:length:);
  return Scene.pixelCast(from:to:)(a1, a2, v11);
}

uint64_t Scene.pixelCast(origin:direction:length:)()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    long long v4 = static MeshResource.generate(from:);
  }
  else {
    long long v4 = Scene.pixelCast(origin:direction:length:);
  }
  return MEMORY[0x270FA2498](v4, v3, v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Scene.pixelCast(from:to:)(unint64_t a1, __n128 a2, __n128 a3)
{
  v4[4] = a2;
  void v4[5] = a3;
  v4[6].n128_u64[0] = a1;
  v4[6].n128_u64[1] = (unint64_t)v3;
  v4[7].n128_u64[0] = *v3;
  v4[7].n128_u64[1] = type metadata accessor for MainActor();
  v4[8].n128_u64[0] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8].n128_u64[1] = v6;
  v4[9].n128_u64[0] = v5;
  return MEMORY[0x270FA2498](Scene.pixelCast(from:to:), v6, v5);
}

uint64_t Scene.pixelCast(from:to:)(double a1, double a2, double a3)
{
  uint64_t v4 = *(void *)(v3 + 112);
  long long v5 = *(_OWORD *)(v3 + 64);
  float v6 = *(float *)(v3 + 88) - COERCE_FLOAT(*(void *)(v3 + 72));
  float32x2_t v7 = vsub_f32(*(float32x2_t *)(v3 + 80), *(float32x2_t *)&v5);
  *(float *)&a3 = sqrtf((float)(v6 * v6) + vaddv_f32(vmul_f32(v7, v7)));
  *(float32x2_t *)&long long v8 = vdiv_f32(v7, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  *((void *)&v8 + 1) = COERCE_UNSIGNED_INT(v6 / *(float *)&a3);
  uint64_t v9 = *(void *)(v3 + 104);
  *(_OWORD *)(v3 + 16) = v5;
  *(_OWORD *)(v3 + 32) = v8;
  *(_DWORD *)(v3 + 48) = LODWORD(a3);
  uint64_t v10 = static MainActor.shared.getter();
  *(void *)(v3 + 152) = v10;
  __n128 v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 160) = v11;
  void v11[2] = v9;
  _OWORD v11[3] = v3 + 16;
  void v11[4] = v4;
  int32x4_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 168) = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  *int32x4_t v12 = v3;
  v12[1] = Scene.pixelCast(from:to:);
  uint64_t v14 = *(void *)(v3 + 96);
  uint64_t v15 = MEMORY[0x263F8F500];
  return MEMORY[0x270FA2360](v14, v10, v15, 0xD000000000000013, 0x8000000228360470, partial apply for closure #1 in Scene.pixelCast(from:to:), v11, v13);
}

uint64_t Scene.pixelCast(from:to:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = *(void *)(v2 + 144);
    long long v5 = Scene.pixelCast(from:to:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = *(void *)(v2 + 144);
    long long v5 = Scene.pixelCast(from:to:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Scene.pixelCast(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  long long v16 = *(_OWORD *)a3;
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v8 = *(unsigned int *)(a3 + 32);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  swift_beginAccess();
  uint64_t v12 = unk_2681C79F8;
  uint64_t v13 = static Scene.pixelCastRequest;
  static Scene.pixelCastRequest = v18;
  *(void *)algn_2681C79C8 = 0;
  xmmword_2681C79D0 = v16;
  qword_2681C79E0 = v14;
  unk_2681C79E8 = v17;
  qword_2681C79F0 = v15;
  unk_2681C79F8 = 0;
  qword_2681C7A00 = (uint64_t)partial apply for closure #1 in closure #1 in Scene.pixelCast(from:to:);
  unk_2681C7A08 = v10;
  swift_retain();
  return outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(v13);
}

uint64_t closure #1 in closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(unsigned char *)(a1 + 81))
  {
    id v3 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

unint64_t Scene.PixelCastError.description.getter()
{
  return 0xD00000000000004ELL;
}

uint64_t static Scene.PixelCastError.== infix(_:_:)()
{
  return 1;
}

void Scene.PixelCastError.hash(into:)()
{
}

Swift::Int Scene.PixelCastError.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Scene.PixelCastError()
{
  return 0xD00000000000004ELL;
}

uint64_t specialized static PixelCastHit.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) != *(void *)(*(void *)a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 60);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  char v11 = *(unsigned char *)(a1 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v12 = *(_OWORD *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v16 = *(_DWORD *)(a2 + 60);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v17 = *(void *)(a2 + 72);
  char v19 = *(unsigned char *)(a2 + 80);
  while (1)
  {
    long long v37 = v5;
    float v21 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v38 = v13;
    float v22 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    BOOL v20 = v21 == v22;
    if (v3 == 2) {
      break;
    }
    while (1)
    {
      ++v3;
      if (v20) {
        break;
      }
      BOOL v20 = 0;
      uint64_t result = 0;
      if (v3 == 2) {
        return result;
      }
    }
  }
  if (v21 != v22) {
    return 0;
  }
  uint64_t v23 = 0;
  while (1)
  {
    long long v35 = v4;
    float v25 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    long long v36 = v12;
    float v26 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    BOOL v24 = v25 == v26;
    if (v23 == 2) {
      break;
    }
    while (1)
    {
      ++v23;
      if (v24) {
        break;
      }
      BOOL v24 = 0;
      uint64_t result = 0;
      if (v23 == 2) {
        return result;
      }
    }
  }
  uint64_t result = 0;
  if (v25 == v26 && v6 == v14 && v8 == v15 && v7 == v16)
  {
    if (v11)
    {
      if ((v19 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v19) {
        return 0;
      }
      uint64_t v27 = 0;
      *(void *)&long long v28 = v10;
      *((void *)&v28 + 1) = v9;
      *(void *)&long long v29 = v18;
      *((void *)&v29 + 1) = v17;
      while (1)
      {
        long long v33 = v28;
        float v31 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        long long v34 = v29;
        float v32 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
        BOOL v30 = v31 == v32;
        if (v27 == 2) {
          break;
        }
        while (1)
        {
          ++v27;
          if (v30) {
            break;
          }
          if (v27 == 2) {
            return 0;
          }
          BOOL v30 = 0;
        }
      }
      if (v31 != v32) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t outlined copy of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with take of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined consume of (scene: Scene, ray: RERay, completion: @escaping @callee_guaranteed (@in_guaranteed Result<PixelCastHit?, Error>) -> ())?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_2282D1C58()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void partial apply for closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(void *a1, char a2)
{
  closure #1 in Scene._proto_pixelCast_v1(from:to:relativeTo:completion:)(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16));
}

uint64_t partial apply for closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  return closure #1 in Scene.pixelCast(from:to:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError()
{
  unint64_t result = lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError;
  if (!lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError);
  }
  return result;
}

uint64_t initializeWithCopy for PixelCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PixelCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v4;
  return a1;
}

__n128 __swift_memcpy81_16(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PixelCastHit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

ValueMetadata *type metadata accessor for PixelCastHit()
{
  return &type metadata for PixelCastHit;
}

unsigned char *storeEnumTagSinglePayload for Scene.PixelCastError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x2282D1F08);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Scene.PixelCastError()
{
  return &type metadata for Scene.PixelCastError;
}

uint64_t sub_2282D1F40()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in Scene.pixelCast(from:to:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<PixelCastHit?, Error>);

  return closure #1 in closure #1 in Scene.pixelCast(from:to:)(a1);
}

void outlined consume of Result<[PixelCastHit], Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t static __ServiceLocator.shared.getter()
{
  specialized static __ServiceLocator.shared.getter();

  return swift_retain();
}

uint64_t static __ServiceLocator.__sharedEngine.getter()
{
  specialized static __ServiceLocator.__sharedEngine.getter();

  return swift_retain();
}

BOOL static __ServiceLocator.hasSharedServiceLocator.getter()
{
  return static __ServiceLocator.sharedEngine != 0;
}

uint64_t static __ServiceLocator.__sharedEngine.setter(void *a1)
{
  if (a1)
  {
    REEngineSetShared();
  }
  else if (static __ServiceLocator.createdSharedEngine == 1)
  {
    REEngineSetShared();
    static __ServiceLocator.createdSharedEngine = 0;
  }
  static __ServiceLocator.sharedEngine = a1;

  return swift_release();
}

uint64_t one-time initialization function for lock()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  static __ServiceLocator.lock = result;
  return result;
}

uint64_t (*static __ServiceLocator.__sharedEngine.modify(void **a1))(void **a1, char a2)
{
  *a1 = specialized static __ServiceLocator.__sharedEngine.getter();
  swift_retain();
  return static __ServiceLocator.__sharedEngine.modify;
}

uint64_t static __ServiceLocator.__sharedEngine.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    if (v2)
    {
      swift_retain();
      REEngineSetShared();
    }
    else if (static __ServiceLocator.createdSharedEngine)
    {
      REEngineSetShared();
      static __ServiceLocator.createdSharedEngine = 0;
    }
    static __ServiceLocator.sharedEngine = v2;
    swift_release();
  }
  else
  {
    if (v2)
    {
      REEngineSetShared();
    }
    else if (static __ServiceLocator.createdSharedEngine)
    {
      REEngineSetShared();
      static __ServiceLocator.createdSharedEngine = 0;
    }
    static __ServiceLocator.sharedEngine = v2;
  }

  return swift_release();
}

uint64_t static __ServiceLocator.__createSharedIfNeeded(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = (uint64_t)specialized static __ServiceLocator.__sharedEngine.getter();
  if (!result)
  {
    uint64_t v4 = v1;
    uint64_t v3 = specialized static __Engine.makeSharedEngine(_:)(&v4);
    REEngineSetShared();
    static __ServiceLocator.sharedEngine = v3;
    uint64_t result = swift_release();
    static __ServiceLocator.createdSharedEngine = 1;
  }
  return result;
}

uint64_t __ServiceLocator.__engineRef.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(swift_unownedRetainStrong() + 24);
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t key path setter for __ServiceLocator.engine : __ServiceLocator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  swift_retain();
  swift_unownedRelease();
  *(void *)(v3 + 24) = v2;
  swift_endAccess();
  swift_unownedRetain();
  return swift_release();
}

uint64_t __ServiceLocator.engine.getter()
{
  return swift_unownedRetainStrong();
}

uint64_t __ServiceLocator.engine.setter(uint64_t a1)
{
  swift_beginAccess();
  swift_unownedRelease();
  *(void *)(v1 + 24) = a1;
  swift_endAccess();
  swift_unownedRetain();
  return swift_release();
}

void (*__ServiceLocator.engine.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_unownedRetainStrong();
  return __ServiceLocator.engine.modify;
}

void __ServiceLocator.engine.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 32) + 24) = *(void *)(*(void *)a1 + 24);
  swift_unownedRetain();
  swift_unownedRelease();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t __ServiceLocator.eventService.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  a1[3] = type metadata accessor for REEventBus();
  a1[4] = &protocol witness table for REEventBus;
  *a1 = v3;

  return swift_retain();
}

uint64_t __ServiceLocator.usesMetal.getter()
{
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A692270](*(void *)(v0 + 16));
  if (result) {
    return REEngineUsesMetal();
  }
  return result;
}

uint64_t key path getter for __ServiceLocator.renderService : __ServiceLocator@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 40;
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v3, (uint64_t)&v5);
  if (v6) {
    return outlined init with take of BindableDataInternal(&v5, a2);
  }
  __break(1u);
  return result;
}

uint64_t key path setter for __ServiceLocator.renderService : __ServiceLocator(uint64_t a1, uint64_t *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v13);
  uint64_t v3 = *a2;
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
  __n128 v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *, __n128))(v10 + 16))(v9, v7);
  specialized __ServiceLocator.renderService.setter((uint64_t)v9, v3, v4, v5);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t __ServiceLocator.renderService.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = outlined init with copy of __RenderService?(v1 + 40, (uint64_t)&v4);
  if (v5) {
    return outlined init with take of BindableDataInternal(&v4, a1);
  }
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.renderService.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  __n128 v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v9 + 16))(v8, v6);
  specialized __ServiceLocator.renderService.setter((uint64_t)v8, v1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*__ServiceLocator.renderService.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x98uLL);
  *a1 = v3;
  *((void *)v3 + 18) = v1;
  swift_beginAccess();
  uint64_t result = (void (*)(uint64_t *, char))outlined init with copy of __RenderService?(v1 + 40, (uint64_t)(v3 + 40));
  if (*((void *)v3 + 8))
  {
    outlined init with take of BindableDataInternal((long long *)(v3 + 40), (uint64_t)v3);
    return __ServiceLocator.renderService.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __ServiceLocator.renderService.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v3 = v2[18];
    outlined init with copy of __REAssetService(*a1, (uint64_t)(v2 + 10));
    uint64_t v4 = v2[13];
    uint64_t v5 = v2[14];
    uint64_t v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)(v2 + 10), v4);
    __n128 v7 = MEMORY[0x270FA5388](v6);
    uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v10 + 16))(v9, v7);
    specialized __ServiceLocator.renderService.setter((uint64_t)v9, v3, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 10));
  }
  else
  {
    uint64_t v11 = v2[18];
    uint64_t v12 = v2[3];
    uint64_t v13 = v2[4];
    uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(*a1, v12);
    __n128 v15 = MEMORY[0x270FA5388](v14);
    uint64_t v17 = (char *)&v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v18 + 16))(v17, v15);
    specialized __ServiceLocator.renderService.setter((uint64_t)v17, v11, v12, v13);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  free(v2);
}

uint64_t key path setter for __ServiceLocator.sceneService : __ServiceLocator(uint64_t a1, void *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 80;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return swift_endAccess();
}

uint64_t __ServiceLocator.sceneService.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v1 + 80, a1);
}

uint64_t __ServiceLocator.sceneService.setter(long long *a1)
{
  uint64_t v3 = v1 + 80;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(a1, v3);
  return swift_endAccess();
}

uint64_t (*__ServiceLocator.sceneService.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __ServiceLocator.assetService : __ServiceLocator(uint64_t a1, void *a2)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v5);
  uint64_t v3 = *a2 + 120;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(v5, v3);
  return swift_endAccess();
}

uint64_t __ServiceLocator.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v1 + 120, a1);
}

uint64_t __ServiceLocator.assetService.setter(long long *a1)
{
  uint64_t v3 = v1 + 120;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of BindableDataInternal(a1, v3);
  return swift_endAccess();
}

uint64_t key path getter for __ServiceLocator.systemsArePausedInEditor : __ServiceLocator@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = REServiceLocatorGetECSService();
  if (result)
  {
    uint64_t result = REECSManagerSystemsArePausedInEditor();
    *a1 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for __ServiceLocator.systemsArePausedInEditor : __ServiceLocator()
{
  swift_beginAccess();
  uint64_t result = REServiceLocatorGetECSService();
  if (result) {
    return REECSManagerSetSystemsArePausedInEditor();
  }
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.systemsArePausedInEditor.getter()
{
  swift_beginAccess();
  uint64_t result = REServiceLocatorGetECSService();
  if (result) {
    return REECSManagerSystemsArePausedInEditor();
  }
  __break(1u);
  return result;
}

uint64_t __ServiceLocator.systemsArePausedInEditor.setter()
{
  swift_beginAccess();
  uint64_t result = REServiceLocatorGetECSService();
  if (result) {
    return REECSManagerSetSystemsArePausedInEditor();
  }
  __break(1u);
  return result;
}

void (*__ServiceLocator.systemsArePausedInEditor.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  uint64_t result = (void (*)(void **, char))REServiceLocatorGetECSService();
  if (result)
  {
    *((unsigned char *)v3 + 32) = REECSManagerSystemsArePausedInEditor();
    return __ServiceLocator.systemsArePausedInEditor.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void __ServiceLocator.systemsArePausedInEditor.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t ECSService = REServiceLocatorGetECSService();
  if (a2)
  {
    if (ECSService) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (!ECSService)
  {
    __break(1u);
    return;
  }
LABEL_5:
  REECSManagerSetSystemsArePausedInEditor();

  free(v3);
}

uint64_t __ServiceLocator.usingRealityIO.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 217);
}

uint64_t __ServiceLocator.usingRealityIO.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 217) = a1;
  return result;
}

uint64_t (*__ServiceLocator.usingRealityIO.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __ServiceLocator.init(engine:)(uint64_t a1)
{
  uint64_t v1 = specialized __ServiceLocator.init(engine:)(a1);
  swift_release();
  return v1;
}

uint64_t __ServiceLocator.deinit()
{
  if (*(unsigned char *)(v0 + 216) == 1)
  {
    *(unsigned char *)(v0 + 216) = 0;
    swift_beginAccess();
    REServiceLocatorSetSwiftObject();
    uint64_t v1 = *(void **)(v0 + 224);
    if (v1)
    {
      dlclose(v1);
      *(void *)(v0 + 224) = 0;
    }
  }
  swift_unownedRelease();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 40, &demangling cache variable for type metadata for __RenderService?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for USDImportService?);
  return v0;
}

uint64_t __ServiceLocator.__deallocating_deinit()
{
  __ServiceLocator.deinit();

  return swift_deallocClassInstance();
}

uint64_t __ServiceLocator.EngineStartStopScope.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  *(unsigned char *)(v0 + 24) = 1;
  specialized static __ServiceLocator.__sharedEngine.getter();
  swift_weakAssign();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x22A68E410](*(void *)(Strong + 24));
    swift_release();
  }
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.init()()
{
  swift_weakInit();
  *(unsigned char *)(v0 + 24) = 1;
  specialized static __ServiceLocator.__sharedEngine.getter();
  swift_weakAssign();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x22A68E410](*(void *)(Strong + 24));
    swift_release();
  }
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.deinit()
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    *(unsigned char *)(v0 + 24) = 0;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      MEMORY[0x22A68E420](*(void *)(Strong + 24));
      swift_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  swift_weakDestroy();
  return v0;
}

uint64_t __ServiceLocator.EngineStartStopScope.__deallocating_deinit()
{
  if (one-time initialization token for lock != -1) {
    swift_once();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    *(unsigned char *)(v0 + 24) = 0;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      MEMORY[0x22A68E420](*(void *)(Strong + 24));
      swift_release();
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

uint64_t specialized __ServiceLocator.renderService.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[3] = a3;
  void v10[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v9, a2 + 40, &demangling cache variable for type metadata for __RenderService?);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized __ServiceLocator.init(engine:)(uint64_t a1)
{
  uint64_t v2 = (void *)v1;
  *(_OWORD *)(v1 + 40) = 0u;
  uint64_t v4 = v1 + 40;
  *(_OWORD *)(v1 + 176) = 0u;
  uint64_t v5 = v1 + 176;
  *(void *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(void *)(v1 + 72) = 0;
  *(_OWORD *)(v1 + 192) = 0u;
  *(void *)(v1 + 208) = 0;
  *(_WORD *)(v1 + 216) = 1;
  *(void *)(v1 + 16) = REEngineGetServiceLocator();
  *(void *)(v1 + 24) = a1;
  uint64_t v6 = v1 + 16;
  swift_beginAccess();
  swift_unownedRetain();
  uint64_t ECSService = REServiceLocatorGetECSService();
  if (!ECSService)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v8 = ECSService;
  uint64_t v9 = MEMORY[0x22A692280](*(void *)v6);
  if (!v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v10 = v9;
  type metadata accessor for REEventBus();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8EE80];
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v12;
  RERetain();
  REEventBusSetSwiftObject();
  void v2[4] = v11;
  uint64_t v13 = type metadata accessor for SceneManager();
  swift_allocObject();
  uint64_t v14 = SceneManager.init(coreECSManager:)(v8);
  v2[13] = v13;
  v2[14] = &protocol witness table for SceneManager;
  v2[10] = v14;
  uint64_t v15 = MEMORY[0x22A692220](v2[2]);
  if (!v15)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v16 = v15;
  uint64_t v17 = type metadata accessor for __REAssetManager();
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(unsigned char *)(v18 + 80) = 2;
  *(_WORD *)(v18 + 96) = 514;
  *(void *)(v18 + 88) = v16;
  uint64_t v34 = v17;
  long long v35 = &protocol witness table for __REAssetManager;
  *(void *)&long long v33 = v18;
  outlined init with take of BindableDataInternal(&v33, (uint64_t)(v2 + 15));
  uint64_t v19 = MEMORY[0x22A692300](v2[2]);
  type metadata accessor for TimebaseService();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  v2[20] = v20;
  type metadata accessor for LoadManager();
  swift_allocObject();
  v2[21] = LoadManager.init()();
  if (REEngineConfigurationGetUseRealityIO())
  {
    uint64_t v21 = _typeByName(_:)();
    if (!v21)
    {
      float v22 = dlopen("/System/Library/PrivateFrameworks/RealityIO.framework/RealityIO", 1);
      if (!v22) {
        goto LABEL_19;
      }
      v2[28] = v22;
      uint64_t v21 = _typeByName(_:)();
      if (!v21)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    uint64_t v23 = swift_conformsToProtocol2();
    if (v23)
    {
      uint64_t v24 = v23;
      float v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      uint64_t v34 = v21;
      long long v35 = (_UNKNOWN **)v23;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
      v25(v21, v24);
      swift_beginAccess();
      outlined assign with take of Material?((uint64_t)&v33, v5, &demangling cache variable for type metadata for USDImportService?);
      swift_endAccess();
      swift_beginAccess();
      *(unsigned char *)(v6 + 201) = 1;
      goto LABEL_10;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_10:
  REServiceLocatorSetSwiftObject();
  uint64_t v26 = MEMORY[0x22A6922D0](v2[2]);
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = type metadata accessor for RERenderManager();
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v27;
    uint64_t v34 = v28;
    long long v35 = &protocol witness table for RERenderManager;
    *(void *)&long long v33 = v29;
    outlined init with copy of __REAssetService((uint64_t)&v33, (uint64_t)v32);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Material?((uint64_t)v32, v4, &demangling cache variable for type metadata for __RenderService?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    swift_release();
    return (uint64_t)v2;
  }
  REEngineConfigurationClone();
  int UseMetal = REEngineConfigurationGetUseMetal();
  RERelease();
  if (!UseMetal) {
    return (uint64_t)v2;
  }
LABEL_19:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static __ServiceLocator.__sharedEngine.getter()
{
  uint64_t Shared = REEngineGetShared();
  if (Shared)
  {
    uint64_t v1 = Shared;
    if (one-time initialization token for lock != -1) {
      swift_once();
    }
    os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
    if (!static __ServiceLocator.sharedEngine || *((void *)static __ServiceLocator.sharedEngine + 3) != v1)
    {
      type metadata accessor for __Engine();
      swift_allocObject();
      static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v1);
      swift_release();
      specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
      specialized static SceneManager.customComponentType(_:)(&type metadata for SceneOriginComponent, &protocol witness table for SceneOriginComponent);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
  }
  else
  {
    static __ServiceLocator.sharedEngine = 0;
    swift_release();
  }
  return static __ServiceLocator.sharedEngine;
}

uint64_t specialized static __ServiceLocator.shared.getter()
{
  uint64_t result = ((uint64_t (*)(void))specialized static __ServiceLocator.__sharedEngine.getter)();
  if (!result)
  {
    uint64_t Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v3 = REEngineConfigurationClone();
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v3;
      swift_release_n();
      uint64_t v2 = v4;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v5 = REEngineConfigurationClone();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v5;
      swift_release_n();
      uint64_t v2 = v6;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v7 = REEngineConfigurationClone();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v7;
      swift_release_n();
      uint64_t v2 = v8;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v9 = REEngineConfigurationClone();
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = v9;
      swift_release_n();
      uint64_t v2 = v10;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1) {
      swift_once();
    }
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      uint64_t v11 = REEngineConfigurationClone();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v11;
      swift_release_n();
      uint64_t v2 = v12;
    }
    uint64_t v13 = REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter(v13))
    {
      v16[0] = v2;
      uint64_t v14 = specialized static __Engine.makeSharedEngine(_:)(v16);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v14;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent);
    uint64_t result = specialized static SceneManager.customComponentType(_:)(&type metadata for SceneOriginComponent, &protocol witness table for SceneOriginComponent);
  }
  uint64_t v15 = static __ServiceLocator.sharedEngine;
  if (!static __ServiceLocator.sharedEngine)
  {
    __break(1u);
    goto LABEL_23;
  }
  swift_beginAccess();
  uint64_t result = v15[5];
  if (!result) {
LABEL_23:
  }
    __break(1u);
  return result;
}

uint64_t sub_2282D3CD4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return result;
}

uint64_t sub_2282D3D1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_2282D3D60@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  *a1 = result;
  return result;
}

uint64_t sub_2282D3DB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 80;
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v3, a2);
}

uint64_t sub_2282D3E0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + 120;
  swift_beginAccess();
  return outlined init with copy of __REAssetService(v3, a2);
}

uint64_t sub_2282D3E68@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 217);
  return result;
}

uint64_t sub_2282D3EB0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 217) = v2;
  return result;
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return self;
}

uint64_t method lookup function for __ServiceLocator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __ServiceLocator);
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __ServiceLocator.__engineRef.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of __ServiceLocator.engine.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __ServiceLocator.eventService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of __ServiceLocator.usesMetal.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of __ServiceLocator.__renderService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of __ServiceLocator.__sceneService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of __ServiceLocator.__assetService.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of __ServiceLocator.systemsArePausedInEditor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 528))();
}

uint64_t dispatch thunk of __ServiceLocator.usingRealityIO.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 536))();
}

uint64_t type metadata accessor for __ServiceLocator.EngineStartStopScope()
{
  return self;
}

uint64_t method lookup function for __ServiceLocator.EngineStartStopScope(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __ServiceLocator.EngineStartStopScope);
}

uint64_t dispatch thunk of __ServiceLocator.EngineStartStopScope.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

__n128 Transform.init(matrix:)()
{
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

__n128 Transform.init(scale:rotation:translation:)(__n128 result)
{
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

double static Transform.identity.getter()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static Transform.identity;
}

double Transform.init()()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&_PromotedConst_6;
}

double Transform.matrix.getter(float a1, float32x4_t a2, double a3)
{
  return specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2, a1);
}

__n128 key path setter for Transform.matrix : Transform(_OWORD *a1, _OWORD *a2)
{
  float32x4_t v6 = *(float32x4_t *)a1;
  int32x4_t v7 = *((int32x4_t *)a1 + 1);
  int8x16_t v8 = *((int8x16_t *)a1 + 2);
  __n128 v3 = *((__n128 *)a1 + 3);
  v3.n128_u32[3] = 0;
  __n128 v9 = v3;
  REDecomposeMatrix();
  *(__n64 *)&long long v4 = simd_float4x4.scale.getter(v6, v7, v8);
  *a2 = v4;
  __n128 result = v9;
  a2[1] = 0u;
  a2[2] = v9;
  return result;
}

__n128 Transform.matrix.setter(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  a4.n128_u32[3] = 0;
  __n128 v11 = a4;
  REDecomposeMatrix();
  *(__n64 *)&long long v6 = simd_float4x4.scale.getter(a1, a2, a3);
  *long long v4 = v6;
  __n128 result = v11;
  v4[1] = 0u;
  _OWORD v4[2] = v11;
  return result;
}

void Transform.scale.setter(__n128 a1)
{
  *__n128 v1 = a1;
}

uint64_t (*Transform.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Transform.rotation.getter(double a1, double a2)
{
  return a2;
}

void Transform.rotation.setter(__n128 a1)
{
  v1[1] = a1;
}

uint64_t (*Transform.rotation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Transform.translation.getter(double a1, double a2, double a3)
{
  return a3;
}

void Transform.translation.setter(__n128 a1)
{
  v1[2] = a1;
}

uint64_t (*Transform.translation.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void Transform.__coreSRT.getter(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
}

void (*Transform.matrix.modify(void *a1))(int32x4_t **a1)
{
  __n128 v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  *(double *)&long long v4 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v1 + 32), *(float32x4_t *)(v1 + 16), COERCE_FLOAT(*(_OWORD *)v1));
  *(_OWORD *)__n128 v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  *((_OWORD *)v3 + 3) = v7;
  return Transform.matrix.modify;
}

void Transform.matrix.modify(int32x4_t **a1)
{
  uint64_t v1 = (float32x4_t *)*a1;
  Transform.matrix.setter(*(float32x4_t *)*a1, (*a1)[1], (int8x16_t)(*a1)[2], (__n128)(*a1)[3]);

  free(v1);
}

double Transform.init(pitch:yaw:roll:)()
{
  REConvertIntrinsicEulersToMatrices3x3();
  v0.columns[0] = 0u;
  v0.columns[1] = 0u;
  v0.columns[2] = 0u;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    v0.columns[2] = 0u;
    v0.columns[1] = 0u;
    v0.columns[0] = 0u;
  }
  simd_quaternion(v0);
  return *(double *)&_PromotedConst_6;
}

uint64_t Transform.hash(into:)(uint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  specialized SIMD.hash(into:)(a1, a2);
  specialized SIMD.hash(into:)(a1, a3);

  return specialized SIMD.hash(into:)(a1, a4);
}

Swift::Int Transform.hashValue.getter(__n128 a1, __n128 a2, __n128 a3)
{
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v7, a1);
  specialized SIMD.hash(into:)(v7, a2);
  specialized SIMD.hash(into:)(v7, a3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = RETransformComponentGetLocalSRT();
  if (one-time initialization token for identity != -1)
  {
    long long v7 = v4;
    long long v8 = v3;
    long long v6 = v5;
    uint64_t result = swift_once();
    long long v5 = v6;
    long long v4 = v7;
    long long v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__n128 static Transform.__fromCore(_:)()
{
  RETransformComponentGetLocalSRT();
  if (one-time initialization token for identity != -1)
  {
    __n128 v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance Transform()
{
  RETransformComponentSetLocalSRT();

  return RENetworkMarkComponentDirty();
}

uint64_t Transform.__toCore(_:)()
{
  RETransformComponentSetLocalSRT();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance Transform(_DWORD *a1@<X8>)
{
  *a1 = 28;
}

void static Transform.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 28;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Transform()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Transform(uint64_t a1)
{
  __n128 v4 = v1[1];
  __n128 v5 = v1[2];
  specialized SIMD.hash(into:)(a1, *v1);
  specialized SIMD.hash(into:)(a1, v4);

  return specialized SIMD.hash(into:)(a1, v5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Transform()
{
  __n128 v2 = *v0;
  __n128 v3 = v0[1];
  __n128 v4 = v0[2];
  Hasher.init(_seed:)();
  specialized SIMD.hash(into:)(v5, v2);
  specialized SIMD.hash(into:)(v5, v3);
  specialized SIMD.hash(into:)(v5, v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Transform(__n128 *a1, __n128 *a2)
{
  return specialized static Transform.== infix(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

__n128 static Transform.__fromCore(_:)(__n128 *a1)
{
  __n128 result = *a1;
  if (one-time initialization token for identity != -1)
  {
    __n128 v2 = *a1;
    swift_once();
    return v2;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Transform.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Transform.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Transform.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Transform.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Transform.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Transform.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Transform.CodingKeys(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE800000000000000;
  uint64_t v5 = 0x6E6F697461746F72;
  if (v2 != 1)
  {
    uint64_t v5 = 0x74616C736E617274;
    unint64_t v4 = 0xEB000000006E6F69;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656C616373;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Transform.CodingKeys()
{
  uint64_t v1 = 0x6E6F697461746F72;
  if (*v0 != 1) {
    uint64_t v1 = 0x74616C736E617274;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C616373;
  }
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Transform.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized Transform.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Transform.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Transform.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Transform.init(from:)(void *a1)
{
  return specialized Transform.init(from:)(a1);
}

uint64_t Transform.encode(to:)(void *a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 v11 = a3;
  __n128 v12 = a4;
  __n128 v13 = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Transform.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  __n128 v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __n128 v14 = v13;
  char v15 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    __n128 v14 = v12;
    char v15 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __n128 v14 = v11;
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Transform@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = specialized Transform.init(from:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = v6;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Transform(void *a1)
{
  return Transform.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t specialized static Transform.== infix(_:_:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6 = 0;
  while (1)
  {
    __n128 v23 = a1;
    float v9 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    __n128 v24 = a4;
    float v10 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    BOOL v7 = v9 == v10;
    if (v6 == 2) {
      break;
    }
    while (1)
    {
      ++v6;
      if (v7) {
        break;
      }
      BOOL v7 = 0;
      uint64_t result = 0;
      if (v6 == 2) {
        return result;
      }
    }
  }
  if (v9 != v10) {
    return 0;
  }
  uint64_t v11 = 0;
  BOOL v12 = 1;
  while (!v12)
  {
    BOOL v12 = 0;
    uint64_t result = 0;
    if (v11 == 3) {
      return result;
    }
LABEL_10:
    ++v11;
  }
  __n128 v21 = a2;
  float v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
  __n128 v22 = a5;
  float v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
  BOOL v12 = v13 == v14;
  if (v11 != 3) {
    goto LABEL_10;
  }
  if (v13 == v14)
  {
    uint64_t v15 = 0;
    while (1)
    {
      __n128 v19 = a3;
      float v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
      __n128 v20 = a6;
      float v18 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
      BOOL v16 = v17 == v18;
      if (v15 == 2) {
        break;
      }
      while (1)
      {
        ++v15;
        if (v16) {
          break;
        }
        if (v15 == 2) {
          return 0;
        }
        BOOL v16 = 0;
      }
    }
    if (v17 == v18) {
      return 1;
    }
  }
  return 0;
}

uint64_t specialized Transform.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<Transform.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    char v10 = 0;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    void v8[2] = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    char v10 = 1;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v8[1] = v9;
    char v10 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v8[0] = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Transform.CodingKeys and conformance Transform.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys;
  if (!lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform.CodingKeys and conformance Transform.CodingKeys);
  }
  return result;
}

void sub_2282D57D8(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(a1 + 32), *(float32x4_t *)(a1 + 16), COERCE_FLOAT(*(_OWORD *)a1));
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

double sub_2282D580C(_OWORD *a1, _OWORD *a2)
{
  *(void *)&double result = key path setter for Transform.matrix : Transform(a1, a2).n128_u64[0];
  return result;
}

ValueMetadata *type metadata accessor for Transform()
{
  return &type metadata for Transform;
}

unsigned char *storeEnumTagSinglePayload for Transform.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282D5940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Transform.CodingKeys()
{
  return &type metadata for Transform.CodingKeys;
}

double specialized static Transform.* infix(_:_:)(float32x4_t a1, double a2, double a3, float32x4_t a4)
{
  if (one-time initialization token for identity != -1)
  {
    float32x4_t v5 = a1;
    float32x4_t v6 = a4;
    swift_once();
    a1 = v5;
    a4 = v6;
  }
  *(void *)&double result = vmulq_f32(a1, a4).u64[0];
  return result;
}

unint64_t specialized Transform.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of Transform.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t __VideoResource.currentViewingMode.getter@<X0>(char *a1@<X8>)
{
  unint64_t v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  unint64_t v4 = *(void *)(v1 + 24);
  uint64_t v22 = MEMORY[0x263F8EE78];
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](i, v4);
    }
    else {
      swift_retain();
    }
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v22;
LABEL_15:
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *v3;
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_38;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v11)
  {
    unint64_t v12 = v10 & 0xC000000000000001;
    uint64_t v13 = 4;
    __n128 v21 = a1;
    while (1)
    {
      uint64_t v14 = v13 - 4;
      if (!v12) {
        break;
      }
      MEMORY[0x22A689930](v13 - 4, v10);
      uint64_t v15 = v13 - 3;
      if (__OFADD__(v14, 1)) {
        goto LABEL_37;
      }
LABEL_26:
      if (!swift_weakLoadStrong()) {
        goto LABEL_19;
      }
      REVideoComponentGetComponentType();
      if (!REEntityGetComponentByClass() || !swift_weakLoadStrong())
      {
        swift_release();
LABEL_19:
        swift_release();
        goto LABEL_20;
      }
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        uint64_t v17 = SceneNullable;
        if ((id)RESceneGetSwiftObject())
        {
          swift_unknownObjectRelease();
        }
        else
        {
          type metadata accessor for Scene();
          uint64_t v18 = swift_allocObject();
          *(_OWORD *)(v18 + 24) = 0u;
          *(_OWORD *)(v18 + 40) = 0u;
          *(void *)(v18 + 56) = 0;
          swift_unknownObjectWeakInit();
          *(void *)(v18 + 104) = 0;
          *(_OWORD *)(v18 + 88) = 0u;
          *(_OWORD *)(v18 + 72) = 0u;
          swift_weakInit();
          *(_OWORD *)(v18 + 216) = 0u;
          *(_OWORD *)(v18 + 200) = 0u;
          *(_OWORD *)(v18 + 184) = 0u;
          *(_OWORD *)(v18 + 168) = 0u;
          *(_OWORD *)(v18 + 152) = 0u;
          *(_OWORD *)(v18 + 136) = 0u;
          *(_OWORD *)(v18 + 120) = 0u;
          RERetain();
          *(void *)(v18 + 16) = v17;
          RESceneSetSwiftObject();
          a1 = v21;
          swift_release();
        }
        unint64_t v12 = v10 & 0xC000000000000001;
        swift_release();
        CurrentViewingunsigned int Mode = REVideoComponentGetCurrentViewingMode();
        swift_release();
        swift_release();
        if (CurrentViewingMode == 1)
        {
          char v20 = 0;
          goto LABEL_40;
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        unint64_t v12 = v10 & 0xC000000000000001;
      }
LABEL_20:
      ++v13;
      if (v15 == v11) {
        goto LABEL_39;
      }
    }
    swift_retain();
    uint64_t v15 = v13 - 3;
    if (!__OFADD__(v14, 1)) {
      goto LABEL_26;
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_39:
  char v20 = 2;
LABEL_40:
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v20;
  return result;
}

uint64_t __VideoResource.currentImageSize.getter()
{
  uint64_t v1 = (unint64_t *)(v0 + 24);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 24);
  unint64_t v15 = MEMORY[0x263F8EE78];
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    *(double *)&uint64_t result = COERCE_DOUBLE(_CocoaArrayWrapper.endIndex.getter());
    uint64_t v3 = result;
    if (*(double *)&result != 0.0) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRetain());
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](i, v2);
    }
    else {
      swift_retain();
    }
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = v15;
LABEL_15:
  *uint64_t v1 = v7;
  swift_bridgeObjectRelease();
  unint64_t v8 = *v1;
  if (v8 >> 62) {
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v9)
  {
    unint64_t v10 = 0;
    while ((v8 & 0xC000000000000001) != 0)
    {
      MEMORY[0x22A689930](v10, v8);
      unint64_t v11 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_31;
      }
LABEL_26:
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentGetCurrentImageSize();
          if (v12 != 0.0 || v13 != 0.0)
          {
            float v14 = v12;
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            *(double *)&uint64_t result = v14;
            return result;
          }
        }
        swift_release();
      }
      swift_release();
      ++v10;
      if (v11 == v9) {
        goto LABEL_34;
      }
    }
    if (v10 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_32;
    }
    swift_retain();
    unint64_t v11 = v10 + 1;
    if (!__OFADD__(v10, 1)) {
      goto LABEL_26;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_34:
  swift_bridgeObjectRelease();
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t static __VideoResource.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!(id)REAssetGetSwiftObject())
  {
    type metadata accessor for __VideoResource();
    uint64_t v2 = swift_allocObject();
    uint64_t v3 = MEMORY[0x263F8EE78];
    *(void *)(v2 + 16) = v1;
    *(void *)(v2 + 24) = v3;
    RERetain();
    REAssetSetSwiftObject();
  }

  return swift_dynamicCastClassUnconditional();
}

uint64_t type metadata accessor for __VideoResource()
{
  return self;
}

uint64_t __VideoResource.Weak.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t __VideoResource.addEntity(_:)(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + 24);
  swift_beginAccess();
  unint64_t v4 = *(void *)(v1 + 24);
  uint64_t v15 = MEMORY[0x263F8EE78];
  if (v4 >> 62)
  {
LABEL_18:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      float v14 = v3;
      uint64_t v3 = 0;
      while (1)
      {
        if ((v4 & 0xC000000000000001) != 0)
        {
          MEMORY[0x22A689930](v3, v4);
          float32x4_t v6 = (char *)v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_15:
            __break(1u);
LABEL_16:
            uint64_t v3 = v14;
            uint64_t v11 = v15;
            goto LABEL_20;
          }
        }
        else
        {
          if ((unint64_t)v3 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_18;
          }
          swift_retain();
          float32x4_t v6 = (char *)v3 + 1;
          if (__OFADD__(v3, 1)) {
            goto LABEL_15;
          }
        }
        uint64_t Strong = swift_weakLoadStrong();
        swift_release();
        if (!Strong
          || (uint64_t v8 = swift_weakLoadStrong()) != 0
          && (uint64_t v9 = *(void *)(v8 + 16), v10 = *(void *)(a1 + 16), swift_release(), v9 == v10))
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        uint64_t v3 = (void *)((char *)v3 + 1);
        if (v6 == (char *)v5) {
          goto LABEL_16;
        }
      }
    }
  }
  uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  swift_release();
  *uint64_t v3 = v11;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __VideoResource.Weak<Entity>);
  swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  uint64_t v12 = swift_beginAccess();
  MEMORY[0x22A688E10](v12);
  if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t __VideoResource.deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __VideoResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t static __VideoResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3) {
    id v6 = a3;
  }
  else {
    id v6 = objc_msgSend(self, sel_mainBundle);
  }
  id v7 = a3;
  uint64_t v8 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  uint64_t v9 = v18;
  uint64_t v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
  swift_retain();
  v11(v9, v10);
  uint64_t v12 = (void *)MEMORY[0x22A688A50](a1, a2);
  uint64_t v13 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v13)
  {
    type metadata accessor for __VideoResource();
    a2 = swift_allocObject();
    uint64_t v14 = MEMORY[0x263F8EE78];
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v14;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type __VideoResource.LoadError and conformance __VideoResource.LoadError();
    swift_allocError();
    *uint64_t v15 = a1;
    v15[1] = a2;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return a2;
}

void __VideoResource.networkSendBlockingCategory.getter(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t __VideoResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

void protocol witness for RequestLoadable.networkSendBlockingCategory.getter in conformance __VideoResource(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

unint64_t lazy protocol witness table accessor for type __VideoResource.LoadError and conformance __VideoResource.LoadError()
{
  unint64_t result = lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError;
  if (!lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __VideoResource.LoadError and conformance __VideoResource.LoadError);
  }
  return result;
}

uint64_t method lookup function for __VideoResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __VideoResource);
}

uint64_t dispatch thunk of __VideoResource.coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t type metadata completion function for __VideoResource.Weak()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for __VideoResource.Weak()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for __VideoResource.LoadError()
{
  return &unk_26DCBDCB0;
}

uint64_t AudioResource.init(fromCore:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  id v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for OS_dispatch_queue();
  *id v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(uint64_t *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
  char v8 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    RERetain();
    *(void *)(v2 + 16) = a1;
    REAssetSetSwiftObject();
    if ((REAssetHandleIsLoaded() & 1) == 0) {
      REAssetHandleLoadNow();
    }
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioResource.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for audio != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.audio);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_227DD2000, v3, v4, "[API/RealityKit] AudioResource.deinit() for REAssetID: %llu", v5, 0xCu);
    MEMORY[0x22A696500](v5, -1, -1);
  }
  else
  {

    swift_release();
  }
  REAssetSetSwiftObject();
  RERelease();
  return v1;
}

uint64_t AudioResource.mixGroupName.getter()
{
  id v0 = (id)REAudioFileAssetGetMixGroupName();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t AudioResource.inputMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetInputMode();
  if (result >= 3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = 0x20001u >> (8 * result);
  }
  return result;
}

uint64_t AudioResource.inputMode.setter()
{
  return REAudioFileAssetSetInputMode();
}

uint64_t (*AudioResource.inputMode.modify(uint64_t a1))()
{
  *(void *)a1 = *(void *)(v1 + 16);
  Inputunsigned int Mode = REAudioFileAssetGetInputMode();
  if (InputMode >= 3)
  {
    uint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0x20001u >> (8 * InputMode);
    return AudioResource.inputMode.modify;
  }
  return result;
}

uint64_t AudioResource.inputMode.modify()
{
  return REAudioFileAssetSetInputMode();
}

void static AudioResource.supportedChannelLayoutTag(for:)(void *a1)
{
}

uint64_t static AudioResource.numberOfChannels(in:)(uint64_t result)
{
  if (result && result != 1668116578) {
    return (unsigned __int16)result;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AudioResource.__allocating_init(fromCore:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  AudioResource.init(fromCore:)(a1);
  return v2;
}

uint64_t AudioResource.__deallocating_deinit()
{
  AudioResource.deinit();

  return swift_deallocClassInstance();
}

void key path getter for AudioResource.mixGroupName : AudioResource(uint64_t *a1@<X8>)
{
  id v2 = (id)REAudioFileAssetGetMixGroupName();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  *a1 = v4;
  a1[1] = v6;
}

uint64_t key path setter for AudioResource.mixGroupName : AudioResource(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    String.utf8CString.getter();
  }
  REAudioFileAssetSetMixGroupName();

  return swift_unknownObjectRelease();
}

uint64_t key path getter for AudioResource.inputMode : AudioResource@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REAudioFileAssetGetInputMode();
  if (result >= 3)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = 0x20001u >> (8 * result);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource(uint64_t *a1, uint64_t *a2)
{
  return specialized static AudioResource.== infix(_:_:)(*a1, *a2);
}

uint64_t static AudioResource.defaultSupportedChannelLayoutTag(channelCount:)(int a1)
{
  if (a1 == 1) {
    return 6553601;
  }
  if (a1 == 2) {
    return 6619138;
  }
  lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
  swift_allocError();
  *id v2 = 0;
  return swift_willThrow();
}

uint64_t protocol witness for LoadableResource.init(fromCore:) in conformance AudioResource@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    return MEMORY[0x270FA2408](a5);
  }
  else
  {
    lazy protocol witness table accessor for type AudioResource.Error and conformance AudioResource.Error();
    uint64_t v6 = swift_allocError();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v7 = swift_allocError();
    *char v8 = v6;
    return MEMORY[0x270FA2410](a5, v7);
  }
}

uint64_t specialized static AudioResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16))
  {
LABEL_7:
    LOBYTE(v20) = 1;
    return v20 & 1;
  }
  type metadata accessor for AudioFileResource();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      if (*(void *)(v3 + 16) != *(void *)(v4 + 16))
      {
        swift_retain();
        swift_retain();
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v36);
        unsigned __int8 v5 = v36;
        unsigned __int8 v6 = v38;
        unsigned __int8 v7 = v39;
        uint64_t v8 = v40;
        long long v9 = v41;
        char v28 = v42;
        unsigned __int8 v29 = v37;
        uint64_t v27 = v43;
        char v26 = v44;
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v36);
        unsigned __int8 v10 = v36;
        unsigned __int8 v11 = v37;
        unsigned __int8 v12 = v38;
        unsigned __int8 v13 = v39;
        uint64_t v14 = v40;
        char v15 = v42;
        uint64_t v16 = v43;
        char v17 = v44;
        long long v25 = v41;
        unsigned __int8 v36 = v5;
        unsigned __int8 v37 = v29;
        unsigned __int8 v38 = v6;
        unsigned __int8 v39 = v7;
        uint64_t v40 = v8;
        long long v41 = v9;
        char v42 = v28;
        uint64_t v43 = v27;
        char v44 = v26;
        v30[0] = v10;
        v30[1] = v11;
        long long v30[2] = v12;
        v30[3] = v13;
        uint64_t v31 = v14;
        long long v32 = v25;
        char v33 = v15;
        uint64_t v34 = v16;
        char v35 = v17;
        char v18 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v36, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          LOBYTE(v20) = 0;
          goto LABEL_14;
        }
        char IsEqual = REAudioFileAssetIsEqual();
LABEL_11:
        LOBYTE(v20) = IsEqual;
LABEL_14:
        swift_release();
        swift_release();
        return v20 & 1;
      }
      goto LABEL_7;
    }
  }
  type metadata accessor for AudioFileGroupResource();
  uint64_t v20 = swift_dynamicCastClass();
  if (v20)
  {
    uint64_t v21 = swift_dynamicCastClass();
    if (v21)
    {
      uint64_t v22 = *(void *)(v20 + 24);
      uint64_t v23 = *(void *)(v21 + 24);
      swift_retain();
      swift_retain();
      char IsEqual = specialized static Array<A>.== infix(_:_:)(v22, v23);
      goto LABEL_11;
    }
    LOBYTE(v20) = 0;
  }
  return v20 & 1;
}

uint64_t specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[26] = a2;
  v3[27] = a3;
  v3[25] = a1;
  v3[28] = type metadata accessor for MainActor();
  v3[29] = static MainActor.shared.getter();
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter();
  v3[30] = v5;
  v3[31] = v4;
  return MEMORY[0x270FA2498](specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:), v5, v4);
}

uint64_t specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)()
{
  uint64_t v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 10));
  v0[32] = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(v0 + 10);
  uint64_t v2 = static MainActor.shared.getter();
  v0[33] = v2;
  if (v2)
  {
    swift_getObjectType();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
  }
  return MEMORY[0x270FA2498](specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:), v3, v5);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;

  uint64_t v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  uint64_t v4 = v0 + 10;
  uint64_t v5 = v0 + 16;
  uint64_t v7 = v0[26];
  unsigned __int8 v6 = v0[27];
  uint64_t v8 = v0[25];
  v1[2] = v2;
  v1[3] = specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  long long v9 = swift_continuation_init();
  unsigned __int8 v10 = (void *)swift_allocObject();
  _OWORD v10[2] = v8;
  v10[3] = v7;
  void v10[4] = v6;
  uint64_t v10[5] = v9;
  v1[14] = partial apply for closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  v1[15] = v10;
  v1[10] = MEMORY[0x263EF8330];
  v1[11] = 1107296256;
  v1[12] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v1[13] = &block_descriptor_49;
  unsigned __int8 v11 = _Block_copy(v4);
  unsigned __int8 v12 = _Block_copy(v11);
  unsigned __int8 v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  v1[20] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v1[21] = v13;
  v1[16] = MEMORY[0x263EF8330];
  v1[17] = 1107296256;
  v1[18] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v1[19] = &block_descriptor_14_2;
  uint64_t v14 = _Block_copy(v5);
  swift_bridgeObjectRetain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v14);
  _Block_release(v11);
  swift_release();
  REAssetLoadRequestAddAsset();
  return MEMORY[0x270FA23F0](v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 272) = v2;
  if (v2)
  {
    swift_willThrow();
    uint64_t v3 = *(void *)(v1 + 240);
    uint64_t v4 = *(void *)(v1 + 248);
    uint64_t v5 = specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v1 + 240);
    uint64_t v4 = *(void *)(v1 + 248);
    uint64_t v5 = specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:);
  }
  return MEMORY[0x270FA2498](v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void specialized static AudioResource.supportedChannelLayoutTag(for:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_channelLayout);
  if (v2)
  {
    uint64_t v3 = v2;
    if ((objc_msgSend(v2, sel_layoutTag) & 0xFFFF0000) == 0x930000)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *uint64_t v4 = 0;
LABEL_14:
      swift_willThrow();

      return;
    }
    unsigned int v6 = objc_msgSend(v3, sel_layoutTag);
    if (v6 != 1668116578 && v6 != 0)
    {
      if (objc_msgSend(a1, sel_channelCount) == (unsigned __int16)v6)
      {
        objc_msgSend(v3, sel_layoutTag);

        return;
      }
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *uint64_t v8 = 1;
      goto LABEL_14;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    unsigned int v5 = objc_msgSend(a1, sel_channelCount);
    if (v5 != 1 && v5 != 2)
    {
      lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError();
      swift_allocError();
      *long long v9 = 0;
      swift_willThrow();
    }
  }
}

uint64_t sub_2282D7B84()
{
  return REAudioFileAssetSetInputMode();
}

uint64_t type metadata accessor for AudioResource()
{
  return self;
}

uint64_t method lookup function for AudioResource(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AudioResource);
}

uint64_t dispatch thunk of AudioResource.__coreAsset.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of AudioResource.mixGroupName.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of AudioResource.inputMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of AudioResource.inputMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of AudioResource.inputMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t sub_2282D7C98()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(char a1)
{
  return closure #1 in closure #1 in static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t sub_2282D7CF4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void ModelDebugOptionsComponent.visualizationMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

RealityKit::ModelDebugOptionsComponent __swiftcall ModelDebugOptionsComponent.init(visualizationMode:)(RealityKit::ModelDebugOptionsComponent visualizationMode)
{
  *uint64_t v1 = *(unsigned char *)visualizationMode.visualizationMode;
  return visualizationMode;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional static ModelDebugOptionsComponent.__fromCore(_:)@<W0>(unsigned char *a1@<X8>)
{
  REDebugMeshComponentGetShaderDebugMode();
  v2._uint64_t countAndFlagsBits = String.init(cString:)();
  result.RealityKit::RotationOrder value = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v2).value;
  char v4 = v5;
  if (v5 == 21) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional __swiftcall ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(Swift::String rawValue)
{
  Swift::String v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.RealityKit::RotationOrder value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 3;
  switch(v3)
  {
    case 0:
      goto LABEL_5;
    case 1:
      char v5 = 1;
      goto LABEL_5;
    case 2:
      char v5 = 2;
LABEL_5:
      char v6 = v5;
      break;
    case 3:
      break;
    case 4:
      char v6 = 4;
      break;
    case 5:
      char v6 = 5;
      break;
    case 6:
      char v6 = 6;
      break;
    case 7:
      char v6 = 7;
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    default:
      char v6 = 21;
      break;
  }
  *Swift::String v2 = v6;
  return result;
}

uint64_t ModelDebugOptionsComponent.__toCore(_:)()
{
  REDebugMeshComponentReset();
  if (ModelDebugOptionsComponent.VisualizationMode.rawValue.getter() == 1701736270 && v0 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) == 0)
    {
      ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REDebugMeshComponentSetShaderDebugMode();
      swift_release();
    }
  }

  return RENetworkMarkComponentDirty();
}

unint64_t ModelDebugOptionsComponent.VisualizationMode.rawValue.getter()
{
  unint64_t result = 1701736270;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4E64657669726544;
      break;
    case 2:
      unint64_t result = 0x5464657669726544;
      break;
    case 3:
    case 4:
    case 8:
    case 0xD:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
    case 0x11:
      unint64_t result = 0x5655786574726556;
      break;
    case 6:
      unint64_t result = 0x6C6F436C616E6946;
      break;
    case 7:
      unint64_t result = 0x706C416C616E6946;
      break;
    case 9:
      unint64_t result = 0x4D64657669726544;
      break;
    case 0xA:
      unint64_t result = 0xD000000000000017;
      break;
    case 0xB:
      unint64_t result = 0x5364657669726544;
      break;
    case 0xC:
      unint64_t result = 0x4564657669726544;
      break;
    case 0xE:
      unint64_t result = 0xD000000000000019;
      break;
    case 0xF:
      unint64_t result = 0xD000000000000013;
      break;
    case 0x10:
      unint64_t result = 0xD000000000000014;
      break;
    case 0x12:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x13:
      unint64_t result = 0x676E697070696C43;
      break;
    case 0x14:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

void static ModelDebugOptionsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1006;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelDebugOptionsComponent.VisualizationMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelDebugOptionsComponent.VisualizationMode()
{
  return Hasher._finalize()();
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ModelDebugOptionsComponent.VisualizationMode(Swift::String *a1)
{
  return ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ModelDebugOptionsComponent.VisualizationMode@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode;
  if (!lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelDebugOptionsComponent.VisualizationMode and conformance ModelDebugOptionsComponent.VisualizationMode);
  }
  return result;
}

RealityKit::ModelDebugOptionsComponent::VisualizationMode_optional protocol witness for static Component.__fromCore(_:) in conformance ModelDebugOptionsComponent@<W0>(unsigned char *a1@<X8>)
{
  REDebugMeshComponentGetShaderDebugMode();
  v2._uint64_t countAndFlagsBits = String.init(cString:)();
  result.RealityKit::RotationOrder value = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v2).value;
  char v4 = v5;
  if (v5 == 21) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelDebugOptionsComponent(_DWORD *a1@<X8>)
{
  *a1 = 1006;
}

ValueMetadata *type metadata accessor for ModelDebugOptionsComponent()
{
  return &type metadata for ModelDebugOptionsComponent;
}

uint64_t getEnumTagSinglePayload for ModelDebugOptionsComponent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ModelDebugOptionsComponent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    char *result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282D8620);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelDebugOptionsComponent.VisualizationMode()
{
  return &type metadata for ModelDebugOptionsComponent.VisualizationMode;
}

uint64_t PlayAudioAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t PlayAudioAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of ActionEntityResolution();
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  return result;
}

uint64_t (*PlayAudioAction.targetEntity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.audioResourceName.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PlayAudioAction.audioResourceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*PlayAudioAction.audioResourceName.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PlayAudioAction.gain.getter()
{
  return *(double *)(v0 + 40);
}

void PlayAudioAction.gain.setter(double a1)
{
  *(double *)(v1 + 40) = a1;
}

uint64_t (*PlayAudioAction.gain.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.controlPlayback.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t PlayAudioAction.controlPlayback.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

unsigned char *(*PlayAudioAction.controlPlayback.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 48);
  return OrbitEntityAction.orientToPath.modify;
}

uint64_t (*PlayAudioAction.useControlledPlayback.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PlayAudioAction.animatedValueType.getter()
{
  return 0;
}

uint64_t PlayAudioAction.init(targetEntity:audioResourceName:gain:useControlledPlayback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  char v6 = *(unsigned char *)(result + 16);
  *(_OWORD *)a5 = *(_OWORD *)result;
  *(unsigned char *)(a5 + 16) = v6;
  *(void *)(a5 + 24) = a2;
  *(void *)(a5 + 32) = a3;
  *(double *)(a5 + 40) = a6;
  *(unsigned char *)(a5 + 48) = a4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PlayAudioAction.CodingKeys()
{
  unint64_t result = 0x6E45746567726174;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 1852399975;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PlayAudioAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized PlayAudioAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PlayAudioAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PlayAudioAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t PlayAudioAction.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PlayAudioAction.CodingKeys>);
  uint64_t v17 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  char v8 = *((unsigned char *)v1 + 16);
  uint64_t v9 = v1[3];
  uint64_t v15 = v1[4];
  uint64_t v16 = v9;
  id v14[3] = *((unsigned __int8 *)v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  uint64_t v10 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v20 = v7;
  uint64_t v21 = v6;
  char v22 = v8;
  char v19 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  uint64_t v11 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v5, v3);
  }
  uint64_t v13 = v17;
  LOBYTE(v20) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v20) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v20) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v10);
}

unint64_t lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys);
  }
  return result;
}

uint64_t PlayAudioAction.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PlayAudioAction.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PlayAudioAction.CodingKeys and conformance PlayAudioAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v25 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __n128 v24 = a2;
  uint64_t v10 = v26;
  uint64_t v9 = v27;
  int v11 = v28;
  unsigned __int8 v29 = v28;
  LOBYTE(v26) = 1;
  outlined copy of ActionEntityResolution();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v21 = v12;
  int v23 = v11;
  LOBYTE(v26) = 2;
  swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = v15;
  uint64_t v20 = v14;
  LOBYTE(v26) = 3;
  LOBYTE(v14) = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v11) = v23;
  outlined copy of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  uint64_t v18 = v24;
  *__n128 v24 = v10;
  v18[1] = v9;
  *((unsigned char *)v18 + 16) = v11;
  uint64_t v19 = v20;
  v18[3] = v21;
  _WORD v18[4] = v19;
  v18[5] = v16;
  *((unsigned char *)v18 + 48) = v14 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of ActionEntityResolution();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PlayAudioAction@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return PlayAudioAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PlayAudioAction(void *a1)
{
  return PlayAudioAction.encode(to:)(a1);
}

uint64_t sub_2282D8F64@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 48);
  return result;
}

unsigned char *sub_2282D8F70(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 48) = *result;
  return result;
}

uint64_t destroy for PlayAudioAction()
{
  outlined consume of ActionEntityResolution();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlayAudioAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlayAudioAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v6 = *((unsigned char *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  return a1;
}

uint64_t assignWithTake for PlayAudioAction(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAudioAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAudioAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAudioAction()
{
  return &type metadata for PlayAudioAction;
}

unsigned char *storeEnumTagSinglePayload for PlayAudioAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282D92A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PlayAudioAction.CodingKeys()
{
  return &unk_26DCBE000;
}

void PlayAudioActionHandler.actionStarted(event:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 24);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)((char *)a1 + 25);
  *(_DWORD *)&void v20[3] = *((_DWORD *)a1 + 7);
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  char v7 = *((unsigned char *)a1 + 56);
  uint64_t v17 = v2;
  long long v18 = *(_OWORD *)(a1 + 1);
  char v19 = v3;
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  uint64_t v23 = v6;
  char v24 = v7;
  long long v8 = *(_OWORD *)((char *)a1 + 57);
  long long v9 = *(_OWORD *)((char *)a1 + 73);
  long long v10 = *(_OWORD *)((char *)a1 + 89);
  long long v28 = *(_OWORD *)((char *)a1 + 105);
  long long v27 = v10;
  long long v26 = v9;
  long long v25 = v8;
  long long v11 = *(_OWORD *)((char *)a1 + 121);
  long long v12 = *(_OWORD *)((char *)a1 + 137);
  long long v13 = *(_OWORD *)((char *)a1 + 153);
  long long v32 = *(_OWORD *)((char *)a1 + 169);
  long long v31 = v13;
  long long v30 = v12;
  long long v29 = v11;
  long long v14 = *(_OWORD *)((char *)a1 + 185);
  long long v15 = *(_OWORD *)((char *)a1 + 201);
  long long v16 = *(_OWORD *)((char *)a1 + 217);
  *(_OWORD *)&v35[15] = *(_OWORD *)(a1 + 29);
  *(_OWORD *)char v35 = v16;
  long long v34 = v15;
  long long v33 = v14;
  PlayAudioActionHandler.prepareAudio(event:)((uint64_t)&v17);
  if (*(void *)v1)
  {
    MEMORY[0x22A68C6D0](*(void *)(*(void *)v1 + 32), *(void *)(*(void *)v1 + 48));
    RENetworkMarkComponentDirty();
    if ((v7 & 1) == 0)
    {
      AudioPlaybackController.play()();
      return;
    }
  }
  else if ((v7 & 1) == 0)
  {
    return;
  }
  v1[8] = 1;
}

uint64_t PlayAudioActionHandler.prepareAudio(event:)(uint64_t a1)
{
  uint64_t v2 = v1;
  char v3 = *(ValueMetadata **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(void **)(a1 + 40);
  double v8 = *(double *)(a1 + 48);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    unint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v12._uint64_t countAndFlagsBits = 0x2072656C646E6148;
    v12._object = (void *)0xEC00000020726F66;
    String.append(_:)(v12);
    unint64_t v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v13._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 0xD000000000000030;
    v14._object = (void *)0x8000000228351880;
    String.append(_:)(v14);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if ((v5 & 1) == 0)
  {
    unint64_t v58 = v3;
    swift_bridgeObjectRetain();
    uint64_t v15 = Entity.subscript.getter((uint64_t *)&v58);
    outlined consume of ActionEntityResolution();
    if (v15) {
      goto LABEL_12;
    }
LABEL_20:
    unint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(50);
    unint64_t v61 = v58;
    unint64_t v62 = v59;
    v25._uint64_t countAndFlagsBits = 0x2072656C646E6148;
    v25._object = (void *)0xEC00000020726F66;
    String.append(_:)(v25);
    unint64_t v58 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 0xD000000000000021;
    v27._object = (void *)0x80000002283607D0;
    String.append(_:)(v27);
    unint64_t v58 = v3;
    unint64_t v59 = v4;
    char v60 = v5;
    _print_unlocked<A, B>(_:_:)();
    v28._uint64_t countAndFlagsBits = 46;
    v28._object = (void *)0xE100000000000000;
    String.append(_:)(v28);
    specialized static AnimationLogger.logError(_:)(v61, v62);
LABEL_25:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_20;
  }
  uint64_t v10 = SceneNullable;
  id v11 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v11)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v10);
  }
  uint64_t v15 = Scene.findEntity(named:)();
  swift_release();
  outlined consume of ActionEntityResolution();
  if (!v15) {
    goto LABEL_20;
  }
LABEL_12:
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((unint64_t *)&v58);
  long long v16 = v58;
  swift_release();
  if (!v16)
  {
    unint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(76);
    v29._uint64_t countAndFlagsBits = 0x2072656C646E6148;
    v29._object = (void *)0xEC00000020726F66;
    String.append(_:)(v29);
    unint64_t v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v30._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
    v31._object = (void *)0x8000000228360800;
    String.append(_:)(v31);
    REEntityGetName();
    v32._uint64_t countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 11815;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    specialized static AnimationLogger.logError(_:)(v58, v59);
LABEL_24:
    swift_release();
    goto LABEL_25;
  }
  if (!v16[1].Kind)
  {
LABEL_23:
    unint64_t v58 = 0;
    unint64_t v59 = 0xE000000000000000;
    _StringGuts.grow(_:)(110);
    v34._uint64_t countAndFlagsBits = 0x2072656C646E6148;
    v34._object = (void *)0xEC00000020726F66;
    String.append(_:)(v34);
    unint64_t v61 = &type metadata for PlayAudioAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PlayAudioAction.Type);
    v35._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v36._object = (void *)0x8000000228360840;
    String.append(_:)(v36);
    v37._uint64_t countAndFlagsBits = v6;
    v37._object = v7;
    String.append(_:)(v37);
    v38._uint64_t countAndFlagsBits = 0xD000000000000028;
    v38._object = (void *)0x8000000228360860;
    String.append(_:)(v38);
    REEntityGetName();
    v39._uint64_t countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._object = (void *)0x8000000228360890;
    v40._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v40);
    unint64_t v61 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AudioResource].Keys);
    lazy protocol witness table accessor for type [String : AudioResource].Keys and conformance [A : B].Keys();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v41 = Sequence<>.joined(separator:)();
    uint64_t v43 = v42;
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    specialized static AnimationLogger.logError(_:)(v58, v59);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v6, (uint64_t)v7);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  uint64_t v19 = *((void *)v16[3].Description + v17);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!*(void *)v2) {
    goto LABEL_32;
  }
  if (*(void *)(*(void *)(*(void *)v2 + 40) + 16) == *(void *)(v19 + 16))
  {
LABEL_31:
    swift_release();
    swift_release();
    return swift_release();
  }
  type metadata accessor for AudioFileResource();
  uint64_t v20 = swift_dynamicCastClass();
  if (v20 && (uint64_t v21 = v20, (v22 = swift_dynamicCastClass()) != 0))
  {
    uint64_t v23 = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    char v24 = specialized static AudioFileResource.== infix(_:_:)(v21, v23);
  }
  else
  {
    type metadata accessor for AudioFileGroupResource();
    uint64_t v46 = swift_dynamicCastClass();
    if (!v46) {
      goto LABEL_32;
    }
    uint64_t v47 = v46;
    uint64_t v48 = swift_dynamicCastClass();
    if (!v48) {
      goto LABEL_32;
    }
    uint64_t v49 = *(void *)(v47 + 24);
    uint64_t v50 = *(void *)(v48 + 24);
    swift_retain();
    swift_retain();
    swift_retain();
    char v24 = specialized static Array<A>.== infix(_:_:)(v49, v50);
  }
  char v51 = v24;
  swift_release();
  swift_release();
  swift_release();
  if (v51) {
    goto LABEL_31;
  }
LABEL_32:
  type metadata accessor for AudioPlaybackController();
  float32x4_t v52 = (void *)swift_allocObject();
  swift_weakInit();
  v52[5] = v19;
  v52[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  uint64_t v53 = REEntityGetOrAddComponentByClass();
  v52[4] = v53;
  RERetain();
  uint64_t v54 = REAudioPlayerComponentPrepareAsset();
  v52[6] = v54;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v55 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v53, v15, v19, v54);
  swift_release();
  swift_release();
  v52[2] = v55;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  REAudioPlayerComponentGetDecibelGainForToken();
  double v57 = v56;
  REAudioPlayerComponentSetDecibelGainForToken();
  if (v8 != v57) {
    RENetworkMarkComponentDirty();
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)uint64_t v2 = v52;
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  if (*(unsigned char *)(result + 56) == 1)
  {
    uint64_t v2 = v1;
    if (*((unsigned char *)v1 + 8) == 1)
    {
      char v3 = *(unsigned char *)(result + 136);
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          char IsPaused = REAnimationComponentIsPaused();
          uint64_t result = swift_release();
          if (IsPaused) {
            return result;
          }
        }
        else
        {
          uint64_t result = swift_release();
        }
      }
      uint64_t v5 = *v1;
      if (*v2) {
        char v6 = v3;
      }
      else {
        char v6 = 1;
      }
      if ((v6 & 1) == 0)
      {
        swift_retain();
        static Duration.seconds(_:)();
        double v7 = (double)Duration.components.getter();
        Duration.components.getter();
        MEMORY[0x22A68C670](*(void *)(v5 + 32), *(void *)(v5 + 48), (double)v8 * 1.0e-18 + v7);
        RENetworkMarkComponentDirty();
        AudioPlaybackController.play()();
        uint64_t result = swift_release();
      }
      *((unsigned char *)v2 + 8) = 0;
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  int v2 = *(unsigned __int8 *)(result + 56);
  *((unsigned char *)v1 + 8) = 0;
  if (v2 == 1)
  {
    uint64_t v3 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      uint64_t v5 = *(void *)(v3 + 48);
      swift_retain();
      MEMORY[0x22A68C6D0](v4, v5);
      RENetworkMarkComponentDirty();
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  if (*(unsigned char *)(result + 56) == 1)
  {
    uint64_t v2 = *v1;
    if (*v1)
    {
      uint64_t v3 = *(void *)(v2 + 32);
      uint64_t v4 = *(void *)(v2 + 48);
      swift_retain();
      MEMORY[0x22A68C5B0](v3, v4);
      RENetworkMarkComponentDirty();
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance PlayAudioActionHandler(uint64_t result)
{
  if (*(unsigned char *)(result + 56) == 1)
  {
    uint64_t v2 = *v1;
    if (v2)
    {
      if ((*(unsigned char *)(result + 136) & 1) == 0)
      {
        swift_retain();
        static Duration.seconds(_:)();
        double v3 = (double)Duration.components.getter();
        Duration.components.getter();
        MEMORY[0x22A68C670](*(void *)(v2 + 32), *(void *)(v2 + 48), (double)v4 * 1.0e-18 + v3);
        RENetworkMarkComponentDirty();
        AudioPlaybackController.play()();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t specialized PlayAudioAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000228360790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1852399975 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000002283607B0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t assignWithCopy for PlayAudioActionHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for PlayAudioActionHandler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlayAudioActionHandler(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlayAudioActionHandler(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlayAudioActionHandler()
{
  return &type metadata for PlayAudioActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in PlayAudioActionHandler()
{
  return &protocol witness table for PlayAudioAction;
}

uint64_t static StateMachineConditionsBuilder.buildBlock()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t StateMachineTransition.init(name:fromState:toState:transitionTime:conditions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t result = a7();
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(double *)(a8 + 48) = a9;
  *(unsigned char *)(a8 + 56) = 0;
  *(void *)(a8 + 64) = result;
  return result;
}

uint64_t StateMachineTransition.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineTransition.name.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.fromState.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineTransition.fromState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*StateMachineTransition.fromState.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.toState.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineTransition.toState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*StateMachineTransition.toState.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineTransition.transitionTime.getter()
{
  return *(double *)(v0 + 48);
}

void StateMachineTransition.transitionTime.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
}

uint64_t (*StateMachineTransition.transitionTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineTransition.interruptionType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

unsigned char *StateMachineTransition.interruptionType.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 56) = *result;
  return result;
}

uint64_t (*StateMachineTransition.interruptionType.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.conditions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineTransition.conditions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*StateMachineTransition.conditions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineTransition.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static StateMachineTransitionInterruptionType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StateMachineTransitionInterruptionType.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int StateMachineTransitionInterruptionType.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType()
{
  unint64_t result = lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType;
  if (!lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineTransitionInterruptionType and conformance StateMachineTransitionInterruptionType);
  }
  return result;
}

uint64_t destroy for StateMachineTransition()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StateMachineTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineTransition()
{
  return &type metadata for StateMachineTransition;
}

unsigned char *storeEnumTagSinglePayload for StateMachineTransitionInterruptionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282DAAA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StateMachineTransitionInterruptionType()
{
  return &type metadata for StateMachineTransitionInterruptionType;
}

ValueMetadata *type metadata accessor for StateMachineConditionsBuilder()
{
  return &type metadata for StateMachineConditionsBuilder;
}

RealityKit::__RKEntityActionAnimationStyle_optional __swiftcall __RKEntityActionAnimationStyle.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  unsigned int v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionAnimationStyle.init(rawValue:), v3);
  result.RealityKit::RotationOrder value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *unsigned int v4 = v7;
  return result;
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t (*specialized Entity.ComponentSet.subscript.modify(uint64_t a1))(uint64_t result, char a2)
{
  *(void *)a1 = v1;
  swift_retain();
  uint64_t Component = REEntityGetComponent();
  if (Component)
  {
    REHierarchicalFadeComponentGetOpacity();
    int v5 = v4;
  }
  else
  {
    int v5 = 0;
  }
  swift_release();
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 12) = Component == 0;
  return Entity.ComponentSet.subscript.modifyspecialized ;
}

uint64_t Entity.ComponentSet.subscript.modifyspecialized (uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(unsigned int *)(result + 8);
    unsigned __int8 v4 = *(unsigned char *)(result + 12);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v3 | ((unint64_t)v4 << 32));
    return swift_release();
  }
  return result;
}

uint64_t __RKEntityToggleVisibilityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 120) = 1;
  *(void *)(v2 + 128) = 0;
  *(unsigned char *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityShowAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v24 = swift_allocObject();
  char v25 = *a2;
  char v26 = *a3;
  char v27 = *a6;
  char v28 = *a7;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(void *)(v24 + 336) = 0;
  *(float *)(v24 + 144) = a8;
  *(float *)(v24 + 148) = a9;
  *(unsigned char *)(v24 + 152) = v25;
  *(unsigned char *)(v24 + 153) = v26;
  *(unsigned char *)(v24 + 154) = a4;
  *(float *)(v24 + 156) = a10;
  *(float *)(v24 + 164) = a11;
  *(float *)(v24 + 168) = a12;
  *(unsigned char *)(v24 + 160) = a5;
  *(unsigned char *)(v24 + 172) = v27;
  *(unsigned char *)(v24 + 173) = v28;
  *(void *)(v24 + 112) = 0;
  *(unsigned char *)(v24 + 120) = 1;
  *(void *)(v24 + 128) = 0;
  *(unsigned char *)(v24 + 136) = 1;
  *(_DWORD *)(v24 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityHideAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  uint64_t v24 = swift_allocObject();
  char v25 = *a2;
  char v26 = *a3;
  char v27 = *a6;
  char v28 = *a7;
  *(unsigned char *)(v24 + 174) = 0;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(void *)(v24 + 336) = 0;
  *(float *)(v24 + 144) = a8;
  *(float *)(v24 + 148) = a9;
  *(unsigned char *)(v24 + 152) = v25;
  *(unsigned char *)(v24 + 153) = v26;
  *(float *)(v24 + 164) = a11;
  *(float *)(v24 + 168) = a12;
  *(unsigned char *)(v24 + 160) = a5;
  *(unsigned char *)(v24 + 154) = a4;
  *(float *)(v24 + 156) = a10;
  *(unsigned char *)(v24 + 172) = v27;
  *(unsigned char *)(v24 + 173) = v28;
  *(void *)(v24 + 112) = 0;
  *(unsigned char *)(v24 + 120) = 1;
  *(void *)(v24 + 128) = 0;
  *(unsigned char *)(v24 + 136) = 1;
  *(_DWORD *)(v24 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySetOpacityAction.__allocating_init(targetEntity:duration:opacity:)(uint64_t a1, float a2, float a3)
{
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 180) = 0u;
  *(unsigned char *)(v6 + 196) = 1;
  *(_DWORD *)(v6 + 200) = 0;
  *(unsigned char *)(v6 + 204) = 1;
  *(float *)(v6 + 144) = a2;
  *(float *)(v6 + 148) = a3;
  *(void *)(v6 + 112) = 0;
  *(unsigned char *)(v6 + 120) = 1;
  *(void *)(v6 + 128) = 0;
  *(unsigned char *)(v6 + 136) = 1;
  *(_DWORD *)(v6 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityActionAnimationStyle.rawValue.getter()
{
  uint64_t v1 = 0x6C756679616C70;
  if (*v0 != 1) {
    uint64_t v1 = 1684826487;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6369736162;
  }
}

uint64_t Entity.hideAction.getter(const void *a1, void (*a2)(uint64_t))
{
  swift_beginAccess();
  id v5 = objc_getAssociatedObject(v2, a1);
  swift_endAccess();
  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  uint64_t v6 = outlined init with take of Transform?((uint64_t)v9, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v11)
  {
    a2(v6);
    if (swift_dynamicCast()) {
      return v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

unint64_t Entity.opacity.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static Entity.AssociatedObjectKeys.opacity);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    int v2 = swift_dynamicCast();
    uint64_t v3 = v6;
    unsigned __int8 v4 = v2 ^ 1;
    if (!v2) {
      uint64_t v3 = 0;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v3 = 0;
    unsigned __int8 v4 = 1;
  }
  return v3 | ((unint64_t)v4 << 32);
}

void *static __RKEntityActionAnimationStyle.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityActionAnimationStyle.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionAnimationStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionAnimationStyle()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionAnimationStyle()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionAnimationStyle()
{
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionAnimationStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionAnimationStyle(Swift::String *a1)
{
  return __RKEntityActionAnimationStyle.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionAnimationStyle(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x6C756679616C70;
  if (v2 != 1)
  {
    uint64_t v5 = 1684826487;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6369736162;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionAnimationStyle()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionAnimationStyle()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionAnimationStyle(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityActionAnimationStyle;
}

RealityKit::__RKEntityShowActionBuildInAnimationType_optional __swiftcall __RKEntityShowActionBuildInAnimationType.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityShowActionBuildInAnimationType.init(rawValue:);
  return (RealityKit::__RKEntityShowActionBuildInAnimationType_optional)__RKEntityShowActionBuildInAnimationType.init(rawValue:)(rawValue, v2, v1);
}

void *static __RKEntityShowActionBuildInAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityShowActionBuildInAnimationType.allCases.getter;
}

unint64_t __RKEntityShowActionBuildInAnimationType.rawValue.getter()
{
  unint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
    case 3:
    case 5:
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 7368560;
      break;
    case 8:
      unint64_t result = 0x707520656C616373;
      break;
    case 9:
      unint64_t result = 0x6F6420656C616373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityShowActionBuildInAnimationType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityShowActionBuildInAnimationType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

RealityKit::__RKEntityShowActionBuildInAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityShowActionBuildInAnimationType(Swift::String *a1)
{
  return __RKEntityShowActionBuildInAnimationType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityShowActionBuildInAnimationType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = __RKEntityShowActionBuildInAnimationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityShowActionBuildInAnimationType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityShowActionBuildInAnimationType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityShowActionBuildInAnimationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityShowActionBuildInAnimationType.allCases.getter;
}

RealityKit::__RKEntityHideActionBuildOutAnimationType_optional __swiftcall __RKEntityHideActionBuildOutAnimationType.init(rawValue:)(Swift::String rawValue)
{
  v2._rawValue = &outlined read-only object #0 of __RKEntityHideActionBuildOutAnimationType.init(rawValue:);
  return (RealityKit::__RKEntityHideActionBuildOutAnimationType_optional)__RKEntityShowActionBuildInAnimationType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityShowActionBuildInAnimationType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  unint64_t v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  char v9 = 10;
  if (v7 < 0xA) {
    char v9 = v7;
  }
  *a3 = v9;
  return result;
}

void *static __RKEntityHideActionBuildOutAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityHideActionBuildOutAnimationType.allCases.getter;
}

unint64_t __RKEntityHideActionBuildOutAnimationType.rawValue.getter()
{
  unint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
    case 3:
    case 5:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 7:
      unint64_t result = 7368560;
      break;
    case 8:
      unint64_t result = 0x6F6420656C616373;
      break;
    case 9:
      unint64_t result = 0x707520656C616373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityHideActionBuildOutAnimationType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityHideActionBuildOutAnimationType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityHideActionBuildOutAnimationType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityHideActionBuildOutAnimationType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(a1, a2, a3, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityShowActionBuildInAnimationType(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

RealityKit::__RKEntityHideActionBuildOutAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityHideActionBuildOutAnimationType(Swift::String *a1)
{
  return __RKEntityHideActionBuildOutAnimationType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityHideActionBuildOutAnimationType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = __RKEntityHideActionBuildOutAnimationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityHideActionBuildOutAnimationType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityHideActionBuildOutAnimationType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityHideActionBuildOutAnimationType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityHideActionBuildOutAnimationType.allCases.getter;
}

uint64_t __RKEntityVisibilityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityVisibilityAction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 120) = 1;
  *(void *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityVisibilityAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 120) = 1;
  *(void *)(v2 + 128) = 0;
  *(unsigned char *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityVisibilityAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1[2];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityVisibilityAction();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 112) = 0;
    *(unsigned char *)(v5 + 120) = 1;
    *(void *)(v5 + 128) = 0;
    *(unsigned char *)(v5 + 136) = 1;
    *(_DWORD *)(v5 + 140) = 0;
    uint64_t v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    (*(void (**)(void *__return_ptr, void))(*v1 + 464))(v8, 0);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v7;
    }
    else {
      return 0;
    }
  }
}

uint64_t closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t *a3@<X8>, unsigned int a4@<S1>, unsigned int a5@<S2>, unsigned int a6@<S3>, __n128 a7@<Q4>, __n128 a8@<Q5>)
{
  RESampledAnimationDefaultParameters();
  uint64_t v11 = *(void **)a1;
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)a1 = v11;
  if (a2)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v11);
      *(void *)a1 = v11;
    }
    unint64_t v15 = v11[2];
    unint64_t v14 = v11[3];
    if (v15 >= v14 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v11);
    }
    *(void *)&long long v16 = __PAIR64__(a5, a4);
    *((void *)&v16 + 1) = a6;
    void v11[2] = v15 + 1;
    unint64_t v17 = &v11[6 * v15];
    *((_OWORD *)v17 + 2) = v16;
  }
  else
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v11);
      *(void *)a1 = v11;
    }
    unint64_t v19 = v11[2];
    unint64_t v18 = v11[3];
    if (v19 >= v18 >> 1) {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v11);
    }
    void v11[2] = v19 + 1;
    unint64_t v17 = &v11[6 * v19];
    unsigned char v17[4] = 0;
    void v17[5] = 0;
  }
  *((__n128 *)v17 + 3) = a7;
  *((__n128 *)v17 + 4) = a8;
  *(void *)a1 = v11;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result) {
    *a3 = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t __RKEntityVisibilityAction.init(targetEntity:)(uint64_t a1)
{
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  *(void *)(v1 + 128) = 0;
  *(unsigned char *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleVisibilityAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v29 = 91;
  unint64_t v30 = 0xE100000000000000;
  if (v2)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    uint64_t v27 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v29;
  unint64_t v9 = v30;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v15 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v29);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      uint64_t v27 = v29;
      unint64_t v28 = v30;
      uint64_t v16 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v16, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_13;
  }
  RERenderOptionsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  Visibilityunsigned int Mode = RERenderOptionsComponentGetVisibilityMode();
  if (VisibilityMode)
  {
    int v14 = 0;
  }
  else
  {
    Visibilityunsigned int Mode = REEntityGetSelfEnabled();
    int v14 = VisibilityMode;
  }
  MEMORY[0x270FA5388](VisibilityMode);
  v24[16] = v14;
  v24[17] = v14 ^ 1;
  uint64_t v27 = v29;
  unint64_t v28 = v30;
  uint64_t v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v27, partial apply for implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:), v24);
  MEMORY[0x22A68E740](*(void *)(v11 + 16), v14 ^ 1u);
  RENetworkMarkEntityMetadataDirty();
  RERenderOptionsComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RERenderOptionsComponentSetVisibilityMode();
  RENetworkMarkComponentDirty();
  uint64_t v27 = v10;
  unint64_t v28 = v9;
  uint64_t v19 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v19, &v27);
  uint64_t v20 = *(void *)(v1 + 96);
  char v21 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 2;
  uint64_t v17 = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v27 = v20;
  LOBYTE(v28) = v21;
  __RKEntityAction.state.didset((uint64_t)&v27);
  uint64_t v27 = v10;
  unint64_t v28 = v9;
  uint64_t v22 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v22, &v27);
  swift_bridgeObjectRelease();
  swift_release();
  return v17;
}

uint64_t implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)(char a1, char a2)
{
  _StringGuts.grow(_:)(51);
  v4._object = (void *)0x8000000228360CD0;
  v4._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  if (a1) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 544175136;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  if (a2) {
    uint64_t v9 = 1702195828;
  }
  else {
    uint64_t v9 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v10 = 0xE400000000000000;
  }
  else {
    unint64_t v10 = 0xE500000000000000;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t __RKEntityToggleVisibilityAction.reversed()()
{
  swift_beginAccess();
  type metadata accessor for __RKEntityToggleVisibilityAction();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(void *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 0;
  uint64_t v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityToggleVisibilityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v2 = type metadata accessor for __RKEntityToggleVisibilityAction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 120) = 1;
  *(void *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  uint64_t v4 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityToggleVisibilityAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    type metadata accessor for __RKEntityToggleVisibilityAction();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 112) = 0;
    *(unsigned char *)(v7 + 120) = 1;
    *(void *)(v7 + 128) = 0;
    *(unsigned char *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 0;
    uint64_t v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityToggleVisibilityAction();
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 112) = 0;
    *(unsigned char *)(v4 + 120) = 1;
    *(void *)(v4 + 128) = 0;
    *(unsigned char *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 0;
    uint64_t v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v9;
    }
    else {
      return 0;
    }
  }
}

uint64_t __RKEntityToggleVisibilityAction.init(targetEntity:)(uint64_t a1)
{
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  *(void *)(v1 + 128) = 0;
  *(unsigned char *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityVisibilityAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t __RKEntitySetOpacityAction.init(targetEntity:duration:opacity:)(uint64_t a1, float a2, float a3)
{
  *(_OWORD *)(v3 + 180) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(unsigned char *)(v3 + 196) = 1;
  *(_DWORD *)(v3 + 200) = 0;
  *(unsigned char *)(v3 + 204) = 1;
  *(float *)(v3 + 144) = a2;
  *(float *)(v3 + 148) = a3;
  *(void *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 120) = 1;
  *(void *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySetOpacityAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v30 = 91;
  unint64_t v31 = 0xE100000000000000;
  if (v2)
  {
    *(void *)&v28[0] = 0;
    *((void *)&v28[0] + 1) = 0xE000000000000000;
    uint64_t v32 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    unint64_t v4 = 0xE000000000000000;
    uint64_t v3 = 0;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = v30;
  unint64_t v9 = v31;
  uint64_t v11 = *(void *)(v0 + 16);
  if (!v11)
  {
    uint64_t v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v30);
    swift_bridgeObjectRelease();
    return 0;
  }
  Swift::String v12 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      uint64_t v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v30);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_13;
  }
  if (*(float *)(v1 + 144) <= 0.0)
  {
    uint64_t v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v30, partial apply for implicit closure #4 in __RKEntitySetOpacityAction.perform(with:), v1);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v1 + 148));
  }
  else
  {
    os_log_type_t v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, &v30);
    MEMORY[0x22A68E740](*(void *)(v11 + 16), 1);
    RENetworkMarkEntityMetadataDirty();
    RERenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RERenderOptionsComponentSetVisibilityMode();
    RENetworkMarkComponentDirty();
    uint64_t v29 = 0;
    memset(v28, 0, sizeof(v28));
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v14;
    void v15[3] = v10;
    _DWORD v15[4] = v9;
    swift_bridgeObjectRetain();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v28, (uint64_t)partial apply for closure #1 in __RKEntitySetOpacityAction.perform(with:), (uint64_t)v15, &v30);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v28, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v30, v1 + 152);
    swift_endAccess();
  }
  uint64_t v30 = v10;
  unint64_t v31 = v9;
  uint64_t v20 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v20, &v30);
  uint64_t v21 = *(void *)(v1 + 96);
  char v22 = *(unsigned char *)(v1 + 104);
  uint64_t v18 = 1;
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v30 = v21;
  LOBYTE(v31) = v22;
  __RKEntityAction.state.didset((uint64_t)&v30);
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = (void *)swift_allocObject();
  v24[2] = v23;
  v24[3] = v10;
  v24[4] = v9;
  uint64_t v25 = *(void *)(v1 + 32);
  *(void *)(v1 + 32) = partial apply for closure #2 in __RKEntitySetOpacityAction.perform(with:);
  *(void *)(v1 + 40) = v24;
  swift_bridgeObjectRetain();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
  uint64_t v30 = v10;
  unint64_t v31 = v9;
  uint64_t v26 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v26, &v30);
  swift_bridgeObjectRelease();
  swift_release();
  return v18;
}

uint64_t closure #1 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v8[0] = a3;
    v8[1] = a4;
    os_log_type_t v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v8);
    specialized __RKEntitySetOpacityAction.updateFade(_:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    *(void *)&long long v10 = a2;
    *((void *)&v10 + 1) = a3;
    os_log_type_t v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)&v10);
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6 + 152, (uint64_t)&v10);
    if (*((void *)&v11 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v10, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v9[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v10, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v10, v6 + 152);
    swift_endAccess();
    *(void *)&long long v10 = a2;
    *((void *)&v10 + 1) = a3;
    uint64_t v8 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v8, &v10, partial apply for implicit closure #2 in closure #2 in __RKEntitySetOpacityAction.perform(with:), v6);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v6 + 148));
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._object = a4;
  String.append(_:)(v6);
  Float.write<A>(to:)();
  v7._uint64_t countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t __RKEntitySetOpacityAction.reversed()()
{
  swift_beginAccess();
  int v1 = *(_DWORD *)(v0 + 144);
  if (*(unsigned char *)(v0 + 196)) {
    float v2 = 1.0;
  }
  else {
    float v2 = *(float *)(v0 + 192);
  }
  type metadata accessor for __RKEntitySetOpacityAction();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 180) = 0u;
  *(unsigned char *)(v3 + 196) = 1;
  *(_DWORD *)(v3 + 200) = 0;
  *(unsigned char *)(v3 + 204) = 1;
  *(_DWORD *)(v3 + 144) = v1;
  *(float *)(v3 + 148) = v2;
  *(void *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 120) = 1;
  *(void *)(v3 + 128) = 0;
  *(unsigned char *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 0;
  uint64_t v4 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v4);
}

uint64_t __RKEntitySetOpacityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = type metadata accessor for __RKEntitySetOpacityAction();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 180) = 0u;
  *(unsigned char *)(v4 + 196) = 1;
  *(_DWORD *)(v4 + 200) = 0;
  *(unsigned char *)(v4 + 204) = 1;
  *(void *)(v4 + 144) = *(void *)(v1 + 144);
  *(void *)(v4 + 112) = 0;
  *(unsigned char *)(v4 + 120) = 1;
  *(void *)(v4 + 128) = 0;
  *(unsigned char *)(v4 + 136) = 1;
  *(_DWORD *)(v4 + 140) = 0;
  uint64_t v5 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v5);
  a1[3] = v3;
  *a1 = result;
  return result;
}

void __RKEntitySetOpacityAction.__allocating_init(targetEntity:)()
{
}

void __RKEntitySetOpacityAction.init(targetEntity:)()
{
}

uint64_t __RKEntitySetOpacityAction.__ivar_destroyer()
{
  return outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySetOpacityAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySetOpacityAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 152, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityShowAction.init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  char v13 = *a2;
  char v14 = *a3;
  char v15 = *a6;
  char v16 = *a7;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(void *)(v12 + 336) = 0;
  *(float *)(v12 + 144) = a8;
  *(float *)(v12 + 148) = a9;
  *(unsigned char *)(v12 + 152) = v13;
  *(unsigned char *)(v12 + 153) = v14;
  *(unsigned char *)(v12 + 154) = a4;
  *(float *)(v12 + 156) = a10;
  *(float *)(v12 + 164) = a11;
  *(float *)(v12 + 168) = a12;
  *(unsigned char *)(v12 + 160) = a5;
  *(unsigned char *)(v12 + 172) = v15;
  *(unsigned char *)(v12 + 173) = v16;
  *(void *)(v12 + 112) = 0;
  *(unsigned char *)(v12 + 120) = 1;
  *(void *)(v12 + 128) = 0;
  *(unsigned char *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

void __RKEntityShowAction.updateFadeIn(_:)(char a1)
{
  if (*(unsigned char *)(v1 + 120))
  {
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    *(double *)(v1 + 112) = v2;
    *(unsigned char *)(v1 + 120) = 0;
    return;
  }
  double v4 = *(double *)(v1 + 112);
  if (*(void *)(v1 + 24)) {
    REEngineGetCurrentTime();
  }
  else {
    double v5 = CACurrentMediaTime();
  }
  double v6 = v5 - v4;
  float v7 = *(float *)(v1 + 144);
  if (v6 > v7) {
    double v6 = v7;
  }
  if (v6 <= 0.0)
  {
    double v6 = 0.0;
    if (v7 <= 0.0) {
      goto LABEL_13;
    }
LABEL_15:
    float v9 = v6;
    float v10 = *(float *)(v1 + 156) * (float)(v9 / v7);
    if (a1) {
      float v11 = sinf((float)((float)((float)(v10 + -1.0) + 1.0) * -3.1416) * 0.5) + 1.0;
    }
    else {
      float v11 = sinf((float)((float)(1.0 - v10) * 3.1416) * 0.5);
    }
    float v8 = 1.0 - v11;
    goto LABEL_19;
  }
  if (v6 < v7) {
    goto LABEL_15;
  }
LABEL_13:
  float v8 = *(float *)(v1 + 156);
LABEL_19:

  specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v8);
}

uint64_t __RKEntityShowAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v149 = *MEMORY[0x263EF8340];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  specialized InteractionsLogger.init<A>(_:_:)(v2, v145);
  long long v3 = v145[0];
  double v4 = *(void **)(v0 + 16);
  if (!v4)
  {
    uint64_t v8 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v8, v145);
    swift_bridgeObjectRelease();
    return 0;
  }
  double v5 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v5 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_10:
      v145[0] = v3;
      uint64_t v9 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v9, v145);
      goto LABEL_11;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_10;
  }
  uint64_t v6 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.showAction, (void (*)(uint64_t))type metadata accessor for __RKEntityShowAction);
  swift_release();
  if (v6)
  {
    v145[0] = v3;
    os_log_type_t v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)v145);
LABEL_11:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  uint64_t v11 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.hideAction, (void (*)(uint64_t))type metadata accessor for __RKEntityHideAction);
  if (v11)
  {
    uint64_t v12 = v11;
    v145[0] = v3;
    os_log_type_t v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, (uint64_t *)v145);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v12 + 96);
    char v15 = *(unsigned char *)(v12 + 104);
    *(void *)(v12 + 96) = 2;
    *(unsigned char *)(v12 + 104) = 1;
    *(void *)&v145[0] = v14;
    BYTE8(v145[0]) = v15;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)v145);
    swift_release_n();
  }
  uint64_t v16 = *(void *)(v1 + 96);
  char v17 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  *(void *)&v145[0] = v16;
  BYTE8(v145[0]) = v17;
  __RKEntityAction.state.didset((uint64_t)v145);
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  swift_beginAccess();
  swift_retain();
  objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.showAction, (id)v1, (void *)1);
  swift_endAccess();
  swift_release();
  uint64_t v18 = v4[2];
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (!REEntityGetSceneNullable())
  {
    v145[0] = v3;
    os_log_type_t v30 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v30, (uint64_t *)v145);
    goto LABEL_11;
  }
  if (!RESceneGetECSManagerNullable())
  {
    v145[0] = v3;
    os_log_type_t v31 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v31, (uint64_t *)v145);
    goto LABEL_11;
  }
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v20 = MEMORY[0x22A692220](ServiceLocator);
  if (!v20)
  {
    v145[0] = v3;
    os_log_type_t v32 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v32, (uint64_t *)v145);
    goto LABEL_11;
  }
  uint64_t v21 = v20;
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    v145[0] = v3;
    os_log_type_t v33 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v33, (uint64_t *)v145);
    goto LABEL_11;
  }
  uint64_t v129 = v21;
  uint64_t v134 = v18;
  RETransformComponentGetLocalUnanimatedSRT();
  __n128 v135 = v24;
  __n128 v136 = v23;
  float32x4_t v25 = vmulq_f32(v22, v22);
  if ((float)(v25.f32[2] + vaddv_f32(*(float32x2_t *)v25.f32)) < 0.00000011921)
  {
    v145[0] = v3;
    os_log_type_t v26 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v26, (uint64_t *)v145);
    float32x4_t v22 = (float32x4_t)xmmword_22834C450;
  }
  float32x4_t v137 = v22;
  v145[0] = v3;
  uint64_t v27 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v27, v145, partial apply for implicit closure #10 in __RKEntityShowAction.perform(with:), v1);
  if (*(unsigned char *)(v1 + 172))
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL v29 = 0;
    if ((v28 & 1) == 0)
    {
      switch(*(unsigned char *)(v1 + 173))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          BOOL v29 = 0;
          if ((v34 & 1) == 0) {
            BOOL v29 = *(float *)(v1 + 144) > 0.0;
          }
          break;
        default:
          goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    swift_bridgeObjectRelease();
    BOOL v29 = 0;
  }
  BOOL v130 = v29;
  switch(*(unsigned char *)(v1 + 173))
  {
    case 2:
      Swift::String v35 = "move in from right";
      goto LABEL_34;
    case 3:
      Swift::String v35 = "move in from front";
LABEL_34:
      Swift::String v36 = v35 - 32;
      goto LABEL_36;
    case 5:
      goto LABEL_37;
    case 6:
      Swift::String v36 = "move in from above";
LABEL_36:
      if (((unint64_t)v36 | 0x8000000000000000) != 0x800000022834DDC0) {
        goto LABEL_38;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      goto LABEL_39;
    default:
LABEL_38:
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v131 = 0;
      if (v37) {
LABEL_39:
      }
        BOOL v131 = *(float *)(v1 + 144) > 0.0;
      switch(*(unsigned char *)(v1 + 173))
      {
        case 2:
          Swift::String v38 = "move in from right";
          goto LABEL_43;
        case 3:
          Swift::String v38 = "move in from front";
LABEL_43:
          unint64_t v39 = (unint64_t)(v38 - 32) | 0x8000000000000000;
          goto LABEL_45;
        case 5:
          unint64_t v39 = 0x800000022834DDC0;
LABEL_45:
          if (v39 == 0x800000022834DDE0) {
            goto LABEL_46;
          }
          goto LABEL_47;
        case 6:
LABEL_46:
          swift_bridgeObjectRelease();
          goto LABEL_48;
        default:
LABEL_47:
          char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          BOOL v132 = 0;
          if (v40) {
LABEL_48:
          }
            BOOL v132 = *(float *)(v1 + 144) > 0.0;
          switch(*(unsigned char *)(v1 + 173))
          {
            case 1:
              goto LABEL_51;
            case 4:
              if (0x800000022834DDA0 != 0x800000022834DD40) {
                goto LABEL_52;
              }
LABEL_51:
              swift_bridgeObjectRelease();
              goto LABEL_53;
            default:
LABEL_52:
              char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              BOOL v42 = 0;
              if (v41) {
LABEL_53:
              }
                BOOL v42 = *(float *)(v1 + 144) > 0.0;
              BOOL v128 = v42;
              switch(*(unsigned char *)(v1 + 173))
              {
                case 2:
                  goto LABEL_60;
                case 3:
                  uint64_t v43 = "move in from right";
                  goto LABEL_57;
                case 5:
                  uint64_t v43 = "move in from rear";
LABEL_57:
                  unint64_t v44 = (unint64_t)v43 | 0x8000000000000000;
                  goto LABEL_59;
                case 6:
                  unint64_t v44 = 0x800000022834DDE0;
LABEL_59:
                  if (v44 != 0x800000022834DD60) {
                    goto LABEL_61;
                  }
LABEL_60:
                  swift_bridgeObjectRelease();
                  goto LABEL_62;
                default:
LABEL_61:
                  char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  BOOL v46 = 0;
                  if (v45) {
LABEL_62:
                  }
                    BOOL v46 = *(float *)(v1 + 144) > 0.0;
                  BOOL v127 = v46;
                  switch(*(unsigned char *)(v1 + 173))
                  {
                    case 2:
                      uint64_t v47 = "move in from left";
                      goto LABEL_67;
                    case 3:
                      goto LABEL_68;
                    case 5:
                      uint64_t v47 = "move in from rear";
                      goto LABEL_67;
                    case 6:
                      uint64_t v47 = "move in from above";
LABEL_67:
                      if (((unint64_t)v47 | 0x8000000000000000) != 0x800000022834DD80) {
                        goto LABEL_69;
                      }
LABEL_68:
                      swift_bridgeObjectRelease();
                      goto LABEL_70;
                    default:
LABEL_69:
                      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      BOOL v49 = 0;
                      if (v48) {
LABEL_70:
                      }
                        BOOL v49 = *(float *)(v1 + 144) > 0.0;
                      BOOL v126 = v49;
                      switch(*(unsigned char *)(v1 + 173))
                      {
                        case 1:
                          if (0x800000022834DD40 != 0x800000022834DDA0) {
                            goto LABEL_74;
                          }
                          goto LABEL_73;
                        case 4:
LABEL_73:
                          swift_bridgeObjectRelease();
                          goto LABEL_75;
                        default:
LABEL_74:
                          char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          BOOL v51 = 0;
                          if (v50) {
LABEL_75:
                          }
                            BOOL v51 = *(float *)(v1 + 144) > 0.0;
                          BOOL v125 = v51;
                          switch(*(unsigned char *)(v1 + 173))
                          {
                            case 8:
                              swift_bridgeObjectRelease();
                              goto LABEL_79;
                            default:
                              char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              BOOL v53 = 0;
                              if (v52) {
LABEL_79:
                              }
                                BOOL v53 = *(float *)(v1 + 144) > 0.0;
                              BOOL v123 = v53;
                              switch(*(unsigned char *)(v1 + 173))
                              {
                                case 9:
                                  swift_bridgeObjectRelease();
                                  goto LABEL_82;
                                default:
                                  char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  BOOL v55 = 0;
                                  if (v54) {
LABEL_82:
                                  }
                                    BOOL v55 = *(float *)(v1 + 144) > 0.0;
                                  break;
                              }
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  BOOL v124 = v55;
  switch(*(unsigned char *)(v1 + 173))
  {
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_87;
    default:
      char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v57 = 0;
      if (v56) {
LABEL_87:
      }
        BOOL v57 = *(float *)(v1 + 144) > 0.0;
      RESRTIdentity();
      RESRTInverse();
      RESRTMatrix();
      RESRTMatrix();
      REMakeSRTFromMatrix();
      v145[0] = v58;
      v145[1] = v59;
      v145[2] = v60;
      if (*(unsigned char *)(v1 + 154) == 1 && *(float *)(v1 + 144) > 0.0)
      {
        long long v142 = v3;
        os_log_type_t v61 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v61, (uint64_t *)&v142);
        specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(0.0);
        long long v142 = v3;
        os_log_type_t v62 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v62, (uint64_t *)&v142);
        MEMORY[0x22A68E740](v4[2], 1);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        *(void *)&long long v141 = 0;
        long long v139 = 0u;
        long long v140 = 0u;
        uint64_t v63 = swift_allocObject();
        swift_weakInit();
        uint64_t v64 = swift_allocObject();
        *(void *)(v64 + 16) = v63;
        *(_OWORD *)(v64 + 24) = v3;
        swift_bridgeObjectRetain();
        specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v139, (uint64_t)partial apply for closure #1 in __RKEntityShowAction.perform(with:), v64, (uint64_t *)&v142);
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)&v139, &demangling cache variable for type metadata for EventSource?);
        swift_beginAccess();
        outlined assign with take of Cancellable?((uint64_t)&v142, v1 + 296);
        swift_endAccess();
      }
      else if (*(float *)(v1 + 156) != 0.0)
      {
        long long v142 = v3;
        uint64_t v65 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v65, &v142, partial apply for implicit closure #25 in __RKEntityShowAction.perform(with:), v1);
        specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v1 + 156));
      }
      if (v130)
      {
        long long v142 = v3;
        os_log_type_t v66 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v66, (uint64_t *)&v142);
        RERigidBodyComponentGetComponentType();
        uint64_t ComponentByClass = REEntityGetComponentByClass();
        BOOL v68 = ComponentByClass == 0;
        if (ComponentByClass)
        {
          int MotionType = RERigidBodyComponentGetMotionType();
          if (MotionType != 1)
          {
            long long v142 = v3;
            os_log_type_t v70 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v70, (uint64_t *)&v142);
            RERigidBodyComponentSetMotionType();
            RENetworkMarkComponentDirty();
          }
        }
        else
        {
          int MotionType = 0;
        }
        float v85 = *(float *)(v1 + 148)
            / (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v137, 2), vaddq_f32(v137, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.f32, 1))).f32[0]/ 3.0);
        if (v131)
        {
          long long v142 = v3;
          os_log_type_t v86 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v86, (uint64_t *)&v142);
          long long v142 = (__int128)v135;
          __n128 v143 = v136;
          float32x4_t v144 = v137;
          Entity.boundingBox.getter();
          LOBYTE(v139) = *(unsigned char *)(v1 + 172);
          uint64_t v87 = specialized static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, *(float32x4_t *)&zmmword_22830EC90[48], v129, &v139, 1);
LABEL_115:
          if (*(void *)(v87 + 16))
          {
            uint64_t SRTAnimation = *(void *)(v87 + 32);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t SRTAnimation = 0;
          }
          uint64_t v72 = v134;
          goto LABEL_119;
        }
        if (v132)
        {
          long long v142 = v3;
          os_log_type_t v88 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v88, (uint64_t *)&v142);
          long long v142 = (__int128)v135;
          __n128 v143 = v136;
          float32x4_t v144 = v137;
          Entity.boundingBox.getter();
          LOBYTE(v139) = *(unsigned char *)(v1 + 172);
          uint64_t v87 = specialized static __RKVisibilityShowRiseAnimation.createVisibilityShowRiseAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, *(float32x4_t *)&zmmword_22830EC90[48], v129, &v139, 1);
          goto LABEL_115;
        }
        if (v57)
        {
          long long v142 = v3;
          os_log_type_t v90 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v90, (uint64_t *)&v142);
          long long v142 = (__int128)v135;
          __n128 v143 = v136;
          float32x4_t v144 = v137;
          Entity.boundingBox.getter();
          LOBYTE(v139) = *(unsigned char *)(v1 + 172);
          uint64_t v87 = specialized static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, *(float32x4_t *)&zmmword_22830EC90[48], v129, &v139, 1);
          goto LABEL_115;
        }
        if (v124)
        {
          long long v142 = v3;
          os_log_type_t v112 = static os_log_type_t.info.getter();
          specialized InteractionsLogger.log(_:_:)(v112, (uint64_t *)&v142);
          long long v142 = (__int128)v135;
          __n128 v143 = v136;
          float32x4_t v144 = v137;
          Entity.boundingBox.getter();
          LOBYTE(v139) = *(unsigned char *)(v1 + 172);
          uint64_t v113 = specialized static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, *(float32x4_t *)&zmmword_22830EC90[48], v129, &v139, 1);
          uint64_t v72 = v134;
          if (!*(void *)(v113 + 16))
          {
LABEL_136:
            swift_bridgeObjectRelease();
            uint64_t SRTAnimation = 0;
LABEL_119:
            long long v142 = v3;
            os_log_type_t v91 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v91, (uint64_t *)&v142);
            MEMORY[0x22A68E740](v4[2], 1);
            RENetworkMarkEntityMetadataDirty();
            RERenderOptionsComponentGetComponentType();
            REEntityGetOrAddComponentByClass();
            RERenderOptionsComponentSetVisibilityMode();
            RENetworkMarkComponentDirty();
            goto LABEL_127;
          }
        }
        else
        {
          uint64_t v72 = v134;
          if (v123)
          {
            long long v142 = v3;
            os_log_type_t v114 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v114, (uint64_t *)&v142);
            long long v142 = (__int128)v135;
            __n128 v143 = v136;
            float32x4_t v144 = v137;
            Entity.boundingBox.getter();
            LOBYTE(v139) = *(unsigned char *)(v1 + 172);
            uint64_t v113 = specialized static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, *(float32x4_t *)&zmmword_22830EC90[48], v129, &v139, 1);
          }
          else
          {
            long long v142 = v3;
            os_log_type_t v115 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v115, (uint64_t *)&v142);
            if (v127) {
              unsigned int v116 = -1;
            }
            else {
              unsigned int v116 = 0;
            }
            int8x16_t v117 = vbslq_s8((int8x16_t)vdupq_n_s32(v116), (int8x16_t)xmmword_22831EF90, (int8x16_t)xmmword_22831EFB0);
            if (v128) {
              unsigned int v118 = -1;
            }
            else {
              unsigned int v118 = 0;
            }
            int8x16_t v119 = vbslq_s8((int8x16_t)vdupq_n_s32(v118), *(int8x16_t *)&zmmword_22830EC90[48], v117);
            if (v125) {
              unsigned int v120 = -1;
            }
            else {
              unsigned int v120 = 0;
            }
            int8x16_t v121 = vbslq_s8((int8x16_t)vdupq_n_s32(v120), (int8x16_t)xmmword_22834C460, *(int8x16_t *)&zmmword_22830EC90[48]);
            if (v128 || v127 || v126) {
              unsigned int v122 = -1;
            }
            else {
              unsigned int v122 = 0;
            }
            float32x4_t v133 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v122), v119, v121);
            long long v142 = (__int128)v135;
            __n128 v143 = v136;
            float32x4_t v144 = v137;
            Entity.boundingBox.getter();
            LOBYTE(v139) = *(unsigned char *)(v1 + 172);
            uint64_t v113 = specialized static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v142, *(float *)(v1 + 144), v85, v133, v129, &v139, 1);
          }
          if (!*(void *)(v113 + 16)) {
            goto LABEL_136;
          }
        }
        uint64_t SRTAnimation = *(void *)(v113 + 32);
        swift_bridgeObjectRelease();
        goto LABEL_119;
      }
      if (v131 || v132 || v128 || v127 || v125 || v126)
      {
        long long v142 = v3;
        os_log_type_t v71 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v71, (uint64_t *)&v142);
        MEMORY[0x22A68E740](v4[2], 1);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        RERigidBodyComponentGetComponentType();
        uint64_t v72 = v134;
        uint64_t v73 = REEntityGetComponentByClass();
        BOOL v68 = v73 == 0;
        if (v73)
        {
          int MotionType = RERigidBodyComponentGetMotionType();
          if (MotionType != 1)
          {
            RERigidBodyComponentSetMotionType();
            RENetworkMarkComponentDirty();
          }
        }
        else
        {
          int MotionType = 0;
        }
        REFromToByAnimationDefaultParameters();
        double v92 = *(float *)(v1 + 144);
        LOBYTE(v139) = *(unsigned char *)(v1 + 152);
        LOBYTE(v147[0]) = *(unsigned char *)(v1 + 153);
        specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(&v139, (uint64_t)v146);
        outlined init with take of Transform?((uint64_t)v146, (uint64_t)v147, &demangling cache variable for type metadata for REEasingFunction?);
        if (v148)
        {
          LOBYTE(v142) = 0;
          *((void *)&v142 + 1) = "Transform.transform";
          v143.n128_u8[0] = 1;
          v143.n128_f64[1] = v92;
        }
        else
        {
          long long v142 = v147[0];
          __n128 v143 = (__n128)v147[1];
          LOBYTE(v139) = 0;
          *((void *)&v139 + 1) = "Transform.transform";
          LOBYTE(v140) = 1;
          *((double *)&v140 + 1) = v92;
        }
        uint64_t SRTAnimation = REAssetManagerTimelineAssetCreateSRTAnimation();
      }
      else if (v123 || v124)
      {
        long long v142 = v3;
        os_log_type_t v74 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v74, (uint64_t *)&v142);
        RESRTIdentity();
        long long v142 = v75;
        __n128 v143 = v76;
        float32x4_t v144 = v77;
        BOOL v68 = 1;
        MEMORY[0x22A68E740](v4[2], 1);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        RESRTIdentity();
        long long v140 = v78;
        long long v141 = v79;
        int8x16_t v80 = (int8x16_t)vdupq_n_s32(0x42C80000u);
        if (v123) {
          unsigned int v81 = -1;
        }
        else {
          unsigned int v81 = 0;
        }
        int8x16_t v82 = vbicq_s8(v80, (int8x16_t)vdupq_n_s32(v81));
        int32x2_t v83 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v137, 2), vaddq_f32(v137, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v137.f32, 1))).u64[0];
        *(float *)v83.i32 = *(float *)v83.i32 / 3.0;
        *(float32x2_t *)&long long v84 = vdiv_f32(*(float32x2_t *)v82.i8, (float32x2_t)vdup_lane_s32(v83, 0));
        *((float *)&v84 + 2) = *(float *)&v82.i32[2] / *(float *)v83.i32;
        HIDWORD(v84) = 0;
        long long v139 = v84;
        REFromToByAnimationDefaultParameters();
        LOBYTE(v147[0]) = *(unsigned char *)(v1 + 152);
        specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(v147, (uint64_t)v146);
        outlined init with take of Transform?((uint64_t)v146, (uint64_t)v147, &demangling cache variable for type metadata for REEasingFunction?);
        uint64_t SRTAnimation = REAssetManagerTimelineAssetCreateSRTAnimation();
        uint64_t v72 = v134;
        int MotionType = 0;
      }
      else
      {
        long long v142 = v3;
        os_log_type_t v89 = static os_log_type_t.info.getter();
        if (v57)
        {
          specialized InteractionsLogger.log(_:_:)(v89, (uint64_t *)&v142);
          BOOL v68 = 1;
          uint64_t SRTAnimation = (uint64_t)specialized __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(v129, 1, 1, (int8x16_t)v137, v135, v136, *(float *)(v1 + 144));
        }
        else
        {
          specialized InteractionsLogger.log(_:_:)(v89, (uint64_t *)&v142);
          BOOL v68 = 1;
          MEMORY[0x22A68E740](v4[2], 1);
          RENetworkMarkEntityMetadataDirty();
          RERenderOptionsComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          RERenderOptionsComponentSetVisibilityMode();
          RENetworkMarkComponentDirty();
          uint64_t SRTAnimation = 0;
        }
        int MotionType = 0;
        uint64_t v72 = v134;
      }
LABEL_127:
      REProjectiveShadowReceiverComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      REProjectiveShadowReceiverComponentGetShadowIntensity();
      *(_DWORD *)(v1 + 140) = v93;
      RENetworkMarkComponentDirty();
      uint64_t v94 = swift_allocObject();
      swift_weakInit();
      uint64_t v95 = swift_allocObject();
      *(void *)(v95 + 16) = v94;
      *(_OWORD *)(v95 + 24) = v3;
      *(void *)(v95 + 40) = v4;
      *(void *)(v95 + 48) = v72;
      *(_DWORD *)(v95 + 56) = MotionType;
      *(unsigned char *)(v95 + 60) = v68;
      uint64_t v96 = *(void *)(v1 + 32);
      *(void *)(v1 + 32) = partial apply for specialized closure #2 in __RKEntityShowAction.perform(with:);
      *(void *)(v1 + 40) = v95;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v96);
      uint64_t v97 = type metadata accessor for Entity();
      *((void *)&v140 + 1) = v97;
      *(void *)&long long v141 = &protocol witness table for Entity;
      *(void *)&long long v139 = v4;
      uint64_t v98 = swift_allocObject();
      swift_weakInit();
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = v98;
      *(_OWORD *)(v99 + 24) = v3;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v139, 0, (char **)&v142);
      uint64_t v100 = swift_allocObject();
      *(void *)(v100 + 16) = partial apply for closure #3 in __RKEntityShowAction.perform(with:);
      *(void *)(v100 + 24) = v99;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      uint64_t v101 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      uint64_t v102 = type metadata accessor for AnyCancellable();
      v143.n128_u64[1] = v102;
      v144.i64[0] = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v142 = v101;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v139, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v142, v1 + 176);
      swift_endAccess();
      *((void *)&v140 + 1) = v97;
      *(void *)&long long v141 = &protocol witness table for Entity;
      *(void *)&long long v139 = v4;
      uint64_t v103 = swift_allocObject();
      swift_weakInit();
      uint64_t v104 = swift_allocObject();
      *(void *)(v104 + 16) = v103;
      *(_OWORD *)(v104 + 24) = v3;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v139, 0, (char **)&v142);
      uint64_t v105 = swift_allocObject();
      *(void *)(v105 + 16) = partial apply for closure #4 in __RKEntityShowAction.perform(with:);
      *(void *)(v105 + 24) = v104;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      uint64_t v106 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      v143.n128_u64[1] = v102;
      v144.i64[0] = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v142 = v106;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v139, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v142, v1 + 216);
      swift_endAccess();
      if (*(void *)(v1 + 24)) {
        REEngineGetCurrentTime();
      }
      else {
        double v107 = CACurrentMediaTime();
      }
      *(double *)(v1 + 336) = v107 + *(float *)(v1 + 144) + 0.0166666667;
      *(void *)&long long v141 = 0;
      long long v139 = 0u;
      long long v140 = 0u;
      uint64_t v108 = swift_allocObject();
      swift_weakInit();
      uint64_t v109 = swift_allocObject();
      *(void *)(v109 + 16) = v108;
      *(void *)(v109 + 24) = v134;
      *(_OWORD *)(v109 + 32) = v3;
      swift_bridgeObjectRetain();
      specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v139, (uint64_t)partial apply for closure #5 in __RKEntityShowAction.perform(with:), v109, (uint64_t *)&v142);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v139, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v142, v1 + 256);
      swift_endAccess();
      long long v142 = v3;
      os_log_type_t v110 = static os_log_type_t.info.getter();
      if (SRTAnimation)
      {
        specialized InteractionsLogger.log(_:_:)(v110, (uint64_t *)&v142);
        *(void *)&long long v142 = 2;
        DWORD2(v142) = 4864;
        v143.n128_u64[0] = (unint64_t)"SHOWVISIBILITY";
        v143.n128_u8[8] = 0;
        *(void *)(v1 + 128) = REAnimationComponentPlay();
        *(unsigned char *)(v1 + 136) = 0;
        RERelease();
      }
      else
      {
        specialized InteractionsLogger.log(_:_:)(v110, (uint64_t *)&v142);
      }
      long long v142 = v3;
      uint64_t v111 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v111, &v142);
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
  }
}

uint64_t implicit closure #10 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  BYTE8(v7) = 0;
  _StringGuts.grow(_:)(53);
  v2._uint64_t countAndFlagsBits = 0x6F6974616D696E61;
  v2._object = (void *)0xEF3D656C7974536ELL;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._object = (void *)0x8000000228360C60;
  v3._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v3);
  *(void *)&long long v7 = *(unsigned __int8 *)(a1 + 173);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 0x6F69746172756420;
  v4._object = (void *)0xEA00000000003D6ELL;
  String.append(_:)(v4);
  Float.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  return *(void *)((char *)&v7 + 1);
}

uint64_t closure #1 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v8[0] = a3;
    v8[1] = a4;
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v8);
    __RKEntityShowAction.updateFadeIn(_:)(0);
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #25 in __RKEntityShowAction.perform(with:)()
{
  _StringGuts.grow(_:)(59);
  v0._object = (void *)0x8000000228360C10;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  Float.write<A>(to:)();
  v1._uint64_t countAndFlagsBits = 0xD000000000000025;
  v1._object = (void *)0x8000000228360C30;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized closure #2 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    *(void *)&long long v16 = a2;
    *((void *)&v16 + 1) = a3;
    os_log_type_t v12 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v12, (uint64_t *)&v16);
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 176, (uint64_t)&v16);
    if (*((void *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 176);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 256, (uint64_t)&v16);
    if (*((void *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 256);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 296, (uint64_t)&v16);
    if (*((void *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 296);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v11 + 216, (uint64_t)&v16);
    if (*((void *)&v17 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v16, (uint64_t)v14);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v14, v15);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v16, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v16, v11 + 216);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v11 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v11 + 104) == 1) && *(void *)(v11 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v11 + 128) = 0;
      *(unsigned char *)(v11 + 136) = 1;
    }
    v14[0] = a2;
    v14[1] = a3;
    uint64_t v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, v14, partial apply for implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:), v11);
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v11 + 156));
    MEMORY[0x22A68E740](a4[2], 1);
    RENetworkMarkEntityMetadataDirty();
    RERenderOptionsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RERenderOptionsComponentSetVisibilityMode();
    RENetworkMarkComponentDirty();
    swift_beginAccess();
    objc_setAssociatedObject(a4, &static Entity.AssociatedObjectKeys.showAction, 0, (void *)1);
    swift_endAccess();
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a6 & 0x100000000) == 0 && a6 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)()
{
  _StringGuts.grow(_:)(28);
  v0._object = (void *)0x8000000228360BF0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v0);
  Float.write<A>(to:)();
  v1._uint64_t countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #3 in __RKEntityShowAction.perform(with:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    if ((*(unsigned char *)(result + 136) & 1) != 0 || *(void *)(v8 + 16) != *(void *)(result + 128))
    {
      return swift_release();
    }
    else
    {
      v16[0] = a3;
      v16[1] = a4;
      uint64_t v11 = static os_log_type_t.info.getter();
      a5(v11, v16);
      swift_beginAccess();
      uint64_t v12 = *(void *)(v10 + 96);
      char v13 = *(unsigned char *)(v10 + 104);
      *(void *)(v10 + 96) = 2;
      *(unsigned char *)(v10 + 104) = 1;
      uint64_t v14 = v12;
      char v15 = v13;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v14);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t closure #5 in __RKEntityShowAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    if (*(void *)(result + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v9 = CACurrentMediaTime();
    }
    if (*(double *)(v8 + 336) > v9) {
      return swift_release();
    }
    if ((*(unsigned char *)(v8 + 136) & 1) != 0 || (REAnimationComponentGetComponentType(), !REEntityGetComponentByClass()))
    {
      uint64_t v17 = a4;
      uint64_t v18 = a5;
      os_log_type_t v11 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v11, &v17);
    }
    else
    {
      if (!REAnimationComponentIsCompleted())
      {
        uint64_t v17 = a4;
        uint64_t v18 = a5;
        os_log_type_t v14 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v14, &v17);
        return swift_release();
      }
      uint64_t v17 = a4;
      uint64_t v18 = a5;
      os_log_type_t v10 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v10, &v17);
    }
    swift_beginAccess();
    uint64_t v12 = *(void *)(v8 + 96);
    char v13 = *(unsigned char *)(v8 + 104);
    *(void *)(v8 + 96) = 2;
    *(unsigned char *)(v8 + 104) = 1;
    uint64_t v15 = v12;
    char v16 = v13;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v15);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityShowAction.reversed()()
{
  swift_beginAccess();
  type metadata accessor for __RKEntityHideAction();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 174) = 0;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(void *)(v0 + 336) = 0;
  *(_DWORD *)(v0 + 148) = 1092616192;
  *(_WORD *)(v0 + 152) = 0;
  *(unsigned char *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 154) = 0;
  *(_DWORD *)(v0 + 156) = 0;
  *(void *)(v0 + 112) = 0;
  *(_WORD *)(v0 + 172) = 0;
  *(void *)(v0 + 164) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(void *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 136) = 1;
  *(void *)(v0 + 140) = 0x3F80000000000000;
  uint64_t v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityShowAction.description.getter()
{
  return __RKEntityShowAction.description.getter();
}

{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  long long v5;

  BYTE8(v5) = 0;
  v1._uint64_t countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  *(void *)&Swift::String v5 = *(unsigned __int8 *)(v0 + 173);
  _print_unlocked<A, B>(_:_:)();
  return *(void *)((char *)&v5 + 1);
}

uint64_t __RKEntityShowAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  __int16 v3 = *(_WORD *)(v1 + 152);
  char v4 = *(unsigned char *)(v1 + 154);
  int v5 = *(_DWORD *)(v1 + 156);
  char v6 = *(unsigned char *)(v1 + 160);
  __int16 v7 = *(_WORD *)(v1 + 172);
  uint64_t v8 = type metadata accessor for __RKEntityShowAction();
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(void *)(v9 + 336) = 0;
  *(void *)(v9 + 144) = *(void *)(v1 + 144);
  *(_WORD *)(v9 + 152) = v3;
  *(unsigned char *)(v9 + 154) = v4;
  *(_DWORD *)(v9 + 156) = v5;
  *(void *)(v9 + 164) = *(void *)(v1 + 164);
  *(unsigned char *)(v9 + 160) = v6;
  *(_WORD *)(v9 + 172) = v7;
  *(void *)(v9 + 112) = 0;
  *(unsigned char *)(v9 + 120) = 1;
  *(void *)(v9 + 128) = 0;
  *(unsigned char *)(v9 + 136) = 1;
  *(_DWORD *)(v9 + 140) = 0;
  uint64_t v10 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v10);
  a1[3] = v8;
  *a1 = result;
  return result;
}

uint64_t @objc __RKEntitySetOpacityAction.copy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t))
{
  uint64_t v5 = swift_retain();
  a4(v8, v5);
  swift_release();
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  uint64_t v6 = _bridgeAnythingToObjectiveC<A>(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t __RKEntityShowAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    __int16 v5 = *(_WORD *)(v1 + 152);
    char v6 = *(unsigned char *)(v1 + 154);
    int v7 = *(_DWORD *)(v1 + 156);
    char v8 = *(unsigned char *)(v1 + 160);
    __int16 v9 = *(_WORD *)(v1 + 172);
    type metadata accessor for __RKEntityShowAction();
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(void *)(v10 + 336) = 0;
    *(void *)(v10 + 144) = *(void *)(v1 + 144);
    *(_WORD *)(v10 + 152) = v5;
    *(unsigned char *)(v10 + 154) = v6;
    *(_DWORD *)(v10 + 156) = v7;
    *(void *)(v10 + 164) = *(void *)(v1 + 164);
    *(unsigned char *)(v10 + 160) = v8;
    *(_WORD *)(v10 + 172) = v9;
    *(void *)(v10 + 112) = 0;
    *(unsigned char *)(v10 + 120) = 1;
    *(void *)(v10 + 128) = 0;
    *(unsigned char *)(v10 + 136) = 1;
    *(_DWORD *)(v10 + 140) = 0;
    uint64_t v11 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v11);
  }
  else
  {
    __RKEntityShowAction.copy(with:)(v13);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v12;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityShowAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityShowAction.init(targetEntity:)()
{
}

uint64_t __RKEntityHideAction.init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)(uint64_t a1, char *a2, char *a3, char a4, char a5, char *a6, char *a7, float a8, float a9, float a10, float a11, float a12)
{
  char v13 = *a2;
  char v14 = *a3;
  char v15 = *a6;
  char v16 = *a7;
  *(unsigned char *)(v12 + 174) = 0;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(void *)(v12 + 336) = 0;
  *(float *)(v12 + 144) = a8;
  *(float *)(v12 + 148) = a9;
  *(unsigned char *)(v12 + 152) = v13;
  *(unsigned char *)(v12 + 153) = v14;
  *(float *)(v12 + 164) = a11;
  *(float *)(v12 + 168) = a12;
  *(unsigned char *)(v12 + 160) = a5;
  *(unsigned char *)(v12 + 154) = a4;
  *(float *)(v12 + 156) = a10;
  *(unsigned char *)(v12 + 172) = v15;
  *(unsigned char *)(v12 + 173) = v16;
  *(void *)(v12 + 112) = 0;
  *(unsigned char *)(v12 + 120) = 1;
  *(void *)(v12 + 128) = 0;
  *(unsigned char *)(v12 + 136) = 1;
  *(_DWORD *)(v12 + 140) = 0;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t type metadata accessor for __RKEntityVisibilityAction()
{
  return self;
}

void __RKEntityHideAction.updateFadeOut(_:)(char a1)
{
  if (*(unsigned char *)(v1 + 120))
  {
    if (*(void *)(v1 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    *(double *)(v1 + 112) = v2;
    *(unsigned char *)(v1 + 120) = 0;
    return;
  }
  double v4 = *(double *)(v1 + 112);
  if (*(void *)(v1 + 24)) {
    REEngineGetCurrentTime();
  }
  else {
    double v5 = CACurrentMediaTime();
  }
  double v6 = v5 - v4;
  float v7 = *(float *)(v1 + 144);
  if (v6 > v7) {
    double v6 = v7;
  }
  if (v6 <= 0.0)
  {
    double v6 = 0.0;
    if (v7 <= 0.0) {
      goto LABEL_14;
    }
  }
  else if (v6 >= v7)
  {
LABEL_14:
    specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v1 + 156));
    if (*(float *)(v1 + 156) == 0.0)
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(v1 + 16);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 16);
        swift_retain();
        MEMORY[0x22A68E740](v9, 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
        swift_release();
      }
    }
    return;
  }
  float v10 = v6;
  float v11 = 1.0 - (float)(v10 / v7);
  if (a1) {
    float v12 = sinf((float)((float)((float)(v11 + -1.0) + 1.0) * -3.1416) * 0.5) + 1.0;
  }
  else {
    float v12 = sinf((float)((float)(1.0 - v11) * 3.1416) * 0.5);
  }
  float v13 = 1.0 - v12;
  if (v13 <= *(float *)(v1 + 156)) {
    float v13 = *(float *)(v1 + 156);
  }

  specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v13);
}

uint64_t __RKEntityHideAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v128 = *MEMORY[0x263EF8340];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  specialized InteractionsLogger.init<A>(_:_:)(v2, &v123);
  long long v3 = v123;
  double v4 = *(void **)(v0 + 16);
  if (!v4)
  {
    uint64_t v8 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v8, &v123);
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  double v5 = (void *)(v0 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 104) == 1 && *v5 == 1)
  {
    swift_beginAccess();
    if (*(unsigned char *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_11:
      long long v123 = v3;
      uint64_t v9 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v9, &v123);
      goto LABEL_12;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_11;
  }
  uint64_t v6 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.hideAction, (void (*)(uint64_t))type metadata accessor for __RKEntityHideAction);
  swift_release();
  if (v6)
  {
    long long v123 = v3;
    os_log_type_t v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, (uint64_t *)&v123);
LABEL_12:
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  uint64_t v11 = Entity.hideAction.getter(&static Entity.AssociatedObjectKeys.showAction, (void (*)(uint64_t))type metadata accessor for __RKEntityShowAction);
  if (v11)
  {
    uint64_t v12 = v11;
    long long v123 = v3;
    uint64_t v13 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v13, &v123);
    swift_beginAccess();
    uint64_t v14 = *(void *)(v12 + 96);
    char v15 = *(unsigned char *)(v12 + 104);
    *(void *)(v12 + 96) = 2;
    *(unsigned char *)(v12 + 104) = 1;
    *(void *)&long long v123 = v14;
    BYTE8(v123) = v15;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v123);
    swift_release_n();
  }
  *(unsigned char *)(v1 + 174) = 0;
  uint64_t v16 = *(void *)(v1 + 96);
  char v17 = *(unsigned char *)(v1 + 104);
  *(void *)(v1 + 96) = 1;
  *(unsigned char *)(v1 + 104) = 1;
  *(void *)&long long v123 = v16;
  BYTE8(v123) = v17;
  __RKEntityAction.state.didset((uint64_t)&v123);
  *(void *)(v1 + 112) = 0;
  *(unsigned char *)(v1 + 120) = 1;
  swift_beginAccess();
  swift_retain();
  objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.hideAction, (id)v1, (void *)1);
  swift_endAccess();
  swift_release();
  uint64_t v18 = v4[2];
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (!REEntityGetSceneNullable())
  {
    swift_release();
    goto LABEL_10;
  }
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_12;
  }
  uint64_t ServiceLocator = REECSManagerGetServiceLocator();
  uint64_t v20 = MEMORY[0x22A692220](ServiceLocator);
  if (!v20) {
    goto LABEL_12;
  }
  uint64_t v21 = v20;
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_12;
  }
  uint64_t v106 = v21;
  RETransformComponentGetLocalUnanimatedSRT();
  __n128 v112 = v23;
  __n128 v113 = v24;
  float32x4_t v25 = vmulq_f32(v22, v22);
  if ((float)(v25.f32[2] + vaddv_f32(*(float32x2_t *)v25.f32)) < 0.00000011921)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    os_log_type_t v26 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    float32x4_t v22 = (float32x4_t)xmmword_22834C450;
  }
  float32x4_t v114 = v22;
  RETransformComponentGetLocalPose();
  uint64_t v119 = v18;
  if (*(unsigned char *)(v1 + 172))
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    BOOL v28 = 0;
    if ((v27 & 1) == 0)
    {
      switch(*(unsigned char *)(v1 + 173))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          BOOL v28 = 0;
          if ((v29 & 1) == 0) {
            BOOL v28 = *(float *)(v1 + 144) > 0.0;
          }
          break;
        default:
          goto LABEL_26;
      }
    }
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease();
    BOOL v28 = 0;
  }
  BOOL v109 = v28;
  switch(*(unsigned char *)(v1 + 173))
  {
    case 2:
      os_log_type_t v30 = "move out to right";
      goto LABEL_32;
    case 3:
      os_log_type_t v30 = "move out to front";
LABEL_32:
      os_log_type_t v31 = v30 - 32;
      goto LABEL_34;
    case 5:
      goto LABEL_35;
    case 6:
      os_log_type_t v31 = "move out to above";
LABEL_34:
      if (((unint64_t)v31 | 0x8000000000000000) != 0x800000022834DE90) {
        goto LABEL_36;
      }
LABEL_35:
      swift_bridgeObjectRelease();
      goto LABEL_37;
    default:
LABEL_36:
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v33 = 0;
      if (v32) {
LABEL_37:
      }
        BOOL v33 = *(float *)(v1 + 144) > 0.0;
      switch(*(unsigned char *)(v1 + 173))
      {
        case 2:
          char v34 = "move out to left";
          goto LABEL_42;
        case 3:
          char v34 = "move out to right";
          goto LABEL_42;
        case 5:
          char v34 = "move out to rear";
LABEL_42:
          if (((unint64_t)v34 | 0x8000000000000000) == 0x800000022834DEB0) {
            goto LABEL_43;
          }
          goto LABEL_44;
        case 6:
LABEL_43:
          swift_bridgeObjectRelease();
          goto LABEL_45;
        default:
LABEL_44:
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          BOOL v111 = 0;
          if (v35) {
LABEL_45:
          }
            BOOL v111 = *(float *)(v1 + 144) > 0.0;
          BOOL v110 = v33;
          switch(*(unsigned char *)(v1 + 173))
          {
            case 1:
              goto LABEL_48;
            case 4:
              if (0x800000022834DE70 != 0x800000022834DE10) {
                goto LABEL_49;
              }
LABEL_48:
              swift_bridgeObjectRelease();
              goto LABEL_50;
            default:
LABEL_49:
              char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              BOOL v37 = 0;
              if (v36) {
LABEL_50:
              }
                BOOL v37 = *(float *)(v1 + 144) > 0.0;
              BOOL v105 = v37;
              switch(*(unsigned char *)(v1 + 173))
              {
                case 2:
                  goto LABEL_56;
                case 3:
                  Swift::String v38 = "move out to right";
                  goto LABEL_55;
                case 5:
                  Swift::String v38 = "move out to rear";
                  goto LABEL_55;
                case 6:
                  Swift::String v38 = "move out to above";
LABEL_55:
                  if (((unint64_t)v38 | 0x8000000000000000) != 0x800000022834DE30) {
                    goto LABEL_57;
                  }
LABEL_56:
                  swift_bridgeObjectRelease();
                  goto LABEL_58;
                default:
LABEL_57:
                  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  BOOL v40 = 0;
                  if (v39) {
LABEL_58:
                  }
                    BOOL v40 = *(float *)(v1 + 144) > 0.0;
                  BOOL v104 = v40;
                  switch(*(unsigned char *)(v1 + 173))
                  {
                    case 2:
                      char v41 = "move out to left";
                      goto LABEL_63;
                    case 3:
                      goto LABEL_64;
                    case 5:
                      char v41 = "move out to rear";
                      goto LABEL_63;
                    case 6:
                      char v41 = "move out to above";
LABEL_63:
                      if (((unint64_t)v41 | 0x8000000000000000) != 0x800000022834DE50) {
                        goto LABEL_65;
                      }
LABEL_64:
                      swift_bridgeObjectRelease();
                      goto LABEL_66;
                    default:
LABEL_65:
                      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      BOOL v43 = 0;
                      if (v42) {
LABEL_66:
                      }
                        BOOL v43 = *(float *)(v1 + 144) > 0.0;
                      BOOL v103 = v43;
                      switch(*(unsigned char *)(v1 + 173))
                      {
                        case 1:
                          if (0x800000022834DE10 != 0x800000022834DE70) {
                            goto LABEL_70;
                          }
                          goto LABEL_69;
                        case 4:
LABEL_69:
                          swift_bridgeObjectRelease();
                          goto LABEL_71;
                        default:
LABEL_70:
                          char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          BOOL v45 = 0;
                          if (v44) {
LABEL_71:
                          }
                            BOOL v45 = *(float *)(v1 + 144) > 0.0;
                          BOOL v102 = v45;
                          switch(*(unsigned char *)(v1 + 173))
                          {
                            case 8:
                              swift_bridgeObjectRelease();
                              goto LABEL_75;
                            default:
                              char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
                              swift_bridgeObjectRelease();
                              BOOL v47 = 0;
                              if (v46) {
LABEL_75:
                              }
                                BOOL v47 = *(float *)(v1 + 144) > 0.0;
                              BOOL v100 = v47;
                              switch(*(unsigned char *)(v1 + 173))
                              {
                                case 9:
                                  swift_bridgeObjectRelease();
                                  goto LABEL_78;
                                default:
                                  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                                  swift_bridgeObjectRelease();
                                  BOOL v49 = 0;
                                  if (v48) {
LABEL_78:
                                  }
                                    BOOL v49 = *(float *)(v1 + 144) > 0.0;
                                  break;
                              }
                              break;
                          }
                          break;
                      }
                      break;
                  }
                  break;
              }
              break;
          }
          break;
      }
      break;
  }
  BOOL v101 = v49;
  switch(*(unsigned char *)(v1 + 173))
  {
    case 7:
      swift_bridgeObjectRelease();
      goto LABEL_83;
    default:
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v51 = 0;
      if (v50) {
LABEL_83:
      }
        BOOL v51 = *(float *)(v1 + 144) > 0.0;
      RESRTInverse();
      RESRTMatrix();
      RESRTMatrix();
      REMakeSRTFromMatrix();
      long long v116 = v52;
      float32x4_t v107 = v54;
      __n128 v108 = v53;
      if (*(unsigned char *)(v1 + 154) == 1 && *(float *)(v1 + 144) > 0.0)
      {
        specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(1.0);
        v122.i64[0] = 0;
        long long v120 = 0u;
        __n128 v121 = 0u;
        uint64_t v55 = swift_allocObject();
        swift_weakInit();
        specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v120, (uint64_t)partial apply for closure #1 in __RKEntityHideAction.perform(with:), v55, (uint64_t *)&v123);
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)&v120, &demangling cache variable for type metadata for EventSource?);
        swift_beginAccess();
        outlined assign with take of Cancellable?((uint64_t)&v123, v1 + 296);
        swift_endAccess();
      }
      else
      {
        float v56 = *(float *)(v1 + 156);
        if (v56 != 1.0)
        {
          specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v56);
          if (*(float *)(v1 + 144) == 0.0 && (*(unsigned char *)(v1 + 154) != 1 || *(float *)(v1 + 156) == 0.0))
          {
            MEMORY[0x22A68E740](v4[2], 0);
            RENetworkMarkEntityMetadataDirty();
            RERenderOptionsComponentGetComponentType();
            REEntityGetOrAddComponentByClass();
            RERenderOptionsComponentSetVisibilityMode();
            RENetworkMarkComponentDirty();
          }
        }
      }
      if (v109)
      {
        RERigidBodyComponentGetComponentType();
        uint64_t ComponentByClass = REEntityGetComponentByClass();
        BOOL v58 = ComponentByClass == 0;
        if (ComponentByClass)
        {
          int MotionType = RERigidBodyComponentGetMotionType();
          if (MotionType != 1)
          {
            RERigidBodyComponentSetMotionType();
            RENetworkMarkComponentDirty();
          }
        }
        else
        {
          int MotionType = 0;
        }
        float v72 = *(float *)(v1 + 148)
            / (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).f32[0]/ 3.0);
        if (v110)
        {
          long long v123 = (__int128)v113;
          __n128 v124 = v112;
          float32x4_t v125 = v114;
          Entity.boundingBox.getter();
          LOBYTE(v120) = *(unsigned char *)(v1 + 172);
          uint64_t v73 = specialized static __RKVisibilityHideLaunchAnimation.createVisibilityHideLaunchAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, *(float32x4_t *)&zmmword_22830EC90[48], v106, &v120, 1);
        }
        else if (v111)
        {
          long long v123 = (__int128)v113;
          __n128 v124 = v112;
          float32x4_t v125 = v114;
          Entity.boundingBox.getter();
          LOBYTE(v120) = *(unsigned char *)(v1 + 172);
          uint64_t v73 = specialized static __RKVisibilityHideDropAnimation.createVisibilityHideDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, *(float32x4_t *)&zmmword_22830EC90[48], v106, &v120, 1);
        }
        else
        {
          if (!v51)
          {
            if (v101)
            {
              long long v123 = (__int128)v113;
              __n128 v124 = v112;
              float32x4_t v125 = v114;
              Entity.boundingBox.getter();
              LOBYTE(v120) = *(unsigned char *)(v1 + 172);
              uint64_t v73 = specialized static __RKVisibilityHideScaleUpAnimation.createVisibilityHideScaleUpAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, *(float32x4_t *)&zmmword_22830EC90[48], v106, &v120, 1);
              if (*(void *)(v73 + 16)) {
                goto LABEL_115;
              }
            }
            else
            {
              if (v100)
              {
                long long v123 = (__int128)v113;
                __n128 v124 = v112;
                float32x4_t v125 = v114;
                Entity.boundingBox.getter();
                LOBYTE(v120) = *(unsigned char *)(v1 + 172);
                uint64_t v73 = specialized static __RKVisibilityHideScaleAnimation.createVisibilityHideScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, *(float32x4_t *)&zmmword_22830EC90[48], v106, &v120, 1);
              }
              else
              {
                if (v104) {
                  unsigned int v93 = -1;
                }
                else {
                  unsigned int v93 = 0;
                }
                int8x16_t v94 = vbslq_s8((int8x16_t)vdupq_n_s32(v93), *(int8x16_t *)&zmmword_22830EC90[48], (int8x16_t)xmmword_22834C460);
                if (v105) {
                  unsigned int v95 = -1;
                }
                else {
                  unsigned int v95 = 0;
                }
                int8x16_t v96 = vbslq_s8((int8x16_t)vdupq_n_s32(v95), (int8x16_t)xmmword_22834C470, v94);
                if (v102) {
                  unsigned int v97 = -1;
                }
                else {
                  unsigned int v97 = 0;
                }
                int8x16_t v98 = vbslq_s8((int8x16_t)vdupq_n_s32(v97), (int8x16_t)xmmword_22831EFB0, *(int8x16_t *)&zmmword_22830EC90[48]);
                if (v105 || v104 || v103) {
                  unsigned int v99 = -1;
                }
                else {
                  unsigned int v99 = 0;
                }
                float32x4_t v118 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v99), v96, v98);
                long long v123 = (__int128)v113;
                __n128 v124 = v112;
                float32x4_t v125 = v114;
                Entity.boundingBox.getter();
                LOBYTE(v120) = *(unsigned char *)(v1 + 172);
                uint64_t v73 = specialized static __RKVisibilityHideMoveOutAnimation.createVisibilityHideMoveOutAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, v118, v106, &v120, 1);
              }
              if (*(void *)(v73 + 16)) {
                goto LABEL_115;
              }
            }
LABEL_128:
            swift_bridgeObjectRelease();
            uint64_t SRTAnimation = 0;
            goto LABEL_120;
          }
          long long v123 = (__int128)v113;
          __n128 v124 = v112;
          float32x4_t v125 = v114;
          Entity.boundingBox.getter();
          LOBYTE(v120) = *(unsigned char *)(v1 + 172);
          uint64_t v73 = specialized static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(&v123, *(float *)(v1 + 144), v72, *(float32x4_t *)&zmmword_22830EC90[48], v106, &v120, 1);
        }
        if (*(void *)(v73 + 16))
        {
LABEL_115:
          uint64_t SRTAnimation = *(void *)(v73 + 32);
          swift_bridgeObjectRelease();
          goto LABEL_120;
        }
        goto LABEL_128;
      }
      if (v105 || v104 || v103 || v102 || v33 || v111)
      {
        RERigidBodyComponentGetComponentType();
        uint64_t v60 = REEntityGetComponentByClass();
        BOOL v58 = v60 == 0;
        if (v60)
        {
          int MotionType = RERigidBodyComponentGetMotionType();
          if (MotionType != 1)
          {
            RERigidBodyComponentSetMotionType();
            RENetworkMarkComponentDirty();
          }
        }
        else
        {
          int MotionType = 0;
        }
        REFromToByAnimationDefaultParameters();
        RESRTIdentity();
        long long v123 = v74;
        __n128 v124 = v75;
        float32x4_t v125 = v76;
        long long v120 = v116;
        __n128 v121 = v108;
        float32x4_t v122 = v107;
        LOBYTE(v127) = *(unsigned char *)(v1 + 152);
        specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(&v127, (uint64_t)v126);
        outlined init with take of Transform?((uint64_t)v126, (uint64_t)&v127, &demangling cache variable for type metadata for REEasingFunction?);
        uint64_t SRTAnimation = REAssetManagerTimelineAssetCreateSRTAnimation();
      }
      else if (v100 || v101)
      {
        REFromToByAnimationDefaultParameters();
        if (v101) {
          unsigned int v61 = -1;
        }
        else {
          unsigned int v61 = 0;
        }
        __asm { FMOV            V1.4S, #10.0 }
        int8x16_t v67 = vandq_s8(_Q1, (int8x16_t)vdupq_n_s32(v61));
        _Q1.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u64[0];
        *(float *)_Q1.i32 = *(float *)_Q1.i32 / 3.0;
        *(float32x2_t *)&long long v68 = vdiv_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q1.i8, 0));
        *((float *)&v68 + 2) = *(float *)&v67.i32[2] / *(float *)_Q1.i32;
        HIDWORD(v68) = 0;
        long long v117 = v68;
        RESRTIdentity();
        long long v123 = v69;
        __n128 v124 = v70;
        float32x4_t v125 = v71;
        long long v120 = v117;
        __n128 v121 = v70;
        float32x4_t v122 = v71;
        LOBYTE(v127) = *(unsigned char *)(v1 + 152);
        specialized static __RKEntityTransformAction.reEaseFunction(from:type:)(&v127, (uint64_t)v126);
        outlined init with take of Transform?((uint64_t)v126, (uint64_t)&v127, &demangling cache variable for type metadata for REEasingFunction?);
        uint64_t SRTAnimation = REAssetManagerTimelineAssetCreateSRTAnimation();
        int MotionType = 0;
        BOOL v58 = 1;
      }
      else if (v51)
      {
        BOOL v58 = 1;
        uint64_t SRTAnimation = (uint64_t)specialized __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(v106, 1, 0, (int8x16_t)v114, v113, v112, *(float *)(v1 + 144));
        int MotionType = 0;
      }
      else
      {
        uint64_t SRTAnimation = 0;
        int MotionType = 0;
        BOOL v58 = 1;
      }
LABEL_120:
      REProjectiveShadowReceiverComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      REProjectiveShadowReceiverComponentGetShadowIntensity();
      *(_DWORD *)(v1 + 140) = v77;
      uint64_t v78 = swift_allocObject();
      swift_weakInit();
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v78;
      *(void *)(v79 + 24) = v4;
      *(void *)(v79 + 32) = v119;
      *(_DWORD *)(v79 + 40) = MotionType;
      *(unsigned char *)(v79 + 44) = v58;
      uint64_t v80 = *(void *)(v1 + 32);
      *(void *)(v1 + 32) = partial apply for specialized closure #2 in __RKEntityHideAction.perform(with:);
      *(void *)(v1 + 40) = v79;
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v80);
      RENetworkMarkComponentDirty();
      uint64_t v81 = type metadata accessor for Entity();
      v121.n128_u64[1] = v81;
      v122.i64[0] = (uint64_t)&protocol witness table for Entity;
      *(void *)&long long v120 = v4;
      uint64_t v82 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v120, 0, (char **)&v123);
      uint64_t v83 = swift_allocObject();
      *(void *)(v83 + 16) = partial apply for closure #3 in __RKEntityHideAction.perform(with:);
      *(void *)(v83 + 24) = v82;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
      uint64_t v84 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      uint64_t v85 = type metadata accessor for AnyCancellable();
      v124.n128_u64[1] = v85;
      v125.i64[0] = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v123 = v84;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v120, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v123, v1 + 176);
      swift_endAccess();
      v121.n128_u64[1] = v81;
      v122.i64[0] = (uint64_t)&protocol witness table for Entity;
      *(void *)&long long v120 = v4;
      uint64_t v86 = swift_allocObject();
      swift_weakInit();
      swift_retain();
      specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v120, 0, (char **)&v123);
      uint64_t v87 = swift_allocObject();
      *(void *)(v87 + 16) = partial apply for closure #3 in __RKEntityHideAction.perform(with:);
      *(void *)(v87 + 24) = v86;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
      uint64_t v88 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      v124.n128_u64[1] = v85;
      v125.i64[0] = MEMORY[0x263EFDD10];
      swift_release();
      *(void *)&long long v123 = v88;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v120, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v123, v1 + 216);
      swift_endAccess();
      if (*(void *)(v1 + 24)) {
        REEngineGetCurrentTime();
      }
      else {
        double v89 = CACurrentMediaTime();
      }
      *(double *)(v1 + 336) = v89 + *(float *)(v1 + 144) + 0.0166666667;
      v122.i64[0] = 0;
      long long v120 = 0u;
      __n128 v121 = 0u;
      uint64_t v90 = swift_allocObject();
      swift_weakInit();
      os_log_type_t v91 = (void *)swift_allocObject();
      v91[2] = v90;
      v91[3] = v119;
      v91[4] = v4;
      swift_retain();
      specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v120, (uint64_t)partial apply for closure #5 in __RKEntityHideAction.perform(with:), (uint64_t)v91, (uint64_t *)&v123);
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)&v120, &demangling cache variable for type metadata for EventSource?);
      swift_beginAccess();
      outlined assign with take of Cancellable?((uint64_t)&v123, v1 + 256);
      swift_endAccess();
      if (SRTAnimation)
      {
        *(void *)&long long v123 = 2;
        DWORD2(v123) = 4864;
        v124.n128_u64[0] = (unint64_t)"HIDEVISIBILITY";
        v124.n128_u8[8] = 0;
        *(void *)(v1 + 128) = REAnimationComponentPlay();
        *(unsigned char *)(v1 + 136) = 0;
        RERelease();
      }
      long long v123 = v3;
      uint64_t v92 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v92, &v123);
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
  }
}

uint64_t closure #1 in __RKEntityHideAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    __RKEntityHideAction.updateFadeOut(_:)(1);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #2 in __RKEntityHideAction.perform(with:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = result + 176;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v8, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v8);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 256, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 256);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 296, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 296);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7 + 216, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7 + 216);
    swift_endAccess();
    swift_beginAccess();
    if (*(void *)(v7 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v7 + 104) == 1) && *(void *)(v7 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v7 + 128) = 0;
      *(unsigned char *)(v7 + 136) = 1;
    }
    if ((*(unsigned char *)(v7 + 174) & 1) == 0)
    {
      specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v7 + 156));
      if (*(unsigned char *)(v7 + 154) != 1 || *(float *)(v7 + 156) == 0.0)
      {
        MEMORY[0x22A68E740](a2[2], 0);
        RENetworkMarkEntityMetadataDirty();
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RERenderOptionsComponentSetVisibilityMode();
        RENetworkMarkComponentDirty();
      }
    }
    swift_beginAccess();
    objc_setAssociatedObject(a2, &static Entity.AssociatedObjectKeys.hideAction, 0, (void *)1);
    swift_endAccess();
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a4 & 0x100000000) == 0 && a4 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityHideAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 136) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 128))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t closure #5 in __RKEntityHideAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    if (*(double *)(v1 + 336) <= v2
      && ((*(unsigned char *)(v1 + 136) & 1) != 0
       || (REAnimationComponentGetComponentType(), !REEntityGetComponentByClass())
       || (REAnimationComponentIsCompleted() & 1) != 0
       || (RERenderOptionsComponentGetComponentType(),
           REEntityGetOrAddComponentByClass(),
           RERenderOptionsComponentGetVisibilityMode())
       || (REEntityGetSelfEnabled() & 1) == 0))
    {
      swift_beginAccess();
      uint64_t v3 = *(void *)(v1 + 96);
      char v4 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 2;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v5 = v3;
      char v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityHideAction.reversed()()
{
  swift_beginAccess();
  type metadata accessor for __RKEntityShowAction();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 192) = 0u;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(void *)(v0 + 336) = 0;
  *(_DWORD *)(v0 + 148) = 1092616192;
  *(_WORD *)(v0 + 152) = 0;
  *(unsigned char *)(v0 + 154) = 0;
  *(_DWORD *)(v0 + 156) = 1065353216;
  *(unsigned char *)(v0 + 160) = 0;
  *(void *)(v0 + 112) = 0;
  *(_WORD *)(v0 + 172) = 0;
  *(void *)(v0 + 164) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(void *)(v0 + 128) = 0;
  *(unsigned char *)(v0 + 136) = 1;
  *(void *)(v0 + 140) = 0x3F80000000000000;
  uint64_t v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityHideAction.description.getter()
{
  return __RKEntityShowAction.description.getter();
}

Swift::Bool __swiftcall __RKEntityHideAction.stop()()
{
  *(unsigned char *)(v0 + 174) = 1;
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 104) != 1 || *(void *)(v0 + 96) != 1) {
    return 0;
  }
  *(void *)(v0 + 96) = 3;
  Swift::Bool v1 = 1;
  *(unsigned char *)(v0 + 104) = 1;
  uint64_t v3 = 1;
  char v4 = 1;
  __RKEntityAction.state.didset((uint64_t)&v3);
  return v1;
}

uint64_t __RKEntityHideAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  __int16 v3 = *(_WORD *)(v1 + 152);
  char v4 = *(unsigned char *)(v1 + 154);
  int v5 = *(_DWORD *)(v1 + 156);
  char v6 = *(unsigned char *)(v1 + 160);
  __int16 v7 = *(_WORD *)(v1 + 172);
  uint64_t v8 = type metadata accessor for __RKEntityHideAction();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 174) = 0;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  *(_OWORD *)(v9 + 272) = 0u;
  *(_OWORD *)(v9 + 288) = 0u;
  *(_OWORD *)(v9 + 304) = 0u;
  *(_OWORD *)(v9 + 320) = 0u;
  *(void *)(v9 + 336) = 0;
  *(void *)(v9 + 144) = *(void *)(v1 + 144);
  *(_WORD *)(v9 + 152) = v3;
  *(void *)(v9 + 164) = *(void *)(v1 + 164);
  *(unsigned char *)(v9 + 160) = v6;
  *(unsigned char *)(v9 + 154) = v4;
  *(_DWORD *)(v9 + 156) = v5;
  *(_WORD *)(v9 + 172) = v7;
  *(void *)(v9 + 112) = 0;
  *(unsigned char *)(v9 + 120) = 1;
  *(void *)(v9 + 128) = 0;
  *(unsigned char *)(v9 + 136) = 1;
  *(_DWORD *)(v9 + 140) = 0;
  uint64_t v10 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v10);
  a1[3] = v8;
  *a1 = result;
  return result;
}

uint64_t __RKEntityHideAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    __int16 v5 = *(_WORD *)(v1 + 152);
    char v6 = *(unsigned char *)(v1 + 154);
    int v7 = *(_DWORD *)(v1 + 156);
    char v8 = *(unsigned char *)(v1 + 160);
    __int16 v9 = *(_WORD *)(v1 + 172);
    type metadata accessor for __RKEntityHideAction();
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 174) = 0;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 208) = 0u;
    *(_OWORD *)(v10 + 224) = 0u;
    *(_OWORD *)(v10 + 240) = 0u;
    *(_OWORD *)(v10 + 256) = 0u;
    *(_OWORD *)(v10 + 272) = 0u;
    *(_OWORD *)(v10 + 288) = 0u;
    *(_OWORD *)(v10 + 304) = 0u;
    *(_OWORD *)(v10 + 320) = 0u;
    *(void *)(v10 + 336) = 0;
    *(void *)(v10 + 144) = *(void *)(v1 + 144);
    *(_WORD *)(v10 + 152) = v5;
    *(void *)(v10 + 164) = *(void *)(v1 + 164);
    *(unsigned char *)(v10 + 160) = v8;
    *(unsigned char *)(v10 + 154) = v6;
    *(_DWORD *)(v10 + 156) = v7;
    *(_WORD *)(v10 + 172) = v9;
    *(void *)(v10 + 112) = 0;
    *(unsigned char *)(v10 + 120) = 1;
    *(void *)(v10 + 128) = 0;
    *(unsigned char *)(v10 + 136) = 1;
    *(_DWORD *)(v10 + 140) = 0;
    uint64_t v11 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v11);
  }
  else
  {
    __RKEntityHideAction.copy(with:)(v13);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v12;
    }
    else {
      return 0;
    }
  }
}

void __RKEntityHideAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityHideAction.init(targetEntity:)()
{
}

uint64_t __RKEntityShowAction.__ivar_destroyer()
{
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityShowAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityShowAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 176, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 216, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 256, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 296, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)()
{
  return implicit closure #3 in __RKEntityToggleVisibilityAction.perform(with:)(*(unsigned char *)(v0 + 16), *(unsigned char *)(v0 + 17));
}

uint64_t type metadata accessor for __RKEntityToggleVisibilityAction()
{
  return self;
}

uint64_t partial apply for implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)()
{
  return implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(v0, 39, 0xD000000000000025, (void *)0x8000000228360CA0);
}

void specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(float a1)
{
  uint64_t v3 = (void **)(v1 + 16);
  if (a1 >= 1.0)
  {
    swift_beginAccess();
    if (*v3)
    {
      swift_retain();
      if (REComponentClassFromType()) {
        REEntityRemoveComponentByClass();
      }
      swift_release();
      char v4 = *v3;
      if (v4)
      {
        swift_retain();
        v5.super.super.isCGFloat a = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v4, &static Entity.AssociatedObjectKeys.opacity, v5.super.super.isa, (void *)1);
LABEL_17:
        swift_endAccess();
        swift_release();
      }
    }
  }
  else
  {
    swift_beginAccess();
    if (!*v3) {
      return;
    }
    swift_retain();
    if (REEntityGetComponent())
    {
      REHierarchicalFadeComponentGetOpacity();
    }
    else
    {
      swift_release();
      if (!*v3) {
        return;
      }
      swift_retain();
      LOBYTE(v11[0]) = 0;
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(1065353216);
    }
    swift_release();
    if (*v3)
    {
      swift_retain();
      char v6 = Entity.components.modify(v11);
      char v8 = specialized Entity.ComponentSet.subscript.modify((uint64_t)v10);
      if ((*(unsigned char *)(v7 + 4) & 1) == 0) {
        *(float *)uint64_t v7 = a1;
      }
      v8((uint64_t)v10, 0);
      v6(v11, 0);
      swift_release();
      __int16 v9 = *v3;
      if (v9)
      {
        swift_retain();
        v5.super.super.isCGFloat a = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v9, &static Entity.AssociatedObjectKeys.opacity, v5.super.super.isa, (void *)1);
        goto LABEL_17;
      }
    }
  }
}

uint64_t sub_2282E394C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2282E3984()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #2 in __RKEntitySetOpacityAction.perform(with:)()
{
  return closure #2 in __RKEntitySetOpacityAction.perform(with:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_2282E39A8()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #1 in __RKEntitySetOpacityAction.perform(with:)(uint64_t a1)
{
  return closure #1 in __RKEntitySetOpacityAction.perform(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for __RKEntitySetOpacityAction()
{
  return self;
}

uint64_t partial apply for implicit closure #10 in __RKEntityShowAction.perform(with:)()
{
  return implicit closure #10 in __RKEntityShowAction.perform(with:)(v0);
}

uint64_t partial apply for implicit closure #25 in __RKEntityShowAction.perform(with:)()
{
  return implicit closure #25 in __RKEntityShowAction.perform(with:)();
}

uint64_t sub_2282E3A00()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 61, 7);
}

uint64_t partial apply for specialized closure #2 in __RKEntityShowAction.perform(with:)()
{
  return specialized closure #2 in __RKEntityShowAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32));
}

uint64_t sub_2282E3A74()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #3 in __RKEntityShowAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, void *))specialized InteractionsLogger.log(_:_:));
}

uint64_t sub_2282E3AC0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_2282E3AF8()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #4 in __RKEntityShowAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, void *))specialized InteractionsLogger.log(_:_:));
}

uint64_t sub_2282E3B44()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for closure #5 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  return closure #5 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void *specialized __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(uint64_t a1, char a2, char a3, int8x16_t a4, __n128 a5, __n128 a6, float a7)
{
  if (a2) {
    unsigned int v11 = -1;
  }
  else {
    unsigned int v11 = 0;
  }
  __asm { FMOV            V3.4S, #1.0 }
  int8x16_t v17 = vbslq_s8((int8x16_t)vdupq_n_s32(v11), _Q3, a4);
  int8x16_t v112 = v17;
  if (a2)
  {
    if (one-time initialization token for identity != -1)
    {
      swift_once();
      v17.i32[2] = v112.i32[2];
    }
    a6 = (__n128)static simd_quatf.identity;
    a5 = 0uLL;
  }
  __n128 v110 = a5;
  __n128 v111 = a6;
  float v18 = *(float *)&v17.i32[2];
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x263F8EE78]);
  uint64_t v20 = result;
  unint64_t v22 = result[2];
  unint64_t v21 = result[3];
  int64_t v23 = v21 >> 1;
  int64_t v24 = v22 + 1;
  if (v21 >> 1 <= v22) {
    goto LABEL_48;
  }
  while (1)
  {
    __n128 v26 = v111;
    int8x16_t v25 = v112;
    *(float32x2_t *)&long long v27 = vmul_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_n_s32(0x3F866666u));
    *((float *)&v27 + 2) = v18 * 1.05;
    HIDWORD(v27) = 0;
    void v20[2] = v24;
    BOOL v28 = &v20[6 * v22];
    _OWORD v28[2] = v27;
    void v28[3] = v26;
    __n128 v29 = v110;
    v28[4] = v110;
    unint64_t v30 = v22 + 2;
    if (v23 < (uint64_t)(v22 + 2))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 2, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      int8x16_t v25 = v112;
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v31 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F8CCCCDu));
    *((float *)&v31 + 2) = v18 * 1.1;
    HIDWORD(v31) = 0;
    void v20[2] = v30;
    char v32 = &v20[6 * v24];
    v32[2] = v31;
    uint64_t v32[3] = v26;
    v32[4] = v29;
    unint64_t v33 = v20[3];
    unint64_t v34 = v22 + 3;
    if ((uint64_t)(v22 + 3) > (uint64_t)(v33 >> 1))
    {
      long long v109 = v31;
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v22 + 3, 1, v20);
      long long v31 = v109;
      __n128 v29 = v110;
      __n128 v26 = v111;
      int8x16_t v25 = v112;
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v35 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F933333u));
    *((float *)&v35 + 2) = v18 * 1.15;
    HIDWORD(v35) = 0;
    void v20[2] = v34;
    char v36 = &v20[6 * v30];
    v36[2] = v35;
    v36[3] = v26;
    v36[4] = v29;
    unint64_t v37 = v20[3];
    unint64_t v38 = v22 + 4;
    if ((uint64_t)(v22 + 4) > (uint64_t)(v37 >> 1))
    {
      long long v109 = v31;
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v37 > 1), v22 + 4, 1, v20);
      long long v31 = v109;
      __n128 v29 = v110;
      __n128 v26 = v111;
      int8x16_t v25 = v112;
      uint64_t v20 = result;
    }
    __asm { FMOV            V0.2S, #1.25 }
    *(float32x2_t *)&long long v40 = vmul_f32(*(float32x2_t *)v25.i8, _D0);
    *((float *)&v40 + 2) = v18 * 1.25;
    HIDWORD(v40) = 0;
    void v20[2] = v38;
    char v41 = &v20[6 * v34];
    v41[2] = v40;
    v41[3] = v26;
    v41[4] = v29;
    unint64_t v42 = v20[3];
    unint64_t v43 = v22 + 5;
    if ((uint64_t)(v22 + 5) > (uint64_t)(v42 >> 1))
    {
      long long v109 = v31;
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v22 + 5, 1, v20);
      long long v31 = v109;
      __n128 v29 = v110;
      __n128 v26 = v111;
      int8x16_t v25 = v112;
      uint64_t v20 = result;
    }
    void v20[2] = v43;
    char v44 = &v20[6 * v38];
    v44[2] = v31;
    v44[3] = v26;
    v44[4] = v29;
    unint64_t v45 = v20[3];
    unint64_t v46 = v22 + 6;
    if ((uint64_t)(v22 + 6) > (uint64_t)(v45 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v22 + 6, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      int8x16_t v25 = v112;
      uint64_t v20 = result;
    }
    int8x16_t v47 = v25;
    v47.i32[3] = 0;
    void v20[2] = v46;
    char v48 = &v20[6 * v43];
    v48[2] = v47;
    _OWORD v48[3] = v26;
    v48[4] = v29;
    unint64_t v49 = v20[3];
    unint64_t v50 = v22 + 7;
    if ((uint64_t)(v22 + 7) > (uint64_t)(v49 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v22 + 7, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v51 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F666666u));
    *((float *)&v51 + 2) = v18 * 0.9;
    HIDWORD(v51) = 0;
    void v20[2] = v50;
    long long v52 = &v20[6 * v46];
    v52[2] = v51;
    v52[3] = v26;
    v52[4] = v29;
    unint64_t v53 = v20[3];
    unint64_t v54 = v22 + 8;
    if ((uint64_t)(v22 + 8) > (uint64_t)(v53 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v22 + 8, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v55 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F4CCCCDu));
    *((float *)&v55 + 2) = v18 * 0.8;
    HIDWORD(v55) = 0;
    void v20[2] = v54;
    float v56 = &v20[6 * v50];
    v56[2] = v55;
    v56[3] = v26;
    v56[4] = v29;
    unint64_t v57 = v20[3];
    unint64_t v58 = v22 + 9;
    if ((uint64_t)(v22 + 9) > (uint64_t)(v57 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v57 > 1), v22 + 9, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v59 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F333333u));
    *((float *)&v59 + 2) = v18 * 0.7;
    HIDWORD(v59) = 0;
    void v20[2] = v58;
    uint64_t v60 = &v20[6 * v54];
    v60[2] = v59;
    v60[3] = v26;
    v60[4] = v29;
    unint64_t v61 = v20[3];
    unint64_t v62 = v22 + 10;
    if ((uint64_t)(v22 + 10) > (uint64_t)(v61 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v61 > 1), v22 + 10, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v63 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3F19999Au));
    *((float *)&v63 + 2) = v18 * 0.6;
    HIDWORD(v63) = 0;
    void v20[2] = v62;
    uint64_t v64 = &v20[6 * v58];
    v64[2] = v63;
    v64[3] = v26;
    v64[4] = v29;
    unint64_t v65 = v20[3];
    unint64_t v66 = v22 + 11;
    if ((uint64_t)(v22 + 11) > (uint64_t)(v65 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v22 + 11, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v67 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)0x3F0000003F000000);
    *((float *)&v67 + 2) = v18 * 0.5;
    HIDWORD(v67) = 0;
    void v20[2] = v66;
    long long v68 = &v20[6 * v62];
    v68[2] = v67;
    v68[3] = v26;
    v68[4] = v29;
    unint64_t v69 = v20[3];
    unint64_t v70 = v22 + 12;
    if ((uint64_t)(v22 + 12) > (uint64_t)(v69 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v69 > 1), v22 + 12, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v71 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3ECCCCCDu));
    *((float *)&v71 + 2) = v18 * 0.4;
    HIDWORD(v71) = 0;
    void v20[2] = v70;
    float v72 = &v20[6 * v66];
    v72[2] = v71;
    v72[3] = v26;
    v72[4] = v29;
    unint64_t v73 = v20[3];
    unint64_t v74 = v22 + 13;
    if ((uint64_t)(v22 + 13) > (uint64_t)(v73 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v22 + 13, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v75 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3E99999Au));
    *((float *)&v75 + 2) = v18 * 0.3;
    HIDWORD(v75) = 0;
    void v20[2] = v74;
    float32x4_t v76 = &v20[6 * v70];
    v76[2] = v75;
    v76[3] = v26;
    v76[4] = v29;
    unint64_t v77 = v20[3];
    unint64_t v78 = v22 + 14;
    if ((uint64_t)(v22 + 14) > (uint64_t)(v77 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v77 > 1), v22 + 14, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v79 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3E4CCCCDu));
    *((float *)&v79 + 2) = v18 * 0.2;
    HIDWORD(v79) = 0;
    void v20[2] = v78;
    uint64_t v80 = &v20[6 * v74];
    v80[2] = v79;
    v80[3] = v26;
    v80[4] = v29;
    unint64_t v81 = v20[3];
    int64_t v24 = v22 + 15;
    if ((uint64_t)(v22 + 15) > (uint64_t)(v81 >> 1))
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v81 > 1), v22 + 15, 1, v20);
      __n128 v29 = v110;
      __n128 v26 = v111;
      v25.i64[0] = v112.i64[0];
      uint64_t v20 = result;
    }
    *(float32x2_t *)&long long v82 = vmul_f32(*(float32x2_t *)v25.i8, (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
    *((float *)&v82 + 2) = v18 * 0.1;
    HIDWORD(v82) = 0;
    void v20[2] = v24;
    uint64_t v83 = &v20[6 * v78];
    uint64_t v83[2] = v82;
    v83[3] = v26;
    v83[4] = v29;
    __n128 v113 = v20;
    if ((a3 & 1) == 0)
    {
LABEL_45:
      MEMORY[0x270FA5388](result);
      *(float *)&v100[4] = a7;
      BOOL v101 = &v113;
      char v102 = a2 & 1;
      char v103 = a3 & 1;
      uint64_t v104 = v96;
      float v105 = v18;
      long long v106 = v97;
      long long v107 = v98;
      uint64_t v108 = a1;
      unsigned int v99 = specialized String.withCString<A>(_:)((uint64_t)partial apply for closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:), (uint64_t)v100, 0xD000000000000013, 0x800000022834E910);
      swift_bridgeObjectRelease();
      return v99;
    }
    unint64_t v21 = v22 + 14;
    if (__OFSUB__(v24, 1)) {
      break;
    }
    if ((uint64_t)v21 < 1) {
      goto LABEL_45;
    }
    int64_t v84 = 0;
    uint64_t v85 = v20 + 92;
    uint64_t v86 = (long long *)&v20[6 * v22 + 92];
    uint64_t v87 = 8;
    while (1)
    {
      unint64_t v88 = v20[2];
      if (v84 >= v88) {
        break;
      }
      if (v21 >= v88) {
        goto LABEL_47;
      }
      long long v89 = *(_OWORD *)&v20[v87];
      uint64_t v90 = (long long *)&v85[v87 - 94];
      long long v91 = *v90;
      uint64_t v92 = (long long *)&v85[v87 - 96];
      long long v93 = *v92;
      long long v94 = *(v86 - 1);
      long long v95 = *v86;
      long long *v92 = *(v86 - 2);
      long long *v90 = v94;
      *(_OWORD *)&v20[v87] = v95;
      *(v86 - 2) = v93;
      *(v86 - 1) = v91;
      long long *v86 = v89;
      v86 -= 3;
      ++v84;
      --v21;
      v87 += 6;
      if (v84 >= (uint64_t)v21)
      {
        __n128 v113 = v20;
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v24, 1, v20);
    uint64_t v20 = result;
    unint64_t v21 = result[3];
    int64_t v23 = v21 >> 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_2282E4374()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EEA0]);
}

uint64_t partial apply for closure #1 in __RKEntityShowAction.perform(with:)(uint64_t a1)
{
  return closure #1 in __RKEntityShowAction.perform(with:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t type metadata accessor for __RKEntityHideAction()
{
  return self;
}

uint64_t type metadata accessor for __RKEntityShowAction()
{
  return self;
}

uint64_t sub_2282E43E0()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 45, 7);
}

uint64_t partial apply for specialized closure #2 in __RKEntityHideAction.perform(with:)()
{
  return specialized closure #2 in __RKEntityHideAction.perform(with:)(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

uint64_t partial apply for closure #3 in __RKEntityHideAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityHideAction.perform(with:)(a1);
}

uint64_t sub_2282E4464()
{
  return objectdestroy_7Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_7Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return MEMORY[0x270FA0238](v1, 40, 7);
}

uint64_t partial apply for closure #5 in __RKEntityHideAction.perform(with:)()
{
  return closure #5 in __RKEntityHideAction.perform(with:)();
}

uint64_t partial apply for closure #1 in __RKEntityHideAction.perform(with:)()
{
  return closure #1 in __RKEntityHideAction.perform(with:)();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityActionAnimationStyle()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityActionAnimationStyle] and conformance [A], &demangling cache variable for type metadata for [__RKEntityActionAnimationStyle]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityShowActionBuildInAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityShowActionBuildInAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityShowActionBuildInAnimationType]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityHideActionBuildOutAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityHideActionBuildOutAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityHideActionBuildOutAnimationType]);
}

unsigned char *storeEnumTagSinglePayload for __RKEntityActionAnimationStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282E4768);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle()
{
  return &type metadata for __RKEntityActionAnimationStyle;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType;
}

unsigned char *storeEnumTagSinglePayload for __RKEntityShowActionBuildInAnimationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    void *result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2282E4880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType;
}

uint64_t method lookup function for __RKEntityVisibilityAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityVisibilityAction);
}

uint64_t method lookup function for __RKEntitySetOpacityAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntitySetOpacityAction);
}

uint64_t dispatch thunk of __RKEntitySetOpacityAction.__allocating_init(targetEntity:duration:opacity:)()
{
  return (*(uint64_t (**)(void))(v0 + 840))();
}

uint64_t method lookup function for __RKEntityShowAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityShowAction);
}

uint64_t dispatch thunk of __RKEntityShowAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildInAnimationType:)()
{
  return (*(uint64_t (**)(void))(v0 + 1192))();
}

uint64_t method lookup function for __RKEntityHideAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityHideAction);
}

uint64_t dispatch thunk of __RKEntityHideAction.__allocating_init(targetEntity:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:animationStyle:buildOutAnimationType:)()
{
  return (*(uint64_t (**)(void))(v0 + 1224))();
}

uint64_t partial apply for closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in __RKEntityVisibilityAction.createBasicPopAnimation(_:scale:currentTranslation:currentOrientation:additive:duration:forShow:)(v1[1].n128_i64[1], v1[2].n128_i8[1], a1, v1[2].n128_u32[1], v1[2].n128_u32[2], v1[2].n128_u32[3], v1[3], v1[4]);
}

uint64_t partial apply for implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)()
{
  return implicit closure #2 in closure #2 in __RKEntityShowAction.perform(with:)();
}

void specialized __RKEntitySetOpacityAction.updateFade(_:)()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 120))
  {
    if (*(void *)(v0 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    *(double *)(v0 + 112) = v2;
    *(unsigned char *)(v0 + 120) = 0;
    swift_beginAccess();
    if (*(void *)(v0 + 16))
    {
      swift_retain();
      unint64_t v5 = Entity.opacity.getter();
      swift_release();
      *(_DWORD *)(v0 + 192) = v5;
      *(unsigned char *)(v0 + 196) = BYTE4(v5) & 1;
      if ((v5 & 0x100000000) == 0)
      {
        float v8 = *(float *)&v5;
        goto LABEL_31;
      }
      unsigned int v6 = *(void **)(v0 + 16);
      *(_DWORD *)(v1 + 192) = 1065353216;
      *(unsigned char *)(v1 + 196) = 0;
      if (v6)
      {
        swift_retain();
        isCGFloat a = Float._bridgeToObjectiveC()().super.super.isa;
        swift_beginAccess();
        objc_setAssociatedObject(v6, &static Entity.AssociatedObjectKeys.opacity, isa, (void *)1);
        swift_endAccess();
        swift_release();

        float v8 = *(float *)(v1 + 192);
        if (*(unsigned char *)(v1 + 196)) {
          float v8 = 1.0;
        }
        goto LABEL_31;
      }
    }
    else
    {
      *(_DWORD *)(v0 + 192) = 1065353216;
      *(unsigned char *)(v0 + 196) = 0;
    }
    float v8 = 1.0;
LABEL_31:
    *(float *)(v1 + 200) = (float)(v8 - *(float *)(v1 + 148)) / (float)(*(float *)(v1 + 144) * 60.0);
    *(unsigned char *)(v1 + 204) = 0;
    return;
  }
  double v3 = *(double *)(v0 + 112);
  if (*(void *)(v0 + 24)) {
    REEngineGetCurrentTime();
  }
  else {
    double v4 = CACurrentMediaTime();
  }
  double v9 = v4 - v3;
  float v10 = *(float *)(v0 + 144);
  double v11 = v10;
  if (v9 > v10) {
    double v9 = v10;
  }
  if (v9 <= 0.0)
  {
    double v9 = 0.0;
    if (v10 <= 0.0)
    {
LABEL_18:
      specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(*(float *)(v0 + 148));
      if (*(float *)(v0 + 148) == 0.0)
      {
        swift_beginAccess();
        uint64_t v12 = *(void *)(v0 + 16);
        if (v12)
        {
          uint64_t v13 = *(void *)(v12 + 16);
          swift_retain();
          MEMORY[0x22A68E740](v13, 0);
          RENetworkMarkEntityMetadataDirty();
          RERenderOptionsComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          RERenderOptionsComponentSetVisibilityMode();
          RENetworkMarkComponentDirty();
          swift_release();
        }
      }
      swift_beginAccess();
      uint64_t v14 = *(void *)(v1 + 96);
      char v15 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 2;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v18 = v14;
      char v19 = v15;
      __RKEntityAction.state.didset((uint64_t)&v18);
      return;
    }
  }
  else if (v9 >= v11)
  {
    goto LABEL_18;
  }
  float v16 = *(float *)(v0 + 192);
  if (*(unsigned char *)(v0 + 196)) {
    float v16 = 1.0;
  }
  float v17 = v9 / v11 * (float)(*(float *)(v0 + 148) - v16) + v16;

  specialized __RKEntityVisibilityAction.updateOpacity(to:enabled:)(v17);
}

uint64_t partial apply for implicit closure #2 in closure #2 in __RKEntitySetOpacityAction.perform(with:)()
{
  return implicit closure #4 in __RKEntitySetOpacityAction.perform(with:)(v0, 21, 0xD000000000000013, (void *)0x8000000228360C80);
}

uint64_t __RKSoundTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKSoundTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKSoundTrigger.deinit()
{
  return v0;
}

uint64_t __RKSoundTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKSoundTrigger()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVAudioFormat.validateAudioFormatSupportsMultiChannel()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_settings);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v3 + 16) || (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v7 & 1) == 0))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v6, (uint64_t)&v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v13 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v12);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
    swift_allocError();
    *double v11 = 0;
    goto LABEL_13;
  }
  unsigned int v8 = v14;
  if (one-time initialization token for aacFormats != -1) {
    swift_once();
  }
  if (specialized Set.contains(_:)(v8, static AVAudioFormat.aacFormats)
    && objc_msgSend(v1, sel_channelCount) >= 3)
  {
    lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
    swift_allocError();
    *double v9 = v1;
    id v10 = v1;
LABEL_13:
    swift_willThrow();
  }
}

uint64_t one-time initialization function for aacFormats()
{
  uint64_t result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for aacFormats);
  static AVAudioFormat.aacFormats = result;
  return result;
}

unint64_t AVAudioFormat.ValidationError.errorDescription.getter(void *a1)
{
  if (a1)
  {
    if (a1 == (void *)1) {
      return 0xD00000000000001CLL;
    }
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = 0xE000000000000000;
    id v3 = a1;
    _StringGuts.grow(_:)(105);
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    v4._object = (void *)0x8000000228360D80;
    v4._uint64_t countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v4);
    id v5 = objc_msgSend(v3, sel_settings);
    uint64_t v6 = MEMORY[0x263F8D310];
    uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v7 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9), (v11 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v10, (uint64_t)&v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v16 + 1))
      {
        outlined init with take of Any(&v15, &v17);
LABEL_12:
        _print_unlocked<A, B>(_:_:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
        v12._uint64_t countAndFlagsBits = 0x2073616820;
        v12._object = (void *)0xE500000000000000;
        String.append(_:)(v12);
        LODWORD(v17) = objc_msgSend(v3, sel_channelCount);
        v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
        v14._object = (void *)0x8000000228360DA0;
        String.append(_:)(v14);
        outlined consume of AVAudioFormat.ValidationError(a1);
        return v19;
      }
    }
    else
    {
      long long v15 = 0u;
      long long v16 = 0u;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = v6;
    *(void *)&long long v17 = 4999502;
    *((void *)&v17 + 1) = 0xE300000000000000;
    outlined destroy of Any?((uint64_t)&v15);
    goto LABEL_12;
  }
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AVAudioFormat.ValidationError()
{
  return AVAudioFormat.ValidationError.errorDescription.getter(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AVAudioFormat.ValidationError(void **a1, void **a2)
{
  id v2 = *a1;
  id v3 = *a2;
  if (!*a1) {
    return v3 == 0;
  }
  if (v2 == (void *)1) {
    return v3 == (void *)1;
  }
  if ((unint64_t)v3 < 2) {
    return 0;
  }
  type metadata accessor for NSObject();
  outlined copy of AVAudioFormat.ValidationError(v2);
  outlined copy of AVAudioFormat.ValidationError(v3);
  char v6 = static NSObject.== infix(_:_:)();
  outlined consume of AVAudioFormat.ValidationError(v3);
  outlined consume of AVAudioFormat.ValidationError(v2);
  return v6 & 1;
}

void *initializeBufferWithCopyOfBuffer for AVAudioFormat.ValidationError(void *a1, void **a2)
{
  id v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for AVAudioFormat.ValidationError(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for AVAudioFormat.ValidationError(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for AVAudioFormat.ValidationError(void **a1, unint64_t *a2)
{
  id v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for AVAudioFormat.ValidationError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AVAudioFormat.ValidationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AVAudioFormat.ValidationError()
{
  return &type metadata for AVAudioFormat.ValidationError;
}

void outlined consume of AVAudioFormat.ValidationError(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

id outlined copy of AVAudioFormat.ValidationError(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t HasHierarchy.parent.getter()
{
  uint64_t Parent = REEntityGetParent();
  if (!Parent) {
    return 0;
  }
  uint64_t v1 = Parent;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      uint64_t v3 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v6 = *(void *)(v3 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v3 + 16) = v1;
      MEMORY[0x22A68E750](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t HasHierarchy.children.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

uint64_t HasHierarchy.setParent(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t result = HasHierarchy.parent.getter();
  if (!result)
  {
    if (!a1) {
      return result;
    }
    goto LABEL_8;
  }
  if (!a1)
  {
    *(void *)&v19[0] = result;
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, a2 & 1);
    return swift_release();
  }
  if (*(void *)(result + 16) != *(void *)(a1 + 16))
  {
LABEL_8:
    if (a2)
    {
      uint64_t v7 = one-time initialization token for identity;
      swift_retain();
      if (v7 != -1) {
        swift_once();
      }
      float32x4_t v18 = (float32x4_t)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v3, a1);
      specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v18, 1.0);
      REMakeSRTFromMatrix();
      v19[0] = v8;
      v19[1] = v9;
      void v19[2] = v10;
      char v20 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v19);
      swift_release();
    }
    else
    {
      swift_retain();
    }
    REEntitySetParent();
    if (swift_conformsToProtocol2()) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v11)
    {
      swift_beginAccess();
      Swift::String v12 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v12[2])
        {
          swift_retain();
          id v13 = (id)RFServiceManagerGetAnchorManagementService();
          if (v13)
          {
            Swift::String v14 = v13;
            uint64_t SceneNullable = REEntityGetSceneNullable();
            if (SceneNullable)
            {
              uint64_t v16 = SceneNullable;
              id v17 = (id)RESceneGetSwiftObject();
              type metadata accessor for Scene();
              if (v17)
              {
                swift_dynamicCastClassUnconditional();
              }
              else
              {
                swift_allocObject();
                Scene.init(coreScene:)(v16);
              }
              swift_release();
              RFAnchorManagementUpdateAnchoringInScene();
            }
          }
          swift_release();
        }
      }
    }
    type metadata accessor for Entity();
    static Entity.updateInteractions(root:)(v3);
    Entity.updateSceneGravityIfNeeded()();
    swift_release();
    return swift_release();
  }

  return swift_release();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
  uint64_t v3 = HasHierarchy.parent.getter();
  uint64_t v4 = swift_release();
  if (v3)
  {
    HasHierarchy.setParent(_:preservingWorldTransform:)(0, preservingWorldTransform);
  }
  else if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v4))
  {
    swift_conformsToProtocol2();
    RESceneRemoveEntity();
    swift_release();
  }
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HasHierarchy.addChild(_:preservingWorldTransform:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Entity.ChildCollection.doAppend(_:preservingWorldTransform:));
}

uint64_t HasHierarchy.children.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t result = swift_release();
  if (v2 != v3) {
    __break(1u);
  }
  return result;
}

uint64_t (*HasHierarchy.children.modify(void *a1))()
{
  *a1 = v1;
  swift_retain();
  return destroy for __ImageBasedLightComponent;
}

uint64_t HasHierarchy.removeChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return HasHierarchy.addChild(_:preservingWorldTransform:)(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))Entity.ChildCollection.doRemove(_:preservingWorldTransform:));
}

uint64_t HasHierarchy.addChild(_:preservingWorldTransform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  swift_retain();
  a5(a1, a2);

  return swift_release();
}

uint64_t sub_2282E5B7C@<X0>(void *a1@<X8>)
{
  return HasHierarchy.children.getter(a1);
}

uint64_t sub_2282E5BA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  return HasHierarchy.children.setter((uint64_t)&v2);
}

uint64_t sub_2282E5BDC()
{
  return 16;
}

__n128 sub_2282E5BE8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PortalCrossingComponent()
{
  REPortalCrossingFlagsComponentSetEnabled();
  REPortalCrossingFlagsComponentSetInherited();

  return RENetworkMarkComponentDirty();
}

uint64_t PortalCrossingComponent.__toCore(_:)()
{
  REPortalCrossingFlagsComponentSetEnabled();
  REPortalCrossingFlagsComponentSetInherited();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PortalCrossingComponent(_DWORD *a1@<X8>)
{
  *a1 = 5001;
}

void static PortalCrossingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5001;
}

ValueMetadata *type metadata accessor for PortalCrossingComponent()
{
  return &type metadata for PortalCrossingComponent;
}

RealityFoundation::PhysicsJointsComponent __swiftcall PhysicsJointsComponent.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *uint64_t v0 = 0;
  v0[1] = v1;
  return result;
}

uint64_t PhysicsJointsComponent.joints.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t PhysicsJointsComponent.joints.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  v1[1] = v3;
  return result;
}

uint64_t (*PhysicsJointsComponent.joints.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicsJointsComponent.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v7[0] = *a1;
  v7[1] = v2;
  v6[0] = v3;
  v6[1] = v4;
  return specialized static PhysicsJoints.== infix(_:_:)((uint64_t)v7, (uint64_t)v6) & 1;
}

Swift::Int protocol witness for static Component.__fromCore(_:) in conformance PhysicsJointsComponent(Swift::OpaquePointer *a1)
{
  return PhysicsJointsComponent.init(_:)((Swift::OpaquePointer)a1->_rawValue).joints.startIndex;
}

uint64_t static PhysicsJointsComponent.__fromCore(_:)@<X0>(void *a1@<X8>)
{
  uint64_t v12 = 0;
  uint64_t v13 = MEMORY[0x263F8EE78];
  uint64_t result = REPhysicsJointsComponentGetJointCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = result;
    if (result)
    {
      uint64_t v4 = 0;
      do
      {
        REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex();
        char IsJointAtIndexActive = REPhysicsJointsComponentIsJointAtIndexActive();
        static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)(IsJointAtIndexActive, (uint64_t)v11);
        uint64_t v6 = *(void *)(v13 + 16);
        outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
        outlined init with copy of CollectionOfOne<PhysicsJoint>((uint64_t)v10, (uint64_t)v9);
        specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v9);
        outlined destroy of CollectionOfOne<PhysicsJoint>((uint64_t)v10);
        RERelease();
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        ++v4;
      }
      while (v3 != v4);
      uint64_t v7 = v12;
      uint64_t v8 = v13;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = MEMORY[0x263F8EE78];
    }
    *a1 = v7;
    a1[1] = v8;
  }
  return result;
}

uint64_t PhysicsJointsComponent.__toCore(_:)()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  REPhysicsJointDefinitionArrayCreate();
  unint64_t v3 = *(void *)(v1 + 16);
  if (v2 == v3)
  {
LABEL_8:
    REPhysicsJointsComponentSetPhysicsJointDefinitionArray();
    RERelease();
    return RENetworkMarkComponentDirty();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v5 = v1 + 40 * v2 + 32;
    unint64_t v6 = v2;
    while ((v2 & 0x8000000000000000) == 0)
    {
      if (v6 >= v3) {
        goto LABEL_10;
      }
      outlined init with copy of __REAssetService(v5, (uint64_t)v7);
      specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(v7);
      REPhysicsJointDefinitionArrayAddPhysicsJointDefinition();
      RERelease();
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      ++v6;
      unint64_t v3 = *(void *)(v1 + 16);
      v5 += 40;
      if (v6 == v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsJointsComponent(_DWORD *a1@<X8>)
{
  *a1 = 4012;
}

void static PhysicsJointsComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 4012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsJointsComponent(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  v7[0] = *a1;
  v7[1] = v2;
  v6[0] = v3;
  v6[1] = v4;
  return specialized static PhysicsJoints.== infix(_:_:)((uint64_t)v7, (uint64_t)v6) & 1;
}

RealityFoundation::PhysicsJointsComponent __swiftcall PhysicsJointsComponent.init(_:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = 0;
  uint64_t v16 = MEMORY[0x263F8EE78];
  Swift::Int JointCount = REPhysicsJointsComponentGetJointCount();
  if (JointCount < 0)
  {
    __break(1u);
  }
  else
  {
    Swift::Int v5 = JointCount;
    if (JointCount)
    {
      uint64_t v6 = 0;
      do
      {
        REPhysicsJointsComponentGetPhysicsJointDefinitionAtIndex();
        char IsJointAtIndexActive = REPhysicsJointsComponentIsJointAtIndexActive();
        static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)(IsJointAtIndexActive, (uint64_t)v14);
        uint64_t v8 = *(void *)(v16 + 16);
        outlined init with copy of __REAssetService((uint64_t)v14, (uint64_t)v13);
        outlined init with copy of CollectionOfOne<PhysicsJoint>((uint64_t)v13, (uint64_t)v12);
        specialized Array.replaceSubrange<A>(_:with:)(v8, v8, (uint64_t)v12);
        outlined destroy of CollectionOfOne<PhysicsJoint>((uint64_t)v13);
        RERelease();
        Swift::Int JointCount = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
        ++v6;
      }
      while (v5 != v6);
      uint64_t v9 = v15;
      uint64_t v10 = v16;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = MEMORY[0x263F8EE78];
    }
    *uint64_t v2 = v9;
    v2[1] = v10;
  }
  result.joints.elements._rawValue = v4;
  result.joints.startIndedouble x = JointCount;
  return result;
}

uint64_t outlined init with copy of CollectionOfOne<PhysicsJoint>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for PhysicsJointsComponent()
{
  return &type metadata for PhysicsJointsComponent;
}

uint64_t __RKEntityPlacementTrigger.matches(with:)(uint64_t a1)
{
  return __RKEntityPlacementTrigger.matches(with:)(a1, (void (*)(void))type metadata accessor for __RKEntityPlacementTrigger, (uint64_t (*)(uint64_t))__RKEntityPlacementTrigger.matches(with:));
}

uint64_t __RKEntityPlacementTrigger.deinit()
{
  return v0;
}

uint64_t __RKEntityRemovalTrigger.init()()
{
  uint64_t result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 18) = 0;
  return result;
}

uint64_t type metadata accessor for __RKEntityPlacementTrigger()
{
  return self;
}

uint64_t __RKEntityRemovalTrigger.matches(with:)(uint64_t a1)
{
  return __RKEntityPlacementTrigger.matches(with:)(a1, (void (*)(void))type metadata accessor for __RKEntityRemovalTrigger, (uint64_t (*)(uint64_t))__RKEntityRemovalTrigger.matches(with:));
}

uint64_t __RKEntityPlacementTrigger.matches(with:)(uint64_t a1, void (*a2)(void), uint64_t (*a3)(uint64_t))
{
  a2();
  if (swift_dynamicCastClass()) {
    return 1;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v5 = swift_dynamicCastClass();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  swift_beginAccess();
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 >> 62)
  {
LABEL_30:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_release();
      return v4;
    }
  }
  unint64_t v9 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = MEMORY[0x22A689930](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v10 = *(void *)(v7 + 32);
    swift_retain();
  }
  char v11 = a3(v10);
  uint64_t result = swift_release();
  if (v11)
  {
LABEL_10:
    uint64_t v4 = 1;
    goto LABEL_14;
  }
  if (v4 == 1)
  {
    uint64_t v4 = 0;
    goto LABEL_14;
  }
  if (v9)
  {
    uint64_t v12 = MEMORY[0x22A689930](1, v7);
    goto LABEL_20;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v12 = *(void *)(v7 + 40);
    swift_retain();
LABEL_20:
    char v13 = a3(v12);
    uint64_t result = swift_release();
    if ((v13 & 1) == 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = v4 - 2;
      while (1)
      {
        uint64_t v4 = v15 != v14;
        if (v15 == v14) {
          goto LABEL_14;
        }
        unint64_t v18 = v14 + 2;
        if (v9)
        {
          uint64_t v16 = MEMORY[0x22A689930](v14 + 2, v7);
          if (__OFADD__(v18, 1)) {
            goto LABEL_29;
          }
        }
        else
        {
          if (v18 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_34;
          }
          uint64_t v16 = *(void *)(v7 + 8 * v14 + 48);
          swift_retain();
          if (__OFADD__(v18, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        char v17 = a3(v16);
        uint64_t result = swift_release();
        ++v14;
        if (v17) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_10;
  }
LABEL_35:
  __break(1u);
  return result;
}