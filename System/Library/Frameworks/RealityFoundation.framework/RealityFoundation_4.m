uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *), uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(_OWORD *))
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned char v15[235];
  _OWORD v16[16];
  int v17;
  char v18;
  unsigned char v19[240];
  _OWORD v20[14];
  uint64_t v21;

  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v20);
  v11 = specialized Data.init(bytes:count:)(*(unsigned char **)(a2 + 120), *(void *)(a2 + 128));
  v13 = v12;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v20);
  JSONDecoder.init()();
  a5();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v15[179] = v20[11];
  *(_OWORD *)&v15[195] = v20[12];
  *(_OWORD *)&v15[211] = v20[13];
  *(_OWORD *)&v15[115] = v20[7];
  *(_OWORD *)&v15[131] = v20[8];
  *(_OWORD *)&v15[147] = v20[9];
  *(_OWORD *)&v15[163] = v20[10];
  *(_OWORD *)&v15[51] = v20[3];
  *(_OWORD *)&v15[67] = v20[4];
  *(void *)&v15[227] = v21;
  *(_OWORD *)&v15[83] = v20[5];
  *(_OWORD *)&v15[99] = v20[6];
  *(_OWORD *)&v15[3] = v20[0];
  *(_OWORD *)&v15[19] = v20[1];
  *(_OWORD *)&v15[35] = v20[2];
  *(_DWORD *)v19 = v17;
  *(_OWORD *)&v19[181] = *(_OWORD *)&v15[176];
  *(_OWORD *)&v19[197] = *(_OWORD *)&v15[192];
  *(_OWORD *)&v19[213] = *(_OWORD *)&v15[208];
  *(_OWORD *)&v19[224] = *(_OWORD *)&v15[219];
  *(_OWORD *)&v19[117] = *(_OWORD *)&v15[112];
  *(_OWORD *)&v19[133] = *(_OWORD *)&v15[128];
  *(_OWORD *)&v19[149] = *(_OWORD *)&v15[144];
  *(_OWORD *)&v19[165] = *(_OWORD *)&v15[160];
  *(_OWORD *)&v19[53] = *(_OWORD *)&v15[48];
  *(_OWORD *)&v19[69] = *(_OWORD *)&v15[64];
  *(_OWORD *)&v19[85] = *(_OWORD *)&v15[80];
  *(_OWORD *)&v19[101] = *(_OWORD *)&v15[96];
  *(_OWORD *)&v19[5] = *(_OWORD *)v15;
  v19[4] = v18;
  *(_OWORD *)&v19[21] = *(_OWORD *)&v15[16];
  *(_OWORD *)&v19[37] = *(_OWORD *)&v15[32];
  a3(v19);
  outlined release of TimelineDefinition?((uint64_t)v20);
  outlined consume of Data._Representation(v11, v13);
  v16[12] = *(_OWORD *)&v19[192];
  v16[13] = *(_OWORD *)&v19[208];
  v16[14] = *(_OWORD *)&v19[224];
  v16[8] = *(_OWORD *)&v19[128];
  v16[9] = *(_OWORD *)&v19[144];
  v16[10] = *(_OWORD *)&v19[160];
  v16[11] = *(_OWORD *)&v19[176];
  v16[4] = *(_OWORD *)&v19[64];
  v16[5] = *(_OWORD *)&v19[80];
  v16[6] = *(_OWORD *)&v19[96];
  v16[7] = *(_OWORD *)&v19[112];
  v16[0] = *(_OWORD *)v19;
  v16[1] = *(_OWORD *)&v19[16];
  v16[2] = *(_OWORD *)&v19[32];
  v16[3] = *(_OWORD *)&v19[48];
  a7(v16);
  return 0;
}

uint64_t specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, void (*a3)(_OWORD *), uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(unsigned char *))
{
  static ForceEffectParameters.__fromCore(_:)(a2, (uint64_t)v21);
  uint64_t v11 = specialized Data.init(bytes:count:)(*(unsigned char **)(a2 + 120), *(void *)(a2 + 128));
  unint64_t v13 = v12;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  outlined retain of OrbitEntityActionHandler((uint64_t)v21);
  JSONDecoder.init()();
  a5();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  *(_OWORD *)&v15[183] = v21[11];
  *(_OWORD *)&v15[199] = v21[12];
  *(_OWORD *)&v15[215] = v21[13];
  *(_OWORD *)&v15[119] = v21[7];
  *(_OWORD *)&v15[135] = v21[8];
  *(_OWORD *)&v15[151] = v21[9];
  *(_OWORD *)&v15[167] = v21[10];
  *(_OWORD *)&v15[55] = v21[3];
  *(_OWORD *)&v15[71] = v21[4];
  *(_OWORD *)&v15[87] = v21[5];
  *(_OWORD *)&v15[103] = v21[6];
  *(_OWORD *)&v15[7] = v21[0];
  *(void *)&v15[231] = v22;
  *(_OWORD *)&v15[23] = v21[1];
  *(_OWORD *)&v15[39] = v21[2];
  LODWORD(__src[0]) = v17;
  __src[1] = v18;
  *(_OWORD *)((char *)&__src[13] + 1) = *(_OWORD *)&v15[176];
  *(_OWORD *)((char *)&__src[14] + 1) = *(_OWORD *)&v15[192];
  *(_OWORD *)((char *)&__src[15] + 1) = *(_OWORD *)&v15[208];
  __src[16] = *(_OWORD *)&v15[223];
  *(_OWORD *)((char *)&__src[9] + 1) = *(_OWORD *)&v15[112];
  *(_OWORD *)((char *)&__src[10] + 1) = *(_OWORD *)&v15[128];
  *(_OWORD *)((char *)&__src[11] + 1) = *(_OWORD *)&v15[144];
  *(_OWORD *)((char *)&__src[12] + 1) = *(_OWORD *)&v15[160];
  *(_OWORD *)((char *)&__src[5] + 1) = *(_OWORD *)&v15[48];
  *(_OWORD *)((char *)&__src[6] + 1) = *(_OWORD *)&v15[64];
  LOBYTE(__src[2]) = v19;
  *(_OWORD *)((char *)&__src[7] + 1) = *(_OWORD *)&v15[80];
  *(_OWORD *)((char *)&__src[8] + 1) = *(_OWORD *)&v15[96];
  *(_OWORD *)((char *)&__src[2] + 1) = *(_OWORD *)v15;
  *(_OWORD *)((char *)&__src[3] + 1) = *(_OWORD *)&v15[16];
  *(_OWORD *)((char *)&__src[4] + 1) = *(_OWORD *)&v15[32];
  a3(__src);
  outlined release of TimelineDefinition?((uint64_t)v21);
  outlined consume of Data._Representation(v11, v13);
  memcpy(__dst, __src, 0x110uLL);
  a7(__dst);
  return 0;
}

uint64_t specialized REEventBus.DispatcherHandle.init<A>(event:sourceObject:componentType:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v13 = a6();
  if (a2)
  {
    uint64_t v14 = specialized static __ServiceLocator.shared.getter() + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v14, (uint64_t)v26);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    uint64_t v15 = SceneManager.componentTypeToComponentClass(_:)(a2, a3);
    if (v15) {
      goto LABEL_5;
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 80))(v26, a2, a3);
    if (LODWORD(v26[0]) == 36)
    {
      uint64_t v15 = specialized static SceneManager.customComponentType(_:)(a2, a3);
LABEL_5:
      uint64_t v16 = v15;
      swift_release();
      if (*(void *)(a1 + 24)) {
        goto LABEL_6;
      }
LABEL_15:
      uint64_t result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
      uint64_t v19 = 0;
      goto LABEL_16;
    }
    swift_release();
  }
  uint64_t v16 = 0;
  if (!*(void *)(a1 + 24)) {
    goto LABEL_15;
  }
LABEL_6:
  outlined init with copy of (Int, URL)(a1, (uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
  if (!v22)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v25 = 0;
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RECoreBridging);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v25 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    goto LABEL_12;
  }
  if (!*((void *)&v24 + 1))
  {
LABEL_12:
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, &demangling cache variable for type metadata for RECoreBridging?);
    outlined init with copy of (Int, URL)(a1, (uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventSource?);
    uint64_t v19 = Optional._bridgeToObjectiveC()();
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for EventSource?);
    swift_unknownObjectRelease();
    uint64_t result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
    goto LABEL_16;
  }
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  uint64_t v17 = v27;
  uint64_t v18 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for EventSource?);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
LABEL_16:
  *a7 = v13;
  a7[1] = v19;
  a7[2] = v16;
  a7[3] = a4;
  a7[4] = a5;
  return result;
}

void *specialized REEventBus.getOrCreateDispatcher<A>(handle:of:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  swift_beginAccess();
  uint64_t v8 = *(void *)(v2 + 24);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v10)
    {
      outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v9, (uint64_t)&v18);
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
    }
    outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_endAccess();
  if (!*((void *)&v19 + 1))
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    uint64_t v12 = *(void *)(v4 + 16);
    uint64_t v13 = a1[1];
    uint64_t v14 = a1[2];
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a2);
    swift_allocObject();
    uint64_t v11 = specialized REEventDispatcher.init(eventBus:coreHandle:sourceObject:componentType:matching:)(v4, v12, v13, v14, v7, v6);
    *((void *)&v19 + 1) = v15;
    *(void *)&long long v18 = v11;
    swift_beginAccess();
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    outlined retain of REEventBus.DispatcherHandle((uint64_t)a1);
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v18, a1);
    swift_endAccess();
    return v11;
  }
  return (void *)v17;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  ValueMetadata *v15;
  _UNKNOWN **v16;
  _OWORD v17[6];
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  uint64_t v27;

  v1 = *(_OWORD *)(a1 + 208);
  long long v24 = *(_OWORD *)(a1 + 192);
  uint64_t v25 = v1;
  v26 = *(_OWORD *)(a1 + 224);
  uint64_t v27 = *(void *)(a1 + 240);
  uint64_t v2 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 128);
  v21 = v2;
  v3 = *(_OWORD *)(a1 + 176);
  uint64_t v22 = *(_OWORD *)(a1 + 160);
  long long v23 = v3;
  uint64_t v4 = *(_OWORD *)(a1 + 80);
  v17[4] = *(_OWORD *)(a1 + 64);
  v17[5] = v4;
  v5 = *(_OWORD *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 96);
  long long v19 = v5;
  uint64_t v6 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  v17[2] = *(_OWORD *)(a1 + 32);
  v17[3] = v7;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v17);
  if (result != 1)
  {
    char v10 = result;
    uint64_t v11 = v9 & 1;
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, v18);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v12 = v27;
    uint64_t v15 = &type metadata for PlayAudioActionHandler;
    uint64_t v16 = &protocol witness table for PlayAudioActionHandler;
    uint64_t v13 = v10;
    uint64_t v14 = v11;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)&v13, v12);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v10);
  }
  return result;
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, Swift::UInt a2)
{
  long long v3 = *(_OWORD *)(a1 + 176);
  long long v23 = *(_OWORD *)(a1 + 160);
  long long v24 = v3;
  uint64_t v25 = *(void *)(a1 + 192);
  long long v4 = *(_OWORD *)(a1 + 112);
  long long v19 = *(_OWORD *)(a1 + 96);
  long long v20 = v4;
  long long v5 = *(_OWORD *)(a1 + 144);
  long long v21 = *(_OWORD *)(a1 + 128);
  long long v22 = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  long long v16 = v6;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 64);
  long long v18 = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v8;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v10)
  {
    uint64_t v11 = result;
    uint64_t v12 = v10;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, v16);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v13 = v25;
    v14[3] = &type metadata for EmphasizeActionHandler;
    v14[4] = &protocol witness table for EmphasizeActionHandler;
    v14[0] = v11;
    v14[1] = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v14, v13);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 176);
  v12[10] = *(_OWORD *)(a1 + 160);
  v12[11] = v1;
  uint64_t v13 = *(void *)(a1 + 192);
  long long v2 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v2;
  long long v3 = *(_OWORD *)(a1 + 144);
  v12[8] = *(_OWORD *)(a1 + 128);
  v12[9] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12);
  if (v7) {
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v8 = v13;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  uint64_t v14;

  long long v1 = *(_OWORD *)(a1 + 208);
  v13[12] = *(_OWORD *)(a1 + 192);
  v13[13] = v1;
  v13[14] = *(_OWORD *)(a1 + 224);
  uint64_t v14 = *(void *)(a1 + 240);
  long long v2 = *(_OWORD *)(a1 + 144);
  v13[8] = *(_OWORD *)(a1 + 128);
  v13[9] = v2;
  long long v3 = *(_OWORD *)(a1 + 176);
  v13[10] = *(_OWORD *)(a1 + 160);
  v13[11] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  v13[4] = *(_OWORD *)(a1 + 64);
  v13[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 112);
  v13[6] = *(_OWORD *)(a1 + 96);
  v13[7] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  v13[2] = *(_OWORD *)(a1 + 32);
  v13[3] = v7;
  uint64_t v8 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (v8 != 1) {
    outlined consume of __ImageBasedLightComponent?(v8);
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  unint64_t v9 = v14;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[13];
  uint64_t v12;

  long long v1 = *(_OWORD *)(a1 + 176);
  v11[10] = *(_OWORD *)(a1 + 160);
  v11[11] = v1;
  v11[12] = *(_OWORD *)(a1 + 192);
  uint64_t v12 = *(void *)(a1 + 208);
  long long v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  long long v3 = *(_OWORD *)(a1 + 144);
  v11[8] = *(_OWORD *)(a1 + 128);
  v11[9] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v6;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v11);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v7 = v12;
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v1;
  uint64_t v15 = *(void *)(a1 + 192);
  long long v2 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v2;
  long long v3 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  void v14[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v6;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v7 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if (v8)
  {
    *((void *)&v12 + 1) = &type metadata for EmphasizeActionHandler;
    uint64_t v13 = &protocol witness table for EmphasizeActionHandler;
    *(void *)&long long v11 = v7;
    *((void *)&v11 + 1) = v8;
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  uint64_t v9 = v15;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  long long v12;
  long long v13;
  _UNKNOWN **v14;
  _OWORD v15[15];
  uint64_t v16;

  long long v1 = *(_OWORD *)(a1 + 208);
  v15[12] = *(_OWORD *)(a1 + 192);
  v15[13] = v1;
  v15[14] = *(_OWORD *)(a1 + 224);
  long long v16 = *(void *)(a1 + 240);
  long long v2 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v2;
  long long v3 = *(_OWORD *)(a1 + 176);
  v15[10] = *(_OWORD *)(a1 + 160);
  v15[11] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  _OWORD v15[3] = v7;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v8 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v8 == 1)
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    uint64_t v13 = 0u;
  }
  else
  {
    *((void *)&v13 + 1) = &type metadata for PlayAudioActionHandler;
    uint64_t v14 = &protocol witness table for PlayAudioActionHandler;
    *(void *)&long long v12 = v8;
    BYTE8(v12) = v9 & 1;
  }
  uint64_t v10 = v16;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Int>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Int> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD2<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Double>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Double> and conformance SetEntityPropertyActionHandler<A>);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  long long v9;
  long long v10;
  _UNKNOWN **v11;
  _OWORD v12[13];
  uint64_t v13;

  long long v1 = *(_OWORD *)(a1 + 176);
  v12[10] = *(_OWORD *)(a1 + 160);
  v12[11] = v1;
  _OWORD v12[12] = *(_OWORD *)(a1 + 192);
  uint64_t v13 = *(void *)(a1 + 208);
  long long v2 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  v12[7] = v2;
  long long v3 = *(_OWORD *)(a1 + 144);
  v12[8] = *(_OWORD *)(a1 + 128);
  v12[9] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12))
  {
    long long v11 = 0;
    uint64_t v9 = 0u;
    uint64_t v10 = 0u;
  }
  else
  {
    *((void *)&v10 + 1) = &type metadata for SetEntityEnabledActionHandler;
    long long v11 = &protocol witness table for SetEntityEnabledActionHandler;
  }
  uint64_t v7 = v13;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 2uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 4uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 4uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 4uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src, Swift::UInt a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[19], &demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v4 = __dst[37];
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    uint64_t v7 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v5, v4);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)__dst);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v2 = __dst[37];
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v3, v2);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  long long v1 = v8;
  uint64_t v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    uint64_t v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  long long v1 = v8;
  uint64_t v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    uint64_t v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  long long v1 = v8;
  uint64_t v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(1uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    uint64_t v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 0x10uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 0x10uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 0x20uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 0x20uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v1 = __dst[37];
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  unsigned char v5[80];
  unsigned char v6[80];
  uint64_t __dst[58];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v5);
  outlined init with take of Transform?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v1 = __dst[57];
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v1 = __dst[37];
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

{
  uint64_t v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v3);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v1 = __dst[45];
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v3, v1);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)(__dst))
  {
    uint64_t v5 = 0;
    long long v3 = 0u;
    long long v4 = 0u;
  }
  else
  {
    *((void *)&v4 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
    uint64_t v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Transform> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Transform>);
  }
  uint64_t v1 = __dst[37];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v3, v1);
  return swift_endAccess();
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, &lazy protocol witness table cache variable for type FromToByActionHandler<BlendShapeWeights> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, &lazy protocol witness table cache variable for type FromToByActionHandler<JointTransforms> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long v12;
  long long v13;
  uint64_t v14;
  void v15[6];
  uint64_t v16;
  uint64_t v17;
  unsigned char v18[80];
  uint64_t __dst[58];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v15);
  uint64_t v1 = v15[0];
  uint64_t v2 = v15[1];
  long long v3 = v15[2];
  long long v4 = v15[3];
  uint64_t v5 = v15[4];
  uint64_t v6 = v15[5];
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v18, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if (v18[64])
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    uint64_t v13 = 0u;
  }
  else
  {
    *((void *)&v13 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    uint64_t v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    uint64_t v9 = swift_allocObject();
    *(void *)&long long v12 = v9;
    *(void *)(v9 + 16) = v1;
    *(void *)(v9 + 24) = v2;
    *(void *)(v9 + 32) = v3;
    *(void *)(v9 + 40) = v4;
    *(void *)(v9 + 48) = v5;
    *(void *)(v9 + 56) = v6;
    *(unsigned char *)(v9 + 64) = v7 & 1;
    *(void *)(v9 + 72) = v8;
  }
  uint64_t v10 = __dst[57];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v1 = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if (v3)
  {
    uint64_t v10 = 0;
    uint64_t v8 = 0u;
    uint64_t v9 = 0u;
  }
  else
  {
    long long v4 = v1;
    uint64_t v5 = v2;
    *((void *)&v9 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
    LODWORD(v8) = v4;
    BYTE4(v8) = BYTE4(v4) & 1;
    uint64_t v10 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>);
    *((void *)&v8 + 1) = v5;
  }
  uint64_t v6 = __dst[37];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v8, v6);
  return swift_endAccess();
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  uint64_t v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  uint64_t v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  uint64_t v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  uint64_t v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  uint64_t v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  uint64_t v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10, (void (*)(_OWORD *))OrbitEntityActionHandler.actionUpdated(event:));
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 2uLL);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 4uLL);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  uint64_t v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  uint64_t v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  uint64_t v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  uint64_t v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  uint64_t v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  uint64_t v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10);
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1, Swift::UInt a2)
{
  long long v3 = a1[13];
  long long v23 = a1[12];
  long long v24 = v3;
  long long v4 = a1[15];
  long long v25 = a1[14];
  long long v26 = v4;
  long long v5 = a1[9];
  long long v19 = a1[8];
  long long v20 = v5;
  long long v6 = a1[11];
  long long v21 = a1[10];
  long long v22 = v6;
  long long v7 = a1[5];
  v16[4] = a1[4];
  v16[5] = v7;
  long long v8 = a1[7];
  long long v17 = a1[6];
  long long v18 = v8;
  long long v9 = a1[1];
  v16[0] = *a1;
  v16[1] = v9;
  long long v10 = a1[3];
  v16[2] = a1[2];
  v16[3] = v10;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v16);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v17 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v12 = *((void *)&v26 + 1);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    uint64_t v15 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v13, v12);
    return swift_endAccess();
  }
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t result;
  uint64_t v11;
  unsigned char v12[24];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[5];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  long long v3 = a1[13];
  long long v23 = a1[12];
  long long v24 = v3;
  long long v25 = a1[14];
  long long v4 = a1[9];
  long long v19 = a1[8];
  long long v20 = v4;
  long long v5 = a1[11];
  long long v21 = a1[10];
  long long v22 = v5;
  long long v6 = a1[5];
  v15[4] = a1[4];
  long long v16 = v6;
  long long v7 = a1[7];
  long long v17 = a1[6];
  long long v18 = v7;
  long long v8 = a1[1];
  v15[0] = *a1;
  v15[1] = v8;
  long long v9 = a1[3];
  v15[2] = a1[2];
  _OWORD v15[3] = v9;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v11 = *((void *)&v25 + 1);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    uint64_t v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t result;
  uint64_t v11;
  unsigned char v12[24];
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[5];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  long long v3 = a1[13];
  long long v23 = a1[12];
  long long v24 = v3;
  long long v25 = a1[14];
  long long v4 = a1[9];
  long long v19 = a1[8];
  long long v20 = v4;
  long long v5 = a1[11];
  long long v21 = a1[10];
  long long v22 = v5;
  long long v6 = a1[5];
  v15[4] = a1[4];
  long long v16 = v6;
  long long v7 = a1[7];
  long long v17 = a1[6];
  long long v18 = v7;
  long long v8 = a1[1];
  v15[0] = *a1;
  v15[1] = v8;
  long long v9 = a1[3];
  v15[2] = a1[2];
  _OWORD v15[3] = v9;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1), &demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v11 = *((void *)&v25 + 1);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    uint64_t v14 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t result;
  uint64_t v12;
  unsigned char v13[24];
  ValueMetadata *v14;
  _UNKNOWN **v15;
  _OWORD v16[6];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;

  long long v3 = a1[13];
  long long v23 = a1[12];
  long long v24 = v3;
  long long v4 = a1[15];
  long long v25 = a1[14];
  long long v26 = v4;
  long long v5 = a1[9];
  long long v19 = a1[8];
  long long v20 = v5;
  long long v6 = a1[11];
  long long v21 = a1[10];
  long long v22 = v6;
  long long v7 = a1[5];
  v16[4] = a1[4];
  v16[5] = v7;
  long long v8 = a1[7];
  long long v17 = a1[6];
  long long v18 = v8;
  long long v9 = a1[1];
  v16[0] = *a1;
  v16[1] = v9;
  long long v10 = a1[3];
  v16[2] = a1[2];
  v16[3] = v10;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v16);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v17 + 1));
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v12 = *((void *)&v26 + 1);
    uint64_t v14 = &type metadata for ImpulseActionHandler;
    uint64_t v15 = &protocol witness table for ImpulseActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v13, v12);
    return swift_endAccess();
  }
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t result;
  uint64_t v11;
  unsigned char v12[24];
  ValueMetadata *v13;
  _UNKNOWN **v14;
  _OWORD v15[4];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  long long v3 = a1[11];
  long long v22 = a1[10];
  long long v23 = v3;
  long long v4 = a1[13];
  long long v24 = a1[12];
  long long v25 = v4;
  long long v5 = a1[7];
  long long v18 = a1[6];
  long long v19 = v5;
  long long v6 = a1[9];
  long long v20 = a1[8];
  long long v21 = v6;
  long long v7 = a1[3];
  v15[2] = a1[2];
  _OWORD v15[3] = v7;
  long long v8 = a1[5];
  long long v16 = a1[4];
  long long v17 = v8;
  long long v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1));
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v11 = *((void *)&v25 + 1);
    uint64_t v13 = &type metadata for NotificationActionHandler;
    uint64_t v14 = &protocol witness table for NotificationActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v12, v11);
    return swift_endAccess();
  }
  return result;
}

{
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void v14[5];
  _OWORD v15[6];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  long long v3 = a1[13];
  long long v22 = a1[12];
  long long v23 = v3;
  long long v4 = a1[15];
  long long v24 = a1[14];
  long long v25 = v4;
  long long v5 = a1[9];
  long long v18 = a1[8];
  long long v19 = v5;
  long long v6 = a1[11];
  long long v20 = a1[10];
  long long v21 = v6;
  long long v7 = a1[5];
  v15[4] = a1[4];
  v15[5] = v7;
  long long v8 = a1[7];
  long long v16 = a1[6];
  long long v17 = v8;
  long long v9 = a1[1];
  v15[0] = *a1;
  v15[1] = v9;
  long long v10 = a1[3];
  v15[2] = a1[2];
  _OWORD v15[3] = v10;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (result != 1)
  {
    uint64_t v12 = result;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v16 + 1));
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v13 = *((void *)&v25 + 1);
    v14[3] = &type metadata for PlayAnimationActionHandler;
    v14[4] = &protocol witness table for PlayAnimationActionHandler;
    v14[0] = v12;
    swift_beginAccess();
    swift_retain();
    specialized Dictionary.subscript.setter((uint64_t)v14, v13);
    swift_endAccess();
    return outlined consume of __ImageBasedLightComponent?(v12);
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  _OWORD v14[12] = a1[12];
  v14[13] = v1;
  long long v2 = a1[15];
  v14[14] = a1[14];
  long long v15 = v2;
  long long v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  long long v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  long long v5 = a1[5];
  v14[4] = a1[4];
  void v14[5] = v5;
  long long v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  long long v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  long long v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v14);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v10 = *((void *)&v15 + 1);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    uint64_t v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  uint64_t v9;
  unsigned char v10[24];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[14];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  uint64_t v14 = a1[14];
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  long long v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  long long v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  long long v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v13);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v9 = *((void *)&v14 + 1);
    long long v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    uint64_t v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v9);
    return swift_endAccess();
  }
  return result;
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  uint64_t v9;
  unsigned char v10[24];
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[14];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  uint64_t v14 = a1[14];
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  long long v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  long long v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  long long v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if ((result & 1) == 0)
  {
    specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)((uint64_t)v13);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v9 = *((void *)&v14 + 1);
    long long v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    uint64_t v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v10, v9);
    return swift_endAccess();
  }
  return result;
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t)v10, (void (*)(_OWORD *))OrbitEntityActionHandler.actionStarted(event:));
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

{
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v2 = a1[15];
  v13[14] = a1[14];
  long long v14 = v2;
  long long v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  long long v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  long long v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = *((void *)&v14 + 1);
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[14];
  long long v13;

  long long v1 = a1[13];
  _OWORD v12[12] = a1[12];
  v12[13] = v1;
  uint64_t v13 = a1[14];
  long long v2 = a1[9];
  v12[8] = a1[8];
  v12[9] = v2;
  long long v3 = a1[11];
  v12[10] = a1[10];
  v12[11] = v3;
  long long v4 = a1[5];
  v12[4] = a1[4];
  v12[5] = v4;
  long long v5 = a1[7];
  v12[6] = a1[6];
  v12[7] = v5;
  long long v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  long long v7 = a1[3];
  v12[2] = a1[2];
  v12[3] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  long long v8 = *((void *)&v13 + 1);
  long long v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[14];
  long long v13;

  long long v1 = a1[13];
  _OWORD v12[12] = a1[12];
  v12[13] = v1;
  uint64_t v13 = a1[14];
  long long v2 = a1[9];
  v12[8] = a1[8];
  v12[9] = v2;
  long long v3 = a1[11];
  v12[10] = a1[10];
  v12[11] = v3;
  long long v4 = a1[5];
  v12[4] = a1[4];
  v12[5] = v4;
  long long v5 = a1[7];
  v12[6] = a1[6];
  v12[7] = v5;
  long long v6 = a1[1];
  v12[0] = *a1;
  v12[1] = v6;
  long long v7 = a1[3];
  v12[2] = a1[2];
  v12[3] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  long long v8 = *((void *)&v13 + 1);
  long long v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v2 = a1[15];
  v13[14] = a1[14];
  long long v14 = v2;
  long long v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  long long v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  long long v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = *((void *)&v14 + 1);
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  long long v14;
  uint64_t v15[24];
  uint64_t v16[24];

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v2 = a1[15];
  v13[14] = a1[14];
  long long v14 = v2;
  long long v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  long long v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  long long v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, (uint64_t)v11);
  outlined init with take of Transform?((uint64_t)v11, (uint64_t)v15, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for OrbitEntityActionHandler?);
  if (_s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(v16) != 1) {
    outlined release of OrbitEntityActionHandler?(v15);
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = *((void *)&v14 + 1);
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;
  _OWORD v13[15];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v2 = a1[15];
  v13[14] = a1[14];
  long long v14 = v2;
  long long v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  long long v4 = a1[11];
  v13[10] = a1[10];
  v13[11] = v4;
  long long v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  long long v6 = a1[7];
  v13[6] = a1[6];
  v13[7] = v6;
  long long v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  long long v8 = a1[3];
  v13[2] = a1[2];
  v13[3] = v8;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = *((void *)&v14 + 1);
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;
  _OWORD v12[13];
  long long v13;

  long long v1 = a1[11];
  v12[10] = a1[10];
  v12[11] = v1;
  long long v2 = a1[13];
  _OWORD v12[12] = a1[12];
  uint64_t v13 = v2;
  long long v3 = a1[7];
  v12[6] = a1[6];
  v12[7] = v3;
  long long v4 = a1[9];
  v12[8] = a1[8];
  v12[9] = v4;
  long long v5 = a1[3];
  v12[2] = a1[2];
  v12[3] = v5;
  long long v6 = a1[5];
  v12[4] = a1[4];
  v12[5] = v6;
  long long v7 = a1[1];
  v12[0] = *a1;
  v12[1] = v7;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v12);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  long long v8 = *((void *)&v13 + 1);
  long long v11 = 0;
  memset(v10, 0, sizeof(v10));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[15];
  long long v15;

  long long v1 = a1[13];
  _OWORD v14[12] = a1[12];
  v14[13] = v1;
  long long v2 = a1[15];
  v14[14] = a1[14];
  long long v15 = v2;
  long long v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  long long v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  long long v5 = a1[5];
  v14[4] = a1[4];
  void v14[5] = v5;
  long long v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  long long v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  long long v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  uint64_t v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if (v9 != 1) {
    outlined consume of __ImageBasedLightComponent?(v9);
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v10 = *((void *)&v15 + 1);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  _OWORD v14[12] = a1[12];
  v14[13] = v1;
  long long v2 = a1[15];
  v14[14] = a1[14];
  long long v15 = v2;
  long long v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  long long v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  long long v5 = a1[5];
  v14[4] = a1[4];
  void v14[5] = v5;
  long long v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  long long v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  long long v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14))
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  else
  {
    *((void *)&v12 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
    uint64_t v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<String> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<String>);
  }
  uint64_t v9 = *((void *)&v15 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  long long v10;
  long long v11;
  uint64_t v12;
  _OWORD v13[14];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v14 = a1[14];
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  long long v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  long long v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  long long v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Bool>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>))
  {
    long long v12 = 0;
    uint64_t v10 = 0u;
    long long v11 = 0u;
  }
  else
  {
    *((void *)&v11 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
    long long v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Bool> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Bool>);
  }
  long long v8 = *((void *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  long long v10;
  long long v11;
  uint64_t v12;
  _OWORD v13[14];
  long long v14;

  long long v1 = a1[13];
  v13[12] = a1[12];
  v13[13] = v1;
  long long v14 = a1[14];
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  long long v3 = a1[11];
  v13[10] = a1[10];
  v13[11] = v3;
  long long v4 = a1[5];
  v13[4] = a1[4];
  v13[5] = v4;
  long long v5 = a1[7];
  v13[6] = a1[6];
  v13[7] = v5;
  long long v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  long long v7 = a1[3];
  v13[2] = a1[2];
  v13[3] = v7;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13, &demangling cache variable for type metadata for SetEntityPropertyAction<Float>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>))
  {
    long long v12 = 0;
    uint64_t v10 = 0u;
    long long v11 = 0u;
  }
  else
  {
    *((void *)&v11 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
    long long v12 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<Float> and conformance SetEntityPropertyActionHandler<A>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<Float>);
  }
  long long v8 = *((void *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  long long v18;
  long long v19;
  _UNKNOWN **v20;
  _OWORD v21[15];
  long long v22;

  long long v1 = a1[13];
  v21[12] = a1[12];
  v21[13] = v1;
  long long v2 = a1[15];
  _OWORD v21[14] = a1[14];
  long long v22 = v2;
  long long v3 = a1[9];
  v21[8] = a1[8];
  v21[9] = v3;
  long long v4 = a1[11];
  v21[10] = a1[10];
  v21[11] = v4;
  long long v5 = a1[5];
  v21[4] = a1[4];
  v21[5] = v5;
  long long v6 = a1[7];
  v21[6] = a1[6];
  v21[7] = v6;
  long long v7 = a1[1];
  v21[0] = *a1;
  v21[1] = v7;
  long long v8 = a1[3];
  v21[2] = a1[2];
  v21[3] = v8;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v21);
  if ((v11 & 0x100) != 0)
  {
    long long v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  else
  {
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v14 = v11;
    *((void *)&v19 + 1) = &type metadata for SpinActionHandler;
    long long v20 = &protocol witness table for SpinActionHandler;
    long long v15 = swift_allocObject();
    *(void *)&long long v18 = v15;
    *(void *)(v15 + 16) = v12;
    *(void *)(v15 + 24) = v13;
    *(unsigned char *)(v15 + 32) = v14 & 1;
  }
  long long v16 = *((void *)&v22 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v18, v16);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  long long v11;
  long long v12;
  _UNKNOWN **v13;
  _OWORD v14[15];
  long long v15;

  long long v1 = a1[13];
  _OWORD v14[12] = a1[12];
  v14[13] = v1;
  long long v2 = a1[15];
  v14[14] = a1[14];
  long long v15 = v2;
  long long v3 = a1[9];
  v14[8] = a1[8];
  v14[9] = v3;
  long long v4 = a1[11];
  v14[10] = a1[10];
  v14[11] = v4;
  long long v5 = a1[5];
  v14[4] = a1[4];
  void v14[5] = v5;
  long long v6 = a1[7];
  v14[6] = a1[6];
  v14[7] = v6;
  long long v7 = a1[1];
  v14[0] = *a1;
  v14[1] = v7;
  long long v8 = a1[3];
  v14[2] = a1[2];
  v14[3] = v8;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14))
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  else
  {
    *((void *)&v12 + 1) = &type metadata for ImpulseActionHandler;
    uint64_t v13 = &protocol witness table for ImpulseActionHandler;
  }
  uint64_t v9 = *((void *)&v15 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v11, v9);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  long long v10;
  long long v11;
  _UNKNOWN **v12;
  _OWORD v13[13];
  long long v14;

  long long v1 = a1[11];
  v13[10] = a1[10];
  v13[11] = v1;
  long long v2 = a1[13];
  v13[12] = a1[12];
  long long v14 = v2;
  long long v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  long long v4 = a1[9];
  v13[8] = a1[8];
  v13[9] = v4;
  long long v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  long long v6 = a1[5];
  v13[4] = a1[4];
  v13[5] = v6;
  long long v7 = a1[1];
  v13[0] = *a1;
  v13[1] = v7;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v13))
  {
    long long v12 = 0;
    uint64_t v10 = 0u;
    long long v11 = 0u;
  }
  else
  {
    *((void *)&v11 + 1) = &type metadata for NotificationActionHandler;
    long long v12 = &protocol witness table for NotificationActionHandler;
  }
  long long v8 = *((void *)&v14 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v10, v8);
  return swift_endAccess();
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  long long v12;
  long long v13;
  _UNKNOWN **v14;
  _OWORD v15[15];
  long long v16;

  long long v1 = a1[13];
  v15[12] = a1[12];
  v15[13] = v1;
  long long v2 = a1[15];
  v15[14] = a1[14];
  long long v16 = v2;
  long long v3 = a1[9];
  v15[8] = a1[8];
  v15[9] = v3;
  long long v4 = a1[11];
  v15[10] = a1[10];
  v15[11] = v4;
  long long v5 = a1[5];
  v15[4] = a1[4];
  v15[5] = v5;
  long long v6 = a1[7];
  v15[6] = a1[6];
  v15[7] = v6;
  long long v7 = a1[1];
  v15[0] = *a1;
  v15[1] = v7;
  long long v8 = a1[3];
  v15[2] = a1[2];
  _OWORD v15[3] = v8;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v9 = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v15);
  if (v9 == 1)
  {
    long long v14 = 0;
    long long v12 = 0u;
    uint64_t v13 = 0u;
  }
  else
  {
    *((void *)&v13 + 1) = &type metadata for PlayAnimationActionHandler;
    long long v14 = &protocol witness table for PlayAnimationActionHandler;
    *(void *)&long long v12 = v9;
  }
  uint64_t v10 = *((void *)&v16 + 1);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, (void (*)(uint64_t *))specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:), &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 1uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 1uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 1uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 1uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for FromToByActionHandler<BlendShapeWeights>, (void (*)(void, void))outlined consume of BlendShapeWeights??);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for FromToByActionHandler<JointTransforms>, (void (*)(void, void))outlined consume of JointTransforms??);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>);
}

{
  return specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>);
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<simd_quatf>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<simd_quatf> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD4<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD4<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for SetEntityPropertyActionHandler<SIMD3<Float>>, &lazy protocol witness table cache variable for type SetEntityPropertyActionHandler<SIMD3<Float>> and conformance SetEntityPropertyActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?, &lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, void (*a4)(uint64_t *), unint64_t *a5)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((result & 1) == 0)
  {
    a4(__dst);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v10 = __dst[33];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a4, __dst[15], a2);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v10 = __dst[33];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3)
{
  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v5 = __dst[33];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, v5);
  return swift_endAccess();
}

{
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t __dst[40];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v5 = __dst[39];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, v5);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3))
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  else
  {
    *((void *)&v10 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v11 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3);
  }
  uint64_t v7 = __dst[33];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v9, v7);
  return swift_endAccess();
}

{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t __dst[40];

  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v7 = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if (v10)
  {
    long long v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  else
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    *((void *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    *(void *)&long long v16 = v11;
    BYTE8(v16) = v12 & 1;
    long long v18 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3);
    *(void *)&long long v17 = v13;
  }
  long long v14 = __dst[39];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v16, v14);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(_OWORD *), unint64_t *a5)
{
  long long v8 = *(_OWORD *)(a1 + 208);
  v20[12] = *(_OWORD *)(a1 + 192);
  v20[13] = v8;
  v20[14] = *(_OWORD *)(a1 + 224);
  uint64_t v21 = *(void *)(a1 + 240);
  long long v9 = *(_OWORD *)(a1 + 144);
  v20[8] = *(_OWORD *)(a1 + 128);
  v20[9] = v9;
  long long v10 = *(_OWORD *)(a1 + 176);
  v20[10] = *(_OWORD *)(a1 + 160);
  v20[11] = v10;
  long long v11 = *(_OWORD *)(a1 + 80);
  v20[4] = *(_OWORD *)(a1 + 64);
  v20[5] = v11;
  long long v12 = *(_OWORD *)(a1 + 112);
  v20[6] = *(_OWORD *)(a1 + 96);
  v20[7] = v12;
  long long v13 = *(_OWORD *)(a1 + 16);
  v20[0] = *(_OWORD *)a1;
  v20[1] = v13;
  long long v14 = *(_OWORD *)(a1 + 48);
  v20[2] = *(_OWORD *)(a1 + 32);
  v20[3] = v14;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v20, a2, a3);
  if ((result & 1) == 0)
  {
    a4(v20);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v16 = v21;
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v19 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v17, v16);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  long long v9 = *(_OWORD *)(a1 + 208);
  long long v28 = *(_OWORD *)(a1 + 192);
  long long v29 = v9;
  long long v30 = *(_OWORD *)(a1 + 224);
  uint64_t v31 = *(void *)(a1 + 240);
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = v10;
  long long v11 = *(_OWORD *)(a1 + 176);
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = v11;
  long long v12 = *(_OWORD *)(a1 + 80);
  v21[4] = *(_OWORD *)(a1 + 64);
  v21[5] = v12;
  long long v13 = *(_OWORD *)(a1 + 112);
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = v13;
  long long v14 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v14;
  long long v15 = *(_OWORD *)(a1 + 48);
  v21[2] = *(_OWORD *)(a1 + 32);
  v21[3] = v15;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v21, a2, a3);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a4, v22, a2);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v17 = v31;
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v20 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v18, v17);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long v3 = *(_OWORD *)(a1 + 208);
  _OWORD v14[12] = *(_OWORD *)(a1 + 192);
  v14[13] = v3;
  v14[14] = *(_OWORD *)(a1 + 224);
  uint64_t v15 = *(void *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 144);
  v14[8] = *(_OWORD *)(a1 + 128);
  v14[9] = v4;
  long long v5 = *(_OWORD *)(a1 + 176);
  v14[10] = *(_OWORD *)(a1 + 160);
  v14[11] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  void v14[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 112);
  v14[6] = *(_OWORD *)(a1 + 96);
  v14[7] = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v9;
  specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14, a2, a3);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v10 = v15;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v12, v10);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  long long v7 = *(_OWORD *)(a1 + 208);
  v19[12] = *(_OWORD *)(a1 + 192);
  v19[13] = v7;
  v19[14] = *(_OWORD *)(a1 + 224);
  uint64_t v20 = *(void *)(a1 + 240);
  long long v8 = *(_OWORD *)(a1 + 144);
  v19[8] = *(_OWORD *)(a1 + 128);
  v19[9] = v8;
  long long v9 = *(_OWORD *)(a1 + 176);
  v19[10] = *(_OWORD *)(a1 + 160);
  v19[11] = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  v19[4] = *(_OWORD *)(a1 + 64);
  v19[5] = v10;
  long long v11 = *(_OWORD *)(a1 + 112);
  v19[6] = *(_OWORD *)(a1 + 96);
  v19[7] = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  v19[0] = *(_OWORD *)a1;
  v19[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  v19[2] = *(_OWORD *)(a1 + 32);
  v19[3] = v13;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  if (specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v19, a2, a3))
  {
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  else
  {
    *((void *)&v17 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v18 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a4, a3);
  }
  uint64_t v14 = v20;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v16, v14);
  return swift_endAccess();
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[58];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[40];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, (void (*)(uint64_t *))specialized FromToByActionHandler.actionUpdated(event:), &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[40];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, (void (*)(uint64_t *))specialized FromToByActionHandler.actionUpdated(event:), &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, (void (*)(unsigned char *))BillboardActionHandler.actionUpdated(event:));
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(4uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(v2, (void (*)(unsigned char *))BillboardActionHandler.actionEnded(event:));
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(8uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 8uLL);
}

uint64_t specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 0x10uLL);
}

uint64_t specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *__src)
{
  memcpy(v2, __src, sizeof(v2));
  return specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  uint64_t v2[38];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(v2);
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<simd_quatf>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<simd_quatf>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<simd_quatf> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<simd_quatf>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD4<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD4<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  int8x16_t v1;
  char v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void v7[5];
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char v11[48];
  uint64_t __dst[46];

  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>, &v8);
  long long v1 = v8;
  long long v2 = v9;
  long long v3 = v10;
  uint64_t result = outlined init with take of Transform?((uint64_t)&v8, (uint64_t)v11, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>?);
  if ((v11[32] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, __dst[27], &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v5 = __dst[45];
    v7[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    v7[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<SIMD3<Float>> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD3<Float>>);
    long long v6 = swift_allocObject();
    v7[0] = v6;
    *(int8x16_t *)(v6 + 16) = v1;
    *(unsigned char *)(v6 + 32) = v2 & 1;
    *(void *)(v6 + 40) = v3;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v7, v5);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t v2[46];

  memcpy(v2, __src, sizeof(v2));
  return specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(v2, 0x20uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, void (*a4)(void, void))
{
  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, v9);
  if (*(void *)&v9[0] != 1) {
    a4(*(void *)&v9[0], *((void *)&v9[0] + 1));
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v7 = __dst[37];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, Swift::UInt a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, (uint64_t)v15);
  uint64_t v3 = v15[0];
  uint64_t v4 = v15[1];
  uint64_t v5 = v15[2];
  uint64_t v6 = v15[3];
  uint64_t v7 = v15[4];
  uint64_t v8 = v15[5];
  char v9 = v16;
  uint64_t v10 = v17;
  uint64_t result = outlined init with take of Transform?((uint64_t)v15, (uint64_t)v18, &demangling cache variable for type metadata for FromToByActionHandler<Transform>?);
  if ((v18[64] & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[39], &demangling cache variable for type metadata for FromToByAction<Transform>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v12 = __dst[57];
    v14[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    v14[4] = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Transform> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Transform>);
    uint64_t v13 = swift_allocObject();
    v14[0] = v13;
    *(void *)(v13 + 16) = v3;
    *(void *)(v13 + 24) = v4;
    *(void *)(v13 + 32) = v5;
    *(void *)(v13 + 40) = v6;
    *(void *)(v13 + 48) = v7;
    *(void *)(v13 + 56) = v8;
    *(unsigned char *)(v13 + 64) = v9 & 1;
    *(void *)(v13 + 72) = v10;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v14, v12);
    return swift_endAccess();
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t __dst[38];

  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst);
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = result;
    uint64_t v7 = v4;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, __dst[19], &demangling cache variable for type metadata for FromToByAction<Float>);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v8 = __dst[37];
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Float>);
    char v9 = v6;
    uint64_t v10 = BYTE4(v6) & 1;
    uint64_t v13 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type FromToByActionHandler<Float> and conformance FromToByActionHandler<A>, &demangling cache variable for type metadata for FromToByActionHandler<Float>);
    long long v11 = v7;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v9, v8);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, &demangling cache variable for type metadata for FromToByActionHandler<SIMD2<Float>>, 8uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<SIMD2<Float>> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, &demangling cache variable for type metadata for FromToByAction<Double>, &demangling cache variable for type metadata for FromToByActionHandler<Double>, 8uLL, &lazy protocol witness table cache variable for type FromToByActionHandler<Double> and conformance FromToByActionHandler<A>);
}

{
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

uint64_t specialized closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  memcpy(__dst, __src, sizeof(__dst));
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, v11);
  outlined init with take of Transform?((uint64_t)v11, (uint64_t)v12, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t v7 = __dst[45];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v9, v7);
  return swift_endAccess();
}

uint64_t specialized closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  memcpy(__dst, __src, sizeof(__dst));
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3, &v18);
  int8x16_t v9 = v18;
  char v10 = v19;
  uint64_t v11 = v20;
  outlined init with take of Transform?((uint64_t)&v18, (uint64_t)v21, a4);
  if (v21[32])
  {
    uint64_t v17 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
  }
  else
  {
    *((void *)&v16 + 1) = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v17 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    uint64_t v12 = swift_allocObject();
    *(void *)&long long v15 = v12;
    *(int8x16_t *)(v12 + 16) = v9;
    *(unsigned char *)(v12 + 32) = v10 & 1;
    *(void *)(v12 + 40) = v11;
  }
  uint64_t v13 = __dst[45];
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v15, v13);
  return swift_endAccess();
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *__src, uint64_t *a2, uint64_t *a3, Swift::UInt a4, unint64_t *a5)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)(__dst, a2, a3);
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = result;
    char v14 = v10;
    uint64_t v15 = v11;
    specialized static EntityAction.__unsubscribe(from:_:)(a4, __dst[21], a2);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v16 = __dst[39];
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v17 = v13;
    char v18 = v14 & 1;
    uint64_t v21 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(a5, a3);
    uint64_t v19 = v15;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v17, v16);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, 8uLL);
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  _OWORD v10[16];

  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  uint64_t v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  uint64_t v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  uint64_t v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  uint64_t v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  uint64_t v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  uint64_t v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10);
}

uint64_t specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1, Swift::UInt a2)
{
  long long v3 = a1[13];
  long long v27 = a1[12];
  long long v28 = v3;
  long long v4 = a1[15];
  long long v29 = a1[14];
  long long v30 = v4;
  long long v5 = a1[9];
  long long v23 = a1[8];
  long long v24 = v5;
  long long v6 = a1[11];
  long long v25 = a1[10];
  long long v26 = v6;
  long long v7 = a1[5];
  v20[4] = a1[4];
  v20[5] = v7;
  long long v8 = a1[7];
  long long v21 = a1[6];
  long long v22 = v8;
  long long v9 = a1[1];
  v20[0] = *a1;
  v20[1] = v9;
  long long v10 = a1[3];
  v20[2] = a1[2];
  v20[3] = v10;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v20);
  if ((v13 & 0x100) == 0)
  {
    uint64_t v14 = result;
    uint64_t v15 = v12;
    char v16 = v13;
    specialized static EntityAction.__unsubscribe(from:_:)(a2, *((uint64_t *)&v21 + 1));
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v17 = *((void *)&v30 + 1);
    v19[3] = &type metadata for SpinActionHandler;
    v19[4] = &protocol witness table for SpinActionHandler;
    uint64_t v18 = swift_allocObject();
    v19[0] = v18;
    *(void *)(v18 + 16) = v14;
    *(void *)(v18 + 24) = v15;
    *(unsigned char *)(v18 + 32) = v16 & 1;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v19, v17);
    return swift_endAccess();
  }
  return result;
}

uint64_t *specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 4uLL);
}

uint64_t *specialized closure #4 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 8uLL);
}

uint64_t *specialized closure #5 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 0x10uLL);
}

uint64_t *specialized closure #6 in static ActionHandlerProtocol.subscribe(_:)(_OWORD *a1)
{
  long long v1 = a1[13];
  v10[12] = a1[12];
  v10[13] = v1;
  long long v2 = a1[15];
  v10[14] = a1[14];
  v10[15] = v2;
  long long v3 = a1[9];
  v10[8] = a1[8];
  v10[9] = v3;
  long long v4 = a1[11];
  v10[10] = a1[10];
  v10[11] = v4;
  long long v5 = a1[5];
  v10[4] = a1[4];
  v10[5] = v5;
  long long v6 = a1[7];
  v10[6] = a1[6];
  v10[7] = v6;
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  _OWORD v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in static ActionHandlerProtocol.subscribe(_:)((uint64_t *)v10, 0x20uLL);
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(float32x4_t *a1)
{
  float32x4_t v1 = a1[13];
  float32x4_t v39 = a1[12];
  float32x4_t v40 = v1;
  float32x4_t v2 = a1[15];
  float32x4_t v41 = a1[14];
  float32x4_t v42 = v2;
  float32x4_t v3 = a1[9];
  float32x4_t v35 = a1[8];
  float32x4_t v36 = v3;
  float32x4_t v4 = a1[11];
  float32x4_t v37 = a1[10];
  float32x4_t v38 = v4;
  float32x4_t v5 = a1[5];
  float32x4_t v31 = a1[4];
  float32x4_t v32 = v5;
  float32x4_t v6 = a1[7];
  float32x4_t v33 = a1[6];
  float32x4_t v34 = v6;
  float32x4_t v7 = a1[1];
  float32x4_t v27 = *a1;
  float32x4_t v28 = v7;
  float32x4_t v8 = a1[3];
  float32x4_t v29 = a1[2];
  float32x4_t v30 = v8;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v27);
  if ((result & 1) == 0)
  {
    float32x4_t v24 = v40;
    float32x4_t v25 = v41;
    float32x4_t v26 = v42;
    float32x4_t v20 = v36;
    float32x4_t v21 = v37;
    float32x4_t v22 = v38;
    float32x4_t v23 = v39;
    float32x4_t v15 = v31;
    float32x4_t v16 = v32;
    float32x4_t v17 = v33;
    float32x4_t v18 = v34;
    float32x4_t v19 = v35;
    float32x4_t v11 = v27;
    float32x4_t v12 = v28;
    float32x4_t v13 = v29;
    float32x4_t v14 = v30;
    ImpulseActionHandler.applyImpulse(event:)(&v11);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v10 = v42.i64[1];
    v12.i64[1] = (uint64_t)&type metadata for ImpulseActionHandler;
    v13.i64[0] = (uint64_t)&protocol witness table for ImpulseActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #1 in static ActionHandlerProtocol.subscribe(_:)(long long *a1)
{
  long long v1 = a1[11];
  long long v33 = a1[10];
  long long v34 = v1;
  long long v35 = a1[12];
  uint64_t v36 = *((void *)a1 + 26);
  long long v2 = a1[7];
  long long v29 = a1[6];
  long long v30 = v2;
  long long v3 = a1[9];
  long long v31 = a1[8];
  long long v32 = v3;
  long long v4 = a1[3];
  long long v25 = a1[2];
  long long v26 = v4;
  long long v5 = a1[5];
  long long v27 = a1[4];
  long long v28 = v5;
  long long v6 = a1[1];
  long long v23 = *a1;
  long long v24 = v6;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v23);
  if ((result & 1) == 0)
  {
    long long v20 = v34;
    long long v21 = v35;
    long long v16 = v30;
    long long v17 = v31;
    uint64_t v22 = v36;
    long long v18 = v32;
    long long v19 = v33;
    long long v11 = v25;
    long long v12 = v26;
    long long v13 = v27;
    long long v14 = v28;
    long long v15 = v29;
    long long v9 = v23;
    long long v10 = v24;
    specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)((uint64_t)&v9);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v8 = v36;
    *((void *)&v10 + 1) = &type metadata for SetEntityEnabledActionHandler;
    *(void *)&long long v11 = &protocol witness table for SetEntityEnabledActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v9, v8);
    return swift_endAccess();
  }
  return result;
}

{
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t result;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;

  long long v1 = a1[11];
  long long v34 = a1[10];
  long long v35 = v1;
  long long v2 = a1[13];
  uint64_t v36 = a1[12];
  float32x4_t v37 = v2;
  long long v3 = a1[7];
  long long v30 = a1[6];
  long long v31 = v3;
  long long v4 = a1[9];
  long long v32 = a1[8];
  long long v33 = v4;
  long long v5 = a1[3];
  long long v26 = a1[2];
  long long v27 = v5;
  long long v6 = a1[5];
  long long v28 = a1[4];
  long long v29 = v6;
  float32x4_t v7 = a1[1];
  long long v24 = *a1;
  long long v25 = v7;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)&v24);
  if ((result & 1) == 0)
  {
    long long v21 = v35;
    uint64_t v22 = v36;
    long long v23 = v37;
    long long v17 = v31;
    long long v18 = v32;
    long long v19 = v33;
    long long v20 = v34;
    long long v12 = v26;
    long long v13 = v27;
    long long v14 = v28;
    long long v15 = v29;
    long long v16 = v30;
    long long v10 = v24;
    long long v11 = v25;
    specialized NotificationActionHandler.postNotification(event:)(&v10);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    long long v9 = *((void *)&v37 + 1);
    *((void *)&v11 + 1) = &type metadata for NotificationActionHandler;
    *(void *)&long long v12 = &protocol witness table for NotificationActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)&v10, v9);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #2 in static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, Swift::UInt a2)
{
  long long v3 = *(_OWORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a1 + 160);
  long long v22 = v3;
  long long v23 = *(_OWORD *)(a1 + 192);
  uint64_t v24 = *(void *)(a1 + 208);
  long long v4 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 96);
  long long v18 = v4;
  long long v5 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 128);
  long long v20 = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v6;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 64);
  long long v16 = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v8;
  uint64_t result = specialized static ActionHandlerProtocol.actionHandler(_:)((uint64_t *)v14);
  if ((result & 1) == 0)
  {
    specialized static EntityAction.__unsubscribe(from:_:)(a2, v15);
    if (one-time initialization token for actionHandlers != -1) {
      swift_once();
    }
    uint64_t v10 = v24;
    long long v12 = &type metadata for SetEntityEnabledActionHandler;
    long long v13 = &protocol witness table for SetEntityEnabledActionHandler;
    swift_beginAccess();
    specialized Dictionary.subscript.setter((uint64_t)v11, v10);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized __Engine.Configuration.device.setter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *v2;
  int v5 = REGetRetainCount();
  uint64_t v6 = *(void *)(v4 + 16);
  if (v5 >= 2)
  {
    swift_retain();
    uint64_t v6 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v6;
    swift_release_n();
    *long long v2 = v7;
  }

  return a2(v6, a1);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_227FCCC04()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for __Engine()
{
  return self;
}

uint64_t sub_227FCCC38@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t sub_227FCCC68(unsigned int *a1)
{
  unsigned int v2 = *a1;
  return __Engine.Configuration.clockMode.setter(&v2);
}

uint64_t sub_227FCCCA0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_13Tm(a1, MEMORY[0x263F37008], a2);
}

uint64_t sub_227FCCCB8(char *a1)
{
  return __Engine.Configuration.useMetal.setter(*a1);
}

uint64_t sub_227FCCCE0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_13Tm(a1, MEMORY[0x263F36FF8], a2);
}

uint64_t sub_227FCCCF8(char *a1)
{
  return __Engine.Configuration.forExportOnly.setter(*a1);
}

uint64_t sub_227FCCD20@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_13Tm(a1, MEMORY[0x263F37018], a2);
}

uint64_t sub_227FCCD38(char *a1)
{
  return __Engine.Configuration.useRealityIO.setter(*a1);
}

uint64_t sub_227FCCD60@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_13Tm(a1, MEMORY[0x263F37010], a2);
}

uint64_t sub_227FCCD78(char *a1)
{
  return __Engine.Configuration.usePhysicsSceneSystem.setter(*a1);
}

uint64_t sub_227FCCDA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  *a1 = result;
  return result;
}

uint64_t sub_227FCCDD0(uint64_t *a1)
{
  return __Engine.Configuration.assetRuntimeSizeLimit.setter(*a1);
}

id sub_227FCCDF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_23Tm(a1, MEMORY[0x263F36FE0], a2);
}

uint64_t sub_227FCCE10()
{
  uint64_t v0 = swift_unknownObjectRetain();
  specialized __Engine.Configuration.device.setter(v0, MEMORY[0x263F37028]);

  return swift_unknownObjectRelease();
}

uint64_t sub_227FCCE68@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_13Tm(a1, MEMORY[0x263F37000], a2);
}

uint64_t keypath_get_13Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*(void *)(*(void *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_227FCCEB4(char *a1)
{
  return __Engine.Configuration.isHostingSharedAudioSimulation.setter(*a1);
}

id sub_227FCCEDC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_23Tm(a1, MEMORY[0x263F36FF0], a2);
}

id keypath_get_23Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X8>)
{
  id result = (id)a2(*(void *)(*(void *)a1 + 16));
  *a3 = result;
  return result;
}

void sub_227FCCF30(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized __Engine.Configuration.device.setter((uint64_t)v1, MEMORY[0x263F37038]);
}

uint64_t sub_227FCCF94@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t sub_227FCCFC4(unsigned int *a1)
{
  unsigned int v2 = *a1;
  return __Engine.Configuration.__createServices.setter(&v2);
}

uint64_t sub_227FCCFFC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t sub_227FCD02C(unsigned int *a1)
{
  unsigned int v2 = *a1;
  return __Engine.Configuration.__updateServices.setter(&v2);
}

uint64_t sub_227FCD064@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t sub_227FCD094(unsigned int *a1)
{
  unsigned int v2 = *a1;
  return __Engine.Configuration.__startupOptions.setter(&v2);
}

uint64_t sub_227FCD0CC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t sub_227FCD0FC(unsigned int *a1)
{
  unsigned int v2 = *a1;
  return __Engine.Configuration.__renderFlags.setter(&v2);
}

uint64_t sub_227FCD134@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 40);
  return swift_retain();
}

uint64_t sub_227FCD184@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 48);
  return result;
}

uint64_t sub_227FCD1CC(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 48) = v2;
  return result;
}

uint64_t sub_227FCD210@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = REEngineGetAcceptingInput();
  *a1 = result;
  return result;
}

void sub_227FCD240()
{
}

uint64_t method lookup function for __Engine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __Engine);
}

uint64_t dispatch thunk of __Engine.__coreEngine.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of __Engine.asyncOnEngineQueue(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of __Engine.asyncAfterOnEngineQueue(deadline:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of __Engine.services.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of __Engine.isRunning.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __Engine.acceptingInput.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of __Engine.__allocating_init(configuration:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of __Engine.start()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of __Engine.__start()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of __Engine.__stop()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of __Engine.__registerREKitBuiltInActions()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of __Engine.__registerREKitBuiltInForceEffects()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

ValueMetadata *type metadata accessor for __Engine.Configuration()
{
  return &type metadata for __Engine.Configuration;
}

ValueMetadata *type metadata accessor for EngineRenderEvent()
{
  return &type metadata for EngineRenderEvent;
}

ValueMetadata *type metadata accessor for EngineUpdateEvent()
{
  return &type metadata for EngineUpdateEvent;
}

unint64_t lazy protocol witness table accessor for type TurbulenceForceEffect and conformance TurbulenceForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect;
  if (!lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TurbulenceForceEffect and conformance TurbulenceForceEffect);
  }
  return result;
}

uint64_t partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2)
{
  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(unsigned char *))(v2 + 16));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(unsigned char *))(v2 + 16), *(void *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect, (uint64_t)&type metadata for DragForceEffect, (void (*)(_OWORD *))outlined release of ForceEffectEvent<DragForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_OWORD *))(v2 + 16), *(void *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect, (uint64_t)&type metadata for VortexForceEffect, (void (*)(unsigned char *))outlined release of ForceEffectEvent<VortexForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(unsigned char *))(v2 + 16));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(unsigned char *))(v2 + 16), *(void *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect, (uint64_t)&type metadata for ConstantRadialForceEffect, (void (*)(_OWORD *))outlined release of ForceEffectEvent<ConstantRadialForceEffect>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static ForceEffectProtocol<>.__register(engine:_:)(a1, a2, *(void (**)(_OWORD *))(v2 + 16), *(void *)(v2 + 24), (void (*)(void))lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect, (uint64_t)&type metadata for ConstantForceEffect, (void (*)(unsigned char *))outlined release of ForceEffectEvent<ConstantForceEffect>);
}

uint64_t outlined release of ForceEffectEvent<TurbulenceForceEffect>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type DragForceEffect and conformance DragForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect;
  if (!lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect;
  if (!lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragForceEffect and conformance DragForceEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VortexForceEffect and conformance VortexForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect;
  if (!lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect;
  if (!lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VortexForceEffect and conformance VortexForceEffect);
  }
  return result;
}

uint64_t outlined release of ForceEffectEvent<VortexForceEffect>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type RadialForceEffect and conformance RadialForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect;
  if (!lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect;
  if (!lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadialForceEffect and conformance RadialForceEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantRadialForceEffect and conformance ConstantRadialForceEffect);
  }
  return result;
}

uint64_t outlined release of ForceEffectEvent<ConstantRadialForceEffect>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ConstantForceEffect and conformance ConstantForceEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect;
  if (!lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConstantForceEffect and conformance ConstantForceEffect);
  }
  return result;
}

uint64_t partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  return specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, void *a6, void *a7, void *a8)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(a1, a2, a3, a4, a5, a6, a7, a8, *(uint64_t (**)(uint64_t, _OWORD *, void, void, void, void, double, double))(v8 + 16));
}

uint64_t sub_227FCDAFC()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Int>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<simd_quatf>>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<simd_quatf>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD4<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD4<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD3<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD3<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD2<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD2<Float>>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Double>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Double>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<BlendShapeWeights>>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<BlendShapeWeights>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<JointTransforms>>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<JointTransforms>>);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), (void (*)(void *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<simd_quatf>?, (unsigned int (*)(unsigned char *))_s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of FromToByAction<simd_quatf>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<simd_quatf>>, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of FromToByAction<simd_quatf>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), (void (*)(void *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<SIMD4<Float>>?, (unsigned int (*)(unsigned char *))_s17RealityFoundation14FromToByActionVys5SIMD4VySfGGSgWOg, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of FromToByAction<SIMD4<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD4<Float>>>, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of FromToByAction<SIMD4<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), (void (*)(void *__return_ptr, uint64_t))specialized ActionEventData.action<A>(), &demangling cache variable for type metadata for FromToByAction<SIMD3<Float>>?, (unsigned int (*)(unsigned char *))_s17RealityFoundation14FromToByActionVys5SIMD4VySfGGSgWOg, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of FromToByAction<SIMD4<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD3<Float>>>, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of FromToByAction<SIMD4<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<SIMD2<Float>>>, &demangling cache variable for type metadata for FromToByAction<SIMD2<Float>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of FromToByAction<SIMD2<Float>>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<SIMD2<Float>>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of FromToByAction<SIMD2<Float>>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32), *(void *)(v2 + 40), &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<Double>>, &demangling cache variable for type metadata for FromToByAction<Double>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of FromToByAction<Double>?, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<Double>>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of FromToByAction<Double>?);
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

{
  uint64_t v2;

  return specialized dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction and conformance EmphasizeAction()
{
  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction;
  if (!lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction;
  if (!lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction and conformance EmphasizeAction);
  }
  return result;
}

uint64_t sub_227FCDBEC()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type PlayAudioAction and conformance PlayAudioAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction;
  if (!lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction;
  if (!lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAudioAction and conformance PlayAudioAction);
  }
  return result;
}

void partial apply for specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Int>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Int>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Int>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<simd_quatf>>, &demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<simd_quatf>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD4<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD4<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD3<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD3<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<SIMD2<Float>>>, &demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<SIMD2<Float>>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<SetEntityPropertyAction<Double>>, &demangling cache variable for type metadata for SetEntityPropertyAction<Double>, &demangling cache variable for type metadata for EntityActionParameterWrapper<SetEntityPropertyAction<Double>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<BlendShapeWeights>>, &demangling cache variable for type metadata for FromToByAction<BlendShapeWeights>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<BlendShapeWeights>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9, &demangling cache variable for type metadata for EntityActionWrapper<FromToByAction<JointTransforms>>, &demangling cache variable for type metadata for FromToByAction<JointTransforms>, &demangling cache variable for type metadata for EntityActionParameterWrapper<FromToByAction<JointTransforms>>);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(void *))(v9 + 16), a7, a8, a9);
}

{
  uint64_t v9;

  specialized creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(uint64_t *))(v9 + 16), a7, a8, a9);
}

uint64_t outlined copy of SetEntityPropertyAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    outlined copy of ActionEntityResolution();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SetEntityPropertyAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    outlined consume of ActionEntityResolution();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<Transform>>(uint64_t a1)
{
  return a1;
}

void specialized FromToByActionHandler.getStartEnd(event:base:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  long long v7 = *(_OWORD *)(a1 + 224);
  long long v105 = *(_OWORD *)(a1 + 208);
  v106[0] = v7;
  long long v8 = *(_OWORD *)(a1 + 256);
  v106[1] = *(_OWORD *)(a1 + 240);
  v106[2] = v8;
  long long v9 = *(_OWORD *)(a1 + 160);
  long long v101 = *(_OWORD *)(a1 + 144);
  long long v102 = v9;
  long long v10 = *(_OWORD *)(a1 + 192);
  long long v103 = *(_OWORD *)(a1 + 176);
  long long v104 = v10;
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v97 = *(_OWORD *)(a1 + 80);
  long long v98 = v11;
  long long v12 = *(_OWORD *)(a1 + 128);
  long long v99 = *(_OWORD *)(a1 + 112);
  long long v100 = v12;
  long long v13 = *(_OWORD *)(a1 + 32);
  long long v93 = *(_OWORD *)(a1 + 16);
  long long v94 = v13;
  long long v14 = *(_OWORD *)(a1 + 64);
  long long v95 = *(_OWORD *)(a1 + 48);
  long long v96 = v14;
  uint64_t v15 = *((void *)&v101 + 1);
  uint64_t v16 = v101;
  char v17 = v104;
  uint64_t v18 = v93;
  unint64_t v19 = v94;
  unint64_t v20 = v95;
  int v21 = v14;
  char v22 = v100;
  if (v14 == 1)
  {
    float32x4_t v23 = a3;
    __n128 v24 = a4;
    __n128 v25 = a5;
    if (v100) {
      goto LABEL_3;
    }
  }
  uint64_t v68 = *((void *)&v93 + 1);
  unint64_t v69 = *((void *)&v94 + 1);
  uint64_t v70 = v97;
  unint64_t v71 = *((void *)&v95 + 1);
  unint64_t v72 = v98;
  unint64_t v73 = v99;
  uint64_t v74 = *((void *)&v97 + 1);
  unint64_t v75 = *((void *)&v98 + 1);
  unint64_t v76 = *((void *)&v99 + 1);
  long long v77 = v101;
  long long v80 = (__int128)a3;
  __n128 v83 = a4;
  __n128 v86 = a5;
  outlined init with take of Transform?((uint64_t)v106 + 8, (uint64_t)v107, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  uint64_t v31 = *(void *)(a1 + 280);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  outlined init with take of Transform?((uint64_t)v107, (uint64_t)&v89, &demangling cache variable for type metadata for FromToByAction<Transform>.TransformMode);
  specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)((uint64_t)&v89, v31, v88, v80, v83, v86);
  outlined init with take of Transform?((uint64_t)v88, (uint64_t)&v89, &demangling cache variable for type metadata for Transform?);
  if (v92)
  {
    float32x4_t v23 = 0uLL;
    char v30 = 1;
    __n128 v24 = 0uLL;
    __n128 v25 = 0uLL;
    __n128 v27 = 0uLL;
    __n128 v28 = 0uLL;
    __n128 v29 = 0uLL;
    goto LABEL_11;
  }
  float32x4_t v32 = v89;
  double v33 = *(double *)&v90;
  double v34 = *(double *)&v91;
  if (v21)
  {
    a3 = (float32x4_t)v80;
    a4 = v83;
    float32x4_t v23 = (float32x4_t)v80;
    __n128 v24 = v83;
    a5 = v86;
    __n128 v25 = v86;
    uint64_t v15 = *((void *)&v77 + 1);
    uint64_t v16 = v77;
    uint64_t v35 = v74;
    uint64_t v36 = v70;
    if (v22)
    {
LABEL_3:
      if ((v17 & 1) == 0)
      {
        v26.i64[0] = v16;
        v26.i64[1] = v15;
        __n128 v82 = v24;
        float32x4_t v85 = v23;
        __n128 v79 = v25;
        *(double *)a3.i64 = specialized static Transform.* infix(_:_:)(v23, v24.n128_f64[0], v25.n128_f64[0], v26);
        __n128 v25 = v79;
        __n128 v24 = v82;
        float32x4_t v23 = v85;
      }
      __n128 v27 = (__n128)a3;
      __n128 v28 = a4;
      __n128 v29 = a5;
      goto LABEL_6;
    }
  }
  else
  {
    v37.i64[0] = v18;
    v37.i64[1] = v68;
    double v66 = *(double *)&v90;
    float32x4_t v67 = v89;
    double v65 = *(double *)&v91;
    *(double *)&uint64_t v38 = specialized static Transform.* infix(_:_:)(v89, *(double *)&v90, *(double *)&v91, v37);
    uint64_t v42 = v39;
    uint64_t v18 = v38;
    unint64_t v43 = v40;
    unint64_t v19 = v44;
    unint64_t v45 = v41;
    unint64_t v20 = v46;
    if (v22)
    {
      a4 = v83;
      a5 = v86;
      a3 = (float32x4_t)v80;
      uint64_t v15 = *((void *)&v77 + 1);
      uint64_t v16 = v77;
      unint64_t v48 = v75;
      unint64_t v47 = v76;
      unint64_t v50 = v73;
      unint64_t v49 = v74;
      unint64_t v51 = v72;
      double v52 = *(double *)&v70;
      goto LABEL_24;
    }
    uint64_t v68 = v39;
    unint64_t v69 = v40;
    unint64_t v71 = v41;
    uint64_t v35 = v74;
    uint64_t v36 = v70;
    double v33 = v66;
    float32x4_t v32 = v67;
    double v34 = v65;
  }
  v53.i64[0] = v36;
  v53.i64[1] = v35;
  double v54 = specialized static Transform.* infix(_:_:)(v32, v33, v34, v53);
  v27.n128_f64[0] = v54;
  v28.n128_u64[0] = v56;
  v29.n128_u64[0] = v58;
  unint64_t v49 = v55;
  unint64_t v48 = v57;
  unint64_t v47 = v59;
  if (v21)
  {
    v27.n128_u64[1] = v55;
    v28.n128_u64[1] = v57;
    v29.n128_u64[1] = v59;
    __n128 v24 = v83;
    __n128 v25 = v86;
    float32x4_t v23 = (float32x4_t)v80;
    if ((v17 & 1) == 0)
    {
      __n128 v81 = v29;
      __n128 v84 = v28;
      float32x4_t v87 = (float32x4_t)v27;
      RESRTInverse();
      float32x4_t v61 = v60;
      if (one-time initialization token for identity != -1)
      {
        float32x4_t v78 = v60;
        swift_once();
        float32x4_t v61 = v78;
      }
      *(double *)v62.i64 = specialized static Transform.* infix(_:_:)(v87, v84.n128_f64[0], v81.n128_f64[0], v61);
      __n128 v29 = v81;
      __n128 v28 = v84;
      __n128 v27 = (__n128)v87;
      float32x4_t v23 = v62;
      __n128 v24 = v63;
      __n128 v25 = v64;
    }
    goto LABEL_6;
  }
  double v52 = v54;
  unint64_t v51 = v56;
  unint64_t v50 = v58;
  a4 = v83;
  a5 = v86;
  a3 = (float32x4_t)v80;
  uint64_t v15 = *((void *)&v77 + 1);
  uint64_t v16 = v77;
  unint64_t v45 = v71;
  uint64_t v42 = v68;
  unint64_t v43 = v69;
LABEL_24:
  v23.i64[0] = v18;
  v23.i64[1] = v42;
  v24.n128_u64[0] = v19;
  v24.n128_u64[1] = v43;
  v25.n128_u64[0] = v20;
  v25.n128_u64[1] = v45;
  if (v22) {
    goto LABEL_3;
  }
  v27.n128_f64[0] = v52;
  v27.n128_u64[1] = v49;
  v28.n128_u64[0] = v51;
  v28.n128_u64[1] = v48;
  v29.n128_u64[0] = v50;
  v29.n128_u64[1] = v47;
LABEL_6:
  char v30 = 0;
LABEL_11:
  *(float32x4_t *)a2 = v23;
  *(__n128 *)(a2 + 16) = v24;
  *(__n128 *)(a2 + 32) = v25;
  *(__n128 *)(a2 + 48) = v27;
  *(__n128 *)(a2 + 64) = v28;
  *(__n128 *)(a2 + 80) = v29;
  *(unsigned char *)(a2 + 96) = v30;
}

uint64_t specialized FromToByActionHandler.evaluateResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of Transform?(a1 + 360, (uint64_t)v64, &demangling cache variable for type metadata for Double?);
  uint64_t result = outlined init with take of Transform?((uint64_t)v64, (uint64_t)&v65, &demangling cache variable for type metadata for Double?);
  float32x4_t v5 = 0uLL;
  if ((v66 & 1) == 0)
  {
    specialized ActionEvent.animationState.getter((uint64_t)&v51);
    unint64_t v9 = v52.u64[1];
    if (v52.i64[1])
    {
      v42.i64[0] = a2;
      unint64_t v10 = v53.n128_u64[0];
      __swift_project_boxed_opaque_existential_1(&v51, v52.i64[1]);
      v40.i64[0] = *(void *)(v10 + 24);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v12 = type metadata accessor for Optional();
      v41.i64[0] = (uint64_t)v35;
      uint64_t v13 = *(void *)(v12 - 8);
      MEMORY[0x270FA5388](v12);
      uint64_t v15 = (char *)v35 - v14;
      ((void (*)(unint64_t, unint64_t))v40.i64[0])(v9, v10);
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        uint64_t AssociatedConformanceWitness = 0;
        long long v47 = 0u;
        long long v48 = 0u;
      }
      else
      {
        *((void *)&v48 + 1) = AssociatedTypeWitness;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
        (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(boxed_opaque_existential_1, v15, AssociatedTypeWitness);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
      a2 = v42.i64[0];
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v51, &demangling cache variable for type metadata for AnimationStateProtocol?);
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t AssociatedConformanceWitness = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
    uint64_t result = swift_dynamicCast();
    if (!result
      || (unsigned __int32 v18 = v53.n128_u32[0],
          float32x4_t v40 = v52,
          float32x4_t v41 = v51,
          int8x16_t v42 = (int8x16_t)v53,
          specialized FromToByActionHandler.getStartEnd(event:base:)(a1, (uint64_t)v46, v51, (__n128)v52, v53),
          outlined init with take of Transform?((uint64_t)v46, (uint64_t)&v51, &demangling cache variable for type metadata for (start: Transform, end: Transform)?), uint64_t result = outlined init with take of Transform?((uint64_t)v46, (uint64_t)&v47, &demangling cache variable for type metadata for (start: Transform, end: Transform)?), (v50 & 1) != 0))
    {
      char v6 = 1;
      float32x4_t v7 = 0uLL;
      __n128 v8 = 0uLL;
      float32x4_t v5 = 0uLL;
      goto LABEL_18;
    }
    __n128 v38 = (__n128)v52;
    float32x4_t v39 = v51;
    simd_float4 v36 = v54;
    float32x4_t v37 = (float32x4_t)v53;
    v35[0] = v56;
    v35[1] = v55;
    long long v19 = *(_OWORD *)(a1 + 224);
    v63[0] = *(_OWORD *)(a1 + 208);
    v63[1] = v19;
    *(_OWORD *)((char *)&v63[1] + 9) = *(_OWORD *)(a1 + 233);
    long long v20 = *(_OWORD *)(a1 + 160);
    long long v59 = *(_OWORD *)(a1 + 144);
    long long v60 = v20;
    long long v21 = *(_OWORD *)(a1 + 192);
    long long v61 = *(_OWORD *)(a1 + 176);
    long long v62 = v21;
    long long v22 = *(_OWORD *)(a1 + 96);
    long long v55 = *(_OWORD *)(a1 + 80);
    long long v56 = v22;
    long long v23 = *(_OWORD *)(a1 + 128);
    long long v57 = *(_OWORD *)(a1 + 112);
    long long v58 = v23;
    __n128 v24 = *(__n128 *)(a1 + 32);
    float32x4_t v51 = *(float32x4_t *)(a1 + 16);
    float32x4_t v52 = (float32x4_t)v24;
    simd_float4 v25 = *(simd_float4 *)(a1 + 64);
    __n128 v53 = *(__n128 *)(a1 + 48);
    simd_float4 v54 = v25;
    char v26 = *(unsigned char *)(a1 + 249);
    v43[0] = v63[0];
    *(void *)((char *)v43 + 13) = *(void *)((char *)v63 + 13);
    if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
      REEasingFunctionEvaluateEx();
    }
    swift_release();
    uint64_t result = RESRTLerp();
    if (one-time initialization token for identity == -1)
    {
      if ((v26 & 1) == 0)
      {
LABEL_17:
        char v6 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      __n128 v38 = v8;
      float32x4_t v39 = v5;
      float32x4_t v37 = v7;
      uint64_t result = swift_once();
      float32x4_t v7 = v37;
      __n128 v8 = v38;
      float32x4_t v5 = v39;
      if ((v26 & 1) == 0) {
        goto LABEL_17;
      }
    }
    __n128 v38 = v8;
    float32x4_t v39 = v5;
    float32x4_t v37 = v7;
    *(double *)&long long v27 = simd_matrix4x4(v40);
    v43[0] = v27;
    v43[1] = v28;
    simd_float4 v44 = v29;
    int8x16_t v45 = v30;
    simd_float4x4.scale(_:)(v41);
    v67.columns[2] = v44;
    *(float32x2_t *)v67.columns[3].f32 = vadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)__PAIR64__(v42.u32[1], v18));
    v67.columns[3].i32[2] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)).u32[0];
    v67.columns[3].i32[3] = v45.i32[3];
    v67.columns[0] = (simd_float4)v43[0];
    v67.columns[1] = (simd_float4)v43[1];
    simd_float4x4 v68 = __invert_f4(v67);
    simd_float4 v36 = v68.columns[0];
    float32x4_t v40 = (float32x4_t)v68.columns[1];
    float32x4_t v41 = (float32x4_t)v68.columns[2];
    int8x16_t v42 = (int8x16_t)v68.columns[3];
    *(double *)&long long v31 = simd_matrix4x4(v37);
    v43[0] = v31;
    v43[1] = v32;
    simd_float4 v44 = v33;
    int8x16_t v45 = v34;
    simd_float4x4.scale(_:)(v39);
    uint64_t result = REMakeSRTFromMatrix();
    goto LABEL_17;
  }
  char v6 = 1;
  float32x4_t v7 = 0uLL;
  __n128 v8 = 0uLL;
LABEL_18:
  *(float32x4_t *)a2 = v5;
  *(float32x4_t *)(a2 + 16) = v7;
  *(__n128 *)(a2 + 32) = v8;
  *(unsigned char *)(a2 + 48) = v6;
  return result;
}

double specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  outlined init with take of Transform?(a1 + 264, (uint64_t)v56, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v56, (uint64_t)&v57, &demangling cache variable for type metadata for Double?);
  float32x4_t v3 = 0uLL;
  if (v58) {
    return *(double *)v3.i64;
  }
  double v4 = v57;
  specialized ActionEvent.animationState.getter(v52, v2, (__n128)0);
  uint64_t v5 = v53;
  if (v53)
  {
    uint64_t v6 = v54;
    __swift_project_boxed_opaque_existential_1(v52, v53);
    float32x4_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v9 = type metadata accessor for Optional();
    v51.i64[0] = (uint64_t)&v49;
    uint64_t v10 = *(void *)(v9 - 8);
    MEMORY[0x270FA5388](v9);
    uint64_t v12 = (char *)&v49 - v11;
    v7(v5, v6);
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      memset(v55, 0, sizeof(v55));
    }
    else
    {
      *(void *)&v55[24] = AssociatedTypeWitness;
      *(void *)&v55[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v55);
      (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v52, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v55, 0, sizeof(v55));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  type metadata accessor for simd_quatf(0);
  if (!swift_dynamicCast())
  {
    v3.i64[0] = 0;
    return *(double *)v3.i64;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  char v17 = *(unsigned char *)(a1 + 32);
  float32x4_t v18 = *(float32x4_t *)(a1 + 48);
  char v19 = *(unsigned char *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 88);
  char v22 = *(unsigned char *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)long long v55 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v55[16] = v23;
  *(_DWORD *)&v55[32] = *(_DWORD *)(a1 + 129);
  if (v17)
  {
    float32x4_t v24 = *(float32x4_t *)v52;
    if ((v19 & 1) == 0)
    {
      if (v22)
      {
        float32x4_t v24 = *(float32x4_t *)v52;
      }
      else
      {
        v25.i64[0] = v21;
        v25.i64[1] = v20;
        float32x4_t v26 = vmulq_f32(v25, (float32x4_t)xmmword_22831EFE0);
        int8x16_t v27 = (int8x16_t)vmulq_f32(v25, v25);
        *(float32x2_t *)v27.i8 = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
        v27.i32[0] = vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)).u32[0];
        float32x2_t v28 = vrecpe_f32((float32x2_t)v27.u32[0]);
        float32x2_t v29 = vmul_f32(v28, vrecps_f32((float32x2_t)v27.u32[0], v28));
        float32x4_t v30 = vmulq_n_f32(v26, vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29)).f32[0]);
        int32x4_t v31 = (int32x4_t)vnegq_f32(v30);
        int8x16_t v32 = (int8x16_t)vtrn2q_s32((int32x4_t)v30, vtrn1q_s32((int32x4_t)v30, v31));
        float32x4_t v33 = (float32x4_t)vrev64q_s32((int32x4_t)v30);
        v33.i32[0] = v31.i32[1];
        v33.i32[3] = v31.i32[2];
        float32x4_t v24 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v30, v18, 3), v33, v18, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v31, 8uLL), *(float32x2_t *)v18.f32, 1), (float32x4_t)vextq_s8(v32, v32, 8uLL), v18.f32[0]));
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v24.i64[0] = v16;
  v24.i64[1] = v15;
  if (v19)
  {
LABEL_16:
    if (v22)
    {
      float32x4_t v18 = *(float32x4_t *)v52;
    }
    else
    {
      v34.i64[0] = v21;
      v34.i64[1] = v20;
      int32x4_t v35 = (int32x4_t)vnegq_f32(v34);
      int8x16_t v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
      float32x4_t v37 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
      v37.i32[0] = v35.i32[1];
      v37.i32[3] = v35.i32[2];
      float32x4_t v18 = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), *(float32x2_t *)v24.f32, 1), (float32x4_t)vextq_s8(v36, v36, 8uLL), v24.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v34, v24, 3), v37, v24, 2));
    }
  }
LABEL_20:
  float32x4_t v50 = v24;
  float32x4_t v51 = v18;
  float32x4_t v49 = *(float32x4_t *)v52;
  char v38 = *(unsigned char *)(a1 + 153);
  *(_OWORD *)float32x4_t v52 = *(_OWORD *)&v55[15];
  *(void *)&v52[13] = *(void *)&v55[28];
  float v39 = v4;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    float v39 = v40;
  }
  swift_release();
  simd_slerp(v50, v51, v39);
  if (v38)
  {
    int8x16_t v41 = (int8x16_t)vmulq_f32(v49, v49);
    *(float32x2_t *)v41.i8 = vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    v41.i32[0] = vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1)).u32[0];
    float32x2_t v42 = vrecpe_f32((float32x2_t)v41.u32[0]);
    float32x2_t v43 = vmul_f32(v42, vrecps_f32((float32x2_t)v41.u32[0], v42));
    float32x4_t v44 = vmulq_n_f32(vmulq_f32(v49, (float32x4_t)xmmword_22831EFE0), vmul_f32(v43, vrecps_f32((float32x2_t)v41.u32[0], v43)).f32[0]);
    int32x4_t v45 = (int32x4_t)vnegq_f32(v3);
    int8x16_t v46 = (int8x16_t)vtrn2q_s32((int32x4_t)v3, vtrn1q_s32((int32x4_t)v3, v45));
    float32x4_t v47 = (float32x4_t)vrev64q_s32((int32x4_t)v3);
    v47.i32[0] = v45.i32[1];
    v47.i32[3] = v45.i32[2];
    v3.i64[0] = vaddq_f32(vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v45, 8uLL), *(float32x2_t *)v44.f32, 1), (float32x4_t)vextq_s8(v46, v46, 8uLL), v44.f32[0]), vmlaq_laneq_f32(vmulq_laneq_f32(v3, v44, 3), v47, v44, 2)).u64[0];
  }
  return *(double *)v3.i64;
}

uint64_t specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  outlined init with take of Transform?(a1 + 264, (uint64_t)v43, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v43, (uint64_t)&v44, &demangling cache variable for type metadata for Double?);
  v4.i64[0] = 0;
  if (v45) {
    return v4.i64[0];
  }
  double v5 = v44;
  specialized ActionEvent.animationState.getter(v39, v2, v3);
  uint64_t v6 = v40;
  if (v40)
  {
    uint64_t v7 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    __n128 v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v10 = type metadata accessor for Optional();
    *(void *)&long long v38 = &v35;
    uint64_t v11 = *(void *)(v10 - 8);
    MEMORY[0x270FA5388](v10);
    uint64_t v13 = (char *)&v35 - v12;
    v8(v6, v7);
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      memset(v42, 0, sizeof(v42));
    }
    else
    {
      *(void *)&v42[24] = AssociatedTypeWitness;
      *(void *)&v42[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v42);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v39, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v42, 0, sizeof(v42));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (!swift_dynamicCast())
  {
    v4.i64[0] = 0;
    return v4.i64[0];
  }
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  char v18 = *(unsigned char *)(a1 + 32);
  float32x4_t v19 = *(float32x4_t *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  char v23 = *(unsigned char *)(a1 + 96);
  long long v24 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)float32x2_t v42 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v42[16] = v24;
  *(_DWORD *)&v42[32] = *(_DWORD *)(a1 + 129);
  char v25 = *(unsigned char *)(a1 + 153);
  float32x4_t v35 = *(float32x4_t *)v39;
  if (v18)
  {
    float32x4_t v26 = *(float32x4_t *)v39;
    if ((v20 & 1) == 0)
    {
      if (v23)
      {
        float32x4_t v26 = *(float32x4_t *)v39;
      }
      else
      {
        v27.i64[0] = v21;
        v27.i64[1] = v22;
        float32x4_t v36 = v19;
        *(double *)v28.i64 = SIMD4<>.__rk_animationInverse.getter(v27);
        float32x4_t v19 = v36;
        float32x4_t v29 = v36;
        v29.i32[0] = v36.i32[0];
        float32x4_t v26 = vaddq_f32(v28, v29);
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v26.i64[0] = v17;
  v26.i64[1] = v16;
  if (v20)
  {
LABEL_16:
    if (v23)
    {
      float32x4_t v19 = *(float32x4_t *)v39;
    }
    else
    {
      v30.i64[1] = v22;
      v30.i64[0] = v21;
      float32x4_t v19 = vaddq_f32(v26, v30);
    }
  }
LABEL_20:
  float32x4_t v36 = v19;
  long long v31 = *(_OWORD *)&v42[15];
  *(_OWORD *)float v39 = *(_OWORD *)&v42[15];
  *(void *)&v39[13] = *(void *)&v42[28];
  *(float *)&long long v31 = v5;
  float32x4_t v37 = v26;
  long long v38 = v31;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    *(void *)&long long v38 = v32;
  }
  swift_release();
  float32x4_t v4 = vmlaq_n_f32(v37, vsubq_f32(v36, v37), *(float *)&v38);
  if (v25)
  {
    float32x4_t v37 = v4;
    *(double *)v33.i64 = SIMD4<>.__rk_animationInverse.getter(v35);
    v4.i64[0] = vaddq_f32(v37, v33).u64[0];
  }
  return v4.i64[0];
}

{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  char v18;
  float32x4_t v19;
  char v20;
  float32x2_t v21;
  unint64_t v22;
  char v23;
  long long v24;
  float32x4_t v25;
  char v26;
  long long v27;
  uint64_t v28;
  float32x2_t v29;
  long long v31;
  float32x4_t v32;
  float32x4_t v33;
  long long v34;
  unsigned char v35[21];
  uint64_t v36;
  uint64_t v37;
  unsigned char v38[40];
  unsigned char v39[16];
  double v40;
  char v41;

  outlined init with take of Transform?(a1 + 264, (uint64_t)v39, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v39, (uint64_t)&v40, &demangling cache variable for type metadata for Double?);
  float32x4_t v4 = 0;
  if (v41) {
    return v4;
  }
  double v5 = v40;
  specialized ActionEvent.animationState.getter(v35, v2, v3);
  uint64_t v6 = v36;
  if (v36)
  {
    uint64_t v7 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    __n128 v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v10 = type metadata accessor for Optional();
    *(void *)&float32x4_t v34 = &v31;
    uint64_t v11 = *(void *)(v10 - 8);
    MEMORY[0x270FA5388](v10);
    uint64_t v13 = (char *)&v31 - v12;
    v8(v6, v7);
    uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      memset(v38, 0, sizeof(v38));
    }
    else
    {
      *(void *)&v38[24] = AssociatedTypeWitness;
      *(void *)&v38[32] = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v38);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v38, 0, sizeof(v38));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v16 = *(void *)(a1 + 24);
  char v18 = *(unsigned char *)(a1 + 32);
  float32x4_t v19 = *(float32x4_t *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 64);
  uint64_t v21 = *(float32x2_t *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 88);
  char v23 = *(unsigned char *)(a1 + 96);
  long long v24 = *(_OWORD *)(a1 + 113);
  *(_OWORD *)long long v38 = *(_OWORD *)(a1 + 97);
  *(_OWORD *)&v38[16] = v24;
  *(_DWORD *)&v38[32] = *(_DWORD *)(a1 + 129);
  if (v18)
  {
    char v25 = *(float32x4_t *)v35;
    if ((v20 & 1) == 0)
    {
      if (v23)
      {
        char v25 = *(float32x4_t *)v35;
      }
      else
      {
        *(float32x2_t *)v25.f32 = vadd_f32(vsub_f32(0, v21), *(float32x2_t *)v19.f32);
        v25.f32[2] = v19.f32[2] + (float)(0.0 - COERCE_FLOAT(vdupq_n_s64(v22).i32[2]));
        v25.i32[3] = 0;
      }
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  v25.i64[0] = v17;
  v25.i64[1] = v16;
  if (v20)
  {
LABEL_16:
    if (v23)
    {
      float32x4_t v19 = *(float32x4_t *)v35;
    }
    else
    {
      *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v25.f32, v21);
      v19.i64[1] = vaddq_f32(v25, (float32x4_t)vdupq_n_s64(v22)).u32[2];
    }
  }
LABEL_20:
  uint64_t v32 = v19;
  float32x4_t v33 = v25;
  long long v31 = *(_OWORD *)v35;
  float32x4_t v26 = *(unsigned char *)(a1 + 153);
  float32x4_t v27 = *(_OWORD *)&v38[15];
  *(_OWORD *)float32x4_t v35 = *(_OWORD *)&v38[15];
  *(void *)&v35[13] = *(void *)&v38[28];
  *(float *)&float32x4_t v27 = v5;
  float32x4_t v34 = v27;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    *(void *)&float32x4_t v34 = v28;
  }
  swift_release();
  float32x4_t v29 = (float32x2_t)vmlaq_n_f32(v33, vsubq_f32(v32, v33), *(float *)&v34).u64[0];
  if (v26) {
    return (uint64_t)vadd_f32(vsub_f32(0, *(float32x2_t *)&v31), v29);
  }
  else {
    return (uint64_t)v29;
  }
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  float32x2_t v14;
  float32x2_t v15;
  char v16;
  float32x2_t v17;
  char v18;
  float32x2_t v19;
  char v20;
  double v22;
  double v23;
  char v24;
  long long v25;
  uint64_t v26;
  float32x2_t v27;
  long long v28;
  float32x2_t v29[3];
  uint64_t v30;
  uint64_t v31;
  _OWORD v32[2];
  uint64_t AssociatedConformanceWitness;
  unsigned char v34[16];
  double v35;
  char v36;

  outlined init with take of Transform?(a1 + 216, (uint64_t)v34, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v35, &demangling cache variable for type metadata for Double?);
  if (v36) {
    return 0;
  }
  __n128 v3 = v35;
  specialized ActionEvent.animationState.getter(v29, v2);
  float32x4_t v4 = v30;
  if (v30)
  {
    double v5 = v31;
    __swift_project_boxed_opaque_existential_1(v29, v30);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    __n128 v8 = type metadata accessor for Optional();
    *(void *)&float32x4_t v28 = &v28;
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x270FA5388](v8);
    uint64_t v11 = (char *)&v29[-2] - v10;
    v6(v4, v5);
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t AssociatedConformanceWitness = 0;
      memset(v32, 0, sizeof(v32));
    }
    else
    {
      *((void *)&v32[1] + 1) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v32);
      (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v32, 0, sizeof(v32));
    uint64_t AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v14 = v29[0];
  uint64_t v15 = *(float32x2_t *)(a1 + 16);
  uint64_t v16 = *(unsigned char *)(a1 + 24);
  uint64_t v17 = *(float32x2_t *)(a1 + 32);
  char v18 = *(unsigned char *)(a1 + 40);
  float32x4_t v19 = *(float32x2_t *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 56);
  v32[0] = *(_OWORD *)(a1 + 57);
  *(_OWORD *)((char *)v32 + 12) = *(_OWORD *)(a1 + 69);
  if (v16)
  {
    uint64_t v15 = v29[0];
    if (v18) {
      goto LABEL_17;
    }
    uint64_t v15 = v29[0];
    if ((v20 & 1) == 0) {
      uint64_t v15 = vadd_f32(vsub_f32(0, v19), v17);
    }
  }
  else if (v18)
  {
LABEL_17:
    char v23 = COERCE_DOUBLE(vadd_f32(v15, v19));
    if (v20) {
      uint64_t v22 = *(double *)v29;
    }
    else {
      uint64_t v22 = v23;
    }
    goto LABEL_20;
  }
  uint64_t v22 = *(double *)&v17;
LABEL_20:
  long long v24 = *(unsigned char *)(a1 + 105);
  char v25 = *(_OWORD *)((char *)v32 + 7);
  *(_OWORD *)v29[0].f32 = *(_OWORD *)((char *)v32 + 7);
  *(float32x2_t *)((char *)&v29[1] + 5) = *(float32x2_t *)((char *)&v32[1] + 4);
  *(float *)&char v25 = v3;
  float32x4_t v28 = v25;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    *(void *)&float32x4_t v28 = v26;
  }
  swift_release();
  float32x4_t v27 = vmla_n_f32(v15, vsub_f32(*(float32x2_t *)&v22, v15), *(float *)&v28);
  if (v24) {
    return (uint64_t)vadd_f32(vsub_f32(0, v14), v27);
  }
  else {
    return (uint64_t)v27;
  }
}

{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  double v14;
  double v15;
  char v16;
  double v17;
  char v18;
  double v19;
  char v20;
  double v22;
  char v23;
  float v24;
  float v25;
  double v26;
  void v27[2];
  double v28[3];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t AssociatedConformanceWitness;
  unsigned char v33[16];
  double v34;
  char v35;

  outlined init with take of Transform?(a1 + 216, (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v34, &demangling cache variable for type metadata for Double?);
  if (v35) {
    return 0;
  }
  __n128 v3 = v34;
  specialized ActionEvent.animationState.getter(v28, v2);
  float32x4_t v4 = v29;
  if (v29)
  {
    double v5 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    __n128 v8 = type metadata accessor for Optional();
    v27[1] = v27;
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x270FA5388](v8);
    uint64_t v11 = (char *)v27 - v10;
    v6(v4, v5);
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t AssociatedConformanceWitness = 0;
      memset(v31, 0, sizeof(v31));
    }
    else
    {
      *((void *)&v31[1] + 1) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v31);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v28, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v31, 0, sizeof(v31));
    uint64_t AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v14 = v28[0];
  uint64_t v15 = *(double *)(a1 + 16);
  uint64_t v16 = *(unsigned char *)(a1 + 24);
  uint64_t v17 = *(double *)(a1 + 32);
  char v18 = *(unsigned char *)(a1 + 40);
  float32x4_t v19 = *(double *)(a1 + 48);
  char v20 = *(unsigned char *)(a1 + 56);
  v31[0] = *(_OWORD *)(a1 + 57);
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 69);
  if (v16)
  {
    uint64_t v15 = v28[0];
    if (v18) {
      goto LABEL_18;
    }
    if (v20) {
      uint64_t v15 = v28[0];
    }
    else {
      uint64_t v15 = v17 - v19;
    }
  }
  else if (v18)
  {
LABEL_18:
    if (v20) {
      uint64_t v22 = v28[0];
    }
    else {
      uint64_t v22 = v15 + v19;
    }
    goto LABEL_21;
  }
  uint64_t v22 = v17;
LABEL_21:
  char v23 = *(unsigned char *)(a1 + 105);
  *(_OWORD *)float32x4_t v28 = *(_OWORD *)((char *)v31 + 7);
  *(double *)((char *)&v28[1] + 5) = *(double *)((char *)&v31[1] + 4);
  long long v24 = v3;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    long long v24 = v25;
  }
  swift_release();
  float32x4_t v26 = v22 * v24 + v15 * (1.0 - v24);
  if (v23) {
    float32x4_t v26 = v26 - v14;
  }
  return *(void *)&v26;
}

unint64_t specialized FromToByActionHandler.evaluateResult(_:)(uint64_t a1)
{
  outlined init with take of Transform?(a1 + 200, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  uint64_t v2 = outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v37, &demangling cache variable for type metadata for Double?);
  if (v38) {
    goto LABEL_12;
  }
  double v3 = v37;
  specialized ActionEvent.animationState.getter(v31, v2);
  uint64_t v4 = v32;
  if (v32)
  {
    uint64_t v5 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = type metadata accessor for Optional();
    v30[1] = v30;
    uint64_t v9 = *(void *)(v8 - 8);
    MEMORY[0x270FA5388](v8);
    uint64_t v11 = (char *)v30 - v10;
    v6(v4, v5);
    uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t AssociatedConformanceWitness = 0;
      memset(v34, 0, sizeof(v34));
    }
    else
    {
      *((void *)&v34[1] + 1) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v34);
      (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, AssociatedTypeWitness);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for AnimationStateProtocol?);
    memset(v34, 0, sizeof(v34));
    uint64_t AssociatedConformanceWitness = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  if (!swift_dynamicCast())
  {
LABEL_12:
    float v22 = 0.0;
    unsigned __int8 v23 = 1;
    return LODWORD(v22) | ((unint64_t)v23 << 32);
  }
  float v14 = v31[0];
  float v15 = *(float *)(a1 + 16);
  char v16 = *(unsigned char *)(a1 + 20);
  float v17 = *(float *)(a1 + 24);
  char v18 = *(unsigned char *)(a1 + 28);
  float v19 = *(float *)(a1 + 32);
  char v20 = *(unsigned char *)(a1 + 36);
  long long v21 = *(_OWORD *)(a1 + 53);
  v34[0] = *(_OWORD *)(a1 + 37);
  v34[1] = v21;
  if (v16)
  {
    float v15 = v31[0];
    if (v18) {
      goto LABEL_18;
    }
    if (v20) {
      float v15 = v31[0];
    }
    else {
      float v15 = v17 - v19;
    }
  }
  else if (v18)
  {
LABEL_18:
    if (v20) {
      float v24 = v31[0];
    }
    else {
      float v24 = v15 + v19;
    }
    goto LABEL_21;
  }
  float v24 = v17;
LABEL_21:
  char v25 = *(unsigned char *)(a1 + 89);
  *(_OWORD *)long long v31 = *(_OWORD *)((char *)v34 + 11);
  *(void *)((char *)&v31[3] + 1) = *((void *)&v34[1] + 1);
  float v26 = v3;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16))
  {
    REEasingFunctionEvaluateEx();
    float v26 = v27;
  }
  swift_release();
  float v28 = (float)(v24 * v26) + (float)(v15 * (float)(1.0 - v26));
  unsigned __int8 v23 = 0;
  if (v25) {
    float v28 = v28 - v14;
  }
  float v22 = v28;
  return LODWORD(v22) | ((unint64_t)v23 << 32);
}

uint64_t specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(uint64_t a1)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v11._countAndFlagsBits = 0x2072656C646E6148;
    v11._object = (void *)0xEC00000020726F66;
    String.append(_:)(v11);
    *(void *)&long long v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000030;
    v13._object = (void *)0x8000000228351880;
    String.append(_:)(v13);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v37 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v36 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 104);
  char v7 = *(unsigned char *)(a1 + 112);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    uint64_t v34 = *(void *)(a1 + 104);
    *(void *)&long long v38 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = Entity.subscript.getter((uint64_t *)&v38);
    outlined consume of ActionEntityResolution();
    if (v8)
    {
      if ((v7 & 1) == 0)
      {
LABEL_5:
        char v45 = &type metadata for Transform;
        int8x16_t v46 = &protocol witness table for Transform;
        uint64_t v9 = (void *)swift_allocObject();
        *(void *)&long long v44 = v9;
        _OWORD v9[2] = v35;
        v9[3] = v4;
        v9[4] = v37;
        v9[5] = v36;
        v9[6] = v5;
        v9[7] = v34;
        outlined init with take of BindableDataInternal(&v44, (uint64_t)&v38);
        __swift_project_boxed_opaque_existential_1(&v38, v40);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddRESRTValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(void *)&long long v38 = 0;
    *((void *)&v38 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v18._countAndFlagsBits = 0x2072656C646E6148;
    v18._object = (void *)0xEC00000020726F66;
    String.append(_:)(v18);
    *(void *)&long long v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD00000000000003BLL;
    v20._object = (void *)0x8000000228353B10;
    String.append(_:)(v20);
    REEntityGetName();
    v21._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 10535;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    specialized static AnimationLogger.logError(_:)(v38, *((void *)&v38 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  uint64_t v15 = SceneNullable;
  uint64_t v34 = v6;
  id v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  uint64_t v33 = v5;
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = specialized static Entity.entityInfoType(_:)();
    if (v23)
    {
      uint64_t v24 = (*(uint64_t (**)(void))(v23 + 232))();
      uint64_t v25 = *(void *)(v24 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v25, 0);
      *(void *)(v24 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v24);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  uint64_t v5 = v33;
  if ((v7 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  *(void *)&long long v38 = 0;
  *((void *)&v38 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  long long v44 = v38;
  v26._countAndFlagsBits = 0x2072656C646E6148;
  v26._object = (void *)0xEC00000020726F66;
  String.append(_:)(v26);
  *(void *)&long long v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Transform>.Type);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000228353ED0;
  v28._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v28);
  *(void *)&long long v38 = v35;
  *((void *)&v38 + 1) = v4;
  uint64_t v39 = v37;
  uint64_t v40 = v36;
  uint64_t v41 = v5;
  uint64_t v42 = v34;
  char v43 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transform?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000031;
  v30._object = (void *)0x8000000228353F00;
  String.append(_:)(v30);
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v3;
  v31._object = v2;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  specialized static AnimationLogger.logError(_:)(v44, *((void *)&v44 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  long long v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x8000000228351880;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if (v5)
      {
LABEL_5:
        Swift::String v31 = MEMORY[0x263F8D310];
        Swift::String v32 = &protocol witness table for String;
        *(void *)&Swift::String v30 = v4;
        *((void *)&v30 + 1) = v5;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        swift_bridgeObjectRetain();
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        String.utf8CString.getter();
        REKeyValueComponentAddStringValue();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x8000000228353B10;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  Swift::String v12 = SceneNullable;
  Swift::String v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    Swift::String v20 = specialized static Entity.entityInfoType(_:)();
    if (v20)
    {
      Swift::String v21 = (*(uint64_t (**)(void))(v20 + 232))();
      Swift::String v22 = *(void *)(v21 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v22, 0);
      *(void *)(v21 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  if (v5) {
    goto LABEL_5;
  }
LABEL_23:
  uint64_t v33 = 0;
  uint64_t v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v23._countAndFlagsBits = 0x2072656C646E6148;
  v23._object = (void *)0xEC00000020726F66;
  String.append(_:)(v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<String>.Type);
  v24._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._object = (void *)0x8000000228353ED0;
  v25._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v25);
  Swift::String v30 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0xD000000000000031;
  v27._object = (void *)0x8000000228353F00;
  String.append(_:)(v27);
  swift_bridgeObjectRetain();
  v28._countAndFlagsBits = v3;
  v28._object = v2;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 39;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  specialized static AnimationLogger.logError(_:)(v33, v34);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  uint64_t SceneNullable;
  uint64_t v11;
  id v12;
  uint64_t EntityByName;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v6._countAndFlagsBits = 0x2072656C646E6148;
    v6._object = (void *)0xEC00000020726F66;
    String.append(_:)(v6);
    *(void *)&Swift::String v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
    v7._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0xD000000000000030;
    v8._object = (void *)0x8000000228351880;
    String.append(_:)(v8);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 48);
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    Swift::String v32 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v5 = Entity.subscript.getter(&v32);
    outlined consume of ActionEntityResolution();
    if (!v5) {
      goto LABEL_17;
    }
LABEL_13:
    if (v4 == 2)
    {
LABEL_14:
      Swift::String v32 = 0;
      uint64_t v33 = 0xE000000000000000;
      _StringGuts.grow(_:)(101);
      v14._countAndFlagsBits = 0x2072656C646E6148;
      v14._object = (void *)0xEC00000020726F66;
      String.append(_:)(v14);
      *(void *)&Swift::String v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
      v15._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._object = (void *)0x8000000228353ED0;
      v16._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v16);
      LOBYTE(v29) = 2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
      v17._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 0xD000000000000031;
      v18._object = (void *)0x8000000228353F00;
      String.append(_:)(v18);
      swift_bridgeObjectRetain();
      v19._countAndFlagsBits = v3;
      v19._object = v2;
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 39;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      specialized static AnimationLogger.logError(_:)(v32, v33);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_16:
    outlined consume of ActionEntityResolution();
LABEL_17:
    Swift::String v32 = 0;
    uint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v21._countAndFlagsBits = 0x2072656C646E6148;
    v21._object = (void *)0xEC00000020726F66;
    String.append(_:)(v21);
    *(void *)&Swift::String v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Bool>.Type);
    v22._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0xD00000000000003BLL;
    v23._object = (void *)0x8000000228353B10;
    String.append(_:)(v23);
    REEntityGetName();
    v24._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 10535;
    v25._object = (void *)0xE200000000000000;
    String.append(_:)(v25);
    specialized static AnimationLogger.logError(_:)(v32, v33);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  Swift::String v11 = SceneNullable;
  Swift::String v12 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v12)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v11);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_16;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_13;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    Swift::String v26 = specialized static Entity.entityInfoType(_:)();
    if (v26)
    {
      Swift::String v27 = (*(uint64_t (**)(void))(v26 + 232))();
      Swift::String v28 = *(void *)(v27 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v28, 0);
      *(void *)(v27 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v27);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
    if (v4 == 2) {
      goto LABEL_14;
    }
LABEL_23:
    Swift::String v30 = MEMORY[0x263F8D4F8];
    Swift::String v31 = &protocol witness table for Bool;
    LOBYTE(v29) = v4 & 1;
    outlined init with take of BindableDataInternal(&v29, (uint64_t)&v32);
    __swift_project_boxed_opaque_existential_1(&v32, v34);
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddBoolValue();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  long long v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(unsigned char *)(a1 + 56);
    if (*(unsigned char *)(a1 + 24))
    {
      swift_bridgeObjectRetain();
      uint64_t SceneNullable = REEntityGetSceneNullable();
      if (SceneNullable)
      {
        Swift::String v12 = SceneNullable;
        Swift::String v13 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v13)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v12);
        }
        String.utf8CString.getter();
        uint64_t EntityByName = RESceneFindEntityByName();
        swift_release();
        if (EntityByName)
        {
          if ((id)REEntityGetSwiftObject())
          {
            swift_release();
            outlined consume of ActionEntityResolution();
            type metadata accessor for Entity();
            swift_dynamicCastClassUnconditional();
            if ((v5 & 1) == 0) {
              goto LABEL_5;
            }
          }
          else
          {
            uint64_t result = REEntityIsBeingDestroyed();
            if (result)
            {
              __break(1u);
              return result;
            }
            Swift::String v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
            if (v20)
            {
              Swift::String v21 = (*(uint64_t (**)(void))(v20 + 232))();
              Swift::String v22 = *(void *)(v21 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v22, 0);
              *(void *)(v21 + 16) = EntityByName;
              MEMORY[0x22A68E750](EntityByName, v21);
              swift_release();
            }
            else
            {
              makeEntity(for:)(EntityByName);
            }
            swift_release();
            outlined consume of ActionEntityResolution();
            if ((v5 & 1) == 0) {
              goto LABEL_5;
            }
          }
LABEL_25:
          uint64_t v33 = 0;
          uint64_t v34 = 0xE000000000000000;
          _StringGuts.grow(_:)(101);
          v23._countAndFlagsBits = 0x2072656C646E6148;
          v23._object = (void *)0xEC00000020726F66;
          String.append(_:)(v23);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
          v24._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v25._object = (void *)0x8000000228353ED0;
          v25._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v25);
          *(void *)&Swift::String v30 = v4;
          BYTE8(v30) = 1;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
          v26._countAndFlagsBits = String.init<A>(describing:)();
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          v27._countAndFlagsBits = 0xD000000000000031;
          v27._object = (void *)0x8000000228353F00;
          String.append(_:)(v27);
          swift_bridgeObjectRetain();
          v28._countAndFlagsBits = v3;
          v28._object = v2;
          String.append(_:)(v28);
          swift_bridgeObjectRelease();
          v29._countAndFlagsBits = 39;
          v29._object = (void *)0xE100000000000000;
          String.append(_:)(v29);
          specialized static AnimationLogger.logError(_:)(v33, v34);
          swift_bridgeObjectRelease();
          swift_release();
          return swift_release();
        }
        swift_release();
      }
      outlined consume of ActionEntityResolution();
    }
    else
    {
      uint64_t v33 = *(void *)(a1 + 8);
      swift_bridgeObjectRetain();
      uint64_t v6 = Entity.subscript.getter(&v33);
      outlined consume of ActionEntityResolution();
      if (v6)
      {
        if ((v5 & 1) == 0)
        {
LABEL_5:
          Swift::String v31 = MEMORY[0x263F8D6C8];
          Swift::String v32 = &protocol witness table for Int;
          *(void *)&Swift::String v30 = v4;
          outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
          __swift_project_boxed_opaque_existential_1(&v33, v35);
          REKeyValueComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          String.utf8CString.getter();
          REKeyValueComponentAddInt64Value();
          swift_release();
          swift_release();
          swift_release();
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
        }
        goto LABEL_25;
      }
    }
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x8000000228353B10;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Int>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x8000000228351880;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
  }
  return swift_bridgeObjectRelease();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  uint64_t EntityByName;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  long long v34;
  uint64_t v35;
  _UNKNOWN **v36;
  long long v37;
  char v38;
  uint64_t v39;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v11._countAndFlagsBits = 0x2072656C646E6148;
    v11._object = (void *)0xEC00000020726F66;
    String.append(_:)(v11);
    *(void *)&uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
    v12._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0xD000000000000030;
    v13._object = (void *)0x8000000228351880;
    String.append(_:)(v13);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v6 = *(unsigned char *)(a1 + 80);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    *(void *)&uint64_t v37 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    char v7 = Entity.subscript.getter((uint64_t *)&v37);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        type metadata accessor for simd_quatf(0);
        uint64_t v35 = v8;
        uint64_t v36 = &protocol witness table for simd_quatf;
        uint64_t v9 = swift_allocObject();
        *(void *)&uint64_t v34 = v9;
        *(void *)(v9 + 16) = v5;
        *(void *)(v9 + 24) = v4;
        outlined init with take of BindableDataInternal(&v34, (uint64_t)&v37);
        __swift_project_boxed_opaque_existential_1(&v37, v39);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddQuatFValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(void *)&uint64_t v37 = 0;
    *((void *)&v37 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v18._countAndFlagsBits = 0x2072656C646E6148;
    v18._object = (void *)0xEC00000020726F66;
    String.append(_:)(v18);
    *(void *)&uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
    v19._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD00000000000003BLL;
    v20._object = (void *)0x8000000228353B10;
    String.append(_:)(v20);
    REEntityGetName();
    v21._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 10535;
    v22._object = (void *)0xE200000000000000;
    String.append(_:)(v22);
    specialized static AnimationLogger.logError(_:)(v37, *((void *)&v37 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  uint64_t v15 = SceneNullable;
  id v16 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  uint64_t v33 = v5;
  if (v16)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v15);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v23)
    {
      uint64_t v24 = (*(uint64_t (**)(void))(v23 + 232))();
      uint64_t v25 = *(void *)(v24 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v25, 0);
      *(void *)(v24 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v24);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  uint64_t v5 = v33;
  if ((v6 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  *(void *)&uint64_t v37 = 0;
  *((void *)&v37 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  uint64_t v34 = v37;
  v26._countAndFlagsBits = 0x2072656C646E6148;
  v26._object = (void *)0xEC00000020726F66;
  String.append(_:)(v26);
  *(void *)&uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<simd_quatf>.Type);
  v27._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000228353ED0;
  v28._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v28);
  *(void *)&uint64_t v37 = v5;
  *((void *)&v37 + 1) = v4;
  long long v38 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_quatf?);
  v29._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000031;
  v30._object = (void *)0x8000000228353F00;
  String.append(_:)(v30);
  swift_bridgeObjectRetain();
  v31._countAndFlagsBits = v3;
  v31._object = v2;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 39;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  specialized static AnimationLogger.logError(_:)(v34, *((void *)&v34 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t EntityByName;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  _UNKNOWN **v35;
  long long v36;
  char v37;
  uint64_t v38;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v10._countAndFlagsBits = 0x2072656C646E6148;
    v10._object = (void *)0xEC00000020726F66;
    String.append(_:)(v10);
    *(void *)&uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0xD000000000000030;
    v12._object = (void *)0x8000000228351880;
    String.append(_:)(v12);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v6 = *(unsigned char *)(a1 + 80);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    *(void *)&uint64_t v36 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    char v7 = Entity.subscript.getter((uint64_t *)&v36);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        uint64_t v35 = &protocol witness table for SIMD4<A>;
        uint64_t v8 = swift_allocObject();
        *(void *)&uint64_t v33 = v8;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = v4;
        outlined init with take of BindableDataInternal(&v33, (uint64_t)&v36);
        __swift_project_boxed_opaque_existential_1(&v36, v38);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat4Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(void *)&uint64_t v36 = 0;
    *((void *)&v36 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v17._countAndFlagsBits = 0x2072656C646E6148;
    v17._object = (void *)0xEC00000020726F66;
    String.append(_:)(v17);
    *(void *)&uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000003BLL;
    v19._object = (void *)0x8000000228353B10;
    String.append(_:)(v19);
    REEntityGetName();
    v20._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 10535;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v36, *((void *)&v36 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  float v14 = SceneNullable;
  uint64_t v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  Swift::String v32 = v5;
  if (v15)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v14);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    Swift::String v22 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v23);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  uint64_t v5 = v32;
  if ((v6 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  *(void *)&uint64_t v36 = 0;
  *((void *)&v36 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  uint64_t v33 = v36;
  v25._countAndFlagsBits = 0x2072656C646E6148;
  v25._object = (void *)0xEC00000020726F66;
  String.append(_:)(v25);
  *(void *)&uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD4<Float>>.Type);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x8000000228353ED0;
  v27._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v27);
  *(void *)&uint64_t v36 = v5;
  *((void *)&v36 + 1) = v4;
  uint64_t v37 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Float>?);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000031;
  v29._object = (void *)0x8000000228353F00;
  String.append(_:)(v29);
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v3;
  v30._object = v2;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  specialized static AnimationLogger.logError(_:)(v33, *((void *)&v33 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t EntityByName;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  _UNKNOWN **v35;
  long long v36;
  char v37;
  uint64_t v38;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v10._countAndFlagsBits = 0x2072656C646E6148;
    v10._object = (void *)0xEC00000020726F66;
    String.append(_:)(v10);
    *(void *)&uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
    v11._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 0xD000000000000030;
    v12._object = (void *)0x8000000228351880;
    String.append(_:)(v12);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v6 = *(unsigned char *)(a1 + 80);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    *(void *)&uint64_t v36 = *(void *)(a1 + 16);
    swift_bridgeObjectRetain();
    char v7 = Entity.subscript.getter((uint64_t *)&v36);
    outlined consume of ActionEntityResolution();
    if (v7)
    {
      if ((v6 & 1) == 0)
      {
LABEL_5:
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        uint64_t v35 = &protocol witness table for SIMD3<A>;
        uint64_t v8 = swift_allocObject();
        *(void *)&uint64_t v33 = v8;
        *(void *)(v8 + 16) = v5;
        *(void *)(v8 + 24) = v4;
        outlined init with take of BindableDataInternal(&v33, (uint64_t)&v36);
        __swift_project_boxed_opaque_existential_1(&v36, v38);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat3Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
      goto LABEL_23;
    }
LABEL_16:
    *(void *)&uint64_t v36 = 0;
    *((void *)&v36 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v17._countAndFlagsBits = 0x2072656C646E6148;
    v17._object = (void *)0xEC00000020726F66;
    String.append(_:)(v17);
    *(void *)&uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
    v18._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000003BLL;
    v19._object = (void *)0x8000000228353B10;
    String.append(_:)(v19);
    REEntityGetName();
    v20._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 10535;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    specialized static AnimationLogger.logError(_:)(v36, *((void *)&v36 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  float v14 = SceneNullable;
  uint64_t v15 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  Swift::String v32 = v5;
  if (v15)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v14);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    Swift::String v22 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void))(v22 + 232))();
      uint64_t v24 = *(void *)(v23 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v24, 0);
      *(void *)(v23 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v23);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
  }
  uint64_t v5 = v32;
  if ((v6 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_23:
  *(void *)&uint64_t v36 = 0;
  *((void *)&v36 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  uint64_t v33 = v36;
  v25._countAndFlagsBits = 0x2072656C646E6148;
  v25._object = (void *)0xEC00000020726F66;
  String.append(_:)(v25);
  *(void *)&uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD3<Float>>.Type);
  v26._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._object = (void *)0x8000000228353ED0;
  v27._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v27);
  *(void *)&uint64_t v36 = v5;
  *((void *)&v36 + 1) = v4;
  uint64_t v37 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>?);
  v28._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0xD000000000000031;
  v29._object = (void *)0x8000000228353F00;
  String.append(_:)(v29);
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v3;
  v30._object = v2;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 39;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  specialized static AnimationLogger.logError(_:)(v33, *((void *)&v33 + 1));
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  long long v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x8000000228351880;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned char *)(a1 + 56);
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        Swift::String v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
        Swift::String v32 = &protocol witness table for SIMD2<A>;
        *(void *)&Swift::String v30 = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloat2Value();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x8000000228353B10;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  Swift::String v12 = SceneNullable;
  Swift::String v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    Swift::String v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v20)
    {
      Swift::String v21 = (*(uint64_t (**)(void))(v20 + 232))();
      Swift::String v22 = *(void *)(v21 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v22, 0);
      *(void *)(v21 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_23:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<SIMD2<Float>>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x8000000228353ED0;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    *(void *)&Swift::String v30 = v4;
    BYTE8(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x8000000228353F00;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  long long v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x8000000228351880;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned char *)(a1 + 56);
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        Swift::String v31 = MEMORY[0x263F8D538];
        Swift::String v32 = &protocol witness table for Double;
        *(void *)&Swift::String v30 = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddDoubleValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x8000000228353B10;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  Swift::String v12 = SceneNullable;
  Swift::String v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    Swift::String v20 = specialized static Entity.entityInfoType(_:)(EntityByName);
    if (v20)
    {
      Swift::String v21 = (*(uint64_t (**)(void))(v20 + 232))();
      Swift::String v22 = *(void *)(v21 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v22, 0);
      *(void *)(v21 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_23:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Double>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x8000000228353ED0;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    *(void *)&Swift::String v30 = v4;
    BYTE8(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x8000000228353F00;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t result;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t SceneNullable;
  uint64_t v12;
  id v13;
  uint64_t EntityByName;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  long long v30;
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000030;
    v10._object = (void *)0x8000000228351880;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(unsigned char *)(a1 + 52);
  if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    swift_bridgeObjectRetain();
    uint64_t v6 = Entity.subscript.getter(&v33);
    outlined consume of ActionEntityResolution();
    if (v6)
    {
      if ((v5 & 1) == 0)
      {
LABEL_5:
        Swift::String v31 = MEMORY[0x263F8D5C8];
        Swift::String v32 = &protocol witness table for Float;
        LODWORD(v30) = v4;
        outlined init with take of BindableDataInternal(&v30, (uint64_t)&v33);
        __swift_project_boxed_opaque_existential_1(&v33, v35);
        REKeyValueComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        String.utf8CString.getter();
        REKeyValueComponentAddFloatValue();
        swift_release();
        swift_release();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      }
      goto LABEL_23;
    }
LABEL_16:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v15._countAndFlagsBits = 0x2072656C646E6148;
    v15._object = (void *)0xEC00000020726F66;
    String.append(_:)(v15);
    *(void *)&Swift::String v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0xD00000000000003BLL;
    v17._object = (void *)0x8000000228353B10;
    String.append(_:)(v17);
    REEntityGetName();
    v18._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 10535;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_15:
    outlined consume of ActionEntityResolution();
    goto LABEL_16;
  }
  Swift::String v12 = SceneNullable;
  Swift::String v13 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v13)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v12);
  }
  String.utf8CString.getter();
  uint64_t EntityByName = RESceneFindEntityByName();
  swift_release();
  if (!EntityByName)
  {
    swift_release();
    goto LABEL_15;
  }
  if ((id)REEntityGetSwiftObject())
  {
    swift_release();
    outlined consume of ActionEntityResolution();
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_22;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    Swift::String v20 = specialized static Entity.entityInfoType(_:)();
    if (v20)
    {
      Swift::String v21 = (*(uint64_t (**)(void))(v20 + 232))();
      Swift::String v22 = *(void *)(v21 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v22, 0);
      *(void *)(v21 + 16) = EntityByName;
      MEMORY[0x22A68E750](EntityByName, v21);
      swift_release();
    }
    else
    {
      makeEntity(for:)(EntityByName);
    }
    swift_release();
    outlined consume of ActionEntityResolution();
LABEL_22:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_23:
    uint64_t v33 = 0;
    uint64_t v34 = 0xE000000000000000;
    _StringGuts.grow(_:)(101);
    v23._countAndFlagsBits = 0x2072656C646E6148;
    v23._object = (void *)0xEC00000020726F66;
    String.append(_:)(v23);
    DWORD1(v30) = (unint64_t)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>) >> 32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityPropertyAction<Float>.Type);
    v24._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._object = (void *)0x8000000228353ED0;
    v25._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v25);
    LODWORD(v30) = v4;
    BYTE4(v30) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000031;
    v27._object = (void *)0x8000000228353F00;
    String.append(_:)(v27);
    swift_bridgeObjectRetain();
    v28._countAndFlagsBits = v3;
    v28._object = v2;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 39;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    specialized static AnimationLogger.logError(_:)(v33, v34);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_227FD05C4()
{
  return MEMORY[0x270FA0238](v0, 64, 15);
}

uint64_t outlined copy of SetEntityPropertyAction<String>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    outlined copy of ActionEntityResolution();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of SetEntityPropertyAction<String>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    outlined consume of ActionEntityResolution();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<String>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_227FD2038()
{
  return MEMORY[0x270FA0238](v0, 32, 15);
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<simd_quatf>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ActionEvent<PlayAudioAction>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ActionEvent<SetEntityPropertyAction<Bool>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of FromToByAction<A>.TransformMode<A>(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFCu) {
    return outlined copy of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 0xFCu) {
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined copy of FromToByAction<BlendShapeWeights>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (result != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return outlined copy of FromToByAction<A>.TransformMode<A>(a8, a9, a10);
  }
  return result;
}

uint64_t outlined consume of FromToByAction<BlendShapeWeights>?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a8, a9, a10);
  }
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<BlendShapeWeights>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 88);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 240);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined copy of FromToByAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31)
{
  if (a31 != 1) {
    return outlined copy of FromToByAction<A>.TransformMode<A>(a28, a29, a30);
  }
  return result;
}

uint64_t outlined retain of FromToByAction<Transform>?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248));
  return a1;
}

uint64_t outlined consume of FromToByAction<Transform>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30,uint64_t a31)
{
  if (a31 != 1) {
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a28, a29, a30);
  }
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<Transform>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 232);
  uint64_t v3 = *(void *)(a1 + 240);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 248);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

double _s17RealityFoundation14FromToByActionVy0A3Kit9TransformVGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[14] = 0u;
  a1[15] = xmmword_22830EC70;
  return result;
}

uint64_t outlined retain of FromToByAction<Transform>(uint64_t a1)
{
  return a1;
}

uint64_t sub_227FD4738()
{
  return MEMORY[0x270FA0238](v0, 80, 15);
}

double simd_matrix4x4(float32x4_t a1)
{
  _S3 = a1.i32[1];
  _S5 = a1.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = a1.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  float v10 = vmlas_n_f32(vmuls_lane_f32(a1.f32[2], a1, 3), a1.f32[1], a1.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

uint64_t _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t outlined copy of FromToByAction<simd_quatf>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  if (a19 != 1) {
    return outlined copy of FromToByAction<A>.TransformMode<A>(a16, a17, a18);
  }
  return result;
}

uint64_t outlined consume of FromToByAction<simd_quatf>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  if (a19 != 1) {
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a16, a17, a18);
  }
  return result;
}

double _s17RealityFoundation14FromToByActionVySo10simd_quatfaGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[8] = 0u;
  a1[9] = xmmword_22830EC70;
  return result;
}

uint64_t outlined retain of FromToByAction<simd_quatf>(uint64_t a1)
{
  return a1;
}

uint64_t sub_227FD48E0()
{
  return MEMORY[0x270FA0238](v0, 48, 15);
}

void simd_slerp(float32x4_t a1, float32x4_t a2, float a3)
{
  float32x4_t v3 = vmulq_f32(a1, a2);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(float32x2_t *)v3.f32 = vadd_f32(*(float32x2_t *)v3.f32, *(float32x2_t *)v4.f32);
  v3.f32[0] = vaddv_f32(*(float32x2_t *)v3.f32);
  v4.i64[0] = 0;
  _simd_slerp_internal(a1, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v3, v4)), 0), (int8x16_t)vnegq_f32(a2), (int8x16_t)a2), a3);
}

void *outlined retain of FromToByAction<simd_quatf>?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t outlined release of ActionEvent<FromToByAction<simd_quatf>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 152);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of FromToByAction<Double>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  if (a13 != 1) {
    return outlined copy of FromToByAction<A>.TransformMode<A>(a10, a11, a12);
  }
  return result;
}

uint64_t outlined consume of FromToByAction<Double>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  if (a13 != 1) {
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a10, a11, a12);
  }
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<SIMD2<Float>>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 104);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of FromToByAction<Float>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  if (a11 != 1) {
    return outlined copy of FromToByAction<A>.TransformMode<A>(a8, a9, a10);
  }
  return result;
}

uint64_t outlined consume of FromToByAction<Float>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  if (a11 != 1) {
    return outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(a8, a9, a10);
  }
  return result;
}

uint64_t outlined release of ActionEvent<FromToByAction<Float>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 88);
  swift_release();
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v2, v3, v4);
  swift_release();
  swift_release();
  return a1;
}

uint64_t _s17RealityFoundation15BillboardActionVSgWOg(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 116);
  if (v1 > 0xA) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

double _s17RealityFoundation15BillboardActionVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 0xFF00000000;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 149) = 0u;
  return result;
}

uint64_t sub_227FD4E38()
{
  return MEMORY[0x270FA0238](v0, 112, 15);
}

unint64_t lazy protocol witness table accessor for type BillboardAction and conformance BillboardAction()
{
  unint64_t result = lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction;
  if (!lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction;
  if (!lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction and conformance BillboardAction);
  }
  return result;
}

uint64_t outlined release of ActionEvent<SpinAction>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SpinAction and conformance SpinAction()
{
  unint64_t result = lazy protocol witness table cache variable for type SpinAction and conformance SpinAction;
  if (!lazy protocol witness table cache variable for type SpinAction and conformance SpinAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction and conformance SpinAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpinAction and conformance SpinAction;
  if (!lazy protocol witness table cache variable for type SpinAction and conformance SpinAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpinAction and conformance SpinAction);
  }
  return result;
}

uint64_t outlined copy of OrbitEntityAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined consume of OrbitEntityAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t _s17RealityFoundation24OrbitEntityActionHandlerVSgWOg(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_227FD5068()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 208, 15);
}

double _s17RealityFoundation24OrbitEntityActionHandlerVSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  return result;
}

uint64_t *outlined release of OrbitEntityActionHandler?(uint64_t *a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type OrbitEntityAction and conformance OrbitEntityAction()
{
  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction;
  if (!lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OrbitEntityAction and conformance OrbitEntityAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImpulseAction and conformance ImpulseAction()
{
  unint64_t result = lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction;
  if (!lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction;
  if (!lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImpulseAction and conformance ImpulseAction);
  }
  return result;
}

uint64_t outlined copy of SetEntityEnabledAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined consume of SetEntityEnabledAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined release of ActionEvent<SetEntityEnabledAction>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type SetEntityEnabledAction and conformance SetEntityEnabledAction()
{
  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction and conformance SetEntityEnabledAction);
  }
  return result;
}

uint64_t outlined copy of NotificationAction?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of NotificationAction?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ActionEvent<NotificationAction>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type NotificationAction and conformance NotificationAction()
{
  unint64_t result = lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction;
  if (!lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction;
  if (!lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction and conformance NotificationAction);
  }
  return result;
}

uint64_t outlined copy of PlayAnimationAction?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return outlined copy of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined consume of PlayAnimationAction?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t outlined release of ActionEvent<PlayAnimationAction>(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type PlayAnimationAction and conformance PlayAnimationAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction;
  if (!lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlayAnimationAction and conformance PlayAnimationAction);
  }
  return result;
}

uint64_t outlined retain of REEventBus.DispatcherHandle(uint64_t a1)
{
  return a1;
}

void _simd_slerp_internal(float32x4_t a1, float32x4_t a2, float a3)
{
  float v5 = 1.0 - a3;
  float32x4_t v6 = vsubq_f32(a1, a2);
  int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
  float32x4_t v8 = vaddq_f32(a1, a2);
  int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
  float v10 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))));
  float v11 = v10 + v10;
  if ((float)(v10 + v10) != 0.0) {
    sinf(v11);
  }
  if ((float)(v5 * v11) != 0.0) {
    sinf(v5 * v11);
  }
  float v12 = v11 * a3;
  if (v12 != 0.0) {
    sinf(v12);
  }
}

uint64_t outlined copy of FromToByAction<SIMD2<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  return outlined copy of FromToByAction<Double>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t outlined consume of FromToByAction<SIMD2<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12, uint64_t a13)
{
  return outlined consume of FromToByAction<Double>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t outlined copy of FromToByAction<SIMD4<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  return outlined copy of FromToByAction<simd_quatf>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t outlined consume of FromToByAction<SIMD4<Float>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19)
{
  return outlined consume of FromToByAction<simd_quatf>?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

uint64_t OrbitAnimation.init(name:duration:axis:startTransform:spinClockwise:orientToPath:rotationCount:bindTarget:blendLayer:repeatMode:fillMode:isAdditive:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __n128 a11@<Q1>, __n128 a12@<Q2>, __n128 a13@<Q3>, __n128 a14@<Q4>, float a15@<S5>, double a16@<D6>, double a17@<D7>, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,float a25)
{
  uint64_t v32 = *a5;
  uint64_t v33 = a5[1];
  char v34 = *((unsigned char *)a5 + 16);
  char v35 = *a7;
  char v36 = *a8;
  v48[0] = 0;
  v48[1] = 0;
  char v49 = -1;
  v56[0] = v35;
  v53[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v48, 0, v56, v53, a19, a20 & 1, (uint64_t)v54, a16, a17, a25, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  uint64_t v37 = swift_allocObject();
  long long v38 = v54[7];
  *(_OWORD *)(a9 + 152) = v54[6];
  *(_OWORD *)(a9 + 168) = v38;
  *(_OWORD *)(a9 + 184) = v54[8];
  long long v39 = v54[3];
  *(_OWORD *)(a9 + 88) = v54[2];
  *(_OWORD *)(a9 + 104) = v39;
  long long v40 = v54[5];
  *(_OWORD *)(a9 + 120) = v54[4];
  *(_OWORD *)(a9 + 136) = v40;
  long long v41 = v54[1];
  *(_OWORD *)(a9 + 56) = v54[0];
  *(void *)(v37 + 16) = 0;
  LOBYTE(v48[0]) = 0;
  v56[0] = 0;
  v53[0] = 0;
  char v52 = 0;
  char v51 = 0;
  char v50 = 0;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v32;
  *(void *)(a9 + 24) = v33;
  *(unsigned char *)(a9 + 32) = v34;
  *(_DWORD *)(a9 + 36) = a6;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v36;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a18;
  *(void *)(a9 + 48) = v37;
  *(void *)(a9 + 200) = v55;
  *(_OWORD *)(a9 + 72) = v41;
  *(double *)(a9 + 208) = a10;
  *(unsigned char *)(a9 + 216) = 0;
  *(__n128 *)(a9 + 224) = a11;
  *(unsigned char *)(a9 + 240) = v52;
  *(__n128 *)(a9 + 256) = a12;
  *(__n128 *)(a9 + 272) = a13;
  *(__n128 *)(a9 + 288) = a14;
  *(unsigned char *)(a9 + 304) = v51;
  *(unsigned char *)(a9 + 305) = a3;
  *(unsigned char *)(a9 + 306) = a4;
  *(float *)(a9 + 308) = a15;
  *(unsigned char *)(a9 + 312) = v50;

  return swift_bridgeObjectRetain();
}

uint64_t OrbitAnimation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 32);
  if (*(void *)(v0 + 8))
  {
    uint64_t v4 = *(void *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for OrbitAnimation.name : OrbitAnimation@<X0>(void *__src@<X0>, uint64_t *a2@<X8>)
{
  memcpy(v10, __src, 0x139uLL);
  unint64_t v4 = v10[1];
  uint64_t v3 = v10[2];
  uint64_t v5 = v10[3];
  unsigned __int8 v6 = v10[4];
  if (v10[1])
  {
    uint64_t v7 = v10[0];
    outlined retain of OrbitAnimation((uint64_t)v10);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
  }
  else if (*(void *)(v10[6] + 16))
  {
    outlined retain of OrbitAnimation((uint64_t)v10);
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v7 = String.init(cString:)();
    unint64_t v4 = v8;
  }
  else
  {
    outlined retain of OrbitAnimation((uint64_t)v10);
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    uint64_t v7 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  uint64_t result = outlined release of OrbitAnimation((uint64_t)v10);
  *a2 = v7;
  a2[1] = v4;
  return result;
}

uint64_t OrbitAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*OrbitAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  unint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 32);
  if (v3)
  {
    uint64_t v7 = *(void *)v1;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v7 = String.init(cString:)();
    unint64_t v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
    swift_retain();
    uint64_t v7 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t OrbitAnimation.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(unsigned int *)(v0 + 36);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t OrbitAnimation.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*OrbitAnimation.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t OrbitAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

uint64_t key path setter for OrbitAnimation.bindTarget : OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of BindTarget(*(void *)a1, v4, v7);
  uint64_t result = outlined consume of BindTarget?(v5, v6, v8);
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = v7;
  return result;
}

uint64_t OrbitAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*OrbitAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 48);
  if (v5 == 255)
  {
    if (*(void *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      long long v9 = v12;
      char v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v10 = 0;
      long long v9 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v9;
    *(unsigned char *)(a1 + 16) = v10;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return OrbitAnimation.bindTarget.modify;
}

uint64_t OrbitAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(v2 + 32);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(void *)(v2 + 16) = v4;
    *(void *)(v2 + 24) = v3;
    *(unsigned char *)(v2 + 32) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned char *)(v2 + 32));
    *(void *)(v2 + 16) = v4;
    *(void *)(v2 + 24) = v3;
    *(unsigned char *)(v2 + 32) = v5;
  }
  return result;
}

uint64_t OrbitAnimation.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *OrbitAnimation.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*OrbitAnimation.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 41);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return BlendTreeAnimation.fillMode.modify;
}

uint64_t OrbitAnimation.additive.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionIsAdditive();
  }
  return result;
}

uint64_t OrbitAnimation.additive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 43) = result;
  return result;
}

unsigned char *(*OrbitAnimation.additive.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

uint64_t OrbitAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t OrbitAnimation.trimStart.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  *(unsigned char *)(v2 + 65) = 0;
  return result;
}

void (*OrbitAnimation.trimStart.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(void *)(v1 + 200);
  long long v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 9) & 1) == 0)
  {
    uint64_t v10 = *v3;
    char v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return OrbitAnimation.trimStart.modify;
}

void OrbitAnimation.trimStart.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 56) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 64) = v3;
  free((void *)v1);
}

uint64_t OrbitAnimation.trimEnd.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v1;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v10 = *(_OWORD *)(v0 + 88);
  long long v11 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v8 = *(_OWORD *)(v0 + 56);
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t OrbitAnimation.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  *(unsigned char *)(v2 + 81) = 0;
  return result;
}

void (*OrbitAnimation.trimEnd.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(void *)(v1 + 200);
  long long v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 25) & 1) == 0)
  {
    uint64_t v10 = v3[2];
    char v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return OrbitAnimation.trimEnd.modify;
}

void OrbitAnimation.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 72) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 80) = v3;
  free((void *)v1);
}

uint64_t OrbitAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 88);
  long long v2 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v2;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v3 = *(_OWORD *)(v0 + 104);
  long long v10 = v1;
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v4;
  long long v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0) {
    return v10;
  }
  uint64_t v6 = *(void *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t OrbitAnimation.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  *(unsigned char *)(v2 + 97) = 0;
  return result;
}

void (*OrbitAnimation.trimDuration.modify(void *a1))(uint64_t *a1)
{
  long long v3 = malloc(0xB0uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  long long v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(void *)(v1 + 200);
  long long v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  if ((*((unsigned char *)v3 + 41) & 1) == 0)
  {
    uint64_t v10 = v3[4];
    char v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(void *)(v3[18] + 16))
  {
LABEL_7:
    uint64_t v10 = 0;
    char v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  uint64_t v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  char v11 = 0;
LABEL_8:
  *(void *)(v4 + 152) = v10;
  *(unsigned char *)(v4 + 160) = v11;
  return OrbitAnimation.trimDuration.modify;
}

void OrbitAnimation.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 168);
  unsigned __int8 v3 = *(unsigned char *)(v1 + 160);
  *(void *)(v2 + 88) = *(void *)(v1 + 152);
  *(_WORD *)(v2 + 96) = v3;
  free((void *)v1);
}

double OrbitAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v12 = *(_OWORD *)(v0 + 152);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v10 = *(_OWORD *)(v0 + 120);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.offset.setter(double a1)
{
  *(double *)(v1 + 104) = a1;
  *(unsigned char *)(v1 + 112) = 0;
}

void (*OrbitAnimation.offset.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  double v5 = v3 + 19;
  v3[20] = v1;
  long long v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(void *)(v1 + 200);
  long long v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[7])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[6];
  }
  *double v5 = v10;
  return OrbitAnimation.offset.modify;
}

void OrbitAnimation.offset.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 104) = v1[19];
  *(unsigned char *)(v2 + 112) = 0;
  free(v1);
}

double OrbitAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.delay.setter(double a1)
{
  *(double *)(v1 + 120) = a1;
  *(unsigned char *)(v1 + 128) = 0;
}

void (*OrbitAnimation.delay.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  double v5 = v3 + 19;
  v3[20] = v1;
  long long v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  v3[18] = *(void *)(v1 + 200);
  long long v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[9])
  {
    uint64_t v10 = 0;
    if (*(void *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        uint64_t v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    uint64_t v10 = v3[8];
  }
  *double v5 = v10;
  return OrbitAnimation.delay.modify;
}

void OrbitAnimation.delay.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[20];
  *(void *)(v2 + 120) = v1[19];
  *(unsigned char *)(v2 + 128) = 0;
  free(v1);
}

float OrbitAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void OrbitAnimation.speed.setter(float a1)
{
  *(float *)(v1 + 132) = a1;
  *(unsigned char *)(v1 + 136) = 0;
}

void (*OrbitAnimation.speed.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (char *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  float v5 = (float *)(v3 + 160);
  long long v6 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  *((void *)v3 + 18) = *(void *)(v1 + 200);
  *((void *)v3 + 19) = v1;
  long long v7 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v7;
  long long v8 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v8;
  long long v9 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v9;
  if (v3[80])
  {
    float v10 = 1.0;
    if (*(void *)(*((void *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        float v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    float v10 = *((float *)v3 + 19);
  }
  *float v5 = v10;
  return OrbitAnimation.speed.modify;
}

void OrbitAnimation.speed.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void *)(v1 + 152);
  *(_DWORD *)(v2 + 132) = *(_DWORD *)(v1 + 160);
  *(unsigned char *)(v2 + 136) = 0;
  free((void *)v1);
}

void OrbitAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 168);
  long long v11 = *(_OWORD *)(v1 + 152);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 184);
  uint64_t v14 = *(void *)(v1 + 200);
  long long v4 = *(_OWORD *)(v1 + 104);
  _OWORD v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *OrbitAnimation.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 137) = *result;
  return result;
}

void (*OrbitAnimation.repeatMode.modify(void *a1))(uint64_t *a1)
{
  long long v3 = (unsigned __int8 *)malloc(0xA8uLL);
  uint64_t v4 = (uint64_t)v3;
  *a1 = v3;
  long long v5 = *(_OWORD *)(v1 + 168);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 152);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 184);
  *((void *)v3 + 18) = *(void *)(v1 + 200);
  *((void *)v3 + 19) = v1;
  long long v6 = *(_OWORD *)(v1 + 104);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 88);
  *((_OWORD *)v3 + 3) = v6;
  long long v7 = *(_OWORD *)(v1 + 136);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 120);
  *((_OWORD *)v3 + 5) = v7;
  long long v8 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)long long v3 = *(_OWORD *)(v1 + 56);
  *((_OWORD *)v3 + 1) = v8;
  LODWORD(v9) = v3[81];
  if (v9 == 4)
  {
    uint64_t v9 = *(void *)(*((void *)v3 + 18) + 16);
    if (v9)
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v9) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v4);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v9) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(unsigned char *)(v4 + 160) = v9;
  return OrbitAnimation.repeatMode.modify;
}

void OrbitAnimation.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(*(void *)(v1 + 152) + 137) = *(unsigned char *)(v1 + 160);
  free((void *)v1);
}

double OrbitAnimation.duration.getter()
{
  if ((*(unsigned char *)(v0 + 216) & 1) == 0) {
    return *(double *)(v0 + 208);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 0.0;
  }
  RETimelineDefinitionGetDuration();
  return result;
}

void OrbitAnimation.duration.setter(double a1)
{
  *(double *)(v1 + 208) = a1;
  *(unsigned char *)(v1 + 216) = 0;
}

void *(*OrbitAnimation.duration.modify(void *a1))(void *result)
{
  a1[1] = v1;
  if (*(unsigned char *)(v1 + 216))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      RETimelineDefinitionGetDuration();
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 208);
  }
  *a1 = v3;
  return OrbitAnimation.duration.modify;
}

void *OrbitAnimation.duration.modify(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 208) = *result;
  *(unsigned char *)(v1 + 216) = 0;
  return result;
}

double OrbitAnimation.axis.getter()
{
  if ((*(unsigned char *)(v0 + 240) & 1) == 0) {
    return *(double *)(v0 + 224);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 0.0078125;
  }
  RETimelineDefinitionGetAxis();
  return result;
}

void OrbitAnimation.axis.setter(__n128 a1)
{
  v1[14] = a1;
  v1[15].n128_u8[0] = 0;
}

void (*OrbitAnimation.axis.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x18uLL);
  *a1 = v3;
  _OWORD v3[2] = v1;
  if (*(unsigned char *)(v1 + 240))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      RETimelineDefinitionGetAxis();
    }
    else {
      long long v4 = *(_OWORD *)&zmmword_22830EC90[16];
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 224);
  }
  *(_OWORD *)uint64_t v3 = v4;
  return OrbitAnimation.axis.modify;
}

void OrbitAnimation.axis.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  *(void *)(v2 + 224) = *v1;
  *(void *)(v2 + 232) = v3;
  *(unsigned char *)(v2 + 240) = 0;
  free(v1);
}

double OrbitAnimation.startTransform.getter()
{
  if ((*(unsigned char *)(v0 + 304) & 1) == 0) {
    return *(double *)(v0 + 256);
  }
  if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    RETimelineDefinitionGetStartTransform();
    if (one-time initialization token for identity != -1)
    {
      double v2 = result;
      swift_once();
      return v2;
    }
  }
  else
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    return 0.00781250185;
  }
  return result;
}

void OrbitAnimation.startTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v3[16] = a1;
  v3[17] = a2;
  v3[18] = a3;
  v3[19].n128_u8[0] = 0;
}

void (*OrbitAnimation.startTransform.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(unsigned char *)(v1 + 304))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16))
    {
      RETimelineDefinitionGetStartTransform();
      if (one-time initialization token for identity != -1)
      {
        long long v9 = v5;
        long long v10 = v4;
        long long v8 = v6;
        swift_once();
        long long v6 = v8;
        long long v5 = v9;
        long long v4 = v10;
      }
    }
    else
    {
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      long long v4 = xmmword_22830EC80;
      long long v5 = static simd_quatf.identity;
      long long v6 = 0uLL;
    }
  }
  else
  {
    long long v4 = *(_OWORD *)(v1 + 256);
    long long v5 = *(_OWORD *)(v1 + 272);
    long long v6 = *(_OWORD *)(v1 + 288);
  }
  *(_OWORD *)uint64_t v3 = v4;
  *((_OWORD *)v3 + 1) = v5;
  *((_OWORD *)v3 + 2) = v6;
  return OrbitAnimation.startTransform.modify;
}

void OrbitAnimation.startTransform.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = v1[5];
  uint64_t v2 = v1[6];
  long long v4 = *((_OWORD *)v1 + 1);
  uint64_t v5 = v1[4];
  *(_OWORD *)(v2 + 256) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 272) = v4;
  *(void *)(v2 + 288) = v5;
  *(void *)(v2 + 296) = v3;
  *(unsigned char *)(v2 + 304) = 0;
  free(v1);
}

uint64_t OrbitAnimation.spinClockwise.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 48) + 16)) {
    return RETimelineDefinitionGetSpinClockwise();
  }
  return 1;
}

uint64_t OrbitAnimation.spinClockwise.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 305) = result;
  return result;
}

unsigned char *(*OrbitAnimation.spinClockwise.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 305);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      char SpinClockwise = RETimelineDefinitionGetSpinClockwise();
    }
    else {
      char SpinClockwise = 1;
    }
  }
  else
  {
    char SpinClockwise = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SpinClockwise;
  return OrbitAnimation.spinClockwise.modify;
}

unsigned char *OrbitAnimation.spinClockwise.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 305) = result[8];
  return result;
}

uint64_t OrbitAnimation.orientToPath.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 306);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionGetOrientToPath();
  }
  return result;
}

uint64_t OrbitAnimation.orientToPath.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 306) = result;
  return result;
}

unsigned char *(*OrbitAnimation.orientToPath.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 306);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionGetOrientToPath();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return OrbitAnimation.orientToPath.modify;
}

unsigned char *OrbitAnimation.orientToPath.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 306) = result[8];
  return result;
}

float OrbitAnimation.rotationCount.getter()
{
  if ((*(unsigned char *)(v0 + 312) & 1) == 0) {
    return *(float *)(v0 + 308);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 1.0;
  }
  RETimelineDefinitionGetRotationCount();
  return result;
}

void OrbitAnimation.rotationCount.setter(float a1)
{
  *(float *)(v1 + 308) = a1;
  *(unsigned char *)(v1 + 312) = 0;
}

uint64_t *(*OrbitAnimation.rotationCount.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 312))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      RETimelineDefinitionGetRotationCount();
    }
    else {
      float v3 = 1.0;
    }
  }
  else
  {
    float v3 = *(float *)(v1 + 308);
  }
  *(float *)(a1 + 8) = v3;
  return OrbitAnimation.rotationCount.modify;
}

uint64_t *OrbitAnimation.rotationCount.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 308) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 312) = 0;
  return result;
}

uint64_t OrbitAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(unsigned char *)(a1 + 32) = -1;
      *(_DWORD *)(a1 + 36) = 0;
      *(_WORD *)(a1 + 40) = 1;
      *(unsigned char *)(a1 + 42) = 1;
      *(unsigned char *)(a1 + 43) = 2;
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = 0;
      *(unsigned char *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 65) = 1;
      *(void *)(a1 + 72) = 0;
      *(unsigned char *)(a1 + 80) = 0;
      *(unsigned char *)(a1 + 81) = 1;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(unsigned char *)(a1 + 97) = 1;
      *(void *)(a1 + 104) = 0;
      *(unsigned char *)(a1 + 112) = 1;
      *(void *)(a1 + 120) = 0;
      *(unsigned char *)(a1 + 128) = 1;
      *(_DWORD *)(a1 + 132) = 0;
      *(unsigned char *)(a1 + 136) = 1;
      *(unsigned char *)(a1 + 137) = 4;
      *(void *)(a1 + 144) = v9;
      *(void *)(a1 + 152) = ClipSourceRef;
      *(void *)(a1 + 160) = v10;
      *(void *)(a1 + 168) = 0;
      *(void *)(a1 + 176) = 0;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(_WORD *)(a1 + 192) = v16;
      *(unsigned char *)(a1 + 194) = v15;
      *(unsigned char *)(a1 + 195) = v14;
      *(void *)(a1 + 200) = v12;
      *(void *)(a1 + 208) = 0;
      *(unsigned char *)(a1 + 216) = 1;
      *(void *)(a1 + 224) = 0;
      *(void *)(a1 + 232) = 0;
      *(unsigned char *)(a1 + 240) = 1;
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(unsigned char *)(a1 + 304) = 1;
      *(_WORD *)(a1 + 305) = 514;
      *(_DWORD *)(a1 + 308) = 0;
      *(unsigned char *)(a1 + 312) = 1;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

void *OrbitAnimation.createResource()()
{
  memcpy(__dst, v0, 0x139uLL);
  uint64_t v1 = __dst[2];
  uint64_t v2 = __dst[3];
  unsigned __int8 v3 = __dst[4];
  uint64_t v4 = __dst[6];
  char v5 = __dst[27];
  char v6 = __dst[30];
  char v7 = __dst[38];
  if (__dst[1])
  {
    int v14 = LOBYTE(__dst[39]);
    int v15 = BYTE1(__dst[38]);
    int v16 = BYTE2(__dst[38]);
    outlined retain of OrbitAnimation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
    goto LABEL_3;
  }
  if (BYTE3(__dst[5]) == 2) {
    char v9 = (LOBYTE(__dst[4]) == 255) & __dst[5] & BYTE2(__dst[5]);
  }
  else {
    char v9 = 0;
  }
  unsigned __int8 v10 = v9 & __dst[27] & LOBYTE(__dst[30]) & __dst[38];
  if (BYTE1(__dst[38]) != 2) {
    unsigned __int8 v10 = 0;
  }
  if (BYTE2(__dst[38]) != 2) {
    unsigned __int8 v10 = 0;
  }
  if ((v10 & __dst[39] & 1) == 0)
  {
    int v14 = LOBYTE(__dst[39]);
    int v15 = BYTE1(__dst[38]);
    int v16 = BYTE2(__dst[38]);
    if (*(void *)(__dst[6] + 16))
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      outlined copy of BindTarget?(v1, v2, v3);
      swift_retain();
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      outlined copy of BindTarget?(v1, v2, v3);
      swift_retain();
    }
LABEL_3:
    outlined consume of BindTarget?(v1, v2, v3);
    swift_release();
    outlined release of OrbitAnimation((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    OrbitAnimation = (void *)RETimelineDefinitionCreateOrbitAnimation();
    swift_release();
    if ((v5 & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetDuration();
    }
    RETimelineDefinitionSetDuration();
    if ((v6 & 1) != 0 && *(void *)(v4 + 16)) {
      RETimelineDefinitionGetAxis();
    }
    RETimelineDefinitionSetAxis();
    if ((v7 & 1) == 0) {
      goto LABEL_29;
    }
    if (*(void *)(v4 + 16))
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      RETimelineDefinitionGetStartTransform();
      if (one-time initialization token for identity == -1) {
        goto LABEL_28;
      }
    }
    else
    {
      outlined retain of OrbitAnimation((uint64_t)__dst);
      if (one-time initialization token for identity == -1)
      {
LABEL_28:
        outlined release of OrbitAnimation((uint64_t)__dst);
LABEL_29:
        RETimelineDefinitionSetStartTransform();
        if (v15 == 2 && *(void *)(v4 + 16)) {
          RETimelineDefinitionGetSpinClockwise();
        }
        RETimelineDefinitionSetSpinClockwise();
        if (v16 == 2 && *(void *)(v4 + 16)) {
          RETimelineDefinitionGetOrientToPath();
        }
        RETimelineDefinitionSetOrientToPath();
        if (v14)
        {
          if (*(void *)(v4 + 16)) {
            RETimelineDefinitionGetRotationCount();
          }
        }
        RETimelineDefinitionSetRotationCount();
        memcpy(v17, __dst, 0x139uLL);
        v12._rawValue = OrbitAnimation;
        unint64_t v11 = OrbitAnimation.createResource(timelineDefinition:)(v12);
        RERelease();
        return v11;
      }
    }
    swift_once();
    goto LABEL_28;
  }
  v17[6] = *(_OWORD *)&__dst[19];
  v17[7] = *(_OWORD *)&__dst[21];
  v17[8] = *(_OWORD *)&__dst[23];
  *(void *)&v17[9] = __dst[25];
  v17[2] = *(_OWORD *)&__dst[11];
  v17[3] = *(_OWORD *)&__dst[13];
  v17[4] = *(_OWORD *)&__dst[15];
  v17[5] = *(_OWORD *)&__dst[17];
  v17[0] = *(_OWORD *)&__dst[7];
  v17[1] = *(_OWORD *)&__dst[9];
  if (TimelineClipProperties.isClipped.getter())
  {
    v17[6] = *(_OWORD *)&__dst[19];
    v17[7] = *(_OWORD *)&__dst[21];
    v17[8] = *(_OWORD *)&__dst[23];
    *(void *)&v17[9] = __dst[25];
    v17[2] = *(_OWORD *)&__dst[11];
    v17[3] = *(_OWORD *)&__dst[13];
    v17[4] = *(_OWORD *)&__dst[15];
    v17[5] = *(_OWORD *)&__dst[17];
    v17[0] = *(_OWORD *)&__dst[7];
    v17[1] = *(_OWORD *)&__dst[9];
    if (TimelineClipProperties.isModified.getter())
    {
      v17[6] = *(_OWORD *)&__dst[19];
      v17[7] = *(_OWORD *)&__dst[21];
      v17[8] = *(_OWORD *)&__dst[23];
      *(void *)&v17[9] = __dst[25];
      v17[2] = *(_OWORD *)&__dst[11];
      v17[3] = *(_OWORD *)&__dst[13];
      v17[4] = *(_OWORD *)&__dst[15];
      v17[5] = *(_OWORD *)&__dst[17];
      v17[0] = *(_OWORD *)&__dst[7];
      v17[1] = *(_OWORD *)&__dst[9];
      return (void *)TimelineClipProperties.createClip()();
    }
  }
  return TimelineDefinition.resource.getter();
}

void *OrbitAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = *(void *)(v1 + 48);
  unsigned long long v3 = *(_OWORD *)(v1 + 168);
  unsigned long long v78 = *(_OWORD *)(v1 + 152);
  unsigned long long v79 = v3;
  long long v80 = *(_OWORD *)(v1 + 184);
  uint64_t v81 = *(void *)(v1 + 200);
  long long v4 = *(_OWORD *)(v1 + 104);
  long long v74 = *(_OWORD *)(v1 + 88);
  long long v75 = v4;
  long long v5 = *(_OWORD *)(v1 + 136);
  long long v76 = *(_OWORD *)(v1 + 120);
  long long v77 = v5;
  long long v6 = *(_OWORD *)(v1 + 72);
  long long v72 = *(_OWORD *)(v1 + 56);
  long long v73 = v6;
  if (a1._rawValue)
  {
    TimelineBaseProperties.writeProperties(_:)(a1);
    unsigned long long v68 = v78;
    unsigned long long v69 = v79;
    long long v70 = v80;
    uint64_t v71 = v81;
    long long v64 = v74;
    long long v65 = v75;
    long long v66 = v76;
    long long v67 = v77;
    long long v62 = v72;
    long long v63 = v73;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      Swift::String v20 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return v20;
    }
    unint64_t v49 = v79;
    unint64_t v50 = *((void *)&v78 + 1);
    unint64_t v48 = *((void *)&v79 + 1);
    int v46 = DWORD1(v80);
    char v47 = v80;
    char v44 = BYTE9(v80);
    char v45 = BYTE8(v80);
    char v42 = BYTE11(v80);
    char v43 = BYTE10(v80);
    uint64_t v41 = v81;
    int v39 = HIDWORD(v76);
    char v40 = BYTE1(v77);
    char v38 = v77;
    uint64_t v37 = v76;
    char v36 = BYTE8(v76);
    uint64_t v35 = v75;
    char v34 = BYTE8(v75);
    char v30 = BYTE9(v74);
    char v31 = BYTE8(v74);
    uint64_t v8 = v73;
    char v9 = BYTE8(v73);
    char v10 = BYTE9(v73);
    uint64_t v11 = v72;
    char v12 = BYTE8(v72);
    char v13 = BYTE9(v72);
    uint64_t v32 = v74;
    unint64_t v33 = v78;
    type metadata accessor for TimelineDefinition();
    uint64_t v14 = swift_allocObject();
    *(Swift::OpaquePointer *)(v14 + 16) = a1;
    outlined retain of TimelineClipProperties((uint64_t)&v72);
    RERetain();
    swift_release();
    *(void *)&long long v52 = v11;
    BYTE8(v52) = v12;
    BYTE9(v52) = v13;
    *(void *)&long long v53 = v8;
    BYTE8(v53) = v9;
    BYTE9(v53) = v10;
    *(void *)&long long v54 = v32;
    BYTE8(v54) = v31;
    BYTE9(v54) = v30;
    *(void *)&long long v55 = v35;
    BYTE8(v55) = v34;
    *(void *)&long long v56 = v37;
    BYTE8(v56) = v36;
    HIDWORD(v56) = v39;
    LOBYTE(v57) = v38;
    BYTE1(v57) = v40;
    *((void *)&v57 + 1) = v14;
    unsigned long long v58 = __PAIR128__(v50, v33);
    unsigned long long v59 = __PAIR128__(v48, v49);
    LOBYTE(v60) = v47;
    DWORD1(v60) = v46;
    BYTE8(v60) = v45;
    BYTE9(v60) = v44;
    BYTE10(v60) = v43;
    BYTE11(v60) = v42;
    uint64_t v61 = v41;
    uint64_t v71 = v41;
    unsigned long long v69 = __PAIR128__(v48, v49);
    long long v70 = v60;
    long long v62 = v52;
    long long v63 = v53;
    long long v67 = v57;
    unsigned long long v68 = __PAIR128__(v50, v33);
    long long v65 = v55;
    long long v66 = v56;
    long long v64 = v54;
    outlined retain of TimelineClipProperties((uint64_t)&v52);
    swift_retain();
    closure #1 in TimelineClipProperties.createClip()((uint64_t)&v62, &v51);
    swift_release();
    outlined release of TimelineClipProperties((uint64_t)&v52);
    outlined release of TimelineClipProperties((uint64_t)&v52);
    return (void *)v51;
  }
  else
  {
    unsigned long long v16 = *(_OWORD *)(v1 + 168);
    unsigned long long v68 = *(_OWORD *)(v1 + 152);
    unsigned long long v69 = v16;
    long long v70 = *(_OWORD *)(v1 + 184);
    uint64_t v71 = *(void *)(v1 + 200);
    long long v17 = *(_OWORD *)(v1 + 104);
    long long v64 = *(_OWORD *)(v1 + 88);
    long long v65 = v17;
    long long v18 = *(_OWORD *)(v1 + 136);
    long long v66 = *(_OWORD *)(v1 + 120);
    long long v67 = v18;
    long long v19 = *(_OWORD *)(v1 + 72);
    long long v62 = *(_OWORD *)(v1 + 56);
    long long v63 = v19;
    if (TimelineClipProperties.isClipped.getter())
    {
      unsigned long long v68 = v78;
      unsigned long long v69 = v79;
      long long v70 = v80;
      uint64_t v71 = v81;
      long long v64 = v74;
      long long v65 = v75;
      long long v66 = v76;
      long long v67 = v77;
      long long v62 = v72;
      long long v63 = v73;
      if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
        return TimelineDefinition.resource.getter();
      }
      unsigned long long v68 = v78;
      unsigned long long v69 = v79;
      long long v70 = v80;
      uint64_t v71 = v81;
      long long v64 = v74;
      long long v65 = v75;
      long long v66 = v76;
      long long v67 = v77;
      long long v62 = v72;
      long long v63 = v73;
      return (void *)TimelineClipProperties.createClip()();
    }
    else
    {
      int v15 = *(void **)(v2 + 16);
      if (v15)
      {
        uint64_t v22 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v22, (uint64_t)&v62);
        uint64_t v23 = *((void *)&v63 + 1);
        uint64_t v24 = v64;
        __swift_project_boxed_opaque_existential_1(&v62, *((uint64_t *)&v63 + 1));
        (*(void (**)(uint64_t, uint64_t))(v24 + 32))(v23, v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v26 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v27 = String.init(cString:)();
          uint64_t v29 = v28;
          type metadata accessor for AnimationResource();
          int v15 = (void *)swift_allocObject();
          v15[2] = v26;
          _OWORD v15[3] = v27;
          v15[4] = v29;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return v15;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance OrbitAnimation()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 32);
  if (*(void *)(v0 + 8))
  {
    uint64_t v4 = *(void *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance OrbitAnimation(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)OrbitAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance OrbitAnimation()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(unsigned int *)(v0 + 36);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance OrbitAnimation(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance OrbitAnimation@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance OrbitAnimation(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 41) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance OrbitAnimation(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  *(unsigned char *)(v2 + 65) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  *(unsigned char *)(v2 + 81) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance OrbitAnimation()
{
  return OrbitAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance OrbitAnimation(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  *(unsigned char *)(v2 + 97) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.offset.setter in conformance OrbitAnimation(double a1)
{
  *(double *)(v1 + 104) = a1;
  *(unsigned char *)(v1 + 112) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.delay.setter in conformance OrbitAnimation(double a1)
{
  *(double *)(v1 + 120) = a1;
  *(unsigned char *)(v1 + 128) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.speed.setter in conformance OrbitAnimation(float a1)
{
  *(float *)(v1 + 132) = a1;
  *(unsigned char *)(v1 + 136) = 0;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance OrbitAnimation(unsigned char *result)
{
  *(unsigned char *)(v1 + 137) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance OrbitAnimation(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = OrbitAnimation.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

double protocol witness for AnimationDefinition.duration.getter in conformance OrbitAnimation()
{
  if ((*(unsigned char *)(v0 + 216) & 1) == 0) {
    return *(double *)(v0 + 208);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 0.0;
  }
  RETimelineDefinitionGetDuration();
  return result;
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance OrbitAnimation()
{
  double result = OrbitAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000001CLL;
    *(void *)(v1 + 8) = 0x800000022834E530;
    *(unsigned char *)(v1 + 16) = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t sub_227FD9060(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_227FD90A4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    uint64_t result = *(unsigned int *)(a1 + 36);
  }
  *a2 = result;
  return result;
}

_DWORD *sub_227FD90EC(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 36) = *result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

double sub_227FD90FC@<D0>(uint64_t a1@<X8>)
{
  OrbitAnimation.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_227FD9144@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 42) == 1)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(a1 + 41);
  }
  *a2 = result;
  return result;
}

unsigned __int8 *sub_227FD918C(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 41) = *result;
  return result;
}

uint64_t sub_227FD919C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 43);
  if (v3 == 2)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FD91E4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 43) = *result;
  return result;
}

uint64_t sub_227FD91F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = OrbitAnimation.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FD9224(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 56) = *(void *)result;
  *(_WORD *)(a2 + 64) = v2;
  return result;
}

uint64_t sub_227FD923C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = OrbitAnimation.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FD9270(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 72) = *(void *)result;
  *(_WORD *)(a2 + 80) = v2;
  return result;
}

uint64_t sub_227FD9288@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = OrbitAnimation.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FD92BC(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 88) = *(void *)result;
  *(_WORD *)(a2 + 96) = v2;
  return result;
}

void sub_227FD92D4(double *a1@<X8>)
{
  *a1 = OrbitAnimation.offset.getter();
}

void *sub_227FD9300(void *result, uint64_t a2)
{
  *(void *)(a2 + 104) = *result;
  *(unsigned char *)(a2 + 112) = 0;
  return result;
}

void sub_227FD9310(double *a1@<X8>)
{
  *a1 = OrbitAnimation.delay.getter();
}

void *sub_227FD933C(void *result, uint64_t a2)
{
  *(void *)(a2 + 120) = *result;
  *(unsigned char *)(a2 + 128) = 0;
  return result;
}

void sub_227FD934C(float *a1@<X8>)
{
  *a1 = OrbitAnimation.speed.getter();
}

_DWORD *sub_227FD9378(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 132) = *result;
  *(unsigned char *)(a2 + 136) = 0;
  return result;
}

void sub_227FD9388(unsigned char *a1@<X8>)
{
  OrbitAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_227FD93C4(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 137) = *result;
  return result;
}

uint64_t sub_227FD93D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(result + 216))
  {
    uint64_t result = *(void *)(*(void *)(result + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetDuration();
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(result + 208);
  }
  *a2 = v3;
  return result;
}

void *sub_227FD941C(void *result, uint64_t a2)
{
  *(void *)(a2 + 208) = *result;
  *(unsigned char *)(a2 + 216) = 0;
  return result;
}

uint64_t sub_227FD942C@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  if (*(unsigned char *)(result + 240))
  {
    uint64_t result = *(void *)(*(void *)(result + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetAxis();
    }
    else {
      long long v3 = *(_OWORD *)&zmmword_22830EC90[16];
    }
  }
  else
  {
    long long v3 = *(_OWORD *)(result + 224);
  }
  *a2 = v3;
  return result;
}

void *sub_227FD9484(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  *(void *)(a2 + 224) = *result;
  *(void *)(a2 + 232) = v2;
  *(unsigned char *)(a2 + 240) = 0;
  return result;
}

void sub_227FD9494(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = OrbitAnimation.startTransform.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

__n128 sub_227FD94C4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 256) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 272) = v3;
  *(void *)(a2 + 288) = v5;
  *(void *)(a2 + 296) = v4;
  *(unsigned char *)(a2 + 304) = 0;
  return result;
}

uint64_t sub_227FD94DC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 305);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 48) + 16)) {
      uint64_t result = RETimelineDefinitionGetSpinClockwise();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FD952C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 305) = *result;
  return result;
}

uint64_t sub_227FD9538@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 306);
  if (v3 == 2)
  {
    uint64_t result = *(void *)(*(void *)(a1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetOrientToPath();
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FD9580(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 306) = *result;
  return result;
}

uint64_t sub_227FD958C@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  if (*(unsigned char *)(result + 312))
  {
    uint64_t result = *(void *)(*(void *)(result + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetRotationCount();
    }
    else {
      float v3 = 1.0;
    }
  }
  else
  {
    float v3 = *(float *)(result + 308);
  }
  *a2 = v3;
  return result;
}

_DWORD *sub_227FD95D8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 308) = *result;
  *(unsigned char *)(a2 + 312) = 0;
  return result;
}

uint64_t destroy for OrbitAnimation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 168), *(void *)(a1 + 176), v3);
  }

  return swift_release();
}

uint64_t initializeWithCopy for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  int v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 168);
    uint64_t v12 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(void *)(a1 + 168) = v11;
    *(void *)(a1 + 176) = v12;
    *(unsigned char *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  uint64_t v13 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v13;
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  long long v14 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_WORD *)(a1 + 305) = *(_WORD *)(a2 + 305);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 16);
  int v5 = (long long *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(unsigned char *)(a2 + 32));
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(unsigned char *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    char v14 = *(unsigned char *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 32) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(unsigned char *)(a2 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  int v16 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 56) = v17;
  uint64_t v18 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  uint64_t v19 = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 88) = v19;
  uint64_t v20 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v20;
  uint64_t v21 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (long long *)(a1 + 168);
  uint64_t v23 = (long long *)(a2 + 168);
  int v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      long long v33 = *v23;
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *uint64_t v22 = v33;
    }
    else
    {
      uint64_t v30 = *(void *)(a2 + 168);
      uint64_t v31 = *(void *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(unsigned char *)(a2 + 184));
      *(void *)(a1 + 168) = v30;
      *(void *)(a1 + 176) = v31;
      *(unsigned char *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    char v32 = *(unsigned char *)(a2 + 184);
    *uint64_t v22 = *v23;
    *(unsigned char *)(a1 + 184) = v32;
  }
  else
  {
    uint64_t v25 = *(void *)(a2 + 168);
    uint64_t v26 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(unsigned char *)(a2 + 184));
    uint64_t v27 = *(void *)(a1 + 168);
    uint64_t v28 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v25;
    *(void *)(a1 + 176) = v26;
    unsigned __int8 v29 = *(unsigned char *)(a1 + 184);
    *(unsigned char *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  int v34 = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  uint64_t v35 = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 208) = v35;
  long long v36 = *(_OWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = v36;
  long long v37 = *(_OWORD *)(a2 + 256);
  long long v38 = *(_OWORD *)(a2 + 272);
  long long v39 = *(_OWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_OWORD *)(a1 + 272) = v38;
  *(_OWORD *)(a1 + 288) = v39;
  *(_OWORD *)(a1 + 256) = v37;
  *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
  *(unsigned char *)(a1 + 306) = *(unsigned char *)(a2 + 306);
  LODWORD(v35) = *(_DWORD *)(a2 + 308);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(_DWORD *)(a1 + 308) = v35;
  return a1;
}

void *__swift_memcpy313_16(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x139uLL);
}

uint64_t assignWithTake for OrbitAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  int v5 = (_OWORD *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(unsigned char *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (_OWORD *)(a2 + 168);
  int v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    goto LABEL_11;
  }
  int v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(unsigned char *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  long long v17 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v17;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(unsigned char *)(a1 + 306) = *(unsigned char *)(a2 + 306);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrbitAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 313)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrbitAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 313) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 313) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OrbitAnimation()
{
  return &type metadata for OrbitAnimation;
}

uint64_t outlined retain of OrbitAnimation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_retain();
  return a1;
}

uint64_t outlined release of OrbitAnimation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  return a1;
}

BOOL static TweenMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TweenMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TweenMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t SampledAnimation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 32);
  if (*(void *)(v0 + 8))
  {
    uint64_t v4 = *(void *)v0;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 48) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for SampledAnimation.name : <A>SampledAnimation<A>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return SampledAnimation.name.setter(v1, v2);
}

uint64_t SampledAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SampledAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  memcpy(v5, v1, sizeof(v5));
  *a1 = SampledAnimation.name.getter();
  a1[1] = v3;
  return BlendTreeAnimation.name.modify;
}

uint64_t SampledAnimation.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 40) != 1) {
    return *(unsigned int *)(v0 + 36);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t SampledAnimation.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 36) = result;
  *(unsigned char *)(v1 + 40) = 0;
  return result;
}

uint64_t *(*SampledAnimation.blendLayer.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 40))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 36);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return BlendTreeAnimation.blendLayer.modify;
}

uint64_t SampledAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

double key path getter for SampledAnimation.bindTarget : <A>SampledAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  SampledAnimation.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for SampledAnimation.bindTarget : <A>SampledAnimation<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 16);
  v4[0] = *(void *)a1;
  v4[1] = v1;
  unsigned __int8 v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return SampledAnimation.bindTarget.setter(v4);
}

uint64_t SampledAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*SampledAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  memcpy(v4, v1, sizeof(v4));
  SampledAnimation.bindTarget.getter(a1);
  return BlendTreeAnimation.bindTarget.modify;
}

uint64_t SampledAnimation.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 48) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 41);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *SampledAnimation.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 41) = *result;
  return result;
}

unsigned __int8 *(*SampledAnimation.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 42))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 41);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return BlendTreeAnimation.fillMode.modify;
}

uint64_t SampledAnimation.additive.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 43);
  if (v1 != 2) {
    return v1 & 1;
  }
  uint64_t result = *(void *)(*(void *)(v0 + 48) + 16);
  if (result) {
    return RETimelineDefinitionIsAdditive();
  }
  return result;
}

uint64_t SampledAnimation.additive.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 43) = result;
  return result;
}

unsigned char *(*SampledAnimation.additive.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v1 + 48) + 16);
    if (v4) {
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
    }
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = v4;
  return BlendTreeAnimation.isAdditive.modify;
}

uint64_t SampledAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  v8[6] = *(_OWORD *)(v0 + 152);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  _OWORD v8[4] = *(_OWORD *)(v0 + 120);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t SampledAnimation.trimStart.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 56) = result;
  *(unsigned char *)(v2 + 64) = a2 & 1;
  *(unsigned char *)(v2 + 65) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(void *)a1 = SampledAnimation.trimStart.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimStart.modify;
}

uint64_t SampledAnimation.trimEnd.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v1;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  long long v10 = *(_OWORD *)(v0 + 88);
  long long v11 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v8 = *(_OWORD *)(v0 + 56);
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t SampledAnimation.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  *(unsigned char *)(v2 + 81) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(void *)a1 = SampledAnimation.trimEnd.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimEnd.modify;
}

uint64_t SampledAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 88);
  long long v2 = *(_OWORD *)(v0 + 168);
  long long v14 = *(_OWORD *)(v0 + 152);
  long long v15 = v2;
  long long v16 = *(_OWORD *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 200);
  long long v3 = *(_OWORD *)(v0 + 104);
  long long v10 = v1;
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 136);
  long long v12 = *(_OWORD *)(v0 + 120);
  long long v13 = v4;
  long long v5 = *(_OWORD *)(v0 + 72);
  v9[0] = *(_OWORD *)(v0 + 56);
  v9[1] = v5;
  if ((BYTE9(v1) & 1) == 0) {
    return v10;
  }
  uint64_t v6 = *(void *)(v17 + 16);
  if (v6)
  {
    outlined retain of TimelineClipProperties((uint64_t)v9);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v6 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v9);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v9);
      return 0;
    }
  }
  return v6;
}

uint64_t SampledAnimation.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 88) = result;
  *(unsigned char *)(v2 + 96) = a2 & 1;
  *(unsigned char *)(v2 + 97) = 0;
  return result;
}

uint64_t (*SampledAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  memcpy(v5, v1, sizeof(v5));
  *(void *)a1 = SampledAnimation.trimDuration.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return BlendTreeAnimation.trimDuration.modify;
}

double SampledAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v12 = *(_OWORD *)(v0 + 152);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v10 = *(_OWORD *)(v0 + 120);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.offset.setter(double a1)
{
  *(double *)(v1 + 104) = a1;
  *(unsigned char *)(v1 + 112) = 0;
}

double (*SampledAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  memcpy(v4, v1, sizeof(v4));
  *(double *)a1 = SampledAnimation.offset.getter();
  return BlendTreeAnimation.offset.modify;
}

double SampledAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.delay.setter(double a1)
{
  *(double *)(v1 + 120) = a1;
  *(unsigned char *)(v1 + 128) = 0;
}

double (*SampledAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  memcpy(v4, v1, sizeof(v4));
  *(double *)a1 = SampledAnimation.delay.getter();
  return BlendTreeAnimation.delay.modify;
}

float SampledAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 168);
  long long v11 = *(_OWORD *)(v0 + 152);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 200);
  long long v2 = *(_OWORD *)(v0 + 104);
  v8[2] = *(_OWORD *)(v0 + 88);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 136);
  long long v9 = *(_OWORD *)(v0 + 120);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 72);
  v8[0] = *(_OWORD *)(v0 + 56);
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void SampledAnimation.speed.setter(float a1)
{
  *(float *)(v1 + 132) = a1;
  *(unsigned char *)(v1 + 136) = 0;
}

float (*SampledAnimation.speed.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  memcpy(v4, v1, sizeof(v4));
  *(float *)(a1 + 8) = SampledAnimation.speed.getter();
  return BlendTreeAnimation.speed.modify;
}

void SampledAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 168);
  long long v11 = *(_OWORD *)(v1 + 152);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 184);
  uint64_t v14 = *(void *)(v1 + 200);
  long long v4 = *(_OWORD *)(v1 + 104);
  _OWORD v9[2] = *(_OWORD *)(v1 + 88);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 136);
  v9[4] = *(_OWORD *)(v1 + 120);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 72);
  v9[0] = *(_OWORD *)(v1 + 56);
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *SampledAnimation.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 137) = *result;
  return result;
}

unsigned char *(*SampledAnimation.repeatMode.modify(void *a1))(unsigned char *result)
{
  *a1 = v1;
  long long v2 = a1 + 1;
  memcpy(v4, v1, sizeof(v4));
  SampledAnimation.repeatMode.getter(v2);
  return BlendTreeAnimation.repeatMode.modify;
}

uint64_t SampledAnimation.tweenMode.getter@<X0>(unsigned char *a1@<X8>)
{
  int v3 = *(unsigned __int8 *)(v1 + 208);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      uint64_t result = RETimelineDefinitionGetInterpolationEnabled();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a1 = result;
  return result;
}

unsigned char *SampledAnimation.tweenMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 208) = *result;
  return result;
}

unsigned char *(*SampledAnimation.tweenMode.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 208);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      char InterpolationEnabled = RETimelineDefinitionGetInterpolationEnabled();
    }
    else {
      char InterpolationEnabled = 1;
    }
  }
  else
  {
    char InterpolationEnabled = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = InterpolationEnabled;
  return SampledAnimation.tweenMode.modify;
}

unsigned char *SampledAnimation.tweenMode.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 208) = result[8];
  return result;
}

float SampledAnimation.frameInterval.getter()
{
  if ((*(unsigned char *)(v0 + 216) & 1) == 0) {
    return *(float *)(v0 + 212);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 0.033333;
  }
  RETimelineDefinitionGetFrameInterval();
  return result;
}

void SampledAnimation.frameInterval.setter(float a1)
{
  *(float *)(v1 + 212) = a1;
  *(unsigned char *)(v1 + 216) = 0;
}

float (*SampledAnimation.frameInterval.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 216))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      RETimelineDefinitionGetFrameInterval();
    }
    else {
      int v3 = 1023969417;
    }
  }
  else
  {
    int v3 = *(_DWORD *)(v1 + 212);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return SampledAnimation.frameInterval.modify;
}

float SampledAnimation.frameInterval.modify(float *a1)
{
  uint64_t v1 = *(void *)a1;
  float result = a1[2];
  *(float *)(v1 + 212) = result;
  *(unsigned char *)(v1 + 216) = 0;
  return result;
}

double SampledAnimation.start.getter()
{
  if ((*(unsigned char *)(v0 + 240) & 1) == 0) {
    return *(double *)(v0 + 232);
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return 0.0;
  }
  RETimelineDefinitionGetStartTime();
  return v1;
}

void SampledAnimation.start.setter(double a1)
{
  *(double *)(v1 + 232) = a1;
  *(unsigned char *)(v1 + 240) = 0;
}

double (*SampledAnimation.start.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  if (*(unsigned char *)(v1 + 240))
  {
    if (*(void *)(*(void *)(v1 + 48) + 16))
    {
      RETimelineDefinitionGetStartTime();
      double v3 = v4;
    }
    else
    {
      double v3 = 0.0;
    }
  }
  else
  {
    double v3 = *(double *)(v1 + 232);
  }
  *(double *)a1 = v3;
  return SampledAnimation.start.modify;
}

double SampledAnimation.start.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 232) = *(void *)a1;
  *(unsigned char *)(v1 + 240) = 0;
  return result;
}

double specialized SampledAnimation.end.getter(uint64_t *a1)
{
  if ((*(unsigned char *)(v1 + 256) & 1) == 0) {
    return *(double *)(v1 + 248);
  }
  if (*(void *)(*(void *)(v1 + 48) + 16))
  {
    RETimelineDefinitionGetEndTime();
    return v3;
  }
  else
  {
    outlined init with take of Transform?(v1 + 224, (uint64_t)&v7, a1);
    outlined init with take of Transform?((uint64_t)&v7, (uint64_t)&v8, a1);
    if (v8) {
      double v5 = (double)*(uint64_t *)(v8 + 16);
    }
    else {
      double v5 = 0.0;
    }
    double v6 = *(float *)(v1 + 212);
    if (*(unsigned char *)(v1 + 216)) {
      double v6 = 0.0333333351;
    }
    return v5 * v6;
  }
}

uint64_t SampledAnimation.end.getter(uint64_t result)
{
  if (*(unsigned char *)(v1 + 256))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    if (*(void *)(v2 + 16)) {
      return RETimelineDefinitionGetEndTime();
    }
    char v3 = *(unsigned char *)(v1 + 216);
    if (*(void *)(v1 + 224))
    {
      double result = MEMORY[0x22A688F10](*(void *)(v1 + 224), *(void *)(result + 16));
      if ((v3 & 1) == 0) {
        return result;
      }
    }
    else if ((*(unsigned char *)(v1 + 216) & 1) == 0)
    {
      return result;
    }
    double result = *(void *)(v2 + 16);
    if (result) {
      return RETimelineDefinitionGetFrameInterval();
    }
  }
  return result;
}

void SampledAnimation.end.setter(double a1)
{
  *(double *)(v1 + 248) = a1;
  *(unsigned char *)(v1 + 256) = 0;
}

double (*SampledAnimation.end.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  a1[1] = v2;
  memcpy(v7, v2, sizeof(v7));
  SampledAnimation.end.getter(a2);
  *a1 = v5;
  return SampledAnimation.end.modify;
}

double SampledAnimation.end.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)a1;
  *(void *)(v1 + 248) = *(void *)a1;
  *(unsigned char *)(v1 + 256) = 0;
  return result;
}

void SampledAnimation.duration.setter(double a1)
{
  *(double *)(v1 + 248) = a1;
  *(unsigned char *)(v1 + 256) = 0;
}

double (*SampledAnimation.duration.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  a1[1] = v2;
  memcpy(v7, v2, sizeof(v7));
  SampledAnimation.end.getter(a2);
  *a1 = v5;
  return SampledAnimation.end.modify;
}

uint64_t SampledAnimation.init(frames:name:tweenMode:frameInterval:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, int a7@<W6>, char *a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  char v26 = *a4;
  uint64_t v27 = *a6;
  uint64_t v28 = a6[1];
  char v29 = *((unsigned char *)a6 + 16);
  char v30 = *a8;
  char v31 = *a14;
  v39[0] = 0;
  v39[1] = 0;
  char v40 = -1;
  v46[0] = v30;
  v43[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v39, 0, v46, v43, a15, a16 & 1, (uint64_t)v44, a11, a12, a13, a17, a18 & 1, a19, a20 & 1);
  type metadata accessor for TimelineDefinition();
  uint64_t v32 = swift_allocObject();
  long long v33 = v44[7];
  *(_OWORD *)(a9 + 152) = v44[6];
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 184) = v44[8];
  long long v34 = v44[3];
  *(_OWORD *)(a9 + 88) = v44[2];
  *(_OWORD *)(a9 + 104) = v34;
  long long v35 = v44[5];
  *(_OWORD *)(a9 + 120) = v44[4];
  *(_OWORD *)(a9 + 136) = v35;
  long long v36 = v44[1];
  *(_OWORD *)(a9 + 56) = v44[0];
  *(void *)(v32 + 16) = 0;
  LOBYTE(v39[0]) = 0;
  v46[0] = 0;
  v43[0] = 0;
  char v42 = 1;
  char v41 = 1;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v28;
  *(unsigned char *)(a9 + 32) = v29;
  *(_DWORD *)(a9 + 36) = a7;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v31;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a5;
  *(void *)(a9 + 48) = v32;
  *(void *)(a9 + 200) = v45;
  *(_OWORD *)(a9 + 72) = v36;
  *(unsigned char *)(a9 + 208) = v26;
  *(float *)(a9 + 212) = a10;
  *(unsigned char *)(a9 + 216) = v43[0];
  *(void *)(a9 + 224) = a1;
  *(void *)(a9 + 232) = 0;
  *(unsigned char *)(a9 + 240) = v42;
  *(void *)(a9 + 248) = 0;
  *(unsigned char *)(a9 + 256) = v41;
  *(void *)(a9 + 264) = 0;
  *(_WORD *)(a9 + 272) = 514;
  *(unsigned char *)(a9 + 274) = 2;
  *(void *)(a9 + 280) = 0;

  return swift_bridgeObjectRetain();
}

void *SampledAnimation.createResource()()
{
  memcpy(__dst, v0, sizeof(__dst));
  memcpy(v15, v0, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Float>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [Float]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373E0];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F374C0];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37538];
LABEL_13:
    double v6 = SampledAnimation<>.createResource()(v2, v3, v4, v5, v1);
    goto LABEL_14;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Double>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [Double]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373C0];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F37458];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37518];
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [SIMD2<Float>]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373C8];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F37478];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37520];
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [SIMD3<Float>]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373D0];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F37498];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37528];
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [SIMD4<Float>]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373D8];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F374B8];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37530];
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<simd_quatf>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    uint64_t v1 = (uint64_t *)&demangling cache variable for type metadata for [simd_quatf]?;
    uint64_t v2 = (uint64_t (*)(uint64_t))MEMORY[0x263F373E8];
    char v3 = (uint64_t (*)(uint64_t))MEMORY[0x263F374E0];
    float v4 = (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:);
    uint64_t v5 = (void (*)(void *, uint64_t, void))MEMORY[0x263F37540];
    goto LABEL_13;
  }
  memcpy(v15, __dst, sizeof(v15));
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<Transform>);
  if (swift_dynamicCast())
  {
    memcpy(v12, __src, sizeof(v12));
    outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
    memcpy(v11, __dst, sizeof(v11));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    swift_dynamicCast();
    memcpy(v13, v10, sizeof(v13));
    memcpy(v9, v10, sizeof(v9));
    double v6 = SampledAnimation<>.createResource()();
  }
  else
  {
    memcpy(v15, __dst, sizeof(v15));
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<JointTransforms>);
    if (swift_dynamicCast())
    {
      memcpy(v12, __src, sizeof(v12));
      outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
      memcpy(v11, __dst, sizeof(v11));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      swift_dynamicCast();
      memcpy(v13, v10, sizeof(v13));
      memcpy(v9, v10, sizeof(v9));
      double v6 = SampledAnimation<>.createResource()();
    }
    else
    {
      memcpy(v15, __dst, sizeof(v15));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SampledAnimation<BlendShapeWeights>);
      if ((swift_dynamicCast() & 1) == 0) {
        return 0;
      }
      memcpy(v12, __src, sizeof(v12));
      outlined release of SampledAnimation<simd_quatf>((uint64_t)v12);
      memcpy(v11, __dst, sizeof(v11));
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      swift_dynamicCast();
      memcpy(v13, v10, sizeof(v13));
      memcpy(v9, v10, sizeof(v9));
      double v6 = SampledAnimation<>.createResource()();
    }
  }
LABEL_14:
  uint64_t v7 = v6;
  outlined release of SampledAnimation<simd_quatf>((uint64_t)v13);
  return v7;
}

void *SampledAnimation<>.createResource()(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t, uint64_t), void (*a4)(void *, uint64_t, void), uint64_t *a5)
{
  memcpy(__dst, v5, sizeof(__dst));
  long long v11 = v5[1];
  long long v39 = *v5;
  long long v40 = v11;
  long long v41 = v5[2];
  uint64_t v42 = *((void *)v5 + 6);
  uint64_t v12 = __dst[28];
  if (*((void *)&v39 + 1))
  {
    uint64_t v13 = v42;
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v39);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)&v40, (uint64_t)v46, &demangling cache variable for type metadata for BindTarget?);
    outlined init with take of Transform?((uint64_t)v46, (uint64_t)v56, &demangling cache variable for type metadata for BindTarget?);
    if (v56[16] == 255)
    {
      outlined init with take of Transform?((uint64_t)&v41 + 4, (uint64_t)v45, &demangling cache variable for type metadata for Int32?);
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v57, &demangling cache variable for type metadata for Int32?);
      if (v57[4] == 1)
      {
        outlined init with take of Transform?((uint64_t)&v41 + 9, (uint64_t)v44, &demangling cache variable for type metadata for AnimationFillMode?);
        outlined init with take of Transform?((uint64_t)v44, (uint64_t)v58, &demangling cache variable for type metadata for AnimationFillMode?);
        if (v58[1] == 1)
        {
          outlined init with take of Transform?((uint64_t)&v41 + 11, (uint64_t)&v43, &demangling cache variable for type metadata for Bool?);
          outlined init with take of Transform?((uint64_t)&v43, (uint64_t)&v59, &demangling cache variable for type metadata for Bool?);
          if (v59 == 2)
          {
            outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v38, &demangling cache variable for type metadata for TweenMode?);
            outlined init with take of Transform?((uint64_t)&v38, (uint64_t)&v60, &demangling cache variable for type metadata for TweenMode?);
            if (v60 == 2)
            {
              outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v37, &demangling cache variable for type metadata for Float?);
              outlined init with take of Transform?((uint64_t)v37, (uint64_t)v61, &demangling cache variable for type metadata for Float?);
              if (v61[4] == 1 && !v12)
              {
                outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v36, &demangling cache variable for type metadata for Double?);
                outlined init with take of Transform?((uint64_t)v36, (uint64_t)v62, &demangling cache variable for type metadata for Double?);
                if (v62[8] == 1)
                {
                  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v35, &demangling cache variable for type metadata for Double?);
                  outlined init with take of Transform?((uint64_t)v35, (uint64_t)v63, &demangling cache variable for type metadata for Double?);
                  if (v63[8] == 1)
                  {
                    outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v34, &demangling cache variable for type metadata for [String]?);
                    outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v64, &demangling cache variable for type metadata for [String]?);
                    if (!v64)
                    {
                      outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v33, &demangling cache variable for type metadata for Bool?);
                      outlined init with take of Transform?((uint64_t)&v33, (uint64_t)&v65, &demangling cache variable for type metadata for Bool?);
                      if (v65 == 2)
                      {
                        outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v32, &demangling cache variable for type metadata for Bool?);
                        outlined init with take of Transform?((uint64_t)&v32, (uint64_t)&v66, &demangling cache variable for type metadata for Bool?);
                        if (v66 == 2)
                        {
                          outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v31, &demangling cache variable for type metadata for Bool?);
                          outlined init with take of Transform?((uint64_t)&v31, (uint64_t)&v67, &demangling cache variable for type metadata for Bool?);
                          if (v67 == 2)
                          {
                            outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v30, &demangling cache variable for type metadata for [String]?);
                            outlined init with take of Transform?((uint64_t)v30, (uint64_t)v68, &demangling cache variable for type metadata for [String]?);
                            if (!v68[0])
                            {
                              long long v53 = *(_OWORD *)&__dst[19];
                              long long v54 = *(_OWORD *)&__dst[21];
                              long long v55 = *(_OWORD *)&__dst[23];
                              long long v49 = *(_OWORD *)&__dst[11];
                              long long v50 = *(_OWORD *)&__dst[13];
                              long long v51 = *(_OWORD *)&__dst[15];
                              long long v52 = *(_OWORD *)&__dst[17];
                              long long v47 = *(_OWORD *)&__dst[7];
                              long long v48 = *(_OWORD *)&__dst[9];
                              if (TimelineClipProperties.isClipped.getter()
                                && (TimelineClipProperties.isModified.getter() & 1) != 0)
                              {
                                return (void *)TimelineClipProperties.createClip()();
                              }
                              else
                              {
                                return TimelineDefinition.resource.getter();
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v13 = v42;
    if (*(void *)(v42 + 16))
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v39);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v39);
    }
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v39);
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  uint64_t v14 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)a1(v14 + 32);
  swift_release();
  if (!v12)
  {
    uint64_t v17 = *(void *)(v13 + 16);
    if (v17)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t ValueCount = RETimelineDefinitionGetValueCount();
      uint64_t v19 = a2(v17);
      if (v19)
      {
        uint64_t v16 = a3(v19, ValueCount);
        goto LABEL_27;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    }
    uint64_t v16 = MEMORY[0x263F8EE78];
    goto LABEL_27;
  }
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
  uint64_t v16 = v12;
LABEL_27:
  swift_bridgeObjectRetain();
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  uint64_t v20 = *(void *)(v16 + 16);
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v12)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t v21 = v12;
LABEL_36:
      swift_bridgeObjectRetain();
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      a4(v15, v21 + 32, *(void *)(v21 + 16));
      swift_bridgeObjectRelease();
      v26._rawValue = v15;
      uint64_t v22 = specialized SampledAnimation.createResource(timelineDefinition:)(v26, a5);
      RERelease();
      return v22;
    }
    uint64_t v23 = *(void *)(v13 + 16);
    if (v23)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
      uint64_t v24 = RETimelineDefinitionGetValueCount();
      uint64_t v25 = a2(v23);
      if (v25)
      {
        uint64_t v21 = a3(v25, v24);
        goto LABEL_36;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    }
    uint64_t v21 = MEMORY[0x263F8EE78];
    goto LABEL_36;
  }
  RERelease();
  return 0;
}

void *SampledAnimation<>.createResource()()
{
  memcpy(__dst, v0, sizeof(__dst));
  long long v1 = v0[1];
  long long v37 = *v0;
  long long v38 = v1;
  long long v39 = v0[2];
  uint64_t v40 = *((void *)v0 + 6);
  if (*((void *)&v37 + 1)) {
    goto LABEL_18;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v44, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v54, &demangling cache variable for type metadata for BindTarget?);
  if (v54[16] == 255)
  {
    outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v43, &demangling cache variable for type metadata for Int32?);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)v55, &demangling cache variable for type metadata for Int32?);
    if (v55[4] == 1)
    {
      outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v42, &demangling cache variable for type metadata for AnimationFillMode?);
      outlined init with take of Transform?((uint64_t)v42, (uint64_t)v56, &demangling cache variable for type metadata for AnimationFillMode?);
      if (v56[1] == 1)
      {
        outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v41, &demangling cache variable for type metadata for Bool?);
        outlined init with take of Transform?((uint64_t)&v41, (uint64_t)&v57, &demangling cache variable for type metadata for Bool?);
        if (v57 == 2)
        {
          outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v36, &demangling cache variable for type metadata for TweenMode?);
          outlined init with take of Transform?((uint64_t)&v36, (uint64_t)&v58, &demangling cache variable for type metadata for TweenMode?);
          if (v58 == 2)
          {
            outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v35, &demangling cache variable for type metadata for Float?);
            outlined init with take of Transform?((uint64_t)v35, (uint64_t)v59, &demangling cache variable for type metadata for Float?);
            if (v59[4] == 1)
            {
              outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v34, &demangling cache variable for type metadata for [Transform]?);
              outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v60, &demangling cache variable for type metadata for [Transform]?);
              if (!v60)
              {
                outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
                outlined init with take of Transform?((uint64_t)v33, (uint64_t)v61, &demangling cache variable for type metadata for Double?);
                if (v61[8] == 1)
                {
                  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v32, &demangling cache variable for type metadata for Double?);
                  outlined init with take of Transform?((uint64_t)v32, (uint64_t)v62, &demangling cache variable for type metadata for Double?);
                  if (v62[8] == 1)
                  {
                    outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v31, &demangling cache variable for type metadata for [String]?);
                    outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?);
                    if (!v63)
                    {
                      outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v30, &demangling cache variable for type metadata for Bool?);
                      outlined init with take of Transform?((uint64_t)&v30, (uint64_t)&v64, &demangling cache variable for type metadata for Bool?);
                      if (v64 == 2)
                      {
                        outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v29, &demangling cache variable for type metadata for Bool?);
                        outlined init with take of Transform?((uint64_t)&v29, (uint64_t)&v65, &demangling cache variable for type metadata for Bool?);
                        if (v65 == 2)
                        {
                          outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v28, &demangling cache variable for type metadata for Bool?);
                          outlined init with take of Transform?((uint64_t)&v28, (uint64_t)&v66, &demangling cache variable for type metadata for Bool?);
                          if (v66 == 2)
                          {
                            outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v27, &demangling cache variable for type metadata for [String]?);
                            outlined init with take of Transform?((uint64_t)v27, (uint64_t)&v67, &demangling cache variable for type metadata for [String]?);
                            if (!v67)
                            {
                              long long v51 = *(_OWORD *)&__dst[19];
                              long long v52 = *(_OWORD *)&__dst[21];
                              long long v53 = *(_OWORD *)&__dst[23];
                              long long v47 = *(_OWORD *)&__dst[11];
                              long long v48 = *(_OWORD *)&__dst[13];
                              long long v49 = *(_OWORD *)&__dst[15];
                              long long v50 = *(_OWORD *)&__dst[17];
                              long long v45 = *(_OWORD *)&__dst[7];
                              long long v46 = *(_OWORD *)&__dst[9];
                              uint64_t v20 = __dst[25];
                              v25[6] = *(_OWORD *)&__dst[19];
                              v25[7] = *(_OWORD *)&__dst[21];
                              v25[8] = *(_OWORD *)&__dst[23];
                              v25[2] = *(_OWORD *)&__dst[11];
                              v25[3] = *(_OWORD *)&__dst[13];
                              v25[4] = *(_OWORD *)&__dst[15];
                              v25[5] = *(_OWORD *)&__dst[17];
                              v25[0] = *(_OWORD *)&__dst[7];
                              v25[1] = *(_OWORD *)&__dst[9];
                              *(void *)&v25[9] = __dst[25];
                              if (!TimelineClipProperties.isClipped.getter()) {
                                return TimelineDefinition.resource.getter();
                              }
                              v25[6] = v51;
                              v25[7] = v52;
                              v25[8] = v53;
                              v25[2] = v47;
                              v25[3] = v48;
                              v25[4] = v49;
                              v25[5] = v50;
                              v25[0] = v45;
                              v25[1] = v46;
                              *(void *)&v25[9] = v20;
                              if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
                                return TimelineDefinition.resource.getter();
                              }
                              v25[6] = v51;
                              v25[7] = v52;
                              v25[8] = v53;
                              v25[2] = v47;
                              v25[3] = v48;
                              v25[4] = v49;
                              v25[5] = v50;
                              v25[0] = v45;
                              v25[1] = v46;
                              *(void *)&v25[9] = v20;
                              return (void *)TimelineClipProperties.createClip()();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(void *)(v40 + 16))
  {
LABEL_18:
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
  }
  else
  {
    outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    RETimelineDefinitionGetName();
    String.init(cString:)();
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v37);
  outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  SampledSRTAnimation = (void *)RETimelineDefinitionCreateSampledSRTAnimation();
  swift_release();
  memcpy(v25, __dst, sizeof(v25));
  char v3 = SampledAnimation<>.frames.getter();
  int64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0, MEMORY[0x263F8EE78]);
    uint64_t v6 = 0;
    uint64_t v7 = v3 + 4;
    unint64_t v8 = v5[2];
    uint64_t v9 = 6 * v8;
    do
    {
      long long v10 = *(_OWORD *)&v7[v6];
      long long v11 = *(_OWORD *)&v7[v6 + 2];
      long long v12 = *(_OWORD *)&v7[v6 + 4];
      unint64_t v13 = v5[3];
      unint64_t v14 = v8 + 1;
      if (v8 >= v13 >> 1)
      {
        long long v23 = *(_OWORD *)&v7[v6 + 2];
        long long v24 = *(_OWORD *)&v7[v6];
        long long v22 = *(_OWORD *)&v7[v6 + 4];
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v8 + 1, 1, v5);
        long long v12 = v22;
        long long v11 = v23;
        long long v10 = v24;
        uint64_t v5 = v16;
      }
      v5[2] = v14;
      uint64_t v15 = &v5[v9 + v6];
      v15[2] = v10;
      _OWORD v15[3] = v11;
      v15[4] = v12;
      v6 += 6;
      unint64_t v8 = v14;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    RETimelineDefinitionSetSRTValues();
    swift_bridgeObjectRelease_n();
    v17._rawValue = SampledSRTAnimation;
    uint64_t v18 = specialized SampledAnimation.createResource(timelineDefinition:)(v17, &demangling cache variable for type metadata for [Transform]?);
    RERelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    RERelease();
    return 0;
  }
  return v18;
}

{
  long long *v0;
  long long v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *SampledSkeletalPoseAnimation;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  int v16;
  Swift::OpaquePointer v17;
  uint64_t v19;
  int v21;
  _OWORD v22[18];
  void __dst[36];
  unsigned char v24[8];
  unsigned char v25[8];
  unsigned char v26[16];
  unsigned char v27[16];
  unsigned char v28[8];
  unsigned char v29[7];
  char v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  char v35;
  unsigned char v36[2];
  unsigned char v37[8];
  unsigned char v38[24];
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[20];
  unsigned char v49[8];
  unsigned char v50[2];
  char v51;
  char v52;
  unsigned char v53[8];
  uint64_t v54;
  unsigned char v55[16];
  unsigned char v56[16];
  uint64_t v57;
  void v58[3];

  memcpy(__dst, v0, sizeof(__dst));
  long long v1 = v0[1];
  char v31 = *v0;
  char v32 = v1;
  char v33 = v0[2];
  long long v34 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)&v31 + 1);
  char v3 = LOBYTE(__dst[34]);
  int64_t v4 = BYTE1(__dst[34]);
  uint64_t v5 = BYTE2(__dst[34]);
  if (*((void *)&v31 + 1)) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v32, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v33 + 4, (uint64_t)v37, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v49, &demangling cache variable for type metadata for Int32?);
  if (v49[4] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v33 + 9, (uint64_t)v36, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v50, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v50[1] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v33 + 11, (uint64_t)&v35, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)&v51, &demangling cache variable for type metadata for Bool?);
  if (v51 != 2) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v30, &demangling cache variable for type metadata for TweenMode?);
  outlined init with take of Transform?((uint64_t)&v30, (uint64_t)&v52, &demangling cache variable for type metadata for TweenMode?);
  if (v52 != 2) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v29, &demangling cache variable for type metadata for Float?);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v53, &demangling cache variable for type metadata for Float?);
  if (v53[4] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v28, &demangling cache variable for type metadata for [JointTransforms]?);
  outlined init with take of Transform?((uint64_t)v28, (uint64_t)&v54, &demangling cache variable for type metadata for [JointTransforms]?);
  if (v54) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v27, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v27, (uint64_t)v55, &demangling cache variable for type metadata for Double?);
  if (v55[8] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v26, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v26, (uint64_t)v56, &demangling cache variable for type metadata for Double?);
  if (v56[8] == 1
    && (outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v25, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v25, (uint64_t)&v57, &demangling cache variable for type metadata for [String]?), !v57)&& v3 == 2&& v4 == 2&& v5 == 2&& (outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v24, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v24, (uint64_t)v58, &demangling cache variable for type metadata for [String]?),
        !v58[0]))
  {
    long long v45 = *(_OWORD *)&__dst[19];
    long long v46 = *(_OWORD *)&__dst[21];
    long long v47 = *(_OWORD *)&__dst[23];
    char v41 = *(_OWORD *)&__dst[11];
    uint64_t v42 = *(_OWORD *)&__dst[13];
    char v43 = *(_OWORD *)&__dst[15];
    char v44 = *(_OWORD *)&__dst[17];
    long long v39 = *(_OWORD *)&__dst[7];
    uint64_t v40 = *(_OWORD *)&__dst[9];
    uint64_t v19 = __dst[25];
    v22[6] = *(_OWORD *)&__dst[19];
    v22[7] = *(_OWORD *)&__dst[21];
    v22[8] = *(_OWORD *)&__dst[23];
    v22[2] = *(_OWORD *)&__dst[11];
    v22[3] = *(_OWORD *)&__dst[13];
    v22[4] = *(_OWORD *)&__dst[15];
    v22[5] = *(_OWORD *)&__dst[17];
    v22[0] = *(_OWORD *)&__dst[7];
    v22[1] = *(_OWORD *)&__dst[9];
    *(void *)&v22[9] = __dst[25];
    if (!TimelineClipProperties.isClipped.getter()) {
      return TimelineDefinition.resource.getter();
    }
    v22[6] = v45;
    v22[7] = v46;
    v22[8] = v47;
    v22[2] = v41;
    v22[3] = v42;
    v22[4] = v43;
    v22[5] = v44;
    v22[0] = v39;
    v22[1] = v40;
    *(void *)&v22[9] = v19;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
      return TimelineDefinition.resource.getter();
    }
    v22[6] = v45;
    v22[7] = v46;
    v22[8] = v47;
    v22[2] = v41;
    v22[3] = v42;
    v22[4] = v43;
    v22[5] = v44;
    v22[0] = v39;
    v22[1] = v40;
    *(void *)&v22[9] = v19;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
LABEL_16:
    memcpy(v22, __dst, sizeof(v22));
    uint64_t v6 = SampledAnimation<>.jointNames.getter();
    uint64_t v7 = v6[2];
    if (v7)
    {
      unint64_t v8 = v34;
      uint64_t v21 = v4;
      if (v2 || !*(void *)(v34 + 16))
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v31);
      }
      else
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v31);
        RETimelineDefinitionGetName();
        String.init(cString:)();
      }
      swift_bridgeObjectRetain();
      outlined release of TimelineBaseProperties((uint64_t)&v31);
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      SampledSkeletalPoseAnimation = (void *)RETimelineDefinitionCreateSampledSkeletalPoseAnimation();
      swift_release();
      RETimelineDefinitionSetSkeletalJointCount();
      long long v11 = 0;
      long long v12 = v6 + 5;
      do
      {
        String.utf8CString.getter();
        RETimelineDefinitionSetSkeletalJointName();
        swift_release();
        v12 += 2;
        ++v11;
      }
      while (v7 != v11);
      swift_bridgeObjectRelease();
      memcpy(v22, __dst, sizeof(v22));
      unint64_t v13 = *(void *)(SampledAnimation<>.frames.getter() + 16);
      RETimelineDefinitionSetSkeletalPosePoseCount();
      if (v13)
      {
        for (i = 0; i != v13; ++i)
        {
          swift_bridgeObjectRetain();
          RETimelineDefinitionSetSkeletalPoseIndexValues();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      if (v3 == 2)
      {
        uint64_t v16 = v21;
        uint64_t v15 = v5;
        if (*(void *)(v8 + 16)) {
          RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
        }
      }
      else
      {
        uint64_t v16 = v21;
        uint64_t v15 = v5;
      }
      RETimelineDefinitionSetSkeletalPoseScaleChannelMask();
      if (v16 == 2 && *(void *)(v8 + 16)) {
        RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
      }
      RETimelineDefinitionSetSkeletalPoseRotationChannelMask();
      if (v15 == 2 && *(void *)(v8 + 16)) {
        RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
      }
      RETimelineDefinitionSetSkeletalPoseTranslationChannelMask();
      v17._rawValue = SampledSkeletalPoseAnimation;
      uint64_t v9 = specialized SampledAnimation.createResource(timelineDefinition:)(v17, &demangling cache variable for type metadata for [JointTransforms]?);
      RERelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v9;
}

{
  long long *v0;
  long long v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *SampledBlendShapeWeightsAnimation;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t i;
  Swift::OpaquePointer v11;
  uint64_t v13;
  _OWORD v15[18];
  void __dst[36];
  unsigned char v17[13];
  char v18;
  char v19;
  char v20;
  unsigned char v21[8];
  unsigned char v22[16];
  unsigned char v23[16];
  unsigned char v24[8];
  unsigned char v25[7];
  char v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  char v31;
  unsigned char v32[2];
  unsigned char v33[8];
  unsigned char v34[24];
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  unsigned char v44[20];
  unsigned char v45[8];
  unsigned char v46[2];
  char v47;
  char v48;
  unsigned char v49[8];
  uint64_t v50;
  unsigned char v51[16];
  unsigned char v52[16];
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;

  memcpy(__dst, v0, sizeof(__dst));
  long long v1 = v0[1];
  uint64_t v27 = *v0;
  char v28 = v1;
  char v29 = v0[2];
  char v30 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)&v27 + 1);
  if (*((void *)&v27 + 1)) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)v34, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v34, (uint64_t)v44, &demangling cache variable for type metadata for BindTarget?);
  if (v44[16] != 255) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v29 + 4, (uint64_t)v33, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v45, &demangling cache variable for type metadata for Int32?);
  if (v45[4] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v29 + 9, (uint64_t)v32, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v32, (uint64_t)v46, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v46[1] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&v29 + 11, (uint64_t)&v31, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v31, (uint64_t)&v47, &demangling cache variable for type metadata for Bool?);
  if (v47 != 2) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[26], (uint64_t)&v26, &demangling cache variable for type metadata for TweenMode?);
  outlined init with take of Transform?((uint64_t)&v26, (uint64_t)&v48, &demangling cache variable for type metadata for TweenMode?);
  if (v48 != 2) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[26] + 4, (uint64_t)v25, &demangling cache variable for type metadata for Float?);
  outlined init with take of Transform?((uint64_t)v25, (uint64_t)v49, &demangling cache variable for type metadata for Float?);
  if (v49[4] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[28], (uint64_t)v24, &demangling cache variable for type metadata for [BlendShapeWeights]?);
  outlined init with take of Transform?((uint64_t)v24, (uint64_t)&v50, &demangling cache variable for type metadata for [BlendShapeWeights]?);
  if (v50) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[29], (uint64_t)v23, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v23, (uint64_t)v51, &demangling cache variable for type metadata for Double?);
  if (v51[8] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[31], (uint64_t)v22, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v22, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[33], (uint64_t)v21, &demangling cache variable for type metadata for [String]?);
  outlined init with take of Transform?((uint64_t)v21, (uint64_t)&v53, &demangling cache variable for type metadata for [String]?);
  if (v53) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[34], (uint64_t)&v20, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v20, (uint64_t)&v54, &demangling cache variable for type metadata for Bool?);
  if (v54 != 2) {
    goto LABEL_16;
  }
  outlined init with take of Transform?((uint64_t)&__dst[34] + 1, (uint64_t)&v19, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v19, (uint64_t)&v55, &demangling cache variable for type metadata for Bool?);
  if (v55 == 2
    && (outlined init with take of Transform?((uint64_t)&__dst[34] + 2, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?), outlined init with take of Transform?((uint64_t)&v18, (uint64_t)&v56, &demangling cache variable for type metadata for Bool?), v56 == 2)&& (outlined init with take of Transform?((uint64_t)&__dst[35], (uint64_t)v17, &demangling cache variable for type metadata for [String]?), outlined init with take of Transform?((uint64_t)v17, (uint64_t)&v57, &demangling cache variable for type metadata for [String]?), !v57))
  {
    char v41 = *(_OWORD *)&__dst[19];
    uint64_t v42 = *(_OWORD *)&__dst[21];
    char v43 = *(_OWORD *)&__dst[23];
    long long v37 = *(_OWORD *)&__dst[11];
    long long v38 = *(_OWORD *)&__dst[13];
    long long v39 = *(_OWORD *)&__dst[15];
    uint64_t v40 = *(_OWORD *)&__dst[17];
    long long v35 = *(_OWORD *)&__dst[7];
    char v36 = *(_OWORD *)&__dst[9];
    unint64_t v13 = __dst[25];
    void v15[6] = *(_OWORD *)&__dst[19];
    v15[7] = *(_OWORD *)&__dst[21];
    v15[8] = *(_OWORD *)&__dst[23];
    v15[2] = *(_OWORD *)&__dst[11];
    _OWORD v15[3] = *(_OWORD *)&__dst[13];
    v15[4] = *(_OWORD *)&__dst[15];
    v15[5] = *(_OWORD *)&__dst[17];
    v15[0] = *(_OWORD *)&__dst[7];
    v15[1] = *(_OWORD *)&__dst[9];
    *(void *)&v15[9] = __dst[25];
    if (!TimelineClipProperties.isClipped.getter()) {
      return TimelineDefinition.resource.getter();
    }
    void v15[6] = v41;
    v15[7] = v42;
    v15[8] = v43;
    v15[2] = v37;
    _OWORD v15[3] = v38;
    v15[4] = v39;
    v15[5] = v40;
    v15[0] = v35;
    v15[1] = v36;
    *(void *)&v15[9] = v13;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
      return TimelineDefinition.resource.getter();
    }
    void v15[6] = v41;
    v15[7] = v42;
    v15[8] = v43;
    v15[2] = v37;
    _OWORD v15[3] = v38;
    v15[4] = v39;
    v15[5] = v40;
    v15[0] = v35;
    v15[1] = v36;
    *(void *)&v15[9] = v13;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
LABEL_16:
    memcpy(v15, __dst, sizeof(v15));
    char v3 = SampledAnimation<>.weightNames.getter();
    int64_t v4 = v3[2];
    if (v4)
    {
      if (v2 || !*(void *)(v30 + 16))
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v27);
      }
      else
      {
        outlined retain of SampledAnimation<simd_quatf>((uint64_t)__dst);
        outlined retain of TimelineBaseProperties((uint64_t)&v27);
        RETimelineDefinitionGetName();
        String.init(cString:)();
      }
      swift_bridgeObjectRetain();
      outlined release of TimelineBaseProperties((uint64_t)&v27);
      outlined release of SampledAnimation<simd_quatf>((uint64_t)__dst);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      SampledBlendShapeWeightsAnimation = (void *)RETimelineDefinitionCreateSampledBlendShapeWeightsAnimation();
      swift_release();
      RETimelineDefinitionSetBlendShapeWeightsWeightsCount();
      uint64_t v7 = 0;
      unint64_t v8 = v3 + 5;
      do
      {
        String.utf8CString.getter();
        RETimelineDefinitionSetBlendShapeWeightsWeightName();
        swift_release();
        v8 += 2;
        ++v7;
      }
      while (v4 != v7);
      swift_bridgeObjectRelease();
      memcpy(v15, __dst, sizeof(v15));
      uint64_t v9 = *(void *)(SampledAnimation<>.frames.getter() + 16);
      RETimelineDefinitionSetBlendShapeWeightsSampleCount();
      if (v9)
      {
        for (i = 0; i != v9; ++i)
        {
          swift_bridgeObjectRetain();
          RETimelineDefinitionSetBlendShapeWeightsIndexValues();
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v11._rawValue = SampledBlendShapeWeightsAnimation;
      uint64_t v5 = specialized SampledAnimation.createResource(timelineDefinition:)(v11, &demangling cache variable for type metadata for [BlendShapeWeights]?);
      RERelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

void *specialized SampledAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1, uint64_t *a2)
{
  if (a1._rawValue)
  {
    long long v5 = v2[1];
    long long v89 = *v2;
    long long v90 = v5;
    long long v91 = v2[2];
    uint64_t v6 = *((void *)v2 + 6);
    *(void *)&long long v92 = v6;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if (*((unsigned char *)v2 + 208) == 2 && *(void *)(v6 + 16)) {
      RETimelineDefinitionGetInterpolationEnabled();
    }
    RETimelineDefinitionSetInterpolationEnabled();
    if ((*((unsigned char *)v2 + 216) & 1) != 0 && *(void *)(v6 + 16)) {
      RETimelineDefinitionGetFrameInterval();
    }
    RETimelineDefinitionSetFrameInterval();
    if (v2[15])
    {
      if (*(void *)(v6 + 16)) {
        RETimelineDefinitionGetStartTime();
      }
    }
    RETimelineDefinitionSetStartTime();
    specialized SampledAnimation.end.getter(a2);
    RETimelineDefinitionSetEndTime();
    long long v29 = *(long long *)((char *)v2 + 168);
    long long v84 = *(long long *)((char *)v2 + 152);
    long long v85 = v29;
    long long v86 = *(long long *)((char *)v2 + 184);
    uint64_t v87 = *((void *)v2 + 25);
    long long v30 = *(long long *)((char *)v2 + 104);
    long long v80 = *(long long *)((char *)v2 + 88);
    long long v81 = v30;
    long long v31 = *(long long *)((char *)v2 + 136);
    long long v82 = *(long long *)((char *)v2 + 120);
    long long v83 = v31;
    long long v32 = *(long long *)((char *)v2 + 72);
    long long v78 = *(long long *)((char *)v2 + 56);
    long long v79 = v32;
    unsigned long long v33 = *(long long *)((char *)v2 + 168);
    unsigned long long v95 = *(long long *)((char *)v2 + 152);
    unsigned long long v96 = v33;
    long long v97 = *(long long *)((char *)v2 + 184);
    uint64_t v98 = *((void *)v2 + 25);
    long long v34 = *(long long *)((char *)v2 + 104);
    long long v91 = *(long long *)((char *)v2 + 88);
    long long v92 = v34;
    long long v35 = *(long long *)((char *)v2 + 136);
    long long v93 = *(long long *)((char *)v2 + 120);
    long long v94 = v35;
    long long v36 = *(long long *)((char *)v2 + 72);
    long long v89 = *(long long *)((char *)v2 + 56);
    long long v90 = v36;
    if (TimelineClipProperties.isClipped.getter())
    {
      unint64_t v65 = *((void *)&v84 + 1);
      unint64_t v66 = v84;
      unint64_t v63 = *((void *)&v85 + 1);
      unint64_t v64 = v85;
      int v61 = DWORD1(v86);
      char v62 = v86;
      char v59 = BYTE9(v86);
      char v60 = BYTE8(v86);
      char v57 = BYTE11(v86);
      char v58 = BYTE10(v86);
      uint64_t v37 = v87;
      int v55 = HIDWORD(v82);
      char v56 = BYTE1(v83);
      char v54 = v83;
      uint64_t v53 = v82;
      char v52 = BYTE8(v82);
      uint64_t v51 = v81;
      char v50 = BYTE8(v81);
      uint64_t v49 = v80;
      char v47 = BYTE9(v80);
      char v48 = BYTE8(v80);
      uint64_t v38 = v79;
      char v39 = BYTE8(v79);
      char v40 = BYTE9(v79);
      uint64_t v41 = v78;
      char v42 = BYTE8(v78);
      char v43 = BYTE9(v78);
      outlined init with take of Transform?((uint64_t)&v83 + 8, (uint64_t)v88, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      uint64_t v44 = swift_allocObject();
      *(Swift::OpaquePointer *)(v44 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v88);
      *(void *)&long long v68 = v41;
      BYTE8(v68) = v42;
      BYTE9(v68) = v43;
      *(void *)&long long v69 = v38;
      BYTE8(v69) = v39;
      BYTE9(v69) = v40;
      *(void *)&long long v70 = v49;
      BYTE8(v70) = v48;
      BYTE9(v70) = v47;
      *(void *)&long long v71 = v51;
      BYTE8(v71) = v50;
      *(void *)&long long v72 = v53;
      BYTE8(v72) = v52;
      HIDWORD(v72) = v55;
      LOBYTE(v73) = v54;
      BYTE1(v73) = v56;
      *((void *)&v73 + 1) = v44;
      unsigned long long v74 = __PAIR128__(v65, v66);
      unsigned long long v75 = __PAIR128__(v63, v64);
      LOBYTE(v76) = v62;
      DWORD1(v76) = v61;
      BYTE8(v76) = v60;
      BYTE9(v76) = v59;
      BYTE10(v76) = v58;
      BYTE11(v76) = v57;
      uint64_t v77 = v37;
      uint64_t v98 = v37;
      unsigned long long v96 = __PAIR128__(v63, v64);
      long long v97 = v76;
      long long v89 = v68;
      long long v90 = v69;
      long long v94 = v73;
      unsigned long long v95 = __PAIR128__(v65, v66);
      long long v92 = v71;
      long long v93 = v72;
      long long v91 = v70;
      outlined retain of TimelineClipProperties((uint64_t)&v68);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)&v89, &v67);
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v68);
      outlined release of TimelineClipProperties((uint64_t)&v68);
      return (void *)v67;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    long long v46 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    return v46;
  }
  else
  {
    uint64_t v7 = *((void *)v2 + 25);
    long long v8 = *(long long *)((char *)v2 + 136);
    unsigned long long v9 = *(long long *)((char *)v2 + 168);
    unsigned long long v95 = *(long long *)((char *)v2 + 152);
    unsigned long long v96 = v9;
    long long v97 = *(long long *)((char *)v2 + 184);
    long long v10 = *(long long *)((char *)v2 + 72);
    long long v11 = *(long long *)((char *)v2 + 104);
    long long v91 = *(long long *)((char *)v2 + 88);
    long long v92 = v11;
    long long v93 = *(long long *)((char *)v2 + 120);
    long long v94 = v8;
    long long v89 = *(long long *)((char *)v2 + 56);
    long long v90 = v10;
    uint64_t v98 = v7;
    if (!TimelineClipProperties.isClipped.getter())
    {
      uint64_t v20 = *(void **)(*((void *)v2 + 6) + 16);
      if (v20)
      {
        uint64_t v21 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v21, (uint64_t)&v89);
        uint64_t v22 = *((void *)&v90 + 1);
        uint64_t v23 = v91;
        __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
        (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
        uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          uint64_t v25 = TimelineAsset;
          RETimelineDefinitionGetName();
          uint64_t v26 = String.init(cString:)();
          uint64_t v28 = v27;
          type metadata accessor for AnimationResource();
          uint64_t v20 = (void *)swift_allocObject();
          v20[2] = v25;
          v20[3] = v26;
          v20[4] = v28;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return v20;
    }
    unsigned long long v12 = *(long long *)((char *)v2 + 168);
    unsigned long long v95 = *(long long *)((char *)v2 + 152);
    unsigned long long v96 = v12;
    long long v97 = *(long long *)((char *)v2 + 184);
    long long v13 = *(long long *)((char *)v2 + 104);
    long long v91 = *(long long *)((char *)v2 + 88);
    long long v92 = v13;
    long long v14 = *(long long *)((char *)v2 + 136);
    long long v93 = *(long long *)((char *)v2 + 120);
    long long v94 = v14;
    long long v15 = *(long long *)((char *)v2 + 72);
    long long v89 = *(long long *)((char *)v2 + 56);
    long long v90 = v15;
    uint64_t v98 = v7;
    if (TimelineClipProperties.isModified.getter())
    {
      unsigned long long v16 = *(long long *)((char *)v2 + 168);
      unsigned long long v95 = *(long long *)((char *)v2 + 152);
      unsigned long long v96 = v16;
      long long v97 = *(long long *)((char *)v2 + 184);
      long long v17 = *(long long *)((char *)v2 + 104);
      long long v91 = *(long long *)((char *)v2 + 88);
      long long v92 = v17;
      long long v18 = *(long long *)((char *)v2 + 136);
      long long v93 = *(long long *)((char *)v2 + 120);
      long long v94 = v18;
      long long v19 = *(long long *)((char *)v2 + 72);
      long long v89 = *(long long *)((char *)v2 + 56);
      long long v90 = v19;
      uint64_t v98 = v7;
      return (void *)TimelineClipProperties.createClip()();
    }
    return TimelineDefinition.resource.getter();
  }
}

void *SampledAnimation.generate()()
{
  double result = SampledAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000001CLL;
    *(void *)(v1 + 8) = 0x800000022834E530;
    *(unsigned char *)(v1 + 16) = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance SampledAnimation<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)SampledAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance SampledAnimation<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance SampledAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return SampledAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance SampledAnimation<A>()
{
  return SampledAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance SampledAnimation<A>(uint64_t a1, char a2)
{
  return SampledAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance SampledAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance SampledAnimation<A>(char *a1)
{
  char v2 = *a1;
  return SampledAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance SampledAnimation<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SampledAnimation.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance SampledAnimation<A>()
{
  return SampledAnimation.generate()();
}

uint64_t SampledAnimation<>.frames.getter()
{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F374C0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F37458], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F37478], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F37498], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F374B8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  return SampledAnimation<>.frames.getter(MEMORY[0x263F374E0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t ValueCount;
  int64_t SkeletalJointCount;
  long long v5;
  long long v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  long long v12;
  long long v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  int v26;
  int v27;

  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t ValueCount = RETimelineDefinitionGetValueCount();
  SkeletalJointCount = RETimelineDefinitionGetSkeletalJointCount();
  double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount & ~(ValueCount >> 63), 0, MEMORY[0x263F8EE78]);
  if (ValueCount < 0) {
    goto LABEL_23;
  }
  uint64_t v1 = (void *)result;
  if (!ValueCount) {
    return (uint64_t)v1;
  }
  if ((SkeletalJointCount & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    while (v7 != ValueCount)
    {
      uint64_t v20 = v6;
      uint64_t v23 = v5;
      double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalJointCount, 0, MEMORY[0x263F8EE78]);
      long long v8 = (void *)result;
      if (SkeletalJointCount)
      {
        unsigned long long v9 = 0;
        long long v10 = HIDWORD(v20);
        long long v11 = HIDWORD(v23);
        do
        {
          uint64_t v26 = v11;
          uint64_t v27 = v10;
          double result = RETimelineDefinitionGetSkeletalPoseIndexJointValue();
          long long v13 = v12;
          long long v15 = v8[2];
          long long v14 = v8[3];
          if (v15 >= v14 >> 1)
          {
            uint64_t v21 = v6;
            long long v24 = v5;
            long long v19 = v12;
            double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v8);
            long long v13 = v19;
            uint64_t v6 = v21;
            long long v5 = v24;
            long long v8 = (void *)result;
          }
          ++v9;
          HIDWORD(v5) = v26;
          HIDWORD(v6) = v27;
          v8[2] = v15 + 1;
          unsigned long long v16 = &v8[6 * v15];
          v16[2] = v5;
          v16[3] = v13;
          v16[4] = v6;
          long long v10 = v27;
          long long v11 = v26;
        }
        while (SkeletalJointCount != v9);
      }
      else
      {
        uint64_t v6 = v20;
        long long v5 = v23;
      }
      long long v18 = v1[2];
      long long v17 = v1[3];
      if (v18 >= v17 >> 1)
      {
        uint64_t v22 = v6;
        uint64_t v25 = v5;
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v1);
        uint64_t v6 = v22;
        long long v5 = v25;
        uint64_t v1 = (void *)result;
      }
      ++v7;
      v1[2] = v18 + 1;
      v1[v18 + 4] = v8;
      if (v7 == ValueCount) {
        return (uint64_t)v1;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  uint64_t result;
  uint64_t ValueCount;
  int64_t BlendShapeWeightsWeightsCount;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v1;
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t ValueCount = RETimelineDefinitionGetValueCount();
  BlendShapeWeightsWeightsCount = RETimelineDefinitionGetBlendShapeWeightsWeightsCount();
  double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount & ~(ValueCount >> 63), 0, MEMORY[0x263F8EE78]);
  if (ValueCount < 0) {
    goto LABEL_21;
  }
  uint64_t v1 = (void *)result;
  if (!ValueCount) {
    return (uint64_t)v1;
  }
  if ((BlendShapeWeightsWeightsCount & 0x8000000000000000) == 0)
  {
    long long v5 = 0;
    uint64_t v6 = (char *)MEMORY[0x263F8EE78];
    while (v5 != ValueCount)
    {
      double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsWeightsCount, 0, v6);
      uint64_t v7 = result;
      if (BlendShapeWeightsWeightsCount)
      {
        for (i = 0; i != BlendShapeWeightsWeightsCount; ++i)
        {
          double result = RETimelineDefinitionGetBlendShapeWeightsIndexWeightValue();
          long long v10 = v9;
          unsigned long long v12 = *(void *)(v7 + 16);
          long long v11 = *(void *)(v7 + 24);
          if (v12 >= v11 >> 1)
          {
            double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, (char *)v7);
            uint64_t v7 = result;
          }
          *(void *)(v7 + 16) = v12 + 1;
          *(_DWORD *)(v7 + 4 * v12 + 32) = v10;
        }
      }
      long long v14 = v1[2];
      long long v13 = v1[3];
      if (v14 >= v13 >> 1)
      {
        double result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v1);
        uint64_t v1 = (void *)result;
      }
      ++v5;
      v1[2] = v14 + 1;
      v1[v14 + 4] = v7;
      if (v5 == ValueCount) {
        return (uint64_t)v1;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*SampledAnimation<>.frames.modify(uint64_t *a1))()
{
  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (FloatValues = (char *)RETimelineDefinitionGetFloatValues()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(FloatValues, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *DoubleValues;

  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (DoubleValues = (char *)RETimelineDefinitionGetDoubleValues()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(DoubleValues, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float2Values;

  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (Float2Values = (char *)RETimelineDefinitionGetFloat2Values()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float2Values, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float3Values;

  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (Float3Values = (char *)RETimelineDefinitionGetFloat3Values()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float3Values, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *Float4Values;

  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (Float4Values = (char *)RETimelineDefinitionGetFloat4Values()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(Float4Values, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t ValueCount;
  char *QuaternionValues;

  a1[1] = v1;
  if (*(void *)(v1 + 224))
  {
    uint64_t v3 = *(void *)(v1 + 224);
  }
  else if (*(void *)(*(void *)(v1 + 48) + 16) {
         && (uint64_t ValueCount = RETimelineDefinitionGetValueCount(),
  }
             (QuaternionValues = (char *)RETimelineDefinitionGetQuaternionValues()) != 0))
  {
    uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(QuaternionValues, ValueCount);
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return SampledAnimation<>.frames.modify;
}

{
  const void *v1;
  unsigned char v4[288];

  a1[1] = (uint64_t)v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

{
  const void *v1;
  unsigned char v4[288];

  a1[1] = (uint64_t)v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

uint64_t key path getter for SampledAnimation<>.frames : SampledAnimation<Float>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t (*a3)(uint64_t, uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  memcpy(v13, __src, sizeof(v13));
  uint64_t v7 = v13[28];
  if (!v13[28])
  {
    uint64_t v9 = *(void *)(v13[6] + 16);
    if (v9)
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
      uint64_t ValueCount = RETimelineDefinitionGetValueCount();
      uint64_t v11 = a2(v9);
      if (v11)
      {
        uint64_t v8 = a3(v11, ValueCount);
        goto LABEL_8;
      }
    }
    else
    {
      outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
    }
    uint64_t v8 = MEMORY[0x263F8EE78];
    goto LABEL_8;
  }
  outlined retain of SampledAnimation<simd_quatf>((uint64_t)v13);
  uint64_t v8 = v7;
LABEL_8:
  swift_bridgeObjectRetain();
  uint64_t result = outlined release of SampledAnimation<simd_quatf>((uint64_t)v13);
  *a4 = v8;
  return result;
}

uint64_t SampledAnimation<>.frames.getter(uint64_t (*a1)(uint64_t), uint64_t (*a2)(uint64_t, uint64_t))
{
  if (*(void *)(v2 + 224))
  {
    uint64_t v3 = *(void *)(v2 + 224);
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(v2 + 48) + 16);
    if (v4 && (ValueCount = RETimelineDefinitionGetValueCount(), (uint64_t v8 = a1(v4)) != 0)) {
      uint64_t v3 = a2(v8, ValueCount);
    }
    else {
      uint64_t v3 = MEMORY[0x263F8EE78];
    }
  }
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SampledAnimation<>.frames.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 224) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 224) = v2;
  }
  return result;
}

void *SampledAnimation<>.frames.getter()
{
  uint64_t v1 = *(void **)(v0 + 224);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  int64_t ValueCount = RETimelineDefinitionGetValueCount();
  uint64_t SRTValues = RETimelineDefinitionGetSRTValues();
  if (!SRTValues || ValueCount < 1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  long long v5 = (char *)SRTValues;
  uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ValueCount, 0, MEMORY[0x263F8EE78]);
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5, ValueCount);
  if ((unint64_t)(ValueCount - 1) >= *(void *)(v6 + 16))
  {
    __break(1u);
  }
  else
  {
    long long v5 = (char *)v6;
    if (one-time initialization token for identity == -1) {
      goto LABEL_12;
    }
  }
  swift_once();
LABEL_12:
  unint64_t v7 = 0;
  uint64_t v8 = v5 + 32;
  unint64_t v9 = v1[2];
  uint64_t v10 = 6 * v9;
  do
  {
    long long v11 = *(_OWORD *)&v8[v7];
    long long v12 = *(_OWORD *)&v8[v7 + 16];
    long long v13 = *(_OWORD *)&v8[v7 + 32];
    unint64_t v14 = v1[3];
    unint64_t v15 = v9 + 1;
    if (v9 >= v14 >> 1)
    {
      long long v20 = *(_OWORD *)&v8[v7 + 16];
      long long v21 = *(_OWORD *)&v8[v7];
      long long v19 = *(_OWORD *)&v8[v7 + 32];
      long long v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v9 + 1, 1, v1);
      long long v13 = v19;
      long long v12 = v20;
      long long v11 = v21;
      uint64_t v1 = v17;
    }
    v1[2] = v15;
    unsigned long long v16 = &v1[v10 + v7 / 8];
    v16[2] = v11;
    v16[3] = v12;
    v16[4] = v13;
    v7 += 48;
    unint64_t v9 = v15;
    --ValueCount;
  }
  while (ValueCount);
  swift_release();
  return v1;
}

uint64_t (*SampledAnimation<>.frames.modify(void *a1))()
{
  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.frames.getter();
  return SampledAnimation<>.frames.modify;
}

uint64_t SampledAnimation<>.init(jointNames:frames:name:tweenMode:frameInterval:isAdditive:isScaleAnimated:isRotationAnimated:isTranslationAnimated:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char a14, uint64_t *a15, int a16, char *a17, char *a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  char v29 = *a5;
  uint64_t v30 = *a15;
  uint64_t v31 = a15[1];
  char v32 = *((unsigned char *)a15 + 16);
  char v33 = *a17;
  char v34 = *a18;
  v45[0] = 0;
  v45[1] = 0;
  char v46 = -1;
  v52[0] = v33;
  v49[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a3, a4, v45, 0, v52, v49, a19, a20 & 1, (uint64_t)v50, a11, a12, a13, a21, a22 & 1, a23, a24 & 1);
  type metadata accessor for TimelineDefinition();
  uint64_t v35 = swift_allocObject();
  long long v36 = v50[7];
  *(_OWORD *)(a9 + 152) = v50[6];
  *(_OWORD *)(a9 + 168) = v36;
  *(_OWORD *)(a9 + 184) = v50[8];
  long long v37 = v50[3];
  *(_OWORD *)(a9 + 88) = v50[2];
  *(_OWORD *)(a9 + 104) = v37;
  long long v38 = v50[5];
  *(_OWORD *)(a9 + 120) = v50[4];
  *(_OWORD *)(a9 + 136) = v38;
  long long v39 = v50[1];
  *(_OWORD *)(a9 + 56) = v50[0];
  *(void *)(v35 + 16) = 0;
  LOBYTE(v45[0]) = 0;
  v52[0] = 0;
  v49[0] = 0;
  char v48 = 1;
  char v47 = 1;
  *(void *)a9 = a3;
  *(void *)(a9 + 8) = a4;
  *(void *)(a9 + 16) = v30;
  *(void *)(a9 + 24) = v31;
  *(unsigned char *)(a9 + 32) = v32;
  *(_DWORD *)(a9 + 36) = a16;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v34;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a6;
  *(void *)(a9 + 48) = v35;
  *(void *)(a9 + 200) = v51;
  *(_OWORD *)(a9 + 72) = v39;
  *(unsigned char *)(a9 + 208) = v29;
  *(float *)(a9 + 212) = a10;
  *(unsigned char *)(a9 + 216) = v49[0];
  *(void *)(a9 + 224) = a2;
  *(void *)(a9 + 232) = 0;
  *(unsigned char *)(a9 + 240) = v48;
  *(void *)(a9 + 248) = 0;
  *(unsigned char *)(a9 + 256) = v47;
  *(void *)(a9 + 264) = a1;
  *(unsigned char *)(a9 + 272) = a7;
  *(unsigned char *)(a9 + 273) = a8;
  *(unsigned char *)(a9 + 274) = a14;
  *(void *)(a9 + 280) = 0;

  return swift_bridgeObjectRetain();
}

uint64_t SampledAnimation<>.isScaleAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 272);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 48) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
  }
  return 1;
}

uint64_t SampledAnimation<>.isScaleAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 272) = result;
  return result;
}

unsigned char *(*SampledAnimation<>.isScaleAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 272);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      char SkeletalPoseScaleChannelMask = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    }
    else {
      char SkeletalPoseScaleChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseScaleChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseScaleChannelMask;
  return SampledAnimation<>.isScaleAnimated.modify;
}

unsigned char *SampledAnimation<>.isScaleAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 272) = result[8];
  return result;
}

uint64_t SampledAnimation<>.isRotationAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 273);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 48) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
  }
  return 1;
}

uint64_t SampledAnimation<>.isRotationAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 273) = result;
  return result;
}

unsigned char *(*SampledAnimation<>.isRotationAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 273);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      char SkeletalPoseRotationChannelMask = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    }
    else {
      char SkeletalPoseRotationChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseRotationChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseRotationChannelMask;
  return SampledAnimation<>.isRotationAnimated.modify;
}

unsigned char *SampledAnimation<>.isRotationAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 273) = result[8];
  return result;
}

uint64_t SampledAnimation<>.isTranslationAnimated.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 274);
  if (v1 != 2) {
    return v1 & 1;
  }
  if (*(void *)(*(void *)(v0 + 48) + 16)) {
    return RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
  }
  return 1;
}

uint64_t SampledAnimation<>.isTranslationAnimated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 274) = result;
  return result;
}

unsigned char *(*SampledAnimation<>.isTranslationAnimated.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  int v3 = *(unsigned __int8 *)(v1 + 274);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(v1 + 48) + 16)) {
      char SkeletalPoseTranslationChannelMask = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    }
    else {
      char SkeletalPoseTranslationChannelMask = 1;
    }
  }
  else
  {
    char SkeletalPoseTranslationChannelMask = v3 & 1;
  }
  *(unsigned char *)(a1 + 8) = SkeletalPoseTranslationChannelMask;
  return SampledAnimation<>.isTranslationAnimated.modify;
}

unsigned char *SampledAnimation<>.isTranslationAnimated.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 274) = result[8];
  return result;
}

uint64_t SampledAnimation<>.frames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 224) = a1;
  return result;
}

void *SampledAnimation<>.jointNames.getter()
{
  uint64_t v1 = *(void **)(v0 + 264);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t SkeletalJointCount = RETimelineDefinitionGetSkeletalJointCount();
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalJointCount & ~(SkeletalJointCount >> 63), 0, MEMORY[0x263F8EE78]);
  if ((SkeletalJointCount & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (SkeletalJointCount)
    {
      for (uint64_t i = 0; i != SkeletalJointCount; ++i)
      {
        if (RETimelineDefinitionGetSkeletalJointName())
        {
          uint64_t v5 = String.init(cString:)();
          unint64_t v7 = v6;
          unint64_t v9 = v1[2];
          unint64_t v8 = v1[3];
          if (v9 >= v8 >> 1) {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v1);
          }
          v1[2] = v9 + 1;
          uint64_t v10 = &v1[2 * v9];
          v10[4] = v5;
          long long v11 = v10 + 4;
        }
        else
        {
          unint64_t v13 = v1[2];
          unint64_t v12 = v1[3];
          if (v13 >= v12 >> 1) {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v1);
          }
          v1[2] = v13 + 1;
          unint64_t v14 = &v1[2 * v13];
          _OWORD v14[4] = 0;
          long long v11 = v14 + 4;
          unint64_t v7 = 0xE000000000000000;
        }
        v11[1] = v7;
      }
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t SampledAnimation<>.jointNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 264) = a1;
  return result;
}

uint64_t (*SampledAnimation<>.jointNames.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.jointNames.getter();
  return SampledAnimation<>.jointNames.modify;
}

uint64_t SampledAnimation<>.jointNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 264) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 264) = v2;
  }
  return result;
}

uint64_t SampledAnimation<>.init(weightNames:frames:name:tweenMode:frameInterval:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, char a6@<W5>, uint64_t *a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, float a10@<S0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, char *a14, char *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  char v27 = *a5;
  uint64_t v28 = *a7;
  uint64_t v29 = a7[1];
  char v30 = *((unsigned char *)a7 + 16);
  char v31 = *a14;
  char v32 = *a15;
  v41[0] = 0;
  v41[1] = 0;
  char v42 = -1;
  v48[0] = v31;
  v45[0] = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a3, a4, v41, 0, v48, v45, a16, a17 & 1, (uint64_t)v46, a11, a12, a13, a18, a19 & 1, a20, a21 & 1);
  type metadata accessor for TimelineDefinition();
  uint64_t v33 = swift_allocObject();
  long long v34 = v46[7];
  *(_OWORD *)(a9 + 152) = v46[6];
  *(_OWORD *)(a9 + 168) = v34;
  *(_OWORD *)(a9 + 184) = v46[8];
  long long v35 = v46[3];
  *(_OWORD *)(a9 + 88) = v46[2];
  *(_OWORD *)(a9 + 104) = v35;
  long long v36 = v46[5];
  *(_OWORD *)(a9 + 120) = v46[4];
  *(_OWORD *)(a9 + 136) = v36;
  long long v37 = v46[1];
  *(_OWORD *)(a9 + 56) = v46[0];
  *(void *)(v33 + 16) = 0;
  LOBYTE(v41[0]) = 0;
  v48[0] = 0;
  v45[0] = 0;
  char v44 = 1;
  char v43 = 1;
  *(void *)a9 = a3;
  *(void *)(a9 + 8) = a4;
  *(void *)(a9 + 16) = v28;
  *(void *)(a9 + 24) = v29;
  *(unsigned char *)(a9 + 32) = v30;
  *(_DWORD *)(a9 + 36) = a8;
  *(unsigned char *)(a9 + 40) = 0;
  *(unsigned char *)(a9 + 41) = v32;
  *(unsigned char *)(a9 + 42) = 0;
  *(unsigned char *)(a9 + 43) = a6;
  *(void *)(a9 + 48) = v33;
  *(void *)(a9 + 200) = v47;
  *(_OWORD *)(a9 + 72) = v37;
  *(unsigned char *)(a9 + 208) = v27;
  *(float *)(a9 + 212) = a10;
  *(unsigned char *)(a9 + 216) = v45[0];
  *(void *)(a9 + 224) = a2;
  *(void *)(a9 + 232) = 0;
  *(unsigned char *)(a9 + 240) = v44;
  *(void *)(a9 + 248) = 0;
  *(unsigned char *)(a9 + 256) = v43;
  *(void *)(a9 + 264) = 0;
  *(_WORD *)(a9 + 272) = 514;
  *(unsigned char *)(a9 + 274) = 2;
  *(void *)(a9 + 280) = a1;

  return swift_bridgeObjectRetain();
}

void *SampledAnimation<>.weightNames.getter()
{
  uint64_t v1 = *(void **)(v0 + 280);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(void *)(*(void *)(v0 + 48) + 16)) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t BlendShapeWeightsWeightsCount = RETimelineDefinitionGetBlendShapeWeightsWeightsCount();
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsWeightsCount & ~(BlendShapeWeightsWeightsCount >> 63), 0, MEMORY[0x263F8EE78]);
  if ((BlendShapeWeightsWeightsCount & 0x8000000000000000) == 0)
  {
    uint64_t v1 = result;
    if (BlendShapeWeightsWeightsCount)
    {
      for (uint64_t i = 0; i != BlendShapeWeightsWeightsCount; ++i)
      {
        if (RETimelineDefinitionGetBlendShapeWeightsWeightName())
        {
          uint64_t v5 = String.init(cString:)();
          unint64_t v7 = v6;
          unint64_t v9 = v1[2];
          unint64_t v8 = v1[3];
          if (v9 >= v8 >> 1) {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v1);
          }
          v1[2] = v9 + 1;
          uint64_t v10 = &v1[2 * v9];
          v10[4] = v5;
          long long v11 = v10 + 4;
        }
        else
        {
          unint64_t v13 = v1[2];
          unint64_t v12 = v1[3];
          if (v13 >= v12 >> 1) {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v1);
          }
          v1[2] = v13 + 1;
          unint64_t v14 = &v1[2 * v13];
          _OWORD v14[4] = 0;
          long long v11 = v14 + 4;
          unint64_t v7 = 0xE000000000000000;
        }
        v11[1] = v7;
      }
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t SampledAnimation<>.weightNames.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 280) = a1;
  return result;
}

uint64_t (*SampledAnimation<>.weightNames.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = SampledAnimation<>.weightNames.getter();
  return FromToByAnimation<>.jointNames.modify;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for SIMD3<Float>);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for SIMD2<Float>);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    type metadata accessor for USKNode();
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TweenMode and conformance TweenMode()
{
  unint64_t result = lazy protocol witness table cache variable for type TweenMode and conformance TweenMode;
  if (!lazy protocol witness table cache variable for type TweenMode and conformance TweenMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TweenMode and conformance TweenMode);
  }
  return result;
}

uint64_t sub_227FDFD64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SampledAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_227FDFD94()
{
  return 16;
}

__n128 sub_227FDFDA0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFDAC@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = SampledAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227FDFDD8(unsigned int *a1)
{
  return SampledAnimation.blendLayer.setter(*a1);
}

uint64_t sub_227FDFE00()
{
  return 16;
}

__n128 sub_227FDFE0C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFE20()
{
  return 16;
}

__n128 sub_227FDFE2C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFE38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SampledAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_227FDFE74(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return SampledAnimation.fillMode.setter(&v2);
}

uint64_t sub_227FDFEAC()
{
  return 16;
}

__n128 sub_227FDFEB8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFEC4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SampledAnimation.additive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_227FDFEF4(unsigned __int8 *a1)
{
  return SampledAnimation.additive.setter(*a1);
}

uint64_t sub_227FDFF1C()
{
  return 16;
}

__n128 sub_227FDFF28(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFF34@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SampledAnimation.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FDFF68(uint64_t a1)
{
  return SampledAnimation.trimStart.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227FDFF98()
{
  return 16;
}

__n128 sub_227FDFFA4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FDFFB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SampledAnimation.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FDFFE4(uint64_t a1)
{
  return SampledAnimation.trimEnd.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227FE0014()
{
  return 16;
}

__n128 sub_227FE0020(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FE002C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SampledAnimation.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_227FE0060(uint64_t a1)
{
  return SampledAnimation.trimDuration.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_227FE0090()
{
  return 16;
}

__n128 sub_227FE009C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE00A8(double *a1@<X8>)
{
  *a1 = SampledAnimation.offset.getter();
}

void sub_227FE00D4(double *a1)
{
}

uint64_t sub_227FE00FC()
{
  return 16;
}

__n128 sub_227FE0108(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE0114(double *a1@<X8>)
{
  *a1 = SampledAnimation.delay.getter();
}

void sub_227FE0140(double *a1)
{
}

uint64_t sub_227FE0168()
{
  return 16;
}

__n128 sub_227FE0174(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE0180(float *a1@<X8>)
{
  *a1 = SampledAnimation.speed.getter();
}

void sub_227FE01AC(float *a1)
{
}

uint64_t sub_227FE01D4()
{
  return 16;
}

__n128 sub_227FE01E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE01EC(unsigned char *a1@<X8>)
{
  SampledAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_227FE0228(char *a1)
{
  char v2 = *a1;
  return SampledAnimation.repeatMode.setter(&v2);
}

uint64_t sub_227FE0260()
{
  return 16;
}

__n128 sub_227FE026C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FE0278@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SampledAnimation.tweenMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned char *sub_227FE02B4(char *a1)
{
  char v2 = *a1;
  return SampledAnimation.tweenMode.setter(&v2);
}

uint64_t sub_227FE02EC()
{
  return 16;
}

__n128 sub_227FE02F8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE0304(float *a1@<X8>)
{
  *a1 = SampledAnimation.frameInterval.getter();
}

void sub_227FE0330(float *a1)
{
}

uint64_t sub_227FE0358()
{
  return 16;
}

__n128 sub_227FE0364(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE0370(double *a1@<X8>)
{
  *a1 = SampledAnimation.start.getter();
}

void sub_227FE039C(double *a1)
{
}

uint64_t sub_227FE03C4()
{
  return 16;
}

__n128 sub_227FE03D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE03DC(double *a1@<X8>)
{
}

void sub_227FE03F4(double *a1)
{
}

uint64_t sub_227FE041C()
{
  return 16;
}

__n128 sub_227FE0428(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_227FE0434(double *a1@<X8>)
{
}

void keypath_get_66Tm(double (*a1)(uint64_t)@<X3>, double *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SampledAnimation();
  *a2 = a1(v4);
}

void sub_227FE0498(double *a1)
{
}

uint64_t sub_227FE04C0()
{
  return 16;
}

__n128 sub_227FE04CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_227FE04D8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F374C0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE051C()
{
  return 0;
}

uint64_t sub_227FE052C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F37458], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE0570()
{
  return 0;
}

uint64_t sub_227FE0580@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F37478], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE05C4()
{
  return 0;
}

uint64_t sub_227FE05D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F37498], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE0618()
{
  return 0;
}

uint64_t sub_227FE0628@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F374B8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE066C()
{
  return 0;
}

uint64_t sub_227FE067C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for SampledAnimation<>.frames : SampledAnimation<Float>(a1, MEMORY[0x263F374E0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), a2);
}

uint64_t sub_227FE06C0()
{
  return 0;
}

void *sub_227FE06D0@<X0>(void *a1@<X8>)
{
  __n128 result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227FE0700()
{
  return 0;
}

uint64_t sub_227FE0710@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 272);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 48) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FE0760(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 272) = *result;
  return result;
}

uint64_t sub_227FE076C()
{
  return 0;
}

uint64_t sub_227FE077C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 273);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 48) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FE07CC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 273) = *result;
  return result;
}

uint64_t sub_227FE07D8()
{
  return 0;
}

uint64_t sub_227FE07E8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(a1 + 274);
  if (v3 == 2)
  {
    if (*(void *)(*(void *)(a1 + 48) + 16)) {
      uint64_t result = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    }
    else {
      uint64_t result = 1;
    }
  }
  else
  {
    uint64_t result = v3 & 1;
  }
  *a2 = result;
  return result;
}

unsigned char *sub_227FE0838(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 274) = *result;
  return result;
}

uint64_t sub_227FE0844()
{
  return 0;
}

uint64_t sub_227FE0854@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227FE0884()
{
  return 0;
}

void *sub_227FE0894@<X0>(void *a1@<X8>)
{
  uint64_t result = SampledAnimation<>.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227FE08C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 264) = v3;
  return result;
}

uint64_t sub_227FE0904()
{
  return 0;
}

uint64_t sub_227FE0914@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SampledAnimation<>.frames.getter();
  *a1 = result;
  return result;
}

uint64_t keypath_set_75Tm(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 224) = v3;
  return result;
}

uint64_t sub_227FE0988()
{
  return 0;
}

void *sub_227FE0998@<X0>(void *a1@<X8>)
{
  uint64_t result = SampledAnimation<>.weightNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_227FE09C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 280) = v3;
  return result;
}

uint64_t sub_227FE0A08()
{
  return 0;
}

unsigned char *storeEnumTagSinglePayload for TweenMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FE0AE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TweenMode()
{
  return &type metadata for TweenMode;
}

uint64_t destroy for SampledAnimation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 16), *(void *)(a1 + 24), v2);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 168), *(void *)(a1 + 176), v3);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SampledAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  int v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 168);
    uint64_t v12 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(void *)(a1 + 168) = v11;
    *(void *)(a1 + 176) = v12;
    *(unsigned char *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v13;
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_WORD *)(a1 + 272) = *(_WORD *)(a2 + 272);
  *(unsigned char *)(a1 + 274) = *(unsigned char *)(a2 + 274);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SampledAnimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (long long *)(a1 + 16);
  int v5 = (long long *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      long long v15 = *v5;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *uint64_t v4 = v15;
    }
    else
    {
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v13 = *(void *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(unsigned char *)(a2 + 32));
      *(void *)(a1 + 16) = v12;
      *(void *)(a1 + 24) = v13;
      *(unsigned char *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    char v14 = *(unsigned char *)(a2 + 32);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 32) = v14;
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(unsigned char *)(a2 + 32));
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v8;
    unsigned __int8 v11 = *(unsigned char *)(a1 + 32);
    *(unsigned char *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  int v16 = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  uint64_t v17 = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 56) = v17;
  uint64_t v18 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v18;
  uint64_t v19 = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(void *)(a1 + 88) = v19;
  uint64_t v20 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v20;
  uint64_t v21 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v21;
  LODWORD(v21) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(unsigned char *)(a1 + 137) = *(unsigned char *)(a2 + 137);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = (long long *)(a1 + 168);
  uint64_t v23 = (long long *)(a2 + 168);
  int v24 = *(unsigned __int8 *)(a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      long long v33 = *v23;
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *uint64_t v22 = v33;
    }
    else
    {
      uint64_t v30 = *(void *)(a2 + 168);
      uint64_t v31 = *(void *)(a2 + 176);
      outlined copy of BindTarget(v30, v31, *(unsigned char *)(a2 + 184));
      *(void *)(a1 + 168) = v30;
      *(void *)(a1 + 176) = v31;
      *(unsigned char *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    char v32 = *(unsigned char *)(a2 + 184);
    *uint64_t v22 = *v23;
    *(unsigned char *)(a1 + 184) = v32;
  }
  else
  {
    uint64_t v25 = *(void *)(a2 + 168);
    uint64_t v26 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v25, v26, *(unsigned char *)(a2 + 184));
    uint64_t v27 = *(void *)(a1 + 168);
    uint64_t v28 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v25;
    *(void *)(a1 + 176) = v26;
    unsigned __int8 v29 = *(unsigned char *)(a1 + 184);
    *(unsigned char *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  int v34 = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  int v35 = *(_DWORD *)(a2 + 212);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_DWORD *)(a1 + 212) = v35;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v36;
  LOBYTE(v36) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = v36;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(unsigned char *)(a1 + 273) = *(unsigned char *)(a2 + 273);
  *(unsigned char *)(a1 + 274) = *(unsigned char *)(a2 + 274);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t assignWithTake for SampledAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  int v5 = (_OWORD *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 32);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *v5;
      *(unsigned char *)(a1 + 32) = v7;
      outlined consume of BindTarget(v8, v9, v6);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *v5;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 43);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (_OWORD *)(a2 + 168);
  int v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    goto LABEL_11;
  }
  int v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(unsigned char *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(_WORD *)(a1 + 273) = *(_WORD *)(a2 + 273);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SampledAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SampledAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for SampledAnimation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of SampledAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of SampledAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v5 = *(void *)(a1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(a1 + 32);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 184);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t type metadata accessor for USKNode()
{
  unint64_t result = lazy cache variable for type metadata for USKNode;
  if (!lazy cache variable for type metadata for USKNode)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USKNode);
  }
  return result;
}

uint64_t specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    specialized RawRepresentable<>.hash(into:)();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE90000000000006ELL;
        unint64_t v10 = 0x6F6974616D696E61;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xE500000000000000;
            uint64_t v11 = 1768191329;
            goto LABEL_14;
          case 2:
            unint64_t v10 = 0x6D6E6F7269766E65;
            unint64_t v9 = 0xEB00000000746E65;
            break;
          case 3:
            unint64_t v10 = 0x4D6E49746C697562;
            unint64_t v9 = 0xEF6C616972657461;
            break;
          case 4:
            unint64_t v9 = 0x800000022834DC30;
            unint64_t v10 = 0xD000000000000013;
            break;
          case 5:
            unint64_t v9 = 0xE400000000000000;
            unint64_t v10 = 1752393069;
            break;
          case 6:
            unint64_t v9 = 0xE700000000000000;
            unint64_t v10 = 0x73636973796870;
            break;
          case 7:
            unint64_t v9 = 0xE700000000000000;
            unint64_t v10 = 0x65727574786574;
            break;
          case 8:
            unint64_t v10 = 0x6F4C797469746E65;
            unint64_t v9 = 0xEA00000000006461;
            break;
          case 9:
            unint64_t v9 = 0xE500000000000000;
            uint64_t v11 = 1701079414;
LABEL_14:
            unint64_t v10 = v11 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
            break;
          default:
            break;
        }
        uint64_t v12 = 0x6F6974616D696E61;
        unint64_t v13 = 0xE90000000000006ELL;
        switch(v8)
        {
          case 1:
            unint64_t v13 = 0xE500000000000000;
            uint64_t v14 = 1768191329;
            goto LABEL_36;
          case 2:
            unint64_t v13 = 0xEB00000000746E65;
            if (v10 != 0x6D6E6F7269766E65) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 3:
            unint64_t v13 = 0xEF6C616972657461;
            if (v10 != 0x4D6E49746C697562) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 4:
            unint64_t v13 = 0x800000022834DC30;
            if (v10 != 0xD000000000000013) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 5:
            unint64_t v13 = 0xE400000000000000;
            if (v10 != 1752393069) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 6:
            unint64_t v13 = 0xE700000000000000;
            if (v10 != 0x73636973796870) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 7:
            unint64_t v13 = 0xE700000000000000;
            if (v10 != 0x65727574786574) {
              goto LABEL_32;
            }
            goto LABEL_31;
          case 8:
            uint64_t v12 = 0x6F4C797469746E65;
            unint64_t v13 = 0xEA00000000006461;
            goto LABEL_30;
          case 9:
            unint64_t v13 = 0xE500000000000000;
            uint64_t v14 = 1701079414;
LABEL_36:
            if (v10 != (v14 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000)) {
              goto LABEL_32;
            }
            goto LABEL_31;
          default:
LABEL_30:
            if (v10 != v12) {
              goto LABEL_32;
            }
LABEL_31:
            if (v9 == v13)
            {
              swift_bridgeObjectRelease_n();
              char v15 = 1;
              return v15 & 1;
            }
LABEL_32:
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v15) {
              return v15 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v15 & 1;
            }
            break;
        }
      }
    }
  }
  char v15 = 0;
  return v15 & 1;
}

BOOL specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_retain();
    char v4 = __CocoaSet.contains(_:)();
    swift_release();
    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Swift::UInt v6 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 48);
  if (*(void *)(*(void *)(v11 + 8 * v9) + 16) == v6) {
    return 1;
  }
  uint64_t v12 = ~v8;
  unint64_t v13 = (v9 + 1) & v12;
  if (((*(void *)(v10 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 8 * v13) + 16);
    BOOL result = v14 == v6;
    if (v14 == v6) {
      break;
    }
    unint64_t v13 = (v13 + 1) & v12;
  }
  while (((*(void *)(v10 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  char v4 = static Hasher._hash(seed:_:)();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  Swift::UInt v6 = v4 & ~v5;
  Swift::Int v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  uint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    uint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(unsigned int a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x22A68A330](*(void *)(a2 + 40), a1, 4);
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    int v12 = *(_DWORD *)(v8 + 4 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

RealityFoundation::StateMachineGraph __swiftcall StateMachineGraph.init(initialState:states:transitions:)(Swift::String initialState, Swift::OpaquePointer states, Swift::OpaquePointer transitions)
{
  object = initialState._object;
  uint64_t countAndFlagsBits = initialState._countAndFlagsBits;
  uint64_t v8 = v3;
  if (!initialState._countAndFlagsBits && initialState._object == (void *)0xE000000000000000
    || (uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), (v9 & 1) != 0))
  {
    uint64_t v9 = swift_bridgeObjectRelease();
    if (*((void *)states._rawValue + 2))
    {
      uint64_t countAndFlagsBits = *((void *)states._rawValue + 4);
      object = (void *)*((void *)states._rawValue + 5);
      uint64_t v9 = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
  }
  v8->_rawValue = (void *)countAndFlagsBits;
  v8[1]._rawValue = object;
  v8[2]._rawValue = states._rawValue;
  v8[3]._rawValue = transitions._rawValue;
  result.transitions._rawValue = v12;
  result.states._rawValue = v11;
  result.initialState._object = v10;
  result.initialState._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t static StateMachineStatesBuilder.buildBlock()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t static StateMachineTransitionsBuilder.buildBlock()()
{
  return MEMORY[0x263F8EE78];
}

uint64_t StateMachineGraph.init(initialState:states:transitions:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X4>, void *a5@<X8>)
{
  uint64_t v9 = (void *)a3();
  uint64_t v10 = a4();
  if (!a1 && a2 == 0xE000000000000000 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    uint64_t result = swift_bridgeObjectRelease();
    if (v9[2])
    {
      a1 = v9[4];
      a2 = v9[5];
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      a1 = 0;
      a2 = 0xE000000000000000;
    }
  }
  *a5 = a1;
  a5[1] = a2;
  a5[2] = v9;
  a5[3] = v10;
  return result;
}

uint64_t StateMachineGraph.initialState.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineGraph.initialState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineGraph.initialState.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineGraph.states.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineGraph.states.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*StateMachineGraph.states.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineGraph.transitions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineGraph.transitions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StateMachineGraph.transitions.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineGraph.checkIntegrity()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 5;
    return;
  }
  uint64_t v5 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v74 = v1[3];
  uint64_t v6 = MEMORY[0x263F8EE88];
  uint64_t v88 = MEMORY[0x263F8EE88];
  swift_bridgeObjectRetain();
  uint64_t v7 = v2 + 56;
  do
  {
    Swift::Int v9 = *(void *)(v7 - 24);
    Swift::Int v8 = *(void *)(v7 - 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v10 = specialized Set._Variant.insert(_:)(&v84, v9, v8);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = 0;
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 += 32;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  uint64_t v11 = v88;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v12 = specialized Set.contains(_:)(v5, v4, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = 3;
    swift_bridgeObjectRetain();
    return;
  }
  uint64_t v87 = v6;
  unint64_t v13 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v70 = *(void *)(v74 + 16);
  if (!v70)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = a1;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    char v63 = -1;
    goto LABEL_42;
  }
  uint64_t v14 = v74 + 32;
  uint64_t v15 = swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v16 >= *(void *)(v15 + 16)) {
      goto LABEL_56;
    }
    unint64_t v71 = v16;
    BOOL v17 = (Swift::Int *)(v14 + 72 * v16);
    Swift::Int v18 = *v17;
    Swift::Int v19 = v17[1];
    uint64_t v20 = v17[2];
    uint64_t v21 = v17[3];
    uint64_t v23 = v17[4];
    uint64_t v22 = v17[5];
    Swift::Int v24 = v17[8];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v25 = specialized Set._Variant.insert(_:)(&v84, v18, v19);
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = a1;
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      char v63 = 1;
      goto LABEL_42;
    }
    uint64_t v26 = v88;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v27 = specialized Set.contains(_:)(v20, v21, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = a1;
      *(void *)a1 = v20;
      *(void *)(a1 + 8) = v21;
      char v63 = 2;
      goto LABEL_42;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v28 = specialized Set.contains(_:)(v23, v22, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v62 = a1;
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v22;
      char v63 = 2;
LABEL_42:
      *(unsigned char *)(v62 + 16) = v63;
LABEL_49:
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)(v24 + 16);
    if (v29) {
      break;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v15 = v74;
    unint64_t v16 = v71 + 1;
    uint64_t v14 = v74 + 32;
    if (v71 + 1 == v70)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
  }
  unint64_t v30 = 0;
  Swift::Int v72 = v24;
  Swift::Int v73 = v24 + 32;
  uint64_t v69 = *(void *)(v24 + 16);
  while (1)
  {
    if (v30 >= *(void *)(v24 + 16)) {
      goto LABEL_55;
    }
    outlined init with copy of __REAssetService(v73 + 40 * v30, (uint64_t)&v84);
    uint64_t v31 = v85;
    uint64_t v32 = v86;
    __swift_project_boxed_opaque_existential_1(&v84, v85);
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    uint64_t v34 = *(void *)(v33 + 16);
    if (v34) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_15:
    ++v30;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
    Swift::Int v24 = v72;
    if (v30 == v29) {
      goto LABEL_39;
    }
  }
  uint64_t v35 = v33 + 32;
  while (2)
  {
    outlined init with copy of __REAssetService(v35, (uint64_t)v81);
    uint64_t v37 = v82;
    uint64_t v38 = v83;
    __swift_project_boxed_opaque_existential_1(v81, v82);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
    if (v13[2] && (unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40), (v42 & 1) != 0))
    {
      outlined init with copy of __REAssetService(v13[7] + 40 * v41, (uint64_t)&v76);
    }
    else
    {
      uint64_t v78 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v77 + 1))
    {
      outlined init with take of BindableDataInternal(&v76, (uint64_t)&v79);
      __swift_project_boxed_opaque_existential_1(v81, v82);
      uint64_t DynamicType = swift_getDynamicType();
      __swift_project_boxed_opaque_existential_1(&v79, v80);
      if (DynamicType != swift_getDynamicType())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = v82;
        uint64_t v65 = v83;
        __swift_project_boxed_opaque_existential_1(v81, v82);
        uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v64, v65);
        uint64_t v68 = v67;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
        *(void *)a1 = v66;
        *(void *)(a1 + 8) = v68;
        *(unsigned char *)(a1 + 16) = 4;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
        goto LABEL_49;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
LABEL_21:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
      v35 += 40;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = v69;
        goto LABEL_15;
      }
      continue;
    }
    break;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v76, &demangling cache variable for type metadata for StateMachineParameterProtocol?);
  uint64_t v44 = v82;
  uint64_t v45 = v83;
  __swift_project_boxed_opaque_existential_1(v81, v82);
  uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
  uint64_t v48 = v47;
  outlined init with copy of __REAssetService((uint64_t)v81, (uint64_t)&v79);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v76 = v13;
  unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
  uint64_t v52 = v13[2];
  BOOL v53 = (v50 & 1) == 0;
  uint64_t v54 = v52 + v53;
  if (!__OFADD__(v52, v53))
  {
    char v55 = v50;
    if (v13[3] >= v54)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
      if ((v55 & 1) != (v57 & 1)) {
        goto LABEL_57;
      }
      unint64_t v51 = v56;
    }
    unint64_t v13 = (void *)v76;
    if (v55)
    {
      uint64_t v36 = *(void *)(v76 + 56) + 40 * v51;
      __swift_destroy_boxed_opaque_existential_1(v36);
      outlined init with take of BindableDataInternal(&v79, v36);
    }
    else
    {
      *(void *)(v76 + 8 * (v51 >> 6) + 64) |= 1 << v51;
      char v58 = (uint64_t *)(v13[6] + 16 * v51);
      *char v58 = v46;
      v58[1] = v48;
      outlined init with take of BindableDataInternal(&v79, v13[7] + 40 * v51);
      uint64_t v59 = v13[2];
      BOOL v60 = __OFADD__(v59, 1);
      uint64_t v61 = v59 + 1;
      if (v60) {
        goto LABEL_54;
      }
      v13[2] = v61;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:), MEMORY[0x263F8E970], (void (*)(unint64_t))specialized _NativeSet.copyAndResize(capacity:), &demangling cache variable for type metadata for _SetStorage<UInt64>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_retain();
    swift_bridgeObjectRetain();
    Swift::Int v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for __REAsset();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v20;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v18 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v22 = v18;
    if (*(void *)(v18 + 24) <= *(void *)(v18 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      Swift::Int v19 = v22;
    }
    else
    {
      Swift::Int v19 = v18;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v19);
    *uint64_t v3 = v19;
  }
  else
  {
    Hasher.init(_seed:)();
    char v10 = *(void *)(a2 + 16);
    Hasher._combine(_:)(v10);
    uint64_t v11 = Hasher._finalize()();
    char v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      uint64_t v14 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v14 + 8 * v13) + 16) == v10)
      {
LABEL_12:
        swift_release();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v13);
        swift_retain();
        return 0;
      }
      uint64_t v15 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v15;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v14 + 8 * v13) + 16) == v10) {
          goto LABEL_12;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    BOOL v17 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v17, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v21;
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:), MEMORY[0x263F8D6C8], (void (*)(unint64_t))specialized _NativeSet.copyAndResize(capacity:), &demangling cache variable for type metadata for _SetStorage<Int>);
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      Swift::Int v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t destroy for StateMachineGraph()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for StateMachineGraph(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StateMachineGraph(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StateMachineGraph(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineGraph()
{
  return &type metadata for StateMachineGraph;
}

uint64_t outlined copy of StateMachineError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for StateMachineError(uint64_t a1)
{
  return outlined consume of StateMachineError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of StateMachineError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of StateMachineError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for StateMachineError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of StateMachineError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of StateMachineError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for StateMachineError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of StateMachineError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTag for StateMachineError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveInjectEnumTag for StateMachineError(uint64_t result, unsigned int a2)
{
  if (a2 >= 5)
  {
    *(void *)uint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 5;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineError()
{
  return &type metadata for StateMachineError;
}

ValueMetadata *type metadata accessor for StateMachineStatesBuilder()
{
  return &type metadata for StateMachineStatesBuilder;
}

ValueMetadata *type metadata accessor for StateMachineTransitionsBuilder()
{
  return &type metadata for StateMachineTransitionsBuilder;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v6;
  long long v30 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v26 = *(_OWORD *)a2;
  long long v27 = v7;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v25);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v5 + 48);
    while (1)
    {
      uint64_t v13 = v12 + 80 * v10;
      BOOL v14 = *(void *)v13 == *(void *)a2 && *(float *)(v13 + 8) == *(float *)(a2 + 8);
      BOOL v15 = v14 && *(float *)(v13 + 12) == *(float *)(a2 + 12);
      if (v15
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 48), *(float32x4_t *)(a2 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 64), *(float32x4_t *)(a2 + 64))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 32), *(float32x4_t *)(a2 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v12 + 80 * v10 + 16), *(float32x4_t *)(a2 + 16))))) & 0x80000000) != 0)
      {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t result = 0;
    uint64_t v17 = *(void *)(*v2 + 48) + 80 * v10;
    long long v18 = *(_OWORD *)(v17 + 16);
    long long v19 = *(_OWORD *)(v17 + 32);
    long long v20 = *(_OWORD *)(v17 + 48);
    long long v21 = *(_OWORD *)(v17 + 64);
    *(void *)a1 = *(void *)v17;
    *(void *)(a1 + 8) = *(void *)(v17 + 8);
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = v19;
    *(_OWORD *)(a1 + 48) = v20;
    *(_OWORD *)(a1 + 64) = v21;
  }
  else
  {
LABEL_14:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v26 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v26;
    swift_bridgeObjectRelease();
    long long v23 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v23;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    long long v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
    return 1;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      outlined init with copy of GeometricPin(*(void *)(v6 + 48) + 80 * v9, (uint64_t)v15);
      BOOL v11 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v15, a2);
      outlined destroy of GeometricPin((uint64_t)v15);
      if (v11) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of GeometricPin(a2);
    outlined init with copy of GeometricPin(*(void *)(*v3 + 48) + 80 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of GeometricPin(a2, (uint64_t)v15);
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v15, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    outlined init with take of GeometricPin(a2, a1);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  unsigned int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t *v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void (**v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  void (**v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v46);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  char v50 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  BOOL v53 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  BOOL v15 = (char *)&v40 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v40 = (uint64_t)&v40 - v17;
  MEMORY[0x270FA5388](v18);
  long long v20 = (char *)&v40 - v19;
  unint64_t v41 = v2;
  long long v21 = *v2;
  Hasher.init(_seed:)();
  char v55 = a2;
  outlined init with copy of UUID?(a2, (uint64_t)v20);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v54 = v8 + 48;
  long long v23 = v22(v20, 1, v7);
  uint64_t v45 = v10;
  if (v23 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v20, v7);
    Hasher._combine(_:)(1u);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
    swift_bridgeObjectRetain();
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  long long v24 = Hasher._finalize()();
  char v25 = -1 << *(unsigned char *)(v21 + 32);
  long long v26 = v24 & ~v25;
  uint64_t v52 = v21 + 56;
  long long v27 = *(void *)(v21 + 56 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26;
  char v42 = a1;
  if ((v27 & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v35 = v41;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = v55;
    uint64_t v38 = v40;
    outlined init with copy of UUID?(v55, v40);
    unint64_t v56 = *v35;
    *uint64_t v35 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v38, v26, isUniquelyReferenced_nonNull_native);
    *uint64_t v35 = v56;
    swift_bridgeObjectRelease();
    outlined init with take of UUID?(v37, v42);
    return 1;
  }
  uint64_t v49 = ~v25;
  char v50 = *(void *)(v50 + 72);
  unint64_t v51 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v22;
  char v43 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v8 + 8);
  long long v28 = v46;
  uint64_t v44 = v21;
  while (1)
  {
    long long v29 = v50 * v26;
    outlined init with copy of UUID?(*(void *)(v21 + 48) + v50 * v26, (uint64_t)v15);
    long long v30 = (uint64_t)&v6[*(int *)(v28 + 48)];
    outlined init with copy of UUID?((uint64_t)v15, (uint64_t)v6);
    outlined init with copy of UUID?(v55, v30);
    uint64_t v31 = v51;
    if (v51((uint64_t)v6, 1, v7) == 1) {
      break;
    }
    outlined init with copy of UUID?((uint64_t)v6, v53);
    if (v31(v30, 1, v7) == 1)
    {
      (*v48)(v53, v7);
      goto LABEL_7;
    }
    uint64_t v32 = v53;
    uint64_t v33 = v45;
    (*v43)(v45, v30, v7);
    _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v34 = *v48;
    long long v21 = v44;
    (*v48)((uint64_t)v33, v7);
    v34(v32, v7);
    long long v28 = v46;
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    if (v47) {
      goto LABEL_16;
    }
LABEL_8:
    long long v26 = (v26 + 1) & v49;
    if (((*(void *)(v52 + ((v26 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v26) & 1) == 0) {
      goto LABEL_14;
    }
  }
  if (v31(v30, 1, v7) != 1)
  {
LABEL_7:
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for (UUID?, UUID?));
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    goto LABEL_8;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
LABEL_16:
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v55, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of UUID?(*(void *)(*v41 + 48) + v29, v42);
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2, void (*a3)(unint64_t), uint64_t a4, void (*a5)(unint64_t), uint64_t *a6)
{
  BOOL v11 = v6;
  uint64_t v14 = *v6;
  uint64_t v15 = static Hasher._hash(seed:_:)();
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *v11;
    *BOOL v11 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v17, isUniquelyReferenced_nonNull_native, a3, a4, a5, a6);
    *BOOL v11 = v22;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v18 = *(void *)(v14 + 48);
  if (*(void *)(v18 + 8 * v17) != a2)
  {
    uint64_t v19 = ~v16;
    do
    {
      unint64_t v17 = (v17 + 1) & v19;
      if (((*(void *)(v14 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v18 + 8 * v17) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_DWORD *a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = MEMORY[0x22A68A330](*(void *)(v6 + 40), a2, 4);
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *char v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(_DWORD *)(v10 + 4 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v9 + 8 * v8) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<IKRig.Joint.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<IKRig.Constraint.ID>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized RawRepresentable<>.hash(into:)();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v7, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_41;
  }
  uint64_t v8 = ~v6;
  while (2)
  {
    unint64_t v9 = 0xE90000000000006ELL;
    unint64_t v10 = 0x6F6974616D696E61;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v9 = 0xE500000000000000;
        uint64_t v11 = 1768191329;
        goto LABEL_13;
      case 2:
        unint64_t v10 = 0x6D6E6F7269766E65;
        unint64_t v9 = 0xEB00000000746E65;
        break;
      case 3:
        unint64_t v10 = 0x4D6E49746C697562;
        unint64_t v9 = 0xEF6C616972657461;
        break;
      case 4:
        unint64_t v9 = 0x800000022834DC30;
        unint64_t v10 = 0xD000000000000013;
        break;
      case 5:
        unint64_t v9 = 0xE400000000000000;
        unint64_t v10 = 1752393069;
        break;
      case 6:
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x73636973796870;
        break;
      case 7:
        unint64_t v9 = 0xE700000000000000;
        unint64_t v10 = 0x65727574786574;
        break;
      case 8:
        unint64_t v10 = 0x6F4C797469746E65;
        unint64_t v9 = 0xEA00000000006461;
        break;
      case 9:
        unint64_t v9 = 0xE500000000000000;
        uint64_t v11 = 1701079414;
LABEL_13:
        unint64_t v10 = v11 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000;
        break;
      default:
        break;
    }
    uint64_t v12 = 0x6F6974616D696E61;
    unint64_t v13 = 0xE90000000000006ELL;
    switch((char)a2)
    {
      case 1:
        unint64_t v13 = 0xE500000000000000;
        uint64_t v14 = 1768191329;
        goto LABEL_35;
      case 2:
        unint64_t v13 = 0xEB00000000746E65;
        if (v10 != 0x6D6E6F7269766E65) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 3:
        unint64_t v13 = 0xEF6C616972657461;
        if (v10 != 0x4D6E49746C697562) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 4:
        unint64_t v13 = 0x800000022834DC30;
        if (v10 != 0xD000000000000013) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 5:
        unint64_t v13 = 0xE400000000000000;
        if (v10 != 1752393069) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 6:
        unint64_t v13 = 0xE700000000000000;
        if (v10 != 0x73636973796870) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 7:
        unint64_t v13 = 0xE700000000000000;
        if (v10 != 0x65727574786574) {
          goto LABEL_31;
        }
        goto LABEL_30;
      case 8:
        uint64_t v12 = 0x6F4C797469746E65;
        unint64_t v13 = 0xEA00000000006461;
        goto LABEL_29;
      case 9:
        unint64_t v13 = 0xE500000000000000;
        uint64_t v14 = 1701079414;
LABEL_35:
        if (v10 != (v14 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000)) {
          goto LABEL_31;
        }
        goto LABEL_30;
      default:
LABEL_29:
        if (v10 != v12) {
          goto LABEL_31;
        }
LABEL_30:
        if (v9 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_40;
        }
LABEL_31:
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_37;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_40:
        uint64_t result = 0;
        LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v7);
LABEL_41:
        *a1 = a2;
        return result;
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  char v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  unint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    long long v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      long long v21 = v14;
      v14(v9, v20, v6);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      uint64_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        char v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *char v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t _s10Foundation4UUIDVACSHAAWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2, uint64_t *a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *char v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native, a3);
    *char v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if (*(void *)(v11 + 8 * v10) != a2)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v11 + 8 * v10) != a2);
  }
  uint64_t result = 0;
  a2 = *(void *)(*(void *)(*v3 + 48) + 8 * v10);
LABEL_8:
  *a1 = a2;
  return result;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for __REAsset();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v13 + 16));
        Swift::Int result = Hasher._finalize()();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x263F8EE88];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    long long v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_31;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_31;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64) {
                bzero((void *)(v2 + 56), 8 * v10);
              }
              else {
                *unint64_t v6 = v26;
              }
              uint64_t v1 = v27;
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                int64_t v5 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_37;
                }
                if (v5 >= v10) {
                  goto LABEL_31;
                }
                unint64_t v16 = v6[v5];
                ++v17;
                if (v16) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v5 = v17;
          }
        }
LABEL_21:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  char v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v31 = v0;
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    unint64_t v6 = ~(-1 << v5);
  }
  else {
    unint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v8 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v14 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v15 = v14 | (v11 << 6);
      goto LABEL_22;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return result;
    }
    if (v16 >= v8) {
      break;
    }
    int64_t v17 = (void *)(v2 + 56);
    uint64_t v18 = *(void *)(v32 + 8 * v16);
    ++v11;
    if (!v18)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v8) {
        goto LABEL_31;
      }
      uint64_t v18 = *(void *)(v32 + 8 * v11);
      if (!v18)
      {
        uint64_t v19 = v16 + 2;
        if (v19 >= v8)
        {
LABEL_31:
          swift_release();
          uint64_t v1 = v31;
          goto LABEL_33;
        }
        uint64_t v18 = *(void *)(v32 + 8 * v19);
        if (!v18)
        {
          while (1)
          {
            uint64_t v11 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_39;
            }
            if (v11 >= v8) {
              goto LABEL_31;
            }
            uint64_t v18 = *(void *)(v32 + 8 * v11);
            ++v19;
            if (v18) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v11 = v19;
      }
    }
LABEL_21:
    uint64_t v7 = (v18 - 1) & v18;
    int64_t v15 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_22:
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v21 = *v20;
    char v22 = v20[1];
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    BOOL v24 = result & ~v23;
    uint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      long long v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          uint64_t v25 = 0;
        }
        v26 |= v28;
        long long v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v21;
    v13[1] = v22;
    ++*(void *)(v4 + 16);
  }
  swift_release();
  uint64_t v1 = v31;
  int64_t v17 = (void *)(v2 + 56);
LABEL_33:
  uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
  if (v30 > 63) {
    bzero(v17, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v17 = -1 << v30;
  }
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  char v27[8];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  char v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    uint64_t v8 = v7 & *(void *)(v2 + 56);
    unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
    int64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        unint64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          unint64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v17 = v6[v12];
          if (!v17)
          {
            unint64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v17 = v6[v12];
            if (!v17)
            {
              uint64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  unint64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v12 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v8 = (v17 - 1) & v17;
        int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of GeometricPin(*(void *)(v2 + 48) + 80 * v15, (uint64_t)v27);
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = outlined init with take of GeometricPin((uint64_t)v27, *(void *)(v4 + 48) + 80 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void (**v45)(char *, uint64_t);
  void (**v46)(char *, char *, uint64_t);
  char *v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  unsigned int (**v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  int64_t v53;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  char v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  unint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v44 - v10;
  unint64_t v12 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  unint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v14 = v13;
  if (*(void *)(v12 + 16))
  {
    uint64_t v44 = v0;
    int64_t v15 = *(unsigned char *)(v12 + 32);
    unint64_t v16 = *(void *)(v12 + 56);
    uint64_t v49 = (void *)(v12 + 56);
    int64_t v17 = 1 << v15;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    uint64_t v19 = v18 & v16;
    uint64_t v48 = (unint64_t)(v17 + 63) >> 6;
    unint64_t v51 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    uint64_t v52 = v2;
    uint64_t v45 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v46 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    unint64_t v20 = v13 + 56;
    uint64_t result = swift_retain();
    char v22 = 0;
    char v50 = v12;
    unint64_t v23 = v52;
    while (1)
    {
      if (v19)
      {
        uint64_t v25 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        BOOL v53 = v22;
        uint64_t v26 = v25 | (v22 << 6);
      }
      else
      {
        long long v27 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v27 >= v48) {
          goto LABEL_36;
        }
        uint64_t v28 = v49[v27];
        long long v29 = v22 + 1;
        if (!v28)
        {
          long long v29 = v22 + 2;
          if (v22 + 2 >= v48) {
            goto LABEL_36;
          }
          uint64_t v28 = v49[v29];
          if (!v28)
          {
            long long v29 = v22 + 3;
            if (v22 + 3 >= v48) {
              goto LABEL_36;
            }
            uint64_t v28 = v49[v29];
            if (!v28)
            {
              uint64_t v30 = v22 + 4;
              if (v22 + 4 >= v48)
              {
LABEL_36:
                swift_release();
                uint64_t v1 = v44;
                char v43 = 1 << *(unsigned char *)(v12 + 32);
                if (v43 > 63) {
                  bzero(v49, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v49 = -1 << v43;
                }
                *(void *)(v12 + 16) = 0;
                break;
              }
              uint64_t v28 = v49[v30];
              if (!v28)
              {
                while (1)
                {
                  long long v29 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_42;
                  }
                  if (v29 >= v48) {
                    goto LABEL_36;
                  }
                  uint64_t v28 = v49[v29];
                  ++v30;
                  if (v28) {
                    goto LABEL_23;
                  }
                }
              }
              long long v29 = v22 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v19 = (v28 - 1) & v28;
        BOOL v53 = v29;
        uint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
      }
      uint64_t v31 = *(void *)(v12 + 48);
      uint64_t v32 = *(void *)(v6 + 72);
      outlined init with take of UUID?(v31 + v32 * v26, (uint64_t)v11);
      Hasher.init(_seed:)();
      outlined init with copy of UUID?((uint64_t)v11, (uint64_t)v8);
      if ((*v51)(v8, 1, v23) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v33 = v6;
        uint64_t v34 = v47;
        (*v46)(v47, v8, v23);
        Hasher._combine(_:)(1u);
        _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v35 = v34;
        unint64_t v6 = v33;
        (*v45)(v35, v23);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v36 = -1 << *(unsigned char *)(v14 + 32);
      uint64_t v37 = result & ~v36;
      uint64_t v38 = v37 >> 6;
      if (((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6))) != 0)
      {
        BOOL v24 = __clz(__rbit64((-1 << v37) & ~*(void *)(v20 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = (unint64_t)(63 - v36) >> 6;
        do
        {
          if (++v38 == v40 && (v39 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v41 = v38 == v40;
          if (v38 == v40) {
            uint64_t v38 = 0;
          }
          v39 |= v41;
          char v42 = *(void *)(v20 + 8 * v38);
        }
        while (v42 == -1);
        BOOL v24 = __clz(__rbit64(~v42)) + (v38 << 6);
      }
      *(void *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      uint64_t result = outlined init with take of UUID?((uint64_t)v11, *(void *)(v14 + 48) + v24 * v32);
      ++*(void *)(v14 + 16);
      unint64_t v12 = v50;
      char v22 = v53;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v14;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    long long v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    long long v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x22A68A330](*(void *)(v4 + 40), v18, 4);
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  char v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v6 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    uint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = v6[v19];
    ++v11;
    if (!v20)
    {
      uint64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = v6[v11];
      if (!v20)
      {
        uint64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = v6[v11];
        if (!v20)
        {
          unint64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = v6[v21];
          if (!v20)
          {
            while (1)
            {
              uint64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_40;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = v6[v11];
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          uint64_t v11 = v21;
        }
      }
    }
LABEL_32:
    uint64_t v8 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    uint64_t v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = Hasher._finalize()();
    unint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    int64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x227FE671CLL);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        int64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  long long v27 = 1 << *(unsigned char *)(v2 + 32);
  if (v27 > 63) {
    bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v6 = -1 << v27;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  char v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  int64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      unint64_t v9 = ~(-1 << v7);
    }
    else {
      unint64_t v9 = -1;
    }
    int64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    int64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        uint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        uint64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              char v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        int64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        uint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      unint64_t v23 = v4;
      BOOL v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      long long v27 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      long long v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            long long v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

unint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
    uint64_t v4 = (void *)(v1 + 56);
    if (v3 < 64) {
      uint64_t v5 = ~(-1 << v3);
    }
    else {
      uint64_t v5 = -1;
    }
    unint64_t v6 = v5 & *(void *)(v1 + 56);
    int64_t v7 = (unint64_t)(v3 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v9 = 0;
    while (1)
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        if (v17 >= v7) {
          goto LABEL_27;
        }
        unint64_t v18 = v4[v17];
        ++v9;
        if (!v18)
        {
          int64_t v9 = v17 + 1;
          if (v17 + 1 >= v7) {
            goto LABEL_27;
          }
          unint64_t v18 = v4[v9];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v7)
            {
LABEL_27:
              swift_release();
              uint64_t v20 = 1 << *(unsigned char *)(v1 + 32);
              if (v20 > 63) {
                bzero((void *)(v1 + 56), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v4 = -1 << v20;
              }
              *(void *)(v1 + 16) = 0;
              break;
            }
            unint64_t v18 = v4[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v9 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_33;
                }
                if (v9 >= v7) {
                  goto LABEL_27;
                }
                unint64_t v18 = v4[v9];
                ++v19;
                if (v18) {
                  goto LABEL_26;
                }
              }
            }
            int64_t v9 = v19;
          }
        }
LABEL_26:
        unint64_t v6 = (v18 - 1) & v18;
        unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      uint64_t v12 = *(void *)(v1 + 48) + 80 * v11;
      Swift::UInt v13 = *(void *)v12;
      __n128 v23 = *(__n128 *)(v12 + 32);
      __n128 v24 = *(__n128 *)(v12 + 16);
      __n128 v21 = *(__n128 *)(v12 + 64);
      __n128 v22 = *(__n128 *)(v12 + 48);
      uint64_t v25 = *(void *)(v12 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v13);
      if ((v25 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v14 = v25;
      }
      else {
        Swift::UInt32 v14 = 0;
      }
      Hasher._combine(_:)(v14);
      if ((v25 & 0x7FFFFFFF00000000) != 0) {
        Swift::UInt32 v15 = HIDWORD(v25);
      }
      else {
        Swift::UInt32 v15 = 0;
      }
      Hasher._combine(_:)(v15);
      specialized SIMD.hash(into:)(v26, v24);
      specialized SIMD.hash(into:)(v26, v23);
      specialized SIMD.hash(into:)(v26, v22);
      specialized SIMD.hash(into:)(v26, v21);
      Hasher._finalize()();
      unint64_t result = _HashTable.nextHole(atOrAfter:)();
      *(void *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      uint64_t v16 = *(void *)(v2 + 48) + 80 * result;
      *(void *)uint64_t v16 = v13;
      *(void *)(v16 + 8) = v25;
      *(__n128 *)(v16 + 16) = v24;
      *(__n128 *)(v16 + 32) = v23;
      *(__n128 *)(v16 + 48) = v22;
      *(__n128 *)(v16 + 64) = v21;
      ++*(void *)(v2 + 16);
    }
  }
  unint64_t result = swift_release();
  *uint64_t v0 = v2;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v7 = 0;
    uint64_t v8 = (void *)(v4 + 56);
    uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_33;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v4 + 32);
                if (v28 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v28;
                }
                uint64_t v3 = v2;
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v7 >= v12) {
                    goto LABEL_33;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v7 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 16));
  Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25)
      {
        int64_t v9 = v24 + 2;
        if (v24 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v6 + 8 * v9);
        if (!v25) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 80 * v15;
    int64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(_OWORD *)(v17 + 16);
    int64_t v19 = *(_OWORD *)(v17 + 32);
    int64_t v20 = *(_OWORD *)(v17 + 48);
    unint64_t v21 = *(_OWORD *)(v17 + 64);
    int64_t v22 = *(void *)(v4 + 48) + v16;
    unint64_t v23 = *(void *)(v17 + 8);
    *(void *)int64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v23;
    *(_OWORD *)(v22 + 16) = v18;
    *(_OWORD *)(v22 + 32) = v19;
    *(_OWORD *)(v22 + 48) = v20;
    *(_OWORD *)(v22 + 64) = v21;
  }
  BOOL v26 = v24 + 3;
  if (v26 >= v13) {
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned char v20[80];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 80 * v15;
    outlined init with copy of GeometricPin(*(void *)(v2 + 48) + 80 * v15, (uint64_t)v20);
    unint64_t result = (void *)outlined init with take of GeometricPin((uint64_t)v20, *(void *)(v4 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13) {
    goto LABEL_28;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_25:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    unint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  uint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      int64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      unint64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        unint64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    uint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    int64_t v19 = *(void *)(v3 + 72) * v18;
    outlined init with copy of UUID?(*(void *)(v6 + 48) + v19, (uint64_t)v5);
    unint64_t result = (void *)outlined init with take of UUID?((uint64_t)v5, *(void *)(v8 + 48) + v19);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16) {
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    unint64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  unint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    unint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  unint64_t v23 = v6 + 56;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  char v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    int64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      uint64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      int64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        uint64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        int64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    int64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  int64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    uint64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    int64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

void *specialized _NativeSet.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  unint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    unint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt64>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_33:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16) {
        break;
      }
    }
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_32:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  long long v29 = (unint64_t)(v5 + 63) >> 6;
  unint64_t v9 = v3 + 56;
  uint64_t result = swift_retain_n();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v11 << 6);
      goto LABEL_21;
    }
    unint64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v16 >= v29) {
      goto LABEL_30;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_30;
      }
      int64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        uint64_t v18 = v16 + 2;
        if (v18 >= v29)
        {
LABEL_30:
          uint64_t result = swift_release_n();
          uint64_t v1 = v0;
          goto LABEL_32;
        }
        int64_t v17 = *(void *)(v6 + 8 * v18);
        uint64_t v11 = v18;
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_21:
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    BOOL v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      BOOL v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_33;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          BOOL v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    uint64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_30;
    }
    int64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26[8];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<GeometricPin>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  unint64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      unint64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      int64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        unint64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        int64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v8 = (v17 - 1) & v17;
    int64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of GeometricPin(*(void *)(v2 + 48) + 80 * v15, (uint64_t)v26);
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of GeometricPin((uint64_t)v26, *(void *)(v4 + 48) + 80 * v13);
    ++*(void *)(v4 + 16);
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    unint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    int64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  void (**v44)(char *, uint64_t);
  void (**v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  int64_t v49;
  unsigned int (**v50)(char *, uint64_t, uint64_t);
  int64_t v51;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v47 = (char *)&v43 - v10;
  uint64_t v11 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID?>);
  unint64_t v12 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v1 = v13;
    return result;
  }
  unint64_t v14 = *(unsigned char *)(v11 + 32);
  int64_t v15 = *(void *)(v11 + 56);
  uint64_t v48 = v11 + 56;
  unint64_t v16 = 1 << v14;
  if (v16 < 64) {
    int64_t v17 = ~(-1 << v16);
  }
  else {
    int64_t v17 = -1;
  }
  uint64_t v18 = v17 & v15;
  uint64_t v49 = (unint64_t)(v16 + 63) >> 6;
  char v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  char v43 = v0;
  uint64_t v44 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v19 = v12 + 56;
  uint64_t result = swift_retain();
  unint64_t v21 = 0;
  char v22 = (uint64_t)v47;
  while (1)
  {
    if (v18)
    {
      BOOL v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v51 = v21;
      uint64_t v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    BOOL v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v49) {
      goto LABEL_36;
    }
    uint64_t v27 = *(void *)(v48 + 8 * v26);
    uint64_t v28 = v21 + 1;
    if (!v27)
    {
      uint64_t v28 = v21 + 2;
      if (v21 + 2 >= v49) {
        goto LABEL_36;
      }
      uint64_t v27 = *(void *)(v48 + 8 * v28);
      if (!v27)
      {
        uint64_t v28 = v21 + 3;
        if (v21 + 3 >= v49) {
          goto LABEL_36;
        }
        uint64_t v27 = *(void *)(v48 + 8 * v28);
        if (!v27) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v18 = (v27 - 1) & v27;
    unint64_t v51 = v28;
    uint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_24:
    uint64_t v30 = *(void *)(v6 + 72);
    outlined init with copy of UUID?(*(void *)(v11 + 48) + v30 * v25, v22);
    Hasher.init(_seed:)();
    outlined init with copy of UUID?(v22, (uint64_t)v8);
    if ((*v50)(v8, 1, v2) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      uint64_t v31 = v11;
      uint64_t v32 = v6;
      uint64_t v33 = v2;
      uint64_t v34 = v46;
      (*v45)(v46, v8, v33);
      Hasher._combine(_:)(1u);
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v35 = v34;
      uint64_t v2 = v33;
      uint64_t v6 = v32;
      uint64_t v11 = v31;
      char v22 = (uint64_t)v47;
      (*v44)(v35, v2);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v13 + 32);
    uint64_t v37 = result & ~v36;
    uint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v37) & ~*(void *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        unint64_t v41 = v38 == v40;
        if (v38 == v40) {
          uint64_t v38 = 0;
        }
        v39 |= v41;
        char v42 = *(void *)(v19 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v23 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = outlined init with take of UUID?(v22, *(void *)(v13 + 48) + v23 * v30);
    ++*(void *)(v13 + 16);
    unint64_t v21 = v51;
  }
  long long v29 = v21 + 4;
  if (v21 + 4 >= v49)
  {
LABEL_36:
    uint64_t result = swift_release_n();
    uint64_t v1 = v43;
    goto LABEL_38;
  }
  uint64_t v27 = *(void *)(v48 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = v21 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v49) {
      goto LABEL_36;
    }
    uint64_t v27 = *(void *)(v48 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<__REAsset>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(void *)(v18 + 16));
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
    uint64_t result = swift_retain();
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Int>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UInt32>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  BOOL v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x22A68A330](*(void *)(v4 + 40), v18, 4);
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  uint64_t result;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NetworkSendBlockingCategory>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  int64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  uint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v9 = (unint64_t)(v5 + 63) >> 6;
  int64_t v10 = v3 + 56;
  swift_retain();
  uint64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      int64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      uint64_t v18 = v17 | (v11 << 6);
      goto LABEL_33;
    }
    uint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_37;
    }
    if (v19 >= v9) {
      break;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      uint64_t v11 = v19 + 1;
      if (v19 + 1 >= v9) {
        break;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        uint64_t v11 = v19 + 2;
        if (v19 + 2 >= v9) {
          break;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          unint64_t v21 = v19 + 3;
          if (v21 >= v9) {
            break;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              uint64_t v11 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_38;
              }
              if (v11 >= v9) {
                goto LABEL_34;
              }
              unint64_t v20 = *(void *)(v6 + 8 * v11);
              ++v21;
              if (v20) {
                goto LABEL_32;
              }
            }
          }
          uint64_t v11 = v21;
        }
      }
    }
LABEL_32:
    uint64_t v8 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_33:
    BOOL v26 = *(unsigned char *)(*(void *)(v2 + 48) + v18);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    unint64_t v12 = Hasher._finalize()();
    unint64_t v13 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v14 = v12 & ~v13;
    int64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v22 = 0;
    unint64_t v23 = (unint64_t)(63 - v13) >> 6;
    do
    {
      if (++v15 == v23 && (v22 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x227FE9B88);
      }
      BOOL v24 = v15 == v23;
      if (v15 == v23) {
        int64_t v15 = 0;
      }
      v22 |= v24;
      uint64_t v25 = *(void *)(v10 + 8 * v15);
    }
    while (v25 == -1);
    unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
LABEL_8:
    *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(unsigned char *)(*(void *)(v4 + 48) + v16) = v26;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  unint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  unint64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      uint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    unint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      unint64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        unint64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    unint64_t v23 = v6;
    BOOL v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    BOOL v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      int64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  char v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    unint64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CollisionPlane_v1>);
  uint64_t v2 = static _SetStorage.resize(original:capacity:move:)();
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    unint64_t result = swift_release();
    *uint64_t v0 = v2;
    return result;
  }
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = v1 + 56;
  if (v3 < 64) {
    uint64_t v5 = ~(-1 << v3);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 56);
  int64_t v7 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_7;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v7) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v4 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_26:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_7:
    uint64_t v12 = *(void *)(v1 + 48) + 80 * v11;
    Swift::UInt v13 = *(void *)v12;
    __n128 v22 = *(__n128 *)(v12 + 32);
    __n128 v23 = *(__n128 *)(v12 + 16);
    __n128 v20 = *(__n128 *)(v12 + 64);
    __n128 v21 = *(__n128 *)(v12 + 48);
    uint64_t v24 = *(void *)(v12 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v13);
    if ((v24 & 0x7FFFFFFF) != 0) {
      Swift::UInt32 v14 = v24;
    }
    else {
      Swift::UInt32 v14 = 0;
    }
    Hasher._combine(_:)(v14);
    if ((v24 & 0x7FFFFFFF00000000) != 0) {
      Swift::UInt32 v15 = HIDWORD(v24);
    }
    else {
      Swift::UInt32 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    specialized SIMD.hash(into:)(v25, v23);
    specialized SIMD.hash(into:)(v25, v22);
    specialized SIMD.hash(into:)(v25, v21);
    specialized SIMD.hash(into:)(v25, v20);
    Hasher._finalize()();
    unint64_t result = _HashTable.nextHole(atOrAfter:)();
    *(void *)(v2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = *(void *)(v2 + 48) + 80 * result;
    *(void *)uint64_t v16 = v13;
    *(void *)(v16 + 8) = v24;
    *(__n128 *)(v16 + 16) = v23;
    *(__n128 *)(v16 + 32) = v22;
    *(__n128 *)(v16 + 48) = v21;
    *(__n128 *)(v16 + 64) = v20;
    ++*(void *)(v2 + 16);
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v7)
  {
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v4 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  int64_t v7 = 0;
  uint64_t v8 = v4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(v4 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    Swift::UInt v20 = *(void *)(*(void *)(v4 + 48) + 8 * v16);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v20);
    uint64_t result = Hasher._finalize()();
    uint64_t v21 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v3 = v2;
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_21;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_21;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  long long v9 = *(_OWORD *)(v5 + 48);
  long long v28 = *(_OWORD *)(v5 + 32);
  long long v29 = v9;
  long long v30 = *(_OWORD *)(v5 + 64);
  long long v10 = *(_OWORD *)(v5 + 16);
  long long v26 = *(_OWORD *)v5;
  long long v27 = v10;
  Hasher.init(_seed:)();
  CollisionPlane_v1.hash(into:)((uint64_t)v25);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    uint64_t v13 = *(void *)(v8 + 48);
    while (1)
    {
      uint64_t v14 = v13 + 80 * a2;
      BOOL v15 = *(void *)v14 == *(void *)v5 && *(float *)(v14 + 8) == *(float *)(v5 + 8);
      BOOL v16 = v15 && *(float *)(v14 + 12) == *(float *)(v5 + 12);
      if (v16
        && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 48), *(float32x4_t *)(v5 + 48)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 64), *(float32x4_t *)(v5 + 64))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 32), *(float32x4_t *)(v5 + 32)), (int8x16_t)vceqq_f32(*(float32x4_t *)(v13 + 80 * a2 + 16), *(float32x4_t *)(v5 + 16))))) & 0x80000000) != 0)
      {
        break;
      }
      a2 = (a2 + 1) & v12;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_21;
      }
    }
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_21:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  unint64_t v18 = (_OWORD *)(*(void *)(v17 + 48) + 80 * a2);
  long long v19 = *(_OWORD *)(v5 + 64);
  long long v20 = *(_OWORD *)(v5 + 32);
  v18[3] = *(_OWORD *)(v5 + 48);
  v18[4] = v19;
  long long v21 = *(_OWORD *)(v5 + 16);
  *unint64_t v18 = *(_OWORD *)v5;
  v18[1] = v21;
  v18[2] = v20;
  uint64_t v22 = *(void *)(v17 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v24;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_13;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  long long v9 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v9);
  uint64_t result = Hasher._finalize()();
  long long v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t result = type metadata accessor for __REAsset();
    uint64_t v11 = *(void *)(v8 + 48);
    if (*(void *)(*(void *)(v11 + 8 * a2) + 16) == v9)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v10;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v11 + 8 * a2) + 16) == v9) {
          goto LABEL_12;
        }
      }
    }
  }
LABEL_13:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1);
  BOOL v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<OpaquePointer>);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  long long v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    long long v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = __OFADD__(v13, 1);
  BOOL v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  char v21;

  Swift::Int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  long long v21 = result;
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
        goto LABEL_43;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    specialized RawRepresentable<>.hash(into:)();
    uint64_t result = Hasher._finalize()();
    long long v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      long long v10 = ~v9;
      while (2)
      {
        uint64_t v11 = 0xE90000000000006ELL;
        uint64_t v12 = 0x6F6974616D696E61;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            uint64_t v11 = 0xE500000000000000;
            uint64_t v12 = 0x6F69647561;
            break;
          case 2:
            uint64_t v12 = 0x6D6E6F7269766E65;
            uint64_t v11 = 0xEB00000000746E65;
            break;
          case 3:
            uint64_t v12 = 0x4D6E49746C697562;
            uint64_t v11 = 0xEF6C616972657461;
            break;
          case 4:
            uint64_t v11 = 0x800000022834DC30;
            uint64_t v12 = 0xD000000000000013;
            break;
          case 5:
            uint64_t v11 = 0xE400000000000000;
            uint64_t v12 = 1752393069;
            break;
          case 6:
            uint64_t v11 = 0xE700000000000000;
            uint64_t v12 = 0x73636973796870;
            break;
          case 7:
            uint64_t v11 = 0xE700000000000000;
            uint64_t v12 = 0x65727574786574;
            break;
          case 8:
            uint64_t v12 = 0x6F4C797469746E65;
            uint64_t v11 = 0xEA00000000006461;
            break;
          case 9:
            uint64_t v11 = 0xE500000000000000;
            uint64_t v12 = 0x6F65646976;
            break;
          default:
            break;
        }
        uint64_t v13 = 0x6F6974616D696E61;
        uint64_t v14 = 0xE90000000000006ELL;
        switch(v5)
        {
          case 1:
            uint64_t v14 = 0xE500000000000000;
            BOOL v15 = 1768191329;
            goto LABEL_25;
          case 2:
            uint64_t v14 = 0xEB00000000746E65;
            if (v12 != 0x6D6E6F7269766E65) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 3:
            uint64_t v14 = 0xEF6C616972657461;
            if (v12 != 0x4D6E49746C697562) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 4:
            uint64_t v14 = 0x800000022834DC30;
            if (v12 != 0xD000000000000013) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 5:
            uint64_t v14 = 0xE400000000000000;
            if (v12 != 1752393069) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 6:
            uint64_t v14 = 0xE700000000000000;
            uint64_t v13 = 0x73636973796870;
            goto LABEL_36;
          case 7:
            uint64_t v14 = 0xE700000000000000;
            if (v12 != 0x65727574786574) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 8:
            uint64_t v14 = 0xEA00000000006461;
            if (v12 != 0x6F4C797469746E65) {
              goto LABEL_38;
            }
            goto LABEL_37;
          case 9:
            uint64_t v14 = 0xE500000000000000;
            BOOL v15 = 1701079414;
LABEL_25:
            if (v12 != (v15 & 0xFFFF0000FFFFFFFFLL | 0x6F00000000)) {
              goto LABEL_38;
            }
            goto LABEL_37;
          default:
LABEL_36:
            if (v12 != v13) {
              goto LABEL_38;
            }
LABEL_37:
            if (v11 == v14) {
              goto LABEL_46;
            }
LABEL_38:
            BOOL v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v16) {
              goto LABEL_47;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_43:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v17 + 48) + a2) = v21;
  unint64_t v18 = *(void *)(v17 + 16);
  long long v19 = __OFADD__(v18, 1);
  long long v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
LABEL_46:
    swift_bridgeObjectRelease_n();
LABEL_47:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x227FEB6E4);
  }
  *(void *)(v17 + 16) = v20;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = ~v11;
    do
    {
      outlined init with copy of GeometricPin(*(void *)(v9 + 48) + 80 * a2, (uint64_t)v19);
      BOOL v13 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v19, a1);
      outlined destroy of GeometricPin((uint64_t)v19);
      if (v13) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of GeometricPin(a1, *(void *)(v14 + 48) + 80 * a2);
  uint64_t v16 = *(void *)(v14 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v14 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void (**v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (**v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;

  char v55 = a1;
  unint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v6);
  unint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  Swift::Int v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v49 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v47 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  BOOL v17 = (char *)&v42 - v16;
  MEMORY[0x270FA5388](v18);
  long long v21 = (char *)&v42 - v20;
  uint64_t v22 = *(void *)(*v3 + 16);
  BOOL v23 = *(void *)(*v3 + 24);
  uint64_t v44 = v3;
  if (v23 <= v22 || (a3 & 1) == 0)
  {
    if (a3)
    {
      char v43 = v19;
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v23 > v22)
      {
        specialized _NativeSet.copy()();
        goto LABEL_21;
      }
      char v43 = v19;
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v24 = *v3;
    Hasher.init(_seed:)();
    outlined init with copy of UUID?(v55, (uint64_t)v21);
    uint64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    uint64_t v48 = v10 + 48;
    if (v54(v21, 1, v9) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      unint64_t v25 = v49;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v49, v21, v9);
      Hasher._combine(_:)(1u);
      _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v25, v9);
    }
    long long v26 = Hasher._finalize()();
    long long v27 = -1 << *(unsigned char *)(v24 + 32);
    a2 = v26 & ~v27;
    BOOL v53 = v24 + 56;
    if ((*(void *)(v24 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v52 = ~v27;
      long long v28 = *(void *)(v47 + 72);
      uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v10 + 32);
      uint64_t v46 = v17;
      char v50 = (void (**)(char *, uint64_t))(v10 + 8);
      unint64_t v51 = v28;
      do
      {
        outlined init with copy of UUID?(*(void *)(v24 + 48) + v51 * a2, (uint64_t)v17);
        uint64_t v35 = (uint64_t)&v8[*(int *)(v6 + 48)];
        outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v8);
        outlined init with copy of UUID?(v55, v35);
        uint64_t v36 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v54;
        if (v54(v8, 1, v9) == 1)
        {
          if (v36(v35, 1, v9) == 1) {
            goto LABEL_24;
          }
        }
        else
        {
          outlined init with copy of UUID?((uint64_t)v8, (uint64_t)v14);
          if (v36(v35, 1, v9) != 1)
          {
            long long v29 = v24;
            long long v30 = v14;
            uint64_t v31 = v49;
            (*v45)(v49, v35, v9);
            _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
            uint64_t v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v33 = *v50;
            uint64_t v34 = v31;
            uint64_t v14 = v30;
            uint64_t v24 = v29;
            BOOL v17 = v46;
            (*v50)(v34, v9);
            v33(v14, v9);
            outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
            outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
            if (v32) {
              goto LABEL_25;
            }
            goto LABEL_14;
          }
          (*v50)(v14, v9);
        }
        outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
        outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
LABEL_14:
        a2 = (a2 + 1) & v52;
      }
      while (((*(void *)(v53 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_21:
  uint64_t v37 = *v44;
  *(void *)(*v44 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of UUID?(v55, *(void *)(v37 + 48) + *(void *)(v47 + 72) * a2);
  uint64_t v39 = *(void *)(v37 + 16);
  uint64_t v40 = __OFADD__(v39, 1);
  unint64_t v41 = v39 + 1;
  if (v40)
  {
    __break(1u);
LABEL_24:
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
LABEL_25:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v37 + 16) = v41;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  unint64_t v6 = type metadata accessor for UUID();
  unint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = MEMORY[0x270FA5388](v6);
  Swift::Int v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  uint64_t v12 = *(void *)(*v3 + 24);
  long long v29 = v3;
  long long v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  BOOL v13 = *v3;
  _s10Foundation4UUIDVACSHAAWlTm_0(&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  BOOL v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    BOOL v17 = ~v15;
    long long v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    long long v19 = v7 + 16;
    uint64_t v18 = v20;
    long long v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      _s10Foundation4UUIDVACSHAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  BOOL v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  long long v26 = *(void *)(v24 + 16);
  long long v27 = __OFADD__(v26, 1);
  long long v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3, void (*a4)(unint64_t), uint64_t a5, void (*a6)(unint64_t), uint64_t *a7)
{
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*v7 + 16);
  unint64_t v11 = *(void *)(*v7 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  unint64_t v12 = v10 + 1;
  if (a3)
  {
    a4(v12);
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()(a7);
      goto LABEL_14;
    }
    a6(v12);
  }
  uint64_t v13 = *v7;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v14 = -1 << *(unsigned char *)(v13 + 32);
  a2 = result & ~v14;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v15 = *(void *)(v13 + 48);
    if (*(void *)(v15 + 8 * a2) == v9)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v15 + 8 * a2) == v9) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v7;
  *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = v9;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  uint64_t result = MEMORY[0x22A68A330](*(void *)(*v3 + 40), v5, 4);
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(_DWORD *)(v10 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v10 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(void *)(v12 + 48) + 4 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3, uint64_t *a4)
{
  Swift::UInt v6 = result;
  unint64_t v7 = *(void *)(*v4 + 16);
  unint64_t v8 = *(void *)(*v4 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v9, a4);
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()(a4);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v9, a4);
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v10 + 32);
  a2 = result & ~v11;
  if ((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v12 = *(void *)(v10 + 48);
    if (*(void *)(v12 + 8 * a2) == v6)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v12 + 8 * a2) == v6) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v6;
  uint64_t v15 = *(void *)(v14 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

RealityFoundation::VFXComponent::SimulationState_optional __swiftcall VFXComponent.SimulationState.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 4;
  if ((unint64_t)rawValue < 4) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (RealityFoundation::VFXComponent::SimulationState_optional)rawValue;
}

uint64_t VFXComponent.SimulationState.rawValue.getter()
{
  return *v0;
}

RealityFoundation::VFXComponent::SimulationState_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXComponent.SimulationState(Swift::Int *a1)
{
  return VFXComponent.SimulationState.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXComponent.SimulationState()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXComponent.SimulationState()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t VFXComponent.effect.getter()
{
  return swift_retain();
}

uint64_t VFXComponent.effect.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*VFXComponent.effect.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VFXComponent.simulationRate.getter()
{
  return *(float *)(v0 + 8);
}

void VFXComponent.simulationRate.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*VFXComponent.simulationRate.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VFXComponent.simulationTime.getter()
{
  return *(float *)(v0 + 12);
}

void VFXComponent.simulationTime.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*VFXComponent.simulationTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void VFXComponent.simulationState.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned __int8 *VFXComponent.simulationState.setter(unsigned __int8 *result)
{
  int v2 = *result;
  if (*(unsigned char *)(v1 + 16) == 1 && v2 == 3) {
    LOBYTE(v2) = 2;
  }
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

unsigned __int8 *(*VFXComponent.simulationState.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 16);
  return VFXComponent.simulationState.modify;
}

unsigned __int8 *VFXComponent.simulationState.modify(unsigned __int8 *result)
{
  int v1 = result[8];
  if (*(unsigned char *)(*(void *)result + 16) == 1 && v1 == 3) {
    LOBYTE(v1) = 2;
  }
  *(unsigned char *)(*(void *)result + 16) = v1;
  return result;
}

uint64_t VFXComponent.startObserving(parameter:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v7 = v6;
  unint64_t v8 = *(void **)(v2 + 24);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  v8[2] = v11 + 1;
  uint64_t v12 = &v8[2 * v11];
  v12[4] = v5;
  v12[5] = v7;
  *(void *)(v2 + 24) = v8;
  return result;
}

uint64_t VFXComponent.stopObserving(parameter:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v7 = v6;
  unint64_t v8 = *(void **)(v2 + 32);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    unint64_t v8 = (void *)result;
  }
  v8[2] = v11 + 1;
  uint64_t v12 = &v8[2 * v11];
  v12[4] = v5;
  v12[5] = v7;
  *(void *)(v2 + 32) = v8;
  return result;
}

uint64_t VFXComponent.restrictCrossingToMesh(ofPortal:withPadding:)(uint64_t a1, uint64_t a2, char a3)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(v3 + 40) = a1;
  *(void *)(v3 + 48) = a2;
  *(unsigned char *)(v3 + 56) = a3 & 1;
  return result;
}

Swift::Void __swiftcall VFXComponent.stopRestrictingCrossingToMesh()()
{
  *(unsigned char *)(v0 + 57) = 1;
}

double VFXComponent.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 1065353216;
  *(void *)(a2 + 8) = 1065353216;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v3 = MEMORY[0x263F8EE78];
  *(void *)(a2 + 24) = MEMORY[0x263F8EE78];
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_WORD *)(a2 + 56) = 1;
  return result;
}

uint64_t static VFXComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t Asset = REVFXSceneComponentGetAsset();
  if (!Asset) {
    goto LABEL_8;
  }
  uint64_t v3 = Asset;
  type metadata accessor for VFXResource();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  RERetain();
  REAssetSetSwiftObject();
  REVFXSceneComponentGetSimulationRate();
  int v6 = v5;
  unint64_t SimulationState = REVFXSceneComponentGetSimulationState();
  if ((SimulationState & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_8:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (SimulationState >= 4) {
    char v8 = 0;
  }
  else {
    char v8 = SimulationState;
  }
  uint64_t result = REVFXSceneComponentGetSimulationTime();
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v10;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v11 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 24) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 1;
  return result;
}

uint64_t VFXComponent.__toCore(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(v1 + 40);
  char v7 = *(unsigned char *)(v1 + 57);
  REVFXSceneComponentSetAsset();
  REVFXSceneComponentSetSimulationRate();
  REVFXSceneComponentSetSimulationTime();
  if (v3 >= 2) {
    REVFXSceneComponentResetSimulation();
  }
  REVFXSceneComponentSetSimulationState();
  uint64_t v8 = *(void *)(v5 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v9 = (uint64_t *)(v5 + 40);
    do
    {
      uint64_t v10 = *(v9 - 1);
      uint64_t v11 = *v9;
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)MEMORY[0x22A688A50](v10, v11);
      MEMORY[0x22A695080](v2, v12);
      swift_bridgeObjectRelease();

      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = *(void *)(v4 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v14 = (uint64_t *)(v4 + 40);
    do
    {
      uint64_t v15 = *(v14 - 1);
      uint64_t v16 = *v14;
      swift_bridgeObjectRetain();
      uint64_t v17 = (void *)MEMORY[0x22A688A50](v15, v16);
      MEMORY[0x22A6950A0](v2, v17);
      swift_bridgeObjectRelease();

      v14 += 2;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease_n();
  }
  if (v7) {
    REVFXSceneComponentStopCollidingOutsidePortal();
  }
  if (v6)
  {
    swift_retain();
    REVFXSceneComponentStartCollidingOutsidePortal();
    REVFXSceneComponentSetPortalPaddingForCollisions();
    swift_release();
  }

  return RENetworkMarkComponentDirty();
}

void static VFXComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2003;
}

void protocol witness for static Component.__coreComponentType.getter in conformance VFXComponent(_DWORD *a1@<X8>)
{
  *a1 = 2003;
}

uint64_t HasVFX.vfxComponent.getter@<X0>(_OWORD *a1@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for HasVFX.vfxComponent : <A>A@<D0>(uint64_t a1@<X8>)
{
  HasVFX.vfxComponent.getter(v6);
  uint64_t v2 = v8;
  __int16 v3 = v9;
  long long v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for HasVFX.vfxComponent : <A>A(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  __int16 v7 = *(_WORD *)(a1 + 56);
  v9[0] = *(void *)a1;
  v9[1] = v1;
  _OWORD v9[2] = v2;
  v9[3] = v3;
  v9[4] = v4;
  _OWORD v9[5] = v5;
  v9[6] = v6;
  __int16 v10 = v7;
  outlined copy of VFXComponent?(v9[0]);
  return HasVFX.vfxComponent.setter((uint64_t)v9);
}

uint64_t HasVFX.vfxComponent.setter(uint64_t a1)
{
  outlined init with take of VFXComponent?(a1, (uint64_t)v5);
  uint64_t v2 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 112))(v4);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
  outlined release of VFXComponent?(v5);
  swift_release();
  return v2(v4, 0);
}

void (*HasVFX.vfxComponent.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  __int16 v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[9] = a3;
  v7[10] = v3;
  v7[8] = a2;
  HasVFX.vfxComponent.getter(v7);
  return HasVFX.vfxComponent.modify;
}

void HasVFX.vfxComponent.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = v3[6];
  __int16 v11 = *((_WORD *)v3 + 28);
  v12[0] = v4;
  v12[1] = v5;
  _OWORD v12[2] = v6;
  v12[3] = v7;
  v12[4] = v8;
  v12[5] = v9;
  v12[6] = v10;
  __int16 v13 = v11;
  if (a2)
  {
    outlined copy of VFXComponent?(v4);
    HasVFX.vfxComponent.setter((uint64_t)v12);
    outlined consume of VFXComponent?(*v3);
  }
  else
  {
    HasVFX.vfxComponent.setter((uint64_t)v12);
  }

  free(v3);
}

void HasVFX.setVFXValue(_:of:)(void *a1, void *a2)
{
  REVFXSceneComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t v4 = a2[3];
    uint64_t v5 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v4);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v5 + 32))(&v97, v4, v5);
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    swift_getDynamicType();
    if (VFXParameterType.isMatching(type:)())
    {
      uint64_t v6 = a2[3];
      uint64_t v7 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v6);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 32))(&v101, v6, v7);
      switch((char)v101)
      {
        case 1:
          uint64_t v57 = a2[3];
          uint64_t v58 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v57);
          uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v57, v58);
          BOOL v60 = (void *)MEMORY[0x22A688A50](v59);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterBool();

          break;
        case 2:
          uint64_t v61 = a2[3];
          uint64_t v62 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v61);
          uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
          uint64_t v64 = (void *)MEMORY[0x22A688A50](v63);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterUInt8();

          break;
        case 3:
          uint64_t v65 = a2[3];
          uint64_t v66 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v65);
          uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 8))(v65, v66);
          uint64_t v68 = (void *)MEMORY[0x22A688A50](v67);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterUInt16();

          break;
        case 4:
          uint64_t v69 = a2[3];
          uint64_t v70 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v69);
          uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v69, v70);
          Swift::Int v72 = (void *)MEMORY[0x22A688A50](v71);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterUInt32();

          break;
        case 5:
          uint64_t v73 = a2[3];
          uint64_t v74 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v73);
          uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v73, v74);
          long long v76 = (void *)MEMORY[0x22A688A50](v75);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterUInt64();

          break;
        case 6:
          uint64_t v77 = a2[3];
          uint64_t v78 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v77);
          uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 8))(v77, v78);
          uint64_t v80 = (void *)MEMORY[0x22A688A50](v79);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterInt();

          break;
        case 7:
          uint64_t v93 = a2[3];
          uint64_t v94 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v93);
          uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v93, v94);
          unsigned long long v96 = (void *)MEMORY[0x22A688A50](v95);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterInt8();

          break;
        case 8:
          uint64_t v81 = a2[3];
          uint64_t v82 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v81);
          uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 8))(v81, v82);
          Swift::Int v84 = (void *)MEMORY[0x22A688A50](v83);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterInt16();

          break;
        case 9:
          uint64_t v85 = a2[3];
          uint64_t v86 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v85);
          uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v85, v86);
          uint64_t v88 = (void *)MEMORY[0x22A688A50](v87);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterInt32();

          break;
        case 10:
          uint64_t v89 = a2[3];
          uint64_t v90 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v89);
          uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 8))(v89, v90);
          long long v92 = (void *)MEMORY[0x22A688A50](v91);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterInt64();

          break;
        case 11:
        case 12:
          uint64_t v8 = a2[3];
          uint64_t v9 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v8);
          uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
          __int16 v11 = (void *)MEMORY[0x22A688A50](v10);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat();

          break;
        case 13:
        case 18:
          uint64_t v25 = a2[3];
          uint64_t v26 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v25);
          uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
          long long v28 = (void *)MEMORY[0x22A688A50](v27);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat2();

          break;
        case 14:
        case 19:
          uint64_t v44 = a2[3];
          uint64_t v45 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v44);
          uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
          uint64_t v47 = (void *)MEMORY[0x22A688A50](v46);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat3();

          break;
        case 15:
        case 20:
          uint64_t v29 = a2[3];
          uint64_t v30 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v29);
          uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
          uint64_t v32 = (void *)MEMORY[0x22A688A50](v31);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat4();

          break;
        case 16:
        case 21:
          uint64_t v48 = a2[3];
          uint64_t v49 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v48);
          uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v48, v49);
          unint64_t v51 = (void *)MEMORY[0x22A688A50](v50);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
          type metadata accessor for simd_float3x3(0);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat3x3();

          break;
        case 17:
        case 22:
          uint64_t v33 = a2[3];
          uint64_t v34 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v33);
          uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
          uint64_t v36 = (void *)MEMORY[0x22A688A50](v35);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
          type metadata accessor for simd_float4x4(0);
          swift_dynamicCast();
          REVFXSceneComponentSetParameterFloat4x4();

          break;
        case 23:
          return;
        case 24:
        case 25:
          uint64_t v37 = a2[3];
          uint64_t v38 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v37);
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
          uint64_t v40 = (void *)MEMORY[0x22A688A50](v39);
          swift_bridgeObjectRelease();
          uint64_t v41 = a2[3];
          uint64_t v42 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v41);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v42 + 32))(&v101, v41, v42);
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CAKeyframeAnimation);
          swift_dynamicCast();
          char v43 = (void *)v102[0];
          REVFXSceneComponentSetParameterKeyframeAnimation();

          break;
        default:
          uint64_t v52 = a2[3];
          uint64_t v53 = a2[4];
          __swift_project_boxed_opaque_existential_1(a2, v52);
          uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
          char v55 = (void *)MEMORY[0x22A688A50](v54);
          swift_bridgeObjectRelease();
          outlined init with copy of Any((uint64_t)a1, (uint64_t)&v97);
          swift_dynamicCast();
          unint64_t v56 = (void *)MEMORY[0x22A688A50](v102[0], v102[1]);
          swift_bridgeObjectRelease();
          REVFXSceneComponentSetParameterString();

          break;
      }
    }
    else
    {
      os_log_type_t v12 = static os_log_type_t.error.getter();
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)&v97);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v102);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      __int16 v13 = static OS_os_log.default.getter();
      os_log_type_t v14 = v12;
      if (os_log_type_enabled(v13, v12))
      {
        uint64_t v15 = swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v101 = v16;
        *(_DWORD *)uint64_t v15 = 136315394;
        uint64_t v17 = v98;
        uint64_t v18 = v99;
        __swift_project_boxed_opaque_existential_1(&v97, v98);
        uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
        *(_WORD *)(v15 + 12) = 2080;
        uint64_t v21 = v103;
        uint64_t v22 = v104;
        __swift_project_boxed_opaque_existential_1(v102, v103);
        uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 24))(v21, v22);
        uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
        _os_log_impl(&dword_227DD2000, v13, v14, "[VFX] Missmatch between setValue value type and parameter type of %s.%s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x22A696500](v16, -1, -1);
        MEMORY[0x22A696500](v15, -1, -1);
      }
      else
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v97);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      }
    }
  }
}

void HasVFX.vfxValue(of:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  long long v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  char ParameterBool;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  __int16 ParameterUInt16;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  int ParameterUInt32;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t ParameterUInt64;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  void *v118;
  long long v119;
  uint64_t v120;

  REVFXSceneComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v4);
    uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v5 + 32);
    v6((uint64_t *)((char *)&v120 + 1), v4, v5);
    switch(BYTE1(v120))
    {
      case 1:
        uint64_t v63 = a1[3];
        uint64_t v64 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v63);
        uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v64);
        uint64_t v66 = (void *)MEMORY[0x22A688A50](v65);
        swift_bridgeObjectRelease();
        ParameterBool = REVFXSceneComponentGetParameterBool();

        uint64_t v68 = MEMORY[0x263F8D4F8];
        goto LABEL_27;
      case 2:
        uint64_t v69 = a1[3];
        uint64_t v70 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v69);
        uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v69, v70);
        Swift::Int v72 = (void *)MEMORY[0x22A688A50](v71);
        swift_bridgeObjectRelease();
        ParameterBool = REVFXSceneComponentGetParameterUInt8();

        uint64_t v68 = MEMORY[0x263F8E778];
        goto LABEL_27;
      case 3:
        uint64_t v73 = a1[3];
        uint64_t v74 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v73);
        uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 8))(v73, v74);
        long long v76 = (void *)MEMORY[0x22A688A50](v75);
        swift_bridgeObjectRelease();
        ParameterUInt16 = REVFXSceneComponentGetParameterUInt16();

        uint64_t v78 = MEMORY[0x263F8E888];
        goto LABEL_21;
      case 4:
        uint64_t v79 = a1[3];
        uint64_t v80 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v79);
        uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 8))(v79, v80);
        uint64_t v82 = (void *)MEMORY[0x22A688A50](v81);
        swift_bridgeObjectRelease();
        ParameterUInt32 = REVFXSceneComponentGetParameterUInt32();

        Swift::Int v84 = MEMORY[0x263F8E8F8];
        goto LABEL_23;
      case 5:
        uint64_t v85 = a1[3];
        uint64_t v86 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v85);
        uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 8))(v85, v86);
        uint64_t v88 = (void *)MEMORY[0x22A688A50](v87);
        swift_bridgeObjectRelease();
        ParameterUInt64 = REVFXSceneComponentGetParameterUInt64();

        uint64_t v90 = MEMORY[0x263F8E970];
        goto LABEL_25;
      case 6:
        uint64_t v91 = a1[3];
        long long v92 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v91);
        uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 8))(v91, v92);
        uint64_t v94 = (void *)MEMORY[0x22A688A50](v93);
        swift_bridgeObjectRelease();
        ParameterUInt64 = REVFXSceneComponentGetParameterInt();

        uint64_t v90 = MEMORY[0x263F8D6C8];
        goto LABEL_25;
      case 7:
        v107 = a1[3];
        v108 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v107);
        v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 8))(v107, v108);
        v110 = (void *)MEMORY[0x22A688A50](v109);
        swift_bridgeObjectRelease();
        ParameterBool = REVFXSceneComponentGetParameterInt8();

        uint64_t v68 = MEMORY[0x263F8E498];
LABEL_27:
        *(void *)(a2 + 24) = v68;
        *(unsigned char *)a2 = ParameterBool;
        return;
      case 8:
        uint64_t v95 = a1[3];
        unsigned long long v96 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v95);
        long long v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 8))(v95, v96);
        uint64_t v98 = (void *)MEMORY[0x22A688A50](v97);
        swift_bridgeObjectRelease();
        ParameterUInt16 = REVFXSceneComponentGetParameterInt16();

        uint64_t v78 = MEMORY[0x263F8E4F0];
LABEL_21:
        *(void *)(a2 + 24) = v78;
        *(_WORD *)a2 = ParameterUInt16;
        return;
      case 9:
        long long v99 = a1[3];
        uint64_t v100 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v99);
        uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v99, v100);
        long long v102 = (void *)MEMORY[0x22A688A50](v101);
        swift_bridgeObjectRelease();
        ParameterUInt32 = REVFXSceneComponentGetParameterInt32();

        Swift::Int v84 = MEMORY[0x263F8E548];
LABEL_23:
        *(void *)(a2 + 24) = v84;
        *(_DWORD *)a2 = ParameterUInt32;
        return;
      case 0xA:
        uint64_t v103 = a1[3];
        uint64_t v104 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v103);
        long long v105 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v103, v104);
        v106 = (void *)MEMORY[0x22A688A50](v105);
        swift_bridgeObjectRelease();
        ParameterUInt64 = REVFXSceneComponentGetParameterInt64();

        uint64_t v90 = MEMORY[0x263F8E5C0];
LABEL_25:
        *(void *)(a2 + 24) = v90;
        *(void *)a2 = ParameterUInt64;
        return;
      case 0xB:
      case 0xC:
        uint64_t v7 = a1[3];
        uint64_t v8 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v7);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
        uint64_t v10 = (void *)MEMORY[0x22A688A50](v9);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat();
        os_log_type_t v12 = v11;

        *(void *)(a2 + 24) = MEMORY[0x263F8D5C8];
        *(_DWORD *)a2 = v12;
        return;
      case 0xD:
      case 0x12:
        __int16 v13 = a1[3];
        os_log_type_t v14 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v13);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
        uint64_t v16 = (void *)MEMORY[0x22A688A50](v15);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat2();
        uint64_t v18 = v17;

        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
        *(void *)a2 = v18;
        return;
      case 0xE:
      case 0x13:
        uint64_t v40 = a1[3];
        uint64_t v41 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v40);
        uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
        char v43 = (void *)MEMORY[0x22A688A50](v42);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat3();
        v116 = v44;

        unint64_t v24 = &demangling cache variable for type metadata for SIMD3<Float>;
        goto LABEL_11;
      case 0xF:
      case 0x14:
        uint64_t v19 = a1[3];
        unint64_t v20 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v19);
        uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
        uint64_t v22 = (void *)MEMORY[0x22A688A50](v21);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat4();
        v116 = v23;

        unint64_t v24 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
LABEL_11:
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(v24);
        uint64_t v45 = swift_allocObject();
        *(void *)a2 = v45;
        *(_OWORD *)(v45 + 16) = v116;
        break;
      case 0x10:
      case 0x15:
        uint64_t v46 = a1[3];
        uint64_t v47 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v46);
        uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v46, v47);
        uint64_t v49 = (void *)MEMORY[0x22A688A50](v48);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat3x3();
        v115 = v51;
        v119 = v50;
        v113 = v52;

        type metadata accessor for simd_float3x3(0);
        *(void *)(a2 + 24) = v53;
        uint64_t v54 = (_OWORD *)swift_allocObject();
        *(void *)a2 = v54;
        v54[1] = v119;
        v54[2] = v115;
        v54[3] = v113;
        break;
      case 0x11:
      case 0x16:
        uint64_t v25 = a1[3];
        uint64_t v26 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v25);
        uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v26);
        long long v28 = (void *)MEMORY[0x22A688A50](v27);
        swift_bridgeObjectRelease();
        REVFXSceneComponentGetParameterFloat4x4();
        v114 = v30;
        v117 = v29;
        v111 = v32;
        v112 = v31;

        type metadata accessor for simd_float4x4(0);
        *(void *)(a2 + 24) = v33;
        uint64_t v34 = (_OWORD *)swift_allocObject();
        *(void *)a2 = v34;
        v34[1] = v117;
        _OWORD v34[2] = v114;
        v34[3] = v112;
        v34[4] = v111;
        break;
      case 0x17:
        goto LABEL_4;
      case 0x18:
      case 0x19:
        v118 = (void *)a2;
        uint64_t v35 = a1[3];
        uint64_t v36 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v35);
        uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
        uint64_t v38 = (void *)MEMORY[0x22A688A50](v37);
        swift_bridgeObjectRelease();
        v6(&v120, v4, v5);
        uint64_t v39 = (id)REVFXSceneComponentGetParameterKeyframeAnimation();

        v118[3] = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CAKeyframeAnimation);
        *v118 = v39;
        break;
      default:
        char v55 = a1[3];
        unint64_t v56 = a1[4];
        __swift_project_boxed_opaque_existential_1(a1, v55);
        uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v55, v56);
        uint64_t v58 = (void *)MEMORY[0x22A688A50](v57);
        swift_bridgeObjectRelease();
        uint64_t v59 = (id)REVFXSceneComponentGetParameterString();

        BOOL v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v62 = v61;

        *(void *)(a2 + 24) = MEMORY[0x263F8D310];
        *(void *)a2 = v60;
        *(void *)(a2 + 8) = v62;
        break;
    }
  }
  else
  {
LABEL_4:
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t outlined init with take of VFXComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of VFXComponent?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_227FEDC84()
{
  return MEMORY[0x270FA0238](v0, 80, 15);
}

uint64_t sub_227FEDC94()
{
  return MEMORY[0x270FA0238](v0, 64, 15);
}

uint64_t sub_227FEDCA4()
{
  return MEMORY[0x270FA0238](v0, 32, 15);
}

unint64_t lazy protocol witness table accessor for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState()
{
  unint64_t result = lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState;
  if (!lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXComponent.SimulationState and conformance VFXComponent.SimulationState);
  }
  return result;
}

uint64_t sub_227FEDD0C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 16);
  return result;
}

unsigned __int8 *sub_227FEDD18(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (*(unsigned char *)(a2 + 16) == 1 && v2 == 3) {
    LOBYTE(v2) = 2;
  }
  *(unsigned char *)(a2 + 16) = v2;
  return result;
}

uint64_t sub_227FEDD40()
{
  return 16;
}

__n128 sub_227FEDD4C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for VFXComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for VFXComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for VFXComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for VFXComponent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXComponent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXComponent()
{
  return &type metadata for VFXComponent;
}

unsigned char *storeEnumTagSinglePayload for VFXComponent.SimulationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FEE0D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXComponent.SimulationState()
{
  return &type metadata for VFXComponent.SimulationState;
}

uint64_t FromToByAction.from.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Optional();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t FromToByAction.to.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Optional();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t FromToByAction.by.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Optional();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

__n128 FromToByAction.timingFunction.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (__n128 *)(v2 + *(int *)(a1 + 44));
  unsigned __int32 v4 = v3[1].n128_u32[0];
  unsigned __int8 v5 = v3[1].n128_u8[4];
  __n128 result = *v3;
  *a2 = *v3;
  a2[1].n128_u32[0] = v4;
  a2[1].n128_u8[4] = v5;
  return result;
}

__n128 FromToByAction.timingFunction.setter(__n128 *a1, uint64_t a2)
{
  unsigned __int32 v3 = a1[1].n128_u32[0];
  unsigned __int8 v4 = a1[1].n128_u8[4];
  unsigned __int8 v5 = (__n128 *)(v2 + *(int *)(a2 + 44));
  __n128 result = *a1;
  *unsigned __int8 v5 = *a1;
  v5[1].n128_u32[0] = v3;
  v5[1].n128_u8[4] = v4;
  return result;
}

uint64_t (*FromToByAction.timingFunction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static FromToByAction.TransformMode.default.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -3;
}

uint64_t static FromToByAction.TransformMode.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 253)
  {
    if (v7 == 253)
    {
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(void *)a1, v2, 0xFDu);
      uint64_t v8 = v6;
      uint64_t v9 = v5;
      unsigned __int8 v10 = -3;
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v4 == 254)
  {
    if (v7 == 254)
    {
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(void *)a1, v2, 0xFEu);
      uint64_t v8 = v6;
      uint64_t v9 = v5;
      unsigned __int8 v10 = -2;
      goto LABEL_10;
    }
    goto LABEL_12;
  }
  if (v4 != 255)
  {
    if (v7 <= 0xFC)
    {
      v15[0] = *(void *)a1;
      v15[1] = v2;
      char v16 = v4 & 1;
      v13[0] = v6;
      v13[1] = v5;
      char v14 = v7 & 1;
      outlined copy of FromToByAction<A>.TransformMode<A>(v6, v5, v7);
      outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
      outlined copy of FromToByAction<A>.TransformMode<A>(v6, v5, v7);
      outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
      char v11 = specialized static ActionEntityResolution.== infix(_:_:)(v15, v13);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
      return v11 & 1;
    }
    goto LABEL_12;
  }
  if (v7 != 255)
  {
LABEL_12:
    outlined copy of FromToByAction<A>.TransformMode<A>(*(void *)a2, *(void *)(a2 + 8), v7);
    outlined copy of FromToByAction<A>.TransformMode<A>(v3, v2, v4);
    outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v3, v2, v4);
    outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v6, v5, v7);
    char v11 = 0;
    return v11 & 1;
  }
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(*(void *)a1, v2, 0xFFu);
  uint64_t v8 = v6;
  uint64_t v9 = v5;
  unsigned __int8 v10 = -1;
LABEL_10:
  outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v8, v9, v10);
  char v11 = 1;
  return v11 & 1;
}

BOOL static FromToByAction.TransformMode.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void FromToByAction.TransformMode.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t FromToByAction.TransformMode.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E65726170 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61636F6CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E656373 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65766974616C6572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

Swift::Int FromToByAction.TransformMode.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t FromToByAction.TransformMode.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x746E65726170;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6C61636F6CLL;
      break;
    case 2:
      uint64_t result = 0x656E656373;
      break;
    case 3:
      uint64_t result = 0x65766974616C6572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FromToByAction.TransformMode.RelativeCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 28532 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FromToByAction<A>.TransformMode.CodingKeys(char *a1, char *a2)
{
  return static FromToByAction.TransformMode.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  return FromToByAction.TransformMode.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  FromToByAction.TransformMode.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  Hasher.init(_seed:)();
  FromToByAction.TransformMode.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.CodingKeys()
{
  return FromToByAction.TransformMode.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FromToByAction.TransformMode.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.TransformMode.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized FromToByAction.TransformMode.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  return 0;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  return protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(a1, (uint64_t (*)(void, void))protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError, a2);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.LocalCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.ParentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.ParentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  return 28532;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = FromToByAction.TransformMode.RelativeCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.RelativeCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.TransformMode.LocalCodingKeys@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(void, void)@<X4>, unsigned char *a3@<X8>)
{
  char v4 = a2(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.TransformMode.SceneCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.TransformMode.SceneCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t FromToByAction.TransformMode.encode(to:)(void *a1)
{
  uint64_t v3 = type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v3;
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v25 - v5;
  uint64_t v6 = type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys();
  uint64_t v7 = swift_getWitnessTable();
  uint64_t v39 = v6;
  uint64_t v37 = v7;
  uint64_t v38 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v35 = (char *)&v25 - v8;
  uint64_t v9 = type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v34 = v9;
  uint64_t v32 = v10;
  uint64_t v33 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v31 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v30 = (char *)&v25 - v11;
  type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys();
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v27 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  __int16 v13 = (char *)&v25 - v12;
  type metadata accessor for FromToByAction.TransformMode.CodingKeys();
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  MEMORY[0x270FA5388](v14);
  char v16 = (char *)&v25 - v15;
  uint64_t v26 = *v1;
  uint64_t v25 = v1[1];
  int v17 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v17)
  {
    case 253:
      LOBYTE(v47) = 2;
      uint64_t v19 = v35;
      uint64_t v18 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v38);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v16, v18);
    case 254:
      LOBYTE(v47) = 1;
      unint64_t v20 = v30;
      uint64_t v18 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v33);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v16, v18);
    case 255:
      LOBYTE(v47) = 0;
      uint64_t v18 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v16, v18);
  }
  LOBYTE(v47) = 3;
  uint64_t v22 = v42;
  uint64_t v23 = v46;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v47 = v26;
  uint64_t v48 = v25;
  char v49 = v17 & 1;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  uint64_t v24 = v44;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v22, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v16, v23);
}

uint64_t FromToByAction.TransformMode.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v70 = v3;
  uint64_t v55 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v71 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v58 = (char *)&v50 - v4;
  uint64_t v5 = type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys();
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v68 = v5;
  uint64_t v65 = v6;
  uint64_t v7 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v66 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v57 = (char *)&v50 - v8;
  uint64_t v9 = type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v64 = v9;
  uint64_t v61 = v10;
  uint64_t v63 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v62 = *(void *)(v63 - 8);
  MEMORY[0x270FA5388](v63);
  unint64_t v56 = (char *)&v50 - v11;
  uint64_t v12 = type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys();
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v54 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v14 = (char *)&v50 - v13;
  type metadata accessor for FromToByAction.TransformMode.CodingKeys();
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v72 = *(void *)(v15 - 8);
  uint64_t v73 = v15;
  MEMORY[0x270FA5388](v15);
  int v17 = (char *)&v50 - v16;
  uint64_t v18 = a1;
  uint64_t v19 = a1[3];
  uint64_t v74 = v18;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  unint64_t v20 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    unint64_t v51 = v14;
    uint64_t v52 = v12;
    uint64_t v21 = v73;
    uint64_t v79 = v17;
    *(void *)&long long v75 = KeyedDecodingContainer.allKeys.getter();
    type metadata accessor for Array();
    swift_getWitnessTable();
    *(void *)&long long v77 = ArraySlice.init<A>(_:)();
    *((void *)&v77 + 1) = v22;
    *(void *)&long long v78 = v23;
    *((void *)&v78 + 1) = v24;
    type metadata accessor for ArraySlice();
    swift_getWitnessTable();
    Collection<>.popFirst()();
    uint64_t v25 = v21;
    if (v75 == 4 || (long long v50 = v77, v75 = v77, v76 = v78, (Collection.isEmpty.getter() & 1) == 0))
    {
      uint64_t v36 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v38 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v38 = type metadata accessor for FromToByAction.TransformMode();
      uint64_t v39 = v79;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *MEMORY[0x263F8DCB0], v36);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v39, v25);
    }
    else
    {
      uint64_t v26 = v71;
      uint64_t v28 = v66;
      uint64_t v27 = v67;
      uint64_t v29 = v63;
      uint64_t v30 = v62;
      switch((int)v62)
      {
        case 1:
          LOBYTE(v75) = 1;
          uint64_t v41 = v56;
          uint64_t v42 = v79;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v30 + 8))(v41, v29);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v72 + 8))(v42, v25);
          long long v34 = 0uLL;
          char v35 = -2;
          goto LABEL_11;
        case 2:
          LOBYTE(v75) = 2;
          uint64_t v43 = v57;
          uint64_t v44 = v79;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v33 = v59;
          (*(void (**)(char *, uint64_t))(v28 + 8))(v43, v27);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v25);
          long long v34 = 0uLL;
          char v35 = -3;
          break;
        case 3:
          LOBYTE(v75) = 3;
          uint64_t v45 = v58;
          uint64_t v46 = v79;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
          uint64_t v47 = v55;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v48 = v45;
          uint64_t v49 = v72;
          (*(void (**)(char *, uint64_t))(v26 + 8))(v48, v47);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v25);
          long long v34 = v75;
          char v35 = v76;
LABEL_11:
          uint64_t v33 = v59;
          break;
        default:
          LOBYTE(v75) = 0;
          uint64_t v31 = v51;
          uint64_t v32 = v79;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v33 = v59;
          (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v72 + 8))(v32, v25);
          long long v34 = 0uLL;
          char v35 = -1;
          break;
      }
      *(_OWORD *)uint64_t v33 = v34;
      *(unsigned char *)(v33 + 16) = v35;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
}

uint64_t protocol witness for Decodable.init(from:) in conformance FromToByAction<A>.TransformMode@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return FromToByAction.TransformMode.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FromToByAction<A>.TransformMode(void *a1)
{
  return FromToByAction.TransformMode.encode(to:)(a1);
}

uint64_t FromToByAction.isAdditive.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t FromToByAction.isAdditive.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 52)) = result;
  return result;
}

uint64_t (*FromToByAction.isAdditive.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t FromToByAction.init(from:to:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a6;
  int v26 = a4;
  uint64_t v25 = a1;
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x270FA5388](v14);
  int v17 = (char *)&v24 - v16;
  uint64_t v19 = *(void *)a3;
  uint64_t v18 = *(void *)(a3 + 8);
  int v20 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(unsigned char *)(a3 + 20);
  uint64_t v21 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 32))((char *)&v24 - v16, a2, a5, v15);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v22(v17, 0, 1, a5);
  v22(v13, 1, 1, a5);
  v31[0] = 0;
  v31[1] = 0;
  char v32 = -3;
  v28[0] = v19;
  v28[1] = v18;
  int v29 = v20;
  char v30 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)(v25, (uint64_t)v17, (uint64_t)v13, v31, v28, v26, a5, v27, a7);
}

uint64_t FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v15 = a4[1];
  uint64_t v24 = *a4;
  char v16 = *((unsigned char *)a4 + 16);
  uint64_t v27 = a5[1];
  uint64_t v28 = *a5;
  char v25 = *((unsigned char *)a5 + 20);
  int v26 = *((_DWORD *)a5 + 4);
  int v17 = (int *)type metadata accessor for FromToByAction();
  *(unsigned char *)(a9 + v17[14]) = 1;
  uint64_t v18 = (void *)(a9 + v17[15]);
  *uint64_t v18 = a7;
  v18[1] = a8;
  uint64_t v19 = type metadata accessor for Optional();
  int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(a9, a1, v19);
  v20(a9 + v17[9], a2, v19);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a9 + v17[10], a3, v19);
  uint64_t v22 = a9 + v17[12];
  *(void *)uint64_t v22 = v24;
  *(void *)(v22 + 8) = v15;
  *(unsigned char *)(v22 + 16) = v16;
  uint64_t v23 = a9 + v17[11];
  *(void *)uint64_t v23 = v28;
  *(void *)(v23 + 8) = v27;
  *(_DWORD *)(v23 + 16) = v26;
  *(unsigned char *)(v23 + 20) = v25;
  *(unsigned char *)(a9 + v17[13]) = a6;
  return result;
}

uint64_t FromToByAction.init(from:by:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v27 = a6;
  int v26 = a4;
  uint64_t v23 = a2;
  uint64_t v24 = a7;
  uint64_t v25 = a1;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v17 = *(void *)a3;
  uint64_t v16 = *(void *)(a3 + 8);
  int v18 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(unsigned char *)(a3 + 20);
  uint64_t v19 = *(void *)(a5 - 8);
  int v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v19 + 56);
  v20((char *)&v22 - v14, 1, 1, a5, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v11, v23, a5);
  ((void (*)(char *, void, uint64_t, uint64_t))v20)(v11, 0, 1, a5);
  v31[0] = 0;
  v31[1] = 0;
  char v32 = -3;
  v28[0] = v17;
  v28[1] = v16;
  int v29 = v18;
  char v30 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)(v25, (uint64_t)v15, (uint64_t)v11, v31, v28, v26, a5, v27, v24);
}

uint64_t FromToByAction.init(from:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v28 = a5;
  int v27 = a3;
  uint64_t v26 = a6;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - v13;
  __n128 v16 = MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v25 - v17;
  uint64_t v20 = *(void *)a2;
  uint64_t v19 = *(void *)(a2 + 8);
  int v21 = *(_DWORD *)(a2 + 16);
  LOBYTE(a2) = *(unsigned char *)(a2 + 20);
  uint64_t v22 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 32))((char *)&v25 - v17, a1, a4, v16);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v18, 0, 1, a4);
  v23(v14, 1, 1, a4);
  v23(v11, 1, 1, a4);
  v32[0] = 0;
  v32[1] = 0;
  char v33 = -3;
  v29[0] = v20;
  v29[1] = v19;
  int v30 = v21;
  char v31 = a2;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)((uint64_t)v18, (uint64_t)v14, (uint64_t)v11, v32, v29, v27, a4, v28, v26);
}

uint64_t FromToByAction.init(to:by:timing:isAdditive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v32 = a6;
  int v31 = a4;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v30 = a7;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v25 - v13;
  __n128 v16 = MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v25 - v17;
  uint64_t v19 = *(void *)a3;
  uint64_t v26 = *(void *)(a3 + 8);
  uint64_t v27 = v19;
  int v20 = *(_DWORD *)(a3 + 16);
  LOBYTE(a3) = *(unsigned char *)(a3 + 20);
  uint64_t v21 = *(void *)(a5 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
  v22((char *)&v25 - v17, 1, 1, a5, v16);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  v23(v14, v28, a5);
  ((void (*)(char *, void, uint64_t, uint64_t))v22)(v14, 0, 1, a5);
  v23(v11, v29, a5);
  ((void (*)(char *, void, uint64_t, uint64_t))v22)(v11, 0, 1, a5);
  v36[0] = 0;
  v36[1] = 0;
  char v37 = -3;
  v33[0] = v27;
  v33[1] = v26;
  int v34 = v20;
  char v35 = a3;
  return FromToByAction.init(from:to:by:internalMode:timing:isAdditive:)((uint64_t)v18, (uint64_t)v14, (uint64_t)v11, v36, v33, v31, a5, v32, v30);
}

uint64_t FromToByAction.isReversible.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t FromToByAction.animatedValueType.getter(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for Decodable.init(from:) in conformance FromToByAction<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return FromToByAction.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t FromToByAction.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v44 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v41 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v43 = (uint64_t)&v38 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v46 = (void (*)(char *, uint64_t, uint64_t))((char *)&v38 - v11);
  type metadata accessor for FromToByAction.CodingKeys();
  swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v45 = *(void *)(v48 - 8);
  MEMORY[0x270FA5388](v48);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = type metadata accessor for FromToByAction();
  uint64_t v39 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  __n128 v16 = (char *)&v38 - v15;
  *((unsigned char *)&v38 + *(int *)(v17 + 56) - v15) = 1;
  int v18 = (uint64_t *)((char *)&v38 + *(int *)(v17 + 60) - v15);
  *int v18 = a2;
  v18[1] = a3;
  uint64_t v47 = a3;
  uint64_t v19 = a1[3];
  long long v50 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  uint64_t v49 = v13;
  int v20 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  }
  uint64_t v22 = v45;
  uint64_t v21 = (uint64_t)v46;
  type metadata accessor for FromToByAction.TransformMode();
  char v55 = 3;
  swift_getWitnessTable();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = a2;
  char v24 = v53;
  uint64_t v25 = &v16[*(int *)(v14 + 48)];
  *(_OWORD *)uint64_t v25 = v52;
  v25[16] = v24;
  char v55 = 4;
  lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v26 = v53;
  char v27 = v54;
  uint64_t v28 = &v16[*(int *)(v14 + 44)];
  *(_OWORD *)uint64_t v28 = v52;
  *((_DWORD *)v28 + 4) = v26;
  v28[20] = v27;
  unint64_t v51 = v16;
  static FromToByAction.decodeValueIfPresent(from:forKey:)(a2, v21);
  uint64_t v38 = (int *)v14;
  uint64_t v29 = v44;
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 32);
  v46(v51, v21, v44);
  uint64_t v30 = v43;
  static FromToByAction.decodeValueIfPresent(from:forKey:)(v23, v43);
  int v31 = v51;
  v46(&v51[v38[9]], v30, v29);
  uint64_t v32 = v41;
  uint64_t v47 = 0;
  static FromToByAction.decodeValueIfPresent(from:forKey:)(v23, v41);
  v46(&v31[v38[10]], v32, v29);
  LOBYTE(v52) = 5;
  uint64_t v33 = v48;
  char v34 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v49, v33);
  uint64_t v36 = v38;
  uint64_t v35 = v39;
  v31[v38[13]] = v34 & 1;
  (*(void (**)(uint64_t, char *, int *))(v35 + 16))(v40, v31, v36);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return (*(uint64_t (**)(char *, int *))(v35 + 8))(v31, v36);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FromToByAction<A>(void *a1, uint64_t a2)
{
  return FromToByAction.encode(to:)(a1, a2);
}

uint64_t FromToByAction.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v60 = v5;
  uint64_t v61 = v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v57 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v59 = (char *)&v50 - v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v63 = (char *)&v50 - v11;
  uint64_t v62 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v12);
  char v55 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  unint64_t v56 = (char *)&v50 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v58 = (char *)&v50 - v17;
  uint64_t v18 = *(void *)(a2 + 24);
  type metadata accessor for FromToByAction.CodingKeys();
  swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v64 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v50 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v22 = v19;
  uint64_t v23 = v66;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v24 = (long long *)(v67 + *(int *)(v23 + 48));
  char v25 = *((unsigned char *)v24 + 16);
  long long v68 = *v24;
  LOBYTE(v69) = v25;
  char v71 = 3;
  uint64_t v26 = v18;
  type metadata accessor for FromToByAction.TransformMode();
  swift_getWitnessTable();
  uint64_t v27 = v65;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v27) {
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v21, v22);
  }
  uint64_t v29 = v63;
  uint64_t v65 = v26;
  uint64_t v54 = v3;
  uint64_t v30 = (long long *)(v67 + *(int *)(v23 + 44));
  int v31 = *((_DWORD *)v30 + 4);
  char v32 = *((unsigned char *)v30 + 20);
  long long v68 = *v30;
  int v69 = v31;
  char v70 = v32;
  char v71 = 4;
  lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v50 = v22;
  uint64_t v34 = v60;
  uint64_t v33 = v61;
  uint64_t v35 = v29;
  long long v52 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  int v53 = v21;
  v52(v29, v67, v60);
  uint64_t v36 = v62;
  char v37 = v29;
  uint64_t v38 = v54;
  unint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (v51(v37, 1, v54) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v34);
  }
  else
  {
    uint64_t v39 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v58, v35, v38);
    static FromToByAction.encodeValue(_:to:forKey:)(v39, (uint64_t)v53, 0, v38, v65);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v39, v38);
    uint64_t v34 = v60;
    uint64_t v33 = v61;
  }
  uint64_t v40 = v59;
  uint64_t v41 = v38;
  v52(v59, v67 + *(int *)(v66 + 36), v34);
  if (v51(v40, 1, v38) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v40, v34);
    uint64_t v42 = v62;
  }
  else
  {
    uint64_t v42 = v62;
    uint64_t v43 = (uint64_t)v56;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v56, v40, v38);
    static FromToByAction.encodeValue(_:to:forKey:)(v43, (uint64_t)v53, 1, v38, v65);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v38);
    uint64_t v33 = v61;
  }
  uint64_t v44 = v57;
  v52(v57, v67 + *(int *)(v66 + 40), v34);
  if (v51(v44, 1, v41) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v44, v34);
    uint64_t v45 = v64;
    uint64_t v46 = v50;
  }
  else
  {
    uint64_t v47 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v55, v44, v41);
    static FromToByAction.encodeValue(_:to:forKey:)(v47, (uint64_t)v53, 2, v41, v65);
    uint64_t v45 = v64;
    uint64_t v48 = v41;
    uint64_t v46 = v50;
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v47, v48);
  }
  LOBYTE(v68) = 5;
  uint64_t v49 = (uint64_t)v53;
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v49, v46);
}

uint64_t FromToByAction<>.mode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 216);
  uint64_t v3 = *(void *)(v1 + 224);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 232);
  *(unsigned char *)(a1 + 16) = v4;
  return outlined copy of FromToByAction<A>.TransformMode<A>(v2, v3, v4);
}

__n128 FromToByAction<>.init(from:to:mode:timing:isAdditive:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>)
{
  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Transform?);
  char v12 = v22;
  unsigned __int8 v13 = a2[1].n128_u8[0];
  int v14 = *(_DWORD *)(a3 + 16);
  char v15 = *(unsigned char *)(a3 + 20);
  char v25 = v22;
  char v24 = 0;
  char v23 = 1;
  long long v16 = v21[1];
  *(_OWORD *)a5 = v21[0];
  *(_OWORD *)(a5 + 16) = v16;
  *(_OWORD *)(a5 + 32) = v21[2];
  *(unsigned char *)(a5 + 48) = v12;
  *(__n128 *)(a5 + 64) = a6;
  *(__n128 *)(a5 + 80) = a7;
  *(__n128 *)(a5 + 96) = a8;
  *(unsigned char *)(a5 + 112) = 0;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(unsigned char *)(a5 + 176) = 1;
  *(_OWORD *)(a5 + 192) = *(_OWORD *)a3;
  *(_DWORD *)(a5 + 208) = v14;
  *(unsigned char *)(a5 + 212) = v15;
  __n128 result = *a2;
  *(__n128 *)(a5 + 216) = *a2;
  *(unsigned char *)(a5 + 232) = v13;
  *(unsigned char *)(a5 + 233) = a4;
  *(unsigned char *)(a5 + 234) = 1;
  *(void *)(a5 + 240) = &type metadata for Transform;
  *(void *)(a5 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(from:by:mode:timing:isAdditive:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>, __n128 a8@<Q2>)
{
  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for Transform?);
  char v12 = v22;
  unsigned __int8 v13 = a2[1].n128_u8[0];
  int v14 = *(_DWORD *)(a3 + 16);
  char v15 = *(unsigned char *)(a3 + 20);
  char v25 = 0;
  char v24 = 1;
  char v23 = v22;
  *(__n128 *)a5 = a6;
  *(__n128 *)(a5 + 16) = a7;
  *(__n128 *)(a5 + 32) = a8;
  *(unsigned char *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(unsigned char *)(a5 + 112) = 1;
  long long v16 = v21[1];
  *(_OWORD *)(a5 + 128) = v21[0];
  *(_OWORD *)(a5 + 144) = v16;
  *(_OWORD *)(a5 + 160) = v21[2];
  *(unsigned char *)(a5 + 176) = v12;
  *(_OWORD *)(a5 + 192) = *(_OWORD *)a3;
  *(_DWORD *)(a5 + 208) = v14;
  *(unsigned char *)(a5 + 212) = v15;
  __n128 result = *a2;
  *(__n128 *)(a5 + 216) = *a2;
  *(unsigned char *)(a5 + 232) = v13;
  *(unsigned char *)(a5 + 233) = a4;
  *(unsigned char *)(a5 + 234) = 1;
  *(void *)(a5 + 240) = &type metadata for Transform;
  *(void *)(a5 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(to:by:mode:timing:isAdditive:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>, __n128 a7@<Q2>, __n128 a8@<Q3>, __n128 a9@<Q4>, __n128 a10@<Q5>)
{
  unsigned __int8 v10 = a1[1].n128_u8[0];
  int v11 = *(_DWORD *)(a2 + 16);
  char v12 = *(unsigned char *)(a2 + 20);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(unsigned char *)(a4 + 48) = 1;
  *(__n128 *)(a4 + 64) = a5;
  *(__n128 *)(a4 + 80) = a6;
  *(__n128 *)(a4 + 96) = a7;
  *(unsigned char *)(a4 + 112) = 0;
  *(__n128 *)(a4 + 128) = a8;
  *(__n128 *)(a4 + 144) = a9;
  *(__n128 *)(a4 + 160) = a10;
  *(unsigned char *)(a4 + 176) = 0;
  *(_OWORD *)(a4 + 192) = *(_OWORD *)a2;
  *(_DWORD *)(a4 + 208) = v11;
  *(unsigned char *)(a4 + 212) = v12;
  __n128 result = *a1;
  *(__n128 *)(a4 + 216) = *a1;
  *(unsigned char *)(a4 + 232) = v10;
  *(unsigned char *)(a4 + 233) = a3;
  *(unsigned char *)(a4 + 234) = 1;
  *(void *)(a4 + 240) = &type metadata for Transform;
  *(void *)(a4 + 248) = &protocol witness table for Transform;
  return result;
}

__n128 FromToByAction<>.init(by:timing:isAdditive:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unsigned __int32 v6 = a1[1].n128_u32[0];
  unsigned __int8 v7 = a1[1].n128_u8[4];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(unsigned char *)(a3 + 48) = 1;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(unsigned char *)(a3 + 112) = 1;
  *(__n128 *)(a3 + 128) = a4;
  *(__n128 *)(a3 + 144) = a5;
  *(__n128 *)(a3 + 160) = a6;
  *(unsigned char *)(a3 + 176) = 0;
  __n128 result = *a1;
  *(__n128 *)(a3 + 192) = *a1;
  *(_DWORD *)(a3 + 208) = v6;
  *(unsigned char *)(a3 + 212) = v7;
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 232) = -3;
  *(unsigned char *)(a3 + 233) = a2;
  *(unsigned char *)(a3 + 234) = 1;
  *(void *)(a3 + 240) = &type metadata for Transform;
  *(void *)(a3 + 248) = &protocol witness table for Transform;
  return result;
}

uint64_t FromToByActionHandler.actionUpdated(event:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v40 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v40 - v17;
  type metadata accessor for FromToByAction();
  uint64_t result = type metadata accessor for ActionEvent();
  uint64_t v20 = a1 + *(int *)(result + 76);
  if ((*(unsigned char *)(v20 + 8) & 1) == 0)
  {
    uint64_t v40 = v18;
    uint64_t v41 = result;
    uint64_t v42 = v15;
    uint64_t v43 = a2;
    uint64_t v44 = v6;
    uint64_t v45 = v12;
    double v21 = *(double *)v20;
    BOOL v22 = fabs(*(double *)v20 + -1.0) <= 0.0001;
    int v23 = v21 <= 0.0001 || v22;
    if (v23 == 1)
    {
      uint64_t v24 = v44;
      char v25 = v46;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v11, v46, v5);
      uint64_t v26 = v45;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v11, 1, v4) == 1)
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v5);
      }
      else
      {
        uint64_t v27 = v40;
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v40, v11, v4);
        if (vabdd_f64(*(double *)&v25[*(int *)(v43 + 36)], v21) <= 0.0001)
        {
          ActionEvent.animationState.getter(v41, (uint64_t)v47);
          uint64_t v38 = v48;
          if (v48)
          {
            uint64_t v39 = v49;
            __swift_project_boxed_opaque_existential_1(v47, v48);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 64))(v27, v4, v38, v39);
            (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v4);
            uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v4);
            uint64_t result = outlined destroy of AnimationStateProtocol?((uint64_t)v47);
          }
          uint64_t v36 = v46;
          uint64_t v28 = v43;
LABEL_22:
          *(double *)&v36[*(int *)(v28 + 36)] = v21;
          return result;
        }
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v4);
      }
    }
    uint64_t v28 = v43;
    FromToByActionHandler.evaluateResult(_:)(a1, v43, (uint64_t)v8);
    uint64_t v29 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v8, 1, v4) == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v8, v5);
    }
    LODWORD(v40) = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    int v31 = v42;
    v30(v42, v8, v4);
    ActionEvent.animationState.getter(v41, (uint64_t)v47);
    uint64_t v32 = v48;
    if (v48)
    {
      uint64_t v33 = v49;
      __swift_project_boxed_opaque_existential_1(v47, v48);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 64))(v31, v4, v32, v33);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    }
    else
    {
      outlined destroy of AnimationStateProtocol?((uint64_t)v47);
    }
    uint64_t v34 = v44;
    if (v40)
    {
      uint64_t v35 = v29;
      uint64_t v36 = v46;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v5);
      v30(v36, v42, v4);
      uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v4);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v42, v4);
      uint64_t v37 = v29;
      uint64_t v36 = v46;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v5);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v36, 1, 1, v4);
    }
    goto LABEL_22;
  }
  return result;
}

uint64_t FromToByActionHandler.evaluateResult(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v95 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v88 = type metadata accessor for Optional();
  uint64_t v86 = *(void *)(v88 - 8);
  MEMORY[0x270FA5388](v88);
  uint64_t v94 = (char *)v74 - v7;
  uint64_t v8 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v87 = (char *)v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v74 - v12;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v90 = *(void (**)(uint64_t, char *, uint64_t))(v14 - 8);
  uint64_t v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v14;
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)v74 - v15;
  uint64_t v17 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v85 = (char *)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v89 = (char *)v74 - v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)v74 - v23;
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v74 - v26;
  uint64_t v92 = a2;
  uint64_t v84 = *(void *)(a2 + 24);
  uint64_t v28 = type metadata accessor for FromToByAction();
  uint64_t v29 = type metadata accessor for ActionEvent();
  uint64_t v30 = a1 + *(int *)(v29 + 76);
  if (*(unsigned char *)(v30 + 8) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v95, 1, 1, v5);
  }
  uint64_t v81 = v8;
  double v32 = *(double *)v30;
  uint64_t v76 = v29;
  uint64_t v82 = a1;
  ActionEvent.animationState.getter(v29, (uint64_t)v96);
  uint64_t v33 = v97;
  long long v77 = v13;
  long long v78 = v24;
  if (v97)
  {
    uint64_t v83 = v28;
    uint64_t v80 = v27;
    uint64_t v79 = TupleTypeMetadata2;
    uint64_t v34 = v98;
    __swift_project_boxed_opaque_existential_1(v96, v97);
    long long v75 = *(void (**)(uint64_t, uint64_t, __n128))(v34 + 24);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v36 = type metadata accessor for Optional();
    v74[1] = v74;
    v74[0] = v36;
    uint64_t v37 = *(void *)(v36 - 8);
    __n128 v38 = MEMORY[0x270FA5388](v36);
    uint64_t v40 = (char *)v74 - v39;
    v75(v33, v34, v38);
    uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v40, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, void))(v37 + 8))(v40, v74[0]);
      uint64_t AssociatedConformanceWitness = 0;
      long long v99 = 0u;
      long long v100 = 0u;
    }
    else
    {
      *((void *)&v100 + 1) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v99);
      (*(void (**)(uint64_t *, char *, uint64_t))(v41 + 32))(boxed_opaque_existential_1, v40, AssociatedTypeWitness);
    }
    uint64_t v42 = v95;
    TupleTypeMetadata2 = v79;
    uint64_t v27 = v80;
    uint64_t v28 = v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  }
  else
  {
    outlined destroy of AnimationStateProtocol?((uint64_t)v96);
    long long v99 = 0u;
    long long v100 = 0u;
    uint64_t AssociatedConformanceWitness = 0;
    uint64_t v42 = v95;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData?);
  char v44 = swift_dynamicCast();
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v44)
  {
    v45((uint64_t)v16, 0, 1, v5);
    uint64_t v91 = v45;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v46(v27, v16, v5);
    uint64_t v47 = v94;
    FromToByActionHandler.getStartEnd(event:base:)(v82, (uint64_t)v27, v92, v94);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v47, 1, TupleTypeMetadata2) == 1)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v27, v5);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v88);
      uint64_t v48 = v95;
      uint64_t v49 = 1;
    }
    else
    {
      uint64_t v80 = v27;
      uint64_t v50 = *(int *)(TupleTypeMetadata2 + 48);
      unint64_t v51 = v77;
      long long v52 = &v77[v50];
      uint64_t v93 = &v77[v50];
      uint64_t v83 = v28;
      int v53 = &v47[v50];
      v46(v77, v47, v5);
      v46(v52, v53, v5);
      uint64_t v79 = TupleTypeMetadata2;
      uint64_t v54 = v87;
      char v55 = &v87[*(int *)(TupleTypeMetadata2 + 48)];
      unint64_t v56 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v56(v87, v51, v5);
      v56(v55, v93, v5);
      v46(v78, v54, v5);
      uint64_t v57 = v89;
      v46(v89, v55, v5);
      uint64_t v58 = v82 + *(int *)(v76 + 36);
      uint64_t v59 = (long long *)(v58 + *(int *)(v83 + 44));
      int v60 = *((_DWORD *)v59 + 4);
      char v61 = *((unsigned char *)v59 + 20);
      float v62 = v32;
      long long v99 = *v59;
      LODWORD(v100) = v60;
      BYTE4(v100) = v61;
      uint64_t v63 = *(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16);
      uint64_t v90 = (void (*)(uint64_t, char *, uint64_t))v46;
      if (v63)
      {
        REEasingFunctionEvaluateEx();
        float v62 = v64;
      }
      uint64_t v65 = v80;
      uint64_t v66 = v85;
      uint64_t v67 = v84;
      swift_release();
      long long v68 = v57;
      int v69 = v78;
      (*(void (**)(char *, uint64_t, uint64_t, double))(v67 + 40))(v68, v5, v67, v62);
      if (*(unsigned char *)(v58 + *(int *)(v83 + 52)) == 1)
      {
        uint64_t v70 = v95;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v66, v5, v67);
        char v71 = *(void (**)(char *, uint64_t))(v17 + 8);
        v71(v66, v5);
        v71(v89, v5);
        v71(v69, v5);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v79);
        v71(v65, v5);
        uint64_t v48 = v70;
      }
      else
      {
        uint64_t v72 = *(void (**)(char *, uint64_t))(v17 + 8);
        v72(v89, v5);
        v72(v69, v5);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v77, v79);
        v72(v65, v5);
        uint64_t v73 = v95;
        v90(v95, v66, v5);
        uint64_t v48 = v73;
      }
      uint64_t v49 = 0;
    }
    return v91(v48, v49, 1, v5);
  }
  else
  {
    v45((uint64_t)v16, 1, 1, v5);
    (*((void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))v90 + 1))(v16, v91);
    return v45(v42, 1, 1, v5);
  }
}

uint64_t FromToByActionHandler.getStartEnd(event:base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v130 = a3;
  uint64_t v128 = a2;
  v129 = a4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  v120 = (char *)&v109 - v8;
  uint64_t v140 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v9);
  v114 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v123 = (char *)&v109 - v12;
  MEMORY[0x270FA5388](v13);
  v111 = (char *)&v109 - v14;
  MEMORY[0x270FA5388](v15);
  v113 = (char *)&v109 - v16;
  MEMORY[0x270FA5388](v17);
  v139 = (char *)&v109 - v18;
  MEMORY[0x270FA5388](v19);
  v122 = (char *)&v109 - v20;
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v133 = v5;
  uint64_t v116 = v21;
  uint64_t v22 = type metadata accessor for FromToByAction();
  uint64_t v23 = type metadata accessor for ActionEvent();
  uint64_t v117 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  v118 = (char *)&v109 - v24;
  uint64_t v25 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v30);
  v125 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  v124 = (char *)&v109 - v33;
  MEMORY[0x270FA5388](v34);
  v112 = (char *)&v109 - v35;
  MEMORY[0x270FA5388](v36);
  v127 = (char *)&v109 - v37;
  MEMORY[0x270FA5388](v38);
  v126 = (char *)&v109 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v42 = (char *)&v109 - v41;
  MEMORY[0x270FA5388](v43);
  uint64_t v45 = (char *)&v109 - v44;
  __n128 v47 = MEMORY[0x270FA5388](v46);
  uint64_t v119 = v48;
  uint64_t v49 = *(int *)(v48 + 36);
  uint64_t v121 = a1;
  uint64_t v50 = a1 + v49;
  uint64_t v135 = v29;
  unint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v29 + 16);
  v137 = (char *)&v109 - v52;
  v51((char *)&v109 - v52, v50, v7, v47);
  uint64_t v53 = v50 + *(int *)(v22 + 36);
  v138 = v45;
  ((void (*)(char *, uint64_t, uint64_t))v51)(v45, v53, v7);
  uint64_t v54 = v50 + *(int *)(v22 + 40);
  v132 = v42;
  uint64_t v136 = v29 + 16;
  v134 = (void (*)(char *, char *, uint64_t))v51;
  ((void (*)(char *, uint64_t, uint64_t))v51)(v42, v54, v7);
  (*(void (**)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v25 + 16))(v28, v131, v130);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByActionHandler<Transform>);
  if (swift_dynamicCast())
  {
    char v55 = v120;
    (*(void (**)(char *, uint64_t, uint64_t))(v117 + 16))(v118, v121, v119);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionEvent<FromToByAction<Transform>>);
    swift_dynamicCast();
    memcpy(v144, v145, sizeof(v144));
    (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v122, v128, v133);
    swift_dynamicCast();
    specialized FromToByActionHandler<>.getFromTo(event:base:)((uint64_t)v144, (uint64_t)v147, v141, v142, v143);
    memcpy(v146, v144, 0x1D0uLL);
    outlined release of ActionEvent<FromToByAction<Transform>>((uint64_t)v146);
    uint64_t v56 = v135;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v135 + 8);
    uint64_t v58 = v138;
    uint64_t v59 = v7;
    v57(v138, v7);
    int v60 = v137;
    v57(v137, v7);
    outlined init with take of Transform?((uint64_t)v147, (uint64_t)v145, &demangling cache variable for type metadata for (from: Transform?, to: Transform?)?);
    if (BYTE1(v145[7]))
    {
      v57(v132, v7);
      uint64_t v61 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v129, 1, 1, v61);
    }
    v144[0] = v145[0];
    v144[1] = v145[1];
    v144[2] = v145[2];
    LOBYTE(v144[3]) = v145[3];
    v144[4] = v145[4];
    v144[5] = v145[5];
    v144[6] = v145[6];
    LOBYTE(v144[7]) = v145[7];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (from: Transform?, to: Transform?));
    uint64_t v64 = TupleTypeMetadata2;
    swift_dynamicCast();
    uint64_t v65 = &v55[*(int *)(v64 + 48)];
    uint64_t v66 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    v66(v60, v55, v59);
    v66(v58, v65, v59);
    uint64_t v63 = v140;
  }
  else
  {
    uint64_t v59 = v7;
    uint64_t v63 = v140;
    int v60 = v137;
  }
  uint64_t v67 = v126;
  long long v68 = v134;
  v134(v126, v60, v59);
  uint64_t v69 = v59;
  uint64_t v71 = v63 + 48;
  uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
  uint64_t v72 = v133;
  BOOL v73 = v70(v67, 1, v133) == 1;
  uint64_t v74 = v63;
  long long v75 = v127;
  uint64_t v130 = v71;
  v131 = v70;
  if (v73)
  {
    v126 = *(char **)(v135 + 8);
    ((void (*)(char *, uint64_t))v126)(v67, v69);
    v68(v75, v138, v69);
    unsigned int v76 = v70(v75, 1, v72);
    uint64_t v110 = v69;
    if (v76 == 1)
    {
      long long v77 = v139;
      uint64_t v78 = v140;
    }
    else
    {
      uint64_t v81 = v113;
      v127 = *(char **)(v140 + 32);
      ((void (*)(char *, char *, uint64_t))v127)(v113, v75, v72);
      long long v75 = v112;
      uint64_t v82 = v69;
      uint64_t v83 = v140;
      v68(v112, v132, v82);
      if (v131(v75, 1, v72) != 1)
      {
        uint64_t v84 = v81;
        uint64_t v85 = v111;
        ((void (*)(char *, char *, uint64_t))v127)(v111, v75, v72);
        uint64_t v86 = v116;
        uint64_t v87 = v122;
        (*(void (**)(uint64_t, uint64_t))(v116 + 16))(v72, v116);
        (*(void (**)(char *, uint64_t, uint64_t))(v86 + 24))(v87, v72, v86);
        uint64_t v88 = *(void (**)(char *, uint64_t))(v83 + 8);
        v88(v87, v72);
        v88(v85, v72);
        v88(v84, v72);
        uint64_t v79 = v124;
        uint64_t v80 = v125;
        uint64_t v69 = v110;
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v83 + 8))(v81, v72);
      long long v77 = v139;
      uint64_t v78 = v83;
    }
    uint64_t v69 = v110;
    ((void (*)(char *, uint64_t))v126)(v75, v110);
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v128, v72);
    uint64_t v79 = v124;
    uint64_t v80 = v125;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v139, v67, v72);
    uint64_t v79 = v124;
    uint64_t v80 = v125;
  }
LABEL_14:
  uint64_t v89 = v72;
  uint64_t v90 = v138;
  uint64_t v91 = v134;
  v134(v79, v138, v69);
  uint64_t v92 = v131;
  unsigned int v93 = v131(v79, 1, v72);
  uint64_t v94 = *(void (**)(char *, uint64_t))(v135 + 8);
  if (v93 == 1)
  {
    uint64_t v135 = *(void *)(v135 + 8);
    v94(v79, v69);
    uint64_t v95 = v132;
    v91(v80, v132, v69);
    if (v92(v80, 1, v72) == 1)
    {
      unsigned long long v96 = (void (*)(char *, uint64_t))v135;
      ((void (*)(char *, uint64_t))v135)(v95, v69);
      v96(v138, v69);
      v96(v137, v69);
      v96(v80, v69);
      uint64_t v97 = v140;
      uint64_t v98 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v123, v128, v72);
      long long v99 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
    }
    else
    {
      uint64_t v102 = v140;
      uint64_t v103 = v80;
      long long v99 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
      uint64_t v104 = v114;
      v99(v114, v103, v72);
      long long v105 = v123;
      (*(void (**)(char *, uint64_t))(v116 + 24))(v104, v72);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v72);
      v106 = (void (*)(char *, uint64_t))v135;
      ((void (*)(char *, uint64_t))v135)(v132, v69);
      v106(v138, v69);
      v106(v137, v69);
      uint64_t v98 = v105;
    }
    uint64_t v101 = v129;
  }
  else
  {
    long long v100 = *(void (**)(char *, uint64_t))(v135 + 8);
    v94(v132, v69);
    v100(v90, v69);
    v100(v137, v69);
    long long v99 = *(void (**)(char *, char *, uint64_t))(v140 + 32);
    uint64_t v98 = v123;
    v99(v123, v79, v89);
    uint64_t v101 = v129;
    uint64_t v72 = v89;
  }
  uint64_t v107 = swift_getTupleTypeMetadata2();
  v108 = &v101[*(int *)(v107 + 48)];
  v99(v101, v139, v72);
  v99(v108, v98, v72);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v101, 0, 1, v107);
}

unint64_t FromToByAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FromToByAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

uint64_t FromToByAction.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 1836020326;
  switch(a1)
  {
    case 1:
      uint64_t result = 28532;
      break;
    case 2:
      uint64_t result = 31074;
      break;
    case 3:
      uint64_t result = 0x726F66736E617274;
      break;
    case 4:
      uint64_t result = 0x7546676E696D6974;
      break;
    case 5:
      uint64_t result = 0x6974696464417369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FromToByAction.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 1836020326;
  switch(a1)
  {
    case 1:
      uint64_t result = 28532;
      break;
    case 2:
      uint64_t result = 31074;
      break;
    case 3:
      uint64_t result = 0x726F66736E617274;
      break;
    case 4:
      uint64_t result = 0x7546676E696D6974;
      break;
    case 5:
      uint64_t result = 0x6974696464417369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FromToByAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D338];

  return MEMORY[0x270F9F940](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAE8](a1, a2, WitnessTable, v5);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FromToByAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance FromToByAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x263F8D320];

  return MEMORY[0x270F9DAF0](a1, a2, a3, WitnessTable, v7);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = FromToByAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FromToByAction<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = FromToByAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FromToByAction<A>.CodingKeys()
{
  return FromToByAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FromToByAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance FromToByAction<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized FromToByAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FromToByAction<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270FA00B8](a1, WitnessTable);
}

uint64_t static FromToByAction.DecodingErrors.== infix(_:_:)()
{
  return 1;
}

void FromToByAction.DecodingErrors.hash(into:)()
{
}

Swift::Int FromToByAction.DecodingErrors.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t static FromToByAction.decodeValueIfPresent(from:forKey:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for FromToByAction.CodingKeys();
  swift_getWitnessTable();
  type metadata accessor for KeyedDecodingContainer();
  if (KeyedDecodingContainer.contains(_:)())
  {
    uint64_t result = static FromToByAction.decodeValue(from:forKey:)();
    if (v2) {
      return result;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v6, 1, a1);
}

uint64_t static FromToByAction.encodeValue(_:to:forKey:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a5;
  int v48 = a3;
  uint64_t v47 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v41 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v42 = (char *)&v39 - v10;
  MEMORY[0x270FA5388](v11);
  uint64_t v43 = (char *)&v39 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v44 = (char *)&v39 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v45 = (char *)&v39 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v39 - v18;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v39 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v39 - v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v39 - v27;
  __n128 v30 = MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v39 - v31;
  uint64_t v46 = v7;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v33((char *)&v39 - v31, a1, v34, v30);
  if (swift_dynamicCast())
  {
    ((void (*)(char *, uint64_t, uint64_t))v33)(v28, a1, a4);
    swift_dynamicCast();
    LOBYTE(v50) = v48;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, a4);
  }
  uint64_t v40 = (void (*)(char *, uint64_t, uint64_t))v33;
  char v35 = v48;
  if (swift_dynamicCast())
  {
    v40(v25, a1, a4);
    swift_dynamicCast();
    LOBYTE(v50) = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, a4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCast())
  {
    v40(v22, a1, a4);
    swift_dynamicCast();
    *(void *)&long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>);
LABEL_11:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, a4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCast())
  {
    v40(v19, a1, a4);
    swift_dynamicCast();
    long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>);
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCast())
  {
    v40(v45, a1, a4);
    swift_dynamicCast();
    long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    goto LABEL_11;
  }
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCast())
  {
    v40(v44, a1, a4);
    swift_dynamicCast();
    long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    v40(v43, a1, a4);
    swift_dynamicCast();
    long long v50 = v53;
    long long v51 = v54;
    long long v52 = v55;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type Transform and conformance Transform();
    goto LABEL_11;
  }
  int v37 = swift_dynamicCast();
  uint64_t v38 = v40;
  if (v37)
  {
    swift_bridgeObjectRelease();
    v38(v42, a1, a4);
    swift_dynamicCast();
    *(void *)&long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms();
  }
  else
  {
    if (!swift_dynamicCast())
    {
      type metadata accessor for FromToByAction.DecodingErrors();
      swift_getWitnessTable();
      swift_allocError();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, a4);
    }
    swift_bridgeObjectRelease();
    v38(v41, a1, a4);
    swift_dynamicCast();
    *(void *)&long long v50 = v53;
    char v56 = v35;
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedEncodingContainer();
    lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights();
  }
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, a4);
}

uint64_t static FromToByAction.decodeValue(from:forKey:)()
{
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v0) {
      return result;
    }
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v0) {
      return result;
    }
    return swift_dynamicCast();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for FromToByAction.CodingKeys();
    swift_getWitnessTable();
    type metadata accessor for KeyedDecodingContainer();
    uint64_t v2 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
    unint64_t v3 = &demangling cache variable for type metadata for SIMD2<Float>;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      type metadata accessor for FromToByAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedDecodingContainer();
      uint64_t v2 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
      unint64_t v3 = &demangling cache variable for type metadata for SIMD3<Float>;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for simd_quatf(0);
        if (swift_dynamicCastMetatype())
        {
          type metadata accessor for FromToByAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else if (swift_dynamicCastMetatype())
        {
          type metadata accessor for FromToByAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Transform and conformance Transform();
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else if (swift_dynamicCastMetatype())
        {
          type metadata accessor for FromToByAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms();
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        else
        {
          if (!swift_dynamicCastMetatype())
          {
            type metadata accessor for FromToByAction.DecodingErrors();
            swift_getWitnessTable();
            swift_allocError();
            return swift_willThrow();
          }
          type metadata accessor for FromToByAction.CodingKeys();
          swift_getWitnessTable();
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights();
          uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v0) {
            return swift_dynamicCast();
          }
        }
        return result;
      }
      type metadata accessor for FromToByAction.CodingKeys();
      swift_getWitnessTable();
      type metadata accessor for KeyedDecodingContainer();
      uint64_t v2 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
      unint64_t v3 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
    }
  }
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v2, v3);
  uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v0) {
    return swift_dynamicCast();
  }
  return result;
}

uint64_t type metadata accessor for FromToByAction.TransformMode.RelativeCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.TransformMode.SceneCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.TransformMode.LocalCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.TransformMode.ParentCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.TransformMode.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.TransformMode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FromToByAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in FromToByAction<A>.DecodingErrors()
{
  return swift_getWitnessTable();
}

uint64_t type metadata instantiation function for FromToByAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 48);
}

uint64_t type metadata completion function for FromToByAction()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FromToByAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  if (*(_DWORD *)(v4 + 84)) {
    uint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    uint64_t v6 = *(void *)(v4 + 64) + 1;
  }
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = ~v7;
  uint64_t v10 = (v6 + v7 + a1) & ~v7;
  if (!v5(v10, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v10, v3);
  }
  uint64_t v11 = (v8 + v10) & v9;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v11, 1, v3);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v11, v3);
  }
  if (*(unsigned __int8 *)(((((v6 + v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8) + 0x10) <= 1u)
  {
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

void *initializeWithCopy for FromToByAction(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (!v8) {
    ++v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = v9 + v11;
  uint64_t v29 = a1;
  uint64_t v13 = ~v11;
  uint64_t v14 = (void *)(((unint64_t)a1 + v9 + v11) & ~v11);
  uint64_t v15 = (const void *)(((unint64_t)a2 + v9 + v11) & ~v11);
  if (v7(v15, 1, v5))
  {
    memcpy(v14, v15, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v14, v15, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  uint64_t v16 = (void *)(((unint64_t)v14 + v12) & v13);
  unint64_t v17 = ((unint64_t)v15 + v12) & v13;
  if (v7((const void *)v17, 1, v5))
  {
    memcpy(v16, (const void *)(((unint64_t)v15 + v12) & v13), v9);
  }
  else
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v6 + 16))(v16, ((unint64_t)v15 + v12) & v13, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
  }
  unint64_t v18 = ((unint64_t)v16 + v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v19 = (v9 + 15 + v17) & 0xFFFFFFFFFFFFFFF0;
  long long v20 = *(_OWORD *)v19;
  *(void *)(v18 + 13) = *(void *)(v19 + 0xD);
  *(_OWORD *)unint64_t v18 = v20;
  unint64_t v21 = (v18 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v19 + 28) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v23 = *(unsigned __int8 *)(v22 + 16);
  if (v23 > 1)
  {
    long long v27 = *(_OWORD *)v22;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v27;
  }
  else
  {
    BOOL v24 = v23 != 0;
    uint64_t v25 = *(void *)v22;
    uint64_t v26 = *(void *)(v22 + 8);
    outlined copy of ActionEntityResolution();
    *(void *)unint64_t v21 = v25;
    *(void *)(v21 + 8) = v26;
    *(unsigned char *)(v21 + 16) = v24;
  }
  *(unsigned char *)(v21 + 17) = *(unsigned char *)(v22 + 17);
  *(unsigned char *)(v21 + 18) = *(unsigned char *)(v22 + 18);
  *(_OWORD *)((v21 + 26) & 0xFFFFFFFFFFFFFFF0) = *(_OWORD *)((v22 + 26) & 0xFFFFFFFFFFFFFFF0);
  return v29;
}

void *assignWithCopy for FromToByAction(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v39 = a1;
  uint64_t v16 = ~v14;
  unint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  unint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v17, v18, v5);
LABEL_21:
  unint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  unint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v21, v22, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
LABEL_26:
    memcpy(v21, v22, v13);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v21, v22, v5);
LABEL_27:
  unint64_t v25 = ((unint64_t)v21 + v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v26 = ((unint64_t)v22 + v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v27 = *(_OWORD *)v26;
  *(void *)(v25 + 13) = *(void *)(v26 + 0xD);
  *(_OWORD *)unint64_t v25 = v27;
  unint64_t v28 = (v25 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v26 + 28) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
  if (*(unsigned __int8 *)(v28 + 16) > 1u)
  {
    if (v30 <= 1)
    {
      BOOL v34 = v30 != 0;
      uint64_t v35 = *(void *)v29;
      uint64_t v36 = *(void *)(v29 + 8);
      outlined copy of ActionEntityResolution();
      *(void *)unint64_t v28 = v35;
      *(void *)(v28 + 8) = v36;
      *(unsigned char *)(v28 + 16) = v34;
      goto LABEL_34;
    }
LABEL_33:
    long long v37 = *(_OWORD *)v29;
    *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
    *(_OWORD *)unint64_t v28 = v37;
    goto LABEL_34;
  }
  if (v30 > 1)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_33;
  }
  BOOL v31 = v30 != 0;
  uint64_t v32 = *(void *)v29;
  uint64_t v33 = *(void *)(v29 + 8);
  outlined copy of ActionEntityResolution();
  *(void *)unint64_t v28 = v32;
  *(void *)(v28 + 8) = v33;
  *(unsigned char *)(v28 + 16) = v31;
  outlined consume of ActionEntityResolution();
LABEL_34:
  *(unsigned char *)(v28 + 17) = *(unsigned char *)(v29 + 17);
  *(unsigned char *)(v28 + 18) = *(unsigned char *)(v29 + 18);
  *(_OWORD *)((v28 + 26) & 0xFFFFFFFFFFFFFFF0) = *(_OWORD *)((v29 + 26) & 0xFFFFFFFFFFFFFFF0);
  return v39;
}

void *initializeWithTake for FromToByAction(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  if (v7(a2, 1, v5))
  {
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
    if (v8) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    int v8 = *(_DWORD *)(v6 + 84);
    size_t v9 = *(void *)(v6 + 64);
  }
  if (!v8) {
    ++v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = v9 + v11;
  unint64_t v25 = a1;
  uint64_t v13 = ~v11;
  uint64_t v14 = (void *)(((unint64_t)a1 + v9 + v11) & ~v11);
  size_t v15 = (const void *)(((unint64_t)a2 + v9 + v11) & ~v11);
  if (v7(v15, 1, v5))
  {
    memcpy(v14, v15, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  uint64_t v16 = (void *)(((unint64_t)v14 + v12) & v13);
  unint64_t v17 = ((unint64_t)v15 + v12) & v13;
  if (v7((const void *)v17, 1, v5))
  {
    memcpy(v16, (const void *)(((unint64_t)v15 + v12) & v13), v9);
  }
  else
  {
    (*(void (**)(void *, unint64_t, uint64_t))(v6 + 32))(v16, ((unint64_t)v15 + v12) & v13, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
  }
  unint64_t v18 = ((unint64_t)v16 + v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v19 = (v9 + 15 + v17) & 0xFFFFFFFFFFFFFFF0;
  long long v20 = *(_OWORD *)v19;
  *(void *)(v18 + 13) = *(void *)(v19 + 0xD);
  *(_OWORD *)unint64_t v18 = v20;
  unint64_t v21 = (v18 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v19 + 28) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  *(_OWORD *)unint64_t v21 = v23;
  *(unsigned char *)(v21 + 17) = *(unsigned char *)(v22 + 17);
  *(unsigned char *)(v21 + 18) = *(unsigned char *)(v22 + 18);
  *(_OWORD *)((v21 + 26) & 0xFFFFFFFFFFFFFFF0) = *(_OWORD *)((v22 + 26) & 0xFFFFFFFFFFFFFFF0);
  return v25;
}

void *assignWithTake for FromToByAction(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v13 = *(void *)(v6 + 64);
  }
  else {
    size_t v13 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  size_t v15 = v13 + v14;
  uint64_t v35 = a1;
  uint64_t v16 = ~v14;
  unint64_t v17 = (void *)(((unint64_t)a1 + v13 + v14) & ~v14);
  unint64_t v18 = (void *)(((unint64_t)a2 + v13 + v14) & ~v14);
  int v19 = v7(v17, 1, v5);
  int v20 = v7(v18, 1, v5);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v17, v18, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
LABEL_20:
    memcpy(v17, v18, v13);
    goto LABEL_21;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v17, v18, v5);
LABEL_21:
  unint64_t v21 = (void *)(((unint64_t)v17 + v15) & v16);
  unint64_t v22 = (void *)(((unint64_t)v18 + v15) & v16);
  int v23 = v7(v21, 1, v5);
  int v24 = v7(v22, 1, v5);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v21, v22, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v21, v5);
LABEL_26:
    memcpy(v21, v22, v13);
    goto LABEL_27;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v21, v22, v5);
LABEL_27:
  unint64_t v25 = ((unint64_t)v21 + v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v26 = ((unint64_t)v22 + v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  long long v27 = *(_OWORD *)v26;
  *(void *)(v25 + 13) = *(void *)(v26 + 0xD);
  *(_OWORD *)unint64_t v25 = v27;
  unint64_t v28 = (v25 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v26 + 28) & 0xFFFFFFFFFFFFFFF8;
  if (*(unsigned __int8 *)(v28 + 16) > 1u)
  {
    long long v32 = *(_OWORD *)v29;
    *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
    *(_OWORD *)unint64_t v28 = v32;
    BOOL v31 = v35;
  }
  else
  {
    unsigned int v30 = *(unsigned __int8 *)(v29 + 16);
    BOOL v31 = v35;
    if (v30 > 1)
    {
      outlined consume of ActionEntityResolution();
      long long v33 = *(_OWORD *)v29;
      *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
      *(_OWORD *)unint64_t v28 = v33;
    }
    else
    {
      *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
      *(unsigned char *)(v28 + 16) = v30 != 0;
      outlined consume of ActionEntityResolution();
    }
  }
  *(unsigned char *)(v28 + 17) = *(unsigned char *)(v29 + 17);
  *(unsigned char *)(v28 + 18) = *(unsigned char *)(v29 + 18);
  *(_OWORD *)((v28 + 26) & 0xFFFFFFFFFFFFFFF0) = *(_OWORD *)((v29 + 26) & 0xFFFFFFFFFFFFFFF0);
  return v31;
}

uint64_t getEnumTagSinglePayload for FromToByAction(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = v8 + 15;
  if (v7 < a2)
  {
    unint64_t v12 = ((((((v11 + ((v10 + (v10 & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8) + 26) & 0xFFFFFFFFFFFFFFF0)
        + 16;
    unsigned int v13 = a2 - v7;
    uint64_t v14 = v12 & 0xFFFFFFF0;
    if ((v12 & 0xFFFFFFF0) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v12);
        if (!v18) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v18) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227FF5D0CLL);
      case 4:
        int v18 = *(_DWORD *)((char *)a1 + v12);
        if (!v18) {
          break;
        }
LABEL_27:
        int v20 = v18 - 1;
        if (v14)
        {
          int v20 = 0;
          LODWORD(v14) = *a1;
        }
        return v7 + (v14 | v20) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v22 = *(void *)((((((v11 + ((v10 + (((unint64_t)a1 + v10) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)
                     + 26) & 0xFFFFFFFFFFFFFFF0);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if ((v22 + 1) >= 2) {
      return v22;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v21 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for FromToByAction(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  size_t v13 = ((((((v11 + 15 + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)
        + 26) & 0xFFFFFFFFFFFFFFF0)
      + 16;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((((((v11
             + 15
             + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 26) & 0xFFFFFFF0) == 0xFFFFFFF0)
      unsigned int v15 = v14 + 1;
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((((((v11
             + 15
             + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 26) & 0xFFFFFFF0) == 0xFFFFFFF0)
      int v17 = a2 - v10;
    else {
      int v17 = 1;
    }
    if (((((((v11
             + 15
             + ((v11 + v12 + ((v11 + v12) & ~v12)) & ~v12)) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 26) & 0xFFFFFFF0) != 0xFFFFFFF0)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x227FF5FFCLL);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFE)
        {
          unint64_t v22 = (void *)((((((v11 + 15 + ((v11 + v12 + ((unint64_t)&a1[v11 + v12] & ~v12)) & ~v12)) & 0xFFFFFFFFFFFFFFF0)
                            + 28) & 0xFFFFFFFFFFFFFFF8)
                          + 26) & 0xFFFFFFFFFFFFFFF0);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v22 = 0;
            v22[1] = 0;
            *(_DWORD *)unint64_t v22 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v22 = a2;
          }
        }
        else if (v9 >= a2)
        {
          int v23 = *(void (**)(void))(v7 + 56);
          v23();
        }
        else
        {
          if (v11 <= 3) {
            int v19 = ~(-1 << (8 * v11));
          }
          else {
            int v19 = -1;
          }
          if (v11)
          {
            int v20 = v19 & (~v9 + a2);
            if (v11 <= 3) {
              int v21 = v11;
            }
            else {
              int v21 = 4;
            }
            bzero(a1, v11);
            switch(v21)
            {
              case 2:
                *(_WORD *)a1 = v20;
                break;
              case 3:
                *(_WORD *)a1 = v20;
                a1[2] = BYTE2(v20);
                break;
              case 4:
                *(_DWORD *)a1 = v20;
                break;
              default:
                *a1 = v20;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t destroy for FromToByAction.TransformMode(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 16) <= 1u) {
    return outlined consume of ActionEntityResolution();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FromToByAction.TransformMode(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 > 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    BOOL v4 = v3 != 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    outlined copy of ActionEntityResolution();
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for FromToByAction.TransformMode(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) > 1u)
  {
    if (v4 <= 1)
    {
      BOOL v8 = v4 != 0;
      uint64_t v10 = *a2;
      uint64_t v9 = a2[1];
      outlined copy of ActionEntityResolution();
      *(void *)a1 = v10;
      *(void *)(a1 + 8) = v9;
      *(unsigned char *)(a1 + 16) = v8;
      return a1;
    }
LABEL_7:
    long long v11 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if (v4 > 1)
  {
    outlined consume of ActionEntityResolution();
    goto LABEL_7;
  }
  BOOL v5 = v4 != 0;
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  outlined copy of ActionEntityResolution();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t assignWithTake for FromToByAction.TransformMode(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) > 1u) {
    goto LABEL_5;
  }
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 > 1)
  {
    outlined consume of ActionEntityResolution();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4 != 0;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByAction.TransformMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 1) {
    unsigned int v4 = (v3 ^ 0xFF) + 1;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 4) {
    return v4 - 3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FromToByAction.TransformMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -3 - a2;
    }
  }
  return result;
}

uint64_t getEnumTag for FromToByAction.TransformMode(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for FromToByAction.TransformMode(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for FromToByAction.DecodingErrors()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for FromToByAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FF63C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FromToByAction.TransformMode.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FF64BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FromToByAction.DecodingErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227FF6580);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FromToByAction<A>.TransformMode.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in FromToByAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.ParentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.ParentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.LocalCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.SceneCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.SceneCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in FromToByAction<A>.TransformMode.RelativeCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t specialized FromToByAction.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t specialized FromToByAction.TransformMode.CodingKeys.init(intValue:)()
{
  return 4;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights()
{
  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights and conformance BlendShapeWeights);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms()
{
  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms;
  if (!lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms and conformance JointTransforms);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Transform and conformance Transform()
{
  unint64_t result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Transform and conformance Transform;
  if (!lazy protocol witness table cache variable for type Transform and conformance Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Transform and conformance Transform);
  }
  return result;
}

uint64_t specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, __n128 *a3@<X8>, long long a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  int v7 = *(unsigned __int8 *)(result + 16);
  if (v7 == 253)
  {
    if (a2)
    {
      swift_retain();
      uint64_t v9 = specialized HasHierarchy.parent.getter();
      if (v9)
      {
        *(double *)v10.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v9, 0);
        simd_float4 v40 = v11;
        simd_float4 v42 = v10;
        simd_float4 v37 = v13;
        simd_float4 v38 = v12;
        swift_release();
        v51.columns[1] = v40;
        v51.columns[0] = v42;
        v51.columns[3] = v37;
        v51.columns[2] = v38;
        __invert_f4(v51);
      }
      REMakeSRTFromMatrix();
      __n128 v41 = v22;
      __n128 v43 = v21;
      __n128 v39 = v23;
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      goto LABEL_25;
    }
LABEL_17:
    uint64_t v49 = 0;
    unint64_t v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    unint64_t result = specialized static AnimationLogger.logError(_:)(0xD000000000000047, 0x8000000228355130);
LABEL_30:
    a4 = 0uLL;
    char v8 = 1;
    a5 = 0uLL;
    a6 = 0uLL;
    goto LABEL_31;
  }
  if (v7 == 254)
  {
    char v8 = 0;
    goto LABEL_31;
  }
  if (v7 != 255)
  {
    if (a2)
    {
      uint64_t v15 = *(void *)result;
      uint64_t v14 = *(void *)(result + 8);
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (!Strong)
      {
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        _StringGuts.grow(_:)(70);
        uint64_t v47 = 0;
        unint64_t v48 = 0xE000000000000000;
        v24._uint64_t countAndFlagsBits = 0xD000000000000019;
        v24._object = (void *)0x8000000228355180;
        String.append(_:)(v24);
        v25._object = (void *)0x80000002283551A0;
        v25._uint64_t countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v25);
        uint64_t v44 = v15;
        unint64_t v45 = v14;
        char v46 = v7 & 1;
        v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 0xD000000000000030;
        v27._object = (void *)0x80000002283551C0;
        String.append(_:)(v27);
        specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
LABEL_29:
        swift_release();
        unint64_t result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      uint64_t v17 = Strong;
      if (v7)
      {
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        uint64_t SceneNullable = REEntityGetSceneNullable();
        if (!SceneNullable) {
          goto LABEL_28;
        }
        uint64_t v19 = SceneNullable;
        id v20 = (id)RESceneGetSwiftObject();
        type metadata accessor for Scene();
        if (v20)
        {
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          swift_allocObject();
          Scene.init(coreScene:)(v19);
        }
        uint64_t v28 = Scene.findEntity(named:)();
        swift_release();
        if (!v28) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v44 = v15;
        swift_retain();
        outlined copy of FromToByAction<A>.TransformMode<A>(v15, v14, v7);
        uint64_t v28 = Entity.subscript.getter(&v44);
        if (!v28)
        {
LABEL_28:
          uint64_t v44 = 0;
          unint64_t v45 = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          uint64_t v47 = v44;
          unint64_t v48 = v45;
          v33._uint64_t countAndFlagsBits = 0xD000000000000019;
          v33._object = (void *)0x8000000228355180;
          String.append(_:)(v33);
          v34._object = (void *)0x80000002283551A0;
          v34._uint64_t countAndFlagsBits = 0xD000000000000012;
          String.append(_:)(v34);
          uint64_t v44 = v15;
          unint64_t v45 = v14;
          char v46 = v7 & 1;
          _print_unlocked<A, B>(_:_:)();
          outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v15, v14, v7);
          v35._uint64_t countAndFlagsBits = 0x206D6F726620;
          v35._object = (void *)0xE600000000000000;
          String.append(_:)(v35);
          uint64_t v44 = v17;
          type metadata accessor for Entity();
          _print_unlocked<A, B>(_:_:)();
          v36._uint64_t countAndFlagsBits = 46;
          v36._object = (void *)0xE100000000000000;
          String.append(_:)(v36);
          specialized static AnimationLogger.logError(_:)(v47, v48);
          swift_release();
          goto LABEL_29;
        }
      }
      outlined consume of FromToByAction<BlendShapeWeights>.TransformMode(v15, v14, v7);
      uint64_t v29 = specialized HasHierarchy.parent.getter();
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v28, v29);
      swift_release();
      REMakeSRTFromMatrix();
      __n128 v41 = v31;
      __n128 v43 = v30;
      __n128 v39 = v32;
      if (one-time initialization token for identity != -1) {
        swift_once();
      }
      swift_release();
      swift_release();
LABEL_25:
      unint64_t result = swift_release();
      char v8 = 0;
      a5 = v41;
      a4 = (__int128)v43;
      a6 = v39;
      goto LABEL_31;
    }
    goto LABEL_17;
  }
  if (one-time initialization token for identity != -1) {
    unint64_t result = swift_once();
  }
  char v8 = 0;
  a4 = static Transform.identity;
  a5 = (__n128)xmmword_2681C7AB0;
  a6 = (__n128)xmmword_2681C7AC0;
LABEL_31:
  *a3 = (__n128)a4;
  a3[1] = a5;
  a3[2] = a6;
  a3[3].n128_u8[0] = v8;
  return result;
}

uint64_t type metadata completion function for FromToByActionHandler()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FromToByActionHandler(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    *(void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for FromToByActionHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *initializeWithCopy for FromToByActionHandler(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    simd_float4 v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  *(void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for FromToByActionHandler(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  *(void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for FromToByActionHandler(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  *(void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for FromToByActionHandler(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  *(void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByActionHandler(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v6;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x227FF7858);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v6 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 < 2) {
    return 0;
  }
  unsigned int v17 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v17 >= 2) {
    return v17 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for FromToByActionHandler(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v10;
  }
  size_t v11 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 < a3)
  {
    unsigned int v12 = a3 - v9;
    if (((v10 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v6 = v14;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v9)
  {
    if (v11) {
      int v15 = 1;
    }
    else {
      int v15 = a2 - v9;
    }
    if (v11)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v15;
        return;
      case 3:
        goto LABEL_38;
      case 4:
        *(_DWORD *)&a1[v11] = v15;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x227FF7A2CLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v8 >= 2)
        {
          unsigned int v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for FromToByActionHandler()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in FromToByActionHandler<A>()
{
  return &protocol witness table for FromToByAction<A>;
}

void specialized FromToByActionHandler<>.getFromTo(event:base:)(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>, __n128 a4@<Q1>, __n128 a5@<Q2>)
{
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 80);
  char v13 = *(unsigned char *)(a1 + 128);
  float32x4_t v14 = *(float32x4_t *)(a1 + 232);
  char v15 = *(unsigned char *)(a1 + 248);
  uint64_t v16 = *(void *)(a1 + 280);
  long long v17 = *(_OWORD *)(a1 + 80);
  int8x16_t v18 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 104), 8uLL);
  long long v19 = *(_OWORD *)(a1 + 112);
  if (v11 == 1 && (*(unsigned char *)(a1 + 128) & 1) != 0)
  {
    char v20 = 0;
    uint64_t v11 = 1;
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(void *)(a1 + 120);
    char v13 = 1;
    int8x16_t v21 = *(int8x16_t *)(a1 + 88);
    int8x16_t v22 = *(int8x16_t *)(a1 + 104);
  }
  else
  {
    long long v35 = *(_OWORD *)(a1 + 88);
    long long v38 = *(_OWORD *)(a1 + 80);
    int8x16_t v39 = *(int8x16_t *)(a1 + 40);
    long long v36 = *(_OWORD *)(a1 + 112);
    int8x16_t v37 = v18;
    int8x16_t v41 = *(int8x16_t *)(a1 + 24);
    if (one-time initialization token for identity != -1)
    {
      __n128 v32 = a4;
      __n128 v34 = a5;
      float32x4_t v28 = *(float32x4_t *)(a1 + 232);
      __n128 v30 = a3;
      swift_once();
      float32x4_t v14 = v28;
      a3 = v30;
      a4 = v32;
      a5 = v34;
    }
    float32x4_t v44 = v14;
    LOBYTE(v45) = v15;
    specialized FromToByActionHandler<>.getFromToToParent(transformMode:playbackController:targetEntity:base:)((uint64_t)&v44, v16, v43, *(_OWORD *)&a3, a4, a5);
    outlined init with take of Transform?((uint64_t)v43, (uint64_t)&v44, &demangling cache variable for type metadata for Transform?);
    if (v47)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      char v13 = 0;
      int8x16_t v21 = 0uLL;
      int8x16_t v22 = 0uLL;
      char v20 = 1;
      long long v17 = 0uLL;
      int8x16_t v18 = 0uLL;
      long long v19 = 0uLL;
    }
    else
    {
      double v31 = *(double *)&v45;
      float32x4_t v33 = v44;
      double v29 = *(double *)&v46;
      if (v11)
      {
        int8x16_t v22 = v39;
        int8x16_t v21 = v41;
      }
      else
      {
        v23.i64[0] = v9;
        v23.i64[1] = v41.i64[0];
        *(double *)v24.i64 = specialized static Transform.* infix(_:_:)(v44, *(double *)&v45, *(double *)&v46, v23);
        int8x16_t v21 = vextq_s8(v24, v25, 8uLL);
        uint64_t v9 = v24.i64[0];
        uint64_t v10 = v26.i64[1];
        int8x16_t v22 = vextq_s8(v25, v26, 8uLL);
      }
      int8x16_t v18 = v37;
      long long v17 = v38;
      long long v19 = v36;
      if ((v13 & 1) == 0)
      {
        int8x16_t v40 = v22;
        int8x16_t v42 = v21;
        v27.i64[0] = v12;
        v27.i64[1] = v35;
        *(double *)&long long v17 = specialized static Transform.* infix(_:_:)(v33, v31, v29, v27);
        int8x16_t v22 = v40;
        int8x16_t v21 = v42;
      }
      char v20 = 0;
    }
  }
  *(void *)a2 = v9;
  *(int8x16_t *)(a2 + 8) = v21;
  *(int8x16_t *)(a2 + 24) = v22;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 64) = v17;
  *(int8x16_t *)(a2 + 80) = v18;
  *(_OWORD *)(a2 + 96) = v19;
  *(unsigned char *)(a2 + 112) = v13;
  *(unsigned char *)(a2 + 113) = v20;
}

void static AnimationTimingFunction.linear.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 10;
}

uint64_t AnimationTimingFunction.coreEasingFunction.getter()
{
  unint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  switch(*((unsigned char *)v0 + 20))
  {
    case 1:
      uint64_t v7 = RECreateBackEaseEx();
      goto LABEL_17;
    case 2:
      if ((v1 & 0x8000000000000000) != 0 || HIDWORD(v1)) {
        goto LABEL_24;
      }
      uint64_t v7 = RECreateBounceEaseEx();
      goto LABEL_17;
    case 3:
      uint64_t v7 = RECreateCircleEaseEx();
      goto LABEL_17;
    case 4:
      if ((v1 & 0x8000000000000000) != 0 || HIDWORD(v1))
      {
LABEL_24:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x227FF7F3CLL);
      }
      uint64_t v7 = RECreateElasticEaseEx();
      goto LABEL_17;
    case 5:
      uint64_t v7 = RECreateExponentialEaseEx();
      goto LABEL_17;
    case 6:
      uint64_t v7 = RECreateLogarithmicEaseEx();
      goto LABEL_17;
    case 7:
      uint64_t v7 = RECreatePowerEaseEx();
      goto LABEL_17;
    case 8:
      uint64_t v7 = RECreateSineEaseEx();
      goto LABEL_17;
    case 9:
      uint64_t v7 = RECreateHermiteEaseEx();
LABEL_17:
      uint64_t v6 = v7;
      if ((_BYTE)v2)
      {
        if (v7) {
          goto LABEL_19;
        }
LABEL_22:
        type metadata accessor for AnimationTimingFunction.EasingFunction();
        uint64_t v8 = swift_allocObject();
        *(void *)(v8 + 16) = 0;
        return v8;
      }
      if (!v7) {
        goto LABEL_22;
      }
LABEL_19:
      REEasingFunctionSetModeEx();
LABEL_20:
      type metadata accessor for AnimationTimingFunction.EasingFunction();
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v6;
      RERetain();
      RERelease();
      return v8;
    case 0xA:
      goto LABEL_22;
    default:
      int v10 = HIDWORD(*v0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22831E350;
      *(_DWORD *)(inited + 32) = v2;
      *(_DWORD *)(inited + 36) = v10;
      specialized SIMD.init<A>(_:)(inited);
      swift_setDeallocating();
      uint64_t v4 = swift_initStackObject();
      *(_OWORD *)(v4 + 16) = xmmword_22831E350;
      *(void *)(v4 + 32) = v1;
      specialized SIMD.init<A>(_:)(v4);
      swift_setDeallocating();
      uint64_t v5 = RECreateCubicBezierEaseEx();
      if (!v5) {
        goto LABEL_22;
      }
      uint64_t v6 = v5;
      goto LABEL_20;
  }
}

double static AnimationTimingFunction.default.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_22832E390).n128_u64[0];
  return result;
}

BOOL static AnimationTimingFunction.__Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AnimationTimingFunction.__Mode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationTimingFunction.__Mode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void AnimationTimingFunction.EasingFunctionType.hash(into:)(uint64_t a1)
{
  unint64_t v3 = *(void *)v1;
  Swift::UInt v2 = *(void *)(v1 + 8);
  Swift::UInt32 v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v1 + 20);
  switch(v5)
  {
    case 1:
      unint64_t v8 = HIDWORD(v3);
      Swift::UInt v9 = 2;
      goto LABEL_15;
    case 2:
      Swift::UInt v10 = 3;
      goto LABEL_9;
    case 3:
      Swift::UInt v11 = 4;
      goto LABEL_25;
    case 4:
      Swift::UInt v10 = 5;
LABEL_9:
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v3);
      Hasher._combine(_:)(v2);
      if ((v4 & 0x7FFFFFFF) != 0) {
        Swift::UInt32 v12 = v4;
      }
      else {
        Swift::UInt32 v12 = 0;
      }
      goto LABEL_21;
    case 5:
      unint64_t v8 = HIDWORD(v3);
      Swift::UInt v9 = 6;
      goto LABEL_15;
    case 6:
      unint64_t v8 = HIDWORD(v3);
      Swift::UInt v9 = 7;
      goto LABEL_15;
    case 7:
      unint64_t v8 = HIDWORD(v3);
      Swift::UInt v9 = 8;
LABEL_15:
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v3);
      if ((v8 & 0x7FFFFF) == 0 && (v3 & 0x7F80000000000000) == 0) {
        Swift::UInt32 v12 = 0;
      }
      else {
        Swift::UInt32 v12 = v8;
      }
LABEL_21:
      Hasher._combine(_:)(v12);
      return;
    case 8:
      Swift::UInt v11 = 9;
      goto LABEL_25;
    case 9:
      Swift::UInt v11 = 10;
LABEL_25:
      Hasher._combine(_:)(v11);
      Swift::UInt v14 = v3;
      goto LABEL_26;
    case 10:
      Swift::UInt v14 = 0;
LABEL_26:
      Hasher._combine(_:)(v14);
      break;
    default:
      v7.n128_u64[0] = v3;
      v7.n128_u64[1] = v2;
      __n128 v15 = v7;
      Hasher._combine(_:)(1uLL);
      specialized SIMD.hash(into:)(a1, v15);
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationTimingFunction.EasingFunctionType()
{
  int v1 = *((_DWORD *)v0 + 4);
  char v2 = *((unsigned char *)v0 + 20);
  long long v5 = *v0;
  int v6 = v1;
  char v7 = v2;
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationTimingFunction.EasingFunctionType()
{
  int v1 = *((_DWORD *)v0 + 4);
  char v2 = *((unsigned char *)v0 + 20);
  long long v5 = *v0;
  int v6 = v1;
  char v7 = v2;
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t AnimationTimingFunction.EasingFunction.__deallocating_deinit()
{
  if (*(void *)(v0 + 16)) {
    RERelease();
  }

  return swift_deallocClassInstance();
}

unsigned __int8 *static AnimationTimingFunction.__smooth(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 9;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__back(_:amplitude:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 1, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__bounce(_:bounces:bounciness:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = a2;
  *(float *)(a3 + 16) = a4;
  *(unsigned char *)(a3 + 20) = 2;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__circle(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 3;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__exponential(_:exponent:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 5, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__logarithmic(_:base:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>, unsigned int a3@<S0>)
{
  return static AnimationTimingFunction.__back(_:amplitude:)(a1, 6, a2, a3);
}

unsigned __int8 *static AnimationTimingFunction.__back(_:amplitude:)@<X0>(unsigned __int8 *result@<X0>, char a2@<W1>, uint64_t a3@<X8>, unsigned int a4@<S0>)
{
  *(void *)a3 = *result | ((unint64_t)a4 << 32);
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 20) = a2;
  return result;
}

void static AnimationTimingFunction.__power(_:power:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = (unint64_t)a2 << 32;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 7;
}

unsigned __int8 *static AnimationTimingFunction.__sine(_:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = 8;
  return result;
}

unsigned __int8 *static AnimationTimingFunction.__spring(_:oscillations:springiness:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(void *)a3 = *result;
  *(void *)(a3 + 8) = a2;
  *(float *)(a3 + 16) = a4;
  *(unsigned char *)(a3 + 20) = 4;
  return result;
}

__n128 static AnimationTimingFunction.cubicBezier(controlPoint1:controlPoint2:)@<Q0>(__n128 *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(double *)&long long v5 = a2;
  *((double *)&v5 + 1) = a3;
  *(_OWORD *)(inited + 16) = xmmword_228324960;
  *(_OWORD *)(inited + 32) = v5;
  specialized SIMD.init<A>(_:)(inited);
  __n128 v10 = v6;
  swift_setDeallocating();
  __n128 result = v10;
  *a1 = v10;
  a1[1].n128_u32[0] = 0;
  a1[1].n128_u8[4] = 0;
  return result;
}

double static AnimationTimingFunction.easeIn.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_22832E3A0).n128_u64[0];
  return result;
}

double static AnimationTimingFunction.easeOut.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_22832E3B0).n128_u64[0];
  return result;
}

double static AnimationTimingFunction.easeInOut.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static AnimationTimingFunction.default.getter(a1, (__n128)xmmword_22832E3C0).n128_u64[0];
  return result;
}

__n128 static AnimationTimingFunction.default.getter@<Q0>(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228324960;
  *(__n128 *)(inited + 32) = a2;
  specialized SIMD.init<A>(_:)(inited);
  __n128 v7 = v4;
  swift_setDeallocating();
  __n128 result = v7;
  *a1 = v7;
  a1[1].n128_u32[0] = 0;
  a1[1].n128_u8[4] = 0;
  return result;
}

void AnimationTimingFunction.hash(into:)(uint64_t a1)
{
}

BOOL static AnimationTimingFunction.== infix(_:_:)(long long *a1, long long *a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  char v3 = *((unsigned char *)a1 + 20);
  int v4 = *((_DWORD *)a2 + 4);
  char v5 = *((unsigned char *)a2 + 20);
  long long v10 = *a1;
  int v11 = v2;
  char v12 = v3;
  long long v7 = *a2;
  int v8 = v4;
  char v9 = v5;
  return specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)((float *)&v10, (float *)&v7);
}

Swift::Int AnimationTimingFunction.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v22 = a4;
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys>);
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v21 = v5;
  MEMORY[0x270FA5388](v5);
  long long v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys>);
  uint64_t v8 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys>);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  Swift::UInt v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v22)
  {
    LOBYTE(v23) = 0;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  }
  else
  {
    LOBYTE(v23) = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v23 = v19;
    uint64_t v24 = v18;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>);
    uint64_t v15 = v21;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationTimingFunction()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AnimationTimingFunction(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationTimingFunction()
{
  Hasher.init(_seed:)();
  AnimationTimingFunction.EasingFunctionType.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationTimingFunction(long long *a1, long long *a2)
{
  int v2 = *((_DWORD *)a1 + 4);
  char v3 = *((unsigned char *)a1 + 20);
  int v4 = *((_DWORD *)a2 + 4);
  char v5 = *((unsigned char *)a2 + 20);
  long long v10 = *a1;
  int v11 = v2;
  char v12 = v3;
  long long v7 = *a2;
  int v8 = v4;
  char v9 = v5;
  return specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)((float *)&v10, (float *)&v7);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  if (*v0) {
    return 0x7A65426369627563;
  }
  else {
    return 0x7261656E696CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  return 0x506C6F72746E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x506C6F72746E6F63 && a2 == 0xED000073746E696FLL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationTimingFunction.CodableAnimationTimingFunction(void *a1)
{
  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t AnimationTimingFunction.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  uint64_t v5 = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(v15);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  char v9 = v5;
  uint64_t v10 = v6;
  char v11 = v7;
  int v12 = v7 << 31 >> 31;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = v12 & 0xA;
  return result;
}

uint64_t AnimationTimingFunction.encode(to:)(void *a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 20))
  {
    if (*(unsigned char *)(v1 + 20) != 10 || (!(v3 | v2) ? (BOOL v4 = *(_DWORD *)(v1 + 16) == 0) : (BOOL v4 = 0), !v4))
    {
      lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors();
      swift_allocError();
      return swift_willThrow();
    }
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, v2, v3, v6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance AnimationTimingFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of __REAssetService(a1, (uint64_t)v15);
  uint64_t v5 = specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(v15);
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  char v9 = v5;
  uint64_t v10 = v6;
  char v11 = v7;
  int v12 = v7 << 31 >> 31;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v9;
  }
  if (v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v10;
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(_DWORD *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 20) = v12 & 0xA;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnimationTimingFunction(void *a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 20))
  {
    if (*(unsigned char *)(v1 + 20) != 10 || (!(v3 | v2) ? (BOOL v4 = *(_DWORD *)(v1 + 16) == 0) : (BOOL v4 = 0), !v4))
    {
      lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors();
      swift_allocError();
      return swift_willThrow();
    }
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
  }
  return AnimationTimingFunction.CodableAnimationTimingFunction.encode(to:)(a1, v2, v3, v6);
}

BOOL specialized static AnimationTimingFunction.EasingFunctionType.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *((void *)a2 + 1);
  int v5 = *((unsigned __int8 *)a2 + 20);
  switch(*((unsigned char *)a1 + 20))
  {
    case 1:
      if (v5 == 1) {
        goto LABEL_24;
      }
      return 0;
    case 2:
      if (v5 != 2) {
        return 0;
      }
      goto LABEL_13;
    case 3:
      if (v5 == 3) {
        return (v3 ^ v2) == 0;
      }
      return 0;
    case 4:
      if (v5 != 4) {
        return 0;
      }
LABEL_13:
      if (v3 != v2 || *((void *)a1 + 1) != v4) {
        return 0;
      }
      float v11 = a1[4];
      float v12 = a2[4];
      return v11 == v12;
    case 5:
      if (v5 != 5) {
        return 0;
      }
      goto LABEL_24;
    case 6:
      if (v5 != 6) {
        return 0;
      }
      goto LABEL_24;
    case 7:
      if (v5 != 7) {
        return 0;
      }
LABEL_24:
      if (v3 != v2) {
        return 0;
      }
      LODWORD(v11) = HIDWORD(*(void *)a1);
      LODWORD(v12) = HIDWORD(*(void *)a2);
      return v11 == v12;
    case 8:
      if (v5 != 8) {
        return 0;
      }
      return (v3 ^ v2) == 0;
    case 9:
      if (v5 != 9) {
        return 0;
      }
      return (v3 ^ v2) == 0;
    case 0xA:
      uint64_t v15 = v4 | v3;
      return v5 == 10 && v15 == 0 && *((_DWORD *)a2 + 4) == 0;
    default:
      if (*((unsigned char *)a2 + 20)) {
        return 0;
      }
      uint64_t v6 = 0;
      long long v7 = *(_OWORD *)a1;
      long long v8 = *(_OWORD *)a2;
      break;
  }
  while (1)
  {
    long long v20 = v7;
    float v18 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    long long v21 = v8;
    float v19 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    BOOL v9 = v18 == v19;
    if (v6 == 3) {
      break;
    }
    while (1)
    {
      ++v6;
      if (v9) {
        break;
      }
      if (v6 == 3) {
        return 0;
      }
      BOOL v9 = 0;
    }
  }
  return v18 == v19;
}

void *specialized AnimationTimingFunction.CodableAnimationTimingFunction.init(from:)(void *a1)
{
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys>);
  uint64_t v21 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys>);
  uint64_t v22 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v24 = a1;
  float v12 = __swift_project_boxed_opaque_existential_1(a1, v11);
  lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys();
  uint64_t v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_7;
  }
  uint64_t v14 = v23;
  uint64_t v26 = v8;
  float v12 = v10;
  uint64_t v15 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v15 + 16) != 1)
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    float v18 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *float v18 = &type metadata for AnimationTimingFunction.CodableAnimationTimingFunction;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x263F8DCB0], v16);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v26 + 8))(v12, v7);
LABEL_7:
    uint64_t v20 = (uint64_t)v24;
    goto LABEL_8;
  }
  if (*(unsigned char *)(v15 + 32))
  {
    LODWORD(v22) = *(unsigned __int8 *)(v15 + 32);
    LOBYTE(v25) = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v14);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v7);
    float v12 = v25;
  }
  else
  {
    LOBYTE(v25) = 0;
    lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v7);
    float v12 = 0;
  }
  uint64_t v20 = (uint64_t)v24;
LABEL_8:
  __swift_destroy_boxed_opaque_existential_1(v20);
  return v12;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EncodingErrors and conformance AnimationTimingFunction.EncodingErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.__Mode and conformance AnimationTimingFunction.__Mode);
  }
  return result;
}

__n128 __swift_memcpy21_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction()
{
  return &type metadata for AnimationTimingFunction;
}

unsigned char *storeEnumTagSinglePayload for AnimationTimingFunction.__Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FF9828);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.__Mode()
{
  return &type metadata for AnimationTimingFunction.__Mode;
}

uint64_t type metadata accessor for AnimationTimingFunction.EasingFunction()
{
  return self;
}

uint64_t getEnumTagSinglePayload for AnimationTimingFunction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 246;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AnimationTimingFunction.EasingFunctionType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 20) <= 9u) {
    return *(unsigned __int8 *)(a1 + 20);
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t destructiveInjectEnumTag for AnimationTimingFunction.EasingFunctionType(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xA)
  {
    *(void *)__n128 result = a2 - 10;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 10;
    *(_DWORD *)(result + 16) = 0;
  }
  *(unsigned char *)(result + 20) = a2;
  return result;
}

void *type metadata accessor for AnimationTimingFunction.EasingFunctionType()
{
  return &unk_26DC9B038;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.EncodingErrors()
{
  return &type metadata for AnimationTimingFunction.EncodingErrors;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.EasingFunctionType and conformance AnimationTimingFunction.EasingFunctionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys and conformance AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SIMD4<Float> and conformance SIMD4<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x227FF9C2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys()
{
  return &unk_26DC9B158;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.LinearCodingKeys()
{
  return &unk_26DC9B178;
}

uint64_t getEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

uint64_t getEnumTag for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AnimationTimingFunction.CodableAnimationTimingFunction(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 1;
  }
  else
  {
    *(unsigned char *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction()
{
  return &type metadata for AnimationTimingFunction.CodableAnimationTimingFunction;
}

unsigned char *storeEnumTagSinglePayload for AnimationTimingFunction.EncodingErrors(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x227FF9DACLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AnimationTimingFunction.CodableAnimationTimingFunction.CubicBezierCodingKeys()
{
  return &unk_26DC9B298;
}

uint64_t specialized AnimationTimingFunction.CodableAnimationTimingFunction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7261656E696CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7A65426369627563 && a2 == 0xEB00000000726569)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Bool()
{
  return REBindPointSetBool();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Bool@<X0>(char *a1@<X8>)
{
  uint64_t result = REBindPointGetBool();
  char v3 = 0;
  if (!result) {
    char v3 = 2;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Bool(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36EB8], MEMORY[0x263F36E68]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Bool()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddBoolValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int8()
{
  return REBindPointSetInt8();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, char *))MEMORY[0x263F36F18];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int8(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36ED0], MEMORY[0x263F36E80]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int8()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt8()
{
  return REBindPointSetUInt8();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, char *))MEMORY[0x263F36F30];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int8(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, char *)@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  char v6 = 0;
  uint64_t result = a2(a1, &v6);
  char v5 = v6;
  if (!result) {
    char v5 = 0;
  }
  *a3 = v5;
  a3[1] = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36F00], MEMORY[0x263F36EB0]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt8()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int16()
{
  return REBindPointSetInt16();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, __int16 *))MEMORY[0x263F36F08];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int16(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int16(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36EC0], MEMORY[0x263F36E70]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int16()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt16()
{
  return REBindPointSetUInt16();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt16@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, __int16 *))MEMORY[0x263F36F20];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int16(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int16@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, __int16 *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  __int16 v6 = 0;
  uint64_t result = a2(a1, &v6);
  __int16 v5 = v6;
  if (!result) {
    __int16 v5 = 0;
  }
  *(_WORD *)a3 = v5;
  *(unsigned char *)(a3 + 2) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt16(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36EF0], MEMORY[0x263F36EA0]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt16()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int32()
{
  return REBindPointSetInt32();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F36F10];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int32(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Int32(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36EC8], MEMORY[0x263F36E78]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int32()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddIntValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance UInt32()
{
  return REBindPointSetUInt32();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance UInt32@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = (uint64_t (*)(uint64_t, int *))MEMORY[0x263F36F28];

  return protocol witness for static BindableDataInternal.get(from:) in conformance Int32(a1, v2, a2);
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int32@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, int *)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v6 = 0;
  uint64_t result = a2(a1, &v6);
  int v5 = v6;
  if (!result) {
    int v5 = 0;
  }
  *(_DWORD *)a3 = v5;
  *(unsigned char *)(a3 + 4) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance UInt32(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5, MEMORY[0x263F36EF8], MEMORY[0x263F36EA8]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance UInt32()
{
  int v1 = *v0;
  REKeyValueComponentGetComponentType();
  uint64_t result = REEntityGetOrAddComponentByClass();
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    REKeyValueComponentAddIntValue();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Int()
{
  return REBindPointSetInt64();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Int@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REBindPointGetInt64();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Int()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddInt64Value();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Float()
{
  return REBindPointSetFloat();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Float@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REBindPointGetFloat();
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Float()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddFloatValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Double()
{
  return REBindPointSetDouble();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Double@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REBindPointGetDouble();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = result ^ 1;
  return result;
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Double()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddDoubleValue();

  return swift_release();
}

uint64_t SIMD2.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = *(void (**)(char *, uint64_t, __n128))(v5 + 16);
  v10((char *)&v13 - v11, v3, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCast()) {
    return REBindPointSetFloat2();
  }
  ((void (*)(char *, uint64_t, uint64_t))v10)(v7, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return REBindPointSetDouble2();
  }
  return result;
}

uint64_t static SIMD2.get(from:)@<X0>(char *a1@<X8>)
{
  __n128 v34 = a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for SIMD2();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v10);
  float v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v31 - v14;
  MEMORY[0x270FA5388](v16);
  float v18 = (char *)&v31 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v31 - v20;
  uint64_t v37 = 0;
  *(void *)&long long v36 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v1);
    if (REBindPointGetFloat2())
    {
      *(void *)&long long v36 = v37;
      char v22 = swift_dynamicCast();
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v22)
      {
        v23(v8, 0, 1, v1);
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v24(v18, v8, v1);
        int8x16_t v25 = v34;
        v24(v34, v18, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v23)(v25, 0, 1, v1);
      }
      v23(v8, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
    }
  }
  long long v35 = 0u;
  long long v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v1);
    if (REBindPointGetDouble2())
    {
      long long v35 = v36;
      char v27 = swift_dynamicCast();
      float32x4_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v27)
      {
        v28(v5, 0, 1, v1);
        double v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v29(v12, v5, v1);
        __n128 v30 = v34;
        v29(v34, v12, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v28)(v30, 0, 1, v1);
      }
      v28(v5, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v34, 1, 1, v1);
}

uint64_t static SIMD2.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  type metadata accessor for SIMD2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble2 = REBindPointCreateReferenceForEntityAnimatedValuesDouble2();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble2 = REBindPointCreateReferenceForEntityDouble2();
LABEL_9:
      uint64_t v9 = ReferenceForEntityAnimatedValuesDouble2;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesFloat2();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityFloat2();
      }
LABEL_21:
      uint64_t v9 = ReferenceForEntityAnimatedValuesFloat2;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesFloat2();
      }
      else
      {
        if (a4) {
          goto LABEL_23;
        }
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat2 = REBindPointCreateReferenceForEntityFloat2();
      }
      uint64_t v9 = ReferenceForEntityFloat2;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityAnimatedValuesDouble2();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat2 = REBindPointCreateReferenceForEntityDouble2();
      }
      goto LABEL_21;
    }
  }
LABEL_23:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD2.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat2Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD2<A>@<X0>(char *a1@<X8>)
{
  return static SIMD2.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD2<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD2.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t SIMD3.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = *(void (**)(char *, uint64_t, __n128))(v5 + 16);
  v10((char *)&v13 - v11, v3, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCast()) {
    return REBindPointSetFloat3();
  }
  ((void (*)(char *, uint64_t, uint64_t))v10)(v7, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return REBindPointSetDouble3();
  }
  return result;
}

uint64_t static SIMD3.get(from:)@<X0>(char *a1@<X8>)
{
  __n128 v34 = a1;
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for SIMD3();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v10);
  float v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v31 - v14;
  MEMORY[0x270FA5388](v16);
  float v18 = (char *)&v31 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v31 - v20;
  long long v39 = 0u;
  long long v37 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v1);
    if (REBindPointGetFloat3())
    {
      long long v37 = v39;
      char v22 = swift_dynamicCast();
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v22)
      {
        v23(v8, 0, 1, v1);
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v24(v18, v8, v1);
        int8x16_t v25 = v34;
        v24(v34, v18, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v23)(v25, 0, 1, v1);
      }
      v23(v8, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
    }
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v1);
    if (REBindPointGetDouble3())
    {
      long long v35 = v37;
      long long v36 = v38;
      char v27 = swift_dynamicCast();
      float32x4_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v27)
      {
        v28(v5, 0, 1, v1);
        double v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v29(v12, v5, v1);
        __n128 v30 = v34;
        v29(v34, v12, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v28)(v30, 0, 1, v1);
      }
      v28(v5, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v34, 1, 1, v1);
}

uint64_t static SIMD3.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  type metadata accessor for SIMD3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble3 = REBindPointCreateReferenceForEntityAnimatedValuesDouble3();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble3 = REBindPointCreateReferenceForEntityDouble3();
LABEL_9:
      uint64_t v9 = ReferenceForEntityAnimatedValuesDouble3;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesFloat3();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityFloat3();
      }
LABEL_21:
      uint64_t v9 = ReferenceForEntityAnimatedValuesFloat3;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesFloat3();
      }
      else
      {
        if (a4) {
          goto LABEL_23;
        }
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat3 = REBindPointCreateReferenceForEntityFloat3();
      }
      uint64_t v9 = ReferenceForEntityFloat3;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityAnimatedValuesDouble3();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat3 = REBindPointCreateReferenceForEntityDouble3();
      }
      goto LABEL_21;
    }
  }
LABEL_23:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD3.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    v7[0] = v7[1];
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat3Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD3<A>@<X0>(char *a1@<X8>)
{
  return static SIMD3.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD3<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD3.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t SIMD4.set(to:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = *(void (**)(char *, uint64_t, __n128))(v5 + 16);
  v10((char *)&v13 - v11, v3, v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCast()) {
    return REBindPointSetFloat4();
  }
  ((void (*)(char *, uint64_t, uint64_t))v10)(v7, v3, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return REBindPointSetDouble4();
  }
  return result;
}

uint64_t static SIMD4.get(from:)@<X0>(char *a1@<X8>)
{
  __n128 v34 = a1;
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for SIMD4();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v10);
  float v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v31 - v14;
  MEMORY[0x270FA5388](v16);
  float v18 = (char *)&v31 - v17;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v31 - v20;
  long long v39 = 0u;
  long long v37 = 0u;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v1);
    if (REBindPointGetFloat4())
    {
      long long v37 = v39;
      char v22 = swift_dynamicCast();
      uint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v22)
      {
        v23(v8, 0, 1, v1);
        uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v24(v18, v8, v1);
        int8x16_t v25 = v34;
        v24(v34, v18, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v23)(v25, 0, 1, v1);
      }
      v23(v8, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
    }
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v1);
    if (REBindPointGetDouble4())
    {
      long long v35 = v37;
      long long v36 = v38;
      char v27 = swift_dynamicCast();
      float32x4_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      if (v27)
      {
        v28(v5, 0, 1, v1);
        double v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v29(v12, v5, v1);
        __n128 v30 = v34;
        v29(v34, v12, v1);
        return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v28)(v30, 0, 1, v1);
      }
      v28(v5, 1, 1, v1);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v32);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v34, 1, 1, v1);
}

uint64_t static SIMD4.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  type metadata accessor for SIMD4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
  if (swift_dynamicCastMetatype())
  {
    if (a4 == 1)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble4 = REBindPointCreateReferenceForEntityAnimatedValuesDouble4();
      goto LABEL_9;
    }
    if (!a4)
    {
      String.utf8CString.getter();
      uint64_t ReferenceForEntityAnimatedValuesDouble4 = REBindPointCreateReferenceForEntityDouble4();
LABEL_9:
      uint64_t v9 = ReferenceForEntityAnimatedValuesDouble4;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesFloat4();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityFloat4();
      }
LABEL_21:
      uint64_t v9 = ReferenceForEntityAnimatedValuesFloat4;
      swift_release();
      REBindPointIsValid();
      return v9;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    if (swift_dynamicCastMetatype())
    {
      if (a4 == 1)
      {
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesFloat4();
      }
      else
      {
        if (a4) {
          goto LABEL_23;
        }
        String.utf8CString.getter();
        uint64_t ReferenceForEntityFloat4 = REBindPointCreateReferenceForEntityFloat4();
      }
      uint64_t v9 = ReferenceForEntityFloat4;
      swift_release();
      if ((REBindPointIsValid() & 1) != 0 || (a5 & 1) == 0) {
        return v9;
      }
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityAnimatedValuesDouble4();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesFloat4 = REBindPointCreateReferenceForEntityDouble4();
      }
      goto LABEL_21;
    }
  }
LABEL_23:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SIMD4.createAndSetParameter(name:_:)(uint64_t a1)
{
  __n128 v1 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v5, v4, v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    v7[0] = v7[1];
    REKeyValueComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    String.utf8CString.getter();
    REKeyValueComponentAddFloat4Value();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance SIMD4<A>@<X0>(char *a1@<X8>)
{
  return static SIMD4.get(from:)(a1);
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance SIMD4<A>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  return static SIMD4.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance simd_quatf()
{
  return REBindPointSetQuatF();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance simd_quatf@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  long long v5 = static simd_quatf.identity;
  uint64_t result = REBindPointGetQuatF();
  uint64_t v3 = *((void *)&v5 + 1);
  uint64_t v4 = v5;
  if (!result)
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = result ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance simd_quatf(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x263F36ED8], MEMORY[0x263F36E88]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance simd_quatf()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddQuatFValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance Transform()
{
  return REBindPointSetSRT();
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance Transform@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REBindPointGetSRT();
  char v3 = result;
  if (result && one-time initialization token for identity != -1) {
    uint64_t result = swift_once();
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = v3 ^ 1;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance Transform(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x263F36EE0], MEMORY[0x263F36E90]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance Transform()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  REKeyValueComponentAddRESRTValue();

  return swift_release();
}

uint64_t protocol witness for BindableDataInternal.set(to:type:) in conformance String()
{
  String.utf8CString.getter();
  uint64_t v0 = REBindPointSetString();
  swift_release();
  return v0;
}

uint64_t protocol witness for static BindableDataInternal.get(from:) in conformance String@<X0>(uint64_t *a1@<X8>)
{
  if (REBindPointGetString())
  {
    uint64_t result = String.init(cString:)();
  }
  else
  {
    uint64_t result = 0;
    uint64_t v3 = 0;
  }
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static BindableDataInternal.createBindPoint(_:entity:type:allowConversion:) in conformance String(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, MEMORY[0x263F36EE8], MEMORY[0x263F36E98]);
}

uint64_t protocol witness for BindableDataInternal.createAndSetParameter(name:_:) in conformance String()
{
  REKeyValueComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  String.utf8CString.getter();
  String.utf8CString.getter();
  REKeyValueComponentAddStringValue();
  swift_release();

  return swift_release();
}

uint64_t CommonBindPoint.__deallocating_deinit()
{
  REBindPointDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CommonBindPoint()
{
  return self;
}

uint64_t type metadata completion function for BindPoint()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for BindPoint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static Double.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  if (a4 == 1)
  {
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityAnimatedValuesDouble();
  }
  else
  {
    if (a4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityDouble();
  }
  uint64_t v8 = ReferenceForEntityAnimatedValuesDouble;
  swift_release();
  if (REBindPointIsValid() & 1) == 0 && (a5)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    if (a4 == 1) {
      uint64_t ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityAnimatedValuesFloat();
    }
    else {
      uint64_t ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityFloat();
    }
    uint64_t v8 = ReferenceForEntityAnimatedValuesFloat;
    swift_release();
    REBindPointIsValid();
  }
  return v8;
}

uint64_t specialized static Float.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  if (a4 == 1)
  {
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityAnimatedValuesFloat();
  }
  else
  {
    if (a4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesFloat = REBindPointCreateReferenceForEntityFloat();
  }
  uint64_t v8 = ReferenceForEntityAnimatedValuesFloat;
  swift_release();
  if (REBindPointIsValid() & 1) == 0 && (a5)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    if (a4 == 1) {
      uint64_t ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityAnimatedValuesDouble();
    }
    else {
      uint64_t ReferenceForEntityAnimatedValuesDouble = REBindPointCreateReferenceForEntityDouble();
    }
    uint64_t v8 = ReferenceForEntityAnimatedValuesDouble;
    swift_release();
    REBindPointIsValid();
  }
  return v8;
}

uint64_t specialized static Int.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  if (a4 == 1)
  {
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesInt64 = REBindPointCreateReferenceForEntityAnimatedValuesInt64();
  }
  else
  {
    if (a4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    String.utf8CString.getter();
    uint64_t ReferenceForEntityAnimatedValuesInt64 = REBindPointCreateReferenceForEntityInt64();
  }
  uint64_t v8 = ReferenceForEntityAnimatedValuesInt64;
  swift_release();
  if (REBindPointIsValid() & 1) == 0 && (a5)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    uint64_t v9 = a4 == 1 ? REBindPointCreateReferenceForEntityAnimatedValuesUInt8() : REBindPointCreateReferenceForEntityUInt8();
    uint64_t v8 = v9;
    swift_release();
    REBindPointIsValid();
    if ((REBindPointIsValid() & 1) == 0)
    {
      REBindPointDestroy();
      String.utf8CString.getter();
      uint64_t v10 = a4 == 1
          ? REBindPointCreateReferenceForEntityAnimatedValuesUInt16()
          : REBindPointCreateReferenceForEntityUInt16();
      uint64_t v8 = v10;
      swift_release();
      REBindPointIsValid();
      if ((REBindPointIsValid() & 1) == 0)
      {
        REBindPointDestroy();
        String.utf8CString.getter();
        if (a4 == 1) {
          uint64_t ReferenceForEntityAnimatedValuesUInt32 = REBindPointCreateReferenceForEntityAnimatedValuesUInt32();
        }
        else {
          uint64_t ReferenceForEntityAnimatedValuesUInt32 = REBindPointCreateReferenceForEntityUInt32();
        }
        uint64_t v8 = ReferenceForEntityAnimatedValuesUInt32;
        swift_release();
        REBindPointIsValid();
      }
    }
  }
  return v8;
}

uint64_t specialized static Transform.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t (*a6)(uint64_t, uint64_t))
{
  if (a4 == 1)
  {
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v8 = String.utf8CString.getter();
    uint64_t v9 = a6(v7, v8 + 32);
LABEL_5:
    uint64_t v13 = v9;
    swift_release();
    return v13;
  }
  if (!a4)
  {
    uint64_t v11 = *(void *)(a3 + 16);
    uint64_t v12 = String.utf8CString.getter();
    uint64_t v9 = a5(v11, v12 + 32);
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static Bool.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  if (a4 == 1)
  {
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = String.utf8CString.getter();
    uint64_t v15 = a7(v13, v14 + 32);
  }
  else
  {
    if (a4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v17 = *(void *)(a3 + 16);
    uint64_t v18 = String.utf8CString.getter();
    uint64_t v15 = a6(v17, v18 + 32);
  }
  uint64_t v19 = v15;
  swift_release();
  if (REBindPointIsValid() & 1) == 0 && (a5)
  {
    REBindPointDestroy();
    return specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(a1, a2, a3, a4, 1, MEMORY[0x263F36EC8], MEMORY[0x263F36E78]);
  }
  return v19;
}

uint64_t specialized static Int32.createBindPoint(_:entity:type:allowConversion:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t (*a7)(uint64_t, uint64_t))
{
  if (a4 == 1)
  {
    uint64_t v10 = *(void *)(a3 + 16);
    uint64_t v11 = String.utf8CString.getter();
    uint64_t v12 = a7(v10, v11 + 32);
  }
  else
  {
    if (a4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v14 = *(void *)(a3 + 16);
    uint64_t v15 = String.utf8CString.getter();
    uint64_t v12 = a6(v14, v15 + 32);
  }
  uint64_t v16 = v12;
  swift_release();
  if (REBindPointIsValid() & 1) == 0 && (a5)
  {
    REBindPointDestroy();
    String.utf8CString.getter();
    uint64_t v17 = a4 == 1
        ? REBindPointCreateReferenceForEntityAnimatedValuesUInt8()
        : REBindPointCreateReferenceForEntityUInt8();
    uint64_t v16 = v17;
    swift_release();
    REBindPointIsValid();
    if ((REBindPointIsValid() & 1) == 0)
    {
      REBindPointDestroy();
      String.utf8CString.getter();
      if (a4 == 1) {
        uint64_t ReferenceForEntityAnimatedValuesUInt16 = REBindPointCreateReferenceForEntityAnimatedValuesUInt16();
      }
      else {
        uint64_t ReferenceForEntityAnimatedValuesUInt16 = REBindPointCreateReferenceForEntityUInt16();
      }
      uint64_t v16 = ReferenceForEntityAnimatedValuesUInt16;
      swift_release();
      REBindPointIsValid();
    }
  }
  return v16;
}

uint64_t specialized static LoadableResource.fromCoreAssetType(assetRef:)(uint64_t a1, void (*a2)(void))
{
  id v4 = (id)REAssetGetSwiftObject();
  a2(0);
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    Swift::UInt32 v6 = REAssetHandleAssetType();
    if (one-time initialization token for resourceClasses != -1) {
      swift_once();
    }
    rawValue = resourceClasses._rawValue;
    if (*((void *)resourceClasses._rawValue + 2)
      && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
    {
      uint64_t v10 = rawValue[7];
      uint64_t v11 = *(void *)(v10 + 16 * v8 + 8);
      uint64_t v12 = *(void (**)(uint64_t, void, uint64_t, __n128))(v11 + 16);
      long long v24 = *(_OWORD *)(v10 + 16 * v8);
      uint64_t v13 = v24;
      uint64_t v14 = type metadata accessor for Optional();
      uint64_t v15 = *(void *)(v14 - 8);
      __n128 v16 = MEMORY[0x270FA5388](v14);
      uint64_t v18 = (char *)&v24 - v17;
      v12(a1, v24, v11, v16);
      uint64_t v19 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v13) == 1)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
        memset(v26, 0, 40);
      }
      else
      {
        *(_OWORD *)((char *)&v26[1] + 8) = v24;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v26);
        (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, v13);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
      if (swift_dynamicCast()) {
        return v25;
      }
    }
    else
    {
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_22830EC60;
      id v21 = (id)REAssetGetType();
      *(void *)(v20 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
      *(void *)(v20 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
      *(void *)(v20 + 32) = v21;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      char v22 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return result;
}

void static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(uint64_t a1, void *a2, void *a3)
{
  type metadata accessor for __REAsset();
  static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(a1, a2, a3, (void (*)(uint64_t, void *, char *))closure #1 in static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:), (uint64_t)&v6);
}

uint64_t static Resource.__fromCore(_:)()
{
  if ((id)REAssetGetSwiftObject()) {
    return swift_dynamicCast();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(uint64_t a1, void *a2, void *a3)
{
  v64._uint64_t countAndFlagsBits = a1;
  v64._object = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    id v11 = a3;
  }
  else {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  id v12 = a3;
  uint64_t v13 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000);
  id v14 = objc_msgSend(v11, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14)
  {
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD000000000000021;
    unint64_t v67 = 0x8000000228355350;
    id v34 = objc_msgSend(v11, sel_description);
LABEL_20:
    id v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v38 = v37;

    v39._uint64_t countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    unint64_t v40 = v66;
    unint64_t v17 = v67;
    goto LABEL_21;
  }
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD000000000000021;
    unint64_t v67 = 0x8000000228355350;
    id v34 = objc_msgSend(v11, sel_description);
    goto LABEL_20;
  }
  uint64_t v65 = v3;
  uint64_t v51 = v15;
  id v52 = v11;
  uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  unint64_t v17 = v6 + 16;
  unint64_t v19 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
  uint64_t v55 = *(void *)(v17 + 56);
  unint64_t v62 = v17;
  uint64_t v63 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
  int v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v61 = v18;
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v59 = (void (**)(char *, uint64_t))(v17 - 8);
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  long long v53 = (void *)0x80000002283553F0;
  unint64_t v54 = 0x80000002283553D0;
  char v56 = v10;
  uint64_t v57 = v5;
  while (1)
  {
    v61(v10, v19, v5);
    id v21 = *v63;
    (*v63)(v10, 0, 1, v5);
    if ((*v60)(v10, 1, v5) == 1) {
      break;
    }
    uint64_t v22 = (uint64_t)v70;
    (*v58)(v70, v10, v5);
    uint64_t v23 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    __swift_project_boxed_opaque_existential_1((void *)(v23 + 120), *(void *)(v23 + 144));
    swift_retain();
    long long v24 = v65;
    uint64_t v25 = specialized __REAssetService.assetRef(named:in:)(v64._countAndFlagsBits, (void *)v64._object, v22);
    uint64_t v26 = v24;
    if (v24)
    {
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v27 = specialized static LoadableResource.fromCoreAssetType(assetRef:)(v25[2], (void (*)(void))type metadata accessor for AudioFileGroupResource);
      if (v27)
      {
        unint64_t v17 = v27;

        swift_release();
        swift_release();
        (*v59)(v70, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v17;
      }
      unint64_t v68 = 0;
      unint64_t v69 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v68 = 0xD000000000000018;
      unint64_t v69 = v54;
      String.append(_:)(v64);
      v28._uint64_t countAndFlagsBits = 0xD000000000000015;
      v28._object = v53;
      String.append(_:)(v28);
      unint64_t v29 = v68;
      unint64_t v30 = v69;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      uint64_t v26 = (void *)swift_allocError();
      *(void *)uint64_t v31 = v29;
      *(void *)(v31 + 8) = v30;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(unsigned char *)(v31 + 32) = 2;
      swift_willThrow();
      swift_release();
      uint64_t v65 = 0;
    }
    uint64_t v5 = v57;
    swift_release();
    id v32 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v17 = v20[2];
    unint64_t v33 = v20[3];
    if (v17 >= v33 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v17 + 1, 1, v20);
    }
    v20[2] = v17 + 1;
    v20[v17 + 4] = v26;

    (*v59)(v70, v5);
    uint64_t v10 = v56;
    v19 += v55;
    if (!--v16)
    {
      v21(v56, 1, 1, v5);
      break;
    }
  }
  swift_bridgeObjectRelease();
  id v11 = v52;
  if (v20[2])
  {
    id v42 = (id)v20[4];
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  unint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v44._uint64_t countAndFlagsBits = 0xD000000000000019;
  v44._object = (void *)0x8000000228355380;
  String.append(_:)(v44);
  String.append(_:)(v64);
  v45._uint64_t countAndFlagsBits = 0xD000000000000024;
  v45._object = (void *)0x80000002283553A0;
  String.append(_:)(v45);
  id v46 = objc_msgSend(v11, sel_description, v51);
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;

  v50._uint64_t countAndFlagsBits = v47;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  unint64_t v40 = v68;
  unint64_t v17 = v69;
LABEL_21:
  lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
  swift_allocError();
  *(void *)uint64_t v41 = v40;
  *(void *)(v41 + 8) = v17;
  *(void *)(v41 + 16) = 0;
  *(void *)(v41 + 24) = 0;
  *(unsigned char *)(v41 + 32) = 2;
LABEL_24:
  swift_willThrow();

  return v17;
}

{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  unint64_t v19;
  void *v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  Swift::String v44;
  Swift::String v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  uint64_t v51;
  id v52;
  void *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void (**v58)(char *, char *, uint64_t);
  void (**v59)(char *, uint64_t);
  unsigned int (**v60)(char *, uint64_t, uint64_t);
  void (*v61)(char *, unint64_t, uint64_t);
  unint64_t v62;
  void (**v63)(char *, uint64_t, uint64_t, uint64_t);
  Swift::String v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;

  v64._uint64_t countAndFlagsBits = a1;
  v64._object = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v70 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    id v11 = a3;
  }
  else {
    id v11 = objc_msgSend(self, sel_mainBundle);
  }
  id v12 = a3;
  uint64_t v13 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000);
  id v14 = objc_msgSend(v11, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14)
  {
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD000000000000021;
    unint64_t v67 = 0x8000000228355350;
    id v34 = objc_msgSend(v11, sel_description);
LABEL_20:
    id v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v38 = v37;

    v39._uint64_t countAndFlagsBits = v36;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    unint64_t v40 = v66;
    unint64_t v17 = v67;
    goto LABEL_21;
  }
  uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    unint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v66 = 0xD000000000000021;
    unint64_t v67 = 0x8000000228355350;
    id v34 = objc_msgSend(v11, sel_description);
    goto LABEL_20;
  }
  uint64_t v65 = v3;
  uint64_t v51 = v15;
  id v52 = v11;
  uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  unint64_t v17 = v6 + 16;
  unint64_t v19 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
  uint64_t v55 = *(void *)(v17 + 56);
  unint64_t v62 = v17;
  uint64_t v63 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
  int v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v61 = v18;
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v59 = (void (**)(char *, uint64_t))(v17 - 8);
  uint64_t v20 = (void *)MEMORY[0x263F8EE78];
  long long v53 = (void *)0x80000002283553F0;
  unint64_t v54 = 0x80000002283553D0;
  char v56 = v10;
  uint64_t v57 = v5;
  while (1)
  {
    v61(v10, v19, v5);
    id v21 = *v63;
    (*v63)(v10, 0, 1, v5);
    if ((*v60)(v10, 1, v5) == 1) {
      break;
    }
    uint64_t v22 = (uint64_t)v70;
    (*v58)(v70, v10, v5);
    uint64_t v23 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    __swift_project_boxed_opaque_existential_1((void *)(v23 + 120), *(void *)(v23 + 144));
    swift_retain();
    long long v24 = v65;
    uint64_t v25 = specialized __REAssetService.assetRef(named:in:)(v64._countAndFlagsBits, (void *)v64._object, v22);
    uint64_t v26 = v24;
    if (v24)
    {
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v27 = specialized static LoadableResource.fromCoreAssetType(assetRef:)(v25[2], (void (*)(void))type metadata accessor for AudioFileResource);
      if (v27)
      {
        unint64_t v17 = v27;

        swift_release();
        swift_release();
        (*v59)(v70, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v17;
      }
      unint64_t v68 = 0;
      unint64_t v69 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v68 = 0xD000000000000018;
      unint64_t v69 = v54;
      String.append(_:)(v64);
      v28._uint64_t countAndFlagsBits = 0xD000000000000015;
      v28._object = v53;
      String.append(_:)(v28);
      unint64_t v29 = v68;
      unint64_t v30 = v69;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      uint64_t v26 = (void *)swift_allocError();
      *(void *)uint64_t v31 = v29;
      *(void *)(v31 + 8) = v30;
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(unsigned char *)(v31 + 32) = 2;
      swift_willThrow();
      swift_release();
      uint64_t v65 = 0;
    }
    uint64_t v5 = v57;
    swift_release();
    id v32 = v26;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    }
    unint64_t v17 = v20[2];
    unint64_t v33 = v20[3];
    if (v17 >= v33 >> 1) {
      uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v33 > 1), v17 + 1, 1, v20);
    }
    v20[2] = v17 + 1;
    v20[v17 + 4] = v26;

    (*v59)(v70, v5);
    uint64_t v10 = v56;
    v19 += v55;
    if (!--v16)
    {
      v21(v56, 1, 1, v5);
      break;
    }
  }
  swift_bridgeObjectRelease();
  id v11 = v52;
  if (v20[2])
  {
    id v42 = (id)v20[4];
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  unint64_t v68 = 0;
  unint64_t v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(65);
  v44._uint64_t countAndFlagsBits = 0xD000000000000019;
  v44._object = (void *)0x8000000228355380;
  String.append(_:)(v44);
  String.append(_:)(v64);
  v45._uint64_t countAndFlagsBits = 0xD000000000000024;
  v45._object = (void *)0x80000002283553A0;
  String.append(_:)(v45);
  id v46 = objc_msgSend(v11, sel_description, v51);
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;

  v50._uint64_t countAndFlagsBits = v47;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  unint64_t v40 = v68;
  unint64_t v17 = v69;
LABEL_21:
  lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
  swift_allocError();
  *(void *)uint64_t v41 = v40;
  *(void *)(v41 + 8) = v17;
  *(void *)(v41 + 16) = 0;
  *(void *)(v41 + 24) = 0;
  *(unsigned char *)(v41 + 32) = 2;
LABEL_24:
  swift_willThrow();

  return v17;
}

void static LoadableResource.getAssetFromRealityFileInBundle<A>(name:in:getAsset:)(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t, void *, char *)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  id v52 = a4;
  v53._uint64_t countAndFlagsBits = a1;
  v53._object = a2;
  uint64_t v51 = a5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v12 - 8);
  char v56 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3) {
    id v14 = a3;
  }
  else {
    id v14 = objc_msgSend(self, sel_mainBundle);
  }
  id v15 = a3;
  uint64_t v16 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000);
  id v17 = objc_msgSend(v14, sel_URLsForResourcesWithExtension_subdirectory_, v16, 0);

  if (!v17)
  {
    unint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v54 = 0xD000000000000021;
    unint64_t v55 = 0x8000000228355350;
    id v29 = objc_msgSend(v14, sel_description);
LABEL_21:
    id v33 = v29;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v36 = v35;

    v37._uint64_t countAndFlagsBits = v34;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    unint64_t v38 = v54;
    unint64_t v39 = v55;
    lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
    swift_allocError();
    *(void *)uint64_t v40 = v38;
    *(void *)(v40 + 8) = v39;
    *(void *)(v40 + 16) = 0;
    *(void *)(v40 + 24) = 0;
    *(unsigned char *)(v40 + 32) = 2;
    goto LABEL_22;
  }
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    unint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v54 = 0xD000000000000021;
    unint64_t v55 = 0x8000000228355350;
    id v29 = objc_msgSend(v14, sel_description);
    goto LABEL_21;
  }
  uint64_t v41 = v18;
  id v42 = v14;
  id v21 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  uint64_t v20 = v9 + 16;
  unint64_t v22 = v18 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
  uint64_t v43 = *(void *)(v20 + 56);
  uint64_t v49 = v20;
  Swift::String v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
  uint64_t v47 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
  unint64_t v48 = v21;
  Swift::String v45 = (void (**)(char *, char *, uint64_t))(v20 + 16);
  id v46 = (void (**)(char *, uint64_t))(v20 - 8);
  uint64_t v23 = (void *)MEMORY[0x263F8EE78];
  Swift::String v44 = v11;
  while (1)
  {
    long long v24 = v56;
    v48(v56, v22, v8);
    uint64_t v25 = *v50;
    (*v50)(v24, 0, 1, v8);
    if ((*v47)(v24, 1, v8) == 1) {
      break;
    }
    (*v45)(v11, v24, v8);
    v52(v53._countAndFlagsBits, v53._object, v11);
    if (!v6)
    {

      (*v46)(v11, v8);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    id v26 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
    }
    unint64_t v28 = v23[2];
    unint64_t v27 = v23[3];
    if (v28 >= v27 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v23);
    }
    v23[2] = v28 + 1;
    v23[v28 + 4] = v6;

    id v11 = v44;
    (*v46)(v44, v8);
    uint64_t v6 = 0;
    v22 += v43;
    if (!--v19)
    {
      v25(v56, 1, 1, v8);
      break;
    }
  }
  swift_bridgeObjectRelease();
  id v14 = v42;
  if (!v23[2])
  {
    swift_bridgeObjectRelease();
    unint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
    _StringGuts.grow(_:)(65);
    v31._uint64_t countAndFlagsBits = 0xD000000000000019;
    v31._object = (void *)0x8000000228355380;
    String.append(_:)(v31);
    String.append(_:)(v53);
    v32._uint64_t countAndFlagsBits = 0xD000000000000024;
    v32._object = (void *)0x80000002283553A0;
    String.append(_:)(v32);
    id v29 = objc_msgSend(v14, sel_description, v41);
    goto LABEL_21;
  }
  id v30 = (id)v23[4];
  swift_bridgeObjectRelease();
LABEL_22:
  swift_willThrow();
}

uint64_t closure #1 in static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  __swift_project_boxed_opaque_existential_1((void *)(v9 + 120), *(void *)(v9 + 144));
  swift_retain();
  uint64_t v10 = specialized __REAssetService.assetRef(named:in:)(a1, a2, a3);
  uint64_t result = swift_release();
  if (!v4) {
    *a4 = v10;
  }
  return result;
}

uint64_t one-time initialization function for resourceClasses()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(REAssetType, LoadableResource.Type)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E360;
  *(_DWORD *)(inited + 32) = 13;
  *(void *)(inited + 40) = type metadata accessor for AudioFileResource();
  *(void *)(inited + 48) = &protocol witness table for AudioResource;
  *(_DWORD *)(inited + 56) = 14;
  *(void *)(inited + 64) = type metadata accessor for AudioFileGroupResource();
  *(void *)(inited + 72) = &protocol witness table for AudioResource;
  *(_DWORD *)(inited + 80) = 15;
  *(void *)(inited + 88) = type metadata accessor for AudioUnitResource();
  *(void *)(inited + 96) = &protocol witness table for AudioResource;
  __n128 v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t result = swift_setDeallocating();
  resourceClasses._rawValue = v1;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v10 = v9;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](a1);
  id v42 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v38 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v15 = (char *)&v28 - v14;
  uint64_t v16 = a4;
  MEMORY[0x270FA5388](v17);
  id v35 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v19 - 8);
  uint64_t v34 = v19;
  MEMORY[0x270FA5388](v19);
  id v21 = (char *)&v28 - v20;
  uint64_t v36 = v8;
  uint64_t v22 = dispatch thunk of Collection.count.getter();
  if (!v22) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v23 = v22;
  id v29 = v15;
  uint64_t v45 = MEMORY[0x22A689A60](v16);
  uint64_t v37 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v23);
  uint64_t v43 = v21;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v23 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = (void (**)(char *))(v38 + 2);
    ++v38;
    unint64_t v39 = v25;
    id v26 = v29;
    while (1)
    {
      unint64_t v27 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v39)(v26);
      v27(v44, 0);
      v40(v26, v42);
      if (v10) {
        break;
      }
      uint64_t v10 = 0;
      (*v38)(v26, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v23)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v34);
        return v45;
      }
    }
    (*v38)(v26, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v42, v31);
  }
  return result;
}

uint64_t SIMD4<>.cgColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = SIMD4.scalars.getter(a1);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = a2;
  uint64_t v14 = v4;
  uint64_t v5 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in SIMD4<>.cgColor.getter, (uint64_t)v11, v5, MEMORY[0x263F8EF38], MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v7);
  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBColorSpace != -1) {
    swift_once();
  }
  CGColorRef v9 = CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)(v8 + 32));
  swift_bridgeObjectRelease();
  if (v9) {
    return (uint64_t)v9;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CGColorRef.simd4.getter()
{
  __n128 v1 = v0;

  return specialized SIMD4<>.init(_:)(v1);
}

uint64_t SIMD4.init(_:_:)(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  MEMORY[0x270FA5388](v2);
  MEMORY[0x270FA5388](v3);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.init()();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();
  uint64_t v4 = type metadata accessor for SIMD3();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return dispatch thunk of SIMDStorage.subscript.setter();
}

uint64_t SIMD3<>.init(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8 = *(void *)(*(void *)(a2 - 8) + 64);
  MEMORY[0x270FA5388](a1);
  CGColorRef v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v22 = (char *)&v22 - v11;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v22 - v13;
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = type metadata accessor for SIMD4();
  uint64_t v24 = *(void *)(v18 - 8);
  uint64_t v25 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v22 - v19;
  CGColorRef v23 = a1;
  SIMD4<>.init(_:)(v23, a2, a3, a4);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.init()();
  memcpy(v9, v17, v8);
  dispatch thunk of SIMDStorage.subscript.setter();
  memcpy(v9, v14, v8);
  dispatch thunk of SIMDStorage.subscript.setter();
  dispatch thunk of SIMDStorage.subscript.setter();

  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v20, v25);
}

uint64_t specialized SIMD4<>.init(_:)(CGColorRef color)
{
  if (one-time initialization token for linearSRGBColorSpace != -1) {
    swift_once();
  }
  CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, kCGRenderingIntentDefault, color, 0);
  if (CopyByMatchingToColorSpace)
  {
    CGColorRef v3 = CopyByMatchingToColorSpace;
    uint64_t v4 = CGColorRef.components.getter();
    if (v4)
    {
      uint64_t v5 = v4;
      int64_t v6 = *(void *)(v4 + 16);
      if (v6)
      {
        uint64_t v14 = MEMORY[0x263F8EE78];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
        uint64_t v7 = 0;
        uint64_t v8 = v14;
        unint64_t v9 = *(void *)(v14 + 16);
        do
        {
          double v10 = *(double *)(v5 + 8 * v7 + 32);
          unint64_t v11 = *(void *)(v14 + 24);
          if (v9 >= v11 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v9 + 1, 1);
          }
          ++v7;
          float v12 = v10;
          *(void *)(v14 + 16) = v9 + 1;
          *(float *)(v14 + 4 * v9++ + 32) = v12;
        }
        while (v6 != v7);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = MEMORY[0x263F8EE78];
      }
      if (*(void *)(v8 + 16) == 4)
      {
        specialized SIMD.init<A>(_:)(v8);

        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void SIMD4<>.init(_:)(CGColorRef color, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for linearSRGBColorSpace != -1) {
    swift_once();
  }
  CGColorRef CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, kCGRenderingIntentDefault, color, 0);
  if (CopyByMatchingToColorSpace)
  {
    CGColorRef v9 = CopyByMatchingToColorSpace;
    uint64_t v10 = CGColorRef.components.getter();
    if (v10)
    {
      uint64_t v19 = v10;
      MEMORY[0x270FA5388](v10);
      v16[2] = a2;
      v16[3] = a3;
      uint64_t v17 = a4;
      uint64_t v18 = a2;
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CGFloat]);
      unint64_t v12 = lazy protocol witness table accessor for type [CGFloat] and conformance [A]();
      uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #2 in SIMD4<>.init(_:), (uint64_t)v16, v11, a2, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v13);
      swift_bridgeObjectRelease();
      if (MEMORY[0x22A688F10](v14, a2) == 4)
      {
        type metadata accessor for SIMD4();
        uint64_t v19 = v14;
        type metadata accessor for Array();
        swift_getWitnessTable();
        swift_getWitnessTable();
        SIMD.init<A>(_:)();

        return;
      }
      swift_bridgeObjectRelease();
    }
    LODWORD(v18) = 0;
    uint64_t v15 = 27;
  }
  else
  {
    LODWORD(v18) = 0;
    uint64_t v15 = 24;
  }
  uint64_t v17 = v15;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t SIMD3<>.cgColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v20 = a2;
  MEMORY[0x270FA5388](a1);
  v19[2] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(void *)(*(void *)(*(void *)(*(void *)(v6 + 16) + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = *(void *)(a1 + 24);
  uint64_t v12 = type metadata accessor for SIMD4();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))(v11, v3, a1, v14);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  SIMD4.init(_:_:)((uint64_t)v11);
  uint64_t v17 = SIMD4<>.cgColor.getter(v12, v20);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return v17;
}

uint64_t SIMD4.scalars.getter(uint64_t a1)
{
  getContiguousArrayStorageType<A>(for:)(*(void *)(a1 + 16), *(void *)(a1 + 16));
  swift_allocObject();
  uint64_t v1 = static Array._adoptStorage(_:count:)();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();
  dispatch thunk of SIMDStorage.subscript.getter();

  return _finalizeUninitializedArray<A>(_:)(v1);
}

uint64_t implicit closure #1 in SIMD4<>.cgColor.getter(uint64_t a1)
{
  MEMORY[0x270FA5388](a1);
  memcpy((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v1);
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  return BinaryFloatingPoint.init<A>(_:)();
}

uint64_t partial apply for implicit closure #1 in SIMD4<>.cgColor.getter(uint64_t a1)
{
  return implicit closure #1 in SIMD4<>.cgColor.getter(a1);
}

uint64_t CGColorRef.simd3.getter()
{
  return specialized SIMD4<>.init(_:)((CGColorRef)v0);
}

uint64_t one-time initialization function for linearSRGBWhite()
{
  uint64_t result = closure #1 in variable initialization expression of static CGColorRef.linearSRGBWhite();
  static CGColorRef.linearSRGBWhite = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static CGColorRef.linearSRGBWhite()
{
  if (one-time initialization token for linearSRGBColorSpace != -1) {
    swift_once();
  }
  __asm { FMOV            V0.2D, #1.0 }
  v6[0] = _Q0;
  v6[1] = _Q0;
  uint64_t result = (uint64_t)CGColorCreate((CGColorSpaceRef)static CGColorSpaceRef.linearSRGBColorSpace, (const CGFloat *)v6);
  if (!result)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for linearSRGBColorSpace()
{
  uint64_t result = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002C8]);
  if (result)
  {
    static CGColorSpaceRef.linearSRGBColorSpace = result;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in SIMD4<>.init(_:)()
{
  return dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type [CGFloat] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CGFloat] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CGFloat] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CGFloat]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CGFloat] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (swift_isClassType()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return type metadata accessor for _ContiguousArrayStorage();
  }
}

uint64_t __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()()
{
  size_t v1 = *(void **)(v0 + 24);
  id v2 = (id)REMaterialParameterBlockValueCopyParameterNameArray();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
  uint64_t v5 = (void *)v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  uint64_t v56 = 0;
  uint64_t v6 = (uint64_t *)(v3 + 40);
  uint64_t v47 = v1;
  while (1)
  {
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    MEMORY[0x270FA5388](v4);
    uint64_t v54 = v11;
    uint64_t v55 = v10;
    uint64_t v57 = v8;
    if ((v9 & 0x1000000000000000) != 0 || !(v9 & 0x2000000000000000 | v8 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v45 = v1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
      uint64_t v13 = v56;
      _StringGuts._slowWithCString<A>(_:)();

LABEL_13:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    if ((v9 & 0x2000000000000000) == 0)
    {
      if ((v8 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v12 = v1;
      swift_bridgeObjectRetain();
      uint64_t v13 = v56;
      closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)v59);

      goto LABEL_13;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v14 = v1;
    swift_bridgeObjectRetain();
    uint64_t v13 = v56;
    closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)v59);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v56 = v13;
    if (v60 != 255) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      unint64_t v4 = swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    swift_bridgeObjectRelease();
    uint64_t v33 = v5[7] + 80 * v30;
    uint64_t v34 = *(void **)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    uint64_t v37 = *(void *)(v33 + 16);
    uint64_t v36 = *(void *)(v33 + 24);
    uint64_t v58 = *(void *)(v33 + 32);
    uint64_t v38 = *(void *)(v33 + 48);
    uint64_t v51 = *(void *)(v33 + 56);
    uint64_t v53 = *(void *)(v33 + 40);
    char v39 = *(unsigned char *)(v33 + 64);
    specialized _NativeDictionary._delete(at:)(v30, (uint64_t)v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter(v34, v35, v37, v36, v58, v53, v38, v51, v39);
LABEL_5:
    size_t v1 = v47;
LABEL_6:
    uint64_t v6 = (uint64_t *)(v54 + 16);
    if (v55 == 1) {
      goto LABEL_32;
    }
  }
  unsigned __int8 v52 = v60;
  uint64_t v16 = (void *)v59[0];
  uint64_t v15 = v59[1];
  uint64_t v18 = v59[2];
  uint64_t v17 = v59[3];
  uint64_t v19 = v59[4];
  uint64_t v48 = v59[5];
  uint64_t v49 = v59[6];
  uint64_t v50 = v59[7];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
  uint64_t v23 = v5[2];
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (!__OFADD__(v23, v24))
  {
    char v26 = v21;
    if (v5[3] >= v25)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      uint64_t v27 = v57;
      if ((v26 & 1) == 0) {
        goto LABEL_28;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v57;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9);
      if ((v26 & 1) != (v29 & 1)) {
        goto LABEL_35;
      }
      unint64_t v22 = v28;
      if ((v26 & 1) == 0)
      {
LABEL_28:
        v5[(v22 >> 6) + 8] |= 1 << v22;
        uint64_t v40 = (uint64_t *)(v5[6] + 16 * v22);
        *uint64_t v40 = v27;
        v40[1] = v9;
        uint64_t v41 = v5[7] + 80 * v22;
        *(void *)uint64_t v41 = v16;
        *(void *)(v41 + 8) = v15;
        *(void *)(v41 + 16) = v18;
        *(void *)(v41 + 24) = v17;
        *(void *)(v41 + 32) = v19;
        *(void *)(v41 + 40) = v48;
        *(void *)(v41 + 48) = v49;
        *(void *)(v41 + 56) = v50;
        *(unsigned char *)(v41 + 64) = v52;
        uint64_t v42 = v5[2];
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_34;
        }
        v5[2] = v44;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    uint64_t v7 = v5[7] + 80 * v22;
    outlined consume of __RKMaterialParameterBlock.Parameter(*(void **)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(void *)(v7 + 32), *(void *)(v7 + 40), *(void *)(v7 + 48), *(void *)(v7 + 56), *(unsigned char *)(v7 + 64));
    *(void *)uint64_t v7 = v16;
    *(void *)(v7 + 8) = v15;
    *(void *)(v7 + 16) = v18;
    *(void *)(v7 + 24) = v17;
    *(void *)(v7 + 32) = v19;
    *(void *)(v7 + 40) = v48;
    *(void *)(v7 + 48) = v49;
    *(void *)(v7 + 56) = v50;
    *(unsigned char *)(v7 + 64) = v52;
LABEL_4:
    swift_bridgeObjectRelease();
    unint64_t v4 = swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
LABEL_34:
  __break(1u);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t __RKMaterialParameterBlock.parameters.getter()
{
  return __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
}

void __RKMaterialParameterBlock.parameters.setter(uint64_t a1)
{
  int64_t v1 = 0;
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v2 = a1 + 64;
  uint64_t v3 = v4;
  uint64_t v5 = 1 << *(unsigned char *)(v2 - 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & v3;
  uint64_t v21 = v2;
  int64_t v22 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      uint64_t v27 = (v7 - 1) & v7;
      int64_t v28 = v1;
      unint64_t v8 = __clz(__rbit64(v7)) | (v1 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
      return;
    }
    if (v17 >= v22) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    int64_t v19 = v1 + 1;
    if (!v18)
    {
      int64_t v19 = v1 + 2;
      if (v1 + 2 >= v22) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v1 + 3;
        if (v1 + 3 >= v22) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v27 = (v18 - 1) & v18;
    int64_t v28 = v19;
    unint64_t v8 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_5:
    uint64_t v9 = *(void *)(a1 + 56) + 80 * v8;
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v25 = *(void *)(v9 + 24);
    uint64_t v26 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 40);
    uint64_t v14 = *(void *)(v9 + 48);
    uint64_t v15 = *(void *)(v9 + 56);
    char v16 = *(unsigned char *)(v9 + 64);
    v29[0] = *(void *)v9;
    uint64_t v10 = (void *)v29[0];
    v29[1] = v11;
    uint64_t v29[2] = v26;
    v29[3] = v25;
    v29[4] = v12;
    v29[5] = v13;
    v29[6] = v14;
    v29[7] = v15;
    char v30 = v16;
    BOOL v24 = (const char *)(String.utf8CString.getter() + 32);
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v24, (uint64_t)v29);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    unint64_t v7 = v27;
    int64_t v1 = v28;
  }
  uint64_t v20 = v1 + 4;
  if (v1 + 4 < v22)
  {
    unint64_t v18 = *(void *)(v21 + 8 * v20);
    if (!v18)
    {
      while (1)
      {
        int64_t v19 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_25;
        }
        if (v19 >= v22) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v19);
        ++v20;
        if (v18) {
          goto LABEL_20;
        }
      }
    }
    int64_t v19 = v1 + 4;
    goto LABEL_20;
  }
LABEL_21:

  swift_release();
}

void (*__RKMaterialParameterBlock.parameters.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
  return __RKMaterialParameterBlock.parameters.modify;
}

void __RKMaterialParameterBlock.parameters.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v21 = v2 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v2 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  uint64_t v23 = *a1;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v28)
  {
    if (v5)
    {
      uint64_t v27 = (v5 - 1) & v5;
      int64_t v28 = i;
      unint64_t v7 = __clz(__rbit64(v5)) | (i << 6);
      uint64_t v8 = v23;
      goto LABEL_6;
    }
    int64_t v17 = i + 1;
    uint64_t v8 = v23;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v17 >= v22) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    int64_t v19 = i + 1;
    if (!v18)
    {
      int64_t v19 = i + 2;
      if (i + 2 >= v22) {
        goto LABEL_22;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = i + 3;
        if (i + 3 >= v22) {
          goto LABEL_22;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v27 = (v18 - 1) & v18;
    int64_t v28 = v19;
    unint64_t v7 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_6:
    uint64_t v9 = *(void *)(v8 + 56) + 80 * v7;
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v25 = *(void *)(v9 + 24);
    uint64_t v26 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 40);
    uint64_t v14 = *(void *)(v9 + 48);
    uint64_t v15 = *(void *)(v9 + 56);
    char v16 = *(unsigned char *)(v9 + 64);
    v29[0] = *(void *)v9;
    uint64_t v10 = (void *)v29[0];
    v29[1] = v11;
    uint64_t v29[2] = v26;
    v29[3] = v25;
    v29[4] = v12;
    v29[5] = v13;
    v29[6] = v14;
    v29[7] = v15;
    char v30 = v16;
    BOOL v24 = (const char *)(String.utf8CString.getter() + 32);
    swift_bridgeObjectRetain();
    outlined copy of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v24, (uint64_t)v29);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of __RKMaterialParameterBlock.Parameter(v10, v11, v26, v25, v12, v13, v14, v15, v16);
    unint64_t v5 = v27;
  }
  uint64_t v20 = i + 4;
  if (i + 4 >= v22)
  {
LABEL_22:
    swift_release();
    goto LABEL_23;
  }
  unint64_t v18 = *(void *)(v21 + 8 * v20);
  if (v18)
  {
    int64_t v19 = i + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v22) {
      goto LABEL_22;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_22800187C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = __RKMaterialParameterBlock.buildParametersDictionaryFromCurrentState()();
  *a1 = result;
  return result;
}

void sub_2280018C8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  __RKMaterialParameterBlock.parameters.setter(v0);
}

id static HoverEffectComponent.HoverEffect.spotlight(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static HoverEffectComponent.HoverEffect.spotlight(_:)(a1, 0, a2);
}

id static HoverEffectComponent.HoverEffect.highlight(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static HoverEffectComponent.HoverEffect.spotlight(_:)(a1, 1, a2);
}

id static HoverEffectComponent.HoverEffect.spotlight(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void **)a1;
  unint64_t v4 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v4;
  *(unsigned char *)(a3 + 16) = a2;
  *(unsigned char *)(a3 + 17) = 1;
  return v3;
}

__n128 static HoverEffectComponent.HoverEffect.shader(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u16[0] = 258;
  return result;
}

uint64_t HoverEffectComponent.HoverEffect.isHierarchical.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t HoverEffectComponent.HoverEffect.isHierarchical.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*HoverEffectComponent.HoverEffect.isHierarchical.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id HoverEffectComponent.hoverEffect.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 17);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  unsigned __int8 v5 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 17) = v4;
  return outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(v2, v3, v5);
}

id outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(id result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return result;
  }
  return result;
}

void HoverEffectComponent.hoverEffect.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  char v5 = *((unsigned char *)a1 + 17);
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
  *(void *)uint64_t v1 = v2;
  *(void *)(v1 + 8) = v3;
  *(unsigned char *)(v1 + 16) = v4;
  *(unsigned char *)(v1 + 17) = v5;
}

void outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(id a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
}
  }

uint64_t (*HoverEffectComponent.hoverEffect.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.OpacityFunction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HoverEffectComponent.OpacityFunction.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int HoverEffectComponent.OpacityFunction.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

CGColorRef one-time initialization function for default()
{
  CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static HoverEffectComponent.SpotlightHoverEffectStyle.default = (uint64_t)result;
  dword_2681C0E60 = 1065353216;
  byte_2681C0E64 = 0;
  return result;
}

{
  CGColorRef result;

  CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static HoverEffectComponent.HighlightHoverEffectStyle.default = (uint64_t)result;
  dword_2681C0E70 = 1065353216;
  byte_2681C0E74 = 0;
  return result;
}

id static HoverEffectComponent.SpotlightHoverEffectStyle.default.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  int v3 = dword_2681C0E60;
  char v4 = byte_2681C0E64;
  *(void *)a1 = static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v4;

  return v2;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle._color.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle.strength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*HoverEffectComponent.SpotlightHoverEffectStyle.opacityFunction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.SpotlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectComponent.SpotlightHoverEffectStyle(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

CGColorRef HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)@<X0>(CGColorRef result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  char v6 = *a2;
  if (!result) {
    CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  }
  *(void *)a3 = result;
  *(float *)(a3 + 8) = a4;
  *(unsigned char *)(a3 + 12) = v6;
  return result;
}

id static HoverEffectComponent.HighlightHoverEffectStyle.default.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static HoverEffectComponent.HighlightHoverEffectStyle.default;
  int v3 = dword_2681C0E70;
  char v4 = byte_2681C0E74;
  *(void *)a1 = static HoverEffectComponent.HighlightHoverEffectStyle.default;
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v4;

  return v2;
}

id HoverEffectComponent.HighlightHoverEffectStyle._color.getter()
{
  return *v0;
}

void HoverEffectComponent.HighlightHoverEffectStyle._color.setter(void *a1)
{
  *Swift::UInt v1 = a1;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle._color.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float HoverEffectComponent.HighlightHoverEffectStyle.strength.getter()
{
  return *(float *)(v0 + 8);
}

void HoverEffectComponent.HighlightHoverEffectStyle.strength.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle.strength.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 12);
}

unsigned char *HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 12) = *result;
  return result;
}

uint64_t (*HoverEffectComponent.HighlightHoverEffectStyle.opacityFunction.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(a1, a2);
}

RealityFoundation::HoverEffectComponent::ShaderHoverEffectInputs __swiftcall HoverEffectComponent.ShaderHoverEffectInputs.init(fadeInDuration:fadeOutDuration:)(Swift::Double fadeInDuration, Swift::Double fadeOutDuration)
{
  if (fadeInDuration > 10.0) {
    fadeInDuration = 10.0;
  }
  if (fadeOutDuration > 10.0) {
    fadeOutDuration = 10.0;
  }
  *uint64_t v2 = fadeInDuration;
  v2[1] = fadeOutDuration;
  result._fadeOutDuration = fadeOutDuration;
  result._fadeInDuration = fadeInDuration;
  return result;
}

double static HoverEffectComponent.ShaderHoverEffectInputs.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.2;
  *a1 = xmmword_22832EBE0;
  return result;
}

double HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter()
{
  return *(double *)v0;
}

void HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.setter(double a1)
{
  if (a1 > 10.0) {
    a1 = 10.0;
  }
  *uint64_t v1 = a1;
}

uint64_t (*HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify(void *a1))(uint64_t result)
{
  a1[1] = v1;
  *a1 = *v1;
  return HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify;
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.modify(uint64_t result)
{
  double v1 = *(double *)result;
  if (*(double *)result > 10.0) {
    double v1 = 10.0;
  }
  **(double **)(result + 8) = v1;
  return result;
}

double HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter()
{
  return *(double *)(v0 + 8);
}

void HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.setter(double a1)
{
  if (a1 > 10.0) {
    a1 = 10.0;
  }
  *(double *)(v1 + 8) = a1;
}

uint64_t (*HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify(void *a1))(uint64_t result)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify;
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.modify(uint64_t result)
{
  double v1 = *(double *)result;
  if (*(double *)result > 10.0) {
    double v1 = 10.0;
  }
  *(double *)(*(void *)(result + 8) + 8) = v1;
  return result;
}

BOOL static HoverEffectComponent.ShaderHoverEffectInputs.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HoverEffectComponent.ShaderHoverEffectInputs(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

id HoverEffectComponent.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v2 = (void *)static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  unint64_t v3 = dword_2681C0E60 | ((unint64_t)byte_2681C0E64 << 32);
  *(void *)a1 = static HoverEffectComponent.SpotlightHoverEffectStyle.default;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = 256;

  return v2;
}

uint64_t HoverEffectComponent.init(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v3 = *(_OWORD *)result;
  char v4 = *(unsigned char *)(result + 16);
  char v5 = *(unsigned char *)(result + 17);
  if (one-time initialization token for default != -1)
  {
    long long v6 = *(_OWORD *)result;
    double result = swift_once();
    long long v3 = v6;
  }
  *(_OWORD *)a2 = v3;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  return result;
}

uint64_t static HoverEffectComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int Style = RERemoteEffectsComponentGetStyle();
  if (Style == 2)
  {
    RERemoteEffectsComponentGetColorTint();
    RERemoteEffectsComponentGetIntensityMultiplier();
    unsigned int v11 = v10;
    int OpacityFunction = RERemoteEffectsComponentGetOpacityFunction();
    uint64_t v7 = RECreateCGColorFromColorGamut();
    unint64_t v13 = (unint64_t)(OpacityFunction == 2) << 33;
    if (OpacityFunction == 1) {
      unint64_t v13 = 0x100000000;
    }
    *(void *)&double v8 = v13 | v11;
    char v9 = 1;
  }
  else if (Style == 1)
  {
    RERemoteEffectsComponentGetGlowAppearDurationOverride();
    double v4 = v3;
    RERemoteEffectsComponentGetGlowDisappearDurationOverride();
    if (v4 <= 10.0) {
      double v6 = v4;
    }
    else {
      double v6 = 10.0;
    }
    if (v5 > 10.0) {
      double v5 = 10.0;
    }
    uint64_t v7 = *(void *)&v6;
    double v8 = v5;
    char v9 = 2;
  }
  else
  {
    RERemoteEffectsComponentGetColorTint();
    RERemoteEffectsComponentGetIntensityMultiplier();
    unsigned int v15 = v14;
    int v16 = RERemoteEffectsComponentGetOpacityFunction();
    uint64_t v7 = RECreateCGColorFromColorGamut();
    char v9 = 0;
    unint64_t v17 = (unint64_t)(v16 == 2) << 33;
    if (v16 == 1) {
      unint64_t v17 = 0x100000000;
    }
    *(void *)&double v8 = v17 | v15;
  }
  uint64_t result = RERemoteEffectsComponentIsHierarchical();
  char v19 = result;
  if (one-time initialization token for default != -1) {
    uint64_t result = swift_once();
  }
  *(void *)a1 = v7;
  *(double *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v19;
  return result;
}

uint64_t HoverEffectComponent.__toCore(_:)()
{
  double v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  RERemoteEffectsComponentSetEnableEntityHoverEffect();
  RERemoteEffectsComponentResetGlowAppearDurationOverride();
  RERemoteEffectsComponentResetGlowDisappearDurationOverride();
  RERemoteEffectsComponentSetIsHierarchical();
  if (v3)
  {
    if (v3 != 1)
    {
      RERemoteEffectsComponentSetStyle();
      RERemoteEffectsComponentSetGlowAppearDurationOverride();
      RERemoteEffectsComponentSetGlowDisappearDurationOverride();
      goto LABEL_7;
    }
    id v4 = v1;
    RERemoteEffectsComponentSetStyle();
    RECGColorToColorGamut();
    RERemoteEffectsComponentSetColorTint();
    RERemoteEffectsComponentSetIntensityMultiplier();
    RERemoteEffectsComponentSetOpacityFunction();
    double v5 = v1;
    uint64_t v6 = v2;
    unsigned __int8 v7 = 1;
  }
  else
  {
    id v8 = v1;
    RERemoteEffectsComponentSetStyle();
    RECGColorToColorGamut();
    RERemoteEffectsComponentSetColorTint();
    RERemoteEffectsComponentSetIntensityMultiplier();
    RERemoteEffectsComponentSetOpacityFunction();
    double v5 = v1;
    uint64_t v6 = v2;
    unsigned __int8 v7 = 0;
  }
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v5, v6, v7);
LABEL_7:
  RELinkedOnOrAfterFall2024OSVersions();
  RERemoteEffectsComponentSetVersion();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance HoverEffectComponent(_DWORD *a1@<X8>)
{
  *a1 = 3022;
}

void static HoverEffectComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3022;
}

BOOL specialized static HoverEffectComponent.HighlightHoverEffectStyle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a1 + 12);
  float v4 = *(float *)(a2 + 8);
  int v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  char v6 = static _CFObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v6 & 1) != 0 && v2 == v4) {
    return v3 == v5;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction;
  if (!lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectComponent.OpacityFunction and conformance HoverEffectComponent.OpacityFunction);
  }
  return result;
}

double sub_228002500@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double *sub_22800250C(double *result, double *a2)
{
  double v2 = *result;
  if (*result > 10.0) {
    double v2 = 10.0;
  }
  *a2 = v2;
  return result;
}

double sub_228002524@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double *sub_228002530(double *result, uint64_t a2)
{
  double v2 = *result;
  if (*result > 10.0) {
    double v2 = 10.0;
  }
  *(double *)(a2 + 8) = v2;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectComponent()
{
  return &type metadata for HoverEffectComponent;
}

uint64_t initializeBufferWithCopyOfBuffer for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithCopy for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v5, v6);
  unsigned __int8 v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v7, v8, v9);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for HoverEffectComponent(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v7 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v5, v6, v7);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 17);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 17) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HoverEffect()
{
  return &type metadata for HoverEffectComponent.HoverEffect;
}

unsigned char *storeEnumTagSinglePayload for HoverEffectComponent.OpacityFunction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228002810);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.OpacityFunction()
{
  return &type metadata for HoverEffectComponent.OpacityFunction;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.SpotlightHoverEffectStyle()
{
  return &type metadata for HoverEffectComponent.SpotlightHoverEffectStyle;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HighlightHoverEffectStyle()
{
  return &type metadata for HoverEffectComponent.HighlightHoverEffectStyle;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs()
{
  return &type metadata for HoverEffectComponent.ShaderHoverEffectInputs;
}

void destroy for HoverEffectComponent.HoverEffect.HoverEffectType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for HoverEffectComponent.HoverEffect.HoverEffectType(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for HoverEffectComponent.HoverEffect.HoverEffectType(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a2, v4, v5);
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for HoverEffectComponent.HoverEffect.HoverEffectType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for HoverEffectComponent.HoverEffect.HoverEffectType()
{
  return &type metadata for HoverEffectComponent.HoverEffect.HoverEffectType;
}

BOOL specialized static HoverEffectComponent.HoverEffect.HoverEffectType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a1;
  double v2 = *(double *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  double v6 = *(double *)a2;
  double v5 = *(double *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      if (static _CFObject.== infix(_:_:)())
      {
        float v8 = *(float *)&v2;
        float v9 = *(float *)&v5;
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
        double v10 = v3;
        uint64_t v11 = *(void *)&v2;
        unsigned __int8 v12 = 0;
        goto LABEL_17;
      }
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 0);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 0);
      double v15 = v3;
      uint64_t v16 = *(void *)&v2;
      unsigned __int8 v17 = 0;
LABEL_13:
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v15, v16, v17);
      return 0;
    }
    goto LABEL_7;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      type metadata accessor for CGColorRef(0);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
      if (static _CFObject.== infix(_:_:)())
      {
        float v8 = *(float *)&v2;
        float v9 = *(float *)&v5;
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
        double v10 = v3;
        uint64_t v11 = *(void *)&v2;
        unsigned __int8 v12 = 1;
LABEL_17:
        outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v10, v11, v12);
        return v8 == v9 && ((*(void *)&v5 ^ *(void *)&v2) & 0xFF00000000) == 0;
      }
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, 1u);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 1u);
      double v15 = v3;
      uint64_t v16 = *(void *)&v2;
      unsigned __int8 v17 = 1;
      goto LABEL_13;
    }
LABEL_7:
    id v13 = *(id *)&v3;
LABEL_12:
    outlined copy of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, v7);
    outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v3, *(uint64_t *)&v2, v4);
    double v15 = v6;
    uint64_t v16 = *(void *)&v5;
    unsigned __int8 v17 = v7;
    goto LABEL_13;
  }
  if (v7 != 2) {
    goto LABEL_12;
  }
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)a1, *(uint64_t *)&v2, 2u);
  outlined consume of HoverEffectComponent.HoverEffect.HoverEffectType(*(id *)&v6, *(uint64_t *)&v5, 2u);
  return v2 == v5 && v3 == v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So5RESRTas5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF116Namesyys13OpaquePointerVFyAA0cH0VXEfU_So5RESRTa0A3Kit9TransformVcfu_33_00c2e038d769be1530659e2383c6619cAmJTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v15;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    int v4 = (long long *)(a1 + 64);
    do
    {
      long long v5 = *(v4 - 2);
      long long v6 = *(v4 - 1);
      long long v7 = *v4;
      unint64_t v9 = *(void *)(v15 + 16);
      unint64_t v8 = *(void *)(v15 + 24);
      if (v9 >= v8 >> 1)
      {
        long long v13 = *(v4 - 1);
        long long v14 = *(v4 - 2);
        long long v12 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        long long v7 = v12;
        long long v6 = v13;
        long long v5 = v14;
      }
      *(void *)(v15 + 16) = v9 + 1;
      double v10 = (_OWORD *)(v15 + 48 * v9);
      _OWORD v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So13simd_float4x4as5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF126Namesyys13OpaquePointerVFyAA0cH0VXEfU_So13simd_float4x4a0A3Kit9TransformVcfu0_33_468c2b3721e400eee04f35cd537c1492AmJTf3nnnpk_nTf1cn_n(float32x4_t *a1)
{
  int64_t v1 = a1[1].i64[0];
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v24 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v24;
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    int v4 = a1 + 4;
    do
    {
      float32x4_t v18 = v4[-2];
      float32x4_t v19 = *v4;
      *(double *)&long long v5 = simd_matrix4x4(v4[-1]);
      long long v20 = v5;
      long long v21 = v6;
      long long v22 = v7;
      float32x4_t v23 = v8;
      simd_float4x4.scale(_:)(v18);
      long long v9 = v20;
      long long v10 = v21;
      long long v11 = v22;
      float32x4_t v12 = v23;
      unint64_t v14 = *(void *)(v24 + 16);
      unint64_t v13 = *(void *)(v24 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        float32x4_t v12 = v23;
        long long v11 = v22;
        long long v10 = v21;
        long long v9 = v20;
      }
      float32x4_t v15 = vaddq_f32(v19, v12);
      v15.i32[3] = v12.i32[3];
      *(void *)(v24 + 16) = v14 + 1;
      uint64_t v16 = (_OWORD *)(v24 + (v14 << 6));
      v16[2] = v9;
      v16[3] = v10;
      void v16[4] = v11;
      v16[5] = v15;
      v4 += 3;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t SkeletalPosesComponent.poses.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t SkeletalPosesComponent.poses.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_bridgeObjectRelease();
  *int64_t v1 = v2;
  return result;
}

uint64_t (*SkeletalPosesComponent.poses.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SkeletalPosesComponent.init(poses:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  a2[1] = 0;
  return result;
}

int64_t static SkeletalPosesComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  int64_t result = specialized static SkeletalPosesComponent.getCoreAsset(_:)();
  int64_t v5 = result;
  if (!result)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
LABEL_15:
    *a2 = v7;
    a2[1] = v5;
    return result;
  }
  int64_t result = RESkeletalPoseComponentGetSkeletonCount();
  if ((result & 0x8000000000000000) == 0)
  {
    int64_t v6 = result;
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (result)
    {
      int64_t v18 = v5;
      uint64_t v19 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      uint64_t v8 = 0;
      uint64_t v7 = v19;
      do
      {
        RESkeletalPoseComponentGetPoseName();
        uint64_t v9 = String.init(cString:)();
        uint64_t v11 = v10;
        RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
        if (v8 < RESkeletalPoseComponentGetSkeletonCount()
          && (uint64_t JointCount = RESkeletalPoseComponentGetJointCount()) != 0)
        {
          uint64_t v13 = JointCount;
          if (JointCount < 0) {
            goto LABEL_17;
          }
          type metadata accessor for RESRT(0);
          uint64_t v14 = static Array._allocateBufferUninitialized(minimumCapacity:)();
          *(void *)(v14 + 16) = v13;
          int64_t result = RESkeletalPoseComponentGetJointTransforms();
          *(void *)(v14 + 16) = v13;
        }
        else
        {
          int64_t result = (int64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0, MEMORY[0x263F8EE78]);
          uint64_t v14 = result;
        }
        unint64_t v16 = *(void *)(v19 + 16);
        unint64_t v15 = *(void *)(v19 + 24);
        if (v16 >= v15 >> 1) {
          int64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        }
        uint64_t v17 = v19 + 56 * v16;
        *(void *)(v17 + 32) = v3;
        *(void *)(v17 + 40) = v8;
        *(void *)(v19 + 16) = v16 + 1;
        *(unsigned char *)(v17 + 48) = 0;
        *(void *)(v17 + 56) = v9;
        *(void *)(v17 + 64) = v11;
        *(void *)(v17 + 72) = 0;
        *(void *)(v17 + 80) = v14;
        ++v8;
      }
      while (v6 != v8);
      int64_t v5 = v18;
    }
    goto LABEL_15;
  }
  __break(1u);
LABEL_17:
  int64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SkeletalPosesComponent.__toCore(_:)(Swift::OpaquePointer *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = 72;
    while (!*(void *)(v2 + v4))
    {
      v4 += 56;
      if (!--v3) {
        goto LABEL_7;
      }
    }
    SkeletalPosesComponent.updateInternalPoseJointNames(_:)((Swift::OpaquePointer)a1->_rawValue);
  }
LABEL_7:
  uint64_t result = RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  uint64_t v6 = *(void *)(v2 + 16);
  if (!v6) {
    return result;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v6; ++i)
  {
    uint64_t v8 = *(void *)(v2 + 32 + 56 * i + 48);
    RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
    if (i >= RESkeletalPoseComponentGetSkeletonCount()) {
      continue;
    }
    uint64_t result = RESkeletalPoseComponentGetJointCount();
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      if (v9 >= result) {
        uint64_t v10 = result;
      }
      else {
        uint64_t v10 = *(void *)(v8 + 16);
      }
      if (!v10) {
        continue;
      }
    }
    else
    {
      if (result >= 1) {
        continue;
      }
      uint64_t v10 = result;
      if (!result) {
        continue;
      }
    }
    if (result == v10)
    {
      RESkeletalPoseComponentSetJointTransforms();
    }
    else
    {
      if (v10 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v11 = 0;
      uint64_t v12 = v8 + 64;
      do
      {
        uint64_t v13 = v11 + 1;
        RESkeletalPoseComponentSetJointTransform();
        v12 += 48;
        uint64_t v11 = v13;
      }
      while (v10 != v13);
    }
    RENetworkMarkComponentDirty();
  }

  return swift_bridgeObjectRelease();
}

void protocol witness for static Component.__coreComponentType.getter in conformance SkeletalPosesComponent(_DWORD *a1@<X8>)
{
  *a1 = 26;
}

void static SkeletalPosesComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 26;
}

Swift::Void __swiftcall SkeletalPosesComponent.updateInternalPoseJointNames(_:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = *v1;
  uint64_t SkeletalPoseDefinition = RESkeletalPoseComponentGetSkeletalPoseDefinition();
  if (SkeletalPoseDefinition)
  {
    uint64_t v5 = SkeletalPoseDefinition;
    uint64_t PoseCount = RESkeletalPoseDefinitionAssetGetPoseCount();
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    char v29 = (void *)MEMORY[0x263F8EE78];
    char v30 = (void *)MEMORY[0x263F8EE78];
    uint64_t v28 = MEMORY[0x263F8EE78];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_22830EC60;
    *(void *)(inited + 32) = v7;
    uint64_t v27 = (void *)inited;
    ModelSpaceuint64_t PoseCount = RESkeletalPoseDefinitionAssetGetModelSpacePoseCount();
    uint64_t v25 = v7;
    uint64_t v26 = v7;
    uint64_t v24 = v7;
    uint64_t v10 = swift_initStackObject();
    *(_OWORD *)(v10 + 16) = xmmword_22830EC60;
    *(void *)(v10 + 32) = v7;
    float32x4_t v23 = (void *)v10;
    long long v22 = v7;
    uint64_t v11 = *(void *)(v3 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)(v3 + 80);
      do
      {
        uint64_t v14 = *(v12 - 1);
        uint64_t v13 = *v12;
        long long v15 = *(_OWORD *)(v12 - 3);
        char v16 = *((unsigned char *)v12 - 32);
        long long v17 = *((_OWORD *)v12 - 3);
        char v18 = v16;
        long long v19 = v15;
        uint64_t v20 = v14;
        uint64_t v21 = v13;
        closure #1 in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t *)&v17, PoseCount, v5, &v30, &v27, &v29, (uint64_t)&v28, (uint64_t)&v22, (uint64_t)a1._rawValue, ModelSpacePoseCount, &v26, &v23, &v25, &v24);
        v12 += 7;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
    }
    RENetworkMarkComponentDirty();
    swift_bridgeObjectRelease();
    $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t)&v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)((uint64_t)&v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t $defer #1 () in SkeletalPosesComponent.updateInternalPoseJointNames(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      uint64_t v4 = *(void *)(v1 + 32 + 8 * i);
      uint64_t v5 = *(void *)(v4 + 16);
      if (v5)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v5; ++j)
        {
          uint64_t v7 = *(void **)(v4 + 8 * j + 32);
          free(v7);
        }
        swift_bridgeObjectRelease();
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in SkeletalPosesComponent.updateInternalPoseJointNames(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void **a4, void **a5, void **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14)
{
  uint64_t v15 = v14;
  uint64_t v207 = *MEMORY[0x263EF8340];
  uint64_t v16 = a1[1];
  uint64_t v188 = a1[3];
  uint64_t v189 = *a1;
  uint64_t v186 = a1[5];
  uint64_t v187 = a1[4];
  uint64_t v199 = a2;
  uint64_t v200 = a1[6];
  uint64_t v195 = v16;
  if ((a1[2] & 1) == 0)
  {
    if (a2 < 0) {
      goto LABEL_189;
    }
    if (!a2) {
      goto LABEL_157;
    }
    uint64_t v96 = 0;
    while (1)
    {
      if (v96 == a2) {
        goto LABEL_183;
      }
      if (v96 != v16) {
        break;
      }
      *(void *)&long long v203 = v189;
      *((void *)&v203 + 1) = v16;
      LOBYTE(v204) = 0;
      *((void *)&v204 + 1) = v188;
      *(void *)&long long v205 = v187;
      *((void *)&v205 + 1) = v186;
      *(void *)&long long v206 = v200;
      int64_t v97 = SkeletalPose.jointNames.getter();
      uint64_t v98 = *a6;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a6 = v98;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v98[2] + 1, 1, v98);
        *a6 = v98;
      }
      unint64_t v101 = v98[2];
      unint64_t v100 = v98[3];
      if (v101 >= v100 >> 1)
      {
        uint64_t v98 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v100 > 1), v101 + 1, 1, v98);
        *a6 = v98;
      }
      v98[2] = v101 + 1;
      v98[v101 + 4] = v97;
      uint64_t v102 = *(void *)(v97 + 16);
      if (v102)
      {
        swift_bridgeObjectRetain();
        int64_t v103 = v97 + 40;
        uint64_t v104 = (void *)MEMORY[0x263F8EE78];
        do
        {
          long long v105 = (const char *)(String.utf8CString.getter() + 32);
          swift_bridgeObjectRetain();
          v106 = strdup(v105);
          swift_release();
          swift_bridgeObjectRelease();
          if (v106)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104[2] + 1, 1, v104);
            }
            unint64_t v108 = v104[2];
            unint64_t v107 = v104[3];
            if (v108 >= v107 >> 1) {
              uint64_t v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v107 > 1), v108 + 1, 1, v104);
            }
            v104[2] = v108 + 1;
            v104[v108 + 4] = v106;
          }
          v103 += 16;
          --v102;
        }
        while (v102);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v104 = (void *)MEMORY[0x263F8EE78];
      }
      swift_bridgeObjectRelease();
      uint64_t v120 = v104[2];
      uint64_t v121 = *a4;
      char v122 = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v121;
      if ((v122 & 1) == 0)
      {
        uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v121[2] + 1, 1, v121);
        *a4 = v121;
      }
      unint64_t v124 = v121[2];
      unint64_t v123 = v121[3];
      if (v124 >= v123 >> 1) {
        uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v123 > 1), v124 + 1, 1, v121);
      }
      v121[2] = v124 + 1;
      v125 = &v121[3 * v124];
      v125[4] = v120;
      v125[5] = v104 + 4;
      v125[6] = 0;
      *a4 = v121;
      v126 = *a5;
      char v127 = swift_isUniquelyReferenced_nonNull_native();
      *a5 = v126;
      if ((v127 & 1) == 0)
      {
        v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v126[2] + 1, 1, v126);
        *a5 = v126;
      }
      unint64_t v129 = v126[2];
      unint64_t v128 = v126[3];
      if (v129 >= v128 >> 1)
      {
        v126 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v128 > 1), v129 + 1, 1, v126);
        *a5 = v126;
      }
      v126[2] = v129 + 1;
      v126[v129 + 4] = v104;
      uint64_t v130 = swift_bridgeObjectRetain();
      uint64_t v131 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So5RESRTas5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF116Namesyys13OpaquePointerVFyAA0cH0VXEfU_So5RESRTa0A3Kit9TransformVcfu_33_00c2e038d769be1530659e2383c6619cAmJTf3nnnpk_nTf1cn_n(v130);
      swift_bridgeObjectRelease();
LABEL_148:
      v159 = *(void **)a7;
      char v160 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)a7 = v159;
      if ((v160 & 1) == 0)
      {
        v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v159[2] + 1, 1, v159);
        *(void *)a7 = v159;
      }
      unint64_t v162 = v159[2];
      unint64_t v161 = v159[3];
      if (v162 >= v161 >> 1)
      {
        v159 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v161 > 1), v162 + 1, 1, v159);
        *(void *)a7 = v159;
      }
      v159[2] = v162 + 1;
      v159[v162 + 4] = v131;
      RESkeletalPoseComponentGetPoseName();
      uint64_t v163 = String.init(cString:)();
      uint64_t v165 = v164;
      v166 = *(void **)a8;
      char v167 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)a8 = v166;
      if ((v167 & 1) == 0)
      {
        v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v166[2] + 1, 1, v166);
        *(void *)a8 = v166;
      }
      unint64_t v169 = v166[2];
      unint64_t v168 = v166[3];
      if (v169 >= v168 >> 1)
      {
        v166 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v168 > 1), v169 + 1, 1, v166);
        *(void *)a8 = v166;
      }
      ++v96;
      v166[2] = v169 + 1;
      v170 = &v166[2 * v169];
      v170[4] = v163;
      v170[5] = v165;
      a2 = v199;
      uint64_t v16 = v195;
      if (v96 == v199) {
        goto LABEL_157;
      }
    }
    int64_t JointCount = RESkeletalPoseDefinitionAssetGetJointCount();
    if (JointCount < 0) {
      goto LABEL_185;
    }
    int64_t v110 = JointCount;
    if (JointCount)
    {
      *(void *)&long long v203 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount, 0);
      uint64_t v111 = 0;
      uint64_t v112 = v203;
      do
      {
        RESkeletalPoseDefinitionAssetGetJointName();
        uint64_t v113 = String.init(cString:)();
        uint64_t v115 = v114;
        *(void *)&long long v203 = v112;
        unint64_t v117 = *(void *)(v112 + 16);
        unint64_t v116 = *(void *)(v112 + 24);
        unint64_t v118 = v117 + 1;
        if (v117 >= v116 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v116 > 1, v117 + 1, 1);
          uint64_t v112 = v203;
        }
        ++v111;
        *(void *)(v112 + 16) = v118;
        uint64_t v119 = v112 + 16 * v117;
        *(void *)(v119 + 32) = v113;
        *(void *)(v119 + 40) = v115;
      }
      while (v110 != v111);
    }
    else
    {
      v132 = (void *)MEMORY[0x263F8EE78];
      unint64_t v118 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v112 = MEMORY[0x263F8EE78];
      if (!v118)
      {
LABEL_129:
        uint64_t v138 = v132[2];
        v139 = *a4;
        char v140 = swift_isUniquelyReferenced_nonNull_native();
        *a4 = v139;
        if ((v140 & 1) == 0)
        {
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1, v139);
          *a4 = v139;
        }
        unint64_t v142 = v139[2];
        unint64_t v141 = v139[3];
        if (v142 >= v141 >> 1) {
          v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v141 > 1), v142 + 1, 1, v139);
        }
        v139[2] = v142 + 1;
        __n128 v143 = &v139[3 * v142];
        v143[4] = v138;
        v143[5] = v132 + 4;
        v143[6] = 0;
        *a4 = v139;
        v144 = *a5;
        char v145 = swift_isUniquelyReferenced_nonNull_native();
        *a5 = v144;
        if ((v145 & 1) == 0)
        {
          v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v144[2] + 1, 1, v144);
          *a5 = v144;
        }
        unint64_t v147 = v144[2];
        unint64_t v146 = v144[3];
        if (v147 >= v146 >> 1)
        {
          v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v146 > 1), v147 + 1, 1, v144);
          *a5 = v144;
        }
        v144[2] = v147 + 1;
        v144[v147 + 4] = v132;
        v148 = *a6;
        char v149 = swift_isUniquelyReferenced_nonNull_native();
        *a6 = v148;
        if ((v149 & 1) == 0)
        {
          v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v148[2] + 1, 1, v148);
          *a6 = v148;
        }
        unint64_t v151 = v148[2];
        unint64_t v150 = v148[3];
        if (v151 >= v150 >> 1)
        {
          v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v150 > 1), v151 + 1, 1, v148);
          *a6 = v148;
        }
        v148[2] = v151 + 1;
        v148[v151 + 4] = v112;
        if (v110)
        {
          uint64_t v202 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v110, 0);
          uint64_t v152 = 0;
          uint64_t v131 = v202;
          do
          {
            long long v204 = 0u;
            long long v205 = 0u;
            long long v203 = 0u;
            RESkeletalPoseDefinitionAssetGetJointDefaultTransform();
            long long v153 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            unint64_t v157 = *(void *)(v202 + 16);
            unint64_t v156 = *(void *)(v202 + 24);
            if (v157 >= v156 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v156 > 1, v157 + 1, 1);
              long long v155 = 0u;
              long long v154 = 0u;
              long long v153 = 0u;
            }
            ++v152;
            *(void *)(v202 + 16) = v157 + 1;
            v158 = (_OWORD *)(v202 + 48 * v157);
            v158[2] = v153;
            v158[3] = v154;
            v158[4] = v155;
          }
          while (v110 != v152);
        }
        else
        {
          uint64_t v131 = MEMORY[0x263F8EE78];
        }
        goto LABEL_148;
      }
    }
    uint64_t v194 = v15;
    swift_bridgeObjectRetain();
    uint64_t v133 = v112 + 40;
    v132 = (void *)MEMORY[0x263F8EE78];
    do
    {
      v134 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      uint64_t v135 = strdup(v134);
      swift_release();
      swift_bridgeObjectRelease();
      if (v135)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v132[2] + 1, 1, v132);
        }
        unint64_t v137 = v132[2];
        unint64_t v136 = v132[3];
        if (v137 >= v136 >> 1) {
          v132 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v136 > 1), v137 + 1, 1, v132);
        }
        v132[2] = v137 + 1;
        v132[v137 + 4] = v135;
      }
      v133 += 16;
      --v118;
    }
    while (v118);
    swift_bridgeObjectRelease();
    uint64_t v15 = v194;
    goto LABEL_129;
  }
  if (a10 < 0)
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
  }
  if (a10)
  {
    uint64_t v17 = 0;
    while (1)
    {
      if (v17 == a10) {
        goto LABEL_182;
      }
      if (v17 != v16) {
        break;
      }
      *(void *)&long long v203 = v189;
      *((void *)&v203 + 1) = v16;
      LOBYTE(v204) = 1;
      *((void *)&v204 + 1) = v188;
      *(void *)&long long v205 = v187;
      *((void *)&v205 + 1) = v186;
      *(void *)&long long v206 = v200;
      int64_t v18 = SkeletalPose.jointNames.getter();
      long long v19 = *a13;
      swift_bridgeObjectRetain();
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      *a13 = v19;
      if ((v20 & 1) == 0)
      {
        long long v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        *a13 = v19;
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        long long v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v19);
        *a13 = v19;
      }
      v19[2] = v22 + 1;
      v19[v22 + 4] = v18;
      uint64_t v23 = *(void *)(v18 + 16);
      if (v23)
      {
        swift_bridgeObjectRetain();
        int64_t v24 = v18 + 40;
        uint64_t v25 = (void *)MEMORY[0x263F8EE78];
        do
        {
          uint64_t v26 = (const char *)(String.utf8CString.getter() + 32);
          swift_bridgeObjectRetain();
          uint64_t v27 = strdup(v26);
          swift_release();
          swift_bridgeObjectRelease();
          if (v27)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
            }
            unint64_t v29 = v25[2];
            unint64_t v28 = v25[3];
            if (v29 >= v28 >> 1) {
              uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v25);
            }
            v25[2] = v29 + 1;
            v25[v29 + 4] = v27;
          }
          v24 += 16;
          --v23;
        }
        while (v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v25 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v41 = v25[2];
      uint64_t v42 = *a11;
      char v43 = swift_isUniquelyReferenced_nonNull_native();
      *a11 = v42;
      if ((v43 & 1) == 0)
      {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42[2] + 1, 1, v42);
        *a11 = v42;
      }
      unint64_t v45 = v42[2];
      unint64_t v44 = v42[3];
      if (v45 >= v44 >> 1) {
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v42);
      }
      unsigned char v42[2] = v45 + 1;
      id v46 = &v42[3 * v45];
      v46[4] = v41;
      v46[5] = v25 + 4;
      v46[6] = 0;
      *a11 = v42;
      uint64_t v47 = *a12;
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      *a12 = v47;
      if ((v48 & 1) == 0)
      {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v47[2] + 1, 1, v47);
        *a12 = v47;
      }
      unint64_t v50 = v47[2];
      unint64_t v49 = v47[3];
      if (v50 >= v49 >> 1)
      {
        uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v49 > 1), v50 + 1, 1, v47);
        *a12 = v47;
      }
      v47[2] = v50 + 1;
      v47[v50 + 4] = v25;
      uint64_t v51 = *a13;
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      *a13 = v51;
      if ((v52 & 1) == 0)
      {
        uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        *a13 = v51;
      }
      unint64_t v54 = v51[2];
      unint64_t v53 = v51[3];
      if (v54 >= v53 >> 1)
      {
        uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v53 > 1), v54 + 1, 1, v51);
        *a13 = v51;
      }
      v51[2] = v54 + 1;
      v51[v54 + 4] = v18;
      uint64_t v55 = (float32x4_t *)swift_bridgeObjectRetain();
      uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_So13simd_float4x4as5NeverOTB504_s17d55Foundation22SkeletalPosesComponentV28updateInternalPoseF126Namesyys13OpaquePointerVFyAA0cH0VXEfU_So13simd_float4x4a0A3Kit9TransformVcfu0_33_468c2b3721e400eee04f35cd537c1492AmJTf3nnnpk_nTf1cn_n(v55);
      swift_bridgeObjectRelease();
      uint64_t v56 = *a14;
      char v57 = swift_isUniquelyReferenced_nonNull_native();
      *a14 = v56;
      if ((v57 & 1) == 0)
      {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
        *a14 = v56;
      }
      uint64_t v16 = v195;
      unint64_t v59 = v56[2];
      unint64_t v58 = v56[3];
      unint64_t v60 = v59 + 1;
      if (v59 >= v58 >> 1)
      {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v56);
        *a14 = v56;
      }
LABEL_5:
      ++v17;
      unsigned char v56[2] = v60;
      v56[v59 + 4] = v33;
      if (v17 == a10) {
        goto LABEL_157;
      }
    }
    ModelSpaceint64_t JointCount = RESkeletalPoseDefinitionAssetGetModelSpaceJointCount();
    if (ModelSpaceJointCount < 0) {
      goto LABEL_184;
    }
    int64_t v31 = ModelSpaceJointCount;
    uint64_t v193 = v15;
    if (ModelSpaceJointCount)
    {
      *(void *)&long long v203 = MEMORY[0x263F8EE78];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, ModelSpaceJointCount, 0);
      uint64_t v32 = 0;
      uint64_t v33 = v203;
      do
      {
        RESkeletalPoseDefinitionAssetGetModelSpaceJointName();
        uint64_t v34 = String.init(cString:)();
        uint64_t v36 = v35;
        *(void *)&long long v203 = v33;
        unint64_t v38 = *(void *)(v33 + 16);
        unint64_t v37 = *(void *)(v33 + 24);
        unint64_t v39 = v38 + 1;
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          uint64_t v33 = v203;
        }
        ++v32;
        *(void *)(v33 + 16) = v39;
        uint64_t v40 = v33 + 16 * v38;
        *(void *)(v40 + 32) = v34;
        *(void *)(v40 + 40) = v36;
      }
      while (v31 != v32);
    }
    else
    {
      uint64_t v61 = (void *)MEMORY[0x263F8EE78];
      unint64_t v39 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v33 = MEMORY[0x263F8EE78];
      if (!v39)
      {
LABEL_56:
        uint64_t v67 = v61[2];
        unint64_t v68 = *a11;
        char v69 = swift_isUniquelyReferenced_nonNull_native();
        *a11 = v68;
        if ((v69 & 1) == 0)
        {
          unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
          *a11 = v68;
        }
        unint64_t v71 = v68[2];
        unint64_t v70 = v68[3];
        if (v71 >= v70 >> 1) {
          unint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v68);
        }
        uint64_t v15 = v193;
        v68[2] = v71 + 1;
        uint64_t v72 = &v68[3 * v71];
        v72[4] = v67;
        v72[5] = v61 + 4;
        v72[6] = 0;
        *a11 = v68;
        BOOL v73 = *a12;
        char v74 = swift_isUniquelyReferenced_nonNull_native();
        *a12 = v73;
        if ((v74 & 1) == 0)
        {
          BOOL v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          *a12 = v73;
        }
        unint64_t v76 = v73[2];
        unint64_t v75 = v73[3];
        if (v76 >= v75 >> 1)
        {
          BOOL v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v75 > 1), v76 + 1, 1, v73);
          *a12 = v73;
        }
        v73[2] = v76 + 1;
        v73[v76 + 4] = v61;
        long long v77 = *a13;
        swift_bridgeObjectRetain();
        char v78 = swift_isUniquelyReferenced_nonNull_native();
        *a13 = v77;
        if ((v78 & 1) == 0)
        {
          long long v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77[2] + 1, 1, v77);
          *a13 = v77;
        }
        unint64_t v80 = v77[2];
        unint64_t v79 = v77[3];
        if (v80 >= v79 >> 1)
        {
          long long v77 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v79 > 1), v80 + 1, 1, v77);
          *a13 = v77;
        }
        v77[2] = v80 + 1;
        v77[v80 + 4] = v33;
        if (v31)
        {
          uint64_t v201 = MEMORY[0x263F8EE78];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31, 0);
          uint64_t v81 = 0;
          uint64_t v82 = v201;
          do
          {
            long long v205 = 0u;
            long long v206 = 0u;
            long long v203 = 0u;
            long long v204 = 0u;
            RESkeletalPoseDefinitionAssetGetModelSpaceJointDefaultTransform();
            long long v83 = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            unint64_t v88 = *(void *)(v201 + 16);
            unint64_t v87 = *(void *)(v201 + 24);
            if (v88 >= v87 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
              long long v86 = 0u;
              long long v85 = 0u;
              long long v84 = 0u;
              long long v83 = 0u;
            }
            ++v81;
            *(void *)(v201 + 16) = v88 + 1;
            uint64_t v89 = (_OWORD *)(v201 + (v88 << 6));
            v89[2] = v83;
            v89[3] = v84;
            v89[4] = v85;
            v89[5] = v86;
          }
          while (v31 != v81);
        }
        else
        {
          uint64_t v82 = MEMORY[0x263F8EE78];
        }
        uint64_t v90 = *a14;
        char v91 = swift_isUniquelyReferenced_nonNull_native();
        *a14 = v90;
        if ((v91 & 1) == 0)
        {
          uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
          *a14 = v90;
        }
        unint64_t v93 = v90[2];
        unint64_t v92 = v90[3];
        if (v93 >= v92 >> 1)
        {
          uint64_t v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v92 > 1), v93 + 1, 1, v90);
          *a14 = v90;
        }
        v90[2] = v93 + 1;
        v90[v93 + 4] = v82;
        uint64_t v56 = *a13;
        char v94 = swift_isUniquelyReferenced_nonNull_native();
        *a13 = v56;
        if ((v94 & 1) == 0)
        {
          uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56[2] + 1, 1, v56);
          *a13 = v56;
        }
        uint64_t v16 = v195;
        unint64_t v59 = v56[2];
        unint64_t v95 = v56[3];
        unint64_t v60 = v59 + 1;
        if (v59 >= v95 >> 1)
        {
          uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v95 > 1), v59 + 1, 1, v56);
          *a13 = v56;
        }
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v62 = v33 + 40;
    uint64_t v61 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v63 = (const char *)(String.utf8CString.getter() + 32);
      swift_bridgeObjectRetain();
      Swift::String v64 = strdup(v63);
      swift_release();
      swift_bridgeObjectRelease();
      if (v64)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        }
        unint64_t v66 = v61[2];
        unint64_t v65 = v61[3];
        if (v66 >= v65 >> 1) {
          uint64_t v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v65 > 1), v66 + 1, 1, v61);
        }
        v61[2] = v66 + 1;
        v61[v66 + 4] = v64;
      }
      v62 += 16;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
    goto LABEL_56;
  }
LABEL_157:
  uint64_t PoseMeshMapCount = RESkeletalPoseDefinitionAssetGetPoseMeshMapCountEx();
  if (PoseMeshMapCount < 0)
  {
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  if (PoseMeshMapCount)
  {
    uint64_t v172 = 0;
    v173 = (void *)MEMORY[0x263F8EE78];
    uint64_t v196 = PoseMeshMapCount;
    do
    {
      LOBYTE(v203) = 0;
      DWORD1(v205) = 0;
      long long v204 = 0uLL;
      *((void *)&v203 + 1) = 0;
      LOBYTE(v205) = 0;
      RESkeletalPoseDefinitionAssetGetPoseMeshMapEx();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v173[2] + 1, 1, v173);
      }
      unint64_t v175 = v173[2];
      unint64_t v174 = v173[3];
      if (v175 >= v174 >> 1) {
        v173 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v174 > 1), v175 + 1, 1, v173);
      }
      v173[2] = v175 + 1;
      v176 = &v173[5 * v175];
      *((unsigned char *)v176 + 32) = 0;
      ++v172;
      v176[5] = 0;
      *((_OWORD *)v176 + 3) = 0uLL;
      *((unsigned char *)v176 + 64) = 0;
      *((_DWORD *)v176 + 17) = 0;
    }
    while (v196 != v172);
  }
  uint64_t v177 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v177, (uint64_t)&v203);
  uint64_t v178 = *((void *)&v204 + 1);
  uint64_t v179 = v205;
  __swift_project_boxed_opaque_existential_1(&v203, *((uint64_t *)&v204 + 1));
  (*(void (**)(uint64_t, uint64_t))(v179 + 32))(v178, v179);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  RESkeletalPoseDefinitionAssetCreateAssetWithDefinitionsEx();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  RESkeletalPoseComponentSetSkeletalPoseDefinition();
  uint64_t result = RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  if (v199 < 0) {
    goto LABEL_187;
  }
  if (!v199)
  {
    v183 = a14;
    if ((a10 & 0x8000000000000000) == 0) {
      goto LABEL_172;
    }
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }
  uint64_t v181 = 0;
  unint64_t v182 = 0;
  v183 = a14;
  do
  {
    if (v182 >= *(void *)(*(void *)a7 + 16)) {
      goto LABEL_179;
    }
    RESkeletalPoseComponentSetJointTransforms();
    if (v182 >= *(void *)(*(void *)a8 + 16)) {
      goto LABEL_180;
    }
    String.utf8CString.getter();
    RESkeletalPoseComponentSetPoseName();
    uint64_t result = swift_release();
    v181 += 16;
    ++v182;
  }
  while (v199 != v182);
  if (a10 < 0) {
    goto LABEL_178;
  }
LABEL_172:
  if (a10)
  {
    unint64_t v184 = 0;
    while (v184 < (*v183)[2])
    {
      unint64_t v185 = v184 + 1;
      uint64_t result = RESkeletalPoseComponentSetModelSpaceJointTransforms();
      unint64_t v184 = v185;
      if (a10 == v185) {
        return result;
      }
    }
LABEL_181:
    __break(1u);
LABEL_182:
    __break(1u);
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
LABEL_185:
    __break(1u);
    goto LABEL_186;
  }
  return result;
}

uint64_t specialized static SkeletalPosesComponent.getCoreAsset(_:)()
{
  RESkeletalPoseComponentEnsureSkeletalPosesInitialized();
  uint64_t SkeletalPoseDefinition = RESkeletalPoseComponentGetSkeletalPoseDefinition();
  if (SkeletalPoseDefinition) {
    return SkeletalPoseDefinition;
  }
  uint64_t Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_8;
  }
  uint64_t result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    uint64_t v4 = specialized static Entity.entityInfoType(_:)();
    if (v4)
    {
      uint64_t v5 = (*(uint64_t (**)(void))(v4 + 232))();
      uint64_t v6 = *(void *)(v5 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v6, 0);
      *(void *)(v5 + 16) = Entity;
      MEMORY[0x22A68E750](Entity, v5);
      swift_release();
    }
    else
    {
      makeEntity(for:)(Entity);
    }
LABEL_8:
    uint64_t Component = REEntityGetComponent();
    if (Component)
    {
      v11[0] = Component;
      static ModelComponent.__fromCore(_:borrowStrongReference:)(v11, 0, &v12);
      if (*(void *)(v12 + 16))
      {
        type metadata accessor for __ServiceLocator();
        uint64_t v8 = static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v8, (uint64_t)&v12);
        swift_release();
        uint64_t v9 = v13;
        uint64_t v10 = v14;
        __swift_project_boxed_opaque_existential_1(&v12, v13);
        (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
        uint64_t AssetForMesh = RESkeletalPoseDefinitionAssetCreateAssetForMesh();
        RESkeletalPoseComponentSetSkeletalPoseDefinition();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        return AssetForMesh;
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SkeletalPosesComponent()
{
  return &type metadata for SkeletalPosesComponent;
}

uint64_t TimebaseService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TimebaseService()
{
  return self;
}

uint64_t Scene.performQuery(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = v2;
  return Scene.performQuery(_:rootEntity:)(v5, 0, a2);
}

uint64_t Scene.performQuery(_:rootEntity:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v43 = (uint64_t (*)(void *))*a1;
  uint64_t v5 = a1[6];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = MEMORY[0x263F8EE78];
  uint64_t v7 = (unint64_t *)(v6 + 16);
  uint64_t v42 = a3;
  if (!v5 || !*(void *)(v5 + 16))
  {
    AllEntitiesArray = (uint64_t *)RESceneGetAllEntitiesArray();
    if (a2)
    {
      uint64_t v11 = v43;
      if (!v9) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v11 = v43;
      if (!v9) {
        goto LABEL_48;
      }
    }
    uint64_t v12 = 8 * v9;
    while (1)
    {
      uint64_t v13 = *AllEntitiesArray;
      if (REEntityIsNonHiddenAndInHierarchy()) {
        break;
      }
LABEL_11:
      ++AllEntitiesArray;
      v12 -= 8;
      if (!v12) {
        goto LABEL_48;
      }
    }
    uint64_t v14 = MEMORY[0x263F8DD08];
    unint64_t v45 = (void *)MEMORY[0x263F8DD08];
    aBlock[0] = v13;
    outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v49);
    swift_dynamicCast();
    uint64_t v15 = v48;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      uint64_t v16 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      if (REEntityIsBeingDestroyed())
      {
        __break(1u);
        goto LABEL_52;
      }
      if (one-time initialization token for customComponentTypeObjectIdToHandles != -1) {
        swift_once();
      }
      swift_beginAccess();
      if (!*(void *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
            (v17 & 1) == 0))
      {
        swift_endAccess();
        uint64_t v18 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v49[0] = static SceneManager.customComponentTypeObjectIdToHandles;
        static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
        static SceneManager.customComponentTypeObjectIdToHandles = v49[0];
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      if (REEntityGetCustomComponent())
      {
        uint64_t Object = RECustomComponentGetObject();
        if (Object)
        {
          unint64_t v21 = *(unsigned __int8 **)Object;
          if (*(void *)(Object + 8) || !v21)
          {
            uint64_t result = swift_retain();
          }
          else
          {
            int v22 = *v21;
            uint64_t v23 = String.init(utf8String:)();
            if (v24) {
              Swift::Int v25 = v23;
            }
            else {
              Swift::Int v25 = 0;
            }
            if (v24) {
              unint64_t v26 = v24;
            }
            else {
              unint64_t v26 = 0xE000000000000000;
            }
            unint64_t v21 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v22 == 42, v25, v26);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            uint64_t result = swift_allocObject();
            *(void *)(result + 16) = v21;
          }
          if (!v21)
          {
            __break(1u);
            return result;
          }
          swift_retain();
          uint64_t v28 = String.init(utf8String:)();
          unint64_t v30 = v29;
          swift_release();
          uint64_t v31 = v30 ? v28 : 0;
          unint64_t v32 = v30 ? v30 : 0xE000000000000000;
          uint64_t v33 = (NSString *)MEMORY[0x22A688A50](v31, v32);
          swift_bridgeObjectRelease();
          Class v34 = NSClassFromString(v33);

          swift_release();
          uint64_t v11 = v43;
          if (v34)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            uint64_t v35 = swift_dynamicCastMetatype();
            if (v35)
            {
              uint64_t v36 = (*(uint64_t (**)(void))(v35 + 232))();
              uint64_t v37 = *(void *)(v36 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v37, 0);
              *(void *)(v36 + 16) = v15;
              MEMORY[0x22A68E750](v15, v36);
              swift_release();
LABEL_45:
              aBlock[0] = v36;
              swift_retain();
              swift_retain();
              swift_retain();
              char v38 = v11(aBlock);
              swift_release();
              swift_release();
              swift_release();
              if (v38)
              {
                uint64_t v39 = swift_retain();
                MEMORY[0x22A688E10](v39);
                if (*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              swift_release();
              goto LABEL_11;
            }
          }
        }
      }
      uint64_t v16 = makeEntity(for:)(v15);
    }
    uint64_t v36 = v16;
    goto LABEL_45;
  }
  id v46 = partial apply for closure #1 in Scene.performQuery(_:rootEntity:);
  uint64_t v47 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  unint64_t v45 = &block_descriptor_12;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain_n();
  swift_release();
  REQueryEvaluateEntityQueryWithRootEntity();
  _Block_release(v8);
  swift_release();
LABEL_48:
  swift_beginAccess();
  unint64_t v40 = *v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<[Entity]>);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v40;
  if (v40 >> 62)
  {
LABEL_52:
    swift_bridgeObjectRetain_n();
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
  }
  *(void *)uint64_t v42 = v14;
  *(void *)(v42 + 8) = v41;
  *(unsigned char *)(v42 + 16) = 0;
  return result;
}

uint64_t closure #1 in Scene.performQuery(_:rootEntity:)(uint64_t a1, uint64_t a2)
{
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    uint64_t result = REEntityIsBeingDestroyed();
    if (result)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = specialized static Entity.entityInfoType(_:)();
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(void))(v5 + 232))();
      uint64_t v7 = *(void *)(v6 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v7, 0);
      *(void *)(v6 + 16) = a1;
      MEMORY[0x22A68E750](a1, v6);
      swift_release();
    }
    else
    {
      makeEntity(for:)(a1);
    }
  }
  swift_beginAccess();
  uint64_t v8 = swift_retain();
  MEMORY[0x22A688E10](v8);
  if (*(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t Scene.performQuery<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)(v6 + 16) = static Array._allocateUninitialized(_:)();
  uint64_t v8 = type metadata accessor for Query();
  if (Query.internalQuery.getter(v8))
  {
    uint64_t v9 = (void *)swift_allocObject();
    _OWORD v9[2] = a1;
    v9[3] = a2;
    v9[4] = v6;
    aBlock[4] = partial apply for closure #1 in Scene.performQuery<A>(_:);
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
    void aBlock[3] = &block_descriptor_9;
    uint64_t v10 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    REQueryEvaluateEntityQuery();
    _Block_release(v10);
    swift_release();
  }
  swift_beginAccess();
  aBlock[6] = *(void *)(v6 + 16);
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v11 = AnySequence.init<A>(_:)();
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x22A688F10](v12, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  QueryResult.init(_:count:)(v11, v13, 0, a3);
  return swift_release();
}

uint64_t closure #1 in Scene.performQuery<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v25 - v17;
  uint64_t result = REIsEntityHidden();
  if ((result & 1) == 0)
  {
    v25[0] = v9;
    id v20 = (id)REEntityGetSwiftObject();
    v25[1] = a2;
    if (v20)
    {
      type metadata accessor for Entity();
      uint64_t v21 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v23 = specialized static Entity.entityInfoType(_:)();
      if (v23)
      {
        uint64_t v22 = (*(uint64_t (**)(void))(v23 + 232))();
        uint64_t v24 = *(void *)(v22 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v24, 0);
        *(void *)(v22 + 16) = a1;
        MEMORY[0x22A68E750](a1, v22);
        swift_release();
LABEL_8:
        v27[0] = v22;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(a4 + 24))(v27, a3, a4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, AssociatedTypeWitness) == 1)
        {
          swift_release();
          return (*(uint64_t (**)(char *, void))(v26 + 8))(v11, v25[0]);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v11, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, AssociatedTypeWitness);
          swift_beginAccess();
          type metadata accessor for Array();
          Array.append(_:)();
          swift_endAccess();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, AssociatedTypeWitness);
        }
      }
      uint64_t v21 = makeEntity(for:)(a1);
    }
    uint64_t v22 = v21;
    goto LABEL_8;
  }
  return result;
}

uint64_t Scene.performQuery<A>(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = type metadata accessor for QuerySelectors.ComponentQueryResult();
  long long v20 = a1[1];
  long long v21 = *a1;
  long long v19 = a1[2];
  *(void *)(v9 + 16) = static Array._allocateUninitialized(_:)();
  long long aBlock = v21;
  long long v24 = v20;
  long long v25 = v19;
  uint64_t v26 = v8;
  type metadata accessor for QuerySelectors.ComponentTypeSelector();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for Query();
  if (!Query.internalQuery.getter(v11)) {
    goto LABEL_5;
  }
  uint64_t v22 = a4;
  uint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  v12[3] = a3;
  v12[4] = v9;
  swift_retain();
  uint64_t v13 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
  type metadata accessor for SceneManager();
  swift_dynamicCast();
  if (SceneManager.componentTypeToComponentClass(_:)(a2, a3)
    || (static Component.registerComponent()(a2, a3),
        (uint64_t result = SceneManager.componentTypeToComponentClass(_:)(a2, a3)) != 0))
  {
    *(void *)&long long v25 = partial apply for closure #1 in Scene.performQuery<A>(_:);
    *((void *)&v25 + 1) = v12;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v24 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
    *((void *)&v24 + 1) = &block_descriptor_18_0;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    REQueryEvaluateComponentQuery();
    swift_release();
    swift_release();
    _Block_release(v15);
    a4 = v22;
LABEL_5:
    swift_beginAccess();
    type metadata accessor for Array();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v16 = AnySequence.init<A>(_:)();
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x22A688F10](v17, v10);
    swift_bridgeObjectRelease();
    QueryResult.init(_:count:)(v16, v18, 0, a4);
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in Scene.performQuery<A>(_:)(uint64_t a1)
{
  uint64_t result = REIsEntityHidden();
  if ((result & 1) == 0)
  {
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      uint64_t result = REEntityIsBeingDestroyed();
      if (result)
      {
        __break(1u);
        return result;
      }
      uint64_t v3 = specialized static Entity.entityInfoType(_:)();
      if (v3)
      {
        uint64_t v4 = (*(uint64_t (**)(void))(v3 + 232))();
        uint64_t v5 = *(void *)(v4 + 16);
        swift_retain();
        MEMORY[0x22A68E750](v5, 0);
        *(void *)(v4 + 16) = a1;
        MEMORY[0x22A68E750](a1, v4);
        swift_release();
      }
      else
      {
        makeEntity(for:)(a1);
      }
    }
    type metadata accessor for QuerySelectors.ComponentQueryResult();
    uint64_t v6 = swift_retain();
    QuerySelectors.ComponentQueryResult.__allocating_init(entity:)(v6);
    swift_beginAccess();
    type metadata accessor for Array();
    Array.append(_:)();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t sub_228005FB8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #1 in Scene.performQuery(_:rootEntity:)(uint64_t a1)
{
  return closure #1 in Scene.performQuery(_:rootEntity:)(a1, v1);
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in Scene.performQuery<A>(_:)(uint64_t a1)
{
  return closure #1 in Scene.performQuery<A>(_:)(a1, v1[4], v1[2], v1[3]);
}

{
  return closure #1 in Scene.performQuery<A>(_:)(a1);
}

uint64_t sub_22800601C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t key path setter for __RKEntityTriggerGroup.triggers : __RKEntityTriggerGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityTriggerGroup.triggers.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t __RKEntityTriggerGroup.__allocating_init(triggers:)(unint64_t a1)
{
  unint64_t v2 = swift_allocObject();
  unint64_t v3 = specialized __RKEntityTriggerGroup.init(triggers:)(a1, v2);
  swift_release();
  return v3;
}

unint64_t __RKEntityTriggerGroup.init(triggers:)(unint64_t a1)
{
  unint64_t v2 = specialized __RKEntityTriggerGroup.init(triggers:)(a1, v1);
  swift_release();
  return v2;
}

uint64_t __RKEntityTriggerGroup.matches(with:)(uint64_t a1)
{
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  swift_beginAccess();
  unint64_t v7 = *(void *)(v1 + 24);
  if (v7 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v18 = 91;
    unint64_t v19 = 0xE100000000000000;
    os_log_type_t v17 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v18);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_18;
  }
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0) {
    goto LABEL_23;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v10 = *(void *)(v7 + 32);
    swift_retain();
    while (1)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 184))(a1))
      {
LABEL_7:
        swift_bridgeObjectRelease();
        uint64_t v18 = 91;
        unint64_t v19 = 0xE100000000000000;
        os_log_type_t v11 = static os_log_type_t.info.getter();
        specialized InteractionsLogger.log(_:_:)(v11, &v18);
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      swift_release();
      if (v8 == 1) {
        goto LABEL_18;
      }
      uint64_t v12 = 5;
      while (1)
      {
        unint64_t v13 = v12 - 4;
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = MEMORY[0x22A689930](v12 - 4, v7);
          BOOL v15 = __OFADD__(v13, 1);
          uint64_t v16 = v12 - 3;
          if (v15) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
        if (v13 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        uint64_t v14 = *(void *)(v7 + 8 * v12);
        swift_retain();
        BOOL v15 = __OFADD__(v13, 1);
        uint64_t v16 = v12 - 3;
        if (v15)
        {
LABEL_19:
          __break(1u);
          goto LABEL_20;
        }
LABEL_16:
        if ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 184))(a1)) {
          goto LABEL_7;
        }
        swift_release();
        ++v12;
        if (v16 == v8) {
          goto LABEL_18;
        }
      }
      __break(1u);
LABEL_23:
      uint64_t v10 = MEMORY[0x22A689930](0, v7);
    }
  }
  __break(1u);
  return result;
}

unint64_t __RKEntityTriggerGroup.description.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + 24);
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 24);
  if (v2 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3 >= 1)
  {
    while (1)
    {
      v4._uint64_t countAndFlagsBits = 5966090;
      v4._object = (void *)0xE300000000000000;
      String.append(_:)(v4);
      uint64_t v5 = *v1;
      if ((*v1 & 0xC000000000000001) != 0) {
        break;
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v6 = *(void *)(v5 + 32);
        uint64_t v7 = swift_retain();
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v3 < 1) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v6 = MEMORY[0x22A689930](0, v5);
    uint64_t v7 = swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 192))(v7);
    uint64_t v10 = v9;
    swift_release();
    v11._uint64_t countAndFlagsBits = v8;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v3 - 1;
    if (v3 != 1)
    {
      uint64_t v16 = 0;
      do
      {
        v17._uint64_t countAndFlagsBits = 8236;
        v17._object = (void *)0xE200000000000000;
        String.append(_:)(v17);
        uint64_t v18 = *v1;
        if ((*v1 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v19 = MEMORY[0x22A689930](v16 + 1, v18);
          uint64_t v20 = swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)(v16 + 1) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_16;
          }
          uint64_t v19 = *(void *)(v18 + 8 * v16 + 40);
          uint64_t v20 = swift_retain();
        }
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 192))(v20);
        uint64_t v23 = v22;
        swift_release();
        v24._uint64_t countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        ++v16;
      }
      while (v12 != v16);
    }
    v13._uint64_t countAndFlagsBits = 93;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
  }
LABEL_8:
  v14._uint64_t countAndFlagsBits = 665949;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  return 0xD00000000000001ALL;
}

uint64_t __RKEntityTriggerGroup.copy(with:)@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v15 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v3 = v1[3];
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v9 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62)) {
      goto LABEL_14;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = (void *)MEMORY[0x22A689930](i, v3);
      }
      else
      {
        uint64_t v7 = *(void **)(v3 + 8 * i + 32);
        swift_retain();
      }
      objc_msgSend(v7, sel_copyWithZone_, 0);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for __RKEntityTrigger();
      if (swift_dynamicCast())
      {
        uint64_t v8 = swift_retain();
        MEMORY[0x22A688E10](v8);
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    unint64_t v9 = v15;
    if (!(v15 >> 62))
    {
LABEL_14:
      if (*(uint64_t *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
      {
LABEL_15:
        uint64_t v10 = type metadata accessor for __RKEntityTriggerGroup();
        unint64_t v11 = swift_allocObject();
        unint64_t v12 = specialized __RKEntityTriggerGroup.init(triggers:)(v9, v11);
        uint64_t result = swift_release();
        a1[3] = v10;
        *a1 = v12;
        return result;
      }
      goto LABEL_19;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13 >= 1) {
      goto LABEL_15;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    v14.receiver = v1;
    v14.super_class = (Class)type metadata accessor for __RKEntityTriggerGroup();
    objc_msgSendSuper2(&v14, sel_copyWithZone_, 0);
    _bridgeAnyObjectToAny(_:)();
    return swift_unknownObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityTriggerGroup.clone(matching:newEntity:)(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = MEMORY[0x263F8EE78];
  swift_beginAccess();
  unint64_t v5 = *(void *)(v2 + 24);
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    a2 = MEMORY[0x263F8EE78];
    if (!(MEMORY[0x263F8EE78] >> 62)) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_20;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (uint64_t i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = MEMORY[0x22A689930](i, v5);
    }
    else
    {
      uint64_t v8 = *(void *)(v5 + 8 * i + 32);
      swift_retain();
    }
    if ((*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v8 + 200))(a1, a2))
    {
      uint64_t v9 = swift_retain();
      MEMORY[0x22A688E10](v9);
      if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_release();
  }
  uint64_t result = swift_bridgeObjectRelease();
  a2 = v16;
  if (!(v16 >> 62))
  {
LABEL_14:
    uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11 == 1) {
      goto LABEL_15;
    }
LABEL_23:
    if (v11 < 2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    else
    {
      type metadata accessor for __RKEntityTriggerGroup();
      unint64_t v14 = swift_allocObject();
      unint64_t v15 = swift_bridgeObjectRetain();
      unint64_t v12 = specialized __RKEntityTriggerGroup.init(triggers:)(v15, v14);
      swift_bridgeObjectRelease();
      swift_release();
    }
    return v12;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v13 != 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
LABEL_15:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_28:
    unint64_t v12 = MEMORY[0x22A689930](0, a2);
    goto LABEL_18;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    unint64_t v12 = *(void *)(a2 + 32);
    swift_retain();
LABEL_18:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

void __RKEntityTriggerGroup.__allocating_init()()
{
}

void __RKEntityTriggerGroup.init()()
{
}

uint64_t __RKEntityTriggerGroup.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityTriggerGroup.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t specialized __RKEntityTriggerGroup.init(triggers:)(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = a1;
  *(void *)(a2 + 24) = a1;
  uint64_t v4 = (uint64_t *)(a2 + 24);
  if (a1 >> 62) {
    goto LABEL_84;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_85:
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  while (1)
  {
    if ((v3 & 0xC000000000000001) == 0)
    {
      unint64_t v34 = v2;
      char v10 = 0;
      unint64_t v2 = 0;
      unint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      do
      {
        if (v2 <= v11) {
          unint64_t v12 = v11;
        }
        else {
          unint64_t v12 = v2;
        }
        while (1)
        {
          if (v12 == v2) {
            goto LABEL_79;
          }
          unint64_t v13 = v2 + 1;
          type metadata accessor for __RKEntityTriggerGroup();
          if (swift_dynamicCastClass()) {
            break;
          }
          ++v2;
          if (v5 == v13)
          {
            swift_bridgeObjectRelease();
            unint64_t v2 = v34;
            if (v10) {
              goto LABEL_25;
            }
            goto LABEL_86;
          }
        }
        char v10 = 1;
      }
      while (v5 - 1 != v2++);
      swift_bridgeObjectRelease();
      unint64_t v2 = v34;
LABEL_25:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_22830EC60;
      *(void *)(v15 + 56) = MEMORY[0x263F8D310];
      *(void *)(v15 + 32) = 0xD000000000000042;
      *(void *)(v15 + 40) = 0x8000000228355590;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v16 = *v4;
      if ((unint64_t)*v4 >> 62) {
        goto LABEL_88;
      }
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v17)
      {
LABEL_34:
        swift_bridgeObjectRelease();
        if ((unint64_t)*v4 >> 62) {
          goto LABEL_98;
        }
        uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        while (1)
        {
LABEL_36:
          if ((unint64_t)*v4 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v19 >= v3)
            {
LABEL_38:
              specialized Array.replaceSubrange<A>(_:with:)(v3, v19);
              swift_endAccess();
              goto LABEL_86;
            }
          }
          else
          {
            uint64_t v19 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v19 >= v3) {
              goto LABEL_38;
            }
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_bridgeObjectRetain();
          uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
      }
LABEL_27:
      uint64_t v3 = 0;
      while (1)
      {
        if ((v16 & 0xC000000000000001) != 0) {
          MEMORY[0x22A689930](v3, v16);
        }
        else {
          swift_retain();
        }
        type metadata accessor for __RKEntityTriggerGroup();
        if (swift_dynamicCastClass()) {
          break;
        }
        swift_release();
        uint64_t v18 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_80;
        }
        ++v3;
        if (v18 == v17) {
          goto LABEL_34;
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v20 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
      }
      else if (!((unint64_t)*v4 >> 62))
      {
        if (v20 == *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_36;
        }
LABEL_42:
        uint64_t v21 = v3 + 5;
        while (1)
        {
          unint64_t v16 = v21 - 4;
          if ((*v4 & 0xC000000000000001) != 0)
          {
            MEMORY[0x22A689930](v21 - 4);
          }
          else
          {
            if ((v16 & 0x8000000000000000) != 0) {
              goto LABEL_81;
            }
            if (v16 >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_82;
            }
            swift_retain();
          }
          uint64_t v22 = swift_dynamicCastClass();
          swift_release();
          if (v22) {
            goto LABEL_68;
          }
          if (v16 != v3) {
            break;
          }
LABEL_67:
          if (__OFADD__(v3++, 1))
          {
            __break(1u);
LABEL_88:
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            if (!v17) {
              goto LABEL_34;
            }
            goto LABEL_27;
          }
LABEL_68:
          uint64_t v30 = v21 - 3;
          if (__OFADD__(v16, 1)) {
            goto LABEL_83;
          }
          if ((unint64_t)*v4 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v31 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v21;
          if (v30 == v31) {
            goto LABEL_36;
          }
        }
        uint64_t v23 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          uint64_t v24 = MEMORY[0x22A689930](v3, *v4);
          uint64_t v23 = *v4;
          if ((*v4 & 0xC000000000000001) == 0)
          {
LABEL_53:
            if ((v16 & 0x8000000000000000) != 0) {
              goto LABEL_94;
            }
            if (v16 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_95;
            }
            uint64_t v25 = *(void *)(v23 + 8 * v21);
            swift_retain();
            goto LABEL_56;
          }
        }
        else
        {
          if (v3 < 0) {
            goto LABEL_92;
          }
          if ((unint64_t)v3 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_93;
          }
          uint64_t v24 = *(void *)(v23 + 8 * v3 + 32);
          swift_retain();
          if ((v23 & 0xC000000000000001) == 0) {
            goto LABEL_53;
          }
        }
        uint64_t v25 = MEMORY[0x22A689930](v21 - 4, v23);
        uint64_t v23 = *v4;
LABEL_56:
        isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *uint64_t v4 = v23;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v23 < 0 || (v23 & 0x4000000000000000) != 0)
        {
          uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          *uint64_t v4 = v23;
        }
        *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v3 + 0x20) = v25;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v27 = *v4;
        int v28 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *uint64_t v4 = v27;
        if (!v28 || v27 < 0 || (v27 & 0x4000000000000000) != 0)
        {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew()(v27);
          *uint64_t v4 = v27;
        }
        if ((v16 & 0x8000000000000000) != 0) {
          goto LABEL_96;
        }
        if (v16 >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_97;
        }
        *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 8 * v21) = v24;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_67;
      }
      swift_bridgeObjectRetain();
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20 == v33) {
        goto LABEL_36;
      }
      goto LABEL_42;
    }
    char v6 = 0;
    uint64_t v7 = 0;
LABEL_5:
    MEMORY[0x22A689930](v7, v3);
    uint64_t v8 = v7 + 1;
    if (!__OFADD__(v7, 1)) {
      break;
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_85;
    }
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v9 = swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (v9)
  {
    char v6 = 1;
    if (v8 == v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    ++v7;
    goto LABEL_5;
  }
  ++v7;
  if (v8 != v5) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  if (v6) {
    goto LABEL_25;
  }
LABEL_86:
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  return v2;
}

uint64_t type metadata accessor for __RKEntityTriggerGroup()
{
  return self;
}

uint64_t sub_228007378@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for __RKEntityTriggerGroup(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityTriggerGroup);
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.triggers.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.__allocating_init(triggers:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t __RKEntitySwapEntityAction.__allocating_init(targetEntity:newEntity:buildOutAction:buildInAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *(void *)(v8 + 112) = a2;
  *(void *)(v8 + 120) = a3;
  *(void *)(v8 + 128) = a4;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySwapEntityAction.init(targetEntity:newEntity:buildOutAction:buildInAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = a3;
  *(void *)(v4 + 128) = a4;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntitySwapEntityAction.perform(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v23 = StaticString.description.getter();
  uint64_t v24 = v5;
  v6._uint64_t countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  uint64_t v8 = v23;
  uint64_t v7 = v24;
  uint64_t v9 = (void *)(v1 + 96);
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 104) == 1 && *v9 == 1 && (swift_beginAccess(), *(unsigned char *)(v2 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v2 + 96);
    char v11 = *(unsigned char *)(v2 + 104);
    *(void *)(v2 + 96) = 1;
    *(unsigned char *)(v2 + 104) = 1;
    uint64_t v23 = v10;
    LOBYTE(v24) = v11;
    __RKEntityAction.state.didset((uint64_t)&v23);
    uint64_t v12 = *(void *)(v2 + 120);
    unint64_t v13 = (void *)swift_allocObject();
    uint64_t v13[2] = v2;
    v13[3] = v4;
    v13[4] = v3;
    swift_beginAccess();
    uint64_t v14 = *(void *)(v12 + 72);
    *(void *)(v12 + 72) = partial apply for closure #1 in __RKEntitySwapEntityAction.perform(with:);
    *(void *)(v12 + 80) = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v14);
    uint64_t v23 = v4;
    uint64_t v24 = v3;
    __RKEntityHideAction.perform(with:)();
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = partial apply for closure #2 in __RKEntitySwapEntityAction.perform(with:);
    *(void *)(v2 + 40) = v15;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
    if (*(void *)(v2 + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v17 = CACurrentMediaTime();
    }
    *(double *)(v2 + 176) = v17 + *(float *)(v12 + 144) + *(float *)(*(void *)(v2 + 128) + 144);
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v21, (uint64_t)partial apply for closure #3 in __RKEntitySwapEntityAction.perform(with:), v19, &v23);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v23, v2 + 136);
    swift_endAccess();
    uint64_t v23 = v8;
    uint64_t v24 = v7;
    uint64_t v20 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v23);
    swift_bridgeObjectRelease();
    return 1;
  }
}

uint64_t sub_228007770()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in __RKEntitySwapEntityAction.perform(with:)()
{
  return __RKEntityShowAction.perform(with:)();
}

uint64_t closure #2 in __RKEntitySwapEntityAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result + 136;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1, (uint64_t)&v3);
    if (*((void *)&v4 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v3, (uint64_t)v2);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v3, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v5 = 0;
    long long v3 = 0u;
    long long v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v3, v1);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntitySwapEntityAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 24)) {
      REEngineGetCurrentTime();
    }
    else {
      double v2 = CACurrentMediaTime();
    }
    if (*(double *)(v1 + 176) <= v2)
    {
      swift_beginAccess();
      uint64_t v3 = *(void *)(v1 + 96);
      char v4 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 2;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t v5 = v3;
      char v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntitySwapEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[14];
  uint64_t v4 = v1[15];
  uint64_t v5 = v1[16];
  uint64_t v6 = type metadata accessor for __RKEntitySwapEntityAction();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(void *)(v7 + 112) = v3;
  *(void *)(v7 + 120) = v4;
  *(void *)(v7 + 128) = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_retain();
  uint64_t result = __RKEntityAction.init(targetEntity:)(v8);
  a1[3] = v6;
  *a1 = result;
  return result;
}

uint64_t __RKEntitySwapEntityAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = v1[2];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    uint64_t v10 = v1[14];
    uint64_t v11 = v1[15];
    uint64_t v12 = v1[16];
    type metadata accessor for __RKEntitySwapEntityAction();
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(void *)(v13 + 112) = v10;
    *(void *)(v13 + 120) = v11;
    *(void *)(v13 + 128) = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v14 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v14);
  }
  else
  {
    uint64_t v4 = v1[14];
    uint64_t v5 = v1[15];
    uint64_t v6 = v1[16];
    type metadata accessor for __RKEntitySwapEntityAction();
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_OWORD *)(v7 + 168) = 0u;
    *(void *)(v7 + 112) = v4;
    *(void *)(v7 + 120) = v5;
    *(void *)(v7 + 128) = v6;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v8 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v8);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v15;
    }
    else {
      return 0;
    }
  }
}

void __RKEntitySwapEntityAction.__allocating_init(targetEntity:)()
{
}

void __RKEntitySwapEntityAction.init(targetEntity:)()
{
}

uint64_t __RKEntitySwapEntityAction.__ivar_destroyer()
{
  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntitySwapEntityAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntitySwapEntityAction.__deallocating_deinit()
{
  __RKEntitySwapEntityAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_228007DD8()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t partial apply for closure #2 in __RKEntitySwapEntityAction.perform(with:)()
{
  return closure #2 in __RKEntitySwapEntityAction.perform(with:)();
}

uint64_t partial apply for closure #3 in __RKEntitySwapEntityAction.perform(with:)()
{
  return closure #3 in __RKEntitySwapEntityAction.perform(with:)();
}

uint64_t type metadata accessor for __RKEntitySwapEntityAction()
{
  return self;
}

uint64_t method lookup function for __RKEntitySwapEntityAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntitySwapEntityAction);
}

uint64_t dispatch thunk of __RKEntitySwapEntityAction.__allocating_init(targetEntity:newEntity:buildOutAction:buildInAction:)()
{
  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[5 * a1 + 4];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = v5[2];
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_28;
  }
  if (v17 < 0)
  {
LABEL_30:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v18 = (char *)(v14 + 40);
  uint64_t v19 = (char *)&v5[5 * a2 + 4];
  if ((char *)(v14 + 40) != v19 || v18 >= &v19[40 * v17]) {
    memmove(v18, v19, 40 * v17);
  }
  uint64_t v20 = v5[2];
  BOOL v16 = __OFADD__(v20, v9);
  uint64_t v21 = v20 + v9;
  if (v16)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v5[2] = v21;
LABEL_20:
  outlined init with copy of __REAssetService(a3, v14);

  return outlined destroy of CollectionOfOne<PhysicsJoint>(a3);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(void))type metadata accessor for __RKEntityAction);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(void))type metadata accessor for Entity);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v6 = a4;
    uint64_t v9 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    unint64_t v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v10;
    if (!__OFADD__(v12, v10)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v8 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v8 = *v4;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v8;
  uint64_t v28 = v9;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v12 = 1;
  }
  if (v8 >> 62) {
    goto LABEL_39;
  }
  uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x22A689940](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v8;
  uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v17 = (void *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (v10)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v19 = v26 - v5;
      if (!__OFSUB__(v26, v5))
      {
LABEL_21:
        if (v19 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v20 = (char *)(v17 + 1);
        uint64_t v21 = (char *)(v15 + 32 + 8 * v5);
        if (v17 + 1 != (void *)v21 || v20 >= &v21[8 * v19]) {
          memmove(v20, v21, 8 * v19);
        }
        if (!(v8 >> 62))
        {
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v23 = v22 + v10;
          if (!__OFADD__(v22, v10))
          {
LABEL_27:
            *(void *)(v15 + 16) = v23;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v23 = v27 + v10;
        if (!__OFADD__(v27, v10)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = v18 - v5;
      if (!__OFSUB__(v18, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *uint64_t v17 = v28;

  return specialized Array._endMutation()();
}

uint64_t Entity.availableAnimations.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v4 = MEMORY[0x22A692220](ServiceLocator);
  unint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  unint64_t v75 = MEMORY[0x263F8EE78];
  REAnimationLibraryComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_49;
  }
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset()) {
    goto LABEL_48;
  }
  if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset()) {
    goto LABEL_20;
  }
  uint64_t EntryCount = REAnimationLibraryDefinitionGetEntryCount();
  uint64_t v1 = EntryCount;
  if ((v5 & 0xC000000000000000) != 0) {
    goto LABEL_100;
  }
LABEL_6:
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(EntryCount, 0);
  specialized Array._endMutation()();
  if ((v1 & 0x8000000000000000) == 0)
  {
    if (v1)
    {
      for (uint64_t i = 0; i != v1; ++i)
      {
        Entryuint64_t Asset = REAnimationLibraryDefinitionGetEntryAsset();
        if (EntryAsset)
        {
          uint64_t v11 = EntryAsset;
          type metadata accessor for AnimationResource();
          uint64_t v12 = (void *)swift_allocObject();
          _OWORD v12[2] = v11;
          if (REAssetHandleAssetType() == 11) {
            REAnimationSceneAssetGetRootTimeline();
          }
          uint64_t Name = REAnimationAssetGetName();
          if (Name) {
            uint64_t Name = String.init(cString:)();
          }
          else {
            unint64_t v8 = 0xE000000000000000;
          }
          v12[3] = Name;
          v12[4] = v8;
          RERetain();
          uint64_t v9 = REAssetSetSwiftObject();
          MEMORY[0x22A688E10](v9);
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
    }
    RERelease();
    unint64_t v5 = v75;
LABEL_20:
    uint64_t v2 = v5 >> 62;
    if (v5 >> 62)
    {
LABEL_96:
      swift_bridgeObjectRetain();
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v62) {
        goto LABEL_48;
      }
    }
    else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_48;
    }
    if (REAnimationLibraryComponentCreateQueryAllTransformAnimations())
    {
      uint64_t TransformQueryResultCount = REAnimationLibraryComponentGetTransformQueryResultCount();
      uint64_t v1 = TransformQueryResultCount;
      if (v2) {
        goto LABEL_104;
      }
      uint64_t v15 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v16 = v15 + TransformQueryResultCount;
      if (__OFADD__(v15, v1)) {
        goto LABEL_106;
      }
LABEL_25:
      specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v16, 0);
      specialized Array._endMutation()();
      if (v1 < 0) {
        goto LABEL_107;
      }
      if (v1)
      {
        for (uint64_t j = 0; j != v1; ++j)
        {
          TransformQueryResultAnimationuint64_t Asset = REAnimationLibraryComponentGetTransformQueryResultAnimationAsset();
          ResultAnimationuint64_t Name = (void *)REAnimationLibraryComponentCopyTransformQueryResultAnimationName();
          uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v22 = v21;

          type metadata accessor for AnimationResource();
          uint64_t v23 = (void *)swift_allocObject();
          v23[2] = TransformQueryResultAnimationAsset;
          v23[3] = v20;
          v23[4] = v22;
          RERetain();
          uint64_t v24 = REAssetSetSwiftObject();
          MEMORY[0x22A688E10](v24);
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      RERelease();
    }
    if (!REAnimationLibraryComponentCreateQueryAllSkeletalAnimations()) {
      goto LABEL_48;
    }
    uint64_t SkeletalQueryResultCount = REAnimationLibraryComponentGetSkeletalQueryResultCount();
    uint64_t v2 = SkeletalQueryResultCount;
    if (!(v75 >> 62))
    {
      uint64_t v26 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = v26 + SkeletalQueryResultCount;
      if (__OFADD__(v26, v2)) {
        goto LABEL_110;
      }
      goto LABEL_35;
    }
    goto LABEL_108;
  }
  while (1)
  {
    __break(1u);
LABEL_104:
    swift_bridgeObjectRetain();
    uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v16 = v66 + v1;
    if (!__OFADD__(v66, v1)) {
      goto LABEL_25;
    }
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t result = v67 + v2;
    if (__OFADD__(v67, v2)) {
      break;
    }
LABEL_35:
    specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(result, 0);
    unint64_t v5 = (unint64_t)&v75;
    uint64_t result = specialized Array._endMutation()();
    if (v2 < 0) {
      goto LABEL_111;
    }
    if (!v2)
    {
LABEL_47:
      RERelease();
LABEL_48:
      unint64_t v5 = v75;
LABEL_49:
      if (!(v5 >> 62))
      {
        uint64_t v38 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_51;
      }
      goto LABEL_94;
    }
    uint64_t v28 = 0;
    uint64_t v68 = v2;
    while (v28 != v2)
    {
      uint64_t SkeletalQueryResultAnimationCount = REAnimationLibraryComponentGetSkeletalQueryResultAnimationCount();
      if (SkeletalQueryResultAnimationCount < 0) {
        goto LABEL_93;
      }
      uint64_t v30 = SkeletalQueryResultAnimationCount;
      if (SkeletalQueryResultAnimationCount)
      {
        uint64_t v31 = 0;
        do
        {
          SkeletalQueryResultAnimationClipuint64_t Asset = REAnimationLibraryComponentGetSkeletalQueryResultAnimationClipAsset();
          uint64_t v33 = (void *)REAnimationLibraryComponentCopySkeletalQueryResultAnimationName();
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v1 = v35;

          type metadata accessor for AnimationResource();
          uint64_t v36 = (void *)swift_allocObject();
          uint64_t v36[2] = SkeletalQueryResultAnimationClipAsset;
          v36[3] = v34;
          v36[4] = v1;
          RERetain();
          uint64_t v37 = REAssetSetSwiftObject();
          MEMORY[0x22A688E10](v37);
          if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          ++v31;
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          unint64_t v5 = (unint64_t)&v75;
          specialized Array._endMutation()();
        }
        while (v30 != v31);
      }
      ++v28;
      uint64_t v2 = v68;
      if (v28 == v68) {
        goto LABEL_47;
      }
    }
    while (1)
    {
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v38 < 0)
      {
        __break(1u);
        goto LABEL_96;
      }
LABEL_51:
      if (!v38) {
        break;
      }
      unint64_t v39 = 0;
      while (v38 != v39)
      {
        if ((v75 & 0xC000000000000001) != 0)
        {
          MEMORY[0x22A689930](v39);
        }
        else
        {
          if (v39 >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_91;
          }
          swift_retain();
        }
        AnimationResource.definition.getter(v72);
        swift_release();
        uint64_t v40 = v73;
        uint64_t v41 = v74;
        __swift_project_boxed_opaque_existential_1(v72, v73);
        uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v41);
        uint64_t v44 = v43;
        REAnimationLibraryComponentDefaultGlobalSceneName();
        if (v42 == String.init(cString:)() && v44 == v45)
        {
          swift_bridgeObjectRelease_n();
          outlined init with copy of __REAssetService((uint64_t)v72, (uint64_t)v69);
LABEL_75:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
LABEL_76:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
          return v75;
        }
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of __REAssetService((uint64_t)v72, (uint64_t)v69);
        if (v47) {
          goto LABEL_75;
        }
        uint64_t v48 = v70;
        uint64_t v2 = v71;
        __swift_project_boxed_opaque_existential_1(v69, v70);
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v48, v2);
        unint64_t v5 = (unint64_t)v50;
        REAnimationLibraryComponentDefaultLocalSubtreeSceneName();
        uint64_t v51 = String.init(cString:)();
        uint64_t v1 = (uint64_t)v52;
        if (v49 == v51 && (void *)v5 == v52)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_75;
        }
        char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
        if (v53) {
          goto LABEL_76;
        }
        ++v39;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        if (v38 == v39) {
          goto LABEL_68;
        }
      }
      __break(1u);
LABEL_91:
      __break(1u);
    }
LABEL_68:
    uint64_t DefaultAnimation = REAnimationLibraryComponentCreateDefaultAnimation();
    if (!DefaultAnimation) {
      return v75;
    }
    uint64_t v55 = DefaultAnimation;
    type metadata accessor for AnimationResource();
    uint64_t v56 = (void *)swift_allocObject();
    unsigned char v56[2] = v55;
    if (REAssetHandleAssetType() == 11) {
      REAnimationSceneAssetGetRootTimeline();
    }
    uint64_t v57 = REAnimationAssetGetName();
    if (v57) {
      uint64_t v57 = String.init(cString:)();
    }
    else {
      unint64_t v58 = 0xE000000000000000;
    }
    v56[3] = v57;
    v56[4] = v58;
    RERetain();
    REAssetSetSwiftObject();
    uint64_t v59 = v56[2];
    uint64_t result = REAssetHandleAssetType();
    if (result != 5)
    {
      if (result != 11) {
        goto LABEL_112;
      }
      uint64_t result = REAnimationSceneAssetGetRootTimeline();
      uint64_t v59 = result;
      if (!result) {
        goto LABEL_112;
      }
    }
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v59;
    if (REAssetHandleAssetType() == 11) {
      REAnimationSceneAssetGetRootTimeline();
    }
    uint64_t v60 = REAnimationAssetGetName();
    if (v60) {
      uint64_t v60 = String.init(cString:)();
    }
    else {
      unint64_t v61 = 0xE000000000000000;
    }
    *(void *)(v2 + 24) = v60;
    *(void *)(v2 + 32) = v61;
    RERetain();
    REAssetSetSwiftObject();
    if (!(v75 >> 62)
      || (swift_bridgeObjectRetain(),
          uint64_t v63 = _CocoaArrayWrapper.endIndex.getter(),
          swift_bridgeObjectRelease(),
          (v63 & 0x8000000000000000) == 0))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, v2, (void (*)(void))type metadata accessor for AnimationResource);
      swift_release();
      return v75;
    }
    __break(1u);
LABEL_100:
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
    BOOL v65 = __OFADD__(v64, v1);
    uint64_t EntryCount = v64 + v1;
    if (!v65) {
      goto LABEL_6;
    }
    __break(1u);
  }
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
  return result;
}

uint64_t specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(uint64_t a1, char a2)
{
  unint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  uint64_t v7 = 0;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = MEMORY[0x22A689940](v7, v9, a2 & 1, v5);
  *uint64_t v2 = result;
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for __RKEntityTrigger);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for AnimationResource);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for Entity);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (void (*)(void))type metadata accessor for __RKEntityAction);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (void *)&v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      uint64_t v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[8 * a1 + 32];
    uint64_t v15 = &v4[8 * a2 + 32];
    if (a1 != a2 || result >= &v15[8 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 8 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of CollectionOfOne<PhysicsJoint>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    unint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v3) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 - v9;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = MEMORY[0x22A689940](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *uint64_t v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v6(0);
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_21:
        if (v16 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v17 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v17 + 8 * v16) {
          memmove((void *)(v13 + 32 + 8 * v5), v17, 8 * v16);
        }
        if (!(v7 >> 62))
        {
          uint64_t v18 = *(void *)(v13 + 16);
          uint64_t v19 = v18 + v8;
          if (!__OFADD__(v18, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v19;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v19 = v23 + v8;
        if (!__OFADD__(v23, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v3;
      if (!__OFSUB__(v15, v3)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

void one-time initialization function for observers()
{
  static Entity.LoadStatistics.observers = MEMORY[0x263F8EE78];
}

uint64_t Entity.LoadStatistics.Observer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Entity.LoadStatistics.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_start;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for Entity.LoadStatistics()
{
  return type metadata accessor for Entity.LoadStatistics();
}

uint64_t type metadata accessor for Entity.LoadStatistics()
{
  uint64_t result = type metadata singleton initialization cache for Entity.LoadStatistics;
  if (!type metadata singleton initialization cache for Entity.LoadStatistics) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for Entity.LoadStatistics()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for Entity.LoadStatistics.Observer()
{
  return self;
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.Observer.Log()
{
  return &type metadata for Entity.LoadStatistics.Observer.Log;
}

uint64_t getEnumTagSinglePayload for Entity.LoadStatistics.AssetType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.LoadStatistics.AssetType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for Entity.LoadStatistics.AssetType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for Entity.LoadStatistics.AssetType(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.AssetType()
{
  return &type metadata for Entity.LoadStatistics.AssetType;
}

uint64_t one-time initialization function for entityLoadLog(uint64_t a1)
{
  return one-time initialization function for entityLoadLog(a1, static Entity.LoadStatistics.entityLoadLog);
}

uint64_t one-time initialization function for assetLoadLog(uint64_t a1)
{
  return one-time initialization function for entityLoadLog(a1, static Entity.LoadStatistics.assetLoadLog);
}

uint64_t one-time initialization function for entityLoadLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

Swift::Void __swiftcall Entity.LoadStatistics.log()()
{
  unint64_t v1 = v0;
  uint64_t v67 = *v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v8 = *(void *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type);
  uint64_t v9 = 0x6E776F6E6B6E55;
  int v10 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8);
  unint64_t v11 = 0xEB00000000656C69;
  if (v10 == 1) {
    uint64_t v9 = 0x467974696C616552;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v10 != 1) {
    unint64_t v11 = 0xE700000000000000;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8)) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type) & 1;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 4477781;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_type + 8)) {
    unint64_t v14 = v11;
  }
  else {
    unint64_t v14 = 0xE300000000000000;
  }
  char v15 = *((unsigned char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_async);
  unint64_t v68 = (unint64_t)v1;
  uint64_t v16 = (char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName;
  uint64_t v17 = *(void *)((char *)v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
  uint64_t v18 = *(void ***)((char *)v1
                  + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName
                  + 8);
  uint64_t v66 = v16;
  v76[35] = v7;
  v76[36] = v13;
  v76[37] = v14;
  v76[38] = v12;
  char v77 = v15;
  uint64_t v78 = v17;
  unint64_t v79 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22831E320;
  *(void *)(inited + 32) = 0x6E6F697461727564;
  *(void *)(inited + 40) = 0xE800000000000000;
  uint64_t v20 = MEMORY[0x263F8D538];
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 72) = v20;
  *(void *)(inited + 80) = 1701869940;
  uint64_t v21 = MEMORY[0x263F8D310];
  *(void *)(inited + 88) = 0xE400000000000000;
  *(void *)(inited + 96) = v13;
  *(void *)(inited + 104) = v14;
  *(void *)(inited + 120) = v21;
  *(void *)(inited + 128) = 0x6E6F6973726576;
  uint64_t v22 = MEMORY[0x263F8D6C8];
  *(void *)(inited + 136) = 0xE700000000000000;
  *(void *)(inited + 144) = v12;
  *(void *)(inited + 168) = v22;
  *(void *)(inited + 176) = 0x636E797361;
  *(void *)(inited + 184) = 0xE500000000000000;
  uint64_t v23 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = v15;
  *(void *)(inited + 216) = v23;
  strcpy((char *)(inited + 224), "functionName");
  *(void *)(inited + 264) = v21;
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(void *)(inited + 240) = v17;
  *(void *)(inited + 248) = v18;
  uint64_t v64 = v18;
  swift_bridgeObjectRetain_n();
  unint64_t v65 = v14;
  swift_bridgeObjectRetain();
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (one-time initialization token for observers != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v25 = static Entity.LoadStatistics.observers;
    uint64_t v26 = *(void *)(static Entity.LoadStatistics.observers + 16);
    if (v26)
    {
      uint64_t v27 = MEMORY[0x263F8EE78];
      uint64_t v70 = MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      unint64_t v28 = 0;
      uint64_t v29 = v25 + 32;
      do
      {
        if (v28 >= *(void *)(v25 + 16))
        {
          __break(1u);
          goto LABEL_53;
        }
        outlined init with copy of WeakRef<Entity.LoadStatistics.Observer>(v29, (uint64_t)v69);
        uint64_t Strong = swift_weakLoadStrong();
        swift_release();
        if (Strong)
        {
          outlined init with take of WeakRef<Entity.LoadStatistics.Observer>((uint64_t)v69, (uint64_t)v76);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
          }
          uint64_t v27 = v70;
          unint64_t v32 = *(void *)(v70 + 16);
          unint64_t v31 = *(void *)(v70 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            uint64_t v27 = v70;
          }
          *(void *)(v27 + 16) = v32 + 1;
          outlined init with take of WeakRef<Entity.LoadStatistics.Observer>((uint64_t)v76, v27 + 8 * v32 + 32);
        }
        else
        {
          outlined destroy of BodyTrackingComponent?((uint64_t)v69, &demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
        }
        ++v28;
        v29 += 8;
      }
      while (v26 != v28);
      swift_bridgeObjectRelease();
      static Entity.LoadStatistics.observers = v70;
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void *)(static Entity.LoadStatistics.observers + 16);
      if (v33)
      {
        uint64_t v34 = static Entity.LoadStatistics.observers + 32;
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v35 = swift_weakLoadStrong();
          if (v35)
          {
            uint64_t v36 = v35;
            uint64_t v37 = (void *)(v35 + 16);
            swift_beginAccess();
            uint64_t v38 = *(void **)(v36 + 16);
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v36 + 16) = v38;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
              *uint64_t v37 = v38;
            }
            unint64_t v41 = v38[2];
            unint64_t v40 = v38[3];
            if (v41 >= v40 >> 1)
            {
              uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
              *uint64_t v37 = v38;
            }
            v38[2] = v41 + 1;
            v38[v41 + 4] = v24;
            swift_endAccess();
            swift_release();
          }
          v34 += 8;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v42 = (void *)MEMORY[0x22A688A50](0xD000000000000026, 0x8000000228355790);
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v24;
    uint64_t v74 = partial apply for closure #4 in Entity.LoadStatistics.log();
    uint64_t v75 = v43;
    uint64_t v70 = MEMORY[0x263EF8330];
    uint64_t v71 = 1107296256;
    uint64_t v72 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    uint64_t v73 = &block_descriptor_13;
    uint64_t v44 = _Block_copy(&v70);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v44);

    if (one-time initialization token for entityLoadLog != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Entity.LoadStatistics.entityLoadLog);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v70 = v49;
      *(_DWORD *)uint64_t v48 = 136446210;
      uint64_t v50 = specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()();
      v69[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_227DD2000, v46, v47, "%{public}s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v49, -1, -1);
      MEMORY[0x22A696500](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    char v52 = (unint64_t *)(v68
                             + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_loadRequestStats);
    swift_beginAccess();
    unint64_t v68 = *v52;
    if (v68 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      if (!v53)
      {
LABEL_51:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      uint64_t v53 = *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v53) {
        goto LABEL_51;
      }
    }
    if (v53 < 1) {
      break;
    }
    uint64_t v54 = 0;
    uint64_t v64 = &v72;
    unint64_t v65 = v68 & 0xC000000000000001;
    uint64_t v63 = v53;
    while (1)
    {
      if (v65)
      {
        uint64_t v55 = MEMORY[0x22A689930](v54, v68);
        uint64_t v56 = v55;
      }
      else
      {
        uint64_t v56 = *(void *)(v68 + 8 * v54 + 32);
        uint64_t v55 = swift_retain();
      }
      uint64_t v57 = *((void *)v66 + 1);
      MEMORY[0x270FA5388](v55);
      *(&v63 - 4) = v58;
      *(&v63 - 3) = v57;
      *(&v63 - 2) = v67;
      unint64_t v24 = *(void *)(v56 + 16);
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = partial apply for closure #5 in Entity.LoadStatistics.log();
      *(void *)(v59 + 24) = &v63 - 6;
      uint64_t v60 = swift_allocObject();
      *(void *)(v60 + 16) = partial apply for closure #1 in __AssetLoadRequest.Statistics.forEach(_:);
      *(void *)(v60 + 24) = v59;
      uint64_t v74 = partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer) -> ();
      uint64_t v75 = v60;
      uint64_t v70 = MEMORY[0x263EF8330];
      uint64_t v71 = 1107296256;
      uint64_t v72 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
      uint64_t v73 = &block_descriptor_40;
      unint64_t v61 = _Block_copy(&v70);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      REAssetLoadRequestStatsForEachStat();
      _Block_release(v61);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        break;
      }
      if (v63 == ++v54) {
        goto LABEL_51;
      }
    }
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  __break(1u);
}

uint64_t outlined init with copy of WeakRef<Entity.LoadStatistics.Observer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WeakRef<Entity.LoadStatistics.Observer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Entity.LoadStatistics.Observer>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x270FA5388](v1 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  lazy protocol witness table accessor for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log()();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.init(data:encoding:)();
  if (v6)
  {
    uint64_t v7 = v5;
    outlined consume of Data._Representation(v2, v4);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  uint64_t v0 = type metadata accessor for String.Encoding();
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v1 = type metadata accessor for JSONEncoder.OutputFormatting();
  MEMORY[0x270FA5388](v1 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  lazy protocol witness table accessor for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.init(data:encoding:)();
  if (v6)
  {
    uint64_t v7 = v5;
    outlined consume of Data._Representation(v2, v4);
    swift_release();
    return v7;
  }
  else
  {
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

void specialized Dictionary.compactMapValues<A>(_:)(uint64_t a1)
{
  uint64_t v39 = MEMORY[0x263F8EE80];
  uint64_t v2 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  unint64_t v40 = v36;
  swift_bridgeObjectRetain();
  int64_t i = 0;
  int64_t v31 = v6;
  if (v5) {
    goto LABEL_8;
  }
LABEL_9:
  while (2)
  {
    int64_t v10 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v10 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v10);
        int64_t v12 = i + 1;
        if (v11) {
          goto LABEL_24;
        }
        int64_t v12 = i + 2;
        if (i + 2 >= v6) {
          goto LABEL_41;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11) {
          goto LABEL_24;
        }
        int64_t v12 = i + 3;
        if (i + 3 >= v6) {
          goto LABEL_41;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11) {
          goto LABEL_24;
        }
        int64_t v12 = i + 4;
        if (i + 4 >= v6) {
          goto LABEL_41;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
LABEL_24:
          unint64_t v5 = (v11 - 1) & v11;
          unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
          for (i = v12; ; unint64_t v9 = v8 | (i << 6))
          {
            unint64_t v14 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
            uint64_t v16 = *v14;
            uint64_t v15 = v14[1];
            outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v38);
            *(void *)&long long v37 = v16;
            *((void *)&v37 + 1) = v15;
            long long v35 = v37;
            v36[0] = v38[0];
            v36[1] = v38[1];
            outlined init with copy of Any((uint64_t)v40, (uint64_t)v32);
            type metadata accessor for NSObject();
            swift_bridgeObjectRetain();
            if ((swift_dynamicCast() & 1) == 0) {
              break;
            }
            uint64_t v17 = v33;
            if (!(void)v33) {
              goto LABEL_7;
            }
            long long v18 = v35;
            long long v33 = v35;
            outlined init with take of Any(v40, v34);
            uint64_t v19 = v39;
            unint64_t v20 = *(void *)(v39 + 16);
            if (*(void *)(v39 + 24) <= v20)
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20 + 1, 1);
              uint64_t v19 = v39;
            }
            Hasher.init(_seed:)();
            String.hash(into:)();
            Swift::Int v21 = Hasher._finalize()();
            uint64_t v22 = v19 + 64;
            uint64_t v23 = -1 << *(unsigned char *)(v19 + 32);
            unint64_t v24 = v21 & ~v23;
            unint64_t v25 = v24 >> 6;
            if (((-1 << v24) & ~*(void *)(v19 + 64 + 8 * (v24 >> 6))) != 0)
            {
              unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v19 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
            }
            else
            {
              char v27 = 0;
              unint64_t v28 = (unint64_t)(63 - v23) >> 6;
              do
              {
                if (++v25 == v28 && (v27 & 1) != 0)
                {
                  __break(1u);
                  goto LABEL_42;
                }
                BOOL v29 = v25 == v28;
                if (v25 == v28) {
                  unint64_t v25 = 0;
                }
                v27 |= v29;
                uint64_t v30 = *(void *)(v22 + 8 * v25);
              }
              while (v30 == -1);
              unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            }
            *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
            *(_OWORD *)(*(void *)(v19 + 48) + 16 * v26) = v18;
            *(void *)(*(void *)(v19 + 56) + 8 * v26) = v17;
            ++*(void *)(v19 + 16);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
            int64_t v6 = v31;
            if (!v5) {
              goto LABEL_9;
            }
LABEL_8:
            unint64_t v8 = __clz(__rbit64(v5));
            v5 &= v5 - 1;
          }
          *(void *)&long long v33 = 0;
LABEL_7:
          outlined destroy of BodyTrackingComponent?((uint64_t)&v35, &demangling cache variable for type metadata for (key: String, value: Any));

          if (!v5) {
            continue;
          }
          goto LABEL_8;
        }
        int64_t v13 = i + 5;
        if (i + 5 < v6)
        {
          unint64_t v11 = *(void *)(v2 + 8 * v13);
          if (v11)
          {
            int64_t v12 = i + 5;
            goto LABEL_24;
          }
          while (1)
          {
            int64_t v12 = v13 + 1;
            if (__OFADD__(v13, 1)) {
              goto LABEL_43;
            }
            if (v12 >= v6) {
              break;
            }
            unint64_t v11 = *(void *)(v2 + 8 * v12);
            ++v13;
            if (v11) {
              goto LABEL_24;
            }
          }
        }
      }
LABEL_41:
      outlined consume of [String : AnimationResource].Iterator._Variant();
      return;
    }
    break;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
}

uint64_t closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(), double a6)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_228324960;
  *(void *)(inited + 32) = 0x7079547465737361;
  *(void *)(inited + 40) = 0xE900000000000065;
  uint64_t v13 = MEMORY[0x263F8D310];
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  *(void *)(inited + 72) = v13;
  *(void *)(inited + 80) = 0x656D695464616F6CLL;
  *(void *)(inited + 88) = 0xE800000000000000;
  uint64_t v14 = MEMORY[0x263F8D538];
  *(double *)(inited + 96) = a6;
  *(void *)(inited + 120) = v14;
  strcpy((char *)(inited + 128), "functionName");
  *(unsigned char *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  *(void *)(inited + 144) = a4;
  *(void *)(inited + 152) = a5;
  *(void *)(inited + 168) = v13;
  *(void *)(inited + 176) = 0x657A6953656C6966;
  *(void *)(inited + 216) = MEMORY[0x263F8E970];
  *(void *)(inited + 184) = 0xE800000000000000;
  *(void *)(inited + 192) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  uint64_t v16 = (void *)MEMORY[0x22A688A50](0xD00000000000002FLL, 0x8000000228355810);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  uint64_t v42 = partial apply for closure #1 in closure #5 in Entity.LoadStatistics.log();
  uint64_t v43 = v17;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v39 = 1107296256;
  unint64_t v40 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  unint64_t v41 = &block_descriptor_46;
  long long v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v18);

  uint64_t aBlock = a1;
  uint64_t v39 = a2;
  unint64_t v40 = *(Class (**)(uint64_t))&a6;
  unint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a3;
  uint64_t v19 = one-time initialization token for assetLoadLog;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Entity.LoadStatistics.assetLoadLog);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::Int v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v37[0] = v24;
    *(_DWORD *)uint64_t v23 = 136446210;
    uint64_t v25 = specialized flatJSON #1 <A>(_:) in Entity.LoadStatistics.log()();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_227DD2000, v21, v22, "%{public}s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22A696500](v24, -1, -1);
    MEMORY[0x22A696500](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for observers != -1) {
    swift_once();
  }
  uint64_t v27 = *(void *)(static Entity.LoadStatistics.observers + 16);
  if (v27)
  {
    uint64_t v28 = static Entity.LoadStatistics.observers + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v30 = Strong;
        int64_t v31 = (void *)(Strong + 24);
        swift_beginAccess();
        unint64_t v32 = *(void **)(v30 + 24);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v30 + 24) = v32;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
          *int64_t v31 = v32;
        }
        unint64_t v35 = v32[2];
        unint64_t v34 = v32[3];
        if (v35 >= v34 >> 1)
        {
          unint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v32);
          *int64_t v31 = v32;
        }
        uint64_t v32[2] = v35 + 1;
        v32[v35 + 4] = v15;
        swift_endAccess();
        swift_release();
      }
      v28 += 8;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t encode(to:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t encode(to:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  int64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  uint64_t result = 0x6E6F697461727564;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1701869940;
      break;
    case 2:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 3:
      uint64_t result = 0x636E797361;
      break;
    case 4:
      uint64_t result = 0x6E6F6974636E7566;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodingKeys.init(stringValue:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EntityLoadLog #1 in Entity.LoadStatistics.log()(void *a1)
{
  return encode(to:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  uint64_t result = 0x7079547465737361;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656D695464616F6CLL;
      break;
    case 2:
      uint64_t result = 0x6E6F6974636E7566;
      break;
    case 3:
      uint64_t result = 0x657A6953656C6966;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized CodingKeys.init(stringValue:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(void *a1)
{
  return encode(to:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(a1);
}

uint64_t sub_22800B420()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

void partial apply for closure #4 in Entity.LoadStatistics.log()()
{
  specialized Dictionary.compactMapValues<A>(_:)(*(void *)(v0 + 16));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t partial apply for closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return closure #5 in Entity.LoadStatistics.log()(a1, a2, a3, *(void **)(v4 + 16), *(uint64_t (**)())(v4 + 24), a4);
}

uint64_t sub_22800B4AC()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(uint64_t a1)
{
  return closure #1 in __AssetLoadRequest.Statistics.forEach(_:)(a1, *(void (**)(uint64_t, uint64_t, uint64_t, double))(v1 + 16));
}

uint64_t sub_22800B4C4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t lazy protocol witness table accessor for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  unint64_t result = lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  unint64_t result = lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

uint64_t destroy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

void *assignWithTake for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  return &unk_26DC9C028;
}

uint64_t destroy for EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  return &unk_26DC9C0B0;
}

uint64_t type metadata accessor for WeakRef()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for Entity.LoadStatistics.USDLoader(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22800BAB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.LoadStatistics.USDLoader()
{
  return &type metadata for Entity.LoadStatistics.USDLoader;
}

unint64_t lazy protocol witness table accessor for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader;
  if (!lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.LoadStatistics.USDLoader and conformance Entity.LoadStatistics.USDLoader);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log() and conformance CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log());
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log();
  if (!lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log() and conformance CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log());
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22800BCB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodingKeys in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()()
{
  return &unk_26DC9C240;
}

unsigned char *storeEnumTagSinglePayload for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22800BDB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CodingKeys in EntityLoadLog #1 in Entity.LoadStatistics.log()()
{
  return &unk_26DC9C2D0;
}

uint64_t specialized CodingKeys.init(stringValue:) in EntityLoadLog #1 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636E797361 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t specialized CodingKeys.init(stringValue:) in AssetLoadLog #1 in closure #5 in Entity.LoadStatistics.log()(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7079547465737361 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D695464616F6CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657A6953656C6966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

void PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  if (one-time initialization token for linearSRGBWhite != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (a3) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = 0x6F6C6F4365736162;
  }
  if (a3) {
    int64_t v10 = a3;
  }
  else {
    int64_t v10 = (void *)0xED0000746E695472;
  }
  CGColorRef value = v8;
  v12._uint64_t countAndFlagsBits = v9;
  v12._object = v10;
  v13.CGColorRef value = Material.getColorParameter(key:)(v12).value;
  swift_bridgeObjectRelease();
  if (v13.value)
  {

    CGColorRef value = v13.value;
  }
  uint64_t v14 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  Material.getTextureParameter(key:)(0xD000000000000010, 0x8000000228352310, v14, (uint64_t)&v20);
  uint64_t v15 = v21;
  if (v21)
  {
    int v16 = v23;
    uint64_t v17 = v22;
    long long v18 = v20;
  }
  else
  {
    long long v18 = 0;
    uint64_t v17 = 0;
    int v16 = 0;
  }
  *(void *)a4 = value;
  *(void *)(a4 + 8) = v18;
  *(void *)(a4 + 16) = v15;
  *(void *)(a4 + 24) = v17;
  *(_DWORD *)(a4 + 32) = v16;
  uint64_t v19 = value;
  outlined copy of MaterialParameters.Texture?(v18, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  outlined consume of MaterialParameters.Texture?(v18, v15);
}

uint64_t static PhysicallyBasedMaterial.BaseColor.__tintKey.getter()
{
  return 0x6F6C6F4365736162;
}

uint64_t (*PhysicallyBasedMaterial.BaseColor.__tint.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.BaseColor.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.BaseColor.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.BaseColor.__defaultTexture.getter())(void *a1)
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return partial apply for closure #1 in static TextureResource.builtinTexture(named:);
}

uint64_t sub_22800C6C4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t static PhysicallyBasedMaterial.Metallic.__scaleKey.getter()
{
  return 0x63696C6C6174656DLL;
}

float PhysicallyBasedMaterial.Metallic.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Metallic.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Metallic.__textureKey.getter()
{
  return 0x4D65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Metallic.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Metallic.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static PhysicallyBasedMaterial.Roughness.__scaleKey.getter()
{
  return 0x73656E6867756F72;
}

float PhysicallyBasedMaterial.Roughness.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Roughness.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.Roughness.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.Roughness.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Roughness.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static PhysicallyBasedMaterial.EmissiveColor.__colorKey.getter()
{
  return 0x6576697373696D65;
}

uint64_t (*PhysicallyBasedMaterial.EmissiveColor.__color.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.EmissiveColor.__textureKey.getter()
{
  return 0x4565727574786574;
}

uint64_t (*PhysicallyBasedMaterial.EmissiveColor.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.EmissiveColor.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.black");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.EmissiveColor.textureSemantic.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void PhysicallyBasedMaterial.BaseColor.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    id v5 = v4;
    swift_retain();
    id v6 = (id)REMaterialCreateDefaultSamplerDescriptor();
    swift_release();

    int v7 = 84148994;
  }
  else
  {
    id v6 = 0;
    int v7 = 0;
  }
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v7;
}

void PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static PhysicallyBasedMaterial.Specular.__scaleKey.getter()
{
  return 0x72616C7563657073;
}

float PhysicallyBasedMaterial.Specular.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Specular.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Specular.__textureKey.getter()
{
  return 0x5365727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Specular.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Specular.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

id PhysicallyBasedMaterial.Blending.init(blending:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (!v4)
  {
    outlined consume of __EntityInfoComponent?(*a1, 0);
    outlined consume of __EntityInfoComponent?(v3, 0);
    id result = 0;
    int v7 = 0;
LABEL_6:
    uint64_t v5 = v3;
    goto LABEL_7;
  }
  if (v4 != 1)
  {
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v7 = 84148994;
    goto LABEL_6;
  }
  uint64_t v5 = 0;
  id result = 0;
  int v7 = 0;
LABEL_7:
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v7;
  return result;
}

id PhysicallyBasedMaterial.Opacity.init(_:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  if (v4)
  {
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v6 = 84148994;
  }
  else
  {
    id result = 0;
    int v6 = 0;
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t static PhysicallyBasedMaterial.Opacity.__scaleKey.getter()
{
  return 0x537974696361706FLL;
}

float PhysicallyBasedMaterial.Opacity.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Opacity.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PhysicallyBasedMaterial.Opacity.__textureKey.getter()
{
  return 0x4F65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Opacity.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Opacity.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

uint64_t static PhysicallyBasedMaterial.Clearcoat.__scaleKey.getter()
{
  return 0x616F637261656C63;
}

float PhysicallyBasedMaterial.Clearcoat.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.Clearcoat.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.Clearcoat.__textureKey.getter()
{
  return 0xD000000000000010;
}

uint64_t (*PhysicallyBasedMaterial.Clearcoat.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Clearcoat.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t static PhysicallyBasedMaterial.ClearcoatRoughness.__scaleKey.getter()
{
  return 0xD000000000000017;
}

float PhysicallyBasedMaterial.ClearcoatRoughness.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatRoughness.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.ClearcoatRoughness.__textureKey.getter()
{
  return 0xD000000000000019;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatRoughness.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.ClearcoatRoughness.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

id PhysicallyBasedMaterial.Metallic.init(_:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  if (v4)
  {
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v6 = 84148994;
  }
  else
  {
    id result = 0;
    int v6 = 0;
  }
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = v6;
  return result;
}

void PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t static PhysicallyBasedMaterial.Normal.__textureKey.getter()
{
  return 0x4E65727574786574;
}

uint64_t (*PhysicallyBasedMaterial.Normal.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.Normal.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0xD000000000000012;
  *(void *)(v0 + 24) = 0x8000000228352390;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

unint64_t static PhysicallyBasedMaterial.AmbientOcclusion.__textureKey.getter()
{
  return 0xD000000000000017;
}

uint64_t (*PhysicallyBasedMaterial.AmbientOcclusion.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AmbientOcclusion.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyLevel.__scaleKey.getter()
{
  return 0xD000000000000014;
}

float PhysicallyBasedMaterial.AnisotropyLevel.scale.getter()
{
  return *(float *)v0;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyLevel.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyLevel.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyLevel.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AnisotropyLevel.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

unint64_t static PhysicallyBasedMaterial.AnisotropyAngle.__scaleKey.getter()
{
  return 0xD000000000000014;
}

float PhysicallyBasedMaterial.AnisotropyAngle.scale.getter()
{
  return *(float *)v0;
}

void PhysicallyBasedMaterial.AnisotropyAngle.scale.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyAngle.scale.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.AnisotropyAngle.__textureKey.getter()
{
  return 0xD000000000000016;
}

uint64_t (*PhysicallyBasedMaterial.AnisotropyAngle.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.AnisotropyAngle.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.AnisotropyAngle.textureSemantic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

__n128 PhysicallyBasedMaterial.Metallic.init(scale:texture:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  unint64_t v3 = a1[1].n128_u64[0];
  unsigned __int32 v4 = a1[1].n128_u32[2];
  *(float *)a2 = a3;
  __n128 result = *a1;
  *(__n128 *)(a2 + 8) = *a1;
  *(void *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

void PhysicallyBasedMaterial.AnisotropyAngle.init(floatLiteral:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

void PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v12._uint64_t countAndFlagsBits = a2;
  v12._object = a3;
  Material.getFloatParameter(key:)(v13, v12);
  uint64_t v15 = v14;
  uint64_t v16 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  Material.getTextureParameter(key:)(a4, a5, v16, (uint64_t)&v22);
  uint64_t v17 = v23;
  if (v23)
  {
    int v18 = v25;
    uint64_t v19 = v24;
    uint64_t v20 = v22;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    int v18 = 0;
  }
  float v21 = *(float *)&v15;
  if ((v15 & 0x100000000) != 0) {
    float v21 = 1.0;
  }
  *(float *)a6 = v21;
  *(void *)(a6 + 8) = v20;
  *(void *)(a6 + 16) = v17;
  *(void *)(a6 + 24) = v19;
  *(_DWORD *)(a6 + 32) = v18;
  outlined copy of MaterialParameters.Texture?(v20, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  outlined consume of MaterialParameters.Texture?(v20, v17);
}

float protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance PhysicallyBasedMaterial.AnisotropyAngle@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result = *a1;
  *(float *)a2 = *a1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t static PhysicallyBasedMaterial.SheenColor.__tintKey.getter()
{
  return 0x6C6F436E65656873;
}

id PhysicallyBasedMaterial.SheenColor.__tint.getter()
{
  return *v0;
}

void PhysicallyBasedMaterial.SheenColor.__tint.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*PhysicallyBasedMaterial.SheenColor.__tint.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t static PhysicallyBasedMaterial.SheenColor.__textureKey.getter()
{
  return 0xD000000000000011;
}

void *PhysicallyBasedMaterial.BaseColor.texture.getter@<X0>(uint64_t a1@<X8>)
{
  BOOL v2 = *(void **)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  int v5 = *(_DWORD *)(v1 + 32);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = v5;
  return outlined copy of MaterialParameters.Texture?(v2, v3);
}

__n128 PhysicallyBasedMaterial.BaseColor.texture.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int32 v3 = a1[1].n128_u32[2];
  outlined consume of MaterialParameters.Texture?(*(void **)(v1 + 8), *(void *)(v1 + 16));
  __n128 result = v5;
  *(__n128 *)(v1 + 8) = v5;
  *(void *)(v1 + 24) = v2;
  *(_DWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.SheenColor.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*static PhysicallyBasedMaterial.SheenColor.__defaultTexture.getter())()
{
  uint64_t v0 = swift_allocObject();
  strcpy((char *)(v0 + 16), "fallback.white");
  *(unsigned char *)(v0 + 31) = -18;
  return closure #1 in static TextureResource.builtinTexture(named:)partial apply;
}

void static PhysicallyBasedMaterial.SheenColor.textureSemantic.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

__n128 PhysicallyBasedMaterial.BaseColor.init(tint:texture:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2[1].n128_u64[0];
  unsigned __int32 v4 = a2[1].n128_u32[2];
  *(void *)a3 = a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  *(void *)(a3 + 24) = v3;
  *(_DWORD *)(a3 + 32) = v4;
  return result;
}

void PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(void *a1@<X0>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  swift_bridgeObjectRelease();
  if (one-time initialization token for linearSRGBWhite != -1) {
    swift_once();
  }
  Swift::String v12 = (void *)static CGColorRef.linearSRGBWhite;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  CGColorRef v13 = v12;
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  v15.CGColorRef value = Material.getColorParameter(key:)(v14).value;
  if (v15.value)
  {
    CGColorRef value = v15.value;

    CGColorRef v13 = value;
  }
  uint64_t v17 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v17);
  Material.getTextureParameter(key:)(a4, a5, v17, (uint64_t)&v23);
  uint64_t v18 = v24;
  if (v24)
  {
    int v19 = v26;
    uint64_t v20 = v25;
    float v21 = v23;
  }
  else
  {
    float v21 = 0;
    uint64_t v20 = 0;
    int v19 = 0;
  }
  *(void *)a6 = v13;
  *(void *)(a6 + 8) = v21;
  *(void *)(a6 + 16) = v18;
  *(void *)(a6 + 24) = v20;
  *(_DWORD *)(a6 + 32) = v19;
  uint64_t v22 = v13;
  outlined copy of MaterialParameters.Texture?(v21, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  outlined consume of MaterialParameters.Texture?(v21, v18);
}

void PhysicallyBasedMaterial.Program.descriptor.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

void PhysicallyBasedMaterial.Program.Descriptor.blendMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *PhysicallyBasedMaterial.Program.Descriptor.blendMode.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.Program.Descriptor.blendMode.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicallyBasedMaterial.Program.Descriptor.init()(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static PhysicallyBasedMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 != 2) {
      return 0;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0) {
      return 0;
    }
  }
  return 1;
}

void PhysicallyBasedMaterial.Program.Descriptor.hash(into:)()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int PhysicallyBasedMaterial.Program.Descriptor.hashValue.getter()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicallyBasedMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 2)
  {
    if (v3 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  int v1 = *v0;
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(unsigned char *a1)
{
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  *(void *)(v4 + 80) = v3;
  *(unsigned char *)(v4 + 112) = *a1;
  return MEMORY[0x270FA2498](PhysicallyBasedMaterial.Program.init(descriptor:), 0, 0);
}

uint64_t PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)(unsigned char *a1)
{
  *(void *)(v2 + 80) = v1;
  *(unsigned char *)(v2 + 112) = *a1;
  return MEMORY[0x270FA2498](PhysicallyBasedMaterial.Program.init(descriptor:), 0, 0);
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 112);
  *(unsigned char *)(*(void *)(v0 + 80) + 16) = v1;
  if (one-time initialization token for shaderCacheRegistry != -1) {
    swift_once();
  }
  int v2 = *(unsigned __int8 *)(v0 + 112);
  swift_retain();
  uint64_t v3 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v3, v0 + 16);
  *(void *)(v0 + 88) = specialized AssetServiceScopedRegistry.instance(for:)((void *)(v0 + 16));
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v6 = (uint64_t (*)(__int16, uint64_t, int))((char *)&async function pointer to specialized ShaderCache.getResource(_:)
                                                     + async function pointer to specialized ShaderCache.getResource(_:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  *uint64_t v4 = v0;
  v4[1] = PhysicallyBasedMaterial.Program.init(descriptor:);
  return v6(v1 != 2, 0, (v2 << 8) | 0x20001u);
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 80) + 24) = *(void *)(v0 + 104);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 80));
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t PhysicallyBasedMaterial.Program.init(descriptor:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    swift_release();
    uint64_t v5 = PhysicallyBasedMaterial.Program.init(descriptor:);
  }
  else
  {
    swift_release();
    *(void *)(v4 + 104) = a1;
    uint64_t v5 = PhysicallyBasedMaterial.Program.init(descriptor:);
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t static PhysicallyBasedMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 2)
  {
    if (v3 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

void PhysicallyBasedMaterial.Program.hash(into:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

uint64_t PhysicallyBasedMaterial.Program.deinit()
{
  swift_release();
  return v0;
}

uint64_t PhysicallyBasedMaterial.Program.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

Swift::Int PhysicallyBasedMaterial.Program.hashValue.getter()
{
  Hasher.init(_seed:)();
  int v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicallyBasedMaterial.Program(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(*(void *)a1 + 16);
  int v3 = *(unsigned __int8 *)(*(void *)a2 + 16);
  if (v2 == 2)
  {
    if (v3 == 2) {
      return 1;
    }
  }
  else
  {
    int v5 = (v3 ^ v2) & 1;
    if (v3 != 2 && v5 == 0) {
      return 1;
    }
  }
  return 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PhysicallyBasedMaterial.Program()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  int v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = v2 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PhysicallyBasedMaterial.Program()
{
  int v1 = *(unsigned __int8 *)(*(void *)v0 + 16);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v2 = v1 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PhysicallyBasedMaterial.Program()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  int v2 = *(unsigned __int8 *)(v1 + 16);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt v3 = v2 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

unint64_t static PhysicallyBasedMaterial.ClearcoatNormal.__textureKey.getter()
{
  return 0xD000000000000016;
}

void *PhysicallyBasedMaterial.Normal.texture.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(void **)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(_DWORD *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = v5;
  return outlined copy of MaterialParameters.Texture?(v2, v3);
}

__n128 PhysicallyBasedMaterial.Normal.texture.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int32 v3 = a1[1].n128_u32[2];
  outlined consume of MaterialParameters.Texture?(*(void **)v1, *(void *)(v1 + 8));
  __n128 result = v5;
  *(__n128 *)uint64_t v1 = v5;
  *(void *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*PhysicallyBasedMaterial.ClearcoatNormal.texture.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void static PhysicallyBasedMaterial.ClearcoatNormal.textureSemantic.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

__n128 PhysicallyBasedMaterial.Normal.init(texture:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int32 v3 = a1[1].n128_u32[2];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v2;
  a2[1].n128_u32[2] = v3;
  return result;
}

id PhysicallyBasedMaterial.Normal.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    id result = (id)REMaterialCreateDefaultSamplerDescriptor();
    int v5 = 84148994;
  }
  else
  {
    id result = 0;
    int v5 = 0;
  }
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(__int16 a1, uint64_t a2, int a3)
{
  *(_DWORD *)(v4 + 64) = a3;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v3;
  *(_WORD *)(v4 + 68) = a1;
  return MEMORY[0x270FA2498](specialized ShaderCache.getResource(_:), 0, 0);
}

uint64_t specialized ShaderCache.getResource(_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 56);
  unint64_t v2 = (os_unfair_lock_s *)(*(void *)(v1 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (*(void *)(v3 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_WORD *)(v0 + 68), *(void *)(v0 + 40), *(_DWORD *)(v0 + 64) & 0xFFFF01), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v6)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v7(v6);
  }
  else
  {
    int v9 = *(_DWORD *)(v0 + 64);
    CGColorRef v13 = (uint64_t (*)(__int16, uint64_t, int))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                                        + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
    int64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v10;
    *int64_t v10 = v0;
    v10[1] = specialized ShaderCache.getResource(_:);
    uint64_t v11 = *(void *)(v0 + 40);
    __int16 v12 = *(_WORD *)(v0 + 68);
    return v13(v12, v11, v9 & 0xFFFF01);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  void *v9;
  int v10;
  uint64_t (*v11)(int);
  uint64_t v12;

  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 56);
  unint64_t v2 = (os_unfair_lock_s *)(*(void *)(v1 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (*(void *)(v3 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v0 + 56)), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
    swift_retain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  os_unfair_lock_unlock(v2);
  swift_release();
  if (v6)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v7(v6);
  }
  else
  {
    uint64_t v11 = (uint64_t (*)(int))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                      + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
    int v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v9;
    *int v9 = v0;
    v9[1] = specialized ShaderCache.getResource(_:);
    int64_t v10 = *(_DWORD *)(v0 + 56);
    return v11(v10);
  }
}

uint64_t specialized ShaderCache.getResource(_:)(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  char v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  char v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  long long v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t result;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;
  char v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  void *v72;
  _OWORD v73[7];
  void *v74;
  uint64_t v75;

  uint64_t v3 = v2;
  char v5 = *(_OWORD *)(a1 + 80);
  char v69 = *(_OWORD *)(a1 + 64);
  uint64_t v70 = v5;
  uint64_t v71 = *(_OWORD *)(a1 + 96);
  uint64_t v72 = *(void **)(a1 + 112);
  uint64_t v6 = *(_OWORD *)(a1 + 16);
  unint64_t v65 = *(_OWORD *)a1;
  uint64_t v66 = v6;
  uint64_t v7 = *(_OWORD *)(a1 + 48);
  uint64_t v67 = *(_OWORD *)(a1 + 32);
  unint64_t v68 = v7;
  swift_retain();
  uint64_t v8 = specialized SharedCacheStorage.getResource(forKey:)(a1);
  swift_release();
  if (v8) {
    return v8;
  }
  int v9 = CustomMaterial.CustomShaderParameters.materialPath.getter();
  uint64_t v11 = v10;
  __int16 v12 = CustomMaterial.CustomShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v1 + 16, (uint64_t)&v54);
  CGColorRef v13 = v56;
  uint64_t v14 = v57;
  __swift_project_boxed_opaque_existential_1(&v54, v56);
  CGColorRef_optional v15 = __REAssetService.asset(_:)(v9, v11, v13, v14);
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    uint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
    swift_bridgeObjectRetain();
    int v19 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v64 = 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v48 = BYTE2(v66);
    uint64_t v49 = BYTE1(v66);
    uint64_t v20 = (unsigned __int16)v65;
    float v21 = *((void *)&v67 + 1);
    unint64_t v51 = v12;
    char v52 = v3;
    uint64_t v75 = v15;
    uint64_t v53 = v17;
    if (*((void *)&v67 + 1))
    {
      id v46 = (unsigned __int16)v65;
      uint64_t v22 = v67;
      uint64_t v23 = v68;
      uint64_t v24 = (void *)v69;
      uint64_t v44 = *((void *)&v66 + 1);
      outlined copy of __MaterialResource.CoreMaterialFunction?(*((uint64_t *)&v66 + 1), v67, *((uint64_t *)&v67 + 1), v68, *((uint64_t *)&v68 + 1), (void *)v69);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v42 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      int v26 = v16[2];
      uint64_t v25 = v16[3];
      if (v26 >= v25 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v16);
      }
      v16[2] = v26 + 1;
      uint64_t v27 = &v16[6 * v26];
      *((unsigned char *)v27 + 32) = v44;
      v27[5] = v22;
      v27[6] = v21;
      *(_OWORD *)(v27 + 7) = v23;
      v27[9] = v42;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v44, v22, v21, v23, *((uint64_t *)&v23 + 1), v24);
      __int16 v12 = v51;
      uint64_t v3 = v52;
      CGColorRef_optional v15 = v75;
      uint64_t v17 = v53;
      uint64_t v20 = v46;
    }
    LODWORD(v28) = (v20 >> 10) & 1;
    os_log_type_t v47 = (v20 >> 11) & 1;
    BOOL v29 = *((void *)&v70 + 1);
    if (*((void *)&v70 + 1))
    {
      uint64_t v45 = (v20 >> 10) & 1;
      uint64_t v28 = v70;
      uint64_t v30 = v71;
      int64_t v31 = v72;
      uint64_t v43 = *((void *)&v69 + 1);
      outlined copy of __MaterialResource.CoreMaterialFunction?(*((uint64_t *)&v69 + 1), v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1), v72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v41 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      long long v33 = v16[2];
      unint64_t v32 = v16[3];
      if (v33 >= v32 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v16);
      }
      v16[2] = v33 + 1;
      unint64_t v34 = &v16[6 * v33];
      *((unsigned char *)v34 + 32) = v43;
      v34[5] = v28;
      v34[6] = v29;
      *(_OWORD *)(v34 + 7) = v30;
      v34[9] = v41;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v43, v28, v29, v30, *((uint64_t *)&v30 + 1), v31);
      __int16 v12 = v51;
      uint64_t v3 = v52;
      CGColorRef_optional v15 = v75;
      uint64_t v17 = v53;
      LOBYTE(v28) = v45;
    }
    unint64_t v35 = type metadata accessor for __MaterialResource();
    *(void *)&uint64_t v54 = v15;
    *((void *)&v54 + 1) = v12;
    uint64_t v55 = 0;
    LOBYTE(v56) = v64;
    BYTE1(v56) = v28;
    BYTE2(v56) = v47;
    BYTE3(v56) = v48;
    BYTE4(v56) = v49;
    uint64_t v57 = v17;
    uint64_t v58 = v18;
    uint64_t v8 = v19;
    uint64_t v59 = v19;
    uint64_t v60 = v16;
    uint64_t v50 = v35;
    static __MaterialResource.createMaterial(_:)(&v54, v61);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = v62;
      long long v37 = v63;
      __swift_project_boxed_opaque_existential_1(v61, v62);
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_22830EC60;
      *(void *)(inited + 32) = v38;
      *(void *)(inited + 56) = v50;
      *(void *)(inited + 64) = &protocol witness table for __MaterialResource;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      v73[4] = v69;
      v73[5] = v70;
      v73[6] = v71;
      uint64_t v74 = v72;
      v73[0] = v65;
      v73[1] = v66;
      v73[2] = v67;
      v73[3] = v68;
      swift_retain();
      uint64_t v8 = specialized SharedCacheStorage.addResource(value:forKey:)(v38, v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    swift_release();
    return v8;
  }
  __break(1u);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
  id result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t specialized ShaderCache.getResource(_:)(int a1)
{
  *(void *)(v2 + 40) = v1;
  *(_DWORD *)(v2 + 56) = a1;
  return MEMORY[0x270FA2498](specialized ShaderCache.getResource(_:), 0, 0);
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program.Descriptor and conformance PhysicallyBasedMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program;
  if (!lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program)
  {
    type metadata accessor for PhysicallyBasedMaterial.Program();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicallyBasedMaterial.Program and conformance PhysicallyBasedMaterial.Program);
  }
  return result;
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.Program()
{
  return self;
}

uint64_t outlined destroy of MaterialParameters.Texture(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.BaseColor()
{
  return &type metadata for PhysicallyBasedMaterial.BaseColor;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Metallic()
{
  return &type metadata for PhysicallyBasedMaterial.Metallic;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Roughness()
{
  return &type metadata for PhysicallyBasedMaterial.Roughness;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return &type metadata for PhysicallyBasedMaterial.EmissiveColor;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Specular()
{
  return &type metadata for PhysicallyBasedMaterial.Specular;
}

void destroy for PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  int v3 = -1;
  if (v2 < 0xFFFFFFFF) {
    int v3 = v2;
  }
  if (v3 - 1 < 0 && v2)
  {
    id v4 = *(id *)(a1 + 8);
    swift_release();
  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if ((int)v4 - 1 < 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (v3)
    {
      uint64_t v6 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v3;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      id v7 = v6;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Blending(uint64_t a1, long long *a2)
{
  uint64_t v4 = (long long *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  LODWORD(v6) = -1;
  if (v5 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  else {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  int v8 = v7 - 1;
  int v9 = (long long *)((char *)a2 + 8);
  if (*((void *)a2 + 2) < 0xFFFFFFFFuLL) {
    uint64_t v6 = *((void *)a2 + 2);
  }
  int v10 = v6 - 1;
  if ((v8 & 0x80000000) == 0)
  {
    if (v10 < 0)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if (*((void *)a2 + 2))
      {
LABEL_9:
        uint64_t v11 = (void *)*((void *)a2 + 1);
        *(void *)(a1 + 8) = v11;
        *(void *)(a1 + 16) = *((void *)a2 + 2);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        id v12 = v11;
        swift_retain();
        return a1;
      }
LABEL_19:
      long long v20 = *v9;
      *(_OWORD *)(a1 + 20) = *(long long *)((char *)a2 + 20);
      *uint64_t v4 = v20;
      return a1;
    }
LABEL_13:
    long long v13 = *a2;
    long long v14 = a2[1];
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
    return a1;
  }
  if ((v10 & 0x80000000) == 0)
  {
    if (v5)
    {

      swift_release();
    }
    goto LABEL_13;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v16 = *((void *)a2 + 2);
  if (!v5)
  {
    if (v16) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
  if (v16)
  {
    uint64_t v17 = *(void **)(a1 + 8);
    uint64_t v18 = (void *)*((void *)a2 + 1);
    *(void *)(a1 + 8) = v18;
    id v19 = v18;

    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_retain();
    swift_release();
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 34);
    *(unsigned char *)(a1 + 35) = *((unsigned char *)a2 + 35);
  }
  else
  {
    outlined destroy of MaterialParameters.Texture(a1 + 8);
    long long v21 = *(long long *)((char *)v9 + 12);
    *uint64_t v4 = *v9;
    *(long long *)((char *)v4 + 12) = v21;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Blending(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  LODWORD(v5) = -1;
  if (v4 < 0xFFFFFFFF) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if ((int)v5 - 1 < 0)
  {
    int v8 = (_OWORD *)(a1 + 8);
    unint64_t v9 = *(void *)(a2 + 16);
    LODWORD(v10) = -1;
    if (v9 < 0xFFFFFFFF) {
      uint64_t v10 = *(void *)(a2 + 16);
    }
    if ((int)v10 - 1 < 0)
    {
      id v12 = (_OWORD *)(a2 + 8);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      if (v4)
      {
        if (v9)
        {
          long long v13 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = *(void *)(a2 + 8);

          *(void *)(a1 + 16) = v9;
          swift_release();
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          goto LABEL_5;
        }
        outlined destroy of MaterialParameters.Texture(a1 + 8);
      }
      *int v8 = *v12;
      *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
      return a1;
    }
    if (v4)
    {
      uint64_t v11 = *(void **)v8;
      swift_release();
    }
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
LABEL_5:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Blending(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Blending(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_DWORD *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for PhysicallyBasedMaterial.Blending(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t destructiveInjectEnumTag for PhysicallyBasedMaterial.Blending(uint64_t result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(void *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Blending()
{
  return &type metadata for PhysicallyBasedMaterial.Blending;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Opacity()
{
  return &type metadata for PhysicallyBasedMaterial.Opacity;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Clearcoat()
{
  return &type metadata for PhysicallyBasedMaterial.Clearcoat;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.ClearcoatRoughness()
{
  return &type metadata for PhysicallyBasedMaterial.ClearcoatRoughness;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Normal()
{
  return &type metadata for PhysicallyBasedMaterial.Normal;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AmbientOcclusion()
{
  return &type metadata for PhysicallyBasedMaterial.AmbientOcclusion;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AnisotropyLevel()
{
  return &type metadata for PhysicallyBasedMaterial.AnisotropyLevel;
}

void destroy for PhysicallyBasedMaterial.Metallic(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    id v1 = *(id *)(a1 + 8);
    swift_release();
  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3)
  {
    int v4 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    id v5 = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = (_OWORD *)(a1 + 8);
  id v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 8);
      int v8 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v8;
      id v9 = v8;

      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
      *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
      *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture(a1 + 8);
      long long v12 = *(_OWORD *)((char *)v5 + 12);
      *int v4 = *v5;
      *(_OWORD *)((char *)v4 + 12) = v12;
    }
  }
  else if (v6)
  {
    uint64_t v10 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    id v11 = v10;
    swift_retain();
  }
  else
  {
    long long v13 = *v5;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *int v4 = v13;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Metallic(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  int v4 = (_OWORD *)(a2 + 8);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6)
  {
    outlined destroy of MaterialParameters.Texture(a1 + 8);
LABEL_5:
    *uint64_t v3 = *v4;
    *(_OWORD *)((char *)v3 + 12) = *(_OWORD *)((char *)v4 + 12);
    return a1;
  }
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = v6;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Metallic(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Metallic(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.AnisotropyAngle()
{
  return &type metadata for PhysicallyBasedMaterial.AnisotropyAngle;
}

void destroy for PhysicallyBasedMaterial.BaseColor(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    id v2 = *(id *)(a1 + 8);
    swift_release();
  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  id v7 = v4;
  if (v6)
  {
    int v8 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    id v9 = v8;
    swift_retain();
  }
  else
  {
    *id v5 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = (_OWORD *)(a1 + 8);
  int v8 = (_OWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 8);
      id v11 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v11;
      id v12 = v11;

      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
      *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
      *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture(a1 + 8);
      long long v15 = *(_OWORD *)(a2 + 20);
      *id v7 = *v8;
      *(_OWORD *)(a1 + 20) = v15;
    }
  }
  else if (v9)
  {
    long long v13 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    id v14 = v13;
    swift_retain();
  }
  else
  {
    long long v16 = *v8;
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    *id v7 = v16;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.BaseColor(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v5)
  {
    outlined destroy of MaterialParameters.Texture(a1 + 8);
LABEL_5:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 20) = *(_OWORD *)(a2 + 20);
    return a1;
  }
  id v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = v5;
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.BaseColor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.BaseColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.SheenColor()
{
  return &type metadata for PhysicallyBasedMaterial.SheenColor;
}

uint64_t method lookup function for PhysicallyBasedMaterial.Program(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PhysicallyBasedMaterial.Program);
}

uint64_t dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:)(uint64_t a1)
{
  id v6 = (uint64_t (*)(uint64_t))(*(void *)(v1 + 96) + **(int **)(v1 + 96));
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *int v4 = v2;
  v4[1] = dispatch thunk of PhysicallyBasedMaterial.Program.__allocating_init(descriptor:);
  return v6(a1);
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Program.Descriptor(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  if (*a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *a1;
  }
  int v7 = v6 - 3;
  if (*a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PhysicallyBasedMaterial.Program.Descriptor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22800FB24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.Program.Descriptor()
{
  return &type metadata for PhysicallyBasedMaterial.Program.Descriptor;
}

void destroy for PhysicallyBasedMaterial.ClearcoatNormal(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    id v1 = *(id *)a1;
    swift_release();
  }
}

uint64_t initializeWithCopy for PhysicallyBasedMaterial.Normal(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    unsigned int v4 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    id v5 = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t assignWithCopy for PhysicallyBasedMaterial.Normal(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      id v5 = *(void **)a1;
      unsigned int v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;

      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
      *(unsigned char *)(a1 + 25) = *((unsigned char *)a2 + 25);
      *(unsigned char *)(a1 + 26) = *((unsigned char *)a2 + 26);
      *(unsigned char *)(a1 + 27) = *((unsigned char *)a2 + 27);
    }
    else
    {
      outlined destroy of MaterialParameters.Texture(a1);
      long long v10 = *(long long *)((char *)a2 + 12);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 12) = v10;
    }
  }
  else if (v4)
  {
    int v8 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    id v9 = v8;
    swift_retain();
  }
  else
  {
    long long v11 = *a2;
    *(_OWORD *)(a1 + 12) = *(long long *)((char *)a2 + 12);
    *(_OWORD *)a1 = v11;
  }
  return a1;
}

uint64_t assignWithTake for PhysicallyBasedMaterial.Normal(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of MaterialParameters.Texture(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
    return a1;
  }
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicallyBasedMaterial.Normal(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicallyBasedMaterial.Normal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicallyBasedMaterial.ClearcoatNormal()
{
  return &type metadata for PhysicallyBasedMaterial.ClearcoatNormal;
}

void one-time initialization function for basicBounceAnimationData()
{
  static EmphasizeAnimations.basicBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicBounceAnimationData;
}

void one-time initialization function for playfulBounceAnimationData()
{
  static EmphasizeAnimations.playfulBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulBounceAnimationData;
}

void one-time initialization function for wildBounceAnimationData()
{
  static EmphasizeAnimations.wildBounceAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildBounceAnimationData;
}

void *specialized static EmphasizeAnimations.createEmphasizeBounceAnimation(style:)(unsigned char *a1)
{
  if (!*a1)
  {
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 94, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for basicBounceAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 140, 0, MEMORY[0x263F8EE78]);
    if (one-time initialization token for playfulBounceAnimationData == -1) {
      goto LABEL_8;
    }
    goto LABEL_9;
  }
  unint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 271, 0, MEMORY[0x263F8EE78]);
  if (one-time initialization token for wildBounceAnimationData != -1) {
LABEL_9:
  }
    swift_once();
LABEL_8:
  uint64_t v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t AnchorEntity.__allocating_init(plane:classification:minimumBounds:)(char *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v6);
  int v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a2;
  *int v8 = *a1;
  *((void *)v8 + 1) = v9;
  *((double *)v8 + 2) = a3;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v8);
}

uint64_t AnchorEntity.__allocating_init(_:)(uint64_t a1)
{
  return AnchorEntity.init(_:)(a1);
}

uint64_t AnchorEntity.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent(0);
  unint64_t v3 = (int *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  id v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v5);
  *(void *)&v5[v3[7]] = 1;
  *(void *)&v5[v3[8]] = 1;
  uint64_t v7 = &v5[v3[9]];
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[64] = 1;
  swift_retain();
  REAnchoringComponentGetComponentType();
  v9[1] = REEntityGetOrAddComponentByClass();
  AnchoringComponent.__toCore(_:)();
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    REEntityRemoveComponent();
  }
  outlined destroy of AnchoringComponent((uint64_t)v5, type metadata accessor for AnchoringComponent);
  swift_release();
  outlined destroy of AnchoringComponent(a1, type metadata accessor for AnchoringComponent.Target);
  return v6;
}

uint64_t AnchorEntity.__allocating_init(world:)(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  __n128 v12 = a3;
  __n128 v13 = a4;
  __n128 v10 = a1;
  __n128 v11 = a2;
  uint64_t v4 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (__n128 *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v7 = v11;
  *uint64_t v6 = v10;
  v6[1] = v7;
  __n128 v8 = v13;
  _OWORD v6[2] = v12;
  v6[3] = v8;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v6);
}

uint64_t AnchorEntity.__allocating_init(anchor:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  swift_dynamicCast();
  id v5 = v11;
  id v6 = objc_msgSend(v11, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v7 = AnchorEntity.init(_:)((uint64_t)v4);

  outlined destroy of __AnyARKitObject(a1);
  return v7;
}

uint64_t AnchorEntity.__allocating_init(raycastResult:)(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (long long *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Any(a1, (uint64_t)&v37);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARRaycastResult);
  swift_dynamicCast();
  id v5 = v36[0];
  id v6 = objc_msgSend(v36[0], sel_anchor);
  if (!v6)
  {
    objc_msgSend(v5, sel_worldTransform);
    *uint64_t v4 = v15;
    v4[1] = v16;
    uint64_t v4[2] = v17;
    v4[3] = v18;
    swift_storeEnumTagMultiPayload();
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    uint64_t v11 = AnchorEntity.init(_:)((uint64_t)v4);
    goto LABEL_13;
  }
  uint64_t v7 = v6;
  uint64_t v38 = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  *(void *)&long long v37 = v7;
  outlined init with copy of Any((uint64_t)&v37, (uint64_t)v36);
  id v8 = v7;
  swift_dynamicCast();
  uint64_t v9 = (void *)v35;
  id v10 = objc_msgSend((id)v35, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v11 = AnchorEntity.init(_:)((uint64_t)v4);

  outlined destroy of __AnyARKitObject((uint64_t)&v37);
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {
    swift_retain();
    goto LABEL_7;
  }
  __n128 v13 = (void *)v12;
  id v14 = v8;
  swift_retain();
  if (objc_msgSend(v13, sel_alignment))
  {

LABEL_7:
    objc_msgSend(v8, sel_transform);
    simd_float4x4 v41 = __invert_f4(v40);
    objc_msgSend(v5, sel_worldTransform, *(_OWORD *)v41.columns, *(_OWORD *)&v41.columns[1], *(_OWORD *)&v41.columns[2], *(_OWORD *)&v41.columns[3]);
    REMakeSRTFromMatrix();
    if (one-time initialization token for identity != -1)
    {
      __n128 v33 = v19;
      float32x4_t v34 = (float32x4_t)v20;
      __n128 v32 = v21;
      swift_once();
      __n128 v21 = v32;
      __n128 v19 = v33;
      __n128 v20 = (__n128)v34;
    }
    HasTransform.transform.setter(v19, v20, v21);
    swift_release();

    goto LABEL_13;
  }
  objc_msgSend(v5, sel_worldTransform);
  float32x4_t v34 = v22;
  objc_msgSend(v14, sel_transform);
  float32x4_t v24 = vsubq_f32(v34, v23);
  v24.i32[3] = 0;
  float32x4_t v34 = v24;
  objc_msgSend(v5, sel_worldTransform);
  v28.n128_u64[0] = simd_float4x4.scale.getter(v25, v26, v27).n64_u64[0];
  __n128 v33 = v28;
  objc_msgSend(v5, sel_worldTransform);
  long long v37 = 0u;
  long long v35 = 0u;
  *(_OWORD *)uint64_t v36 = 0u;
  REDecomposeMatrix();
  __n128 v29 = *(__n128 *)v36;
  if (one-time initialization token for identity != -1)
  {
    __n128 v32 = *(__n128 *)v36;
    swift_once();
    __n128 v29 = v32;
  }
  HasTransform.transform.setter(v33, v29, (__n128)v34);
  swift_release();

LABEL_13:
  outlined destroy of __AnyARKitObject(a1);
  return v11;
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v5[8] = v7;
  v5[9] = v6;
  return MEMORY[0x270FA2498](static AnchorEntity.classLoad(named:in:options:asyncOptions:), v7, v6);
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 56);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v2 = 0xD000000000000022;
    v2[1] = 0x8000000228355BC0;
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = static Entity.loadAnchorAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
  *(void *)(v0 + 80) = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 104);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static AnchorEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  }
  else
  {
    swift_release();
    v4[13] = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  uint64_t v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  type metadata accessor for MainActor();
  v5[12] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[13] = v7;
  v5[14] = v6;
  return MEMORY[0x270FA2498](static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:), v7, v6);
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 80) + 56);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v2 = 0xD00000000000002DLL;
    v2[1] = 0x8000000228355B90;
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 56);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  uint64_t v6 = static Entity.__loadAnchorAsync(contentsOf:withName:downsamplingStrategy:)(v5, v3, v4, v0 + 16);
  *(void *)(v0 + 120) = v6;
  outlined destroy of __DownsamplingStrategy?(v0 + 16);
  uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v9(v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[13];
    uint64_t v6 = v4[14];
    uint64_t v7 = static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  }
  else
  {
    swift_release();
    v4[18] = a1;
    uint64_t v5 = v4[13];
    uint64_t v6 = v4[14];
    uint64_t v7 = static AnchorEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t AnchorEntity.init(_:trackingMode:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a2;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v9 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v7);
  uint64_t v10 = v5[7];
  *(void *)&v7[v10] = 1;
  uint64_t v11 = v5[8];
  *(void *)&v7[v11] = 1;
  uint64_t v12 = &v7[v5[9]];
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  v12[64] = 1;
  *(void *)&v7[v10] = v8;
  *(void *)&v7[v11] = 1;
  swift_retain();
  HasAnchoring.anchoring.setter((uint64_t)v7);
  swift_release();
  outlined destroy of AnchoringComponent(a1, type metadata accessor for AnchoringComponent.Target);
  return v9;
}

uint64_t AnchorEntity.init(_:trackingMode:physicsSimulation:)(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AnchoringComponent(0);
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  uint64_t v15 = Entity.init()();
  outlined init with copy of AnchoringComponent.Target(a1, (uint64_t)v8);
  uint64_t v16 = v10[7];
  *(void *)&v12[v16] = 1;
  uint64_t v17 = v10[8];
  *(void *)&v12[v17] = 1;
  long long v18 = &v12[v10[9]];
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *(_OWORD *)long long v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v18[64] = 1;
  outlined init with take of AnchoringComponent.Target((uint64_t)v8, (uint64_t)v12);
  *(void *)&v12[v16] = v13;
  *(void *)&v12[v17] = v14;
  swift_retain();
  HasAnchoring.anchoring.setter((uint64_t)v12);
  swift_release();
  outlined destroy of AnchoringComponent(a1, type metadata accessor for AnchoringComponent.Target);
  return v15;
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v5[8] = v7;
  v5[9] = v6;
  return MEMORY[0x270FA2498](static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:), v7, v6);
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 56);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v2 = 0xD000000000000027;
    v2[1] = 0x8000000228355B60;
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = static Entity.loadBodyTrackedAsync(named:in:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
  *(void *)(v0 + 80) = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v4;
  *uint64_t v4 = v0;
  v4[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

uint64_t static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 96) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  }
  else
  {
    swift_release();
    v4[13] = a1;
    uint64_t v5 = v4[8];
    uint64_t v6 = v4[9];
    uint64_t v7 = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static BodyTrackedEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  _OWORD v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  uint64_t v5[8] = v7;
  v5[9] = v6;
  return MEMORY[0x270FA2498](static BodyTrackedEntity.classLoad(contentsOf:withName:options:asyncOptions:), v7, v6);
}

uint64_t static BodyTrackedEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(v0[5] + 56);
  if (v1)
  {
    uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v2 = 0xD000000000000032;
    v2[1] = 0x8000000228355B20;
    swift_bridgeObjectRelease();
  }
  uint64_t v3 = static Entity.loadBodyTrackedAsync(contentsOf:withName:)(v0[2], v0[3], v0[4]);
  v0[10] = v3;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[11] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v6(v3);
}

uint64_t PointLight.__allocating_init()()
{
  return Entity.init()();
}

uint64_t PointLight.init(_coreEntity:)(void *a1)
{
  *(void *)(v1 + 16) = *a1;
  MEMORY[0x22A68E750]();
  return v1;
}

uint64_t PointLight.deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);
  return v0;
}

uint64_t ModelEntity.__allocating_init()()
{
  swift_allocObject();
  uint64_t v0 = Entity.init()();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    swift_retain();
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else
  {
    swift_retain();
    if (REShadowsGetEnableDefaultShadows()) {
      MEMORY[0x22A691220](*(void *)(v0 + 16), 1);
    }
  }
  swift_release();
  return v0;
}

uint64_t ModelEntity.init()()
{
  uint64_t v0 = Entity.init()();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    swift_retain();
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else
  {
    swift_retain();
    if (REShadowsGetEnableDefaultShadows()) {
      MEMORY[0x22A691220](*(void *)(v0 + 16), 1);
    }
  }
  swift_release();
  return v0;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized ModelEntity.init(mesh:materials:)(a1, a2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ModelEntity.init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized ModelEntity.init(mesh:materials:)(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(a1, a2, a3, specialized ModelEntity.init(mesh:materials:collisionShape:mass:), a4);
}

uint64_t ModelEntity.init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = specialized ModelEntity.init(mesh:materials:collisionShape:mass:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  return ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, float))specialized ModelEntity.init(mesh:materials:collisionShapes:mass:), a4);
}

uint64_t ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, float), float a5)
{
  swift_allocObject();
  uint64_t v10 = a4(a1, a2, a3, a5);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t ModelEntity.init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v4 = specialized ModelEntity.init(mesh:materials:collisionShapes:mass:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  uint64_t v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](static ModelEntity.classLoad(named:in:options:asyncOptions:), v6, v5);
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v3 = 0xD000000000000021;
    v3[1] = 0x8000000228355AF0;
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v0 + 40);
  }
  uint64_t v4 = specialized static Entity.loadModelAsync(named:in:options:asyncOptions:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), (unsigned char *)v1);
  *(void *)(v0 + 72) = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v5;
  *uint64_t v5 = v0;
  v5[1] = static ModelEntity.classLoad(named:in:options:asyncOptions:);
  return v7(v4);
}

uint64_t static ModelEntity.classLoad(named:in:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static ModelEntity.classLoad(named:in:options:asyncOptions:);
  }
  else
  {
    swift_release();
    v4[12] = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static ModelEntity.classLoad(named:in:options:asyncOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  uint64_t v4[2] = a1;
  v4[3] = a2;
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[7] = v6;
  v4[8] = v5;
  return MEMORY[0x270FA2498](static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:), v6, v5);
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtCE17RealityFoundationC10RealityKit6Entity14LoadStatistics_functionName);
    *uint64_t v3 = 0xD00000000000002CLL;
    v3[1] = 0x8000000228355AC0;
    swift_bridgeObjectRelease();
    uint64_t v1 = v0[5];
  }
  uint64_t v4 = specialized static Entity.loadModelAsync(contentsOf:withName:options:asyncOptions:)(v0[2], v0[3], v0[4], v1);
  v0[9] = v4;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  return v7(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 88) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  }
  else
  {
    swift_release();
    v4[12] = a1;
    uint64_t v5 = v4[7];
    uint64_t v6 = v4[8];
    uint64_t v7 = static ModelEntity.classLoad(contentsOf:withName:options:asyncOptions:);
  }
  return MEMORY[0x270FA2498](v7, v5, v6);
}

uint64_t TriggerVolume.__allocating_init(shape:filter:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_22831E4E0;
  *(void *)(v2 + 32) = a1;
  uint64_t v5 = v2;
  specialized Array._endMutation()();
  type metadata accessor for TriggerVolume();
  swift_allocObject();
  uint64_t v3 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t TriggerVolume.__allocating_init(shapes:filter:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t TriggerVolume.init(shapes:filter:)(uint64_t a1)
{
  uint64_t v2 = Entity.init()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1);
  swift_release_n();
  swift_bridgeObjectRelease();
  return v2;
}

void TriggerVolume.__allocating_init(_coreEntity:)()
{
}

void TriggerVolume.init(_coreEntity:)()
{
}

uint64_t VFXEntity.__allocating_init(effect:)(uint64_t a1)
{
  type metadata accessor for VFXEntity();
  swift_allocObject();
  uint64_t v2 = Entity.init()();
  uint64_t v4 = a1;
  long long v5 = *(_OWORD *)zmmword_22830EC90;
  uint64_t v6 = MEMORY[0x263F8EE78];
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  __int16 v10 = 1;
  swift_retain();
  swift_retain();
  HasVFX.vfxComponent.setter((uint64_t)&v4);
  swift_release();
  swift_release();
  return v2;
}

uint64_t AnchorEntity.__allocating_init(_coreEntity:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *a1;
  MEMORY[0x22A68E750]();
  return v2;
}

uint64_t AnchorEntity.__deallocating_deinit()
{
  MEMORY[0x22A68E750](*(void *)(v0 + 16), 0);

  return swift_deallocClassInstance();
}

uint64_t specialized AnchorEntity.__allocating_init(world:)(__n128 a1)
{
  __n128 v6 = a1;
  uint64_t v1 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (_OWORD *)((char *)v6.n128_u64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v4 = v6;
  v4.n128_u32[3] = 1.0;
  *uint64_t v3 = *(_OWORD *)zmmword_22830EC90;
  v3[1] = *(_OWORD *)&zmmword_22830EC90[16];
  _OWORD v3[2] = *(_OWORD *)&zmmword_22830EC90[32];
  v3[3] = v4;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v3);
}

uint64_t type metadata accessor for AnchorEntity()
{
  return self;
}

uint64_t outlined init with copy of AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnchoringComponent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of __AnyARKitObject(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of AnchoringComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnchoringComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized ModelEntity.init(mesh:materials:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if (REShadowsGetEnableDefaultShadows())
  {
    MEMORY[0x22A691220](*(void *)(v4 + 16), 1);
  }
  swift_release();
  swift_release();
  return v4;
}

uint64_t specialized ModelEntity.init(mesh:materials:collisionShape:mass:)(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_22831E4E0;
  *(void *)(v9 + 32) = a3;
  v34[0] = v9;
  swift_retain();
  specialized Array._endMutation()();
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v34[0]);
  swift_release_n();
  swift_bridgeObjectRelease();
  LOBYTE(v34[0]) = 2;
  uint64_t v10 = swift_retain();
  PhysicsBodyComponent.init(shape:mass:material:mode:)(v10, 0, (char *)v34, (uint64_t)v13, a4);
  LOBYTE(v34[0]) = v13[0];
  int v35 = v14;
  long long v36 = v15;
  long long v37 = v16;
  long long v38 = v17;
  uint64_t v39 = v18;
  char v40 = v19;
  char v41 = v20;
  char v42 = v21;
  char v43 = v22;
  char v44 = v23;
  char v45 = v24;
  char v46 = v25;
  char v47 = v26;
  long long v48 = v27;
  long long v49 = v28;
  long long v50 = v29;
  long long v51 = v30;
  char v52 = v31;
  uint64_t v53 = v32;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v34, v11);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v34, (uint64_t)v33);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v33);
  swift_release_n();
  swift_release();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes == 1)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if (REShadowsGetEnableDefaultShadows())
  {
    MEMORY[0x22A691220](*(void *)(v8 + 16), 1);
  }
  swift_release();
  swift_release();
  swift_release();
  return v8;
}

uint64_t specialized ModelEntity.init(mesh:materials:collisionShapes:mass:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v8 = Entity.init()();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(a1, a2, 0, 0);
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  uint64_t v9 = swift_bridgeObjectRetain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v9);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = specialized static ShapeResource.findShapeResource(_:)(a3);
  if (!result)
  {
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)(v12 - 0x1000000000000000) >> 61 == 7)
    {
      uint64_t result = swift_slowAlloc();
      if ((unint64_t)(v12 - 0x400000000000000) >> 59 == 31)
      {
        uint64_t v13 = (void *)result;
        uint64_t result = swift_slowAlloc();
        if ((v12 & 0x8000000000000000) == 0)
        {
          uint64_t v14 = result;
          if (v12)
          {
            if ((a3 & 0xC000000000000001) != 0)
            {
              uint64_t v15 = 0;
              long long v16 = (_OWORD *)(result + 16);
              do
              {
                uint64_t v17 = *(void *)(MEMORY[0x22A689930](v15, a3) + 16);
                swift_unknownObjectRelease();
                v13[v15] = v17;
                uint64_t v18 = MEMORY[0x22A689930](v15, a3);
                long long v32 = *(_OWORD *)(v18 + 48);
                long long v33 = *(_OWORD *)(v18 + 32);
                swift_unknownObjectRelease();
                *(v16 - 1) = v33;
                *long long v16 = v32;
                v16 += 2;
                ++v15;
              }
              while (v12 != v15);
            }
            else
            {
              char v19 = (uint64_t *)(a3 + 32);
              char v20 = (_OWORD *)(result + 16);
              char v21 = v13;
              uint64_t v22 = v12;
              do
              {
                uint64_t v23 = *v19++;
                *v21++ = *(void *)(v23 + 16);
                long long v24 = *(_OWORD *)(v23 + 48);
                *(v20 - 1) = *(_OWORD *)(v23 + 32);
                *char v20 = v24;
                v20 += 2;
                --v22;
              }
              while (v22);
            }
          }
          uint64_t v25 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v25, (uint64_t)v54);
          uint64_t v26 = v56;
          uint64_t v27 = v57;
          __swift_project_boxed_opaque_existential_1(v54, v56);
          (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
          uint64_t Compound = REAssetManagerCollisionShapeAssetCreateCompound();
          type metadata accessor for ShapeResource();
          uint64_t v11 = swift_allocObject();
          *(void *)(v11 + 16) = Compound;
          REPoseIdentity();
          *(_OWORD *)(v11 + 32) = v29;
          *(_OWORD *)(v11 + 48) = v30;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          MEMORY[0x22A696500](v14, -1, -1);
          MEMORY[0x22A696500](v13, -1, -1);
          goto LABEL_16;
        }
LABEL_24:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = result;
LABEL_16:
  swift_bridgeObjectRelease();
  v34[0] = 2;
  PhysicsBodyComponent.init(shape:mass:material:mode:)(v11, 0, v34, (uint64_t)v54, a4);
  v34[0] = v54[0];
  int v35 = v55;
  long long v36 = v57;
  long long v37 = v58;
  long long v38 = v59;
  uint64_t v39 = v60;
  char v40 = v61;
  char v41 = v62;
  char v42 = v63;
  char v43 = v64;
  char v44 = v65;
  char v45 = v66;
  char v46 = v67;
  char v47 = v68;
  long long v48 = v69;
  long long v49 = v70;
  long long v50 = v71;
  long long v51 = v72;
  char v52 = v73;
  uint64_t v53 = v74;
  destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v34, v31);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v34, (uint64_t)v54);
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v54);
  swift_release_n();
  swift_release();
  swift_beginAccess();
  if (static RKARSystemCore.generateDecimatedMeshes)
  {
    RERayTracedShadowReceiverComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
  }
  else if (REShadowsGetEnableDefaultShadows())
  {
    MEMORY[0x22A691220](*(void *)(v8 + 16), 1);
  }
  swift_release();
  swift_release();
  return v8;
}

uint64_t type metadata accessor for TriggerVolume()
{
  return self;
}

uint64_t type metadata accessor for VFXEntity()
{
  return self;
}

uint64_t method lookup function for AnchorEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for AnchorEntity);
}

uint64_t dispatch thunk of AnchorEntity.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t type metadata accessor for BodyTrackedEntity()
{
  return self;
}

uint64_t type metadata accessor for PerspectiveCamera()
{
  return self;
}

uint64_t type metadata accessor for AmbientLight()
{
  return self;
}

uint64_t type metadata accessor for SpotLight()
{
  return self;
}

uint64_t type metadata accessor for DirectionalLight()
{
  return self;
}

uint64_t type metadata accessor for PointLight()
{
  return self;
}

uint64_t type metadata accessor for ModelEntity()
{
  return self;
}

uint64_t method lookup function for ModelEntity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for ModelEntity);
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:collisionShape:mass:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of ModelEntity.__allocating_init(mesh:materials:collisionShapes:mass:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t method lookup function for TriggerVolume(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for TriggerVolume);
}

uint64_t dispatch thunk of TriggerVolume.__allocating_init(shapes:filter:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t outlined destroy of __DownsamplingStrategy?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PointLightComponent.__color.getter()
{
  return *v0;
}

void PointLightComponent.__color.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*PointLightComponent.__color.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.intensity.getter()
{
  return *(float *)(v0 + 8);
}

void PointLightComponent.intensity.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*PointLightComponent.intensity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.attenuationRadius.getter()
{
  return *(float *)(v0 + 12);
}

void PointLightComponent.attenuationRadius.setter(float a1)
{
  *(float *)(v1 + 12) = a1;
}

uint64_t (*PointLightComponent.attenuationRadius.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PointLightComponent.init(cgColor:intensity:attenuationRadius:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  *(void *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(_DWORD *)(a2 + 16) = 0x40000000;
}

void static PointLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  REPointLightComponentGetColorGamut3F();
  REPointLightComponentGetIntensity();
  int v3 = v2;
  REPointLightComponentGetAttenuationRadius();
  int v5 = v4;
  REPointLightComponentGetAttenuationFalloffExponent();
  int v7 = v6;
  uint64_t v8 = RECreateCGColorFromColorGamut();

  *(void *)a1 = v8;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = v7;
}

void PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  *(void *)a2 = a1;
  *(float *)(a2 + 8) = a3;
  *(float *)(a2 + 12) = a4;
  *(float *)(a2 + 16) = a5;
}

uint64_t PointLightComponent.__toCore(_:)()
{
  return RENetworkMarkComponentDirty();
}

float PointLightComponent.attenuationFalloffExponent.getter()
{
  return *(float *)(v0 + 16);
}

void static PointLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 51;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PointLightComponent()
{
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PointLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 51;
}

float PointLightComponent.Shadow.depthBias.getter()
{
  return *(float *)v0;
}

void PointLightComponent.Shadow.depthBias.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*PointLightComponent.Shadow.depthBias.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PointLightComponent.Shadow.maximumDistance.getter()
{
  return *(float *)(v0 + 4);
}

void PointLightComponent.Shadow.maximumDistance.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*PointLightComponent.Shadow.maximumDistance.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PointLightComponent.Shadow.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 2048.00048;
  *(void *)a1 = 0x40A000003F800000;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void PointLightComponent.Shadow.init(depthBias:)(uint64_t a1@<X8>, float a2@<S0>)
{
  *(float *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1084227584;
  *(unsigned char *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = 1;
}

uint64_t static PointLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  REPointLightShadowMapComponentGetDepthBias();
  int v3 = v2;
  if (REPointLightShadowMapComponentGetCullModeEx()) {
    char v4 = 1;
  }
  else {
    char v4 = 3;
  }
  char ZNear = REPointLightShadowMapComponentGetZNear();
  uint64_t result = REPointLightShadowMapComponentGetZFar();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = 1084227584;
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = ZNear ^ 1;
  *(_DWORD *)(a1 + 20) = 0;
  *(unsigned char *)(a1 + 24) = result ^ 1;
  return result;
}

unsigned char *PointLightComponent.Shadow.cullModeOverride.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 8) = *result;
  return result;
}

int *PointLightComponent.Shadow.zNear.setter(int *result)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  return result;
}

int *PointLightComponent.Shadow.zFar.setter(int *result)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 20) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t PointLightComponent.Shadow.__toCore(_:)()
{
  return REPointLightShadowMapComponentSetCullMode();
}

void static PointLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 75;
}

void protocol witness for static Component.__coreComponentType.getter in conformance PointLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 75;
}

void PointLightComponent.attenuationFalloffExponent.setter(float a1)
{
  *(float *)(v1 + 16) = a1;
}

float (*PointLightComponent.attenuationFalloffExponent.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 16);
  return PointLightComponent.attenuationFalloffExponent.modify;
}

float PointLightComponent.attenuationFalloffExponent.modify(float *a1)
{
  float result = a1[2];
  *(float *)(*(void *)a1 + 16) = result;
  return result;
}

void PointLightComponent.Shadow.cullModeOverride.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

unsigned char *(*PointLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 8);
  return DirectionalLightComponent.Shadow.cullModeOverride.modify;
}

uint64_t static PointLightComponent.Shadow.ShadowClippingPlane.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 4);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 4);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(float *)a1 == *(float *)a2;
  }
  return result;
}

void PointLightComponent.Shadow.zNear.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 12);
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t *(*PointLightComponent.Shadow.zNear.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = *(unsigned char *)(v1 + 16);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 12);
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v2;
  return PointLightComponent.Shadow.zNear.modify;
}

uint64_t *PointLightComponent.Shadow.zNear.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = *((_DWORD *)result + 2);
  char v3 = *((unsigned char *)result + 12);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = v2;
  *(unsigned char *)(v1 + 16) = v3;
  return result;
}

void PointLightComponent.Shadow.zFar.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 20);
  }
  *(_DWORD *)a1 = v3;
  *(unsigned char *)(a1 + 4) = v2;
}

uint64_t *(*PointLightComponent.Shadow.zFar.modify(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  char v2 = *(unsigned char *)(v1 + 24);
  if (v2) {
    int v3 = 0;
  }
  else {
    int v3 = *(_DWORD *)(v1 + 20);
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 12) = v2;
  return PointLightComponent.Shadow.zFar.modify;
}

uint64_t *PointLightComponent.Shadow.zFar.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = *((_DWORD *)result + 2);
  char v3 = *((unsigned char *)result + 12);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 20) = v2;
  *(unsigned char *)(v1 + 24) = v3;
  return result;
}

uint64_t PointLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v23 = a1;
  uint64_t v22 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unsigned int v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __n128 v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v9 = *(unsigned char *)(v1 + 8);
  int v10 = *(_DWORD *)(v1 + 12);
  int v11 = *(unsigned __int8 *)(v1 + 16);
  int v12 = *(_DWORD *)(v1 + 20);
  int v13 = *(unsigned __int8 *)(v1 + 24);
  v6.n128_u64[0] = *(void *)v1;
  __n128 v21 = v6;
  unint64_t v24 = v6.n128_u64[0];
  char v25 = v9;
  int v26 = v10;
  char v27 = v11;
  int v28 = v12;
  char v29 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_228324960;
  *(void *)(v14 + 32) = 0x6169426874706564;
  *(void *)(v14 + 40) = 0xE900000000000073;
  uint64_t v15 = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v14 + 48) = v21.n128_u32[0];
  *(void *)(v14 + 72) = v15;
  *(void *)(v14 + 80) = 0xD000000000000010;
  *(void *)(v14 + 88) = 0x800000022834E350;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(unsigned char *)(v14 + 96) = v9;
  *(void *)(v14 + 120) = v16;
  *(void *)(v14 + 128) = 0x7261654E7ALL;
  *(void *)(v14 + 136) = 0xE500000000000000;
  if (v11) {
    int v17 = 0;
  }
  else {
    int v17 = v10;
  }
  *(_DWORD *)(v14 + 144) = v17;
  *(unsigned char *)(v14 + 148) = v11;
  *(void *)(v14 + 168) = &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
  *(void *)(v14 + 176) = 1918977658;
  *(void *)(v14 + 184) = 0xE400000000000000;
  *(void *)(v14 + 216) = &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
  if (v13) {
    int v18 = 0;
  }
  else {
    int v18 = v12;
  }
  *(_DWORD *)(v14 + 192) = v18;
  *(unsigned char *)(v14 + 196) = v13;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v22);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static PointLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4)) {
    return 0;
  }
  int v3 = *(unsigned __int8 *)(a1 + 8);
  float v4 = *(float *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  float v6 = *(float *)(a1 + 20);
  char v7 = *(unsigned char *)(a1 + 24);
  int v8 = *(unsigned __int8 *)(a2 + 8);
  char v9 = *(unsigned char *)(a2 + 16);
  char v10 = *(unsigned char *)(a2 + 24);
  if (v3 == 3)
  {
    if (v8 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v8 == 3 || v3 != v8) {
      return result;
    }
  }
  if (v5)
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (v4 != *(float *)(a2 + 12)) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  if (v7)
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v6 != *(float *)(a2 + 20)) {
      char v10 = 1;
    }
    if (v10) {
      return 0;
    }
  }
  return 1;
}

BOOL specialized static PointLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  float v2 = a1[2];
  float v3 = a1[3];
  float v4 = a1[4];
  float v5 = a2[2];
  float v6 = a2[3];
  float v7 = a2[4];
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  char v8 = static _CFObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v8 & 1) != 0 && v2 == v5 && v3 == v6) {
    return v4 == v7;
  }
  return result;
}

float sub_228013EE8@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 16);
  *a2 = result;
  return result;
}

float sub_228013EF4(float *a1, uint64_t a2)
{
  float result = *a1;
  *(float *)(a2 + 16) = *a1;
  return result;
}

uint64_t sub_228013F00@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *sub_228013F0C(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_228013F18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 12);
  char v3 = *(unsigned char *)(result + 16);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

int *sub_228013F34(int *result, uint64_t a2)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_228013F50@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(result + 20);
  char v3 = *(unsigned char *)(result + 24);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)a2 = v2;
  *(unsigned char *)(a2 + 4) = v3;
  return result;
}

int *sub_228013F6C(int *result, uint64_t a2)
{
  int v2 = *result;
  char v3 = *((unsigned char *)result + 4);
  if (v3) {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 20) = v2;
  *(unsigned char *)(a2 + 24) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PointLightComponent(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for PointLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  float v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PointLightComponent(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PointLightComponent()
{
  return &type metadata for PointLightComponent;
}

uint64_t getEnumTagSinglePayload for PointLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 4;
  if (*(unsigned __int8 *)(a1 + 8) < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)float result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PointLightComponent.Shadow()
{
  return &type metadata for PointLightComponent.Shadow;
}

ValueMetadata *type metadata accessor for PointLightComponent.Shadow.ShadowClippingPlane()
{
  return &type metadata for PointLightComponent.Shadow.ShadowClippingPlane;
}

uint64_t one-time initialization function for noTargetSceneIdentifier()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v0 - 8);
  int v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  __swift_allocate_value_buffer(v3, static __RKChangeSceneAction.noTargetSceneIdentifier);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  UUID.init(uuidString:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t static __RKChangeSceneAction.noTargetSceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for noTargetSceneIdentifier != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t key path setter for __RKChangeSceneAction.rootEntity : __RKChangeSceneAction(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *uint64_t v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t __RKChangeSceneAction.rootEntity.getter()
{
  return swift_retain();
}

uint64_t __RKChangeSceneAction.rootEntity.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*__RKChangeSceneAction.rootEntity.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKChangeSceneAction.__allocating_init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)()
{
  _StringGuts.grow(_:)(24);
  v0._object = (void *)0x8000000228355CE0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x263F07508]);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t __RKChangeSceneAction.perform(with:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v76 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for DispatchQoS();
  uint64_t v75 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v74 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchTime();
  uint64_t v73 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  long long v72 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v78 = (char *)&v66 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  int v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t aBlock = StaticString.description.getter();
  uint64_t v82 = v12;
  v13._uint64_t countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  uint64_t v15 = aBlock;
  uint64_t v14 = v82;
  uint64_t v16 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v16, &aBlock);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v0 + 96);
  char v18 = *(unsigned char *)(v0 + 104);
  *(void *)(v0 + 96) = 1;
  *(unsigned char *)(v0 + 104) = 1;
  uint64_t aBlock = v17;
  LOBYTE(v82) = v18;
  __RKEntityAction.state.didset((uint64_t)&aBlock);
  uint64_t v19 = (uint64_t *)(v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  uint64_t v20 = *v19;
  if (*v19)
  {
    swift_retain();
    uint64_t SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      uint64_t v22 = SceneNullable;
      uint64_t v69 = v3;
      id v23 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v23)
      {
        uint64_t v24 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        uint64_t v24 = Scene.init(coreScene:)(v22);
      }
      uint64_t v31 = v24;
      uint64_t v32 = Scene.__interactionService.getter();
      type metadata accessor for __RKEntityInteractionManager();
      uint64_t v33 = swift_dynamicCastClass();
      if (v33)
      {
        uint64_t v34 = v33;
        uint64_t v70 = v32;
        uint64_t v71 = v31;
        uint64_t v66 = v2;
        uint64_t v35 = v80;
        long long v36 = *(void (**)(char *))(v80 + 16);
        uint64_t v67 = v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
        uint64_t v68 = (uint64_t)v36;
        v36(v11);
        if (one-time initialization token for noTargetSceneIdentifier != -1) {
          swift_once();
        }
        __swift_project_value_buffer(v9, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
        char v37 = static UUID.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v9);
        if (v37)
        {
          uint64_t aBlock = v15;
          uint64_t v82 = v14;
          os_log_type_t v38 = static os_log_type_t.error.getter();
          specialized InteractionsLogger.log(_:_:)(v38, &aBlock);
          swift_bridgeObjectRelease();
          uint64_t v39 = *(void *)(v1 + 96);
          char v40 = *(unsigned char *)(v1 + 104);
          *(void *)(v1 + 96) = 4;
          *(unsigned char *)(v1 + 104) = 1;
          uint64_t aBlock = v39;
          LOBYTE(v82) = v40;
          __RKEntityAction.state.didset((uint64_t)&aBlock);
          swift_release();
          swift_release();
        }
        else
        {
          swift_beginAccess();
          uint64_t v44 = *(void *)(v34 + 48);
          swift_beginAccess();
          if (*(unsigned char *)(v44 + 32) == 1)
          {
            uint64_t aBlock = v15;
            uint64_t v82 = v14;
            os_log_type_t v45 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v45, &aBlock);
            ((void (*)(char *, uint64_t, uint64_t))v68)(v11, v67, v9);
            type metadata accessor for RKChangeSceneActionSimulationTechnique();
            uint64_t v68 = swift_allocObject();
          }
          else
          {
            uint64_t aBlock = v15;
            uint64_t v82 = v14;
            os_log_type_t v46 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v46, &aBlock);
            ((void (*)(char *, uint64_t, uint64_t))v68)(v11, v67, v9);
            type metadata accessor for RKChangeSceneActionRuntimeTechnique();
            uint64_t v47 = swift_allocObject();
            *(void *)(v47 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity) = 0;
            uint64_t v68 = v47;
            *(void *)(v47 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_subcomponent) = 0;
          }
          uint64_t v48 = v80;
          uint64_t v49 = v68;
          *(void *)(v68 + 16) = v20;
          (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v49 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier, v11, v9);
          swift_getObjectType();
          long long v50 = off_26DCAB130[0];
          swift_retain();
          swift_unknownObjectRetain();
          char v51 = v50();
          swift_unknownObjectRelease();
          if (v51)
          {
            type metadata accessor for OS_dispatch_queue();
            uint64_t v67 = static OS_dispatch_queue.main.getter();
            char v52 = v72;
            static DispatchTime.now()();
            MEMORY[0x22A688820](v52, 0.01);
            uint64_t v80 = *(void *)(v73 + 8);
            ((void (*)(char *, uint64_t))v80)(v52, v79);
            uint64_t v53 = swift_allocObject();
            swift_weakInit();
            uint64_t v54 = (void *)swift_allocObject();
            void v54[2] = v53;
            v54[3] = v15;
            v54[4] = v14;
            long long v85 = partial apply for closure #1 in __RKChangeSceneAction.perform(with:);
            long long v86 = v54;
            uint64_t aBlock = MEMORY[0x263EF8330];
            uint64_t v82 = 1107296256;
            long long v83 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            long long v84 = &block_descriptor_14;
            int v55 = _Block_copy(&aBlock);
            swift_bridgeObjectRetain();
            swift_release();
            uint64_t v56 = v74;
            static DispatchQoS.unspecified.getter();
            uint64_t aBlock = MEMORY[0x263F8EE78];
            lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x263F8F030]);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
            long long v57 = v76;
            uint64_t v58 = v66;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            long long v59 = v78;
            uint64_t v60 = (void *)v67;
            MEMORY[0x22A6893E0](v78, v56, v57, v55);
            _Block_release(v55);

            (*(void (**)(char *, uint64_t))(v69 + 8))(v57, v58);
            (*(void (**)(char *, uint64_t))(v75 + 8))(v56, v77);
            ((void (*)(char *, uint64_t))v80)(v59, v79);
            uint64_t aBlock = v15;
            uint64_t v82 = v14;
            uint64_t v61 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v61, &aBlock);
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            return 1;
          }
          uint64_t aBlock = v15;
          uint64_t v82 = v14;
          os_log_type_t v63 = static os_log_type_t.error.getter();
          specialized InteractionsLogger.log(_:_:)(v63, &aBlock);
          swift_bridgeObjectRelease();
          uint64_t v64 = *(void *)(v1 + 96);
          char v65 = *(unsigned char *)(v1 + 104);
          *(void *)(v1 + 96) = 4;
          *(unsigned char *)(v1 + 104) = 1;
          uint64_t aBlock = v64;
          LOBYTE(v82) = v65;
          __RKEntityAction.state.didset((uint64_t)&aBlock);
          swift_release();
          swift_release();
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        uint64_t aBlock = v15;
        uint64_t v82 = v14;
        os_log_type_t v41 = static os_log_type_t.error.getter();
        specialized InteractionsLogger.log(_:_:)(v41, &aBlock);
        swift_bridgeObjectRelease();
        uint64_t v42 = *(void *)(v1 + 96);
        char v43 = *(unsigned char *)(v1 + 104);
        *(void *)(v1 + 96) = 4;
        *(unsigned char *)(v1 + 104) = 1;
        uint64_t aBlock = v42;
        LOBYTE(v82) = v43;
        __RKEntityAction.state.didset((uint64_t)&aBlock);
        swift_release();
        swift_release();
      }
    }
    else
    {
      uint64_t aBlock = v15;
      uint64_t v82 = v14;
      os_log_type_t v28 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v28, &aBlock);
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v1 + 96);
      char v30 = *(unsigned char *)(v1 + 104);
      *(void *)(v1 + 96) = 4;
      *(unsigned char *)(v1 + 104) = 1;
      uint64_t aBlock = v29;
      LOBYTE(v82) = v30;
      __RKEntityAction.state.didset((uint64_t)&aBlock);
      swift_release();
    }
  }
  else
  {
    uint64_t aBlock = v15;
    uint64_t v82 = v14;
    os_log_type_t v25 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &aBlock);
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v1 + 96);
    char v27 = *(unsigned char *)(v1 + 104);
    *(void *)(v1 + 96) = 4;
    *(unsigned char *)(v1 + 104) = 1;
    uint64_t aBlock = v26;
    LOBYTE(v82) = v27;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
  }
  return 0;
}

uint64_t closure #1 in __RKChangeSceneAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    v12[0] = a2;
    v12[1] = a3;
    uint64_t v7 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v12);
    swift_beginAccess();
    uint64_t v8 = *(void *)(v6 + 96);
    char v9 = *(unsigned char *)(v6 + 104);
    *(void *)(v6 + 96) = 2;
    *(unsigned char *)(v6 + 104) = 1;
    uint64_t v10 = v8;
    char v11 = v9;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v10);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKChangeSceneAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier, v3);
  uint64_t v7 = type metadata accessor for __RKChangeSceneAction();
  swift_allocObject();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(v8, (uint64_t)v6);
  uint64_t result = swift_release();
  a1[3] = v7;
  *a1 = v9;
  return result;
}

void __RKChangeSceneAction.__allocating_init(targetEntity:)()
{
}

void __RKChangeSceneAction.init(targetEntity:)()
{
}

uint64_t __RKChangeSceneAction.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_release();
}

uint64_t __RKChangeSceneAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return v0;
}

uint64_t __RKChangeSceneAction.__deallocating_deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  *(void *)(v2 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity) = 0;
  uint64_t v24 = 91;
  unint64_t v25 = 0xE100000000000000;
  if (a1)
  {
    v22[4] = a1;
    swift_retain();
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  uint64_t v14 = v24;
  unint64_t v13 = v25;
  swift_beginAccess();
  *uint64_t v6 = a1;
  swift_retain();
  uint64_t v15 = swift_release();
  MEMORY[0x270FA5388](v15);
  v22[2] = a2;
  v23[0] = v14;
  v23[1] = v13;
  uint64_t v16 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v16, v23, partial apply for implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:), v22);
  swift_bridgeObjectRelease();
  uint64_t v17 = v3 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_targetSceneIdentifier;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v17, a2, v18);
  swift_release();
  uint64_t v20 = __RKEntityAction.init(targetEntity:)(0);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, v18);
  return v20;
}

uint64_t sub_22801582C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_228015864()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in __RKChangeSceneAction.perform(with:)()
{
  return closure #1 in __RKChangeSceneAction.perform(with:)(v0[2], v0[3], v0[4]);
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for __RKChangeSceneAction()
{
  uint64_t result = type metadata singleton initialization cache for __RKChangeSceneAction;
  if (!type metadata singleton initialization cache for __RKChangeSceneAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228015970@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC10RealityKit21__RKChangeSceneAction_rootEntity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t ObjC metadata update function for __RKChangeSceneAction()
{
  return type metadata accessor for __RKChangeSceneAction();
}

uint64_t type metadata completion function for __RKChangeSceneAction()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for __RKChangeSceneAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKChangeSceneAction);
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.rootEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 576))();
}

uint64_t dispatch thunk of __RKChangeSceneAction.__allocating_init(rootEntity:targetSceneIdentifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 584))();
}

uint64_t partial apply for implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)()
{
  return implicit closure #1 in __RKChangeSceneAction.init(rootEntity:targetSceneIdentifier:)();
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static __AssetRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

{
  uint64_t v2;

  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t static RemoteVideoPlayer.fromCore(_:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)&v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RERemoteVideoPlayer);
  return swift_dynamicCast();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

uint64_t static __EntityRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

BOOL static __EntityRef.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t static __SceneRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __SceneImportOperationRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static AssetDescriptorRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __ComponentRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t static __ComponentTypeRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REComponentType);
}

uint64_t __ComponentTypeRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REComponentType);
}

uint64_t static __EngineRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t __EngineClockModeRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __ComponentTypeRef.__as<A>(_:)(a1, a2, type metadata accessor for REEngineClockMode);
}

uint64_t __ComponentTypeRef.__as<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_dynamicCast();
}

uint64_t static __EngineClockModeRef.__fromCore(_:)(uint64_t a1)
{
  return static __ComponentTypeRef.__fromCore(_:)(a1, type metadata accessor for REEngineClockMode);
}

uint64_t static __ComponentTypeRef.__fromCore(_:)(uint64_t a1, void (*a2)(void))
{
  outlined init with copy of Any(a1, (uint64_t)&v4);
  a2(0);
  return swift_dynamicCast();
}

uint64_t __EngineServiceMaskRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __EngineServiceMaskRef.__as<A>(_:)(a1, a2, type metadata accessor for REEngineServiceMask);
}

uint64_t static __EngineServiceMaskRef.__fromCore(_:)(uint64_t a1)
{
  return static __EngineServiceMaskRef.__fromCore(_:)(a1, type metadata accessor for REEngineServiceMask);
}

uint64_t __RenderFlagsRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __EngineServiceMaskRef.__as<A>(_:)(a1, a2, type metadata accessor for RERenderFlags);
}

uint64_t static __RenderFlagsRef.__fromCore(_:)(uint64_t a1)
{
  return static __EngineServiceMaskRef.__fromCore(_:)(a1, type metadata accessor for RERenderFlags);
}

uint64_t __StartupOptionsRef.__as<A>(_:)(uint64_t a1, uint64_t a2)
{
  return __EngineServiceMaskRef.__as<A>(_:)(a1, a2, type metadata accessor for REStartupOptions);
}

uint64_t __EngineServiceMaskRef.__as<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_dynamicCast();
}

uint64_t static __StartupOptionsRef.__fromCore(_:)(uint64_t a1)
{
  return static __EngineServiceMaskRef.__fromCore(_:)(a1, type metadata accessor for REStartupOptions);
}

uint64_t static __EngineServiceMaskRef.__fromCore(_:)(uint64_t a1, void (*a2)(void))
{
  outlined init with copy of Any(a1, (uint64_t)&v4);
  a2(0);
  return swift_dynamicCast();
}

uint64_t __PeerIDRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

uint64_t static __PeerIDRef.__fromCore(_:)(uint64_t a1)
{
  return static __AssetRef.__fromCore(_:)(a1);
}

uint64_t __AABBRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

uint64_t __SRTRef.__as<A>(_:)()
{
  return swift_dynamicCast();
}

double static __SRTRef.__fromCore(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)v7);
  type metadata accessor for RESRT(0);
  swift_dynamicCast();
  double result = *(double *)&v4;
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

uint64_t __AnimationPlaybackTokenRef.core.getter()
{
  return *(void *)v0;
}

uint64_t __AnimationPlaybackTokenRef.core.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*__AnimationPlaybackTokenRef.core.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RemoteVideoPlayer.__as<A>(_:)()
{
  return swift_dynamicCast();
}

ValueMetadata *type metadata accessor for __REECSManagerRef()
{
  return &type metadata for __REECSManagerRef;
}

ValueMetadata *type metadata accessor for __EntityRef()
{
  return &type metadata for __EntityRef;
}

ValueMetadata *type metadata accessor for __SceneRef()
{
  return &type metadata for __SceneRef;
}

ValueMetadata *type metadata accessor for __SceneImportOperationRef()
{
  return &type metadata for __SceneImportOperationRef;
}

ValueMetadata *type metadata accessor for CustomSystemRef()
{
  return &type metadata for CustomSystemRef;
}

ValueMetadata *type metadata accessor for AssetDescriptorRef()
{
  return &type metadata for AssetDescriptorRef;
}

ValueMetadata *type metadata accessor for __ComponentRef()
{
  return &type metadata for __ComponentRef;
}

ValueMetadata *type metadata accessor for __ComponentTypeRef()
{
  return &type metadata for __ComponentTypeRef;
}

ValueMetadata *type metadata accessor for __AssetRef()
{
  return &type metadata for __AssetRef;
}

ValueMetadata *type metadata accessor for __EngineRef()
{
  return &type metadata for __EngineRef;
}

ValueMetadata *type metadata accessor for __EngineClockModeRef()
{
  return &type metadata for __EngineClockModeRef;
}

ValueMetadata *type metadata accessor for __EngineServiceMaskRef()
{
  return &type metadata for __EngineServiceMaskRef;
}

ValueMetadata *type metadata accessor for __RenderFlagsRef()
{
  return &type metadata for __RenderFlagsRef;
}

ValueMetadata *type metadata accessor for __StartupOptionsRef()
{
  return &type metadata for __StartupOptionsRef;
}

ValueMetadata *type metadata accessor for __PeerIDRef()
{
  return &type metadata for __PeerIDRef;
}

ValueMetadata *type metadata accessor for __AABBRef()
{
  return &type metadata for __AABBRef;
}

ValueMetadata *type metadata accessor for __SRTRef()
{
  return &type metadata for __SRTRef;
}

ValueMetadata *type metadata accessor for __AnimationPlaybackTokenRef()
{
  return &type metadata for __AnimationPlaybackTokenRef;
}

ValueMetadata *type metadata accessor for RemoteVideoPlayer()
{
  return &type metadata for RemoteVideoPlayer;
}

Swift::Float __swiftcall convertToDegrees(radians:)(Swift::Float radians)
{
  return (float)(radians * 180.0) / 3.1416;
}

Swift::Float __swiftcall convertToRadians(degrees:)(Swift::Float degrees)
{
  return (float)(degrees * 3.1416) / 180.0;
}

Swift::Int32 __swiftcall log2RoundUp(_:)(Swift::Int32 a1)
{
  double v2 = ceil(log2((double)a1));
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < 2147483650.0) {
    return (int)v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t WorldComponent.init()@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WorldComponent.CoreWorldRoot();
  uint64_t v2 = swift_allocObject();
  uint64_t result = RECreateWorldRoot();
  *(void *)(v2 + 16) = result;
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for WorldComponent.CoreWorldRoot()
{
  return self;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance WorldComponent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = REWorldRootComponentCopyWorldRoot();
  type metadata accessor for WorldComponent.CoreWorldRoot();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  RERetain();
  *a1 = v3;

  return RERelease();
}

uint64_t static WorldComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = REWorldRootComponentCopyWorldRoot();
  type metadata accessor for WorldComponent.CoreWorldRoot();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  RERetain();
  *a1 = v3;

  return RERelease();
}

uint64_t protocol witness for Component.__toCore(_:) in conformance WorldComponent()
{
  REWorldRootComponentSetWorldRoot();

  return RENetworkMarkComponentDirty();
}

uint64_t WorldComponent.__toCore(_:)()
{
  REWorldRootComponentSetWorldRoot();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance WorldComponent(_DWORD *a1@<X8>)
{
  *a1 = 1009;
}

void static WorldComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 1009;
}

uint64_t WorldComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  long long v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x263F8EE78];
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance WorldComponent()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  long long v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[1] = *v0;
  v10[0] = MEMORY[0x263F8EE78];
  uint64_t v8 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

ValueMetadata *type metadata accessor for WorldComponent()
{
  return &type metadata for WorldComponent;
}

uint64_t __RKEmphasisLeanAnimation.deinit()
{
  return v0;
}

uint64_t __RKEmphasisLeanAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisLeanAnimation()
{
  return self;
}

id RERenderManager.device.getter()
{
  RenderDevice = (void *)RERenderManagerGetRenderDevice();

  return RenderDevice;
}

id RERenderManager.commandQueue.getter()
{
  RenderCommandQueue = (void *)RERenderManagerGetRenderCommandQueue();

  return RenderCommandQueue;
}

Swift::UInt32 __swiftcall RERenderManager.registerRenderLayer(_:)(CAMetalLayer a1)
{
  return MEMORY[0x270F1F9E8](*(void *)(v1 + 16), a1.super.super.isa);
}

Swift::Void __swiftcall RERenderManager.unregisterRenderLayer(_:)(Swift::UInt32 a1)
{
  MEMORY[0x270F1FA28](*(void *)(v1 + 16), *(void *)&a1);
}

Swift::Void __swiftcall RERenderManager.setLayerSize(_:_:_:)(Swift::UInt32 a1, Swift::Float a2, Swift::Float a3)
{
  MEMORY[0x270F1FA00](*(void *)(v3 + 16), *(void *)&a1, a2, a3);
}

uint64_t RERenderManager.getLayerSize(_:)(uint64_t a1)
{
  return MEMORY[0x270F1F9B8](*(void *)(v1 + 16), a1);
}

uint64_t RERenderManager.createRenderFrameSettings()()
{
  return RERenderManager.createRenderFrameSettings()(MEMORY[0x263F37310], (void (*)(void))type metadata accessor for RERenderFrameSettings);
}

uint64_t RERenderManager.createRenderFrameWorkload()()
{
  return RERenderManager.createRenderFrameSettings()(MEMORY[0x263F37318], (void (*)(void))type metadata accessor for RERenderFrameWorkload);
}

uint64_t RERenderManager.createRenderFrameSettings()(uint64_t (*a1)(void), void (*a2)(void))
{
  uint64_t v4 = a1(*(void *)(v2 + 16));
  a2(0);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  return result;
}

Swift::Void __swiftcall RERenderManager.waitUntilScheduled()()
{
  MEMORY[0x270F1FA30](*(void *)(v0 + 16));
}

uint64_t RERenderManager.deinit()
{
  return v0;
}

uint64_t RERenderManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

id protocol witness for __RenderService.device.getter in conformance RERenderManager()
{
  RenderDevice = (void *)RERenderManagerGetRenderDevice();

  return RenderDevice;
}

id protocol witness for __RenderService.commandQueue.getter in conformance RERenderManager()
{
  RenderCommandQueue = (void *)RERenderManagerGetRenderCommandQueue();

  return RenderCommandQueue;
}

uint64_t dispatch thunk of __RenderService.device.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RenderService.commandQueue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of __RenderService.__coreRenderManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for RERenderManager()
{
  return self;
}

uint64_t method lookup function for RERenderManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for RERenderManager);
}

uint64_t dispatch thunk of RERenderManager.device.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of RERenderManager.commandQueue.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of RERenderManager.registerRenderLayer(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of RERenderManager.unregisterRenderLayer(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of RERenderManager.setLayerSize(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of RERenderManager.getLayerSize(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameSettings()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameWorkload()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of RERenderManager.waitUntilScheduled()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of RERenderManager.__coreRenderManager.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

double HasTransform.transform.getter()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v0 + 96))(&v3);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  double v1 = v4;
  swift_release();
  outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v5);
  if ((v5[48] & 1) == 0) {
    return v1;
  }
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return *(double *)&static Transform.identity;
}

__n128 HasTransform.convert(transform:from:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v4);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

double HasTransform.transformMatrix(relativeTo:)(uint64_t a1)
{
  type metadata accessor for Entity();
  return static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);
}

uint64_t HasTransform.convert(normal:from:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(normal:from:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(normal:));
}

double HasTransform.orientation(relativeTo:)(uint64_t a1)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  HasTransform.convert(transform:to:)(a1, *(float *)&static Transform.identity, (float32x4_t)xmmword_2681C7AB0, *(double *)&xmmword_2681C7AC0);
  return v2;
}

__n128 HasTransform.scale(relativeTo:)(uint64_t a1)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v4 = result;
    swift_once();
    return v4;
  }
  return result;
}

double static HasTransform.conversionMatrix<A, B>(from:to:)(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2 && a1 == a2)
    {
      *(void *)&double result = 1065353216;
      return result;
    }
    swift_retain();
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RETransformComponentGetWorldMatrix4x4F();
      float32x4_t v21 = v4;
      swift_release();
      if (!a2) {
        goto LABEL_19;
      }
LABEL_12:
      swift_retain();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldMatrix4x4F();
        simd_float4 v19 = v8;
        simd_float4 v20 = v7;
        simd_float4 v17 = v10;
        simd_float4 v18 = v9;
      }
      else
      {
        uint64_t v11 = HasHierarchy.parent.getter();
        if (!v11)
        {
          swift_release();
          simd_float4x4 v16 = *(simd_float4x4 *)zmmword_22830EC90;
          goto LABEL_20;
        }
        *(double *)v12.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
        simd_float4 v19 = v13;
        simd_float4 v20 = v12;
        simd_float4 v17 = v15;
        simd_float4 v18 = v14;
        swift_release();
      }
      swift_release();
      v16.columns[1] = v19;
      v16.columns[0] = v20;
      v16.columns[3] = v17;
      v16.columns[2] = v18;
LABEL_20:
      simd_float4x4 v22 = __invert_f4(v16);
      *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v22.columns[0], v21.f32[0]), (float32x4_t)v22.columns[1], *(float32x2_t *)v21.f32, 1), (float32x4_t)v22.columns[2], v21, 2), (float32x4_t)v22.columns[3], v21, 3).u64[0];
      return result;
    }
    uint64_t v5 = HasHierarchy.parent.getter();
    if (v5)
    {
      *(double *)v6.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v5, 0);
      float32x4_t v21 = v6;
      swift_release();
      swift_release();
      if (a2) {
        goto LABEL_12;
      }
    }
    else
    {
      swift_release();
      float32x4_t v21 = *(float32x4_t *)zmmword_22830EC90;
      if (a2) {
        goto LABEL_12;
      }
    }
LABEL_19:
    simd_float4x4 v16 = *(simd_float4x4 *)zmmword_22830EC90;
    goto LABEL_20;
  }
  *(void *)&double result = 1065353216;
  float32x4_t v21 = *(float32x4_t *)zmmword_22830EC90;
  if (a2) {
    goto LABEL_12;
  }
  return result;
}

uint64_t HasTransform.transform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  v7[0] = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  char v8 = 0;
  float32x4_t v4 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 112))(v6);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v7);
  swift_release();
  return v4(v6, 0);
}

void (*HasTransform.transform.modify(void *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  simd_float4 v7 = malloc(0x48uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&long long v8 = HasTransform.transform.getter();
  *(_OWORD *)simd_float4 v7 = v8;
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  return HasTransform.transform.modify;
}

void HasTransform.transform.modify(__n128 **a1)
{
  uint64_t v1 = *a1;
  HasTransform.transform.setter(**a1, (*a1)[1], (*a1)[2]);

  free(v1);
}

uint64_t HasTransform.scale.setter(__n128 a1)
{
  HasTransform.transform.getter();

  return HasTransform.transform.setter(a1, v1, v2);
}

void (*HasTransform.scale.modify(void *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  simd_float4 v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&long long v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(_OWORD *)simd_float4 v7 = v8;
  return HasTransform.scale.modify;
}

void HasTransform.scale.modify(__n128 **a1)
{
  __n128 v1 = *a1;
  HasTransform.transform.setter(**a1, (*a1)[1], (*a1)[2]);

  free(v1);
}

uint64_t HasTransform.setScale(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  float32x4_t v8 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v4, a2.f32[0]), (float32x4_t)0, v5), (float32x4_t)0, v6), (float32x4_t)0, v7);
  float32x4_t v9 = vmulq_f32(v4, (float32x4_t)0);
  v10.n128_u64[0] = simd_float4x4.scale.getter(v8, (int32x4_t)vmlaq_f32(vmlaq_f32(vmlaq_lane_f32(v9, v5, *(float32x2_t *)a2.f32, 1), (float32x4_t)0, v6), (float32x4_t)0, v7), (int8x16_t)vmlaq_f32(vmlaq_laneq_f32(vmlaq_f32(v9, (float32x4_t)0, v5), v6, a2, 2), (float32x4_t)0, v7)).n64_u64[0];
  __n128 v15 = v10;
  HasTransform.transform.getter();

  return HasTransform.transform.setter(v15, v11, v12);
}

double static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(uint64_t a1, uint64_t a2)
{
  simd_float4x4 v3 = *(simd_float4x4 *)zmmword_22830EC90;
  float32x4_t v11 = *(float32x4_t *)zmmword_22830EC90;
  if (!a1)
  {
LABEL_4:
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  swift_retain();
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetWorldMatrix4x4F();
    float32x4_t v11 = v4;
    swift_release();
    simd_float4x4 v3 = *(simd_float4x4 *)zmmword_22830EC90;
    goto LABEL_4;
  }
  swift_release();
  simd_float4x4 v3 = *(simd_float4x4 *)zmmword_22830EC90;
  float32x4_t v11 = *(float32x4_t *)zmmword_22830EC90;
  if (!a2) {
    goto LABEL_10;
  }
LABEL_5:
  swift_retain();
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetParentWorldMatrix4x4F();
    v10.columns[0] = v5;
    v10.columns[1] = v6;
    v10.columns[2] = v7;
    v10.columns[3] = v8;
    swift_release();
    simd_float4x4 v3 = v10;
  }
  else
  {
    swift_release();
    simd_float4x4 v3 = *(simd_float4x4 *)zmmword_22830EC90;
  }
LABEL_10:
  simd_float4x4 v12 = __invert_f4(v3);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v12.columns[0], v11.f32[0]), (float32x4_t)v12.columns[1], *(float32x2_t *)v11.f32, 1), (float32x4_t)v12.columns[2], v11, 2), (float32x4_t)v12.columns[3], v11, 3).u64[0];
  return result;
}

double HasTransform.position.getter()
{
  HasTransform.transform.getter();
  return v0;
}

uint64_t HasTransform.position.setter(__n128 a1)
{
  v1.n128_f64[0] = HasTransform.transform.getter();

  return HasTransform.transform.setter(v1, v2, a1);
}

void (*HasTransform.position.modify(void *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  simd_float4 v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&long long v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v8;
  *((_OWORD *)v7 + 2) = v9;
  *(_OWORD *)simd_float4 v7 = v10;
  return HasTransform.position.modify;
}

void HasTransform.position.modify(__n128 **a1)
{
  __n128 v1 = *a1;
  HasTransform.transform.setter((*a1)[1], (*a1)[2], **a1);

  free(v1);
}

float32x2_t HasTransform.position(relativeTo:)(uint64_t a1)
{
  type metadata accessor for Entity();
  *(double *)v3.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(v1, a1);

  return simd_float4x4.transform(position:)((float32x4_t)0, v3, v4, v5, v6);
}

uint64_t HasTransform.convert(position:to:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(position:to:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(position:));
}

uint64_t HasTransform.setPosition(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  v8.n128_u64[0] = (unint64_t)simd_float4x4.transform(position:)(a2, v4, v5, v6, v7);
  __n128 v13 = v8;
  v9.n128_f64[0] = HasTransform.transform.getter();

  return HasTransform.transform.setter(v9, v10, v13);
}

double HasTransform.orientation.getter()
{
  HasTransform.transform.getter();
  return v0;
}

uint64_t HasTransform.orientation.setter(__n128 a1)
{
  v1.n128_f64[0] = HasTransform.transform.getter();

  return HasTransform.transform.setter(v1, a1, v2);
}

void (*HasTransform.orientation.modify(void *a1, uint64_t a2, uint64_t a3))(__n128 **a1)
{
  float32x4_t v7 = malloc(0x50uLL);
  *a1 = v7;
  v7[7] = a3;
  v7[8] = v3;
  v7[6] = a2;
  *(double *)&long long v8 = HasTransform.transform.getter();
  *((_OWORD *)v7 + 1) = v8;
  *((_OWORD *)v7 + 2) = v9;
  *(_OWORD *)float32x4_t v7 = v10;
  return HasTransform.orientation.modify;
}

void HasTransform.orientation.modify(__n128 **a1)
{
  __n128 v1 = *a1;
  HasTransform.transform.setter((*a1)[1], **a1, (*a1)[2]);

  free(v1);
}

__n128 HasTransform.convert(transform:to:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v4, a1);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

uint64_t HasTransform.setOrientation(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v2);
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  specialized simd_float4x4.init(translation:rotation:scale:)(0.0, a2, 1.0);
  REMakeSRTFromMatrix();
  __n128 v9 = v4;
  v5.n128_f64[0] = HasTransform.transform.getter();

  return HasTransform.transform.setter(v5, v9, v6);
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  type metadata accessor for Entity();
  *(double *)v7.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v5);
  float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a2.f32[0]), v8, *(float32x2_t *)a2.f32, 1), v9, a2, 2), v10, a2, 3);
  int32x4_t v20 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a3.f32[0]), v8, *(float32x2_t *)a3.f32, 1), v9, a3, 2), v10, a3, 3);
  int8x16_t v18 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a4.f32[0]), v8, *(float32x2_t *)a4.f32, 1), v9, a4, 2), v10, a4, 3);
  float32x4_t v16 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a5.f32[0]), v8, *(float32x2_t *)a5.f32, 1), v9, a5, 2), v10, a5, 3);
  HasTransform.transform.getter();
  __n128 v11 = (__n128)v16;
  v11.n128_u32[3] = 0;
  __n128 v14 = v11;
  REDecomposeMatrix();
  v12.n128_u64[0] = simd_float4x4.scale.getter(v22, v20, v18).n64_u64[0];
  return HasTransform.transform.setter(v12, (__n128)0, v14);
}

uint64_t HasTransform.convert(position:from:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(normal:from:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(position:));
}

uint64_t HasTransform.convert(normal:from:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128))
{
  type metadata accessor for Entity();
  v7.n128_f64[0] = static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v5);

  return a5(a2, v7, v8, v9, v10);
}

double HasTransform.convert(direction:from:)(uint64_t a1, float32x4_t a2)
{
  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v2);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, a2.f32[0]), v5, *(float32x2_t *)a2.f32, 1), v6, a2, 2).u64[0];
  return result;
}

double HasTransform.convert(direction:to:)(uint64_t a1, float32x4_t a2)
{
  type metadata accessor for Entity();
  *(double *)v4.i64 = static HasTransform.conversionMatrix<A, B>(from:to:)(v2, a1);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, a2.f32[0]), v5, *(float32x2_t *)a2.f32, 1), v6, a2, 2).u64[0];
  return result;
}

uint64_t HasTransform.convert(normal:to:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  return HasTransform.convert(position:to:)(a1, a4, a2, a3, (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))simd_float4x4.transform(normal:));
}

uint64_t HasTransform.convert(position:to:)(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(__n128, __n128, __n128, __n128, __n128))
{
  type metadata accessor for Entity();
  v7.n128_f64[0] = static HasTransform.conversionMatrix<A, B>(from:to:)(v5, a1);

  return a5(a2, v7, v8, v9, v10);
}

BOOL HasTransform.isMinusZForward.getter()
{
  if (REEntityGetComponentByClass()) {
    return 0;
  }
  REAmbientLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REAREnvironmentProbeComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  RECustomMatrixCameraComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REDirectionalLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REImageBasedLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  RELightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REListenerComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REOrthographicCameraComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REPerspectiveCameraComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REPointLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  RERectAreaLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REShadowMapComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  RESpotLightComponentGetComponentType();
  if (REEntityGetComponentByClass()) {
    return 1;
  }
  REAudioPlayerComponentGetComponentType();
  return REEntityGetComponentByClass() != 0;
}

uint64_t HasTransform.look(at:from:upVector:relativeTo:)(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  char v5 = 0;
  return HasTransform.look(at:from:upVector:relativeTo:forward:)(a1, &v5, a2, a3, a4);
}

uint64_t HasTransform.look(at:from:upVector:relativeTo:forward:)(uint64_t a1, char *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  char v7 = *a2;
  v8.n128_f64[0] = HasTransform.transform.getter();
  __n128 v46 = v8;
  type metadata accessor for Entity();
  *(double *)v9.i64 = static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v5);
  float32x4_t v51 = v9;
  float32x4_t v53 = v10;
  float32x4_t v56 = v11;
  float32x4_t v47 = v12;
  *(float32x2_t *)v13.f32 = simd_float4x4.transform(position:)(a3, v9, v10, v11, v12);
  float32x4_t v49 = v13;
  *(float32x2_t *)v14.f32 = simd_float4x4.transform(position:)(a4, v51, v53, v56, v47);
  float32x4_t v15 = v14;
  float32x4_t v16 = vsubq_f32(v49, v14);
  float32x4_t v17 = vmulq_f32(v16, v16);
  float v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
  if (v18 >= 1.0e-10)
  {
    float32x4_t v22 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, a5.f32[0]), v53, *(float32x2_t *)a5.f32, 1), v56, a5, 2);
    float v23 = v18;
    float32x2_t v24 = vrsqrte_f32((float32x2_t)LODWORD(v18));
    float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v24, v24)));
    float32x4_t v26 = vmulq_n_f32(v16, vmul_f32(v25, vrsqrts_f32((float32x2_t)LODWORD(v23), vmul_f32(v25, v25))).f32[0]);
    if ((v7 & 1) == 0)
    {
      *(float32x2_t *)v26.f32 = vsub_f32(0, *(float32x2_t *)v26.f32);
      v26.f32[2] = 0.0 - v26.f32[2];
      v26.i32[3] = 0;
    }
    float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL);
    float32x4_t v28 = vmlaq_f32(vmulq_f32(v27, vnegq_f32(v22)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    float32x4_t v29 = vmulq_f32(v28, v28);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), v29)).f32[0] < 1.0e-10)
    {
      float32x4_t v54 = v26;
      float32x4_t v52 = v27;
      HasTransform.transform.getter();
      float32x4_t v31 = v30;
      float32x4_t v32 = vmulq_f32(v30, (float32x4_t)xmmword_22831EFE0);
      int32x4_t v33 = (int32x4_t)vnegq_f32(v32);
      int8x16_t v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
      float32x4_t v35 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
      v35.i32[0] = v33.i32[1];
      v35.i32[3] = v33.i32[2];
      float32x4_t v36 = vmlaq_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), (float32x4_t)0, (float32x4_t)vextq_s8(v34, v34, 8uLL)), (float32x4_t)0, v35);
      int32x4_t v37 = (int32x4_t)vnegq_f32(v36);
      int8x16_t v38 = (int8x16_t)vtrn2q_s32((int32x4_t)v36, vtrn1q_s32((int32x4_t)v36, v37));
      float32x4_t v39 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v37, 8uLL), *(float32x2_t *)v31.f32, 1), (float32x4_t)vextq_s8(v38, v38, 8uLL), v31.f32[0]);
      float32x4_t v40 = (float32x4_t)vrev64q_s32((int32x4_t)v36);
      v40.i32[0] = v37.i32[1];
      v40.i32[3] = v37.i32[2];
      float32x4_t v41 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v36, v31, 3), v40, v31, 2), v39);
      float32x4_t v42 = vmlaq_f32(vmulq_f32(v52, vnegq_f32(v41)), v54, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL));
      float32x4_t v43 = vmulq_f32(v42, v42);
      if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), v43)).f32[0] < 1.0e-10)HasTransform.isMinusZForward.getter(); {
    }
      }
    REMakeSRTFromMatrix();
    if (one-time initialization token for identity != -1)
    {
      __n128 v55 = v21;
      __n128 v58 = v20;
      swift_once();
      __n128 v21 = v55;
      __n128 v20 = v58;
    }
    __n128 v19 = v46;
  }
  else
  {
    __n128 v57 = (__n128)v15;
    v19.n128_f64[0] = HasTransform.transform.getter();
    __n128 v21 = v57;
  }

  return HasTransform.transform.setter(v19, v20, v21);
}

uint64_t HasTransform.move(to:relativeTo:)(uint64_t a1, float a2, float32x4_t a3, double a4)
{
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);

  return HasTransform.move(to:relativeTo:)(a1);
}

uint64_t HasTransform.move(to:relativeTo:)(uint64_t a1)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    __n128 v9 = v3;
    __n128 v7 = v5;
    __n128 v8 = v4;
    swift_once();
    __n128 v5 = v7;
    __n128 v4 = v8;
    __n128 v3 = v9;
  }

  return HasTransform.transform.setter(v3, v4, v5);
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)(uint64_t a1, uint64_t a2, float a3, float32x4_t a4, double a5)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = *(_DWORD *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 20);
  *(double *)v10.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a5, a4, a3);
  v15[0] = v6;
  v15[1] = v7;
  int v16 = v8;
  char v17 = v9;
  return HasTransform.move(to:relativeTo:duration:timingFunction:)(a1, v15, v10, v11, v12, v13);
}

uint64_t HasTransform.move(to:relativeTo:duration:timingFunction:)(uint64_t a1, uint64_t *a2, float32x4_t a3, int32x4_t a4, int8x16_t a5, double a6)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  int v10 = *((_DWORD *)a2 + 4);
  char v11 = *((unsigned char *)a2 + 20);
  *(__n64 *)v12.i8 = simd_float4x4.scale.getter(a3, a4, a5);
  int8x16_t v31 = v12;
  long long v35 = 0u;
  REDecomposeMatrix();
  float32x4_t v15 = 0u;
  if (one-time initialization token for identity != -1)
  {
    swift_once();
    float32x4_t v15 = 0u;
  }
  v13.f32[0] = fabsf(*(float *)v31.i32);
  v14.i64[0] = 0x3400000034000000;
  int8x16_t v16 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v13), 0);
  float32x4_t v17 = (float32x4_t)v31;
  v17.i32[0] = 872415232;
  int8x16_t v18 = vbslq_s8(v16, (int8x16_t)v17, v31);
  v17.f32[0] = fabsf(*(float *)&v18.i32[1]);
  float32x4_t v19 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v17), 0);
  int8x16_t v20 = v18;
  v20.i32[1] = 872415232;
  int8x16_t v21 = vbslq_s8((int8x16_t)v19, v20, v18);
  v19.f32[0] = fabsf(*(float *)&v21.i32[2]);
  int8x16_t v22 = v21;
  v22.i32[2] = 872415232;
  specialized simd_float4x4.init(translation:rotation:scale:)(a6, v15, *(float *)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v19), 0), v22, v21).i32);
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(fromLocalSpaceOf:toParentSpaceOf:)(a1, v6);
  REMakeSRTFromMatrix();
  __n128 v32 = v24;
  __n128 v34 = v23;
  __n128 v30 = v25;
  RETransformComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RETransformComponentGetLocalUnanimatedSRT();
  *(void *)&long long v35 = v8;
  *((void *)&v35 + 1) = v9;
  int v36 = v10;
  char v37 = v11;
  return HasTransform.animateTransform(from:to:duration:timingFunction:)((uint64_t)&v35, v26, v27, v28, v34, v32, v30);
}

uint64_t HasTransform.animateTransform(from:to:duration:timingFunction:)(uint64_t a1, float a2, float32x4_t a3, double a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  int v10 = *(_DWORD *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 20);
  uint64_t v12 = (*(uint64_t (**)(void))(*(void *)v7 + 120))();
  swift_release();
  if (!v12)
  {
    type metadata accessor for AnimationPlaybackController();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    *(void *)(v22 + 16) = 0;
    swift_beginAccess();
    swift_weakAssign();
    return v22;
  }
  HasTransform.transform.getter();
  HasTransform.transform.setter(a5, a6, a7);
  REBindPointCreateReferenceForEntityAnimatedValuesSRT();
  REBindPointSetOverrideEnabled();
  REBindPointSetSRT();
  *(double *)v38.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a7.n128_f64[0], (float32x4_t)a6, a5.n128_f32[0]);
  __invert_f4(v38);
  specialized simd_float4x4.init(translation:rotation:scale:)(a4, a3, a2);
  REMakeSRTFromMatrix();
  long long v34 = v13;
  long long v35 = v14;
  long long v36 = v15;
  RESRTIdentity();
  RETimelineDefinitionCreateFromToBySRTAnimation();
  RETimelineDefinitionSetSRTFromValue();
  RETimelineDefinitionSetSRTToValue();
  RETimelineDefinitionSetDuration();
  RETimelineDefinitionSetTargetPath();
  RETimelineDefinitionSetFillMode();
  RETimelineDefinitionSetAdditive();
  uint64_t v29 = v8;
  uint64_t v30 = v9;
  LODWORD(v31) = v10;
  BYTE4(v31) = v11;
  if (*(void *)(AnimationTimingFunction.coreEasingFunction.getter() + 16)) {
    RETimelineDefinitionSetEasingFunctionEx();
  }
  uint64_t v16 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v16, (uint64_t)&v29);
  uint64_t v17 = v32;
  uint64_t v18 = v33;
  __swift_project_boxed_opaque_existential_1(&v29, v32);
  (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
  uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  REAnimationComponentGetComponentType();
  uint64_t result = REEntityGetOrAddComponentByClass();
  if (TimelineAsset)
  {
    uint64_t v29 = 2;
    LODWORD(v30) = 4352;
    int8x16_t v31 = "SRTFROMTO";
    LOBYTE(v32) = 0;
    uint64_t v21 = REAnimationComponentPlay();
    type metadata accessor for AnimationPlaybackController();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    *(void *)(v22 + 16) = v21;
    swift_beginAccess();
    swift_weakAssign();
    RERelease();
    swift_release();
    RERelease();
    REBindPointDestroy();
    return v22;
  }
  __break(1u);
  return result;
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Entity();
  static HasTransform.conversionMatrix<A, B>(from:to:)(v2, a2);
  return REEntityComputeMeshBounds();
}

void sub_228018D34(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = HasTransform.transform.getter();
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
}

uint64_t sub_228018D64(__n128 *a1)
{
  return HasTransform.transform.setter(*a1, a1[1], a1[2]);
}

uint64_t sub_228018D90()
{
  return 16;
}

__n128 sub_228018D9C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_228018DA8(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = HasTransform.scale.getter();
  *a1 = v2;
}

uint64_t sub_228018DD4(__n128 *a1)
{
  return HasTransform.scale.setter(*a1);
}

uint64_t sub_228018DFC()
{
  return 16;
}

__n128 sub_228018E08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_228018E14(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = HasTransform.position.getter();
  *a1 = v2;
}

uint64_t sub_228018E40(__n128 *a1)
{
  return HasTransform.position.setter(*a1);
}

uint64_t sub_228018E68()
{
  return 16;
}

__n128 sub_228018E74(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_228018E80(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = HasTransform.orientation.getter();
  *a1 = v2;
}

uint64_t sub_228018EAC(__n128 *a1)
{
  return HasTransform.orientation.setter(*a1);
}

uint64_t sub_228018ED4()
{
  return 16;
}

__n128 sub_228018EE0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t __RealityFileARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(a1, a2, a3, a4);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
  else
  {
    uint64_t v13 = result;
    unint64_t v14 = v12;
    id v15 = objc_allocWithZone(MEMORY[0x263EF8FE0]);
    swift_bridgeObjectRetain();
    uint64_t v30 = v13;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v17 = (void *)MEMORY[0x22A688A50](a3, a4);
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(v15, sel_initWithArchiveData_name_error_, isa, v17, 0);

    uint64_t v18 = type metadata accessor for __RealityFileURLResolver();
    outlined init with copy of __REAssetService(v5 + 16, (uint64_t)&v31);
    uint64_t v19 = v33;
    uint64_t v20 = v34;
    uint64_t v21 = __swift_project_boxed_opaque_existential_1(&v31, v33);
    specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v21, v18, v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
    v22._uint64_t countAndFlagsBits = 47;
    v22._object = (void *)0xE100000000000000;
    if (String.hasSuffix(_:)(v22)
      || (uint64_t v23 = 47,
          __n128 v24 = (void *)0xE100000000000000,
          v25._uint64_t countAndFlagsBits = 47,
          v25._object = (void *)0xE100000000000000,
          String.hasPrefix(_:)(v25)))
    {
      uint64_t v23 = 0;
      __n128 v24 = (void *)0xE000000000000000;
    }
    uint64_t v31 = a1;
    uint64_t v32 = a2;
    swift_bridgeObjectRetain();
    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v24;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v27._uint64_t countAndFlagsBits = a3;
    v27._object = a4;
    String.append(_:)(v27);
    swift_release();
    swift_bridgeObjectRelease();
    double v28 = (void *)MEMORY[0x22A688A50](v31, v32);
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_setName_, v28);

    *(void *)(a5 + 24) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARReferenceObject);
    uint64_t result = outlined consume of Data?(v30, v14);
    *(void *)a5 = v29;
  }
  return result;
}

void __RealityFileARReferenceProvidingPlugin.__fetchReferenceImage(group:name:physicalWidth:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (a6 <= 0.0) {
    goto LABEL_9;
  }
  uint64_t v13 = __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(a1, a2, a3, a4);
  if (v14 >> 60 == 15) {
    goto LABEL_9;
  }
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  CGImageRef v17 = specialized static CGImageRef.image(with:)(v13, v14);
  if (!v17)
  {
    outlined consume of Data?(v15, v16);
LABEL_9:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  CGImageRef v31 = v17;
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EF8FD8]), sel_initWithCGImage_orientation_physicalWidth_, v17, 1, a6);
  uint64_t v18 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService(v6 + 16, (uint64_t)&v32);
  uint64_t v19 = v34;
  uint64_t v20 = v35;
  uint64_t v21 = __swift_project_boxed_opaque_existential_1(&v32, v34);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v21, v18, v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  v22._uint64_t countAndFlagsBits = 47;
  v22._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v22)
    || (uint64_t v23 = 47,
        __n128 v24 = (void *)0xE100000000000000,
        v25._uint64_t countAndFlagsBits = 47,
        v25._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v25)))
  {
    uint64_t v23 = 0;
    __n128 v24 = (void *)0xE000000000000000;
  }
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v23;
  v26._object = v24;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = a3;
  v27._object = a4;
  String.append(_:)(v27);
  swift_release();
  swift_bridgeObjectRelease();
  double v28 = (void *)MEMORY[0x22A688A50](v32, v33);
  swift_bridgeObjectRelease();
  objc_msgSend(v30, sel_setName_, v28);

  *(void *)(a5 + 24) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for ARReferenceImage);
  id v29 = v30;
  outlined consume of Data?(v15, v16);

  *(void *)a5 = v29;
}

uint64_t __RealityFileARReferenceProvidingPlugin.arReferenceRawData(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for __RealityFileURLResolver();
  outlined init with copy of __REAssetService(v5 + 16, (uint64_t)&v28);
  uint64_t v11 = v30;
  uint64_t v12 = v31;
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(&v28, v30);
  specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v13, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v14._uint64_t countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v14)
    || (uint64_t v15 = 47,
        unint64_t v16 = (void *)0xE100000000000000,
        v17._uint64_t countAndFlagsBits = 47,
        v17._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v17)))
  {
    uint64_t v15 = 0;
    unint64_t v16 = (void *)0xE000000000000000;
  }
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = v15;
  v18._object = v16;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = a3;
  v19._object = a4;
  String.append(_:)(v19);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v21 = v28;
  uint64_t v20 = v29;
  swift_beginAccess();
  uint64_t v22 = *(void *)(v5 + 72);
  if (!*(void *)(v22 + 16)) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v25 = *(void *)(v22 + 56) + 16 * v23;
  uint64_t v26 = *(void *)v25;
  outlined copy of Data._Representation(*(void *)v25, *(void *)(v25 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t __RealityFileARReferenceProvidingPlugin.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RealityFileARReferenceProvidingPlugin()
{
  return self;
}

uint64_t protocol witness for __ARReferenceProvidingPlugin.schemePrefix.getter in conformance __RealityFileARReferenceProvidingPlugin()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __RealityFileARReferenceProvidingPlugin@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  return __RealityFileARReferenceProvidingPlugin.__fetchReferenceObject(group:name:)(a1, a2, a3, a4, a5);
}

void protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __RealityFileARReferenceProvidingPlugin(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
}

uint64_t EntityAction.isReversible.getter()
{
  return 1;
}

uint64_t ActionEvent.animationState.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(int *)(result + 76);
  uint64_t v5 = v2 + *(int *)(result + 72);
  if (*(unsigned char *)(v5 + 8)) {
    double v6 = -1.0;
  }
  else {
    double v6 = *(double *)v5;
  }
  if (*(unsigned char *)(v2 + v4 + 8)) {
    double v7 = -1.0;
  }
  else {
    double v7 = *(double *)(v2 + v4);
  }
  uint64_t v8 = v2 + *(int *)(result + 68);
  if (*(unsigned char *)(v8 + 8)) {
    double v9 = -1.0;
  }
  else {
    double v9 = *(double *)v8;
  }
  uint64_t v10 = *(void *)(v2 + *(int *)(result + 64));
  if (v10)
  {
    uint64_t result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        uint64_t v11 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(void *)(a2 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        uint64_t v12 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(void *)(a2 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v12, v11);
    uint64_t result = swift_allocObject();
    *(void *)a2 = result;
    *(double *)(result + 16) = v9;
    *(double *)(result + 24) = v6;
    *(double *)(result + 32) = v7;
    *(void *)(result + 40) = v10;
  }
  else
  {
LABEL_13:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_22801985C()
{
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 4uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(void *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionSkipped(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 8uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionPaused(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 0x10uLL);
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance EmphasizeActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 48));
}

uint64_t ActionHandlerProtocol.actionResumed(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 0x20uLL);
}

uint64_t ActionHandlerProtocol.actionTerminated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a2, a3);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t static ActionHandlerProtocol<>.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static ActionHandlerProtocol<>.__register(engine:_:)(0, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t EntityAction.isAdditive.getter()
{
  return 0;
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(void *)(a1 + 216));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 216));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance BillboardActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 216));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance BillboardActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(void *)(a1 + 72));
}

uint64_t ActionHandlerProtocol.actionUpdated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 2uLL);
}

{
  return ActionHandlerProtocol.actionUpdated(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 72));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 72));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance NotificationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 72));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance NotificationActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance PlayAnimationActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance PlayAnimationActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance OrbitEntityActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance OrbitEntityActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance ImpulseActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance ImpulseActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t static ActionHandlerProtocol<>.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__register()(AssociatedTypeWitness, AssociatedConformanceWitness);
  static EntityAction<>.__registerCodable()(AssociatedTypeWitness, AssociatedConformanceWitness, a6, a7, a8, a9);
  return static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for ActionHandlerProtocol.actionStarted(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionStarted(event:)(a1, a2, a3);
}

uint64_t ActionHandlerProtocol.actionStarted(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3, 1uLL);
}

uint64_t ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4)
{
  swift_getAssociatedTypeWitness();
  Swift::UInt v8 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for ActionEvent();
  return static EntityAction.__unsubscribe(from:_:)(&v8, *(void *)(a1 + *(int *)(v6 + 60)));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionEnded(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionSkipped(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionPaused(event:)(a1, a2, a3);
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ActionHandlerProtocol.actionResumed(event:)(a1, a2, a3);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(a1, a2, a3, a4, (void (*)(uint64_t, void, void))type metadata accessor for FromToByAction);
}

uint64_t ActionEventData.parameter<A>(type:)@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of Transform?(v1, (uint64_t)v22, &demangling cache variable for type metadata for Int?);
  outlined init with take of Transform?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for Int?);
  if (v24)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a1, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    outlined init with take of Transform?(v1 + 24, (uint64_t)v21, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
    outlined init with take of Transform?((uint64_t)v21, (uint64_t)v25, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
    if (v25[0])
    {
      uint64_t v5 = v25[4];
      uint64_t v16 = v25[5];
      uint64_t v17 = *(void *)(v1 + 16);
      uint64_t v6 = swift_getAssociatedTypeWitness();
      Swift::String v18 = &v15;
      uint64_t v15 = type metadata accessor for Optional();
      uint64_t v7 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v15);
      double v9 = (char *)&v15 - v8;
      static EntityAction<>.loadParameter<A>(_:parameterType:eventID:)(v5, 0, v5, (uint64_t)&v15 - v8, v14, v16);
      uint64_t v10 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v6) == 1)
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
        long long v20 = 0u;
        long long v19 = 0u;
      }
      else
      {
        *((void *)&v20 + 1) = v6;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
        (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 32))(boxed_opaque_existential_1, v9, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v12 = swift_getAssociatedTypeWitness();
      int v13 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, v13 ^ 1u, 1, v12);
    }
    else
    {
      return static EntityAction.loadParameter(_:eventID:)(0, a1);
    }
  }
}

uint64_t static EntityAction<>.loadParameter<A>(_:parameterType:eventID:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v10 = type metadata accessor for Data.Deallocator();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a3;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  MEMORY[0x270FA5388](v14);
  uint64_t v34 = (char *)&v32 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = AssociatedTypeWitness;
  if (a2)
  {
    Swift::String v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    uint64_t v19 = a4;
    goto LABEL_5;
  }
  uint64_t v32 = a4;
  if (AssociatedTypeWitness != a1)
  {
    Swift::String v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    uint64_t v19 = v32;
LABEL_5:
    return v18(v19, 1, 1, v17);
  }
  uint64_t v21 = a1;
  uint64_t ParameterDataSize = RETimelineEventGetParameterDataSize();
  if (ParameterDataSize >= 1 && (uint64_t v23 = ParameterDataSize, RETimelineEventGetParameterData()))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v24 = v33;
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v13, *MEMORY[0x263F06F00], v10);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v25 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v26 = specialized Data._Representation.init(_:count:)(v25, v23);
    unint64_t v28 = v27;
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v10);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v26, v28);
    swift_release();
    uint64_t v29 = v32;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v29 = v32;
  }
  if (swift_dynamicCast())
  {
    uint64_t v30 = v29;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v30 = v29;
    uint64_t v31 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v30, v31, 1, v21);
}

uint64_t static EntityAction.loadParameter(_:eventID:)@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  if ((a1 & 1) == 0 && (id)RETimelineEventGetSwiftParameter())
  {
    type metadata accessor for EntityActionParameterWrapper();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3)
    {
      uint64_t v4 = v3 + *(void *)(*(void *)v3 + 96);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v4, AssociatedTypeWitness);
      swift_unknownObjectRelease();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      uint64_t v9 = AssociatedTypeWitness;
      goto LABEL_8;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  uint64_t v9 = v10;
  uint64_t v7 = a2;
  uint64_t v8 = 1;
LABEL_8:

  return v6(v7, v8, 1, v9);
}

uint64_t ActionEventData.action<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of Transform?(v2 + 24, (uint64_t)v20, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  outlined init with take of Transform?((uint64_t)v20, (uint64_t)v21, &demangling cache variable for type metadata for (action: @thick EntityAction & Decodable & Encodable.Type, parameter: @thick Decodable & Encodable.Type)?);
  uint64_t v5 = v21[0];
  if (!v21[0]) {
    return static EntityAction.load(_:)(a1, MEMORY[0x263F37578], a2);
  }
  uint64_t v6 = v21[1];
  long long v16 = v22;
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v16 - v10;
  static EntityAction<>.load(_:)(v7, v5, v16, MEMORY[0x263F37550], MEMORY[0x263F37548], (uint64_t)&v16 - v10);
  uint64_t v12 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    long long v18 = 0u;
    memset(v19, 0, 24);
    long long v17 = 0u;
  }
  else
  {
    *((void *)&v18 + 1) = v5;
    *(void *)&v19[0] = v6;
    *(_OWORD *)((char *)v19 + 8) = v16;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v11, v5);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
  int v15 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v15 ^ 1u, 1, a1);
}

uint64_t static EntityAction<>.load(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static EntityAction<>.load(_:)(a1, a2, a3, MEMORY[0x263F37550], MEMORY[0x263F37548], a4);
}

uint64_t EntityActionWrapper.__allocating_init(action:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 96), a1);
  return v2;
}

uint64_t EntityActionWrapper.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96));

  return swift_deallocClassInstance();
}

uint64_t EntityActionParameterWrapper.__allocating_init(parameter:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  EntityActionParameterWrapper.init(parameter:)(a1);
  return v2;
}

uint64_t EntityActionParameterWrapper.init(parameter:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v3, a1, AssociatedTypeWitness);
  return v1;
}

uint64_t EntityActionParameterWrapper.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t EntityActionParameterWrapper.__deallocating_deinit()
{
  EntityActionParameterWrapper.deinit();

  return swift_deallocClassInstance();
}

uint64_t ActionEvent.playbackController.getter()
{
  return swift_retain();
}

uint64_t ActionEvent.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t ActionEvent.targetEntity.getter()
{
  return swift_retain();
}

uint64_t ActionEvent.reversed.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

double ActionEvent.startTime.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 52));
}

double ActionEvent.duration.getter(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 56));
}

__n128 ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, double a10@<D0>, double a11@<D1>, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)a9 = a1;
  uint64_t v26 = (int *)type metadata accessor for ActionEvent();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a19 - 8) + 32))(&a9[v26[9]], a2, a19);
  unint64_t v27 = &a9[v26[10]];
  swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32))(v27, a3, v28);
  *(void *)&a9[v26[11]] = a4;
  a9[v26[12]] = a5;
  *(double *)&a9[v26[13]] = a10;
  *(double *)&a9[v26[14]] = a11;
  *(void *)&a9[v26[15]] = a6;
  *(void *)&a9[v26[16]] = a7;
  uint64_t v29 = &a9[v26[17]];
  *(void *)uint64_t v29 = a8;
  void v29[8] = a12 & 1;
  uint64_t v30 = &a9[v26[18]];
  *(void *)uint64_t v30 = a13;
  v30[8] = a14 & 1;
  uint64_t v31 = &a9[v26[19]];
  *(void *)uint64_t v31 = a15;
  char v31[8] = a16 & 1;
  uint64_t v32 = &a9[v26[20]];
  long long v33 = *(_OWORD *)(a17 + 48);
  *((_OWORD *)v32 + 2) = *(_OWORD *)(a17 + 32);
  *((_OWORD *)v32 + 3) = v33;
  *((_OWORD *)v32 + 4) = *(_OWORD *)(a17 + 64);
  __n128 result = *(__n128 *)(a17 + 16);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)a17;
  *((__n128 *)v32 + 1) = result;
  *(void *)&a9[v26[21]] = a18;
  return result;
}

void static ActionEventType.started.getter(void *a1@<X8>)
{
  *a1 = 1;
}

RealityFoundation::ActionEventType __swiftcall ActionEventType.init(rawValue:)(RealityFoundation::ActionEventType rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ActionEventType.updated.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ActionEventType.ended.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t type metadata accessor for ActionEvent()
{
  return __swift_instantiateGenericMetadata();
}

void static ActionEventType.skipped.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static ActionEventType.paused.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static ActionEventType.resumed.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static ActionEventType.terminated.getter(void *a1@<X8>)
{
  *a1 = 64;
}

uint64_t ActionEventType.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t static ActionHandlerProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static ActionHandlerProtocol.__register(engine:_:)(0, a1, a2, a3, a4);
}

uint64_t static EntityAction.__unsubscribe(from:_:)(Swift::UInt *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::UInt v5 = *a1;
  if (one-time initialization token for actionSubscriptions != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static AnimationResource.actionSubscriptions;
  if (!*(void *)(static AnimationResource.actionSubscriptions + 16)) {
    return swift_endAccess();
  }
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v8 & 1) == 0) {
    return swift_endAccess();
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v11 & 1) != 0))
  {
    uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    swift_bridgeObjectRetain();
    uint64_t v15 = static EntityAction.eventBus(_:)(a2);
    MEMORY[0x22A68E810](v15, v13, v14);
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v17)
    {
      unint64_t v18 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      specialized _NativeDictionary._delete(at:)(v18, v9);
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v9 + 16)) {
      goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    if (*(void *)(v9 + 16))
    {
LABEL_12:
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v3, isUniquelyReferenced_nonNull_native);
      static AnimationResource.actionSubscriptions = v21;
      swift_bridgeObjectRelease();
      return swift_endAccess();
    }
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v3);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t static ActionHandlerProtocol.__register(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__register()(AssociatedTypeWitness, AssociatedConformanceWitness);
  return static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5);
}

uint64_t static EntityAction<>.registerAction()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static EntityAction<>.__registerCodable()(a1, a2, a3, a4, a5, a6);
}

uint64_t static ActionHandlerProtocol.__registerCommon(engine:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static ActionHandlerProtocol.subscribe(_:)(a1, a4, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  if (one-time initialization token for actionHandlerCreators != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (*(void *)(static AnimationResource.actionHandlerCreators + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(AssociatedTypeWitness);
    char v11 = v10;
    swift_endAccess();
    if (v11)
    {
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      strcpy((char *)v19, "Handler for ");
      BYTE5(v19[1]) = 0;
      HIWORD(v19[1]) = -5120;
      swift_getMetatypeMetadata();
      v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._object = (void *)0x8000000228353D40;
      v13._uint64_t countAndFlagsBits = 0xD000000000000014;
      String.append(_:)(v13);
      specialized static AnimationLogger.logError(_:)(v19[0], v19[1]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_endAccess();
  }
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a4;
  v14[3] = a5;
  _OWORD v14[4] = a2;
  void v14[5] = a3;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:);
  *(void *)(v15 + 24) = v14;
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = static AnimationResource.actionHandlerCreators;
  static AnimationResource.actionHandlerCreators = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)_s10RealityKit27AnimationPlaybackControllerC0A10Foundation15ActionEventDataVSbS2dAA8__EngineCSVAA6EntityCSgAD0G15HandlerProtocol_pSgIeggyyyygygr_AcFSbS2dAHSVAkMIegnnnnnnnnr_TRTA_0, v15, AssociatedTypeWitness, isUniquelyReferenced_nonNull_native);
  static AnimationResource.actionHandlerCreators = v18;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t static EntityAction.registerAction()(uint64_t a1, uint64_t a2)
{
  return static EntityAction.__register()(a1, a2);
}

uint64_t static ActionHandlerProtocol.subscribe(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  Swift::UInt v19 = 1;
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a2;
  v9[3] = a3;
  v9[4] = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #1 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 2;
  char v11 = (void *)swift_allocObject();
  _OWORD v11[2] = a2;
  uint64_t v11[3] = a3;
  v11[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #2 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 4;
  Swift::String v12 = (void *)swift_allocObject();
  _OWORD v12[2] = a2;
  void v12[3] = a3;
  v12[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #3 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v12, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 8;
  Swift::String v13 = (void *)swift_allocObject();
  uint64_t v13[2] = a2;
  v13[3] = a3;
  v13[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #4 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v13, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 16;
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  _OWORD v14[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #5 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v14, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 32;
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v15[2] = a2;
  _OWORD v15[3] = a3;
  v15[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #6 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v15, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 64;
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a3;
  void v16[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #7 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v16, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_release();
  Swift::UInt v19 = 128;
  char v17 = (void *)swift_allocObject();
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = v4;
  static EntityAction.__subscribe(to:_:_:)(&v19, a1, (uint64_t)partial apply for closure #8 in static ActionHandlerProtocol.subscribe(_:), (uint64_t)v17, AssociatedTypeWitness, AssociatedConformanceWitness);

  return swift_release();
}

uint64_t creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(char *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>)
{
  uint64_t v44 = a8;
  os_log_type_t v45 = a7;
  uint64_t v42 = a6;
  uint64_t v43 = a4;
  uint64_t v40 = a5;
  uint64_t v41 = a1;
  int v39 = a3;
  uint64_t v46 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v36 = (uint64_t)&v35 - v16;
  uint64_t v17 = type metadata accessor for ActionEvent();
  uint64_t v37 = *(void *)(v17 - 8);
  uint64_t v38 = v17;
  MEMORY[0x270FA5388](v17);
  Swift::UInt v19 = (char *)&v35 - v18;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v35 - v22;
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v25);
  unint64_t v27 = (char *)&v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v35 - v29;
  ActionEventData.action<A>()(AssociatedTypeWitness, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v23, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v32 = (_OWORD *)v46;
    *(void *)(v46 + 32) = 0;
    *uint64_t v32 = 0u;
    v32[1] = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v30, v23, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v30, AssociatedTypeWitness);
    uint64_t v33 = v41;
    swift_retain();
    uint64_t v34 = v36;
    ActionEventData.parameter<A>(type:)(v36);
    ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v33, (uint64_t)v27, v34, v42, v39 & 1, v43, 0, 0, v19, a10, a11, 1, 0, 1, 0, 1, a2, v40, AssociatedTypeWitness);
    swift_retain();
    swift_retain();
    v45(v19);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, AssociatedTypeWitness);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed AnimationPlaybackController, @unowned ActionEventData, @unowned Bool, @unowned Double, @unowned Double, @guaranteed __Engine, @unowned UnsafeRawPointer, @guaranteed Entity?) -> (@out ActionHandlerProtocol?)(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, void *a6, void *a7, void *a8, uint64_t (*a9)(uint64_t, _OWORD *, void, void, void, void, double, double))
{
  uint64_t v9 = *a1;
  long long v10 = a2[3];
  uint64_t v13[2] = a2[2];
  v13[3] = v10;
  v13[4] = a2[4];
  long long v11 = a2[1];
  v13[0] = *a2;
  v13[1] = v11;
  return a9(v9, v13, *a3, *a6, *a7, *a8, *a4, *a5);
}

uint64_t static ActionHandlerProtocol.actionHandler(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (*v19)(void *__return_ptr, uint64_t *, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  long long v40;
  long long v41;
  long long v42;
  uint64_t v43;
  uint64_t v44;
  void v45[5];
  _OWORD v46[2];
  uint64_t v47;

  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  unint64_t v7 = (int *)type metadata accessor for ActionEvent();
  uint64_t v8 = v7[21];
  uint64_t v9 = *(void *)((char *)a1 + v8);
  swift_beginAccess();
  uint64_t v10 = static AnimationResource.actionHandlers;
  if (*(void *)(static AnimationResource.actionHandlers + 16)
    && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9), (v12 & 1) != 0))
  {
    outlined init with copy of __REAssetService(*(void *)(v10 + 56) + 40 * v11, (uint64_t)v46);
  }
  else
  {
    float32x4_t v47 = 0;
    memset(v46, 0, sizeof(v46));
  }
  swift_endAccess();
  outlined init with copy of ActionHandlerProtocol?((uint64_t)v46, (uint64_t)&v37);
  uint64_t v13 = v40;
  outlined destroy of ActionHandlerProtocol?((uint64_t)&v37);
  if (v13) {
    goto LABEL_8;
  }
  if (one-time initialization token for actionHandlerCreators != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v16 = static AnimationResource.actionHandlerCreators;
  if (*(void *)(static AnimationResource.actionHandlerCreators + 16))
  {
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(AssociatedTypeWitness);
    if (v18)
    {
      Swift::UInt v19 = *(void (**)(void *__return_ptr, uint64_t *, uint64_t *, char *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)(v16 + 56) + 16 * v17);
      swift_endAccess();
      uint64_t v20 = *a1;
      uint64_t v21 = (char *)a1 + v7[20];
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = v21[8];
      uint64_t v24 = *((void *)v21 + 2);
      uint64_t v25 = *(void *)((char *)a1 + v7[13]);
      uint64_t v26 = *((unsigned char *)a1 + v7[12]);
      unint64_t v27 = *(void *)((char *)a1 + v7[14]);
      uint64_t v28 = *(void *)((char *)a1 + v7[15]);
      uint64_t v29 = *(void *)((char *)a1 + v8);
      uint64_t v30 = *(void *)((char *)a1 + v7[11]);
      uint64_t v43 = *((void *)v21 + 9);
      uint64_t v44 = v20;
      uint64_t v37 = v22;
      uint64_t v38 = v23;
      int v39 = v24;
      uint64_t v40 = *(_OWORD *)(v21 + 24);
      uint64_t v41 = *(_OWORD *)(v21 + 40);
      uint64_t v42 = *(_OWORD *)(v21 + 56);
      uint64_t v36 = v26;
      uint64_t v34 = v27;
      uint64_t v35 = v25;
      uint64_t v32 = v29;
      uint64_t v33 = v28;
      uint64_t v31 = v30;
      swift_retain();
      v19(v45, &v44, &v37, &v36, &v35, &v34, &v33, &v32, &v31);
      swift_release();
      outlined destroy of ActionHandlerProtocol?((uint64_t)v46);
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v46, &demangling cache variable for type metadata for ActionHandlerProtocol?);
LABEL_8:
      outlined init with take of Transform?((uint64_t)v46, (uint64_t)&v37, &demangling cache variable for type metadata for ActionHandlerProtocol?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
      int v14 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v14 ^ 1u, 1, a2);
    }
  }
  swift_endAccess();
  outlined destroy of ActionHandlerProtocol?((uint64_t)v46);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
}

uint64_t closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  int v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 24))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t static EntityAction.__subscribe(to:_:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  Swift::UInt v13 = *a1;
  if (!a2)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
  }
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_release();
  uint64_t v36 = a4;
  _typeName(_:qualified:)();
  switch(v13)
  {
    case 1uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 2uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 3uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
      goto LABEL_23;
    case 4uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 8uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x10uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x20uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    case 0x40uLL:
      specialized getEventID<A>(_:)();
      goto LABEL_13;
    default:
      if (v13 != 128) {
        goto LABEL_23;
      }
      specialized getEventID<A>(_:)();
LABEL_13:
      uint64_t v15 = a3;
      if (one-time initialization token for actionSubscriptions != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v16 = static AnimationResource.actionSubscriptions;
      if (*(void *)(static AnimationResource.actionSubscriptions + 16)
        && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7), (v18 & 1) != 0))
      {
        unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
        swift_endAccess();
        swift_bridgeObjectRetain();
      }
      else
      {
        swift_endAccess();
        unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x263F8EE78]);
      }
      uint64_t v35 = v7;
      if (*(void *)(v19 + 16))
      {
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
        if (v21)
        {
          uint64_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v20);
          uint64_t v23 = *v22;
          uint64_t v24 = v22[1];
          uint64_t v25 = static EntityAction.eventBus(_:)(a2);
          MEMORY[0x22A68E810](v25, v23, v24);
        }
      }
      static EntityAction.eventBus(_:)(a2);
      uint64_t v26 = (void *)swift_allocObject();
      v26[2] = a5;
      _OWORD v26[3] = a6;
      v26[4] = v14;
      v26[5] = v13;
      v26[6] = v15;
      v26[7] = v36;
      aBlock[4] = partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned UnsafeRawPointer) -> (@unowned REEventHandlerResult);
      void aBlock[3] = &block_descriptor_15;
      unint64_t v27 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      RETimelineEventFilter();
      swift_release();
      uint64_t v28 = REEventBusSubscribeWithMatch();
      uint64_t v30 = v29;
      _Block_release(v27);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v19;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, v13, isUniquelyReferenced_nonNull_native);
      uint64_t v32 = aBlock[0];
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v37 = static AnimationResource.actionSubscriptions;
      static AnimationResource.actionSubscriptions = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v35, v33);
      static AnimationResource.actionSubscriptions = v37;
      swift_bridgeObjectRelease();
      swift_endAccess();
LABEL_23:
      swift_release();
      return swift_bridgeObjectRelease();
  }
}

uint64_t closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 32))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 40))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 48))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 56))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v18[-v9];
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v14, v10, a3);
  (*(void (**)(void *, uint64_t, uint64_t))(a4 + 64))(a1, a3, a4);
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  void v19[3] = a3;
  v19[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v14, a3);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v19, v16);
  swift_endAccess();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, a3);
}

uint64_t closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v18 - v9 + 16;
  uint64_t v11 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v10, a3);
    (*(void (**)(void *, uint64_t, uint64_t))(a4 + 72))(a1, a3, a4);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a3);
  }
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v18, v15);
  return swift_endAccess();
}

uint64_t closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v15 - v9;
  if (one-time initialization token for actionHandlers != -1) {
    swift_once();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = *(void *)((char *)a1 + *(int *)(type metadata accessor for ActionEvent() + 84));
  static ActionHandlerProtocol.actionHandler(_:)(a1, a3, (uint64_t)v10);
  uint64_t v12 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
  }
  else
  {
    *((void *)&v17 + 1) = a3;
    uint64_t v18 = a4;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 32))(boxed_opaque_existential_1, v10, a3);
  }
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v16, v11);
  return swift_endAccess();
}

uint64_t static EntityAction.__register()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _typeName(_:qualified:)();
  uint64_t v6 = v5;
  if (one-time initialization token for actionTypeMap != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static AnimationResource.actionTypeMap;
  if (!*(void *)(static AnimationResource.actionTypeMap + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, (uint64_t)v6);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_endAccess();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = static AnimationResource.actionTypeMap;
    static AnimationResource.actionTypeMap = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
    static AnimationResource.actionTypeMap = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  long long v15 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((void)v15 == a1) {
    return swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = v4;
  v12._object = v6;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v13._object = (void *)0x8000000228355E70;
  String.append(_:)(v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityAction.Type);
  v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static EntityAction.subscribe(to:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::UInt v9 = *a1;
  static EntityAction.__register()(a4, a5);
  Swift::UInt v11 = v9;
  return static EntityAction.__subscribe(to:_:_:)(&v11, 0, a2, a3, a4, a5);
}

uint64_t static EntityAction.unsubscribe(from:)(Swift::UInt *a1)
{
  Swift::UInt v2 = *a1;
  return static EntityAction.__unsubscribe(from:_:)(&v2, 0);
}

uint64_t static EntityAction.unsubscribeAll()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for actionSubscriptions != -1) {
LABEL_33:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v2 = static AnimationResource.actionSubscriptions;
  if (!*(void *)(static AnimationResource.actionSubscriptions + 16)) {
    return swift_endAccess();
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  if ((v4 & 1) == 0) {
    return swift_endAccess();
  }
  uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t result = MEMORY[0x22A692280](*(void *)(v6 + 16));
  if (result)
  {
    uint64_t v8 = result;
    int64_t v9 = 0;
    uint64_t v10 = v5 + 64;
    uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v12 = -1;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    while (1)
    {
      if (v13)
      {
        unint64_t v15 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v16 = v15 | (v9 << 6);
      }
      else
      {
        int64_t v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v17 >= v14) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v10 + 8 * v17);
        ++v9;
        if (!v18)
        {
          int64_t v9 = v17 + 1;
          if (v17 + 1 >= v14) {
            goto LABEL_26;
          }
          unint64_t v18 = *(void *)(v10 + 8 * v9);
          if (!v18)
          {
            int64_t v9 = v17 + 2;
            if (v17 + 2 >= v14) {
              goto LABEL_26;
            }
            unint64_t v18 = *(void *)(v10 + 8 * v9);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v14)
              {
LABEL_26:
                swift_release();
                swift_beginAccess();
                unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
                if (v21)
                {
                  unint64_t v22 = v20;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v24 = static AnimationResource.actionSubscriptions;
                  uint64_t v25 = static AnimationResource.actionSubscriptions;
                  static AnimationResource.actionSubscriptions = 0x8000000000000000;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    uint64_t v24 = v25;
                  }
                  specialized _NativeDictionary._delete(at:)(v22, v24);
                  static AnimationResource.actionSubscriptions = v24;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                return swift_endAccess();
              }
              unint64_t v18 = *(void *)(v10 + 8 * v19);
              if (!v18)
              {
                while (1)
                {
                  int64_t v9 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_32;
                  }
                  if (v9 >= v14) {
                    goto LABEL_26;
                  }
                  unint64_t v18 = *(void *)(v10 + 8 * v9);
                  ++v19;
                  if (v18) {
                    goto LABEL_24;
                  }
                }
              }
              int64_t v9 = v19;
            }
          }
        }
LABEL_24:
        unint64_t v13 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      MEMORY[0x22A68E810](v8, *(void *)(*(void *)(v5 + 56) + 16 * v16), *(void *)(*(void *)(v5 + 56) + 16 * v16 + 8));
    }
  }
  __break(1u);
  return result;
}

uint64_t static EntityAction<>.__registerCodable()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = _typeName(_:qualified:)();
  int64_t v14 = v13;
  if (one-time initialization token for codableActionTypeMap != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static AnimationResource.codableActionTypeMap;
  if (!*(void *)(static AnimationResource.codableActionTypeMap + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v12, (uint64_t)v14);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_endAccess();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = static AnimationResource.codableActionTypeMap;
    static AnimationResource.codableActionTypeMap = 0x8000000000000000;
    v26[0] = a1;
    v26[1] = a2;
    v26[2] = a3;
    _OWORD v26[3] = a4;
    v26[4] = AssociatedTypeWitness;
    v26[5] = a5;
    v26[6] = a6;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v12, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
    static AnimationResource.codableActionTypeMap = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  long long v24 = *(_OWORD *)(*(void *)(v15 + 56) + 56 * v16);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if ((void)v24 == a1) {
    return swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v12;
  v21._object = v14;
  String.append(_:)(v21);
  v22._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v22._object = (void *)0x8000000228355E70;
  String.append(_:)(v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type));
  v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t static EntityAction<>.subscribe(to:_:)(Swift::UInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Swift::UInt v16 = *a1;
  static EntityAction.__register()(a4, a5);
  static EntityAction<>.__registerCodable()(a4, a5, a6, a7, a8, a9);
  Swift::UInt v18 = v16;
  return static EntityAction.__subscribe(to:_:_:)(&v18, 0, a2, a3, a4, a5);
}

uint64_t static EntityAction<>.load(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Data.Deallocator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a4(a1);
  if (v16 >= 1 && (uint64_t v17 = v16, a5(a1)))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    v24[2] = JSONDecoder.init()();
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x263F06F00], v12);
    Data.Deallocator._deallocator.getter();
    v24[1] = a3;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v18 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v19 = specialized Data._Representation.init(_:count:)(v18, v17);
    unint64_t v21 = v20;
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v19, v21);
    swift_release();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a6, 0, 1, a2);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    Swift::String v22 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v22(a6, 0, 1, a2);
  }
}

uint64_t static EntityAction<>.loadParameterFromTimeline<A>(_:parameterType:eventID:)@<X0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X5>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a6;
  uint64_t v10 = type metadata accessor for Data.Deallocator();
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a3;
  MEMORY[0x270FA5388](v13);
  MEMORY[0x270FA5388](v14);
  uint64_t v34 = (char *)&v32 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = AssociatedTypeWitness;
  if (a2)
  {
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    uint64_t v19 = a4;
    goto LABEL_5;
  }
  uint64_t v32 = a4;
  if (AssociatedTypeWitness != a1)
  {
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);
    uint64_t v19 = v32;
LABEL_5:
    return v18(v19, 1, 1, v17);
  }
  uint64_t v21 = a1;
  Eventuint64_t ParameterDataSize = RETimelineDefinitionEventTimelineGetEventParameterDataSize();
  if (EventParameterDataSize >= 1
    && (uint64_t v23 = EventParameterDataSize, RETimelineDefinitionEventTimelineGetEventParameterData()))
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v24 = v33;
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v12, *MEMORY[0x263F06F00], v10);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v25 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v26 = specialized Data._Representation.init(_:count:)(v25, v23);
    unint64_t v28 = v27;
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v10);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v26, v28);
    swift_release();
    uint64_t v29 = v32;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v29 = v32;
  }
  if (swift_dynamicCast())
  {
    uint64_t v30 = v29;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v30 = v29;
    uint64_t v31 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v30, v31, 1, v21);
}

uint64_t static EntityAction.makeActionAnimation(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_retain();

  return ActionAnimation.init(_:)(a1, a2);
}

uint64_t ActionAnimation.init(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ActionDefinition();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (void *)((char *)v20 - v6);
  uint64_t v8 = a2 + *(int *)(type metadata accessor for ActionAnimation() + 40);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v21 = *(void (**)(void))(v9 + 56);
  uint64_t v22 = v8;
  v20[1] = v9 + 56;
  v21();
  type metadata accessor for TimelineDefinition();
  uint64_t v10 = swift_allocObject();
  swift_retain_n();
  int v11 = REAssetHandleAssetType();
  if (v11 != 11)
  {
    if (v11 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
  uint64_t result = swift_release();
  if (!RootTimeline) {
    goto LABEL_19;
  }
LABEL_5:
  uint64_t v14 = RETimelineDefinitionCreateFromTimeline();
  swift_release();
  *(void *)(v10 + 16) = v14;
  v20[0] = v5;
  if (!v14)
  {
    swift_retain();
    unint64_t v17 = 0xE000000000000000;
LABEL_11:
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = 0;
    char v31 = 1;
    char v30 = 1;
    char v29 = 1;
    char v28 = 1;
    char v27 = 1;
    char v26 = 1;
    char v25 = 0;
    unsigned __int8 v24 = 0;
    *(void *)a2 = 0;
    *(_WORD *)(a2 + 8) = 256;
    *(void *)(a2 + 16) = 0;
    *(_WORD *)(a2 + 24) = 256;
    *(void *)(a2 + 32) = 0;
    *(_WORD *)(a2 + 40) = 256;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 56) = 1;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 1;
    *(_DWORD *)(a2 + 76) = 0;
    *(_WORD *)(a2 + 80) = 1025;
    *(void *)(a2 + 88) = v10;
    *(void *)(a2 + 96) = v14;
    *(void *)(a2 + 104) = v17;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(unsigned char *)(a2 + 128) = -1;
    *(_DWORD *)(a2 + 132) = 0;
    *(unsigned char *)(a2 + 136) = v25;
    *(unsigned char *)(a2 + 137) = 0;
    *(_WORD *)(a2 + 138) = v24;
    *(void *)(a2 + 144) = v19;
    uint64_t v16 = v10;
    uint64_t ClipSourceRef = *(void *)(v10 + 16);
    goto LABEL_12;
  }
  if (RETimelineDefinitionGetTimelineType() != 2)
  {
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v14 = String.init(cString:)();
    unint64_t v17 = v18;
    goto LABEL_11;
  }
  char v31 = 1;
  char v30 = 1;
  char v29 = 1;
  char v28 = 1;
  char v27 = 1;
  char v26 = 1;
  char v25 = 1;
  unsigned __int8 v24 = 1;
  *(void *)a2 = 0;
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 256;
  *(void *)(a2 + 32) = 0;
  *(_WORD *)(a2 + 40) = 256;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  *(_DWORD *)(a2 + 76) = 0;
  *(unsigned char *)(a2 + 80) = v26;
  *(unsigned char *)(a2 + 81) = 4;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(unsigned char *)(a2 + 128) = -1;
  *(_DWORD *)(a2 + 132) = 0;
  *(unsigned char *)(a2 + 136) = v25;
  *(unsigned char *)(a2 + 137) = 0;
  *(unsigned char *)(a2 + 138) = v24;
  *(unsigned char *)(a2 + 139) = 2;
  *(void *)(a2 + 144) = v10;
  swift_retain();
  uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
  uint64_t v16 = swift_allocObject();
  if (ClipSourceRef)
  {
    *(void *)(v16 + 16) = ClipSourceRef;
    RERetain();
    RERelease();
  }
  else
  {
    *(void *)(v16 + 16) = 0;
  }
LABEL_12:
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(unsigned char *)(a2 + 184) = -1;
  *(void *)(a2 + 188) = 0x201000100000000;
  *(void *)(a2 + 200) = v16;
  if (ClipSourceRef)
  {
    swift_retain();
    ActionDefinition.init(fromCore:)(ClipSourceRef, a1, v7);
    swift_release();
    swift_release();
    ((void (*)(void *, void, uint64_t, uint64_t))v21)(v7, 0, 1, v4);
    return (*(uint64_t (**)(uint64_t, void *, void))(v23 + 40))(v22, v7, v20[0]);
  }
  else
  {
    swift_retain();
    swift_release();
    return swift_release();
  }
}

uint64_t static EntityAction.load(_:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  if ((id)a2())
  {
    type metadata accessor for EntityActionWrapper();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      uint64_t v10 = *(void *)(a1 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a3, v5 + *(void *)(*(void *)v5 + 96), a1);
      swift_unknownObjectRelease();
      uint64_t v6 = v10;
      uint64_t v7 = 0;
      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = 1;
LABEL_6:
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);

  return v8(a3, v7, 1, a1);
}

uint64_t static EntityAction.loadParameterFromTimeline(_:eventID:)@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  if ((a1 & 1) == 0
    && (id)RETimelineDefinitionEventTimelineGetEventSwiftParameter())
  {
    type metadata accessor for EntityActionParameterWrapper();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3)
    {
      uint64_t v4 = v3 + *(void *)(*(void *)v3 + 96);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, v4, AssociatedTypeWitness);
      swift_unknownObjectRelease();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      uint64_t v9 = AssociatedTypeWitness;
      goto LABEL_8;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  uint64_t v9 = v10;
  uint64_t v7 = a2;
  uint64_t v8 = 1;
LABEL_8:

  return v6(v7, v8, 1, v9);
}

uint64_t dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v403 = a6;
  v404 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v402 = (uint64_t)&v386 - v13;
  uint64_t v408 = a8;
  uint64_t v406 = type metadata accessor for ActionEvent();
  uint64_t v407 = *(void *)(v406 - 8);
  MEMORY[0x270FA5388](v406);
  v405 = (char *)&v386 - v14;
  uint64_t v399 = type metadata accessor for Optional();
  uint64_t v400 = *(void *)(v399 - 8);
  MEMORY[0x270FA5388](v399);
  v396 = (char *)&v386 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  v397 = (char *)&v386 - v17;
  MEMORY[0x270FA5388](v18);
  unint64_t v20 = (char *)&v386 - v19;
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v386 - v22;
  MEMORY[0x270FA5388](v24);
  char v26 = (char *)&v386 - v25;
  MEMORY[0x270FA5388](v27);
  char v29 = (char *)&v386 - v28;
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)&v386 - v31;
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v386 - v34;
  uint64_t v410 = a7;
  uint64_t v409 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v389 = (uint64_t)&v386 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v395 = (uint64_t)&v386 - v39;
  MEMORY[0x270FA5388](v40);
  uint64_t v394 = (uint64_t)&v386 - v41;
  MEMORY[0x270FA5388](v42);
  uint64_t v392 = (uint64_t)&v386 - v43;
  MEMORY[0x270FA5388](v44);
  uint64_t v393 = (uint64_t)&v386 - v45;
  MEMORY[0x270FA5388](v46);
  uint64_t v391 = (uint64_t)&v386 - v47;
  MEMORY[0x270FA5388](v48);
  uint64_t v390 = (uint64_t)&v386 - v49;
  MEMORY[0x270FA5388](v50);
  v401 = (char *)&v386 - v51;
  MEMORY[0x270FA5388](v52);
  float32x4_t v54 = (char *)&v386 - v53;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    specialized static AnimationLogger.logError(_:)(0xD00000000000002FLL, 0x8000000228353DB0);
    return 1;
  }
  uint64_t v56 = Strong;
  switch(a4)
  {
    case 1:
      uint64_t v388 = Strong;
      uint64_t v57 = *(void *)a2;
      uint64_t v58 = *(void *)(a2 + 8);
      v396 = *(char **)(a2 + 32);
      v397 = *(char **)(a2 + 40);
      uint64_t v59 = *(void *)(a2 + 56);
      uint64_t v393 = *(void *)(a2 + 48);
      uint64_t v60 = *(void *)(a2 + 64);
      float v61 = *(float *)(a2 + 72);
      float v62 = *(float *)(a2 + 76);
      int v63 = *(unsigned __int8 *)(a2 + 80);
      uint64_t v64 = *(void *)(a2 + 88);
      uint64_t v392 = *(void *)(a2 + 96);
      id v65 = (id)REEntityGetSwiftObject();
      uint64_t AssociatedTypeWitness = v60;
      if (v65)
      {
        type metadata accessor for Entity();
        uint64_t v66 = swift_dynamicCastClassUnconditional();
        goto LABEL_5;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v135 = specialized static Entity.entityInfoType(_:)();
        if (v135)
        {
          uint64_t v136 = (*(uint64_t (**)(void))(v135 + 232))();
          uint64_t v137 = *(void *)(v136 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v137, 0);
          *(void *)(v136 + 16) = v57;
          uint64_t v138 = v57;
          uint64_t v67 = v136;
          MEMORY[0x22A68E750](v138, v136);
          swift_release();
LABEL_33:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v139 = swift_allocObject();
          swift_weakInit();
          uint64_t v394 = v139;
          *(void *)(v139 + 16) = v58;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v140 = String.init(cString:)();
          uint64_t v142 = v141;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v143 = static AnimationResource.codableActionTypeMap;
          uint64_t v144 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v391 = v59;
          LODWORD(v390) = v63;
          uint64_t v389 = v64;
          uint64_t v395 = v67;
          if (v144)
          {
            swift_bridgeObjectRetain();
            unint64_t v145 = specialized __RawDictionaryStorage.find<A>(_:)(v140, v142);
            if (v146)
            {
              unint64_t v147 = (uint64_t *)(*(void *)(v143 + 56) + 56 * v145);
              uint64_t v148 = *v147;
              uint64_t v149 = v147[1];
              uint64_t v151 = v147[2];
              uint64_t v150 = v147[3];
              uint64_t v153 = v147[4];
              uint64_t v152 = v147[5];
              uint64_t v154 = v147[6];
              swift_bridgeObjectRelease();
LABEL_88:
              swift_endAccess();
              swift_bridgeObjectRelease();
              uint64_t v411 = (uint64_t)v396;
              char v412 = 0;
              uint64_t v413 = (uint64_t)v397;
              uint64_t v414 = v148;
              uint64_t v415 = v149;
              uint64_t v416 = v151;
              uint64_t v417 = v150;
              uint64_t v418 = v153;
              uint64_t v419 = v152;
              uint64_t v420 = v154;
              if (!AssociatedTypeWitness)
              {
                uint64_t v265 = 0;
                uint64_t v260 = v410;
                uint64_t v261 = v409;
                uint64_t v262 = v388;
                goto LABEL_174;
              }
              uint64_t v259 = REBindPointBoundComponent();
              uint64_t v260 = v410;
              uint64_t v261 = v409;
              uint64_t v262 = v388;
              if (!v259)
              {
                uint64_t v265 = 0;
                goto LABEL_174;
              }
              uint64_t Entity = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v264 = swift_dynamicCastClassUnconditional();
LABEL_92:
                uint64_t v265 = v264;
                goto LABEL_174;
              }
              if ((REEntityIsBeingDestroyed() & 1) == 0)
              {
                uint64_t v343 = specialized static Entity.entityInfoType(_:)();
                if (!v343)
                {
                  uint64_t v264 = makeEntity(for:)(Entity);
                  goto LABEL_92;
                }
                uint64_t v265 = (*(uint64_t (**)(void))(v343 + 232))();
                uint64_t v344 = *(void *)(v265 + 16);
                swift_retain();
                MEMORY[0x22A68E750](v344, 0);
                *(void *)(v265 + 16) = Entity;
                MEMORY[0x22A68E750](Entity, v265);
                swift_release();
LABEL_174:
                ActionEventData.action<A>()(v260, (uint64_t)v35);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v261 + 48))(v35, 1, v260) == 1)
                {
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v400 + 8))(v35, v399);
                }
                else
                {
                  (*(void (**)(char *, char *, uint64_t))(v261 + 32))(v54, v35, v260);
                  uint64_t v345 = (uint64_t)v401;
                  (*(void (**)(char *, char *, uint64_t))(v261 + 16))(v401, v54, v260);
                  uint64_t v346 = v394;
                  swift_retain();
                  uint64_t v347 = v402;
                  ActionEventData.parameter<A>(type:)(v402);
                  v348 = v405;
                  ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v346, v345, v347, v265, v390, v262, v391, 0xBFF0000000000000, v405, v61, v62, 0, v389, 0, v392, 0, (uint64_t)&v411, v393, v260);
                  swift_retain();
                  swift_retain();
                  v404(v348);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v407 + 8))(v348, v406);
                  (*(void (**)(char *, uint64_t))(v261 + 8))(v54, v260);
                }
                return 0;
              }
              goto LABEL_238;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v148 = 0;
          uint64_t v149 = 0;
          uint64_t v151 = 0;
          uint64_t v150 = 0;
          uint64_t v153 = 0;
          uint64_t v152 = 0;
          uint64_t v154 = 0;
          goto LABEL_88;
        }
        uint64_t v66 = makeEntity(for:)(v57);
LABEL_5:
        uint64_t v67 = v66;
        goto LABEL_33;
      }
      __break(1u);
      goto LABEL_230;
    case 2:
      uint64_t v76 = *(void *)a2;
      uint64_t v77 = *(void *)(a2 + 8);
      v396 = *(char **)(a2 + 32);
      v397 = *(char **)(a2 + 40);
      uint64_t v393 = *(void *)(a2 + 48);
      float v78 = *(float *)(a2 + 56);
      uint64_t v80 = *(void *)(a2 + 64);
      uint64_t v79 = *(void *)(a2 + 72);
      uint64_t v81 = *(void *)(a2 + 88);
      uint64_t v392 = *(void *)(a2 + 80);
      float v82 = *(float *)(a2 + 96);
      float v83 = *(float *)(a2 + 100);
      int v84 = *(unsigned __int8 *)(a2 + 104);
      id v85 = (id)REEntityGetSwiftObject();
      uint64_t AssociatedTypeWitness = v81;
      if (v85)
      {
        type metadata accessor for Entity();
        uint64_t v86 = swift_dynamicCastClassUnconditional();
        goto LABEL_14;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v155 = specialized static Entity.entityInfoType(_:)();
        if (v155)
        {
          uint64_t v156 = (*(uint64_t (**)(void))(v155 + 232))();
          uint64_t v157 = *(void *)(v156 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v157, 0);
          *(void *)(v156 + 16) = v76;
          uint64_t v158 = v76;
          uint64_t v87 = v156;
          MEMORY[0x22A68E750](v158, v156);
          swift_release();
LABEL_41:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v159 = swift_allocObject();
          swift_weakInit();
          uint64_t v394 = v159;
          *(void *)(v159 + 16) = v77;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v160 = String.init(cString:)();
          uint64_t v162 = v161;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          uint64_t v395 = v87;
          swift_beginAccess();
          uint64_t v163 = static AnimationResource.codableActionTypeMap;
          uint64_t v164 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v391 = v79;
          LODWORD(v389) = v84;
          uint64_t v387 = v80;
          uint64_t v165 = v56;
          if (v164)
          {
            swift_bridgeObjectRetain();
            unint64_t v166 = specialized __RawDictionaryStorage.find<A>(_:)(v160, v162);
            if (v167)
            {
              unint64_t v168 = (uint64_t *)(*(void *)(v163 + 56) + 56 * v166);
              uint64_t v169 = *v168;
              uint64_t v170 = v168[1];
              uint64_t v172 = v168[2];
              uint64_t v171 = v168[3];
              uint64_t v173 = v168[4];
              uint64_t v174 = v168[5];
              uint64_t v175 = v168[6];
              swift_bridgeObjectRelease();
              goto LABEL_96;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v169 = 0;
          uint64_t v170 = 0;
          uint64_t v172 = 0;
          uint64_t v171 = 0;
          uint64_t v173 = 0;
          uint64_t v174 = 0;
          uint64_t v175 = 0;
LABEL_96:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = (uint64_t)v396;
          char v412 = 0;
          uint64_t v413 = (uint64_t)v397;
          uint64_t v414 = v169;
          uint64_t v415 = v170;
          uint64_t v416 = v172;
          uint64_t v417 = v171;
          uint64_t v418 = v173;
          uint64_t v419 = v174;
          uint64_t v420 = v175;
          if (AssociatedTypeWitness)
          {
            uint64_t v266 = REBindPointBoundComponent();
            uint64_t v267 = v410;
            uint64_t v268 = v409;
            if (v266)
            {
              uint64_t v269 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v270 = swift_dynamicCastClassUnconditional();
LABEL_100:
                uint64_t v271 = v270;
                goto LABEL_180;
              }
              if (REEntityIsBeingDestroyed())
              {
LABEL_239:
                __break(1u);
                goto LABEL_240;
              }
              uint64_t v349 = specialized static Entity.entityInfoType(_:)();
              if (!v349)
              {
                uint64_t v270 = makeEntity(for:)(v269);
                goto LABEL_100;
              }
              uint64_t v271 = (*(uint64_t (**)(void))(v349 + 232))();
              uint64_t v350 = *(void *)(v271 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v350, 0);
              *(void *)(v271 + 16) = v269;
              MEMORY[0x22A68E750](v269, v271);
              swift_release();
            }
            else
            {
              uint64_t v271 = 0;
            }
          }
          else
          {
            uint64_t v271 = 0;
            uint64_t v267 = v410;
            uint64_t v268 = v409;
          }
LABEL_180:
          ActionEventData.action<A>()(v267, (uint64_t)v32);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v268 + 48))(v32, 1, v267) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v400 + 8))(v32, v399);
          }
          else
          {
            uint64_t v351 = v390;
            (*(void (**)(uint64_t, char *, uint64_t))(v268 + 32))(v390, v32, v267);
            uint64_t v352 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, uint64_t))(v268 + 16))(v401, v351, v267);
            uint64_t v353 = v394;
            swift_retain();
            uint64_t v354 = v165;
            uint64_t v355 = v402;
            ActionEventData.parameter<A>(type:)(v402);
            v356 = v405;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v353, v352, v355, v271, v389, v354, v391, COERCE__INT64(v78), v405, v82, v83, 0, v393, 0, v387, 0, (uint64_t)&v411, v392, v267);
            swift_retain();
            swift_retain();
            v404(v356);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v407 + 8))(v356, v406);
            (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v351, v267);
          }
          return 0;
        }
        uint64_t v86 = makeEntity(for:)(v76);
LABEL_14:
        uint64_t v87 = v86;
        goto LABEL_41;
      }
LABEL_230:
      __break(1u);
      goto LABEL_231;
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
      goto LABEL_11;
    case 4:
      uint64_t v88 = *(void *)a2;
      uint64_t v89 = *(void *)(a2 + 8);
      v396 = *(char **)(a2 + 32);
      uint64_t v90 = *(void *)(a2 + 48);
      v397 = *(char **)(a2 + 40);
      uint64_t v91 = *(void *)(a2 + 56);
      uint64_t v92 = *(void *)(a2 + 64);
      float v93 = *(float *)(a2 + 72);
      float v94 = *(float *)(a2 + 76);
      int v95 = *(unsigned __int8 *)(a2 + 80);
      id v96 = (id)REEntityGetSwiftObject();
      uint64_t AssociatedTypeWitness = v92;
      if (v96)
      {
        type metadata accessor for Entity();
        uint64_t v97 = swift_dynamicCastClassUnconditional();
        goto LABEL_17;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v176 = specialized static Entity.entityInfoType(_:)();
        if (v176)
        {
          uint64_t v98 = (*(uint64_t (**)(void))(v176 + 232))();
          uint64_t v177 = *(void *)(v98 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v177, 0);
          *(void *)(v98 + 16) = v88;
          MEMORY[0x22A68E750](v88, v98);
          swift_release();
LABEL_49:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v178 = swift_allocObject();
          swift_weakInit();
          uint64_t v394 = v178;
          *(void *)(v178 + 16) = v89;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v179 = String.init(cString:)();
          uint64_t v181 = v180;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v182 = static AnimationResource.codableActionTypeMap;
          uint64_t v183 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v393 = v91;
          LODWORD(v392) = v95;
          uint64_t v390 = v90;
          uint64_t v395 = v98;
          uint64_t v184 = v56;
          if (v183)
          {
            swift_bridgeObjectRetain();
            unint64_t v185 = specialized __RawDictionaryStorage.find<A>(_:)(v179, v181);
            if (v186)
            {
              uint64_t v187 = (uint64_t *)(*(void *)(v182 + 56) + 56 * v185);
              uint64_t v188 = *v187;
              uint64_t v189 = v187[1];
              uint64_t v191 = v187[2];
              uint64_t v190 = v187[3];
              uint64_t v192 = v187[4];
              uint64_t v193 = v187[5];
              uint64_t v194 = v187[6];
              swift_bridgeObjectRelease();
              goto LABEL_104;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v188 = 0;
          uint64_t v189 = 0;
          uint64_t v191 = 0;
          uint64_t v190 = 0;
          uint64_t v192 = 0;
          uint64_t v193 = 0;
          uint64_t v194 = 0;
LABEL_104:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = (uint64_t)v396;
          char v412 = 0;
          uint64_t v413 = (uint64_t)v397;
          uint64_t v414 = v188;
          uint64_t v415 = v189;
          uint64_t v416 = v191;
          uint64_t v417 = v190;
          uint64_t v418 = v192;
          uint64_t v419 = v193;
          uint64_t v420 = v194;
          if (AssociatedTypeWitness)
          {
            uint64_t v272 = REBindPointBoundComponent();
            uint64_t v273 = v410;
            uint64_t v274 = v409;
            if (v272)
            {
              uint64_t v275 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v276 = swift_dynamicCastClassUnconditional();
LABEL_108:
                uint64_t v277 = v276;
                goto LABEL_186;
              }
              if (REEntityIsBeingDestroyed())
              {
LABEL_240:
                __break(1u);
                goto LABEL_241;
              }
              uint64_t v357 = specialized static Entity.entityInfoType(_:)();
              if (!v357)
              {
                uint64_t v276 = makeEntity(for:)(v275);
                goto LABEL_108;
              }
              uint64_t v277 = (*(uint64_t (**)(void))(v357 + 232))();
              uint64_t v358 = *(void *)(v277 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v358, 0);
              *(void *)(v277 + 16) = v275;
              MEMORY[0x22A68E750](v275, v277);
              swift_release();
            }
            else
            {
              uint64_t v277 = 0;
            }
          }
          else
          {
            uint64_t v277 = 0;
            uint64_t v273 = v410;
            uint64_t v274 = v409;
          }
LABEL_186:
          ActionEventData.action<A>()(v273, (uint64_t)v29);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v274 + 48))(v29, 1, v273) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v400 + 8))(v29, v399);
          }
          else
          {
            uint64_t v359 = v391;
            (*(void (**)(uint64_t, char *, uint64_t))(v274 + 32))(v391, v29, v273);
            uint64_t v360 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, uint64_t))(v274 + 16))(v401, v359, v273);
            uint64_t v361 = v184;
            uint64_t v362 = v394;
            swift_retain();
            uint64_t v363 = v402;
            ActionEventData.parameter<A>(type:)(v402);
            v364 = v405;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v362, v360, v363, v277, v392, v361, v393, 0xBFF0000000000000, v405, v93, v94, 0, 0xBFF0000000000000, 0, 0xBFF0000000000000, 0, (uint64_t)&v411, v390, v273);
            swift_retain();
            swift_retain();
            v404(v364);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v407 + 8))(v364, v406);
            (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v359, v273);
          }
          return 0;
        }
        uint64_t v97 = makeEntity(for:)(v88);
LABEL_17:
        uint64_t v98 = v97;
        goto LABEL_49;
      }
LABEL_231:
      __break(1u);
      goto LABEL_232;
    case 8:
      uint64_t v99 = *(void *)a2;
      uint64_t v100 = *(void *)(a2 + 8);
      v396 = *(char **)(a2 + 32);
      v397 = *(char **)(a2 + 40);
      uint64_t v101 = *(void *)(a2 + 56);
      uint64_t v392 = *(void *)(a2 + 48);
      float v102 = *(float *)(a2 + 64);
      float v103 = *(float *)(a2 + 68);
      int v104 = *(unsigned __int8 *)(a2 + 72);
      uint64_t v105 = *(void *)(a2 + 80);
      uint64_t v106 = *(void *)(a2 + 88);
      id v107 = (id)REEntityGetSwiftObject();
      uint64_t AssociatedTypeWitness = v101;
      if (v107)
      {
        type metadata accessor for Entity();
        uint64_t v108 = swift_dynamicCastClassUnconditional();
        goto LABEL_20;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v195 = specialized static Entity.entityInfoType(_:)();
        if (v195)
        {
          uint64_t v196 = (*(uint64_t (**)(void))(v195 + 232))();
          uint64_t v197 = *(void *)(v196 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v197, 0);
          *(void *)(v196 + 16) = v99;
          uint64_t v198 = v99;
          uint64_t v109 = v196;
          MEMORY[0x22A68E750](v198, v196);
          swift_release();
LABEL_57:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v199 = swift_allocObject();
          swift_weakInit();
          uint64_t v394 = v199;
          *(void *)(v199 + 16) = v100;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v200 = String.init(cString:)();
          uint64_t v202 = v201;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          uint64_t v395 = v109;
          swift_beginAccess();
          uint64_t v203 = static AnimationResource.codableActionTypeMap;
          uint64_t v204 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          LODWORD(v391) = v104;
          uint64_t v390 = v105;
          uint64_t v389 = v106;
          uint64_t v205 = v56;
          if (v204)
          {
            swift_bridgeObjectRetain();
            unint64_t v206 = specialized __RawDictionaryStorage.find<A>(_:)(v200, v202);
            if (v207)
            {
              v208 = (uint64_t *)(*(void *)(v203 + 56) + 56 * v206);
              uint64_t v209 = *v208;
              uint64_t v210 = v208[1];
              uint64_t v211 = v208[2];
              uint64_t v212 = v208[3];
              uint64_t v214 = v208[4];
              uint64_t v213 = v208[5];
              uint64_t v215 = v208[6];
              swift_bridgeObjectRelease();
              goto LABEL_112;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v209 = 0;
          uint64_t v210 = 0;
          uint64_t v211 = 0;
          uint64_t v212 = 0;
          uint64_t v214 = 0;
          uint64_t v213 = 0;
          uint64_t v215 = 0;
LABEL_112:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = (uint64_t)v396;
          char v412 = 0;
          uint64_t v413 = (uint64_t)v397;
          uint64_t v414 = v209;
          uint64_t v415 = v210;
          uint64_t v416 = v211;
          uint64_t v417 = v212;
          uint64_t v418 = v214;
          uint64_t v419 = v213;
          uint64_t v420 = v215;
          if (AssociatedTypeWitness)
          {
            uint64_t v278 = REBindPointBoundComponent();
            uint64_t v279 = v410;
            uint64_t v280 = v409;
            if (v278)
            {
              uint64_t v281 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v282 = swift_dynamicCastClassUnconditional();
LABEL_116:
                uint64_t v283 = v282;
                goto LABEL_192;
              }
              if (REEntityIsBeingDestroyed())
              {
LABEL_241:
                __break(1u);
                goto LABEL_242;
              }
              uint64_t v365 = specialized static Entity.entityInfoType(_:)();
              if (!v365)
              {
                uint64_t v282 = makeEntity(for:)(v281);
                goto LABEL_116;
              }
              uint64_t v283 = (*(uint64_t (**)(void))(v365 + 232))();
              uint64_t v366 = *(void *)(v283 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v366, 0);
              *(void *)(v283 + 16) = v281;
              MEMORY[0x22A68E750](v281, v283);
              swift_release();
            }
            else
            {
              uint64_t v283 = 0;
            }
          }
          else
          {
            uint64_t v283 = 0;
            uint64_t v279 = v410;
            uint64_t v280 = v409;
          }
LABEL_192:
          ActionEventData.action<A>()(v279, (uint64_t)v26);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v280 + 48))(v26, 1, v279) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v400 + 8))(v26, v399);
          }
          else
          {
            uint64_t v367 = v393;
            (*(void (**)(uint64_t, char *, uint64_t))(v280 + 32))(v393, v26, v279);
            uint64_t v368 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v401, v367, v279);
            uint64_t v369 = v205;
            uint64_t v370 = v394;
            swift_retain();
            uint64_t v371 = v402;
            ActionEventData.parameter<A>(type:)(v402);
            v372 = v405;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v370, v368, v371, v283, v391, v369, 0, 0, v405, v102, v103, 1, v390, 0, v389, 0, (uint64_t)&v411, v392, v279);
            swift_retain();
            swift_retain();
            v404(v372);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v407 + 8))(v372, v406);
            (*(void (**)(uint64_t, uint64_t))(v280 + 8))(v367, v279);
          }
          return 0;
        }
        uint64_t v108 = makeEntity(for:)(v99);
LABEL_20:
        uint64_t v109 = v108;
        goto LABEL_57;
      }
LABEL_232:
      __break(1u);
      goto LABEL_233;
    case 16:
      uint64_t v110 = *(void *)a2;
      uint64_t v111 = *(void *)(a2 + 8);
      uint64_t v112 = *(void *)(a2 + 32);
      uint64_t v114 = *(void *)(a2 + 40);
      uint64_t v113 = *(void *)(a2 + 48);
      uint64_t v115 = *(void *)(a2 + 56);
      id v116 = (id)REEntityGetSwiftObject();
      v397 = (char *)v115;
      if (v116)
      {
        type metadata accessor for Entity();
        uint64_t v117 = swift_dynamicCastClassUnconditional();
        goto LABEL_23;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v216 = specialized static Entity.entityInfoType(_:)();
        if (v216)
        {
          uint64_t v118 = (*(uint64_t (**)(void))(v216 + 232))();
          uint64_t v217 = *(void *)(v118 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v217, 0);
          *(void *)(v118 + 16) = v110;
          MEMORY[0x22A68E750](v110, v118);
          swift_release();
LABEL_65:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v218 = swift_allocObject();
          swift_weakInit();
          uint64_t v395 = v218;
          *(void *)(v218 + 16) = v111;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v219 = String.init(cString:)();
          uint64_t v221 = v220;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v222 = static AnimationResource.codableActionTypeMap;
          uint64_t v223 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v388 = v56;
          uint64_t v394 = v112;
          uint64_t v393 = v113;
          v396 = (char *)v118;
          uint64_t v224 = v114;
          if (v223)
          {
            swift_bridgeObjectRetain();
            unint64_t v225 = specialized __RawDictionaryStorage.find<A>(_:)(v219, v221);
            if (v226)
            {
              v227 = (uint64_t *)(*(void *)(v222 + 56) + 56 * v225);
              uint64_t v228 = *v227;
              uint64_t v229 = v227[1];
              uint64_t v230 = v227[2];
              uint64_t v231 = v227[3];
              uint64_t v233 = v227[4];
              uint64_t v232 = v227[5];
              uint64_t v234 = v227[6];
              swift_bridgeObjectRelease();
              goto LABEL_120;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v228 = 0;
          uint64_t v229 = 0;
          uint64_t v230 = 0;
          uint64_t v231 = 0;
          uint64_t v233 = 0;
          uint64_t v232 = 0;
          uint64_t v234 = 0;
LABEL_120:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = 0;
          char v412 = 0;
          uint64_t v413 = v224;
          uint64_t v414 = v228;
          uint64_t v415 = v229;
          uint64_t v416 = v230;
          uint64_t v417 = v231;
          uint64_t v418 = v233;
          uint64_t v419 = v232;
          uint64_t v420 = v234;
          if (v397)
          {
            uint64_t v284 = REBindPointBoundComponent();
            uint64_t v285 = v410;
            uint64_t v286 = v409;
            uint64_t v287 = v388;
            if (v284)
            {
              uint64_t v288 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v289 = swift_dynamicCastClassUnconditional();
LABEL_124:
                uint64_t v290 = v289;
                goto LABEL_198;
              }
              if (REEntityIsBeingDestroyed())
              {
LABEL_242:
                __break(1u);
                goto LABEL_243;
              }
              uint64_t v373 = specialized static Entity.entityInfoType(_:)();
              if (!v373)
              {
                uint64_t v289 = makeEntity(for:)(v288);
                goto LABEL_124;
              }
              uint64_t v290 = (*(uint64_t (**)(void))(v373 + 232))();
              uint64_t v374 = *(void *)(v290 + 16);
              swift_retain();
              MEMORY[0x22A68E750](v374, 0);
              *(void *)(v290 + 16) = v288;
              MEMORY[0x22A68E750](v288, v290);
              swift_release();
            }
            else
            {
              uint64_t v290 = 0;
            }
          }
          else
          {
            uint64_t v290 = 0;
            uint64_t v285 = v410;
            uint64_t v286 = v409;
            uint64_t v287 = v388;
          }
LABEL_198:
          ActionEventData.action<A>()(v285, (uint64_t)v23);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v286 + 48))(v23, 1, v285) == 1)
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v400 + 8))(v23, v399);
          }
          else
          {
            uint64_t v375 = v392;
            (*(void (**)(uint64_t, char *, uint64_t))(v286 + 32))(v392, v23, v285);
            uint64_t v376 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, uint64_t))(v286 + 16))(v401, v375, v285);
            uint64_t v377 = v402;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v402, 1, 1);
            v378 = v405;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v395, v376, v377, v290, 0, v287, 0, 0, v405, 0.0, 0.0, 1, v394, 0, 0, 1, (uint64_t)&v411, v393, v285);
            swift_retain();
            swift_retain();
            v404(v378);
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, uint64_t))(v407 + 8))(v378, v406);
            (*(void (**)(uint64_t, uint64_t))(v286 + 8))(v375, v285);
          }
          return 0;
        }
        uint64_t v117 = makeEntity(for:)(v110);
LABEL_23:
        uint64_t v118 = v117;
        goto LABEL_65;
      }
LABEL_233:
      __break(1u);
      goto LABEL_234;
    case 32:
      uint64_t v119 = *(void *)a2;
      uint64_t v120 = *(void *)(a2 + 8);
      uint64_t v121 = *(void *)(a2 + 32);
      uint64_t v123 = *(void *)(a2 + 40);
      uint64_t v122 = *(void *)(a2 + 48);
      uint64_t v124 = *(void *)(a2 + 56);
      id v125 = (id)REEntityGetSwiftObject();
      v397 = (char *)v124;
      if (v125)
      {
        type metadata accessor for Entity();
        uint64_t v126 = swift_dynamicCastClassUnconditional();
        goto LABEL_26;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v235 = specialized static Entity.entityInfoType(_:)();
        if (v235)
        {
          uint64_t v127 = (*(uint64_t (**)(void))(v235 + 232))();
          uint64_t v236 = *(void *)(v127 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v236, 0);
          *(void *)(v127 + 16) = v119;
          MEMORY[0x22A68E750](v119, v127);
          swift_release();
LABEL_73:
          type metadata accessor for AnimationPlaybackController();
          uint64_t v237 = swift_allocObject();
          swift_weakInit();
          uint64_t v395 = v237;
          *(void *)(v237 + 16) = v120;
          swift_beginAccess();
          swift_weakAssign();
          uint64_t v238 = String.init(cString:)();
          uint64_t v240 = v239;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v241 = static AnimationResource.codableActionTypeMap;
          uint64_t v242 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v388 = v56;
          uint64_t v393 = v121;
          uint64_t v392 = v122;
          v396 = (char *)v127;
          uint64_t v243 = v123;
          if (v242)
          {
            swift_bridgeObjectRetain();
            unint64_t v244 = specialized __RawDictionaryStorage.find<A>(_:)(v238, v240);
            if (v245)
            {
              v246 = (uint64_t *)(*(void *)(v241 + 56) + 56 * v244);
              uint64_t v247 = *v246;
              uint64_t v248 = v246[1];
              uint64_t v249 = v246[2];
              uint64_t v250 = v246[3];
              uint64_t v252 = v246[4];
              uint64_t v251 = v246[5];
              uint64_t v253 = v246[6];
              swift_bridgeObjectRelease();
              goto LABEL_128;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v247 = 0;
          uint64_t v248 = 0;
          uint64_t v249 = 0;
          uint64_t v250 = 0;
          uint64_t v252 = 0;
          uint64_t v251 = 0;
          uint64_t v253 = 0;
LABEL_128:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = 0;
          char v412 = 0;
          uint64_t v413 = v243;
          uint64_t v414 = v247;
          uint64_t v415 = v248;
          uint64_t v416 = v249;
          uint64_t v417 = v250;
          uint64_t v418 = v252;
          uint64_t v419 = v251;
          uint64_t v420 = v253;
          if (v397)
          {
            uint64_t v291 = REBindPointBoundComponent();
            uint64_t v292 = v410;
            uint64_t v293 = v409;
            uint64_t v294 = v388;
            if (v291)
            {
              uint64_t v295 = REComponentGetEntity();
              if ((id)REEntityGetSwiftObject())
              {
                type metadata accessor for Entity();
                uint64_t v296 = swift_dynamicCastClassUnconditional();
              }
              else
              {
                if (REEntityIsBeingDestroyed())
                {
LABEL_243:
                  __break(1u);
                  goto LABEL_244;
                }
                uint64_t v379 = specialized static Entity.entityInfoType(_:)();
                if (v379)
                {
                  uint64_t v297 = (*(uint64_t (**)(void))(v379 + 232))();
                  uint64_t v380 = *(void *)(v297 + 16);
                  swift_retain();
                  MEMORY[0x22A68E750](v380, 0);
                  *(void *)(v297 + 16) = v295;
                  MEMORY[0x22A68E750](v295, v297);
                  swift_release();
                  goto LABEL_204;
                }
                uint64_t v296 = makeEntity(for:)(v295);
              }
              uint64_t v297 = v296;
            }
            else
            {
              uint64_t v297 = 0;
            }
          }
          else
          {
            uint64_t v297 = 0;
            uint64_t v292 = v410;
            uint64_t v293 = v409;
            uint64_t v294 = v388;
          }
LABEL_204:
          ActionEventData.action<A>()(v292, (uint64_t)v20);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v293 + 48))(v20, 1, v292) == 1) {
            goto LABEL_205;
          }
          uint64_t v319 = v394;
          (*(void (**)(uint64_t, char *, uint64_t))(v293 + 32))(v394, v20, v292);
          uint64_t v381 = (uint64_t)v401;
          (*(void (**)(char *, uint64_t, uint64_t))(v293 + 16))(v401, v319, v292);
          uint64_t v382 = v402;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v402, 1, 1);
          v322 = v405;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v395, v381, v382, v297, 0, v294, 0, 0, v405, 0.0, 0.0, 1, v393, 0, 0, 1, (uint64_t)&v411, v392, v292);
          swift_retain();
          swift_retain();
          v404(v322);
          swift_release();
          goto LABEL_207;
        }
        uint64_t v126 = makeEntity(for:)(v119);
LABEL_26:
        uint64_t v127 = v126;
        goto LABEL_73;
      }
LABEL_234:
      __break(1u);
      goto LABEL_235;
    case 64:
      uint64_t v128 = *(void *)a2;
      uint64_t v129 = *(void *)(a2 + 8);
      uint64_t v130 = *(void *)(a2 + 24);
      uint64_t v132 = *(void *)(a2 + 32);
      uint64_t v131 = *(void *)(a2 + 40);
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        uint64_t v133 = swift_dynamicCastClassUnconditional();
        goto LABEL_29;
      }
      if ((REEntityIsBeingDestroyed() & 1) == 0)
      {
        uint64_t v254 = specialized static Entity.entityInfoType(_:)();
        if (v254)
        {
          uint64_t v134 = (*(uint64_t (**)(void))(v254 + 232))();
          uint64_t v255 = *(void *)(v134 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v255, 0);
          *(void *)(v134 + 16) = v128;
          MEMORY[0x22A68E750](v128, v134);
          swift_release();
          goto LABEL_81;
        }
        uint64_t v133 = makeEntity(for:)(v128);
LABEL_29:
        uint64_t v134 = v133;
LABEL_81:
        type metadata accessor for AnimationPlaybackController();
        uint64_t v256 = swift_allocObject();
        swift_weakInit();
        *(void *)(v256 + 16) = v129;
        swift_beginAccess();
        swift_weakAssign();
        if (!v131) {
          goto LABEL_162;
        }
        if (!REBindPointBoundComponent())
        {
          uint64_t v131 = 0;
          goto LABEL_162;
        }
        uint64_t v257 = REComponentGetEntity();
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          uint64_t v258 = swift_dynamicCastClassUnconditional();
LABEL_85:
          uint64_t v131 = v258;
          goto LABEL_162;
        }
        if ((REEntityIsBeingDestroyed() & 1) == 0)
        {
          uint64_t v323 = specialized static Entity.entityInfoType(_:)();
          if (!v323)
          {
            uint64_t v258 = makeEntity(for:)(v257);
            goto LABEL_85;
          }
          uint64_t v131 = (*(uint64_t (**)(void))(v323 + 232))();
          uint64_t v324 = *(void *)(v131 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v324, 0);
          *(void *)(v131 + 16) = v257;
          MEMORY[0x22A68E750](v257, v131);
          swift_release();
LABEL_162:
          uint64_t v325 = String.init(cString:)();
          uint64_t v327 = v326;
          if (one-time initialization token for codableActionTypeMap != -1) {
            swift_once();
          }
          swift_beginAccess();
          uint64_t v328 = static AnimationResource.codableActionTypeMap;
          uint64_t v329 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
          uint64_t v388 = v56;
          uint64_t v393 = v132;
          v396 = (char *)v134;
          uint64_t v394 = v256;
          uint64_t v330 = v130;
          if (v329)
          {
            swift_bridgeObjectRetain();
            unint64_t v331 = specialized __RawDictionaryStorage.find<A>(_:)(v325, v327);
            if (v332)
            {
              v333 = (uint64_t *)(*(void *)(v328 + 56) + 56 * v331);
              uint64_t v334 = *v333;
              uint64_t v335 = v333[1];
              uint64_t v336 = v333[2];
              uint64_t v337 = v333[3];
              uint64_t v338 = v333[4];
              uint64_t v339 = v333[5];
              uint64_t v340 = v333[6];
              swift_bridgeObjectRelease();
              goto LABEL_169;
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v334 = 0;
          uint64_t v335 = 0;
          uint64_t v336 = 0;
          uint64_t v337 = 0;
          uint64_t v338 = 0;
          uint64_t v339 = 0;
          uint64_t v340 = 0;
LABEL_169:
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v411 = 0;
          char v412 = 0;
          uint64_t v413 = v330;
          uint64_t v414 = v334;
          uint64_t v415 = v335;
          uint64_t v416 = v336;
          uint64_t v417 = v337;
          uint64_t v418 = v338;
          uint64_t v419 = v339;
          uint64_t v420 = v340;
          unint64_t v20 = v397;
          uint64_t v292 = v410;
          ActionEventData.action<A>()(v410, (uint64_t)v397);
          uint64_t v293 = v409;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v409 + 48))(v20, 1, v292) != 1)
          {
            uint64_t v319 = v395;
            (*(void (**)(uint64_t, char *, uint64_t))(v293 + 32))(v395, v20, v292);
            uint64_t v341 = (uint64_t)v401;
            (*(void (**)(char *, uint64_t, uint64_t))(v293 + 16))(v401, v319, v292);
            uint64_t v342 = v402;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v402, 1, 1);
            v322 = v405;
            ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v394, v341, v342, v131, 0, v388, 0, 0, v405, 0.0, 0.0, 1, 0, 1, 0, 1, (uint64_t)&v411, v393, v292);
            swift_retain();
            swift_retain();
            v404(v322);
            swift_release();
LABEL_207:
            swift_release();
            goto LABEL_208;
          }
LABEL_205:
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v400 + 8))(v20, v399);
          return 0;
        }
LABEL_237:
        __break(1u);
LABEL_238:
        __break(1u);
        goto LABEL_239;
      }
LABEL_235:
      __break(1u);
      goto LABEL_236;
    default:
      if (a4 == 128)
      {
        uint64_t v69 = *(void *)a2;
        uint64_t v70 = *(void *)(a2 + 8);
        uint64_t v71 = *(void *)(a2 + 24);
        uint64_t v73 = *(void *)(a2 + 32);
        uint64_t v72 = *(void *)(a2 + 40);
        if ((id)REEntityGetSwiftObject())
        {
          type metadata accessor for Entity();
          uint64_t v74 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          if (REEntityIsBeingDestroyed())
          {
LABEL_236:
            __break(1u);
            goto LABEL_237;
          }
          uint64_t v298 = specialized static Entity.entityInfoType(_:)();
          if (v298)
          {
            uint64_t v75 = (*(uint64_t (**)(void))(v298 + 232))();
            uint64_t v299 = *(void *)(v75 + 16);
            swift_retain();
            MEMORY[0x22A68E750](v299, 0);
            *(void *)(v75 + 16) = v69;
            MEMORY[0x22A68E750](v69, v75);
            swift_release();
            goto LABEL_137;
          }
          uint64_t v74 = makeEntity(for:)(v69);
        }
        uint64_t v75 = v74;
LABEL_137:
        type metadata accessor for AnimationPlaybackController();
        uint64_t v300 = swift_allocObject();
        swift_weakInit();
        *(void *)(v300 + 16) = v70;
        swift_beginAccess();
        swift_weakAssign();
        if (v72 && REBindPointBoundComponent())
        {
          uint64_t v301 = REComponentGetEntity();
          if ((id)REEntityGetSwiftObject())
          {
            type metadata accessor for Entity();
            uint64_t v302 = swift_dynamicCastClassUnconditional();
LABEL_141:
            uint64_t v395 = v302;
            goto LABEL_143;
          }
          if (REEntityIsBeingDestroyed())
          {
LABEL_244:
            __break(1u);
            JUMPOUT(0x228022358);
          }
          uint64_t v383 = specialized static Entity.entityInfoType(_:)();
          if (!v383)
          {
            uint64_t v302 = makeEntity(for:)(v301);
            goto LABEL_141;
          }
          uint64_t v384 = (*(uint64_t (**)(void))(v383 + 232))();
          uint64_t v385 = *(void *)(v384 + 16);
          swift_retain();
          MEMORY[0x22A68E750](v385, 0);
          *(void *)(v384 + 16) = v301;
          MEMORY[0x22A68E750](v301, v384);
          uint64_t v395 = v384;
          swift_release();
        }
        else
        {
          uint64_t v395 = 0;
        }
LABEL_143:
        uint64_t v303 = String.init(cString:)();
        uint64_t v305 = v304;
        if (one-time initialization token for codableActionTypeMap != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v306 = static AnimationResource.codableActionTypeMap;
        uint64_t v307 = *(void *)(static AnimationResource.codableActionTypeMap + 16);
        uint64_t v388 = v56;
        uint64_t v394 = v73;
        v397 = (char *)v75;
        uint64_t v308 = v71;
        if (v307)
        {
          swift_bridgeObjectRetain();
          unint64_t v309 = specialized __RawDictionaryStorage.find<A>(_:)(v303, v305);
          if (v310)
          {
            v311 = (uint64_t *)(*(void *)(v306 + 56) + 56 * v309);
            uint64_t v312 = *v311;
            uint64_t v313 = v311[1];
            uint64_t v314 = v311[2];
            uint64_t v315 = v311[3];
            uint64_t v316 = v311[4];
            uint64_t v317 = v311[5];
            uint64_t v318 = v311[6];
            swift_bridgeObjectRelease();
            goto LABEL_157;
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v312 = 0;
        uint64_t v313 = 0;
        uint64_t v314 = 0;
        uint64_t v315 = 0;
        uint64_t v316 = 0;
        uint64_t v317 = 0;
        uint64_t v318 = 0;
LABEL_157:
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v411 = 0;
        char v412 = 0;
        uint64_t v413 = v308;
        uint64_t v414 = v312;
        uint64_t v415 = v313;
        uint64_t v416 = v314;
        uint64_t v417 = v315;
        uint64_t v418 = v316;
        uint64_t v419 = v317;
        uint64_t v420 = v318;
        unint64_t v20 = v396;
        uint64_t v292 = v410;
        ActionEventData.action<A>()(v410, (uint64_t)v396);
        uint64_t v293 = v409;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v409 + 48))(v20, 1, v292) != 1)
        {
          uint64_t v319 = v389;
          (*(void (**)(uint64_t, char *, uint64_t))(v293 + 32))(v389, v20, v292);
          uint64_t v320 = (uint64_t)v401;
          (*(void (**)(char *, uint64_t, uint64_t))(v293 + 16))(v401, v319, v292);
          uint64_t v321 = v402;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v402, 1, 1);
          v322 = v405;
          ActionEvent.init(playbackController:action:parameter:targetEntity:reversed:startTime:duration:engine:coreAnimationState:deltaTime:evaluationTime:normalizedTime:eventData:instanceID:)(v300, v320, v321, v395, 0, v388, 0, 0, v405, 0.0, 0.0, 1, 0, 1, 0, 1, (uint64_t)&v411, v394, v292);
          swift_retain();
          swift_retain();
          swift_retain();
          v404(v322);
          swift_release();
          swift_release();
          swift_release();
LABEL_208:
          swift_release();
          (*(void (**)(char *, uint64_t))(v407 + 8))(v322, v406);
          (*(void (**)(uint64_t, uint64_t))(v293 + 8))(v319, v292);
          return 0;
        }
        goto LABEL_205;
      }
LABEL_11:
      swift_release();
      return 0;
  }
}

uint64_t static EntityAction.eventBus(_:)(uint64_t a1)
{
  if (a1)
  {
    return REEngineGetEventBus();
  }
  else
  {
    uint64_t v2 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    uint64_t result = MEMORY[0x22A692280](*(void *)(v2 + 16));
    if (!result) {
      __break(1u);
    }
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ActionEventParameterUnused.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ActionEventParameterUnused.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t ActionEventParameterUnused.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ActionEventParameterUnused.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ActionEventParameterUnused.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ActionEventParameterUnused(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ActionEventParameterUnused(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ActionEventParameterUnused.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ActionEventDefinition.init(startTime:duration:parameter:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v8 = (char *)a2 + *(int *)(type metadata accessor for ActionEventDefinition() + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v8, 1, 1, AssociatedTypeWitness);
  *a2 = a3;
  a2[1] = a4;
  uint64_t v10 = type metadata accessor for Optional();
  int v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40);

  return v11(v8, a1, v10);
}

double ActionEventDefinition.startTime.getter()
{
  return *(double *)v0;
}

void ActionEventDefinition.startTime.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ActionEventDefinition.startTime.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double ActionEventDefinition.duration.getter()
{
  return *(double *)(v0 + 8);
}

void ActionEventDefinition.duration.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*ActionEventDefinition.duration.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ActionEvent.parameter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t ActionEventDefinition.parameter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*ActionEventDefinition.parameter.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ActionDefinition.init(action:events:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = 0;
  uint64_t v10 = type metadata accessor for ActionDefinition();
  int v11 = (char *)a5 + *(int *)(v10 + 36);
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v12(v11, 1, 1, a3);
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a1, a3);
  v12(v11, 0, 1, a3);
  swift_bridgeObjectRelease();
  *a5 = a2;
  *(void *)((char *)a5 + *(int *)(v10 + 40)) = 0;
  static EntityAction.__register()(a3, a4);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);

  return v14(a1, a3);
}

uint64_t ActionDefinition.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - v14, v3 + *(int *)(a1 + 36), v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  uint64_t v16 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    ActionDefinition.actionFromCore.getter(a1, a2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v15, v10);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v10);
  }
}

uint64_t ActionDefinition.actionFromCore.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + *(int *)(a1 + 40));
  if (v5 && RETimelineDefinitionEventTimelineGetEventTypeName())
  {
    if (one-time initialization token for codableActionTypeMap != -1) {
      swift_once();
    }
    uint64_t v6 = String.init(cString:)();
    uint64_t v8 = v7;
    swift_beginAccess();
    uint64_t v9 = static AnimationResource.codableActionTypeMap;
    if (*(void *)(static AnimationResource.codableActionTypeMap + 16)
      && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8), (v11 & 1) != 0))
    {
      uint64_t v12 = (long long *)(*(void *)(v9 + 56) + 56 * v10);
      long long v13 = *v12;
      long long v25 = v12[1];
      long long v26 = v13;
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v14 = v26;
      uint64_t v15 = type metadata accessor for Optional();
      uint64_t v16 = *(void *)(v15 - 8);
      MEMORY[0x270FA5388](v15);
      uint64_t v18 = (char *)&v25 - v17;
      static EntityAction<>.load(_:)(v5, v26, v25, MEMORY[0x263F37400], MEMORY[0x263F373F8], (uint64_t)&v25 - v17);
      uint64_t v19 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, v14) == 1)
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
        memset(v27, 0, 56);
      }
      else
      {
        *(_OWORD *)((char *)&v27[1] + 8) = v26;
        *(_OWORD *)((char *)&v27[2] + 8) = v25;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v27);
        (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 32))(boxed_opaque_existential_1, v18, v14);
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (EntityAction & Decodable & Encodable)?);
      uint64_t v23 = *(void *)(a1 + 16);
      int v24 = swift_dynamicCast();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a2, v24 ^ 1u, 1, v23);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_endAccess();
      return static EntityAction.load(_:)(*(void *)(a1 + 16), MEMORY[0x263F37408], a2);
    }
  }
  else
  {
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56);
    return v20(a2, 1, 1);
  }
}

uint64_t ActionDefinition.eventDefinitions.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __n128 v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v6;
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  if (v7)
  {
    uint64_t v8 = v7;
  }
  else
  {
    if (*(void *)&v5[*(int *)(a1 + 40)])
    {
      ActionDefinition.eventDefinitionsFromCore.getter(a1);
    }
    else
    {
      type metadata accessor for ActionEventDefinition();
      uint64_t v9 = static Array._allocateUninitialized(_:)();
    }
    uint64_t v8 = v9;
  }
  unint64_t v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  v10(v5, a1);
  return v8;
}

void ActionDefinition.eventDefinitionsFromCore.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for ActionEventDefinition();
  MEMORY[0x270FA5388](v5);
  uint64_t v66 = (double *)((char *)&v61 - v6);
  uint64_t v79 = v4;
  uint64_t v7 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(uint64_t **)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v72 = (char *)&v61 - v13;
  MEMORY[0x270FA5388](v14);
  uint64_t v74 = (char *)&v61 - v15;
  uint64_t v16 = *(void *)(v1 + *(int *)(a1 + 40));
  if (!v16 || (EventTypeuint64_t Name = RETimelineDefinitionEventTimelineGetEventTypeName()) == 0)
  {
    static Array._allocateUninitialized(_:)();
    return;
  }
  uint64_t v18 = EventTypeName;
  float v78 = v9;
  uint64_t ParameterCount = RETimelineDefinitionEventTimelineGetParameterCount();
  unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, ParameterCount & ~(ParameterCount >> 63), 0, MEMORY[0x263F8EE78]);
  if (ParameterCount < 0) {
    goto LABEL_32;
  }
  uint64_t v21 = v20;
  uint64_t v82 = v5;
  uint64_t v73 = v18;
  uint64_t v67 = ParameterCount;
  if (ParameterCount)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v74;
    do
    {
      if (RETimelineDefinitionEventTimelineGetParameterName())
      {
        uint64_t v25 = String.init(cString:)();
        uint64_t v27 = v26;
        unint64_t v29 = v21[2];
        unint64_t v28 = v21[3];
        if (v29 >= v28 >> 1) {
          uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v21);
        }
        void v21[2] = v29 + 1;
        int v24 = &v21[2 * v29];
        void v24[4] = v25;
        v24[5] = v27;
        uint64_t v23 = v74;
        uint64_t ParameterCount = v67;
      }
      ++v22;
    }
    while (ParameterCount != v22);
  }
  else
  {
    uint64_t v23 = v74;
  }
  swift_bridgeObjectRelease();
  Swift::Int EventCount = RETimelineDefinitionEventTimelineGetEventCount();
  uint64_t v85 = static Array._allocateUninitialized(_:)();
  uint64_t v65 = type metadata accessor for Array();
  Array.reserveCapacity(_:)(EventCount);
  if (EventCount < 0) {
    goto LABEL_33;
  }
  if (EventCount)
  {
    uint64_t v31 = 0;
    uint64_t v63 = AssociatedTypeWitness - 8;
    uint64_t v80 = (void (**)(char *, char *, uint64_t))(v78 + 4);
    uint64_t v81 = (void (**)(char *, uint64_t))(v78 + 1);
    float v62 = (void (**)(char *, char *, uint64_t))(v78 + 2);
    uint64_t v70 = v8;
    uint64_t v71 = v7;
    uint64_t v69 = v11;
    uint64_t v68 = v16;
    Swift::Int v64 = EventCount;
    while (v31 != EventCount)
    {
      RETimelineDefinitionEventTimelineGetEventStartTime();
      float v34 = v33;
      uint64_t v82 = v31;
      RETimelineDefinitionEventTimelineGetEventDuration();
      float v36 = v35;
      uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
      uint64_t v38 = *(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56);
      uint64_t v75 = v37 + 56;
      uint64_t v76 = v38;
      ((void (*)(char *, uint64_t, uint64_t))v38)(v23, 1, 1);
      if (ParameterCount)
      {
        if (one-time initialization token for codableActionTypeMap != -1) {
          swift_once();
        }
        uint64_t v39 = v67;
        do
        {
          while (1)
          {
            uint64_t v40 = String.init(cString:)();
            uint64_t v42 = v41;
            swift_beginAccess();
            uint64_t v43 = static AnimationResource.codableActionTypeMap;
            if (*(void *)(static AnimationResource.codableActionTypeMap + 16))
            {
              unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
              if (v45) {
                break;
              }
            }
            swift_bridgeObjectRelease();
            swift_endAccess();
            static EntityAction.loadParameterFromTimeline(_:eventID:)(0, (uint64_t)v11);
            (*v81)(v23, v8);
            (*v80)(v23, v11, v8);
            if (!--v39) {
              goto LABEL_16;
            }
          }
          uint64_t v46 = *(void *)(v43 + 56) + 56 * v44;
          uint64_t v48 = *(void *)(v46 + 32);
          uint64_t v47 = *(void *)(v46 + 40);
          swift_endAccess();
          swift_bridgeObjectRelease();
          uint64_t v49 = swift_getAssociatedTypeWitness();
          uint64_t v50 = type metadata accessor for Optional();
          float v78 = &v61;
          uint64_t v51 = *(void *)(v50 - 8);
          MEMORY[0x270FA5388](v50);
          uint64_t v53 = (char *)&v61 - v52;
          static EntityAction<>.loadParameterFromTimeline<A>(_:parameterType:eventID:)(v48, 0, v48, (uint64_t)&v61 - v52, v60, v47);
          uint64_t v54 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v53, 1, v49) == 1)
          {
            __n128 v55 = v74;
            uint64_t v8 = v70;
            (*v81)(v74, v70);
            (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
            long long v83 = 0u;
            long long v84 = 0u;
          }
          else
          {
            *((void *)&v84 + 1) = v49;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v83);
            (*(void (**)(uint64_t *, char *, uint64_t))(v54 + 32))(boxed_opaque_existential_1, v53, v49);
            __n128 v55 = v74;
            uint64_t v8 = v70;
            (*v81)(v74, v70);
          }
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          uint64_t v57 = v72;
          uint64_t v58 = AssociatedTypeWitness;
          int v59 = swift_dynamicCast();
          v76(v57, v59 ^ 1u, 1, v58);
          (*v80)(v55, v57, v8);
          char v11 = v69;
          uint64_t v23 = v55;
          --v39;
        }
        while (v39);
      }
LABEL_16:
      uint64_t v32 = v82 + 1;
      (*v62)(v11, v23, v8);
      ActionEventDefinition.init(startTime:duration:parameter:)((uint64_t)v11, v66, v34, v36);
      Array.append(_:)();
      (*v81)(v23, v8);
      uint64_t v31 = v32;
      Swift::Int EventCount = v64;
      uint64_t ParameterCount = v67;
      if (v31 == v64) {
        return;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
}

uint64_t ActionDefinition.init(fromCore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ActionDefinition();
  uint64_t v7 = (char *)a3 + *(int *)(v6 + 36);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  v10(v7, 1, 1, a2);
  *(void *)((char *)a3 + *(int *)(v6 + 40)) = a1;
  *a3 = 0;
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v10)(v7, 1, 1, a2);
}

uint64_t ActionDefinition.createTimelineDefinition(name:)(void (**a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t TypedEventTimeline = a2;
  uint64_t v131 = a1;
  uint64_t v140 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v133 = type metadata accessor for Optional();
  uint64_t v118 = *(void (***)(char *, uint64_t))(v133 - 8);
  MEMORY[0x270FA5388](v133);
  uint64_t v121 = (char *)v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v132 = (char *)v106 - v10;
  uint64_t v134 = AssociatedTypeWitness;
  uint64_t v128 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v11);
  id v116 = (char *)v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v115 = (char *)v106 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v127 = (char *)v106 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v117 = (void (**)(char *, uint64_t))((char *)v106 - v18);
  MEMORY[0x270FA5388](v19);
  uint64_t v120 = (char *)v106 - v20;
  MEMORY[0x270FA5388](v21);
  uint64_t v119 = (char *)v106 - v22;
  uint64_t v124 = v5;
  uint64_t v23 = type metadata accessor for ActionEventDefinition();
  uint64_t v137 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v122 = (char *)v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  id v125 = (char *)v106 - v26;
  uint64_t v111 = v27;
  MEMORY[0x270FA5388](v28);
  uint64_t v136 = (char *)v106 - v29;
  id v126 = 0;
  uint64_t v30 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  float v33 = (char *)v106 - v32;
  uint64_t v34 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v129 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v37);
  uint64_t v123 = (char *)v106 - v38;
  MEMORY[0x270FA5388](v39);
  uint64_t v130 = (char *)v106 - v40;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)v106 - v42;
  ActionDefinition.action.getter(a3, (uint64_t)v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v43, v33, v6);
  ActionDefinition.eventDefinitions.getter(a3);
  uint64_t v44 = MEMORY[0x22A688F10]();
  swift_bridgeObjectRelease();
  if (v44 < 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v6);
    return 0;
  }
  uint64_t v110 = v34;
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(v124 + 32))(v6);
  uint64_t v112 = v43;
  if (v45)
  {
    if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
      if (!swift_dynamicCastMetatype())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
        if (!swift_dynamicCastMetatype())
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
          if (!swift_dynamicCastMetatype())
          {
            type metadata accessor for simd_quatf(0);
            if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype()) {
              swift_dynamicCastMetatype();
            }
          }
        }
      }
    }
  }
  _typeName(_:qualified:)();
  String.utf8CString.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t TypedEventTimeline = RETimelineDefinitionCreateTypedEventTimeline();
  swift_release();
  swift_release();
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v110 + 16);
  uint64_t v109 = v110 + 16;
  uint64_t v108 = v47;
  v47(v130, v112, v6);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decodable & Encodable);
  uint64_t v114 = v6;
  uint64_t v113 = v48;
  int v107 = swift_dynamicCast();
  if (v107) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
  }
  v106[0] = a3;
  v106[1] = v3;
  uint64_t v49 = ActionDefinition.eventDefinitions.getter(a3);
  if (MEMORY[0x22A688F30](v49, v23))
  {
    uint64_t v50 = 0;
    uint64_t v130 = &v136[*(int *)(v23 + 40)];
    uint64_t v131 = (void (**)(char *, char *, uint64_t))(v137 + 16);
    uint64_t v51 = (void (**)(char *, char *, uint64_t))(v118 + 2);
    uint64_t v52 = (void (**)(char *, uint64_t))(v137 + 8);
    uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
    uint64_t v54 = v118 + 1;
    __n128 v55 = v132;
    uint64_t v56 = v133;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v137 + 16))(v136, v49+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(void *)(v137 + 72) * v50, v23);
        uint64_t v58 = v50 + 1;
        if (__OFADD__(v50, 1)) {
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v59 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v111 != 8)
        {
LABEL_101:
          __break(1u);
          JUMPOUT(0x228025144);
        }
        v138[0] = v59;
        (*v131)(v136, (char *)v138, v23);
        swift_unknownObjectRelease();
        uint64_t v58 = v50 + 1;
        if (__OFADD__(v50, 1))
        {
LABEL_29:
          __break(1u);
          goto LABEL_30;
        }
      }
      (*v51)(v55, v130, v56);
      (*v52)(v136, v23);
      if ((*v53)(v55, 1, v134) != 1) {
        break;
      }
      (*v54)(v55, v56);
      ++v50;
      if (v58 == MEMORY[0x22A688F30](v49, v23)) {
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = v128;
    uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v128 + 32);
    uint64_t v70 = v119;
    uint64_t v71 = v55;
    uint64_t v72 = v134;
    v69(v119, v71, v134);
    uint64_t v73 = v120;
    v69(v120, v70, v72);
    uint64_t v74 = v114;
    Swift::Int v64 = v125;
    id v63 = v126;
    if (v107)
    {
      v69((char *)v117, v73, v72);
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
        int v60 = 1;
        uint64_t v62 = v74;
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v73, v72);
    }
    int v61 = 1;
    uint64_t v62 = v74;
  }
  else
  {
LABEL_30:
    swift_bridgeObjectRelease();
    int v60 = 0;
    int v61 = 0;
    uint64_t v62 = v114;
    Swift::Int v64 = v125;
    id v63 = v126;
    if (v107)
    {
LABEL_31:
      uint64_t v65 = v112;
      v108(v123, v112, v62);
      swift_dynamicCast();
      __swift_project_boxed_opaque_existential_1(v138, v139);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      uint64_t v66 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      if (v63)
      {

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v65, v62);
        return 0;
      }
      uint64_t v100 = v66;
      unint64_t v101 = v67;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
      uint64_t v77 = v134;
      switch(v101 >> 62)
      {
        case 1uLL:
          if (v100 >> 32 < (int)v100) {
            goto LABEL_96;
          }
          outlined copy of Data._Representation(v100, v101);
          if (__DataStorage._bytes.getter())
          {
            if (__OFSUB__((int)v100, __DataStorage._offset.getter())) {
              goto LABEL_98;
            }
            __DataStorage._length.getter();
            RETimelineDefinitionEventTimelineSetConstantData();
            outlined consume of Data._Representation(v100, v101);
            outlined consume of Data._Representation(v100, v101);
            LODWORD(v123) = 1;
            uint64_t v62 = v114;
            uint64_t v77 = v134;
          }
          else
          {
            __DataStorage._length.getter();
            outlined consume of Data._Representation(v100, v101);
LABEL_90:
            outlined consume of Data._Representation(v100, v101);
            LODWORD(v123) = 1;
            uint64_t v62 = v114;
            uint64_t v77 = v134;
          }
          uint64_t v75 = v124;
          Swift::Int v64 = v125;
          break;
        case 2uLL:
          uint64_t v102 = *(void *)(v100 + 16);
          uint64_t v103 = *(void *)(v100 + 24);
          swift_retain();
          swift_retain();
          uint64_t v104 = __DataStorage._bytes.getter();
          if (!v104) {
            goto LABEL_83;
          }
          uint64_t v105 = __DataStorage._offset.getter();
          if (__OFSUB__(v102, v105)) {
            goto LABEL_99;
          }
          v104 += v102 - v105;
LABEL_83:
          if (__OFSUB__(v103, v102)) {
            goto LABEL_97;
          }
          __DataStorage._length.getter();
          if (v104) {
            RETimelineDefinitionEventTimelineSetConstantData();
          }
          swift_release();
          swift_release();
          goto LABEL_90;
        case 3uLL:
          memset(v138, 0, 14);
          goto LABEL_88;
        default:
          v138[0] = v100;
          LOWORD(v138[1]) = v101;
          BYTE2(v138[1]) = BYTE2(v101);
          BYTE3(v138[1]) = BYTE3(v101);
          BYTE4(v138[1]) = BYTE4(v101);
          BYTE5(v138[1]) = BYTE5(v101);
LABEL_88:
          RETimelineDefinitionEventTimelineSetConstantData();
          outlined consume of Data._Representation(v100, v101);
          LODWORD(v123) = 1;
          uint64_t v75 = v124;
          uint64_t v62 = v114;
          goto LABEL_39;
      }
      goto LABEL_39;
    }
  }
  uint64_t v75 = v124;
  type metadata accessor for EntityActionWrapper();
  uint64_t v76 = (uint64_t)v129;
  v108((char *)v129, v112, v62);
  EntityActionWrapper.__allocating_init(action:)(v76);
  RETimelineDefinitionEventTimelineSetAndRetainSwiftConstantData();
  swift_release();
  LODWORD(v123) = 0;
  int v60 = v61;
  uint64_t v77 = v134;
LABEL_39:
  id v126 = v63;
  (*(void (**)(uint64_t, uint64_t))(v75 + 16))(v62, v75);
  RETimelineDefinitionEventTimelineSetReversible();
  if (v60) {
    RETimelineDefinitionEventTimelineAddParameter();
  }
  uint64_t v78 = ActionDefinition.eventDefinitions.getter(v106[0]);
  uint64_t v79 = MEMORY[0x22A688F30](v78, v23);
  uint64_t v80 = v133;
  uint64_t v81 = v121;
  uint64_t v82 = v122;
  if (!v79)
  {
LABEL_72:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v114);
    return TypedEventTimeline;
  }
  uint64_t v83 = 0;
  uint64_t v131 = (void (**)(char *, char *, uint64_t))(v137 + 32);
  uint64_t v132 = (char *)(v137 + 16);
  uint64_t v130 = (char *)(v118 + 2);
  uint64_t v129 = (unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48);
  uint64_t v120 = (char *)(v128 + 32);
  uint64_t v119 = (char *)(v128 + 16);
  uint64_t v117 = (void (**)(char *, uint64_t))(v128 + 8);
  uint64_t v128 = v137 + 8;
  ++v118;
  while (1)
  {
    Swift::Bool v84 = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (v84)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v137 + 16))(v64, v78+ ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80))+ *(void *)(v137 + 72) * v83, v23);
      uint64_t v85 = v83 + 1;
      if (__OFADD__(v83, 1)) {
        goto LABEL_71;
      }
    }
    else
    {
      uint64_t v99 = _ArrayBuffer._getElementSlowPath(_:)();
      if (v111 != 8)
      {
        __break(1u);
        goto LABEL_101;
      }
      v138[0] = v99;
      (*(void (**)(char *, void *, uint64_t))v132)(v64, v138, v23);
      swift_unknownObjectRelease();
      uint64_t v85 = v83 + 1;
      if (__OFADD__(v83, 1))
      {
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
    }
    (*v131)(v82, v64, v23);
    uint64_t v86 = RETimelineDefinitionEventTimelineAddEvent();
    (*(void (**)(char *, char *, uint64_t))v130)(v81, &v82[*(int *)(v23 + 40)], v80);
    if ((*v129)(v81, 1, v77) == 1)
    {
      (*(void (**)(char *, uint64_t))v128)(v82, v23);
      (*v118)(v81, v80);
      goto LABEL_44;
    }
    uint64_t v136 = (char *)v86;
    uint64_t v87 = v127;
    (*(void (**)(char *, char *, uint64_t))v120)(v127, v81, v77);
    if (!v123)
    {
      type metadata accessor for EntityActionParameterWrapper();
      float v93 = v116;
      (*(void (**)(char *, char *, uint64_t))v119)(v116, v87, v77);
      swift_allocObject();
      uint64_t v94 = (uint64_t)v93;
      uint64_t v82 = v122;
      EntityActionParameterWrapper.init(parameter:)(v94);
      RETimelineDefinitionEventTimelineSetAndRetainSwiftParameter();
      swift_release();
      (*v117)(v87, v77);
      (*(void (**)(char *, uint64_t))v128)(v82, v23);
      Swift::Int v64 = v125;
      goto LABEL_44;
    }
    (*(void (**)(char *, char *, uint64_t))v119)(v115, v87, v77);
    swift_dynamicCast();
    __swift_project_boxed_opaque_existential_1(v138, v139);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    id v88 = v126;
    uint64_t v89 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    id v126 = v88;
    if (v88) {
      break;
    }
    uint64_t v91 = v89;
    unint64_t v92 = v90;
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
    switch(v92 >> 62)
    {
      case 1uLL:
        if (v91 >> 32 < (int)v91)
        {
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
        }
        outlined copy of Data._Representation(v91, v92);
        uint64_t v95 = __DataStorage._bytes.getter();
        if (v95)
        {
          uint64_t v109 = v95;
          if (__OFSUB__((int)v91, __DataStorage._offset.getter())) {
            goto LABEL_94;
          }
          __DataStorage._length.getter();
          RETimelineDefinitionEventTimelineSetParameterData();
        }
        else
        {
          __DataStorage._length.getter();
        }
        outlined consume of Data._Representation(v91, v92);
LABEL_67:
        outlined consume of Data._Representation(v91, v92);
        uint64_t v80 = v133;
        uint64_t v77 = v134;
        Swift::Int v64 = v125;
        (*v117)(v127, v134);
        (*(void (**)(char *, uint64_t))v128)(v82, v23);
        uint64_t v81 = v121;
        break;
      case 2uLL:
        uint64_t v96 = *(void *)(v91 + 16);
        uint64_t v109 = *(void *)(v91 + 24);
        swift_retain();
        swift_retain();
        uint64_t v97 = __DataStorage._bytes.getter();
        if (!v97) {
          goto LABEL_60;
        }
        uint64_t v98 = __DataStorage._offset.getter();
        if (__OFSUB__(v96, v98)) {
          goto LABEL_95;
        }
        v97 += v96 - v98;
LABEL_60:
        if (__OFSUB__(v109, v96)) {
          goto LABEL_93;
        }
        __DataStorage._length.getter();
        if (v97) {
          RETimelineDefinitionEventTimelineSetParameterData();
        }
        swift_release();
        swift_release();
        goto LABEL_67;
      case 3uLL:
        memset(v138, 0, 14);
        RETimelineDefinitionEventTimelineSetParameterData();
        goto LABEL_67;
      default:
        v138[0] = v91;
        LOWORD(v138[1]) = v92;
        BYTE2(v138[1]) = BYTE2(v92);
        BYTE3(v138[1]) = BYTE3(v92);
        BYTE4(v138[1]) = BYTE4(v92);
        BYTE5(v138[1]) = BYTE5(v92);
        RETimelineDefinitionEventTimelineSetParameterData();
        goto LABEL_67;
    }
LABEL_44:
    ++v83;
    if (v85 == MEMORY[0x22A688F30](v78, v23)) {
      goto LABEL_72;
    }
  }

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
  (*v117)(v127, v134);
  (*(void (**)(char *, uint64_t))v128)(v82, v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v114);
  return 0;
}

uint64_t ActionDefinition.isModified.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v2;
  (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v9 + 16))(v13, v2, a1, v11);
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v13[*(int *)(a1 + 36)], v5);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
    BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4) != 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v15;
}

uint64_t ActionAnimation.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 184);
  if (*(void *)(v0 + 160))
  {
    uint64_t v4 = *(void *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path setter for ActionAnimation.name : <A>ActionAnimation<A>(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return ActionAnimation.name.setter(v1, v2);
}

uint64_t ActionAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return result;
}

uint64_t (*ActionAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = ActionAnimation.name.getter();
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t ActionAnimation.blendLayer.getter()
{
  if (*(unsigned char *)(v0 + 192) != 1) {
    return *(unsigned int *)(v0 + 188);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 200) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t ActionAnimation.blendLayer.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 188) = result;
  *(unsigned char *)(v1 + 192) = 0;
  return result;
}

uint64_t (*ActionAnimation.blendLayer.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 192) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return ActionAnimation.blendLayer.modify;
}

uint64_t ActionAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  int v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

double key path getter for ActionAnimation.bindTarget : <A>ActionAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  ActionAnimation.bindTarget.getter((uint64_t)&v4);
  char v2 = v5;
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for ActionAnimation.bindTarget : <A>ActionAnimation<A>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned __int8 v2 = *(unsigned char *)(a1 + 16);
  v4[0] = *(void *)a1;
  v4[1] = v1;
  unsigned __int8 v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return ActionAnimation.bindTarget.setter(v4);
}

uint64_t ActionAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
  *(void *)(v1 + 168) = v2;
  *(void *)(v1 + 176) = v3;
  *(unsigned char *)(v1 + 184) = v4;
  return result;
}

uint64_t (*ActionAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  ActionAnimation.bindTarget.getter(a1);
  return FromToByAnimation.bindTarget.modify;
}

uint64_t ActionAnimation.fillMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *ActionAnimation.fillMode.setter(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*ActionAnimation.fillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 193);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return FromToByAnimation.fillMode.modify;
}

uint64_t ActionAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  _OWORD v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimStart.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  *(unsigned char *)(v2 + 9) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimStart.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = ActionAnimation.trimStart.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimStart.modify;
}

uint64_t ActionAnimation.trimEnd.getter()
{
  long long v1 = v0[7];
  long long v14 = v0[6];
  long long v15 = v1;
  long long v16 = v0[8];
  uint64_t v17 = *((void *)v0 + 18);
  long long v2 = v0[3];
  long long v10 = v0[2];
  long long v11 = v2;
  long long v3 = v0[5];
  long long v12 = v0[4];
  long long v13 = v3;
  long long v4 = v0[1];
  long long v8 = *v0;
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimEnd.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  *(unsigned char *)(v2 + 25) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimEnd.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = ActionAnimation.trimEnd.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimEnd.modify;
}

uint64_t ActionAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v13 = *(_OWORD *)(v0 + 96);
  long long v14 = v1;
  long long v15 = *(_OWORD *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 32);
  long long v10 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 64);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t ActionAnimation.trimDuration.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  *(unsigned char *)(v2 + 41) = 0;
  return result;
}

uint64_t (*ActionAnimation.trimDuration.modify(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = ActionAnimation.trimDuration.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimDuration.modify;
}

double ActionAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v10 = *(_OWORD *)(v0 + 64);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.offset.setter(double a1)
{
  *(double *)(v1 + 48) = a1;
  *(unsigned char *)(v1 + 56) = 0;
}

double (*ActionAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = ActionAnimation.offset.getter();
  return FromToByAnimation.offset.modify;
}

double ActionAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.delay.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
  *(unsigned char *)(v1 + 72) = 0;
}

double (*ActionAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = ActionAnimation.delay.getter();
  return FromToByAnimation.delay.modify;
}

float ActionAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void ActionAnimation.speed.setter(float a1)
{
  *(float *)(v1 + 76) = a1;
  *(unsigned char *)(v1 + 80) = 0;
}

float (*ActionAnimation.speed.modify(uint64_t a1))(float *a1)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = ActionAnimation.speed.getter();
  return FromToByAnimation.speed.modify;
}

void ActionAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 128);
  uint64_t v14 = *(void *)(v1 + 144);
  long long v4 = *(_OWORD *)(v1 + 48);
  void v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

unsigned char *ActionAnimation.repeatMode.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 81) = *result;
  return result;
}

uint64_t (*ActionAnimation.repeatMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  ActionAnimation.repeatMode.getter((unsigned char *)(a1 + 8));
  return ActionAnimation.repeatMode.modify;
}

double ActionAnimation.duration.getter()
{
  if (!*(void *)(*(void *)(v0 + 200) + 16)) {
    return 0.0;
  }
  RETimelineDefinitionGetDuration();
  return result;
}

uint64_t ActionAnimation.init(for:events:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, unsigned char *a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20)
{
  int v60 = a8;
  int v66 = a6;
  uint64_t v67 = a2;
  uint64_t v61 = a1;
  uint64_t v57 = a13;
  uint64_t v50 = a17;
  int v52 = a14 & 1;
  int v51 = a16 & 1;
  uint64_t v64 = *(void *)(a19 - 8);
  int v49 = a18 & 1;
  MEMORY[0x270FA5388](a1);
  uint64_t v62 = &v48[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = type metadata accessor for ActionDefinition();
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v63 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v31 = &v48[-v30];
  uint64_t v55 = *a5;
  uint64_t v54 = a5[1];
  int v53 = *((unsigned __int8 *)a5 + 16);
  LOBYTE(a5) = *a7;
  int v56 = *v60;
  int v60 = (unsigned __int8 *)(a9 + *(int *)(type metadata accessor for ActionAnimation() + 40));
  uint64_t v32 = *(void *)(v29 - 8);
  uint64_t v58 = *(void (**)(void))(v32 + 56);
  uint64_t v59 = v32 + 56;
  v58();
  v70[1] = 0;
  v70[0] = 0;
  char v71 = -1;
  char v69 = (char)a5;
  char v68 = 0;
  uint64_t v33 = a3;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(v33, a4, v70, 0, &v69, &v68, v57, v52, (uint64_t)v72, a10, a11, a12, a15, v51, v50, v49);
  long long v36 = v72[7];
  long long v37 = v72[8];
  *(_OWORD *)(a9 + 96) = v72[6];
  *(_OWORD *)(a9 + 112) = v36;
  *(_OWORD *)(a9 + 128) = v37;
  *(void *)(a9 + 144) = v73;
  long long v38 = v72[3];
  *(_OWORD *)(a9 + 32) = v72[2];
  *(_OWORD *)(a9 + 48) = v38;
  long long v39 = v72[5];
  *(_OWORD *)(a9 + 64) = v72[4];
  *(_OWORD *)(a9 + 80) = v39;
  long long v40 = v72[1];
  *(_OWORD *)a9 = v72[0];
  *(_OWORD *)(a9 + 16) = v40;
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(a20 + 24);
  swift_bridgeObjectRetain();
  uint64_t v42 = v61;
  LOBYTE(a7) = v41(a19, a20) & 1;
  type metadata accessor for TimelineDefinition();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = 0;
  *(void *)(a9 + 152) = v34;
  *(void *)(a9 + 160) = v35;
  uint64_t v44 = v54;
  *(void *)(a9 + 168) = v55;
  *(void *)(a9 + 176) = v44;
  *(unsigned char *)(a9 + 184) = v53;
  *(_DWORD *)(a9 + 188) = v66;
  *(unsigned char *)(a9 + 192) = 0;
  *(unsigned char *)(a9 + 193) = v56;
  *(unsigned char *)(a9 + 194) = 0;
  *(unsigned char *)(a9 + 195) = (_BYTE)a7;
  *(void *)(a9 + 200) = v43;
  uint64_t v45 = v64;
  uint64_t v46 = (uint64_t)v62;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v64 + 16))(v62, v42, a19);
  ActionDefinition.init(action:events:)(v46, v67, a19, a20, v31);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v42, a19);
  ((void (*)(void *, void, uint64_t, uint64_t))v58)(v31, 0, 1, v29);
  return (*(uint64_t (**)(unsigned __int8 *, void *, uint64_t))(v63 + 40))(v60, v31, v65);
}

uint64_t ActionAnimation.action.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for ActionDefinition();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x270FA5388](v7);
  long long v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16))((char *)&v14 - v10, v2 + *(int *)(a1 + 40), v7, v9);
  uint64_t v12 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
  else
  {
    ActionDefinition.action.getter(v6, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v11, v6);
  }
}

uint64_t key path setter for ActionAnimation.action : <A>ActionAnimation<A>(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  __n128 v3 = MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v9 - v4;
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))((char *)&v9 - v4, a1, v3);
  uint64_t v7 = type metadata accessor for ActionAnimation();
  return ActionAnimation.action.setter((uint64_t)v5, v7);
}

uint64_t ActionAnimation.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = v2 + *(int *)(a2 + 40);
  uint64_t v9 = type metadata accessor for ActionDefinition();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
    return v10(a1, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v7, a1, v5);
    uint64_t v12 = v8 + *(int *)(v9 + 36);
    uint64_t v13 = type metadata accessor for Optional();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v12, v7, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v5);
  }
}

void (*ActionAnimation.action.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  _OWORD v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  ActionAnimation.action.getter(a2, (uint64_t)v9);
  return ActionAnimation.action.modify;
}

void ActionAnimation.action.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  __n128 v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    ActionAnimation.action.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    ActionAnimation.action.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t ActionAnimation.eventDefinitions.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ActionDefinition();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  size_t v8 = (char *)&v12 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v12 - v7, v1 + *(int *)(a1 + 40), v4, v6);
  uint64_t v9 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    type metadata accessor for ActionEventDefinition();
    return static Array._allocateUninitialized(_:)();
  }
  else
  {
    uint64_t v10 = ActionDefinition.eventDefinitions.getter(v3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v3);
  }
  return v10;
}

uint64_t key path setter for ActionAnimation.eventDefinitions : <A>ActionAnimation<A>()
{
  uint64_t v0 = type metadata accessor for ActionAnimation();
  uint64_t v1 = swift_bridgeObjectRetain();
  return ActionAnimation.eventDefinitions.setter(v1, v0);
}

uint64_t ActionAnimation.eventDefinitions.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(v2 + *(int *)(a2 + 40));
  uint64_t v5 = type metadata accessor for ActionDefinition();
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v4 = a1;
  }
  return result;
}

uint64_t (*ActionAnimation.eventDefinitions.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = ActionAnimation.eventDefinitions.getter(a2);
  return ActionAnimation.eventDefinitions.modify;
}

uint64_t ActionAnimation.eventDefinitions.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  if ((a2 & 1) == 0) {
    return ActionAnimation.eventDefinitions.setter(*a1, v2);
  }
  uint64_t v3 = swift_bridgeObjectRetain();
  ActionAnimation.eventDefinitions.setter(v3, v2);

  return swift_bridgeObjectRelease();
}

uint64_t ActionAnimation.createResource()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActionDefinition();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  size_t v8 = (char *)&v25 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v25 - v11;
  if (ActionAnimation.isModified.getter(a1))
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, (char *)v1 + *(int *)(a1 + 40), v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v13._rawValue = *(void **)(v1[25] + 16);
      return ActionAnimation.createResource(timelineDefinition:)(v13);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v4);
      uint64_t v18 = v1[20];
      uint64_t v17 = v1[21];
      uint64_t v19 = v2[22];
      unsigned __int8 v20 = *((unsigned char *)v2 + 184);
      if (v18)
      {
        uint64_t v21 = (void (**)(char *, char *, uint64_t))v2[19];
        swift_bridgeObjectRetain();
        outlined copy of BindTarget?(v17, v19, v20);
        swift_retain();
      }
      else if (*(void *)(v2[25] + 16))
      {
        outlined copy of BindTarget?(v2[21], v2[22], *((unsigned char *)v2 + 184));
        swift_retain();
        RETimelineDefinitionGetName();
        uint64_t v21 = (void (**)(char *, char *, uint64_t))String.init(cString:)();
        uint64_t v18 = v22;
      }
      else
      {
        outlined copy of BindTarget?(v2[21], v2[22], *((unsigned char *)v2 + 184));
        swift_retain();
        uint64_t v21 = 0;
        uint64_t v18 = 0xE000000000000000;
      }
      outlined consume of BindTarget?(v17, v19, v20);
      swift_release();
      uint64_t v23 = (void *)ActionDefinition.createTimelineDefinition(name:)(v21, v18, v4);
      swift_bridgeObjectRelease();
      if (v23)
      {
        v24._rawValue = v23;
        uint64_t v14 = ActionAnimation.createResource(timelineDefinition:)(v24);
        RERelease();
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v4);
        return 0;
      }
    }
    return v14;
  }
  else
  {
    v15._rawValue = 0;
    return ActionAnimation.createResource(timelineDefinition:)(v15);
  }
}

uint64_t ActionAnimation.isModified.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActionDefinition();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  size_t v8 = (char *)&v18 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  Swift::OpaquePointer v13 = (char *)&v18 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, v2 + *(int *)(a1 + 40), v5, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v8, v4);
    char v14 = ActionDefinition.isModified.getter(v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v4);
  }
  if (*(void *)(v2 + 160)) {
    BOOL v15 = 0;
  }
  else {
    BOOL v15 = *(unsigned __int8 *)(v2 + 184) == 255;
  }
  char v16 = v15;
  return (*(unsigned char *)(v2 + 195) != 2
       || (v16 & (*(unsigned char *)(v2 + 192) & *(unsigned char *)(v2 + 194)) & 1) == 0) | v14 & 1u;
}

uint64_t ActionAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  if (a1._rawValue)
  {
    char v3 = *((unsigned char *)v1 + 184);
    int v4 = *((_DWORD *)v1 + 47);
    char v5 = *((unsigned char *)v1 + 192);
    char FillMode = *((unsigned char *)v1 + 193);
    int v7 = *((unsigned __int8 *)v1 + 194);
    char v8 = *((unsigned char *)v1 + 195);
    uint64_t v9 = *((void *)v1 + 25);
    long long v10 = *(long long *)((char *)v1 + 168);
    long long v114 = *(long long *)((char *)v1 + 152);
    long long v115 = v10;
    LOBYTE(v116) = v3;
    DWORD1(v116) = v4;
    BYTE8(v116) = v5;
    BYTE9(v116) = FillMode;
    BYTE10(v116) = v7;
    BYTE11(v116) = v8;
    *(void *)&long long v117 = v9;
    TimelineBaseProperties.writeProperties(_:)(a1);
    long long v11 = v1[7];
    long long v12 = v1[5];
    long long v110 = v1[6];
    long long v111 = v11;
    long long v13 = v1[7];
    long long v112 = v1[8];
    long long v14 = v1[3];
    long long v15 = v1[1];
    long long v106 = v1[2];
    long long v107 = v14;
    long long v16 = v1[3];
    long long v17 = v1[5];
    long long v108 = v1[4];
    long long v109 = v17;
    long long v18 = v1[1];
    long long v104 = *v1;
    long long v105 = v18;
    long long v120 = v110;
    long long v121 = v13;
    long long v122 = v1[8];
    long long v116 = v106;
    long long v117 = v16;
    long long v118 = v108;
    long long v119 = v12;
    uint64_t v113 = *((void *)v1 + 18);
    uint64_t v123 = *((void *)v1 + 18);
    long long v114 = v104;
    long long v115 = v15;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      int v49 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return (uint64_t)v49;
    }
    char v19 = BYTE9(v112);
    char v20 = BYTE10(v112);
    uint64_t v91 = v113;
    char v87 = BYTE8(v112);
    char v89 = BYTE11(v112);
    char v83 = v112;
    int v85 = DWORD1(v112);
    long long v81 = v111;
    long long v80 = v110;
    if (BYTE10(v112))
    {
      if (!*(void *)(v113 + 16))
      {
        outlined retain of TimelineClipProperties((uint64_t)&v104);
        if (!v7)
        {
LABEL_25:
          char v59 = 0;
LABEL_26:
          char v78 = FillMode;
          char v79 = BYTE1(v109);
          char v76 = v109;
          int v77 = HIDWORD(v108);
          uint64_t v75 = v108;
          char v73 = v59;
          char v74 = BYTE8(v108);
          uint64_t v72 = v107;
          char v71 = BYTE8(v107);
          uint64_t v70 = v106;
          char v68 = BYTE9(v106);
          char v69 = BYTE8(v106);
          uint64_t v61 = v105;
          char v62 = BYTE8(v105);
          char v63 = BYTE9(v105);
          uint64_t v64 = v104;
          char v65 = BYTE8(v104);
          char v66 = BYTE9(v104);
          type metadata accessor for TimelineDefinition();
          uint64_t v67 = swift_allocObject();
          *(Swift::OpaquePointer *)(v67 + 16) = a1;
          RERetain();
          swift_release();
          *(void *)&long long v94 = v64;
          BYTE8(v94) = v65;
          BYTE9(v94) = v66;
          *(void *)&long long v95 = v61;
          BYTE8(v95) = v62;
          BYTE9(v95) = v63;
          *(void *)&long long v96 = v70;
          BYTE8(v96) = v69;
          BYTE9(v96) = v68;
          *(void *)&long long v97 = v72;
          BYTE8(v97) = v71;
          *(void *)&long long v98 = v75;
          BYTE8(v98) = v74;
          HIDWORD(v98) = v77;
          LOBYTE(v99) = v76;
          BYTE1(v99) = v79;
          *((void *)&v99 + 1) = v67;
          long long v100 = v80;
          long long v101 = v81;
          LOBYTE(v102) = v83;
          DWORD1(v102) = v85;
          BYTE8(v102) = v87;
          BYTE9(v102) = v78;
          BYTE10(v102) = v73;
          BYTE11(v102) = v89;
          uint64_t v103 = v91;
          uint64_t v123 = v91;
          long long v121 = v81;
          long long v122 = v102;
          long long v114 = v94;
          long long v115 = v95;
          long long v119 = v99;
          long long v120 = v80;
          long long v117 = v97;
          long long v118 = v98;
          long long v116 = v96;
          outlined retain of TimelineClipProperties((uint64_t)&v94);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)&v114, &v93);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v94);
          outlined release of TimelineClipProperties((uint64_t)&v94);
          return v93;
        }
LABEL_19:
        if (*(void *)(v9 + 16)) {
          char FillMode = RETimelineDefinitionGetFillMode();
        }
        else {
          char FillMode = 0;
        }
        goto LABEL_25;
      }
      outlined retain of TimelineClipProperties((uint64_t)&v104);
      char v21 = RETimelineDefinitionGetFillMode();
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v104);
      char v21 = v19;
    }
    if (v21)
    {
      char FillMode = v19;
      char v59 = v20;
    }
    else
    {
      char v59 = 0;
    }
    if (v21 || ((v7 ^ 1) & 1) != 0) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  uint64_t v22 = *((void *)v1 + 12);
  uint64_t v23 = *((void *)v1 + 13);
  uint64_t v24 = *((void *)v1 + 14);
  uint64_t v25 = *((void *)v1 + 15);
  char v26 = *((unsigned char *)v1 + 128);
  int v27 = *((_DWORD *)v1 + 33);
  char v28 = *((unsigned char *)v1 + 136);
  char v29 = *((unsigned char *)v1 + 137);
  char v30 = *((unsigned char *)v1 + 138);
  char v31 = *((unsigned char *)v1 + 139);
  int v32 = *((_DWORD *)v1 + 35);
  uint64_t v33 = *((void *)v1 + 18);
  uint64_t v35 = (__int16 *)((char *)v1 + 129);
  __int16 v34 = *(_WORD *)((char *)v1 + 129);
  long long v36 = v1[3];
  long long v116 = v1[2];
  long long v117 = v36;
  long long v37 = v1[5];
  long long v118 = v1[4];
  long long v119 = v37;
  long long v38 = v1[1];
  long long v114 = *v1;
  long long v115 = v38;
  int v39 = v27;
  uint64_t v82 = v22;
  *(void *)&long long v120 = v22;
  *((void *)&v120 + 1) = v23;
  *(void *)&long long v121 = v24;
  *((void *)&v121 + 1) = v25;
  LOBYTE(v122) = v26;
  BYTE3(v122) = *((unsigned char *)v1 + 131);
  *(_WORD *)((char *)&v122 + 1) = v34;
  DWORD1(v122) = v27;
  char v90 = v29;
  char v92 = v28;
  BYTE8(v122) = v28;
  BYTE9(v122) = v29;
  char v86 = v31;
  char v88 = v30;
  BYTE10(v122) = v30;
  BYTE11(v122) = v31;
  int v84 = v32;
  HIDWORD(v122) = v32;
  uint64_t v123 = v33;
  if (TimelineClipProperties.isClipped.getter())
  {
    long long v40 = v1[3];
    long long v116 = v1[2];
    long long v117 = v40;
    long long v41 = v1[5];
    long long v118 = v1[4];
    long long v119 = v41;
    long long v42 = v1[1];
    long long v114 = *v1;
    long long v115 = v42;
    *(void *)&long long v120 = v82;
    *((void *)&v120 + 1) = v23;
    *(void *)&long long v121 = v24;
    *((void *)&v121 + 1) = v25;
    LOBYTE(v122) = v26;
    __int16 v43 = *v35;
    BYTE3(v122) = *((unsigned char *)v1 + 131);
    *(_WORD *)((char *)&v122 + 1) = v43;
    DWORD1(v122) = v39;
    BYTE8(v122) = v92;
    BYTE9(v122) = v90;
    BYTE10(v122) = v88;
    BYTE11(v122) = v86;
    HIDWORD(v122) = v84;
    uint64_t v123 = v33;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0)
    {
      swift_retain();
      int v60 = TimelineDefinition.resource.getter();
      swift_release();
      return (uint64_t)v60;
    }
    long long v44 = v1[3];
    long long v116 = v1[2];
    long long v117 = v44;
    long long v45 = v1[5];
    long long v118 = v1[4];
    long long v119 = v45;
    long long v46 = v1[1];
    long long v114 = *v1;
    long long v115 = v46;
    *(void *)&long long v120 = v82;
    *((void *)&v120 + 1) = v23;
    *(void *)&long long v121 = v24;
    *((void *)&v121 + 1) = v25;
    LOBYTE(v122) = v26;
    __int16 v47 = *v35;
    BYTE3(v122) = *((unsigned char *)v1 + 131);
    *(_WORD *)((char *)&v122 + 1) = v47;
    DWORD1(v122) = v39;
    BYTE8(v122) = v92;
    BYTE9(v122) = v90;
    BYTE10(v122) = v88;
    BYTE11(v122) = v86;
    HIDWORD(v122) = v84;
    uint64_t v123 = v33;
    return TimelineClipProperties.createClip()();
  }
  else
  {
    uint64_t v48 = *(void **)(*((void *)v1 + 25) + 16);
    if (v48)
    {
      uint64_t v51 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v51, (uint64_t)&v114);
      uint64_t v52 = *((void *)&v115 + 1);
      uint64_t v53 = v116;
      __swift_project_boxed_opaque_existential_1(&v114, *((uint64_t *)&v115 + 1));
      (*(void (**)(uint64_t, uint64_t))(v53 + 32))(v52, v53);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
      uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        uint64_t v55 = TimelineAsset;
        RETimelineDefinitionGetName();
        uint64_t v56 = String.init(cString:)();
        uint64_t v58 = v57;
        type metadata accessor for AnimationResource();
        uint64_t v48 = (void *)swift_allocObject();
        uint64_t v48[2] = v55;
        v48[3] = v56;
        unsigned char v48[4] = v58;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v48;
}

uint64_t ActionAnimation.generate()(uint64_t a1)
{
  uint64_t result = ActionAnimation.createResource()(a1);
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v2 = 0xD00000000000001CLL;
    *(void *)(v2 + 8) = 0x800000022834E530;
    *(unsigned char *)(v2 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance ActionAnimation<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = (uint64_t)ActionAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance ActionAnimation<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.blendLayer.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance ActionAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return ActionAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.fillMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance ActionAnimation<A>()
{
  return ActionAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance ActionAnimation<A>(uint64_t a1, char a2)
{
  return ActionAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance ActionAnimation<A>(void *a1))()
{
  unsigned __int8 v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance ActionAnimation<A>(char *a1)
{
  char v2 = *a1;
  return ActionAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance ActionAnimation<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = ActionAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinitionInternal.generate() in conformance ActionAnimation<A>(uint64_t a1)
{
  return ActionAnimation.generate()(a1);
}

uint64_t AnyActionAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 168);
  uint64_t v4 = *(void *)(v1 + 176);
  int v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(void *)(*(void *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      unint64_t v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      long long v8 = v11;
      char v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      char v9 = 0;
      long long v8 = xmmword_22831E960;
    }
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = v9;
  }
  else
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);

  return swift_release();
}

uint64_t AnyActionAnimation.trimStart.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  _OWORD v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0) {
    return *(void *)&v8[0];
  }
  uint64_t v5 = *(void *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      uint64_t v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnyActionAnimation.trimEnd.getter()
{
  long long v1 = v0[7];
  long long v14 = v0[6];
  long long v15 = v1;
  long long v16 = v0[8];
  uint64_t v17 = *((void *)v0 + 18);
  long long v2 = v0[3];
  long long v10 = v0[2];
  long long v11 = v2;
  long long v3 = v0[5];
  long long v12 = v0[4];
  long long v13 = v3;
  long long v4 = v0[1];
  long long v8 = *v0;
  long long v9 = v4;
  if ((BYTE9(v4) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      uint64_t v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnyActionAnimation.trimDuration.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v13 = *(_OWORD *)(v0 + 96);
  long long v14 = v1;
  long long v15 = *(_OWORD *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 32);
  long long v10 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v11 = *(_OWORD *)(v0 + 64);
  long long v12 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0) {
    return v9;
  }
  uint64_t v5 = *(void *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      uint64_t v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

double AnyActionAnimation.offset.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = v1;
  long long v14 = *(_OWORD *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  long long v9 = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v10 = *(_OWORD *)(v0 + 64);
  long long v11 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

double AnyActionAnimation.delay.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0) {
    return *(double *)&v9;
  }
  double v5 = 0.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      double v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

float AnyActionAnimation.speed.getter()
{
  long long v1 = *(_OWORD *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 96);
  long long v12 = v1;
  long long v13 = *(_OWORD *)(v0 + 128);
  uint64_t v14 = *(void *)(v0 + 144);
  long long v2 = *(_OWORD *)(v0 + 48);
  _OWORD v8[2] = *(_OWORD *)(v0 + 32);
  _OWORD v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 80);
  long long v9 = *(_OWORD *)(v0 + 64);
  long long v10 = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0) {
    return *((float *)&v9 + 3);
  }
  float v5 = 1.0;
  if (*(void *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      float v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnyActionAnimation.repeatMode.getter(unsigned char *a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 112);
  long long v11 = *(_OWORD *)(v1 + 96);
  long long v12 = v3;
  long long v13 = *(_OWORD *)(v1 + 128);
  uint64_t v14 = *(void *)(v1 + 144);
  long long v4 = *(_OWORD *)(v1 + 48);
  void v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  long long v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  long long v10 = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    uint64_t v7 = *(void *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        unsigned int ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

uint64_t AnyActionAnimation.init(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TimelineDefinition();
  uint64_t v2 = swift_allocObject();
  swift_retain_n();
  int v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    uint64_t RootTimeline = REAnimationSceneAssetGetRootTimeline();
    uint64_t result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      uint64_t ClipSourceRef = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(void *)(v2 + 16) = ClipSourceRef;
      if (ClipSourceRef)
      {
        int TimelineType = RETimelineDefinitionGetTimelineType();
        swift_retain();
        if (TimelineType == 2)
        {
          uint64_t ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
          uint64_t v8 = swift_allocObject();
          if (ClipSourceRef)
          {
            *(void *)(v8 + 16) = ClipSourceRef;
            RERetain();
            RERelease();
            uint64_t v9 = 0;
            uint64_t ClipSourceRef = 0;
            unint64_t v10 = 0;
          }
          else
          {
            uint64_t v9 = 0;
            unint64_t v10 = 0;
            *(void *)(v8 + 16) = 0;
          }
          char v14 = 2;
          char v13 = 1;
          uint64_t v12 = v2;
          goto LABEL_14;
        }
        RETimelineDefinitionGetName();
        uint64_t ClipSourceRef = String.init(cString:)();
        unint64_t v10 = v11;
      }
      else
      {
        swift_retain();
        unint64_t v10 = 0xE000000000000000;
      }
      uint64_t v12 = swift_allocObject();
      char v13 = 0;
      char v14 = 0;
      *(void *)(v12 + 16) = 0;
      uint64_t v8 = v2;
      uint64_t v9 = v2;
LABEL_14:
      unsigned __int8 v16 = v13;
      char v15 = v13;
      swift_retain();
      swift_release();
      uint64_t result = swift_release();
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 9) = 1;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 25) = 1;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = 0;
      *(unsigned char *)(a1 + 41) = 1;
      *(void *)(a1 + 48) = 0;
      *(unsigned char *)(a1 + 56) = 1;
      *(void *)(a1 + 64) = 0;
      *(unsigned char *)(a1 + 72) = 1;
      *(_DWORD *)(a1 + 76) = 0;
      *(unsigned char *)(a1 + 80) = 1;
      *(unsigned char *)(a1 + 81) = 4;
      *(void *)(a1 + 88) = v9;
      *(void *)(a1 + 96) = ClipSourceRef;
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v10;
      *(unsigned char *)(a1 + 128) = -1;
      *(_DWORD *)(a1 + 132) = 0;
      *(_WORD *)(a1 + 136) = v16;
      *(unsigned char *)(a1 + 138) = v15;
      *(unsigned char *)(a1 + 139) = v14;
      *(void *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 152) = 0u;
      *(_OWORD *)(a1 + 168) = 0u;
      *(unsigned char *)(a1 + 184) = -1;
      *(_DWORD *)(a1 + 188) = 0;
      *(unsigned char *)(a1 + 192) = 1;
      *(unsigned char *)(a1 + 193) = 0;
      *(unsigned char *)(a1 + 194) = 1;
      *(unsigned char *)(a1 + 195) = 2;
      *(void *)(a1 + 200) = v8;
      return result;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

void *AnyActionAnimation.createResource()()
{
  if (!*(void *)(v0 + 160)
    && *(unsigned __int8 *)(v0 + 184) == 255
    && (*(unsigned char *)(v0 + 192) & 1) != 0
    && (*(unsigned char *)(v0 + 194) & 1) != 0
    && *(unsigned char *)(v0 + 195) == 2)
  {
    if (TimelineClipProperties.isClipped.getter() && (TimelineClipProperties.isModified.getter() & 1) != 0) {
      return (void *)TimelineClipProperties.createClip()();
    }
    else {
      return TimelineDefinition.resource.getter();
    }
  }
  else
  {
    v2._rawValue = *(void **)(*(void *)(v0 + 200) + 16);
    return AnyActionAnimation.createResource(timelineDefinition:)(v2);
  }
}

void *AnyActionAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  long long v2 = v1[7];
  long long v84 = v1[6];
  long long v85 = v2;
  long long v86 = v1[8];
  uint64_t v87 = *((void *)v1 + 18);
  long long v3 = v1[3];
  long long v80 = v1[2];
  long long v81 = v3;
  long long v4 = v1[5];
  long long v82 = v1[4];
  long long v83 = v4;
  long long v5 = v1[1];
  long long v78 = *v1;
  long long v79 = v5;
  uint64_t v6 = *((void *)v1 + 25);
  if (a1._rawValue)
  {
    char FillMode = *((unsigned char *)v1 + 193);
    int v9 = *((unsigned __int8 *)v1 + 194);
    TimelineBaseProperties.writeProperties(_:)(a1);
    long long v74 = v84;
    long long v75 = v85;
    long long v76 = v86;
    uint64_t v77 = v87;
    long long v70 = v80;
    long long v71 = v81;
    long long v72 = v82;
    long long v73 = v83;
    long long v68 = v78;
    long long v69 = v79;
    if (!TimelineClipProperties.isClipped.getter())
    {
      type metadata accessor for TimelineDefinition();
      *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
      RERetain();
      long long v18 = TimelineDefinition.resource.getter();
      swift_setDeallocating();
      RERelease();
      swift_deallocClassInstance();
      return v18;
    }
    char v10 = BYTE9(v86);
    char v11 = BYTE10(v86);
    uint64_t v55 = v84;
    uint64_t v56 = v87;
    uint64_t v53 = v85;
    uint64_t v54 = *((void *)&v84 + 1);
    uint64_t v52 = *((void *)&v85 + 1);
    int v50 = DWORD1(v86);
    char v51 = v86;
    char v48 = BYTE11(v86);
    char v49 = BYTE8(v86);
    if (BYTE10(v86))
    {
      if (!*(void *)(v87 + 16))
      {
        outlined retain of TimelineClipProperties((uint64_t)&v78);
        if (!v9)
        {
LABEL_25:
          char v28 = 0;
LABEL_26:
          int v46 = HIDWORD(v82);
          char v47 = BYTE1(v83);
          char v44 = FillMode;
          char v45 = v83;
          uint64_t v43 = v82;
          char v41 = v28;
          char v42 = BYTE8(v82);
          uint64_t v40 = v81;
          char v39 = BYTE8(v81);
          uint64_t v38 = v80;
          char v36 = BYTE9(v80);
          char v37 = BYTE8(v80);
          uint64_t v29 = v79;
          char v30 = BYTE8(v79);
          char v31 = BYTE9(v79);
          uint64_t v32 = v78;
          char v33 = BYTE8(v78);
          char v34 = BYTE9(v78);
          type metadata accessor for TimelineDefinition();
          uint64_t v35 = swift_allocObject();
          *(Swift::OpaquePointer *)(v35 + 16) = a1;
          RERetain();
          swift_release();
          *(void *)&long long v58 = v32;
          BYTE8(v58) = v33;
          BYTE9(v58) = v34;
          *(void *)&long long v59 = v29;
          BYTE8(v59) = v30;
          BYTE9(v59) = v31;
          *(void *)&long long v60 = v38;
          BYTE8(v60) = v37;
          BYTE9(v60) = v36;
          *(void *)&long long v61 = v40;
          BYTE8(v61) = v39;
          *(void *)&long long v62 = v43;
          BYTE8(v62) = v42;
          HIDWORD(v62) = v46;
          LOBYTE(v63) = v45;
          BYTE1(v63) = v47;
          *((void *)&v63 + 1) = v35;
          *(void *)&long long v64 = v55;
          *((void *)&v64 + 1) = v54;
          *(void *)&long long v65 = v53;
          *((void *)&v65 + 1) = v52;
          LOBYTE(v66) = v51;
          DWORD1(v66) = v50;
          BYTE8(v66) = v49;
          BYTE9(v66) = v44;
          BYTE10(v66) = v41;
          BYTE11(v66) = v48;
          uint64_t v67 = v56;
          uint64_t v77 = v56;
          long long v75 = v65;
          long long v76 = v66;
          long long v68 = v58;
          long long v69 = v59;
          long long v73 = v63;
          long long v74 = v64;
          long long v71 = v61;
          long long v72 = v62;
          long long v70 = v60;
          outlined retain of TimelineClipProperties((uint64_t)&v58);
          swift_retain();
          closure #1 in TimelineClipProperties.createClip()((uint64_t)&v68, &v57);
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)&v58);
          outlined release of TimelineClipProperties((uint64_t)&v58);
          return (void *)v57;
        }
LABEL_19:
        if (*(void *)(v6 + 16)) {
          char FillMode = RETimelineDefinitionGetFillMode();
        }
        else {
          char FillMode = 0;
        }
        goto LABEL_25;
      }
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      char v12 = RETimelineDefinitionGetFillMode();
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v78);
      char v12 = v10;
    }
    if (v12)
    {
      char FillMode = v10;
      char v28 = v11;
    }
    else
    {
      char v28 = 0;
    }
    if (v12 || ((v9 ^ 1) & 1) != 0) {
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  long long v13 = v1[7];
  long long v74 = v1[6];
  long long v75 = v13;
  long long v76 = v1[8];
  uint64_t v77 = *((void *)v1 + 18);
  long long v14 = v1[3];
  long long v70 = v1[2];
  long long v71 = v14;
  long long v15 = v1[5];
  long long v72 = v1[4];
  long long v73 = v15;
  long long v16 = v1[1];
  long long v68 = *v1;
  long long v69 = v16;
  if (TimelineClipProperties.isClipped.getter())
  {
    long long v74 = v84;
    long long v75 = v85;
    long long v76 = v86;
    uint64_t v77 = v87;
    long long v70 = v80;
    long long v71 = v81;
    long long v72 = v82;
    long long v73 = v83;
    long long v68 = v78;
    long long v69 = v79;
    if ((TimelineClipProperties.isModified.getter() & 1) == 0) {
      return TimelineDefinition.resource.getter();
    }
    long long v74 = v84;
    long long v75 = v85;
    long long v76 = v86;
    uint64_t v77 = v87;
    long long v70 = v80;
    long long v71 = v81;
    long long v72 = v82;
    long long v73 = v83;
    long long v68 = v78;
    long long v69 = v79;
    return (void *)TimelineClipProperties.createClip()();
  }
  else
  {
    uint64_t v17 = *(void **)(v6 + 16);
    if (v17)
    {
      uint64_t v20 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v20, (uint64_t)&v68);
      uint64_t v21 = *((void *)&v69 + 1);
      uint64_t v22 = v70;
      __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
      (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      uint64_t TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
      if (TimelineAsset)
      {
        uint64_t v24 = TimelineAsset;
        RETimelineDefinitionGetName();
        uint64_t v25 = String.init(cString:)();
        uint64_t v27 = v26;
        type metadata accessor for AnimationResource();
        uint64_t v17 = (void *)swift_allocObject();
        v17[2] = v24;
        v17[3] = v25;
        v17[4] = v27;
        RERetain();
        REAssetSetSwiftObject();
        RERelease();
      }
      else
      {
        return 0;
      }
    }
  }
  return v17;
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnyActionAnimation()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 176);
  unsigned __int8 v3 = *(unsigned char *)(v0 + 184);
  if (*(void *)(v0 + 160))
  {
    uint64_t v4 = *(void *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v0 + 168), *(void *)(v0 + 176), *(unsigned char *)(v0 + 184));
    swift_retain();
    uint64_t v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 152) = a1;
  *(void *)(v2 + 160) = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnyActionAnimation(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  unint64_t v3 = *(void *)(v1 + 160);
  uint64_t v4 = *(void *)(v1 + 168);
  uint64_t v5 = *(void *)(v1 + 176);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 184);
  if (v3)
  {
    uint64_t v7 = *(void *)(v1 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(void *)(*(void *)(v1 + 200) + 16))
  {
    outlined copy of BindTarget?(*(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    uint64_t v7 = String.init(cString:)();
    unint64_t v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
    swift_retain();
    uint64_t v7 = 0;
    unint64_t v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnyActionAnimation()
{
  if (*(unsigned char *)(v0 + 192) != 1) {
    return *(unsigned int *)(v0 + 188);
  }
  uint64_t result = *(void *)(*(void *)(v0 + 200) + 16);
  if (result) {
    return RETimelineDefinitionGetAnimationLayer();
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnyActionAnimation(uint64_t result)
{
  *(_DWORD *)(v1 + 188) = result;
  *(unsigned char *)(v1 + 192) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 192) == 1)
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *(_DWORD *)(a1 + 8) = v3;
  return ActionAnimation.blendLayer.modify;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnyActionAnimation@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t result = *(void *)(*(void *)(v1 + 200) + 16);
    if (result) {
      uint64_t result = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    uint64_t result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnyActionAnimation(unsigned __int8 *result)
{
  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*protocol witness for AnimationDefinition.fillMode.modify in conformance AnyActionAnimation(uint64_t a1))(unsigned __int8 *result)
{
  *(void *)a1 = v1;
  if (*(unsigned char *)(v1 + 194))
  {
    uint64_t v3 = *(void *)(*(void *)(v1 + 200) + 16);
    if (v3) {
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
    }
  }
  else
  {
    LOBYTE(v3) = *(unsigned char *)(v1 + 193);
  }
  *(unsigned char *)(a1 + 8) = v3;
  return FromToByAnimation.fillMode.modify;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnyActionAnimation(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t result = outlined consume of BindTarget?(*(void *)(v1 + 168), *(void *)(v1 + 176), *(unsigned char *)(v1 + 184));
  *(void *)(v1 + 168) = v2;
  *(void *)(v1 + 176) = v3;
  *(unsigned char *)(v1 + 184) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  AnyActionAnimation.bindTarget.getter(a1);
  return protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.modify in conformance AnyActionAnimation(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 16);
  uint64_t v6 = *(void *)(v2 + 168);
  uint64_t v7 = *(void *)(v2 + 176);
  unsigned __int8 v8 = *(unsigned char *)(v2 + 184);
  if (a2)
  {
    outlined copy of BindTarget(*(void *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(void *)(v2 + 168) = v4;
    *(void *)(v2 + 176) = v3;
    *(unsigned char *)(v2 + 184) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    uint64_t result = outlined consume of BindTarget?(*(void *)(v2 + 168), *(void *)(v2 + 176), *(unsigned char *)(v2 + 184));
    *(void *)(v2 + 168) = v4;
    *(void *)(v2 + 176) = v3;
    *(unsigned char *)(v2 + 184) = v5;
  }
  return result;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  *(unsigned char *)(v2 + 9) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = AnyActionAnimation.trimStart.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimStart.modify;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  *(unsigned char *)(v2 + 25) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = AnyActionAnimation.trimEnd.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimEnd.modify;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnyActionAnimation()
{
  return AnyActionAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance AnyActionAnimation(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  *(unsigned char *)(v2 + 41) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  *(void *)(a1 + 16) = v1;
  *(void *)a1 = AnyActionAnimation.trimDuration.getter();
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return ActionAnimation.trimDuration.modify;
}

void protocol witness for AnimationDefinition.offset.setter in conformance AnyActionAnimation(double a1)
{
  *(double *)(v1 + 48) = a1;
  *(unsigned char *)(v1 + 56) = 0;
}

void *(*protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = AnyActionAnimation.offset.getter();
  return protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation;
}

void *protocol witness for AnimationDefinition.offset.modify in conformance AnyActionAnimation(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 48) = *result;
  *(unsigned char *)(v1 + 56) = 0;
  return result;
}

void protocol witness for AnimationDefinition.delay.setter in conformance AnyActionAnimation(double a1)
{
  *(double *)(v1 + 64) = a1;
  *(unsigned char *)(v1 + 72) = 0;
}

void *(*protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation(uint64_t a1))(void *result)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = AnyActionAnimation.delay.getter();
  return protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation;
}

void *protocol witness for AnimationDefinition.delay.modify in conformance AnyActionAnimation(void *result)
{
  uint64_t v1 = result[1];
  *(void *)(v1 + 64) = *result;
  *(unsigned char *)(v1 + 72) = 0;
  return result;
}

void protocol witness for AnimationDefinition.speed.setter in conformance AnyActionAnimation(float a1)
{
  *(float *)(v1 + 76) = a1;
  *(unsigned char *)(v1 + 80) = 0;
}

uint64_t *(*protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation(uint64_t a1))(uint64_t *result)
{
  *(void *)a1 = v1;
  *(float *)(a1 + 8) = AnyActionAnimation.speed.getter();
  return protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation;
}

uint64_t *protocol witness for AnimationDefinition.speed.modify in conformance AnyActionAnimation(uint64_t *result)
{
  uint64_t v1 = *result;
  *(_DWORD *)(v1 + 76) = *((_DWORD *)result + 2);
  *(unsigned char *)(v1 + 80) = 0;
  return result;
}

unsigned char *protocol witness for AnimationDefinition.repeatMode.setter in conformance AnyActionAnimation(unsigned char *result)
{
  *(unsigned char *)(v1 + 81) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnyActionAnimation(uint64_t a1))()
{
  *(void *)a1 = v1;
  AnyActionAnimation.repeatMode.getter((unsigned char *)(a1 + 8));
  return ActionAnimation.repeatMode.modify;
}

double protocol witness for AnimationDefinition.duration.getter in conformance AnyActionAnimation()
{
  if (!*(void *)(*(void *)(v0 + 200) + 16)) {
    return 0.0;
  }
  RETimelineDefinitionGetDuration();
  return result;
}

void *protocol witness for AnimationDefinitionInternal.generate() in conformance AnyActionAnimation()
{
  double result = AnyActionAnimation.createResource()();
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(void *)uint64_t v1 = 0xD00000000000001CLL;
    *(void *)(v1 + 8) = 0x800000022834E530;
    *(unsigned char *)(v1 + 16) = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for ActionHandlerProtocol.actionUpdated(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(2uLL, *(void *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 64));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 64));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SetEntityEnabledActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SetEntityPropertyActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(a1, a2, a3, a4, (void (*)(uint64_t, void, void))type metadata accessor for SetEntityPropertyAction);
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance FromToByActionHandler<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void, void))
{
  a5(255, *(void *)(a3 + 16), *(void *)(a3 + 24));
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v11 = MEMORY[0x263F8E650];
  uint64_t v12 = MEMORY[0x263F8E630];

  return static ActionHandlerProtocol<>.register(_:)(a1, a2, a3, a4, WitnessTable, v10, v11, v12);
}

uint64_t protocol witness for ActionHandlerProtocol.actionEnded(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(4uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionPaused(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x10uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for ActionHandlerProtocol.actionResumed(event:) in conformance SpinActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(0x20uLL, *(void *)(a1 + 104));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance SpinActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance PlayAudioActionHandler(uint64_t a1)
{
  return specialized static EntityAction.__unsubscribe(from:_:)(8uLL, *(void *)(a1 + 96));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance PlayAudioActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(a1, a2, a3, a4, specialized static EntityAction.__register(), (void (*)(uint64_t))specialized static EntityAction<>.__registerCodable(), specialized static ActionHandlerProtocol.__registerCommon(engine:_:));
}

uint64_t protocol witness for static ActionHandlerProtocol.register(_:) in conformance EmphasizeActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t), uint64_t (*a7)(void, uint64_t, uint64_t))
{
  uint64_t v10 = a5();
  a6(v10);

  return a7(0, a1, a2);
}

unint64_t lazy protocol witness table accessor for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys;
  if (!lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventParameterUnused.CodingKeys and conformance ActionEventParameterUnused.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for ActionEventDefinition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ActionDefinition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ActionAnimation()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ActionEventType and conformance ActionEventType()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType;
  if (!lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEventType and conformance ActionEventType);
  }
  return result;
}

uint64_t sub_22802A080@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ActionAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22802A0B0()
{
  return 16;
}

__n128 sub_22802A0BC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A0C8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = ActionAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_22802A0F4(unsigned int *a1)
{
  return ActionAnimation.blendLayer.setter(*a1);
}

uint64_t sub_22802A11C()
{
  return 16;
}

__n128 sub_22802A128(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A13C()
{
  return 16;
}

__n128 sub_22802A148(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A154@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ActionAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_22802A190(unsigned __int8 *a1)
{
  unsigned __int8 v2 = *a1;
  return ActionAnimation.fillMode.setter(&v2);
}

uint64_t sub_22802A1C8()
{
  return 16;
}

__n128 sub_22802A1D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A1E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ActionAnimation.trimStart.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_22802A214(uint64_t a1)
{
  return ActionAnimation.trimStart.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_22802A244()
{
  return 16;
}

__n128 sub_22802A250(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A25C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ActionAnimation.trimEnd.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_22802A290(uint64_t a1)
{
  return ActionAnimation.trimEnd.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_22802A2C0()
{
  return 16;
}

__n128 sub_22802A2CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ActionAnimation.trimDuration.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_22802A30C(uint64_t a1)
{
  return ActionAnimation.trimDuration.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_22802A33C()
{
  return 16;
}

__n128 sub_22802A348(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22802A354(double *a1@<X8>)
{
  *a1 = ActionAnimation.offset.getter();
}

void sub_22802A380(double *a1)
{
}

uint64_t sub_22802A3A8()
{
  return 16;
}

__n128 sub_22802A3B4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22802A3C0(double *a1@<X8>)
{
  *a1 = ActionAnimation.delay.getter();
}

void sub_22802A3EC(double *a1)
{
}

uint64_t sub_22802A414()
{
  return 16;
}

__n128 sub_22802A420(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22802A42C(float *a1@<X8>)
{
  *a1 = ActionAnimation.speed.getter();
}

void sub_22802A458(float *a1)
{
}

uint64_t sub_22802A480()
{
  return 16;
}

__n128 sub_22802A48C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_22802A498(unsigned char *a1@<X8>)
{
  ActionAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

unsigned char *sub_22802A4D4(char *a1)
{
  char v2 = *a1;
  return ActionAnimation.repeatMode.setter(&v2);
}

uint64_t sub_22802A50C()
{
  return 16;
}

__n128 sub_22802A518(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ActionAnimation();
  return ActionAnimation.action.getter(v2, a1);
}

uint64_t sub_22802A564()
{
  return 16;
}

__n128 sub_22802A570(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_22802A57C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ActionAnimation();
  uint64_t result = ActionAnimation.eventDefinitions.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_22802A5BC()
{
  return 16;
}

__n128 sub_22802A5C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for EntityActionWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for EntityActionWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for EntityActionParameterWrapper()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for EntityActionParameterWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for ActionEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 72);
}

uint64_t type metadata completion function for ActionEvent()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  unint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84)) {
    uint64_t v13 = *(void *)(v11 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v11 + 64) + 1;
  }
  int v14 = (*(_DWORD *)(v11 + 80) | v7) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  BOOL v16 = (v12 | v8) <= 7 && v14 == 0;
  if (v16
    && ((((((((((((((v9 + v12 + ((v8 + 8) & ~v8)) & ~v12) + v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 63) & 0xFFFFFFFFFFFFFFF8)
       + 87) & 0xFFFFFFFFFFFFFFF8)
     + 8 <= 0x18)
  {
    size_t __n = v13;
    uint64_t v51 = AssociatedTypeWitness;
    uint64_t v17 = (char *)a2 + v8;
    uint64_t v18 = ((unint64_t)a1 + v8 + 8) & ~v8;
    uint64_t v19 = (unint64_t)(v17 + 8) & ~v8;
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v20(v18, v19, v5);
    uint64_t v21 = (void *)((v18 + v9 + v12) & ~v12);
    uint64_t v22 = (const void *)((v19 + v9 + v12) & ~v12);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v22, 1, v51))
    {
      size_t v23 = __n;
      memcpy(v21, v22, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v21, v22, v51);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v51);
      size_t v23 = __n;
    }
    unint64_t v25 = ((unint64_t)v21 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v22 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v25 = *(void *)v26;
    *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
    uint64_t v27 = (void *)(((unint64_t)v21 + v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v28 = (void *)(((unint64_t)v22 + v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v28;
    uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v29 = *v30;
    char v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v31 = *v32;
    char v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v33 = *v34;
    unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = ((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = *(void *)v36;
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
    *(void *)unint64_t v35 = v37;
    unint64_t v38 = ((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = ((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = *(void *)v39;
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
    *(void *)unint64_t v38 = v40;
    unint64_t v41 = ((unint64_t)v33 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = ((unint64_t)v34 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)v42;
    *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
    *(void *)unint64_t v41 = v43;
    char v44 = (_OWORD *)(((unint64_t)v33 + 63) & 0xFFFFFFFFFFFFFFF8);
    char v45 = (_OWORD *)(((unint64_t)v34 + 63) & 0xFFFFFFFFFFFFFFF8);
    long long v46 = v45[4];
    long long v48 = v45[1];
    long long v47 = v45[2];
    v44[3] = v45[3];
    v44[4] = v46;
    v44[1] = v48;
    unsigned char v44[2] = v47;
    *char v44 = *v45;
    *(void *)(((unint64_t)v44 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v45 + 87) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    uint64_t v24 = a1;
  }
  else
  {
    uint64_t v24 = (uint64_t *)(v15 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
  }
  swift_retain();
  return v24;
}

uint64_t destroy for ActionEvent(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t, void))(v4 + 8))(v6, *(void *)(a2 + 16));
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v10, AssociatedTypeWitness);
  }
  swift_release();

  return swift_release();
}

void *initializeWithCopy for ActionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_retain();
  v5(v8, v9, v4);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  int v14 = (char *)((v10 + v13 + v8) & ~v13);
  uint64_t v15 = (char *)((v10 + v13 + v9) & ~v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v15, 1, AssociatedTypeWitness))
  {
    int v16 = *(_DWORD *)(v12 + 84);
    uint64_t v17 = *(void *)(v12 + 64);
    if (v16) {
      size_t v18 = *(void *)(v12 + 64);
    }
    else {
      size_t v18 = v17 + 1;
    }
    memcpy(v14, v15, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, AssociatedTypeWitness);
    uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56);
    uint64_t v19 = v12 + 56;
    v20(v14, 0, 1, AssociatedTypeWitness);
    int v16 = *(_DWORD *)(v19 + 28);
    uint64_t v17 = *(void *)(v19 + 8);
  }
  if (v16) {
    uint64_t v21 = v17;
  }
  else {
    uint64_t v21 = v17 + 1;
  }
  uint64_t v22 = &v14[v21];
  size_t v23 = &v15[v21];
  unint64_t v24 = (unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  unint64_t v26 = (void *)((unint64_t)(v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((unint64_t)(v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v27;
  char v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *v29;
  char v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *char v30 = *v31;
  uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(void *)unint64_t v34 = v36;
  unint64_t v37 = ((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  *(void *)unint64_t v37 = v39;
  unint64_t v40 = ((unint64_t)v32 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = ((unint64_t)v33 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = *(void *)v41;
  *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
  *(void *)unint64_t v40 = v42;
  uint64_t v43 = (_OWORD *)(((unint64_t)v32 + 63) & 0xFFFFFFFFFFFFFFF8);
  char v44 = (_OWORD *)(((unint64_t)v33 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v45 = v44[4];
  long long v47 = v44[1];
  long long v46 = v44[2];
  v43[3] = v44[3];
  __n128 v43[4] = v45;
  v43[1] = v47;
  _OWORD v43[2] = v46;
  *uint64_t v43 = *v44;
  *(void *)(((unint64_t)v43 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + 87) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ActionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v6 + 24))(v9, v10, *(void *)(a3 + 16));
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  int v16 = (char *)((v11 + v14 + v9) & ~v14);
  uint64_t v17 = (char *)((v15 + v10) & ~v14);
  size_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v9) = v18(v16, 1, AssociatedTypeWitness);
  int v19 = v18(v17, 1, AssociatedTypeWitness);
  if (v9)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v16, v17, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v16, v17, v22);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v23 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v13 + 64) + 1;
  }
  unint64_t v24 = &v16[v23];
  unint64_t v25 = &v17[v23];
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  swift_retain();
  swift_release();
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  char v28 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *v29;
  unint64_t v30 = ((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = *(void *)v31;
  v31 += 15;
  *(void *)unint64_t v30 = v32;
  v30 += 15;
  unint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v30 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v31 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  unint64_t v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 63;
  *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v33 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)unint64_t v36 = v38;
  unint64_t v39 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  unint64_t v42 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  *(void *)unint64_t v42 = v44;
  unint64_t v45 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = *(void *)(v35 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v45 + 8) = *(unsigned char *)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)unint64_t v45 = v46;
  *(void *)(v45 + 16) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v47 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v48 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 40);
  long long v49 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(void *)(v45 + 72) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_OWORD *)(v45 + 56) = v49;
  *(_OWORD *)(v45 + 40) = v48;
  *(_OWORD *)(v45 + 24) = v47;
  *(void *)((v45 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v35 & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for ActionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t, void))(v4 + 32))(v7, v8, *(void *)(a3 + 16));
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (char *)((v9 + v12 + v7) & ~v12);
  uint64_t v14 = (char *)((v9 + v12 + v8) & ~v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v14, 1, AssociatedTypeWitness))
  {
    int v15 = *(_DWORD *)(v11 + 84);
    uint64_t v16 = *(void *)(v11 + 64);
    if (v15) {
      size_t v17 = *(void *)(v11 + 64);
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v14, AssociatedTypeWitness);
    int v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v18 = v11 + 56;
    v19(v13, 0, 1, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v18 + 28);
    uint64_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    uint64_t v20 = v16;
  }
  else {
    uint64_t v20 = v16 + 1;
  }
  size_t v21 = &v13[v20];
  size_t v22 = &v14[v20];
  unint64_t v23 = (unint64_t)(v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (unint64_t)(v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  unint64_t v25 = (void *)((unint64_t)(v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (void *)((unint64_t)(v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v26 = *v25;
  unint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *v27;
  uint64_t v29 = (void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v30 = *v29;
  unint64_t v31 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v31 = *v32;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(void *)unint64_t v33 = v35;
  unint64_t v36 = ((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)unint64_t v36 = v38;
  unint64_t v39 = ((unint64_t)v31 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((unint64_t)v32 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  unint64_t v42 = (_OWORD *)(((unint64_t)v31 + 63) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v43 = (_OWORD *)(((unint64_t)v32 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v44 = v43[4];
  long long v46 = v43[1];
  long long v45 = v43[2];
  v42[3] = v43[3];
  v42[4] = v44;
  v42[1] = v46;
  unsigned char v42[2] = v45;
  *unint64_t v42 = *v43;
  *(void *)(((unint64_t)v42 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + 87) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ActionEvent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t, void))(v6 + 40))(v9, v10, *(void *)(a3 + 16));
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (char *)((v11 + v14 + v9) & ~v14);
  size_t v17 = (char *)((v15 + v10) & ~v14);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v9) = v18(v16, 1, AssociatedTypeWitness);
  int v19 = v18(v17, 1, AssociatedTypeWitness);
  if (v9)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v17, AssociatedTypeWitness);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v16, v17, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v16, v17, v22);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v23 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v13 + 64) + 1;
  }
  unint64_t v24 = &v16[v23];
  unint64_t v25 = &v17[v23];
  unint64_t v26 = (unint64_t)(v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (unint64_t)(v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  swift_release();
  *(unsigned char *)(v26 + 8) = *(unsigned char *)(v27 + 8);
  char v28 = (void *)((unint64_t)(v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)(v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v28 = *v29;
  unint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v32 = *(void *)v31;
  v31 += 15;
  *unint64_t v30 = v32;
  unint64_t v33 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)unint64_t v33 = *(void *)(v31 & 0xFFFFFFFFFFFFFFF8);
  v33 += 15;
  swift_release();
  unint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF8) + 63;
  *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v34 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v36 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)unint64_t v36 = v38;
  unint64_t v39 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = v41;
  unint64_t v42 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = ((v34 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = *(void *)v43;
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  *(void *)unint64_t v42 = v44;
  unint64_t v45 = ((v33 & 0xFFFFFFFFFFFFFFF8) + 63) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = *(void *)(v35 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v45 + 8) = *(unsigned char *)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)unint64_t v45 = v46;
  *(void *)(v45 + 16) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v47 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v48 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 40);
  long long v49 = *(_OWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(void *)(v45 + 72) = *(void *)((v35 & 0xFFFFFFFFFFFFFFF8) + 72);
  *(_OWORD *)(v45 + 56) = v49;
  *(_OWORD *)(v45 + 40) = v48;
  *(_OWORD *)(v45 + 24) = v47;
  *(void *)((v45 + 87) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v35 & 0xFFFFFFFFFFFFFFF8) + 87) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionEvent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  if (v7 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = 23;
  if (!v10) {
    uint64_t v18 = 24;
  }
  if (!a2) {
    return 0;
  }
  if (v13 < a2)
  {
    unint64_t v19 = ((((((((((((v18 + v17 + ((v15 + v16 + ((v14 + 8) & ~v14)) & ~v16)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 87) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v20 = v19 & 0xFFFFFFF8;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v13 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v19);
        if (!v24) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v19);
        if (v24) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22802BC38);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v19);
        if (!v24) {
          break;
        }
LABEL_28:
        int v25 = v24 - 1;
        if (v20)
        {
          int v25 = 0;
          LODWORD(v20) = *a1;
        }
        return v13 + (v20 | v25) + 1;
      default:
        break;
    }
  }
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v27 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v27) = -1;
    }
    return (v27 + 1);
  }
  uint64_t v28 = ((unint64_t)a1 + v14 + 8) & ~v14;
  if (v7 != v13)
  {
    if (v10 >= 2)
    {
      unsigned int v30 = (*(uint64_t (**)(uint64_t))(v9 + 48))((v28 + v15 + v16) & ~v16);
      if (v30 >= 2) {
        return v30 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);

  return v29(v28, v7, v5);
}

void storeEnumTagSinglePayload for ActionEvent(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v32 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = *(void *)(v11 + 64);
  if (v9 <= v14) {
    unsigned int v19 = v14;
  }
  else {
    unsigned int v19 = v9;
  }
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v20 = 0x7FFFFFFF;
  }
  else {
    unsigned int v20 = v19;
  }
  uint64_t v21 = 23;
  if (!v13) {
    uint64_t v21 = 24;
  }
  size_t v22 = ((((((((((((v21 + v18 + ((v16 + v17 + ((v15 + 8) & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 87) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v20 < a3)
  {
    if (((((((((((((v21
                   + v18
                   + ((v16 + v17 + ((v15 + 8) & ~v15)) & ~v17)) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8)
           + 63) & 0xFFFFFFF8)
         + 87) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v23 = a3 - v20 + 1;
    else {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      int v24 = 4;
    }
    else {
      int v24 = 2;
    }
    if (v23 < 0x100) {
      int v24 = 1;
    }
    if (v23 >= 2) {
      int v10 = v24;
    }
    else {
      int v10 = 0;
    }
  }
  if (a2 > v20)
  {
    if (v22) {
      int v25 = 1;
    }
    else {
      int v25 = a2 - v20;
    }
    if (v22)
    {
      int v26 = ~v20 + a2;
      bzero(a1, v22);
      *a1 = v26;
    }
    switch(v10)
    {
      case 1:
        *((unsigned char *)a1 + v22) = v25;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v22) = v25;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)((char *)a1 + v22) = v25;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      *((unsigned char *)a1 + v22) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)((char *)a1 + v22) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x22802BF74);
    case 4:
      *(_DWORD *)((char *)a1 + v22) = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        if ((v19 & 0x80000000) != 0)
        {
          uint64_t v28 = ((unint64_t)a1 + v15 + 8) & ~v15;
          if (v9 == v20)
          {
            uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
            v29(v28, a2, v9, v7);
          }
          else if (v13 >= 2)
          {
            uint64_t v30 = (v28 + v16 + v17) & ~v17;
            unint64_t v31 = *(void (**)(uint64_t, void))(v12 + 56);
            v31(v30, (a2 + 1));
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v27 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v27 = (a2 - 1);
          }
          *(void *)a1 = v27;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ActionEventType()
{
  return &type metadata for ActionEventType;
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionStarted(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionUpdated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionEnded(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionSkipped(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionPaused(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionResumed(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ActionHandlerProtocol.actionTerminated(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of static ActionHandlerProtocol.register(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of EntityAction.isReversible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of EntityAction.isAdditive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of EntityAction.animatedValueType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for ActionEventParameterUnused()
{
  return &type metadata for ActionEventParameterUnused;
}

uint64_t type metadata completion function for ActionEventDefinition()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionEventDefinition(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *a1 = *a2;
    unsigned int v14 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v15;
    uint64_t v16 = (void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    uint64_t v17 = (const void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v15 + v7 + 8) & ~v7, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for ActionEventDefinition(uint64_t a1)
{
  unint64_t v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

void *initializeWithCopy for ActionEventDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *assignWithCopy for ActionEventDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

void *initializeWithTake for ActionEventDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *assignWithTake for ActionEventDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionEventDefinition(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v6) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = v9 + ((v8 + 16) & ~v8);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_25;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 <= 3) {
            int v15 = v10;
          }
          else {
            int v15 = 4;
          }
          switch(v15)
          {
            case 2:
              int v16 = *a1;
              break;
            case 3:
              int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v16 = *(_DWORD *)a1;
              break;
            default:
              int v16 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v16 = 0;
        }
        return v7 + (v16 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v6 < 2) {
    return 0;
  }
  unsigned int v18 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                               + v8
                                                               + 8) & ~v8);
  if (v18 >= 2) {
    return v18 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ActionEventDefinition(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 16) & ~v10);
  if (a3 <= v9) {
    goto LABEL_14;
  }
  if (v12 <= 3)
  {
    unsigned int v13 = ((a3 - v9 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v13))
    {
      int v6 = 4;
      if (v9 >= a2) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
LABEL_14:
    if (v9 >= a2) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  int v6 = 1;
  if (v9 >= a2)
  {
LABEL_22:
    switch(v6)
    {
      case 1:
        a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v12] = 0;
        goto LABEL_26;
      default:
LABEL_26:
        if (a2)
        {
LABEL_27:
          if (v8 >= 2)
          {
            size_t v17 = *(void (**)(unint64_t, void))(v7 + 56);
            v17((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 8) & ~v10, a2 + 1);
          }
        }
        break;
    }
    return;
  }
LABEL_15:
  unsigned int v14 = ~v9 + a2;
  if (v12 < 4)
  {
    int v15 = (v14 >> (8 * v12)) + 1;
    if (v12)
    {
      int v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if (v12 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v12 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v12);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v12] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v15;
      break;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x22802CE00);
    case 4:
      *(_DWORD *)&a1[v12] = v15;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for ActionAnimation()
{
  type metadata accessor for ActionDefinition();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = v6;
  unint64_t v9 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v6 + 8;
  if (v7) {
    uint64_t v11 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v11 = *(void *)(v5 + 64) + 1;
  }
  int v12 = v6 & 0x100000;
  if (v8 > 7
    || v12 != 0
    || ((v11 + ((v8 + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8 + (v9 & (v8 + 208)) > 0x18)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v15 + (v9 & (v8 + 16));
    swift_retain();
    return v4;
  }
  size_t __n = v11;
  unint64_t v40 = ((v11 + ((v8 + 8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v41 = *(void *)(v5 + 64);
  uint64_t v42 = *(void *)(a3 + 16);
  *(void *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)(a1 + 16) = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 32) = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = a2[6];
  uint64_t v16 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 76) = *((_DWORD *)a2 + 19);
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  uint64_t v17 = a2[12];
  *(void *)(a1 + 88) = a2[11];
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = a2[13];
  int v18 = *((unsigned __int8 *)a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  int v43 = v7;
  if (v18 == 255)
  {
    *(_OWORD *)(v4 + 112) = *((_OWORD *)a2 + 7);
    *(unsigned char *)(v4 + 128) = *((unsigned char *)a2 + 128);
  }
  else
  {
    uint64_t v19 = a2[14];
    uint64_t v20 = a2[15];
    outlined copy of BindTarget(v19, v20, v18);
    *(void *)(v4 + 112) = v19;
    *(void *)(v4 + 120) = v20;
    *(unsigned char *)(v4 + 128) = v18;
  }
  *(_DWORD *)(v4 + 132) = *((_DWORD *)a2 + 33);
  *(unsigned char *)(v4 + 136) = *((unsigned char *)a2 + 136);
  *(_WORD *)(v4 + 137) = *(_WORD *)((char *)a2 + 137);
  *(unsigned char *)(v4 + 139) = *((unsigned char *)a2 + 139);
  *(void *)(v4 + 144) = a2[18];
  unint64_t v21 = (v4 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  int v23 = *(unsigned __int8 *)(v22 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v23 == 255)
  {
    long long v26 = *(_OWORD *)(v22 + 16);
    *(unsigned char *)(v21 + 32) = *(unsigned char *)(v22 + 32);
    *(_OWORD *)(v21 + 16) = v26;
  }
  else
  {
    uint64_t v24 = *(void *)(v22 + 16);
    uint64_t v25 = *(void *)(v22 + 24);
    outlined copy of BindTarget(v24, v25, v23);
    *(void *)(v21 + 16) = v24;
    *(void *)(v21 + 24) = v25;
    *(unsigned char *)(v21 + 32) = v23;
  }
  uint64_t v27 = ~v8;
  int v28 = *(_DWORD *)(v22 + 36);
  *(unsigned char *)(v21 + 40) = *(unsigned char *)(v22 + 40);
  *(_DWORD *)(v21 + 36) = v28;
  *(_WORD *)(v21 + 41) = *(_WORD *)(v22 + 41);
  *(unsigned char *)(v21 + 43) = *(unsigned char *)(v22 + 43);
  *(void *)(v21 + 48) = *(void *)(v22 + 48);
  uint64_t v29 = (void *)(v9 & (v21 + 63));
  uint64_t v30 = (uint64_t *)(v9 & (v22 + 63));
  swift_retain();
  if (v43 < 0)
  {
    unint64_t v34 = (const void *)(((unint64_t)v30 + v10) & v27);
    uint64_t v33 = v42;
    if ((*(unsigned int (**)(const void *))(v5 + 48))(v34) <= 1)
    {
      uint64_t v31 = *v30;
      goto LABEL_26;
    }
LABEL_28:
    memcpy(v29, (const void *)(v9 & (v22 + 63)), v40);
    return v4;
  }
  uint64_t v31 = *v30;
  LODWORD(v32) = -1;
  if ((unint64_t)*v30 < 0xFFFFFFFF) {
    uint64_t v32 = *v30;
  }
  uint64_t v33 = v42;
  if ((v32 + 1) > 1) {
    goto LABEL_28;
  }
  unint64_t v34 = (const void *)(((unint64_t)v30 + v10) & v27);
LABEL_26:
  *uint64_t v29 = v31;
  unint64_t v35 = (void *)(((unint64_t)v29 + v10) & v27);
  unint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v36(v34, 1, v33))
  {
    memcpy(v35, v34, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v35, v34, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v35, 0, 1, v33);
  }
  if (v43) {
    uint64_t v37 = v41 + 7;
  }
  else {
    uint64_t v37 = v41 + 8;
  }
  *(void *)(((unint64_t)v35 + v37) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v34 + v37) & 0xFFFFFFFFFFFFFFF8);
  return v4;
}

uint64_t destroy for ActionAnimation(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  int v4 = *(unsigned __int8 *)(a1 + 128);
  if (v4 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 112), *(void *)(a1 + 120), v4);
  }
  swift_release();
  unint64_t v5 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  int v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 != 255) {
    outlined consume of BindTarget(*(void *)(v5 + 16), *(void *)(v5 + 24), v6);
  }
  swift_release();
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (uint64_t *)((v5 + (v9 | 7) + 56) & ~(v9 | 7));
  uint64_t v11 = ~v9;
  uint64_t v16 = v8;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) != 0)
  {
    uint64_t v14 = ((unint64_t)v10 + v9 + 8) & v11;
    uint64_t result = (*(uint64_t (**)(uint64_t))(v8 + 48))(v14);
    if (result > 1) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t result = *v10;
  LODWORD(v13) = -1;
  if ((unint64_t)*v10 < 0xFFFFFFFF) {
    uint64_t v13 = *v10;
  }
  if ((v13 + 1) <= 1)
  {
    uint64_t v14 = ((unint64_t)v10 + v9 + 8) & v11;
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v7);
    if (!result)
    {
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
      return v15(v14, v7);
    }
  }
  return result;
}

uint64_t initializeWithCopy for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  int v8 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 112);
    uint64_t v10 = *(void *)(a2 + 120);
    outlined copy of BindTarget(v9, v10, v8);
    *(void *)(a1 + 112) = v9;
    *(void *)(a1 + 120) = v10;
    *(unsigned char *)(a1 + 128) = v8;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  unint64_t v11 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  int v13 = *(unsigned __int8 *)(v12 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 == 255)
  {
    long long v16 = *(_OWORD *)(v12 + 16);
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = v16;
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 16);
    uint64_t v15 = *(void *)(v12 + 24);
    outlined copy of BindTarget(v14, v15, v13);
    *(void *)(v11 + 16) = v14;
    *(void *)(v11 + 24) = v15;
    *(unsigned char *)(v11 + 32) = v13;
  }
  int v17 = *(_DWORD *)(v12 + 36);
  *(unsigned char *)(v11 + 40) = *(unsigned char *)(v12 + 40);
  *(_DWORD *)(v11 + 36) = v17;
  *(_WORD *)(v11 + 41) = *(_WORD *)(v12 + 41);
  *(unsigned char *)(v11 + 43) = *(unsigned char *)(v12 + 43);
  *(void *)(v11 + 48) = *(void *)(v12 + 48);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (void *)((v11 + (v20 | 7) + 56) & ~(v20 | 7));
  unint64_t v22 = (uint64_t *)((v12 + (v20 | 7) + 56) & ~(v20 | 7));
  uint64_t v23 = *(unsigned int *)(v19 + 84);
  uint64_t v24 = ~v20;
  uint64_t v25 = v20 + 8;
  size_t v36 = *(void *)(v19 + 64);
  swift_retain();
  if ((v23 & 0x80000000) != 0)
  {
    int v28 = (const void *)(((unint64_t)v22 + v25) & v24);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v28, v23, v18) <= 1)
    {
      uint64_t v26 = *v22;
LABEL_14:
      *unint64_t v21 = v26;
      uint64_t v29 = (void *)(((unint64_t)v21 + v25) & v24);
      uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v30(v28, 1, v18))
      {
        size_t v31 = v36;
        if (v23) {
          size_t v32 = v36;
        }
        else {
          size_t v32 = v36 + 1;
        }
        memcpy(v29, v28, v32);
        if (v23) {
          goto LABEL_19;
        }
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v29, v28, v18);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
        size_t v31 = v36;
        if (v23)
        {
LABEL_19:
          size_t v33 = v31 + 7;
LABEL_25:
          *(void *)(((unint64_t)v29 + v33) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + v33) & 0xFFFFFFFFFFFFFFF8);
          return a1;
        }
      }
      size_t v33 = v31 + 8;
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v26 = *v22;
    LODWORD(v27) = -1;
    if ((unint64_t)*v22 < 0xFFFFFFFF) {
      uint64_t v27 = *v22;
    }
    if ((v27 + 1) <= 1)
    {
      int v28 = (const void *)(((unint64_t)v22 + v25) & v24);
      goto LABEL_14;
    }
  }
  size_t v34 = v36;
  if (!v23) {
    size_t v34 = v36 + 1;
  }
  memcpy(v21, v22, ((v34 + (v25 & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithCopy for ActionAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 19);
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v10;
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v11 = (long long *)(a1 + 112);
  unint64_t v12 = (long long *)(a2 + 14);
  int v13 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v13 == 255)
    {
      long long v22 = *v12;
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      *unint64_t v11 = v22;
    }
    else
    {
      uint64_t v19 = a2[14];
      uint64_t v20 = a2[15];
      outlined copy of BindTarget(v19, v20, *((unsigned char *)a2 + 128));
      *(void *)(a1 + 112) = v19;
      *(void *)(a1 + 120) = v20;
      *(unsigned char *)(a1 + 128) = v13;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    char v21 = *((unsigned char *)a2 + 128);
    *unint64_t v11 = *v12;
    *(unsigned char *)(a1 + 128) = v21;
  }
  else
  {
    uint64_t v14 = a2[14];
    uint64_t v15 = a2[15];
    outlined copy of BindTarget(v14, v15, *((unsigned char *)a2 + 128));
    uint64_t v16 = *(void *)(a1 + 112);
    uint64_t v17 = *(void *)(a1 + 120);
    *(void *)(a1 + 112) = v14;
    *(void *)(a1 + 120) = v15;
    unsigned __int8 v18 = *(unsigned char *)(a1 + 128);
    *(unsigned char *)(a1 + 128) = v13;
    outlined consume of BindTarget(v16, v17, v18);
  }
  int v23 = *((_DWORD *)a2 + 33);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v23;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(unsigned char *)(a1 + 139) = *((unsigned char *)a2 + 139);
  *(void *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  unint64_t v24 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = *(void *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = (long long *)(v24 + 16);
  uint64_t v27 = (long long *)(v25 + 16);
  int v28 = *(unsigned __int8 *)(v25 + 32);
  if (*(unsigned __int8 *)(v24 + 32) == 255)
  {
    if (v28 == 255)
    {
      long long v37 = *v27;
      *(unsigned char *)(v24 + 32) = *(unsigned char *)(v25 + 32);
      *uint64_t v26 = v37;
    }
    else
    {
      uint64_t v34 = *(void *)(v25 + 16);
      uint64_t v35 = *(void *)(v25 + 24);
      outlined copy of BindTarget(v34, v35, *(unsigned char *)(v25 + 32));
      *(void *)(v24 + 16) = v34;
      *(void *)(v24 + 24) = v35;
      *(unsigned char *)(v24 + 32) = v28;
    }
  }
  else if (v28 == 255)
  {
    outlined destroy of BindTarget(v24 + 16);
    char v36 = *(unsigned char *)(v25 + 32);
    *uint64_t v26 = *v27;
    *(unsigned char *)(v24 + 32) = v36;
  }
  else
  {
    uint64_t v29 = *(void *)(v25 + 16);
    uint64_t v30 = *(void *)(v25 + 24);
    outlined copy of BindTarget(v29, v30, *(unsigned char *)(v25 + 32));
    uint64_t v31 = *(void *)(v24 + 16);
    uint64_t v32 = *(void *)(v24 + 24);
    *(void *)(v24 + 16) = v29;
    *(void *)(v24 + 24) = v30;
    unsigned __int8 v33 = *(unsigned char *)(v24 + 32);
    *(unsigned char *)(v24 + 32) = v28;
    outlined consume of BindTarget(v31, v32, v33);
  }
  int v38 = *(_DWORD *)(v25 + 36);
  *(unsigned char *)(v24 + 40) = *(unsigned char *)(v25 + 40);
  *(_DWORD *)(v24 + 36) = v38;
  *(_WORD *)(v24 + 41) = *(_WORD *)(v25 + 41);
  *(unsigned char *)(v24 + 43) = *(unsigned char *)(v25 + 43);
  *(void *)(v24 + 48) = *(void *)(v25 + 48);
  swift_retain();
  swift_release();
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v42 = (uint64_t *)((v24 + (v41 | 7) + 56) & ~(v41 | 7));
  int v43 = (uint64_t *)((v25 + (v41 | 7) + 56) & ~(v41 | 7));
  uint64_t v44 = *(unsigned int *)(v40 + 84);
  uint64_t v45 = ~v41;
  uint64_t v46 = v41 + 8;
  uint64_t v47 = (v41 + 8) & ~v41;
  size_t v73 = *(void *)(v40 + 64);
  if ((v44 & 0x80000000) != 0)
  {
    uint64_t v71 = (v41 + 8) & ~v41;
    uint64_t v54 = *(uint64_t (**)(void))(v40 + 48);
    unsigned int v55 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v54)(((unint64_t)v42 + v46) & v45, v44, v39);
    int v56 = v44;
    unsigned int v57 = v55;
    int v72 = v56;
    unsigned int v58 = v54();
    if (v57 < 2)
    {
      LODWORD(v44) = v72;
      uint64_t v47 = v71;
      if (v58 <= 1)
      {
        uint64_t v50 = *v43;
        uint64_t v53 = (void *)(((unint64_t)v43 + v46) & v45);
LABEL_27:
        *uint64_t v42 = v50;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        long long v59 = (void *)(((unint64_t)v42 + v46) & v45);
        long long v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 48);
        int v61 = v60(v59, 1, v39);
        int v62 = v60(v53, 1, v39);
        if (v61)
        {
          int v63 = v72;
          if (!v62)
          {
            (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v59, v53, v39);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v59, 0, 1, v39);
            goto LABEL_51;
          }
        }
        else
        {
          int v63 = v72;
          if (!v62)
          {
            (*(void (**)(void *, void *, uint64_t))(v40 + 24))(v59, v53, v39);
LABEL_51:
            size_t v66 = v73;
            if (!v63) {
              size_t v66 = v73 + 1;
            }
            goto LABEL_53;
          }
          (*(void (**)(void *, uint64_t))(v40 + 8))(v59, v39);
        }
        if (v63) {
          size_t v68 = v73;
        }
        else {
          size_t v68 = v73 + 1;
        }
        memcpy(v59, v53, v68);
        goto LABEL_51;
      }
      goto LABEL_32;
    }
    LODWORD(v44) = v72;
    uint64_t v47 = v71;
    if (v58 <= 1)
    {
      uint64_t v50 = *v43;
      uint64_t v53 = (void *)(((unint64_t)v43 + v46) & v45);
LABEL_36:
      *uint64_t v42 = v50;
      long long v59 = (void *)(((unint64_t)v42 + v46) & v45);
      long long v64 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
      swift_bridgeObjectRetain();
      if (v64(v53, 1, v39))
      {
        if (v44) {
          size_t v65 = v73;
        }
        else {
          size_t v65 = v73 + 1;
        }
        memcpy(v59, v53, v65);
        if (v44) {
          goto LABEL_41;
        }
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v40 + 16))(v59, v53, v39);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v59, 0, 1, v39);
        if (v44)
        {
LABEL_41:
          size_t v66 = v73;
LABEL_53:
          size_t v69 = v66 + 7;
LABEL_54:
          *(void *)(((unint64_t)v59 + v69) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v53 + v69) & 0xFFFFFFFFFFFFFFF8);
          return a1;
        }
      }
      size_t v69 = v73 + 8;
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v48 = *v42;
    if ((unint64_t)*v42 >= 0xFFFFFFFF) {
      LODWORD(v48) = -1;
    }
    unsigned int v49 = v48 + 1;
    uint64_t v50 = *v43;
    if ((unint64_t)*v43 >= 0xFFFFFFFF) {
      LODWORD(v51) = -1;
    }
    else {
      uint64_t v51 = *v43;
    }
    unsigned int v52 = v51 + 1;
    if (v49 < 2)
    {
      if (v52 <= 1)
      {
        int v72 = *(_DWORD *)(v40 + 84);
        uint64_t v53 = (void *)(((unint64_t)v43 + v46) & v45);
        goto LABEL_27;
      }
LABEL_32:
      swift_bridgeObjectRelease();
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v40 + 48))(((unint64_t)v42 + v46) & v45, 1, v39))(*(void (**)(unint64_t, uint64_t))(v40 + 8))(((unint64_t)v42 + v46) & v45, v39); {
      goto LABEL_42;
      }
    }
    if (v52 <= 1)
    {
      uint64_t v53 = (void *)(((unint64_t)v43 + v46) & v45);
      goto LABEL_36;
    }
  }
LABEL_42:
  size_t v67 = v73;
  if (!v44) {
    size_t v67 = v73 + 1;
  }
  memcpy(v42, v43, ((v67 + v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unint64_t v9 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)(v10 + 16);
  long long v11 = *(_OWORD *)(v10 + 32);
  long long v13 = *(_OWORD *)v10;
  *(void *)(v9 + 48) = *(void *)(v10 + 48);
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)unint64_t v9 = v13;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v17 = *(_DWORD *)(v15 + 80);
  unint64_t v18 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = (void *)((v17 + 56 + v9) & v18);
  uint64_t v20 = (uint64_t *)((v17 + 56 + v10) & v18);
  uint64_t v21 = ~v17;
  size_t v34 = *(void *)(v15 + 64);
  uint64_t v22 = v17 + 8;
  if (v16 < 0)
  {
    unsigned __int8 v33 = *(unsigned int (**)(void))(v15 + 48);
    if (v33() <= 1)
    {
      uint64_t v23 = *v20;
      unint64_t v25 = v33;
      uint64_t v26 = (const void *)(((unint64_t)v20 + v22) & v21);
LABEL_8:
      *uint64_t v19 = v23;
      uint64_t v27 = (void *)(((unint64_t)v19 + v22) & v21);
      if (((unsigned int (*)(const void *, uint64_t, uint64_t))v25)(v26, 1, v14))
      {
        size_t v28 = v34;
        if (v16) {
          size_t v29 = v34;
        }
        else {
          size_t v29 = v34 + 1;
        }
        memcpy(v27, v26, v29);
        if (v16) {
          goto LABEL_13;
        }
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v27, v26, v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v27, 0, 1, v14);
        size_t v28 = v34;
        if (v16)
        {
LABEL_13:
          size_t v30 = v28 + 7;
LABEL_19:
          *(void *)(((unint64_t)v27 + v30) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v26 + v30) & 0xFFFFFFFFFFFFFFF8);
          return a1;
        }
      }
      size_t v30 = v28 + 8;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v23 = *v20;
    LODWORD(v24) = -1;
    if ((unint64_t)*v20 < 0xFFFFFFFF) {
      uint64_t v24 = *v20;
    }
    if ((v24 + 1) <= 1)
    {
      unint64_t v25 = *(unsigned int (**)(void))(v15 + 48);
      uint64_t v26 = (const void *)(((unint64_t)v20 + v22) & v21);
      goto LABEL_8;
    }
  }
  size_t v31 = v34;
  if (!v16) {
    size_t v31 = v34 + 1;
  }
  memcpy(v19, v20, ((v31 + (v22 & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for ActionAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  long long v8 = (_OWORD *)(a2 + 112);
  int v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 != 255)
  {
    int v10 = *(unsigned __int8 *)(a2 + 128);
    if (v10 != 255)
    {
      uint64_t v11 = *(void *)(a1 + 112);
      uint64_t v12 = *(void *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v8;
      *(unsigned char *)(a1 + 128) = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v8;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  unint64_t v13 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_bridgeObjectRelease();
  uint64_t v15 = (long long *)(v13 + 16);
  int v16 = (long long *)(v14 + 16);
  int v17 = *(unsigned __int8 *)(v13 + 32);
  if (v17 == 255)
  {
    long long v21 = *v16;
    *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
    *uint64_t v15 = v21;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(v14 + 32);
    if (v18 == 255)
    {
      outlined destroy of BindTarget(v13 + 16);
      char v22 = *(unsigned char *)(v14 + 32);
      *uint64_t v15 = *v16;
      *(unsigned char *)(v13 + 32) = v22;
    }
    else
    {
      uint64_t v19 = *(void *)(v13 + 16);
      uint64_t v20 = *(void *)(v13 + 24);
      *(_OWORD *)(v13 + 16) = *v16;
      *(unsigned char *)(v13 + 32) = v18;
      outlined consume of BindTarget(v19, v20, v17);
    }
  }
  int v23 = *(_DWORD *)(v14 + 36);
  *(unsigned char *)(v13 + 40) = *(unsigned char *)(v14 + 40);
  *(_DWORD *)(v13 + 36) = v23;
  *(_WORD *)(v13 + 41) = *(_WORD *)(v14 + 41);
  *(unsigned char *)(v13 + 43) = *(unsigned char *)(v14 + 43);
  *(void *)(v13 + 48) = *(void *)(v14 + 48);
  swift_release();
  uint64_t v24 = *(void *)(a3 + 16);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  unint64_t v27 = v14 + (v26 | 7);
  size_t v28 = (uint64_t *)((v13 + (v26 | 7) + 56) & ~(v26 | 7));
  size_t v29 = (uint64_t *)((v27 + 56) & ~(v26 | 7));
  uint64_t v30 = *(unsigned int *)(v25 + 84);
  uint64_t v31 = ~v26;
  uint64_t v32 = v26 + 8;
  uint64_t v33 = (v26 + 8) & ~v26;
  size_t v34 = *(void *)(v25 + 64);
  if ((v30 & 0x80000000) != 0)
  {
    uint64_t v65 = (v26 + 8) & ~v26;
    size_t v67 = *(void *)(v25 + 64);
    uint64_t v64 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v41 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v25 + 48);
    unsigned int v42 = v41(((unint64_t)v28 + v32) & v31, v30, v24);
    int v68 = v30;
    uint64_t v66 = v24;
    int v43 = (unsigned int (*)(char *, uint64_t, uint64_t))v41;
    unsigned int v44 = ((uint64_t (*)(void))v41)();
    if (v42 < 2)
    {
      uint64_t v24 = v66;
      size_t v34 = v67;
      uint64_t v25 = v64;
      if (v44 <= 1)
      {
        uint64_t v38 = *v29;
        uint64_t v40 = (char *)(((unint64_t)v29 + v32) & v31);
LABEL_22:
        *size_t v28 = v38;
        swift_bridgeObjectRelease();
        uint64_t v45 = (void *)(((unint64_t)v28 + v32) & v31);
        uint64_t v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
        int v47 = v46(v45, 1, v24);
        int v48 = v46(v40, 1, v24);
        if (v47)
        {
          size_t v49 = v67;
          if (!v48)
          {
            (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v45, v40, v24);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v45, 0, 1, v24);
LABEL_52:
            if (v30) {
              size_t v59 = v49;
            }
            else {
              size_t v59 = v49 + 1;
            }
            size_t v60 = v59 + 7;
            int v61 = (void *)(((unint64_t)v45 + v60) & 0xFFFFFFFFFFFFFFF8);
            int v62 = &v40[v60];
            goto LABEL_59;
          }
        }
        else
        {
          size_t v49 = v67;
          if (!v48)
          {
            (*(void (**)(void *, char *, uint64_t))(v25 + 40))(v45, v40, v24);
            goto LABEL_52;
          }
          (*(void (**)(void *, uint64_t))(v25 + 8))(v45, v24);
        }
        if (v30) {
          size_t v58 = v49;
        }
        else {
          size_t v58 = v49 + 1;
        }
        memcpy(v45, v40, v58);
        goto LABEL_52;
      }
      goto LABEL_27;
    }
    size_t v34 = v67;
    uint64_t v33 = v65;
    uint64_t v25 = v64;
    if (v44 <= 1)
    {
      uint64_t v38 = *v29;
      uint64_t v50 = (char *)(((unint64_t)v29 + v32) & v31);
LABEL_35:
      *size_t v28 = v38;
      uint64_t v54 = (void *)(((unint64_t)v28 + v32) & v31);
      if (v43(v50, 1, v66))
      {
        if (v68) {
          size_t v55 = v34;
        }
        else {
          size_t v55 = v34 + 1;
        }
        memcpy(v54, v50, v55);
        if (v68) {
          goto LABEL_40;
        }
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v25 + 32))(v54, v50, v66);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v66);
        if (v68)
        {
LABEL_40:
          size_t v56 = v34 + 7;
LABEL_58:
          int v61 = (void *)(((unint64_t)v54 + v56) & 0xFFFFFFFFFFFFFFF8);
          int v62 = &v50[v56];
LABEL_59:
          *int v61 = *(void *)((unint64_t)v62 & 0xFFFFFFFFFFFFFFF8);
          return a1;
        }
      }
      size_t v56 = v34 + 8;
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v35 = *v28;
    LODWORD(v36) = -1;
    if ((unint64_t)*v28 >= 0xFFFFFFFF) {
      LODWORD(v35) = -1;
    }
    unsigned int v37 = v35 + 1;
    uint64_t v38 = *v29;
    if ((unint64_t)*v29 < 0xFFFFFFFF) {
      uint64_t v36 = *v29;
    }
    unsigned int v39 = v36 + 1;
    if (v37 < 2)
    {
      uint64_t v65 = v33;
      if (v39 <= 1)
      {
        size_t v67 = *(void *)(v25 + 64);
        uint64_t v40 = (char *)(((unint64_t)v29 + v32) & v31);
        goto LABEL_22;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      unint64_t v51 = ((unint64_t)v28 + v32) & v31;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v25 + 48))(v51, 1, v24)) {
        (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v51, v24);
      }
      if (v30) {
        size_t v52 = v34;
      }
      else {
        size_t v52 = v34 + 1;
      }
      size_t v53 = v52 + v65;
      goto LABEL_45;
    }
    uint64_t v66 = *(void *)(a3 + 16);
    int v68 = *(_DWORD *)(v25 + 84);
    if (v39 <= 1)
    {
      int v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      uint64_t v50 = (char *)(((unint64_t)v29 + v32) & v31);
      goto LABEL_35;
    }
  }
  if (v68) {
    size_t v57 = v34;
  }
  else {
    size_t v57 = v34 + 1;
  }
  size_t v53 = v57 + v33;
LABEL_45:
  memcpy(v28, v29, ((v53 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionAnimation(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    int v8 = 2147483646;
  }
  else {
    int v8 = v7;
  }
  int v9 = v8 - 1;
  if ((v8 - 1) <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  if (v6) {
    uint64_t v12 = 7;
  }
  else {
    uint64_t v12 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v11 | 7;
  uint64_t v14 = v11 + 8;
  if (v10 < a2)
  {
    unint64_t v15 = ((v11 + 208) & ~v13)
        + ((v12 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v14 & ~v11)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v16 = a2 - v10;
    int v17 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = v16 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_30;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_30;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22802E8C0);
      case 4:
        int v21 = *(int *)((char *)a1 + v15);
        if (!v21) {
          break;
        }
LABEL_30:
        int v23 = v21 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v23 = 0;
          int v17 = *a1;
        }
        return v10 + (v17 | v23) + 1;
      default:
        break;
    }
  }
  if (v9 < 0)
  {
    uint64_t v25 = (unint64_t *)(((((unint64_t)a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v13 + 56) & ~v13);
    if (v7 > 0x7FFFFFFE)
    {
      unsigned int v27 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v25 + v14) & ~v11);
      LODWORD(v26) = v27 - 1;
    }
    else
    {
      unint64_t v26 = *v25;
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      unsigned int v27 = v26 + 1;
    }
    if (v27 < 2) {
      LODWORD(v26) = 0;
    }
    if (v26 >= 2) {
      return (v26 - 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v24 = *((void *)a1 + 18);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    return (v24 + 1);
  }
}

void storeEnumTagSinglePayload for ActionAnimation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  unsigned int v11 = v10 - 1;
  if (v10 - 1 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v10 - 1;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = (v13 + 208) & ~(v13 | 7);
  uint64_t v15 = (v13 + 8) & ~v13;
  size_t v16 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v16;
  }
  int v17 = v15 + v16;
  size_t v18 = v14 + ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 + ((v15 + v16 + 7) & 0xFFFFFFF8) == -8) {
    unsigned int v19 = a3 - v12 + 1;
  }
  else {
    unsigned int v19 = 2;
  }
  if (v19 >= 0x10000) {
    int v20 = 4;
  }
  else {
    int v20 = 2;
  }
  if (v19 < 0x100) {
    int v20 = 1;
  }
  if (v19 >= 2) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = 0;
  }
  if (v12 < a3) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  if (a2 > v12)
  {
    if (v14 + ((v15 + v16 + 7) & 0xFFFFFFF8) == -8) {
      int v23 = a2 - v12;
    }
    else {
      int v23 = 1;
    }
    if (v14 + ((v15 + v16 + 7) & 0xFFFFFFF8) != -8)
    {
      int v24 = ~v12 + a2;
      bzero(a1, v18);
      *(_DWORD *)a1 = v24;
    }
    switch(v22)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  switch(v22)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x22802EC28);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_39;
    default:
LABEL_39:
      if (a2)
      {
LABEL_40:
        if ((v11 & 0x80000000) != 0)
        {
          uint64_t v25 = (unsigned char *)((((unint64_t)(a1 + 159) & 0xFFFFFFFFFFFFFFF8) + (v13 | 7) + 56) & ~(v13 | 7));
          if (v11 >= a2 && (uint64_t v26 = a2 + 1, v26 <= v10))
          {
            if (a2 != -1)
            {
              if (v9 > 0x7FFFFFFE)
              {
                uint64_t v25 = (unsigned char *)((unint64_t)&v25[v13 + 8] & ~v13);
                if (v26 <= v9)
                {
                  uint64_t v30 = a2 + 2;
                  uint64_t v31 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
                  v31(v25, v30);
                }
                else
                {
                  if (v16 <= 3) {
                    int v28 = ~(-1 << (8 * v16));
                  }
                  else {
                    int v28 = -1;
                  }
                  if (v16)
                  {
                    int v27 = v28 & (a2 - v9);
                    if (v16 <= 3) {
                      int v29 = v16;
                    }
                    else {
                      int v29 = 4;
                    }
                    bzero(v25, v16);
                    switch(v29)
                    {
                      case 2:
                        *(_WORD *)uint64_t v25 = v27;
                        break;
                      case 3:
                        *(_WORD *)uint64_t v25 = v27;
                        void v25[2] = BYTE2(v27);
                        break;
                      case 4:
                        goto LABEL_49;
                      default:
                        *uint64_t v25 = v27;
                        break;
                    }
                  }
                }
              }
              else if (v26 > 0x7FFFFFFE)
              {
                *(void *)uint64_t v25 = 0;
                *(_DWORD *)uint64_t v25 = a2 - 2147483646;
              }
              else
              {
                *(void *)uint64_t v25 = v26;
              }
            }
          }
          else if (((v17 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
          {
            int v27 = a2 - v10;
            bzero(v25, ((v17 + 7) & 0xFFFFFFF8) + 8);
LABEL_49:
            *(_DWORD *)uint64_t v25 = v27;
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 136) = 0u;
          *(_OWORD *)(a1 + 120) = 0u;
          *(_OWORD *)(a1 + 104) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 56) = 0u;
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 18) = a2 - 1;
        }
      }
      return;
  }
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ActionEventData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ActionEventData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionEventData()
{
  return &type metadata for ActionEventData;
}

uint64_t type metadata completion function for ActionDefinition()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ActionDefinition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v10 = ((v9 + 7 + ((v7 + 8) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v11 = v7 & 0x100000;
  uint64_t v12 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v11 != 0 || v10 > 0x18)
  {
    a1 = (uint64_t *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
    size_t v16 = (const void *)(((unint64_t)a2 + v8 + 8) & ~v8);
    int v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v4))
    {
      memcpy(v15, v16, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v15, v16, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v15, 0, 1, v4);
    }
    *(void *)(((unint64_t)v15 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for ActionDefinition(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v4 - 8);
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v5, 1, v4);
  if (!result)
  {
    int v7 = *(uint64_t (**)(unint64_t, uint64_t))(v8 + 8);
    return v7(v5, v4);
  }
  return result;
}

void *initializeWithCopy for ActionDefinition(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  int v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  size_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_bridgeObjectRetain();
  if (v9(v8, 1, v4))
  {
    int v10 = *(_DWORD *)(v5 + 84);
    size_t v11 = *(void *)(v5 + 64);
    if (v10) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v11 + 1;
    }
    memcpy(v7, v8, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    uint64_t v14 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v13 = v5 + 56;
    v14(v7, 0, 1, v4);
    int v10 = *(_DWORD *)(v13 + 28);
    size_t v11 = *(void *)(v13 + 8);
  }
  if (v10) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v11 + 1;
  }
  *(void *)(((unint64_t)v7 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for ActionDefinition(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  size_t v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  int v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for ActionDefinition(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  uint64_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    int v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  *(void *)(((unint64_t)v7 + v14 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ActionDefinition(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  int v9 = (void *)(((unint64_t)a1 + v8 + 8) & ~v8);
  size_t v10 = (void *)(((unint64_t)a2 + v8 + 8) & ~v8);
  size_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(v9, 1, v6);
  int v13 = v11(v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_12;
    }
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(v9, v10, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    int v14 = *(_DWORD *)(v7 + 84);
    size_t v15 = *(void *)(v7 + 64);
  }
  if (v14) {
    size_t v16 = v15;
  }
  else {
    size_t v16 = v15 + 1;
  }
  memcpy(v9, v10, v16);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v17 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v7 + 64) + 1;
  }
  *(void *)(((unint64_t)v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActionDefinition(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x22802F858);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v7 > 0x7FFFFFFE)
  {
    unsigned int v21 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)a1 + v9 + 8) & ~v9);
    if (v21 >= 2) {
      return v21 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v20 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v20) = -1;
    }
    if ((v20 + 1) >= 2) {
      return v20;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for ActionDefinition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + ((v11 + 8) & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x22802FB14);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 > 0x7FFFFFFE)
        {
          int v19 = (unsigned char *)((unint64_t)&a1[v11 + 8] & ~v11);
          if (v9 >= a2)
          {
            uint64_t v23 = a2 + 1;
            int v24 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            unint64_t v25 = (unint64_t)&a1[v11 + 8] & ~v11;
            v24(v25, v23);
          }
          else
          {
            if (v12 <= 3) {
              int v20 = ~(-1 << (8 * v12));
            }
            else {
              int v20 = -1;
            }
            if (v12)
            {
              int v21 = v20 & (~v9 + a2);
              if (v12 <= 3) {
                int v22 = v12;
              }
              else {
                int v22 = 4;
              }
              bzero(v19, v12);
              switch(v22)
              {
                case 2:
                  *(_WORD *)int v19 = v21;
                  break;
                case 3:
                  *(_WORD *)int v19 = v21;
                  void v19[2] = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)int v19 = v21;
                  break;
                default:
                  *int v19 = v21;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)a1 = 0;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)a1 = a2;
        }
      }
      return;
  }
}

void *type metadata accessor for ActionEventParameterUnused.CodingKeys()
{
  return &unk_26DC9DF00;
}

uint64_t destroy for AnyActionAnimation(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  int v2 = *(unsigned __int8 *)(a1 + 128);
  if (v2 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 112), *(void *)(a1 + 120), v2);
  }
  swift_release();
  swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 184);
  if (v3 != 255) {
    outlined consume of BindTarget(*(void *)(a1 + 168), *(void *)(a1 + 176), v3);
  }

  return swift_release();
}

uint64_t initializeWithCopy for AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v5;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  int v6 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 112);
    uint64_t v8 = *(void *)(a2 + 120);
    outlined copy of BindTarget(v7, v8, v6);
    *(void *)(a1 + 112) = v7;
    *(void *)(a1 + 120) = v8;
    *(unsigned char *)(a1 + 128) = v6;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  uint64_t v9 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  int v10 = *(unsigned __int8 *)(a2 + 184);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 168);
    uint64_t v12 = *(void *)(a2 + 176);
    outlined copy of BindTarget(v11, v12, v10);
    *(void *)(a1 + 168) = v11;
    *(void *)(a1 + 176) = v12;
    *(unsigned char *)(a1 + 184) = v10;
  }
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnyActionAnimation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 19);
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(void *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (long long *)(a1 + 112);
  int v10 = (long long *)(a2 + 14);
  int v11 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v11 == 255)
    {
      long long v20 = *v10;
      *(unsigned char *)(a1 + 128) = *((unsigned char *)a2 + 128);
      *uint64_t v9 = v20;
    }
    else
    {
      uint64_t v17 = a2[14];
      uint64_t v18 = a2[15];
      outlined copy of BindTarget(v17, v18, *((unsigned char *)a2 + 128));
      *(void *)(a1 + 112) = v17;
      *(void *)(a1 + 120) = v18;
      *(unsigned char *)(a1 + 128) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    char v19 = *((unsigned char *)a2 + 128);
    *uint64_t v9 = *v10;
    *(unsigned char *)(a1 + 128) = v19;
  }
  else
  {
    uint64_t v12 = a2[14];
    uint64_t v13 = a2[15];
    outlined copy of BindTarget(v12, v13, *((unsigned char *)a2 + 128));
    uint64_t v14 = *(void *)(a1 + 112);
    uint64_t v15 = *(void *)(a1 + 120);
    *(void *)(a1 + 112) = v12;
    *(void *)(a1 + 120) = v13;
    unsigned __int8 v16 = *(unsigned char *)(a1 + 128);
    *(unsigned char *)(a1 + 128) = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  int v21 = *((_DWORD *)a2 + 33);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(unsigned char *)(a1 + 139) = *((unsigned char *)a2 + 139);
  *(void *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  *(void *)(a1 + 152) = a2[19];
  *(void *)(a1 + 160) = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v22 = (long long *)(a1 + 168);
  uint64_t v23 = (long long *)(a2 + 21);
  int v24 = *((unsigned __int8 *)a2 + 184);
  if (*(unsigned __int8 *)(a1 + 184) == 255)
  {
    if (v24 == 255)
    {
      long long v33 = *v23;
      *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
      *int v22 = v33;
    }
    else
    {
      uint64_t v30 = a2[21];
      uint64_t v31 = a2[22];
      outlined copy of BindTarget(v30, v31, *((unsigned char *)a2 + 184));
      *(void *)(a1 + 168) = v30;
      *(void *)(a1 + 176) = v31;
      *(unsigned char *)(a1 + 184) = v24;
    }
  }
  else if (v24 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    char v32 = *((unsigned char *)a2 + 184);
    *int v22 = *v23;
    *(unsigned char *)(a1 + 184) = v32;
  }
  else
  {
    uint64_t v25 = a2[21];
    uint64_t v26 = a2[22];
    outlined copy of BindTarget(v25, v26, *((unsigned char *)a2 + 184));
    uint64_t v27 = *(void *)(a1 + 168);
    uint64_t v28 = *(void *)(a1 + 176);
    *(void *)(a1 + 168) = v25;
    *(void *)(a1 + 176) = v26;
    unsigned __int8 v29 = *(unsigned char *)(a1 + 184);
    *(unsigned char *)(a1 + 184) = v24;
    outlined consume of BindTarget(v27, v28, v29);
  }
  int v34 = *((_DWORD *)a2 + 47);
  *(unsigned char *)(a1 + 192) = *((unsigned char *)a2 + 192);
  *(_DWORD *)(a1 + 188) = v34;
  *(_WORD *)(a1 + 193) = *(_WORD *)((char *)a2 + 193);
  *(unsigned char *)(a1 + 195) = *((unsigned char *)a2 + 195);
  *(void *)(a1 + 200) = a2[25];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for AnyActionAnimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  long long v6 = (_OWORD *)(a2 + 112);
  int v7 = *(unsigned __int8 *)(a1 + 128);
  if (v7 != 255)
  {
    int v8 = *(unsigned __int8 *)(a2 + 128);
    if (v8 != 255)
    {
      uint64_t v9 = *(void *)(a1 + 112);
      uint64_t v10 = *(void *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v6;
      *(unsigned char *)(a1 + 128) = v8;
      outlined consume of BindTarget(v9, v10, v7);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v6;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(unsigned char *)(a1 + 139) = *(unsigned char *)(a2 + 139);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (_OWORD *)(a2 + 168);
  int v13 = *(unsigned __int8 *)(a1 + 184);
  if (v13 == 255)
  {
LABEL_10:
    *(_OWORD *)(a1 + 168) = *v12;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    goto LABEL_11;
  }
  int v14 = *(unsigned __int8 *)(a2 + 184);
  if (v14 == 255)
  {
    outlined destroy of BindTarget(a1 + 168);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(a1 + 168);
  uint64_t v16 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v12;
  *(unsigned char *)(a1 + 184) = v14;
  outlined consume of BindTarget(v15, v16, v13);
LABEL_11:
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  *(unsigned char *)(a1 + 195) = *(unsigned char *)(a2 + 195);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyActionAnimation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyActionAnimation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 144) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyActionAnimation()
{
  return &type metadata for AnyActionAnimation;
}

uint64_t sub_22803039C()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2280303D4()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t partial apply for dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(uint64_t a1, uint64_t a2)
{
  return dispatchEvent #1 <A>(sourceObject:payloadRef:) in static EntityAction.__subscribe(to:_:_:)(a1, a2, *(void *)(v2 + 32), *(void *)(v2 + 40), *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t sub_22803043C()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t partial apply for creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  return creationWrapper #1 <A>(playbackController:eventData:reversed:startTime:duration:engine:instanceID:targetEntity:) in static ActionHandlerProtocol.__registerCommon(engine:_:)(a1, a2, a3, a4, a5, a6, *(void (**)(char *))(v9 + 32), *(void *)(v9 + 40), a7, a8, a9);
}

uint64_t sub_2280304A0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t _s10RealityKit27AnimationPlaybackControllerC0A10Foundation15ActionEventDataVSbS2dAA8__EngineCSVAA6EntityCSgAD0G15HandlerProtocol_pSgIeggyyyygygr_AcFSbS2dAHSVAkMIegnnnnnnnnr_TRTA_0(uint64_t *a1, _OWORD *a2, unsigned __int8 *a3, double *a4, double *a5, void *a6, void *a7, void *a8)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, _OWORD *, void, void, void, void, double, double))(v8 + 16);
  uint64_t v10 = *a1;
  long long v11 = a2[3];
  v14[2] = a2[2];
  v14[3] = v11;
  _OWORD v14[4] = a2[4];
  long long v12 = a2[1];
  v14[0] = *a2;
  v14[1] = v12;
  return v9(v10, v14, *a3, *a6, *a7, *a8, *a4, *a5);
}

uint64_t sub_228030540()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #1 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_22803055C()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #2 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_228030578()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #3 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #3 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_228030594()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #4 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #4 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2280305B0()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #5 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #5 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2280305CC()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #6 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #6 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_2280305E8()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #7 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #7 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_228030604()
{
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #8 in static ActionHandlerProtocol.subscribe(_:)(void *a1)
{
  return closure #8 in static ActionHandlerProtocol.subscribe(_:)(a1, v1[4], v1[2], v1[3]);
}

uint64_t outlined init with copy of ActionHandlerProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ActionHandlerProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionHandlerProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __RKVisibilityHidePopAnimation.deinit()
{
  return v0;
}

uint64_t __RKVisibilityHidePopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityHidePopAnimation()
{
  return self;
}

uint64_t specialized static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(long long *a1, float a2, float a3, float32x4_t a4, uint64_t a5, unsigned char *a6, char a7)
{
  long long v28 = *a1;
  long long v26 = a1[2];
  long long v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 73, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #1 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 117, 0, MEMORY[0x263F8EE78]);
      int v13 = &outlined read-only object #2 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 151, 0, MEMORY[0x263F8EE78]);
    int v13 = &outlined read-only object #0 of static __RKVisibilityHidePopAnimation.createVisibilityHidePopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((void *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  RESampledAnimationDefaultParameters();
  uint64_t v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  char v7 = BYTE1(v31);
  float v9 = (float)v15;
  unsigned int v8 = DWORD2(v31);
  uint64_t v16 = (long long *)&rawValue[6 * v15];
  long long v24 = *v16;
  long long v25 = *(v16 - 1);
  long long v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_15:
  }
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  unint64_t v18 = rawValue[2];
  unint64_t v17 = rawValue[3];
  float v19 = a2 / v9;
  if (v18 >= v17 >> 1) {
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, rawValue);
  }
  rawValue[2] = v18 + 1;
  long long v20 = &rawValue[6 * v18];
  void v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  long long v30 = v28;
  long long v31 = v27;
  long long v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityHideXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t *)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((void *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(void *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  uint64_t result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    uint64_t v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_22830EC60;
    *(void *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioMixGroup.init(_name:id:gain:speed:isMuted:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v12 = result;
  if (a4)
  {
    uint64_t result = REAudioMixGroupsComponentCreateMixGroupID();
    a3 = result;
  }
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = 1;
  *(void *)(a6 + 24) = 0;
  *(_WORD *)(a6 + 32) = 1;
  *(void *)(a6 + 40) = v12;
  *(void *)(a6 + 48) = a2;
  *(double *)(a6 + 56) = a7;
  *(double *)(a6 + 64) = a8;
  *(unsigned char *)(a6 + 72) = a5 & 1;
  return result;
}

uint64_t AudioMixGroup.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

double AudioMixGroup.gain.getter()
{
  return *(double *)(v0 + 56);
}

void AudioMixGroup.gain.setter(double a1)
{
  *(double *)(v1 + 56) = a1;
  *(unsigned char *)(v1 + 33) = 1;
}

uint64_t (*AudioMixGroup.gain.modify(void *a1))(uint64_t result, char a2)
{
  *a1 = v1;
  return AudioMixGroup.gain.modify;
}

uint64_t AudioMixGroup.gain.modify(uint64_t result, char a2)
{
  if ((a2 & 1) == 0) {
    *(unsigned char *)(*(void *)result + 33) = 1;
  }
  return result;
}

double AudioMixGroup.speed.getter()
{
  return *(double *)(v0 + 64);
}

void AudioMixGroup.speed.setter(double a1)
{
  *(double *)(v1 + 64) = a1;
}

uint64_t (*AudioMixGroup.speed.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioMixGroup.isMuted.getter()
{
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t AudioMixGroup.isMuted.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 72) = result;
  return result;
}

uint64_t (*AudioMixGroup.isMuted.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double AudioMixGroup.init(name:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = REAudioMixGroupsComponentCreateMixGroupID();
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 1;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 56) = xmmword_2283306B0;
  *(unsigned char *)(a3 + 72) = 0;
  return result;
}

Swift::Void __swiftcall AudioMixGroup.fade(to:duration:)(Swift::Double to, Swift::Double duration)
{
  *(Swift::Double *)(v2 + 8) = to;
  *(unsigned char *)(v2 + 16) = 0;
  *(Swift::Double *)(v2 + 24) = duration;
  *(unsigned char *)(v2 + 32) = 0;
}

void AudioMixGroup.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 56);
  Swift::UInt64 v2 = *(void *)(v0 + 64);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 72);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
}

Swift::Int AudioMixGroup.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)(v0 + 56);
  Swift::UInt64 v2 = *(void *)(v0 + 64);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 72);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioMixGroup()
{
  Swift::UInt64 v1 = *(void *)(v0 + 56);
  Swift::UInt64 v2 = *(void *)(v0 + 64);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 72);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v1;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v2;
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t AudioMixGroup.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  Swift::UInt64 v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  char v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *((unsigned char *)v0 + 16);
  uint64_t v8 = *((void *)v0 + 3);
  char v9 = *((unsigned char *)v0 + 32);
  char v10 = *((unsigned char *)v0 + 33);
  uint64_t v12 = *((void *)v0 + 5);
  uint64_t v11 = *((void *)v0 + 6);
  uint64_t v13 = *((void *)v0 + 7);
  uint64_t v14 = *((void *)v0 + 8);
  char v15 = *((unsigned char *)v0 + 72);
  long long v21 = *v0;
  char v22 = v6;
  uint64_t v23 = v8;
  char v24 = v9;
  char v25 = v10;
  uint64_t v26 = v12;
  uint64_t v27 = v11;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  char v30 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_228324960;
  *(void *)(v16 + 32) = 1701667182;
  *(void *)(v16 + 40) = 0xE400000000000000;
  uint64_t v17 = MEMORY[0x263F8D310];
  *(void *)(v16 + 48) = v12;
  *(void *)(v16 + 56) = v11;
  *(void *)(v16 + 72) = v17;
  *(void *)(v16 + 80) = 1852399975;
  *(void *)(v16 + 88) = 0xE400000000000000;
  uint64_t v18 = MEMORY[0x263F8D538];
  *(void *)(v16 + 96) = v13;
  *(void *)(v16 + 120) = v18;
  *(void *)(v16 + 128) = 0x6465657073;
  *(void *)(v16 + 136) = 0xE500000000000000;
  *(void *)(v16 + 144) = v14;
  *(void *)(v16 + 168) = v18;
  *(void *)(v16 + 176) = 0x646574754D7369;
  *(void *)(v16 + 184) = 0xE700000000000000;
  *(void *)(v16 + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(v16 + 192) = v15;
  uint64_t v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 1, 1, v19);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  swift_bridgeObjectRetain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static AudioMixGroup.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 56);
  double v2 = *(double *)(a1 + 64);
  int v4 = *(unsigned __int8 *)(a1 + 72);
  double v6 = *(double *)(a2 + 56);
  double v5 = *(double *)(a2 + 64);
  int v7 = *(unsigned __int8 *)(a2 + 72);
  if (*(void *)(a1 + 40) == *(void *)(a2 + 40) && *(void *)(a1 + 48) == *(void *)(a2 + 48))
  {
    if (v3 != v6 || v2 != v5) {
      return 0;
    }
    return v4 ^ v7 ^ 1u;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) != 0 && v3 == v6 && v2 == v5) {
    return v4 ^ v7 ^ 1u;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioMixGroup and conformance AudioMixGroup()
{
  unint64_t result = lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup;
  if (!lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioMixGroup and conformance AudioMixGroup);
  }
  return result;
}

double sub_2280310AC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 56);
  *a2 = result;
  return result;
}

double sub_2280310B8(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 56) = *a1;
  *(unsigned char *)(a2 + 33) = 1;
  return result;
}

uint64_t initializeWithCopy for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AudioMixGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioMixGroup(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioMixGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioMixGroup()
{
  return &type metadata for AudioMixGroup;
}

float DockingRegionComponent.width.getter()
{
  return *(float *)(v0 + 32);
}

double DockingRegionComponent.width.setter(float32_t a1)
{
  v1[2].f32[0] = a1;
  REAABBInit();
  *uint64_t v1 = v2;
  v1[1] = v3;
  *(void *)&double result = vsubq_f32(v3, v2).u64[0];
  v1[2].i32[0] = LODWORD(result);
  return result;
}

double DockingRegionComponent.setBounds()()
{
  REAABBInit();
  *uint64_t v0 = v1;
  v0[1] = v2;
  *(void *)&double result = vsubq_f32(v2, v1).u64[0];
  v0[2].i32[0] = LODWORD(result);
  return result;
}

uint64_t (*DockingRegionComponent.width.modify(uint64_t a1))(_DWORD *a1)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 32);
  return DockingRegionComponent.width.modify;
}

uint64_t DockingRegionComponent.width.modify(_DWORD *a1)
{
  uint64_t v1 = *(float32x4_t **)a1;
  *(_DWORD *)(*(void *)a1 + 32) = a1[2];
  uint64_t result = REAABBInit();
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t DockingRegionComponent.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = REAABBEmpty();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance DockingRegionComponent@<X0>(float32x4_t *a1@<X8>)
{
  REAABBEmpty();
  uint64_t result = REDockingRegionComponentGetBounds();
  *a1 = v3;
  a1[1] = v4;
  a1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t static DockingRegionComponent.__fromCore(_:)@<X0>(float32x4_t *a1@<X8>)
{
  REAABBEmpty();
  uint64_t result = REDockingRegionComponentGetBounds();
  *a1 = v3;
  a1[1] = v4;
  a1[2].i32[0] = vsubq_f32(v4, v3).u32[0];
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DockingRegionComponent()
{
  REDockingRegionComponentSetBounds();

  return RENetworkMarkComponentDirty();
}

uint64_t DockingRegionComponent.__toCore(_:)()
{
  REDockingRegionComponentSetBounds();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DockingRegionComponent(_DWORD *a1@<X8>)
{
  *a1 = 5005;
}

void static DockingRegionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5005;
}

uint64_t DockingRegionComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  float32x4_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  int v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v8 = *(_OWORD *)(v0 + 16);
  int v9 = *(_DWORD *)(v0 + 32);
  v13[0] = *(_OWORD *)v0;
  v13[1] = v8;
  int v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_22830EC60;
  *(void *)(v10 + 32) = 0x6874646977;
  *(void *)(v10 + 40) = 0xE500000000000000;
  *(void *)(v10 + 72) = MEMORY[0x263F8D5C8];
  *(_DWORD *)(v10 + 48) = v9;
  uint64_t v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

float sub_228031798@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(a1 + 32);
  *a2 = result;
  return result;
}

double sub_2280317A4(_DWORD *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 32) = *a1;
  return DockingRegionComponent.setBounds()();
}

__n128 __swift_memcpy36_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for DockingRegionComponent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DockingRegionComponent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 36) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DockingRegionComponent()
{
  return &type metadata for DockingRegionComponent;
}

uint64_t __RKEntityGlobalTapTrigger.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityGlobalTapTrigger.matches(with:)()
{
  type metadata accessor for __RKEntityGlobalTapTrigger();
  if (swift_dynamicCastClass()) {
    return 1;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v1 = swift_dynamicCastClass();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  swift_beginAccess();
  unint64_t v3 = *(void *)(v2 + 24);
  if (v3 >> 62)
  {
LABEL_30:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v0 = result;
    if (!result) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v0 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v0)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_release();
      return v0;
    }
  }
  unint64_t v5 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v6 = MEMORY[0x22A689930](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v6 = *(void *)(v3 + 32);
    swift_retain();
  }
  char v7 = __RKEntityGlobalTapTrigger.matches(with:)(v6);
  uint64_t result = swift_release();
  if (v7)
  {
LABEL_10:
    uint64_t v0 = 1;
    goto LABEL_14;
  }
  if (v0 == 1)
  {
    uint64_t v0 = 0;
    goto LABEL_14;
  }
  if (v5)
  {
    uint64_t v8 = MEMORY[0x22A689930](1, v3);
    goto LABEL_20;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v8 = *(void *)(v3 + 40);
    swift_retain();
LABEL_20:
    char v9 = __RKEntityGlobalTapTrigger.matches(with:)(v8);
    uint64_t result = swift_release();
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v0 - 2;
      while (1)
      {
        uint64_t v0 = v11 != v10;
        if (v11 == v10) {
          goto LABEL_14;
        }
        unint64_t v14 = v10 + 2;
        if (v5)
        {
          uint64_t v12 = MEMORY[0x22A689930](v10 + 2, v3);
          if (__OFADD__(v14, 1)) {
            goto LABEL_29;
          }
        }
        else
        {
          if (v14 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_34;
          }
          uint64_t v12 = *(void *)(v3 + 8 * v10 + 48);
          swift_retain();
          if (__OFADD__(v14, 1))
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
        }
        char v13 = __RKEntityGlobalTapTrigger.matches(with:)(v12);
        uint64_t result = swift_release();
        ++v10;
        if (v13) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_10;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t __RKEntityGlobalTapTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKEntityTapPointTrigger.matches(with:)()
{
  type metadata accessor for __RKEntityTapPointTrigger();
  uint64_t v1 = swift_dynamicCastClass();
  if (v1 && vabdd_f64(*(double *)(v1 + 24), v0[3]) <= v0[5] && vabdd_f64(*(double *)(v1 + 32), v0[4]) <= v0[6]) {
    return 1;
  }
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  swift_beginAccess();
  unint64_t v4 = *(void *)(v3 + 24);
  if (v4 >> 62)
  {
LABEL_32:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      swift_release();
      return v5;
    }
  }
  unint64_t v7 = v4 & 0xC000000000000001;
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x22A689930](0, v4);
  }
  else
  {
    if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v8 = *(void *)(v4 + 32);
    swift_retain();
  }
  char v9 = __RKEntityTapPointTrigger.matches(with:)(v8);
  uint64_t result = swift_release();
  if (v9)
  {
LABEL_11:
    uint64_t v5 = 1;
    goto LABEL_15;
  }
  if (v5 == 1)
  {
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  if (v7)
  {
    uint64_t v10 = MEMORY[0x22A689930](1, v4);
    goto LABEL_22;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v10 = *(void *)(v4 + 40);
    swift_retain();
LABEL_22:
    char v11 = __RKEntityTapPointTrigger.matches(with:)(v10);
    uint64_t result = swift_release();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = 0;
      uint64_t v13 = v5 - 2;
      while (1)
      {
        uint64_t v5 = v13 != v12;
        if (v13 == v12) {
          goto LABEL_15;
        }
        unint64_t v16 = v12 + 2;
        if (v7)
        {
          uint64_t v14 = MEMORY[0x22A689930](v12 + 2, v4);
          if (__OFADD__(v16, 1)) {
            goto LABEL_31;
          }
        }
        else
        {
          if (v16 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_36;
          }
          uint64_t v14 = *(void *)(v4 + 8 * v12 + 48);
          swift_retain();
          if (__OFADD__(v16, 1))
          {
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
        }
        char v15 = __RKEntityTapPointTrigger.matches(with:)(v14);
        uint64_t result = swift_release();
        ++v12;
        if (v15) {
          goto LABEL_15;
        }
      }
    }
    goto LABEL_11;
  }
LABEL_37:
  __break(1u);
  return result;
}

__n128 __RKEntityTapPointTrigger.copy(with:)@<Q0>(uint64_t *a1@<X8>)
{
  __n128 v8 = *(__n128 *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = type metadata accessor for __RKEntityTapPointTrigger();
  uint64_t v6 = swift_allocObject();
  __n128 result = v8;
  *(__n128 *)(v6 + 24) = v8;
  *(void *)(v6 + 40) = v3;
  *(void *)(v6 + 48) = v4;
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  a1[3] = v5;
  *a1 = v6;
  return result;
}

void __RKEntityTapPointTrigger.__allocating_init()()
{
}

uint64_t __RKEntityTapPointTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKEntityTapTrigger.targetEntity.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_release();
}

uint64_t (*__RKEntityTapTrigger.targetEntity.modify())()
{
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityTapTrigger.__allocating_init(targetEntity:reversible:)(uint64_t a1, unsigned __int8 a2)
{
  int v4 = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = 0;
  swift_beginAccess();
  *(void *)(v5 + 24) = a1;
  swift_release();
  *(_WORD *)(v5 + 16) = 0;
  *(unsigned char *)(v5 + 18) = 0;
  if (v4 != 2)
  {
    swift_beginAccess();
    *(unsigned char *)(v5 + 16) = a2 & 1;
  }
  return v5;
}

uint64_t __RKEntityTapTrigger.init(targetEntity:reversible:)(uint64_t a1, unsigned __int8 a2)
{
  int v5 = a2;
  *(void *)(v2 + 24) = 0;
  swift_beginAccess();
  *(void *)(v2 + 24) = a1;
  swift_release();
  *(_WORD *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 18) = 0;
  if (v5 != 2)
  {
    swift_beginAccess();
    *(unsigned char *)(v2 + 16) = a2 & 1;
  }
  return v2;
}

uint64_t __RKEntityTapTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  size_t v58 = (char *)type metadata accessor for UUID();
  uint64_t v4 = *((void *)v58 - 1);
  MEMORY[0x270FA5388](v58);
  v55[0] = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v6);
  uint64_t v59 = (uint64_t)v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v57 = (uint64_t)v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v55 - v11;
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)v55 - v14;
  uint64_t v62 = 91;
  unint64_t v63 = 0xE100000000000000;
  v61._uint64_t countAndFlagsBits = 0;
  v61._object = (void *)0xE000000000000000;
  uint64_t v60 = v1;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8285;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = 8250;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  swift_release();
  uint64_t v20 = v62;
  unint64_t v19 = v63;
  type metadata accessor for __RKEntityTapTrigger();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    uint64_t v62 = v20;
    unint64_t v63 = v19;
    os_log_type_t v28 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v28, &v62);
    goto LABEL_16;
  }
  uint64_t v22 = v21;
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  swift_retain();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v23, &v62);
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  uint64_t v24 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v24, &v62, partial apply for implicit closure #2 in __RKEntityTapTrigger.matches(with:), v1);
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  uint64_t v25 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v25, &v62, partial apply for implicit closure #4 in __RKEntityTapTrigger.matches(with:), v1);
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  uint64_t v26 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v26, &v62, partial apply for implicit closure #6 in __RKEntityTapTrigger.matches(with:), v22);
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  uint64_t v27 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v27, &v62, partial apply for implicit closure #8 in __RKEntityTapTrigger.matches(with:), v22);
  swift_beginAccess();
  if (*(void *)(v1 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v15);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v4 + 56))(v15, 1, 1, v58);
  }
  size_t v56 = v15;
  swift_beginAccess();
  uint64_t v29 = *(void *)(v22 + 24);
  v55[1] = a1;
  v55[2] = v2;
  if (v29)
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v12);
    swift_release();
    uint64_t v30 = (uint64_t)v58;
    uint64_t v31 = v4;
  }
  else
  {
    uint64_t v31 = v4;
    uint64_t v30 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v4 + 56))(v12, 1, 1, v58);
  }
  uint64_t v32 = v59;
  uint64_t v33 = v59 + *(int *)(v6 + 48);
  uint64_t v34 = (uint64_t)v56;
  outlined init with copy of UUID?((uint64_t)v56, v59);
  outlined init with copy of UUID?((uint64_t)v12, v33);
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v35(v32, 1, v30) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?(v34, &demangling cache variable for type metadata for UUID?);
    if (v35(v33, 1, v30) == 1)
    {
      outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for UUID?);
LABEL_34:
      uint64_t v62 = v20;
      unint64_t v63 = v19;
      os_log_type_t v54 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v54, &v62);
      swift_bridgeObjectRelease();
      swift_release();
      return 1;
    }
  }
  else
  {
    size_t v58 = v12;
    outlined init with copy of UUID?(v32, v57);
    if (v35(v33, 1, v30) != 1)
    {
      uint64_t v49 = v4;
      uint64_t v50 = *(void (**)(void, uint64_t, uint64_t))(v4 + 32);
      uint64_t v51 = v55[0];
      v50(v55[0], v33, v30);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v52 = v57;
      LODWORD(v59) = dispatch thunk of static Equatable.== infix(_:_:)();
      size_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v53(v51, v30);
      outlined destroy of BodyTrackingComponent?((uint64_t)v58, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v56, &demangling cache variable for type metadata for UUID?);
      v53(v52, v30);
      outlined destroy of BodyTrackingComponent?(v32, &demangling cache variable for type metadata for UUID?);
      if (v59) {
        goto LABEL_34;
      }
      goto LABEL_15;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v58, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v56, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v57, v30);
  }
  outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_15:
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  os_log_type_t v36 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v36, &v62);
  swift_release();
LABEL_16:
  uint64_t v62 = v20;
  unint64_t v63 = v19;
  os_log_type_t v37 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v37, &v62);
  swift_bridgeObjectRelease();
  type metadata accessor for __RKEntityTriggerGroup();
  uint64_t result = swift_dynamicCastClass();
  if (!result) {
    return result;
  }
  uint64_t v39 = result;
  swift_beginAccess();
  unint64_t v40 = *(void *)(v39 + 24);
  if (v40 >> 62)
  {
LABEL_38:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v41 = result;
    if (result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v41)
    {
LABEL_19:
      if ((v40 & 0xC000000000000001) != 0)
      {
        uint64_t v42 = MEMORY[0x22A689930](0, v40);
      }
      else
      {
        if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        uint64_t v42 = *(void *)(v40 + 32);
        swift_retain();
      }
      char v43 = __RKEntityTapTrigger.matches(with:)(v42);
      swift_release();
      if (v43)
      {
LABEL_32:
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      uint64_t v44 = 0;
      uint64_t v45 = v41 - 1;
      while (v45 != v44)
      {
        unint64_t v46 = v44 + 1;
        if ((v40 & 0xC000000000000001) != 0)
        {
          uint64_t v47 = MEMORY[0x22A689930](v44 + 1, v40);
          if (__OFADD__(v46, 1)) {
            goto LABEL_36;
          }
        }
        else
        {
          if (v46 >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_37;
          }
          uint64_t v47 = *(void *)(v40 + 8 * v44 + 40);
          swift_retain();
          if (__OFADD__(v46, 1))
          {
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
        }
        char v48 = __RKEntityTapTrigger.matches(with:)(v47);
        swift_release();
        ++v44;
        if (v48) {
          goto LABEL_32;
        }
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for __RKEntityTapTrigger()
{
  return self;
}

uint64_t implicit closure #2 in __RKEntityTapTrigger.matches(with:)(uint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_beginAccess();
  if (*(void *)(a1 + 24))
  {
    _print_unlocked<A, B>(_:_:)();
    uint64_t v8 = 0;
    unint64_t v9 = 0xE000000000000000;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v8 = 7104878;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t implicit closure #4 in __RKEntityTapTrigger.matches(with:)(uint64_t a1, Swift::Int a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  Swift::String v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  Swift::String v17 = (char *)&v25 - v16;
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(a2);
  uint64_t v28 = v26;
  unint64_t v29 = v27;
  v18._uint64_t countAndFlagsBits = a3;
  v18._object = a4;
  String.append(_:)(v18);
  swift_beginAccess();
  if (*(void *)(a1 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v17);
    swift_release();
    outlined init with copy of UUID?((uint64_t)v17, (uint64_t)v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
    {
      unint64_t v19 = (void *)0xE300000000000000;
      uint64_t v20 = 7104878;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
      uint64_t v20 = UUID.description.getter();
      unint64_t v19 = v21;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    unint64_t v19 = (void *)0xE300000000000000;
    uint64_t v20 = 7104878;
  }
  v22._uint64_t countAndFlagsBits = v20;
  v22._object = v19;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  String.append(_:)(v23);
  return v28;
}

uint64_t __RKEntityTapTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 24);
  swift_beginAccess();
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = type metadata accessor for __RKEntityTapTrigger();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_beginAccess();
  *(void *)(v6 + 24) = v3;
  swift_retain();
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v6 + 16) = v4;
  a1[3] = v5;
  *a1 = v6;
  return result;
}

uint64_t __RKEntityTapTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 24);
  if (!v5 || *(void *)(v5 + 16) != *(void *)(a1 + 16)) {
    return 0;
  }
  swift_beginAccess();
  char v7 = *(unsigned char *)(v2 + 16);
  type metadata accessor for __RKEntityTapTrigger();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 24) = 0;
  swift_beginAccess();
  *(void *)(v6 + 24) = a2;
  swift_retain();
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  swift_beginAccess();
  *(unsigned char *)(v6 + 16) = v7;
  return v6;
}

void __RKEntityTapTrigger.__allocating_init()()
{
}

void __RKEntityTapTrigger.init()()
{
}

uint64_t __RKEntityTapTrigger.__ivar_destroyer()
{
  return swift_release();
}

uint64_t __RKEntityTapTrigger.deinit()
{
  swift_release();
  return v0;
}

uint64_t __RKEntityTapTrigger.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #2 in __RKEntityTapTrigger.matches(with:)()
{
  return implicit closure #2 in __RKEntityTapTrigger.matches(with:)(v0, 22, 0xD000000000000014, (void *)0x80000002283560C0);
}

uint64_t partial apply for implicit closure #4 in __RKEntityTapTrigger.matches(with:)()
{
  return implicit closure #4 in __RKEntityTapTrigger.matches(with:)(v0, 31, 0xD00000000000001DLL, (void *)0x80000002283560A0);
}

uint64_t partial apply for implicit closure #6 in __RKEntityTapTrigger.matches(with:)()
{
  return implicit closure #2 in __RKEntityTapTrigger.matches(with:)(v0, 24, 0xD000000000000016, (void *)0x8000000228356080);
}

uint64_t partial apply for implicit closure #8 in __RKEntityTapTrigger.matches(with:)()
{
  return implicit closure #4 in __RKEntityTapTrigger.matches(with:)(v0, 33, 0xD00000000000001FLL, (void *)0x8000000228356060);
}

uint64_t sub_228032F74@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_retain();
}

uint64_t type metadata accessor for __RKEntityGlobalTapTrigger()
{
  return self;
}

uint64_t type metadata accessor for __RKEntityTapPointTrigger()
{
  return self;
}

uint64_t method lookup function for __RKEntityTapTrigger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityTapTrigger);
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.targetEntity.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityTapTrigger.__allocating_init(targetEntity:reversible:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t __RKEntityOrbitEntityAction.__allocating_init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  swift_allocObject();
  uint64_t v21 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  return v21;
}

uint64_t __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  uint64_t v11 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();
  return v11;
}

uint64_t __RKEntityOrbitEntityAction.perform(with:)()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = v0[2];
  uint64_t v88 = 91;
  char v89 = (const char *)0xE100000000000000;
  if (v2)
  {
    uint64_t v107 = 0;
    unint64_t v108 = 0xE000000000000000;
    v105[0] = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    unint64_t v4 = 0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  uint64_t v10 = (char *)v88;
  uint64_t v9 = v89;
  uint64_t v11 = v0[2];
  if (!v11)
  {
    uint64_t v14 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v14, &v88);
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = v0[14];
  if (!v12)
  {
    swift_retain();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v18, &v88);
    swift_bridgeObjectRelease();
LABEL_38:
    swift_release();
    return 0;
  }
  uint64_t v13 = v0 + 12;
  swift_beginAccess();
  if (*((unsigned char *)v1 + 104) == 1 && *v13 == 1)
  {
    swift_beginAccess();
    if (*((unsigned char *)v1 + 105) == 1)
    {
      swift_retain();
      swift_retain();
LABEL_17:
      uint64_t v19 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v19, &v88);
      swift_bridgeObjectRelease();
LABEL_37:
      swift_release();
      goto LABEL_38;
    }
  }
  swift_retain();
  swift_retain();
  if (!RESceneGetECSManagerNullable()) {
    goto LABEL_17;
  }
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v96);
  uint64_t v16 = v97;
  uint64_t v15 = v98;
  swift_release();
  outlined init with take of Transform?((uint64_t)v96, (uint64_t)v105);
  if (v106)
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    long long v17 = xmmword_2681C7AC0;
  }
  else
  {
    *(void *)&long long v17 = v16;
    *((void *)&v17 + 1) = v15;
  }
  long long v81 = v17;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v99);
  uint64_t v20 = v100;
  uint64_t v21 = v101;
  swift_release();
  outlined init with take of Transform?((uint64_t)v99, (uint64_t)v104);
  if (v104[48])
  {
    long long v22 = v81;
    if (one-time initialization token for identity != -1)
    {
      swift_once();
      long long v22 = v81;
    }
    long long v23 = xmmword_2681C7AC0;
  }
  else
  {
    *(void *)&long long v23 = v20;
    *((void *)&v23 + 1) = v21;
    long long v22 = v81;
  }
  uint64_t v24 = 0;
  while (1)
  {
    long long v83 = v22;
    float v26 = *(float *)((unint64_t)&v83 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    long long v84 = v23;
    float v27 = *(float *)((unint64_t)&v84 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    BOOL v25 = v26 == v27;
    if (v24 == 2) {
      break;
    }
    while (1)
    {
      ++v24;
      if (v25) {
        break;
      }
      if (v24 == 2) {
        goto LABEL_31;
      }
      BOOL v25 = 0;
    }
  }
  if (v26 == v27)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    os_log_type_t v36 = (char *)v1[12];
    char v37 = *((unsigned char *)v1 + 104);
    v1[12] = 4;
    *((unsigned char *)v1 + 104) = 1;
    uint64_t v88 = (uint64_t)v36;
    LOBYTE(v89) = v37;
    __RKEntityAction.state.didset((uint64_t)&v88);
    goto LABEL_37;
  }
LABEL_31:
  if (*((float *)v1 + 30) <= 0.0) {
    goto LABEL_36;
  }
  uint64_t v28 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v28, &v88);
  unint64_t v29 = (char *)v1[12];
  char v30 = *((unsigned char *)v1 + 104);
  v1[12] = 1;
  *((unsigned char *)v1 + 104) = 1;
  uint64_t v88 = (uint64_t)v29;
  LOBYTE(v89) = v30;
  __RKEntityAction.state.didset((uint64_t)&v88);
  uint64_t v31 = *(void *)(v11 + 16);
  RETransformComponentGetComponentType();
  if (!REEntityGetComponentByClass()) {
    goto LABEL_52;
  }
  RETransformComponentGetLocalPose();
  *((_OWORD *)v1 + 20) = v32;
  *((_OWORD *)v1 + 21) = v33;
  *((unsigned char *)v1 + 352) = 0;
  RERigidBodyComponentGetComponentType();
  uint64_t v34 = v31;
  uint64_t ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    int MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    int MotionType = 0;
  }
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (uint64_t ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22A692220](ServiceLocator)))
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_38;
  }
  int v78 = MotionType;
  REAnimationComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  uint64_t v40 = Entity.rcSceneEntity.getter();
  if (!v40)
  {
LABEL_52:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  uint64_t v41 = v40;
  uint64_t v80 = type metadata accessor for Entity();
  swift_allocObject();
  v1[38] = Entity.init()();
  uint64_t result = swift_release();
  if (!v1[38])
  {
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v77 = v34;
  swift_retain();
  uint64_t v42 = swift_retain();
  specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v42, 1);
  swift_release();
  uint64_t result = swift_release();
  if (!v1[38])
  {
LABEL_63:
    __break(1u);
    return result;
  }
  swift_retain();
  swift_retain();
  *(double *)v43.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v12, v41);
  *(float32x2_t *)&long long v47 = simd_float4x4.transform(position:)((float32x4_t)0, v43, v44, v45, v46);
  long long v76 = v47;
  uint64_t v79 = v41;
  swift_release();
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v102);
  uint64_t v48 = v102[0];
  unint64_t v49 = v102[1];
  uint64_t v75 = v102[2];
  uint64_t v50 = v102[3];
  swift_release();
  outlined init with take of Transform?((uint64_t)v102, (uint64_t)v103);
  if (v103[48] == 1)
  {
    if (one-time initialization token for identity != -1) {
      swift_once();
    }
    unint64_t v49 = *((void *)&static Transform.identity + 1);
    uint64_t v48 = static Transform.identity;
    uint64_t v50 = *((void *)&xmmword_2681C7AB0 + 1);
    uint64_t v51 = xmmword_2681C7AB0;
  }
  else
  {
    uint64_t v51 = v75;
  }
  uint64_t v107 = v48;
  unint64_t v108 = v49;
  uint64_t v109 = v51;
  uint64_t v110 = v50;
  long long v111 = v76;
  char v112 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v107);
  swift_release_n();
  v1[37] = specialized HasHierarchy.parent.getter();
  swift_release();
  RETransformComponentGetWorldUnanimatedMatrix4x4F();
  RETransformComponentGetWorldMatrix4x4F();
  uint64_t v52 = swift_retain();
  specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v52, 0);
  swift_release();
  RETransformComponentSetWorldMatrix4x4F();
  RETransformComponentSetWorldAnimatedMatrix4x4F();
  RENetworkMarkComponentDirty();
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v79, 0);
  *(double *)v53.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v12, 0);
  simd_float4x4.transform(position:)((float32x4_t)0, v53, v54, v55, v56);
  *(double *)v57.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v11, 0);
  simd_float4x4.transform(position:)((float32x4_t)0, v57, v58, v59, v60);
  RETransformComponentGetLocalUnanimatedSRT();
  if (*((unsigned char *)v1 + 145)) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  REAssetManagerTimelineAssetCreateOrbitAnimation();
  REAnimationClipDefaultParametersEx();
  if (*((unsigned char *)v1 + 354))
  {
    double v61 = v93;
    char v62 = 1;
  }
  else
  {
    char v62 = v94;
    double v61 = *((float *)v1 + 30);
  }
  char v89 = "Transform.transform";
  double v93 = v61;
  char v94 = v62;
  char v95 = 1;
  if (REAssetManagerTimelineAssetCreateSRTAnimationClipEx())
  {
    uint64_t v88 = 4;
    LODWORD(v89) = 4096;
    char v90 = "ORBIT";
    LOBYTE(v91) = 0;
    v1[35] = REAnimationComponentPlay();
    *((unsigned char *)v1 + 288) = 0;
    RERelease();
  }
  uint64_t v63 = swift_allocObject();
  swift_weakInit();
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v63;
  *(void *)(v64 + 24) = v77;
  *(_DWORD *)(v64 + 32) = v78;
  *(unsigned char *)(v64 + 36) = ComponentByClass == 0;
  uint64_t v65 = v1[4];
  v1[4] = (uint64_t)partial apply for specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:);
  v1[5] = v64;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v65);
  uint64_t v87 = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v66 = swift_allocObject();
  swift_weakInit();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v85, (uint64_t)partial apply for closure #2 in __RKEntityOrbitEntityAction.perform(with:), v66, &v88);
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 20));
  swift_endAccess();
  *((void *)&v86 + 1) = v80;
  uint64_t v87 = &protocol witness table for Entity;
  *(void *)&long long v85 = v11;
  uint64_t v67 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v85, 0, (char **)&v88);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:);
  *(void *)(v68 + 24) = v67;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
  size_t v69 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v70 = type metadata accessor for AnyCancellable();
  uint64_t v91 = v70;
  *(void *)&long long v92 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v88 = (uint64_t)v69;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 25));
  swift_endAccess();
  *((void *)&v86 + 1) = v80;
  uint64_t v87 = &protocol witness table for Entity;
  *(void *)&long long v85 = v11;
  uint64_t v71 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)&v85, 0, (char **)&v88);
  uint64_t v72 = swift_allocObject();
  *(void *)(v72 + 16) = partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:);
  *(void *)(v72 + 24) = v71;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
  size_t v73 = (char *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v91 = v70;
  *(void *)&long long v92 = MEMORY[0x263EFDD10];
  swift_release();
  uint64_t v88 = (uint64_t)v73;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v85, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Cancellable?((uint64_t)&v88, (uint64_t)(v1 + 30));
  swift_endAccess();
  uint64_t v88 = (uint64_t)v10;
  char v89 = v9;
  uint64_t v74 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v74, &v88);
  swift_bridgeObjectRelease();
  RERelease();
  swift_release();
  swift_release();
  swift_release();
  return 1;
}

uint64_t specialized HasHierarchy.setParent(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t result = REEntityGetParent();
  if (!result)
  {
    if (!a1) {
      return result;
    }
LABEL_11:
    if ((a2 & 1) == 0)
    {
      swift_retain();
      goto LABEL_15;
    }
    uint64_t v11 = one-time initialization token for identity;
    swift_retain();
    if (v11 == -1)
    {
LABEL_13:
      float32x4_t v22 = (float32x4_t)static simd_quatf.identity;
      specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v3, a1);
      specialized simd_float4x4.init(translation:rotation:scale:)(0.0, v22, 1.0);
      REMakeSRTFromMatrix();
      v23[0] = v12;
      v23[1] = v13;
      void v23[2] = v14;
      char v24 = 0;
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v23);
      swift_release();
LABEL_15:
      REEntitySetParent();
      if (swift_conformsToProtocol2()) {
        uint64_t v15 = v3;
      }
      else {
        uint64_t v15 = 0;
      }
      if (v15)
      {
        swift_beginAccess();
        uint64_t v16 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession)
        {
          swift_beginAccess();
          if (v16[2])
          {
            swift_retain();
            id v17 = (id)RFServiceManagerGetAnchorManagementService();
            if (v17)
            {
              os_log_type_t v18 = v17;
              uint64_t SceneNullable = REEntityGetSceneNullable();
              if (SceneNullable)
              {
                uint64_t v20 = SceneNullable;
                id v21 = (id)RESceneGetSwiftObject();
                type metadata accessor for Scene();
                if (v21)
                {
                  swift_dynamicCastClassUnconditional();
                }
                else
                {
                  swift_allocObject();
                  Scene.init(coreScene:)(v20);
                }
                swift_release();
                RFAnchorManagementUpdateAnchoringInScene();
              }
            }
            swift_release();
          }
        }
      }
      type metadata accessor for Entity();
      static Entity.updateInteractions(root:)(v3);
      Entity.updateSceneGravityIfNeeded()();
      swift_release();
      return swift_release();
    }
LABEL_38:
    swift_once();
    goto LABEL_13;
  }
  uint64_t v7 = result;
  if (!(id)REEntityGetSwiftObject())
  {
    if (REEntityIsBeingDestroyed())
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v9 = specialized static Entity.entityInfoType(_:)();
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(void))(v9 + 232))();
      uint64_t v10 = *(void *)(v8 + 16);
      swift_retain();
      MEMORY[0x22A68E750](v10, 0);
      *(void *)(v8 + 16) = v7;
      MEMORY[0x22A68E750](v7, v8);
      swift_release();
      if (a1) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v8 = makeEntity(for:)(v7);
      if (a1) {
        goto LABEL_10;
      }
    }
LABEL_29:
    *(void *)&v23[0] = v8;
    Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v3, a2 & 1);
    return swift_release();
  }
  type metadata accessor for Entity();
  uint64_t v8 = swift_dynamicCastClassUnconditional();
  if (!a1) {
    goto LABEL_29;
  }
LABEL_10:
  if (*(void *)(v8 + 16) != *(void *)(a1 + 16)) {
    goto LABEL_11;
  }

  return swift_release();
}

uint64_t specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 160;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v6);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 200, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v5 + 200);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v5 + 240, (uint64_t)&v11);
    if (*((void *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v5 + 240);
    swift_endAccess();
    uint64_t v7 = (void *)(v5 + 16);
    swift_beginAccess();
    if (*(void *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(unsigned char *)(v5 + 104) == 1) && *(void *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(void *)(v5 + 280) = 0;
      *(unsigned char *)(v5 + 288) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    if (*v7)
    {
      swift_retain();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldUnanimatedMatrix4x4F();
        RETransformComponentGetWorldMatrix4x4F();
        if (*v7)
        {
          uint64_t v8 = *(void *)(v5 + 296);
          swift_retain();
          swift_retain();
          specialized HasHierarchy.setParent(_:preservingWorldTransform:)(v8, 0);
          swift_release();
          swift_release();
        }
        RETransformComponentSetWorldMatrix4x4F();
        RETransformComponentSetWorldAnimatedMatrix4x4F();
        RENetworkMarkComponentDirty();
        if (*(void *)(v5 + 304))
        {
          swift_retain();
          specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
          *(void *)(v5 + 304) = 0;
          swift_release();
          swift_release();
        }
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityOrbitEntityAction.perform(with:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (*(void *)(result + 304))
    {
      uint64_t v1 = *(void *)(result + 112);
      if (v1)
      {
        swift_retain();
        swift_retain();
        uint64_t v2 = Entity.rcSceneEntity.getter();
        if (v2)
        {
          *(double *)v3.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(v1, v2);
          *(float32x2_t *)&long long v7 = simd_float4x4.transform(position:)((float32x4_t)0, v3, v4, v5, v6);
          long long v12 = v7;
          swift_retain();
          specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v13);
          uint64_t v8 = v13[0];
          uint64_t v9 = v13[1];
          uint64_t v10 = v13[2];
          uint64_t v11 = v13[3];
          swift_release();
          outlined init with take of Transform?((uint64_t)v13, (uint64_t)v14);
          if (v14[48])
          {
            if (one-time initialization token for identity != -1) {
              swift_once();
            }
            uint64_t v9 = *((void *)&static Transform.identity + 1);
            uint64_t v8 = static Transform.identity;
            uint64_t v11 = *((void *)&xmmword_2681C7AB0 + 1);
            uint64_t v10 = xmmword_2681C7AB0;
          }
          v15[0] = v8;
          v15[1] = v9;
          uint64_t v15[2] = v10;
          _OWORD v15[3] = v11;
          long long v16 = v12;
          char v17 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v15);
          swift_release();
          swift_release();
          swift_release_n();
        }
        else
        {
          swift_release();
          swift_release();
        }
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(result + 288) & 1) != 0 || *(void *)(v1 + 16) != *(void *)(result + 280))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      uint64_t v4 = *(void *)(v3 + 96);
      char v5 = *(unsigned char *)(v3 + 104);
      *(void *)(v3 + 96) = 2;
      *(unsigned char *)(v3 + 104) = 1;
      uint64_t v6 = v4;
      char v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityOrbitEntityAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = v1[7].n128_i64[0];
  float v4 = v1[7].n128_f32[2];
  float v5 = v1[7].n128_f32[3];
  __n128 v14 = v1[8];
  char v6 = v1[9].n128_i8[0];
  char v15 = v1[9].n128_i8[1];
  char v7 = v1[9].n128_i8[2];
  float v8 = v1[9].n128_f32[1];
  float v9 = v1[9].n128_f32[2];
  uint64_t v10 = type metadata accessor for __RKEntityOrbitEntityAction();
  swift_allocObject();
  swift_retain();
  uint64_t v11 = swift_retain();
  uint64_t v12 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(v11, v3, v6, &v15, v7, 0, v4, v5, v14, v8, v9);
  uint64_t result = swift_release();
  a1[3] = v10;
  *a1 = v12;
  return result;
}

uint64_t __RKEntityOrbitEntityAction.clone(matching:newEntity:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = v1[1].n128_u64[0];
  if (v3 && *(void *)(a1 + 16) == *(void *)(v3 + 16))
  {
    uint64_t v5 = v1[7].n128_i64[0];
    float v6 = v1[7].n128_f32[2];
    float v7 = v1[7].n128_f32[3];
    __n128 v14 = v1[8];
    char v8 = v1[9].n128_i8[0];
    LOBYTE(v16[0]) = v1[9].n128_u8[1];
    char v9 = v1[9].n128_i8[2];
    float v10 = v1[9].n128_f32[1];
    float v11 = v1[9].n128_f32[2];
    type metadata accessor for __RKEntityOrbitEntityAction();
    swift_allocObject();
    swift_retain();
    uint64_t v12 = swift_retain();
    uint64_t v4 = specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(v12, v5, v8, (char *)v16, v9, 0, v6, v7, v14, v10, v11);
    swift_release();
  }
  else
  {
    __RKEntityOrbitEntityAction.copy(with:)(v16);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast()) {
      return v15;
    }
    else {
      return 0;
    }
  }
  return v4;
}

void __RKEntityOrbitEntityAction.__allocating_init(targetEntity:)()
{
}

void __RKEntityOrbitEntityAction.init(targetEntity:)()
{
}

uint64_t __RKEntityOrbitEntityAction.__ivar_destroyer()
{
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 200, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 240, &demangling cache variable for type metadata for Cancellable?);
  swift_release();

  return swift_release();
}

uint64_t __RKEntityOrbitEntityAction.deinit()
{
  swift_beginAccess();
  *(void *)(v0 + 96) = 2;
  *(unsigned char *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(void *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 200, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 240, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t __RKEntityOrbitEntityAction.__deallocating_deinit()
{
  __RKEntityOrbitEntityAction.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized __RKEntityOrbitEntityAction.init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)(uint64_t a1, uint64_t a2, char a3, char *a4, char a5, char a6, float a7, float a8, __n128 a9, float a10, float a11)
{
  char v13 = *a4;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 208) = 0u;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_OWORD *)(v11 + 272) = 0u;
  *(unsigned char *)(v11 + 288) = 1;
  *(void *)(v11 + 296) = 0;
  *(void *)(v11 + 304) = 0;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 336) = 0u;
  *(unsigned char *)(v11 + 352) = 1;
  *(_WORD *)(v11 + 353) = 0;
  *(void *)(v11 + 112) = a2;
  *(float *)(v11 + 120) = a7;
  *(float *)(v11 + 124) = a8;
  *(__n128 *)(v11 + 128) = a9;
  *(unsigned char *)(v11 + 144) = a3;
  *(unsigned char *)(v11 + 145) = v13;
  *(float *)(v11 + 148) = a10;
  *(float *)(v11 + 152) = a11;
  *(unsigned char *)(v11 + 146) = a5;
  *(unsigned char *)(v11 + 354) = a6;
  swift_retain();

  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t sub_228034FB0()
{
  swift_weakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_228034FE8()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 37, 7);
}

uint64_t partial apply for specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)()
{
  return specialized closure #1 in __RKEntityOrbitEntityAction.perform(with:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t partial apply for closure #2 in __RKEntityOrbitEntityAction.perform(with:)()
{
  return closure #2 in __RKEntityOrbitEntityAction.perform(with:)();
}

uint64_t partial apply for closure #3 in __RKEntityOrbitEntityAction.perform(with:)(uint64_t *a1)
{
  return closure #3 in __RKEntityOrbitEntityAction.perform(with:)(a1);
}

uint64_t sub_228035068()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t type metadata accessor for __RKEntityOrbitEntityAction()
{
  return self;
}

uint64_t method lookup function for __RKEntityOrbitEntityAction(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __RKEntityOrbitEntityAction);
}

uint64_t dispatch thunk of __RKEntityOrbitEntityAction.__allocating_init(targetEntity:pivotEntity:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsAngularCoefficient:physicsLinearCoefficient:loop:)()
{
  return (*(uint64_t (**)(void))(v0 + 1024))();
}

double SpatialAudioComponent.gain.getter()
{
  return *(double *)v0;
}

void SpatialAudioComponent.gain.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*SpatialAudioComponent.gain.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialAudioComponent.directLevel.getter()
{
  return *(double *)(v0 + 8);
}

void SpatialAudioComponent.directLevel.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t (*SpatialAudioComponent.directLevel.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double SpatialAudioComponent.reverbLevel.getter()
{
  return *(double *)(v0 + 16);
}

void SpatialAudioComponent.reverbLevel.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*SpatialAudioComponent.reverbLevel.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpatialAudioComponent.directivity.getter@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int8 v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 24);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

__n128 SpatialAudioComponent.directivity.setter(__n128 *a1)
{
  unsigned __int8 v2 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*SpatialAudioComponent.directivity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 SpatialAudioComponent.init(gain:directLevel:reverbLevel:directivity:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  unsigned __int8 v5 = a1[1].n128_u8[0];
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  __n128 result = *a1;
  *(__n128 *)(a2 + 24) = *a1;
  *(unsigned char *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SpatialAudioComponent.CodingKeys()
{
  uint64_t result = 1852399975;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x746365726964;
      goto LABEL_4;
    case 2:
      uint64_t v2 = 0x627265766572;
LABEL_4:
      uint64_t result = v2 & 0xFFFFFFFFFFFFLL | 0x654C000000000000;
      break;
    case 3:
      uint64_t result = 0x7669746365726964;
      break;
    case 4:
      uint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SpatialAudioComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SpatialAudioComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpatialAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SpatialAudioComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Entity.spatialAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);

  return swift_release();
}

double key path getter for Entity.spatialAudio : Entity@<D0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v5);
  swift_release();
  uint64_t v2 = v7;
  long long v3 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = v2;
  return result;
}

uint64_t key path setter for Entity.spatialAudio : Entity(uint64_t a1)
{
  outlined init with take of SpatialAudioComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t Entity.spatialAudio.setter(uint64_t a1)
{
  outlined init with take of SpatialAudioComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t outlined init with take of SpatialAudioComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialAudioComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*Entity.spatialAudio.modify(void *a1))(void **a1, char a2)
{
  long long v3 = (char *)malloc(0xB0uLL);
  *a1 = v3;
  uint64_t v4 = v3 + 112;
  *((void *)v3 + 21) = v1;
  swift_retain();
  if (REEntityGetComponent())
  {
    static SpatialAudioComponent.__fromCore(_:)((uint64_t)v4);
  }
  else
  {
    *((void *)v3 + 18) = 0;
    *uint64_t v4 = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *(_OWORD *)(v3 + 152) = xmmword_228323FF0;
  }
  swift_release();
  return Entity.spatialAudio.modify;
}

void Entity.spatialAudio.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t)*a1 + 56;
  uint64_t v4 = (uint64_t)*a1 + 112;
  if (a2) {
    uint64_t v5 = (uint64_t)v2;
  }
  else {
    uint64_t v5 = v3;
  }
  outlined init with take of SpatialAudioComponent?(v4, v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();

  free(v2);
}

uint64_t static SpatialAudioComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  RESpatialAudioComponentGetDecibelGain();
  float v3 = v2;
  RESpatialAudioComponentGetDirectSendLevel();
  float v5 = v4;
  RESpatialAudioComponentGetReverbSendLevel();
  float v7 = v6;
  int SourceDirectivityMode = RESpatialAudioComponentGetSourceDirectivityMode();
  uint64_t result = RESpatialAudioComponentGetRolloffFactor();
  float v11 = v10;
  float64x2_t v12 = (float64x2_t)xmmword_22830EC70;
  char v13 = 2;
  switch(SourceDirectivityMode)
  {
    case 0:
      break;
    case 1:
      uint64_t result = RESpatialAudioComponentGetDirectivityFocus();
      char v13 = 0;
      v12.f64[1] = 0.0;
      v12.f64[0] = v14;
      break;
    case 2:
      goto LABEL_4;
    case 3:
      RESpatialAudioComponentGetDirectivitySphericalCapDiameter();
      unsigned int v17 = v15;
      uint64_t result = RESpatialAudioComponentGetDirectivitySphericalCapOpeningAngle();
      float64x2_t v12 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v16, v17));
      char v13 = 1;
      break;
    default:
      char v13 = 0;
LABEL_4:
      float64x2_t v12 = 0uLL;
      break;
  }
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v5;
  *(double *)(a1 + 16) = v7;
  *(float64x2_t *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  *(double *)(a1 + 48) = v11;
  return result;
}

__n128 SpatialAudioComponent.init(gain:directLevel:reverbLevel:directivity:distanceAttenuation:)@<Q0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  unsigned __int8 v6 = a1[1].n128_u8[0];
  uint64_t v7 = *a2;
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = a6;
  __n128 result = *a1;
  *(__n128 *)(a3 + 24) = *a1;
  *(unsigned char *)(a3 + 40) = v6;
  *(void *)(a3 + 48) = v7;
  return result;
}

uint64_t SpatialAudioComponent.__toCore(_:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 40);
  RESpatialAudioComponentSetDecibelGain();
  RESpatialAudioComponentSetDirectSendLevel();
  RESpatialAudioComponentSetReverbSendLevel();
  if (v1)
  {
    RESpatialAudioComponentSetSourceDirectivityMode();
    if (v1 == 1) {
      RESpatialAudioComponentSetDirectivitySphericalCap();
    }
  }
  else
  {
    RESpatialAudioComponentSetSourceDirectivityMode();
    RESpatialAudioComponentSetDirectivityFocus();
  }
  RESpatialAudioComponentSetRolloffFactor();

  return RENetworkMarkComponentDirty();
}

void static SpatialAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3010;
}

void protocol witness for static Component.__coreComponentType.getter in conformance SpatialAudioComponent(_DWORD *a1@<X8>)
{
  *a1 = 3010;
}

void SpatialAudioComponent.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  Swift::UInt64 v2 = *(void *)(v0 + 24);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  int v5 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt64 v6 = *(void *)(v0 + 48);
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = *(void *)v0;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v3;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if (!v5)
  {
    Hasher._combine(_:)(0);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v11 = v2;
    }
    else {
      Swift::UInt64 v11 = 0;
    }
LABEL_18:
    Hasher._combine(_:)(v11);
    goto LABEL_26;
  }
  if (v5 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v10 = v2;
    }
    else {
      Swift::UInt64 v10 = 0;
    }
    Hasher._combine(_:)(v10);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v11 = v4;
    }
    else {
      Swift::UInt64 v11 = 0;
    }
    goto LABEL_18;
  }
  if (v2 | v4) {
    Swift::UInt v12 = 2;
  }
  else {
    Swift::UInt v12 = 1;
  }
  Hasher._combine(_:)(v12);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v13 = v6;
  }
  else {
    Swift::UInt64 v13 = 0;
  }
  Hasher._combine(_:)(v13);
}

uint64_t SpatialAudioComponent.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SpatialAudioComponent.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  Swift::UInt64 v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v16 = *(void *)(v1 + 32);
  uint64_t v17 = v8;
  char v9 = *(unsigned char *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v11 = v9;
    uint64_t v13 = v16;
    uint64_t v12 = v17;
    LOBYTE(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v18) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v18 = v12;
    uint64_t v19 = v13;
    char v20 = v11;
    char v21 = 3;
    lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v18 = v10;
    char v21 = 4;
    lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int SpatialAudioComponent.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v4 = *(void *)(v0 + 16);
  Swift::UInt64 v3 = *(void *)(v0 + 24);
  Swift::UInt64 v5 = *(void *)(v0 + 32);
  int v6 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt64 v7 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v2;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if (!v6)
  {
    Hasher._combine(_:)(0);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v3;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
LABEL_21:
    Hasher._combine(_:)(v12);
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v11 = v3;
    }
    else {
      Swift::UInt64 v11 = 0;
    }
    Hasher._combine(_:)(v11);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v5;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    goto LABEL_21;
  }
  if (v3 | v5) {
    Swift::UInt v13 = 2;
  }
  else {
    Swift::UInt v13 = 1;
  }
  Hasher._combine(_:)(v13);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  return Hasher._finalize()();
}

uint64_t SpatialAudioComponent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SpatialAudioComponent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  Swift::UInt64 v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v21) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    LOBYTE(v21) = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    LOBYTE(v21) = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    char v20 = 3;
    lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = v21;
    uint64_t v17 = v22;
    int v19 = v23;
    char v20 = 4;
    lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v18 = v21;
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(void *)(a2 + 16) = v14;
    *(void *)(a2 + 24) = v16;
    *(void *)(a2 + 32) = v17;
    *(unsigned char *)(a2 + 40) = v19;
    *(void *)(a2 + 48) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpatialAudioComponent()
{
  Swift::UInt64 v1 = *(void *)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v4 = *(void *)(v0 + 16);
  Swift::UInt64 v3 = *(void *)(v0 + 24);
  Swift::UInt64 v5 = *(void *)(v0 + 32);
  int v6 = *(unsigned __int8 *)(v0 + 40);
  Swift::UInt64 v7 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v1;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v9 = v2;
  }
  else {
    Swift::UInt64 v9 = 0;
  }
  Hasher._combine(_:)(v9);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v10 = v4;
  }
  else {
    Swift::UInt64 v10 = 0;
  }
  Hasher._combine(_:)(v10);
  if (!v6)
  {
    Hasher._combine(_:)(0);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v3;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
LABEL_21:
    Hasher._combine(_:)(v12);
    goto LABEL_26;
  }
  if (v6 == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v11 = v3;
    }
    else {
      Swift::UInt64 v11 = 0;
    }
    Hasher._combine(_:)(v11);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v5;
    }
    else {
      Swift::UInt64 v12 = 0;
    }
    goto LABEL_21;
  }
  if (v3 | v5) {
    Swift::UInt v13 = 2;
  }
  else {
    Swift::UInt v13 = 1;
  }
  Hasher._combine(_:)(v13);
LABEL_26:
  Hasher._combine(_:)(0);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = v7;
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SpatialAudioComponent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SpatialAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SpatialAudioComponent(void *a1)
{
  return SpatialAudioComponent.encode(to:)(a1);
}

double SpatialAudioComponent.distanceAttenuation.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

double SpatialAudioComponent.distanceAttenuation.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double (*SpatialAudioComponent.distanceAttenuation.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 48);
  return SpatialAudioComponent.distanceAttenuation.modify;
}

double SpatialAudioComponent.distanceAttenuation.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 48) = *(void *)a1;
  return result;
}

uint64_t SpatialAudioComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  Swift::UInt64 v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x270FA5388](v5 - 8);
  Swift::UInt64 v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v0[1];
  uint64_t v10 = v0[2];
  uint64_t v11 = v0[3];
  uint64_t v12 = v0[4];
  char v13 = *((unsigned char *)v0 + 40);
  uint64_t v14 = v0[6];
  uint64_t v20 = *v0;
  uint64_t v8 = v20;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  uint64_t v24 = v12;
  char v25 = v13;
  uint64_t v26 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22831E320;
  *(void *)(v15 + 32) = 1852399975;
  *(void *)(v15 + 40) = 0xE400000000000000;
  uint64_t v16 = MEMORY[0x263F8D538];
  *(void *)(v15 + 48) = v8;
  *(void *)(v15 + 72) = v16;
  *(void *)(v15 + 80) = 0x654C746365726964;
  *(void *)(v15 + 88) = 0xEB000000006C6576;
  *(void *)(v15 + 96) = v9;
  *(void *)(v15 + 120) = v16;
  *(void *)(v15 + 128) = 0x654C627265766572;
  *(void *)(v15 + 136) = 0xEB000000006C6576;
  *(void *)(v15 + 144) = v10;
  *(void *)(v15 + 168) = v16;
  *(void *)(v15 + 176) = 0x7669746365726964;
  *(void *)(v15 + 184) = 0xEB00000000797469;
  *(void *)(v15 + 192) = v11;
  *(void *)(v15 + 200) = v12;
  *(unsigned char *)(v15 + 208) = v13;
  *(void *)(v15 + 216) = &type metadata for Audio.Directivity;
  *(void *)(v15 + 224) = 0xD000000000000013;
  *(void *)(v15 + 232) = 0x8000000228356230;
  *(void *)(v15 + 264) = &type metadata for Audio.DistanceAttenuation;
  *(void *)(v15 + 240) = v14;
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x263F8E830], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

BOOL specialized static SpatialAudioComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  double v5 = *(double *)(a1 + 24);
  double v6 = *(double *)(a1 + 48);
  double v7 = *(double *)(a2 + 24);
  int v8 = *(unsigned __int8 *)(a2 + 40);
  if (!*(unsigned char *)(a1 + 40))
  {
    BOOL result = 0;
    if (*(unsigned char *)(a2 + 40) || v5 != v7) {
      return result;
    }
    return v6 == *(double *)(a2 + 48);
  }
  double v9 = *(double *)(a1 + 32);
  double v10 = *(double *)(a2 + 32);
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    if (v8 != 1) {
      return 0;
    }
    if (v5 != v7 || v9 != v10) {
      return 0;
    }
    return v6 == *(double *)(a2 + 48);
  }
  if (!(*(void *)&v5 | *(void *)&v9))
  {
    BOOL result = 0;
    if (v8 != 2 || *(void *)&v10 | *(void *)&v7) {
      return result;
    }
    return v6 == *(double *)(a2 + 48);
  }
  if (v8 != 2) {
    return 0;
  }
  BOOL result = 0;
  if (*(void *)&v7 == 1 && v10 == 0.0) {
    return v6 == *(double *)(a2 + 48);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent.CodingKeys and conformance SpatialAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity and conformance Audio.Directivity()
{
  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity;
  if (!lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity and conformance Audio.Directivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialAudioComponent and conformance SpatialAudioComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent;
  if (!lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialAudioComponent and conformance SpatialAudioComponent);
  }
  return result;
}

double sub_228036688@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 48);
  *a2 = result;
  return result;
}

double sub_228036694(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 48) = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialAudioComponent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialAudioComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpatialAudioComponent()
{
  return &type metadata for SpatialAudioComponent;
}

unsigned char *storeEnumTagSinglePayload for SpatialAudioComponent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *double result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228036814);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SpatialAudioComponent.CodingKeys()
{
  return &unk_26DC9E658;
}

uint64_t specialized SpatialAudioComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1852399975 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654C746365726964 && a2 == 0xEB000000006C6576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x654C627265766572 && a2 == 0xEB000000006C6576 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7669746365726964 && a2 == 0xEB00000000797469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000228356250)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10RealityKit9__REAssetC_Say0D10Foundation02__F10DescriptorCGs13OpaquePointerVtG_AH_AlI07RESceneH0CtsAE_pTg5(void (*a1)(long long *__return_ptr, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v22 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v22;
    for (int64_t i = (_OWORD *)(a3 + 40); ; int64_t i = (_OWORD *)((char *)i + 24))
    {
      uint64_t v18 = *((void *)i - 1);
      long long v19 = *i;
      swift_retain();
      swift_bridgeObjectRetain();
      a1(&v20, &v18, &v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      swift_release();
      long long v10 = v20;
      uint64_t v11 = v21;
      uint64_t v22 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      unint64_t v12 = *(void *)(v6 + 24);
      if (v13 >= v12 >> 1)
      {
        long long v16 = v20;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        long long v10 = v16;
        uint64_t v6 = v22;
      }
      *(void *)(v6 + 16) = v13 + 1;
      uint64_t v14 = v6 + 24 * v13;
      *(_OWORD *)(v14 + 32) = v10;
      *(void *)(v14 + 48) = v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation17RESceneDescriptorCG_AF23SceneResourceLoadResultVs5NeverOTg5(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (!v6) {
      return v7;
    }
    uint64_t v28 = MEMORY[0x263F8EE78];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v7 = v28;
    unint64_t v21 = v5;
    unint64_t v22 = v5 & 0xC000000000000001;
    while (v6 != v9)
    {
      if (v22)
      {
        uint64_t v10 = MEMORY[0x22A689930](v9, v5);
      }
      else
      {
        uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
        swift_retain();
      }
      uint64_t v24 = v10;
      a1(v25, &v24);
      if (v4)
      {
        swift_release();
        swift_release();
        return v7;
      }
      uint64_t v11 = v6;
      swift_release();
      uint64_t v13 = v25[0];
      uint64_t v12 = v25[1];
      long long v14 = v26;
      char v15 = v27;
      uint64_t v28 = v7;
      unint64_t v17 = *(void *)(v7 + 16);
      unint64_t v16 = *(void *)(v7 + 24);
      if (v17 >= v16 >> 1)
      {
        long long v20 = v26;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        long long v14 = v20;
        uint64_t v7 = v28;
      }
      ++v9;
      *(void *)(v7 + 16) = v17 + 1;
      uint64_t v18 = v7 + 40 * v17;
      *(void *)(v18 + 32) = v13;
      *(void *)(v18 + 40) = v12;
      *(_OWORD *)(v18 + 48) = v14;
      *(unsigned char *)(v18 + 64) = v15;
      uint64_t v6 = v11;
      BOOL v19 = v11 == v9;
      unint64_t v5 = v21;
      uint64_t v4 = 0;
      if (v19) {
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation5Shape33_958D9063BE5145611DD1DCE0DF8621CFLLVyAF20PiecewiseBezierCurveAHLLVGG_AF08ExtrudedF10DescriptorVsAE_pTg5(void (*a1)(void *__return_ptr, long long *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v17;
    for (int64_t i = (long long *)(a3 + 32); ; ++i)
    {
      long long v15 = *i;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1(__src, &v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      memcpy(__dst, __src, sizeof(__dst));
      uint64_t v17 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v11 + 1;
      memcpy((void *)(v6 + 520 * v11 + 32), __dst, 0x208uLL);
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays13OpaquePointerVG_AGs5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x263F8EE78];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v16;
    for (int64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v14 = *i;
      a1(&v15, &v14);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v15;
      uint64_t v16 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      unint64_t v11 = *(void *)(v6 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void LoadTracer.beginLoad(loadType:logMsgTarget:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace);
  unint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  RESignpostEmitREAssetEntityLoadStartedImpulse();
  int v13 = *(_DWORD *)(v4 + 16);
  swift_bridgeObjectRetain();
  static DispatchTime.now()();
  *(_DWORD *)a4 = v13;
  *(unsigned char *)(a4 + 4) = a1;
  *(void *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = a2;
  *(void *)(a4 + 32) = a3;
  int v14 = *(_DWORD *)(v5 + 16);
  BOOL v15 = __CFADD__(v14, 1);
  int v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + 16) = v16;
    if (a1 == 1)
    {
      unint64_t v17 = 0xEB0000000073756FLL;
      uint64_t v18 = 0x6E6F7268636E7973;
    }
    else if (a1 == 2)
    {
      unint64_t v17 = 0xEC00000073756F6ELL;
      uint64_t v18 = 0x6F7268636E797361;
    }
    else
    {
      uint64_t v18 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      unint64_t v17 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __SceneImportOperation.__ImportedScene(a4, (uint64_t)v12, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v29 = v18;
      uint64_t v22 = v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v31 = v23;
      *(_DWORD *)uint64_t v22 = 136315650;
      uint64_t v25 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      unint64_t v24 = *(void *)(v5 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v17, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 22) = 2080;
      uint64_t v26 = *((void *)v12 + 3);
      unint64_t v27 = *((void *)v12 + 4);
      swift_bridgeObjectRetain();
      uint64_t v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v12, type metadata accessor for LoadTrace);
      _os_log_impl(&dword_227DD2000, v19, v20, "%sStarted loading %s %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x22A696500](v23, -1, -1);
      MEMORY[0x22A696500](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v12, type metadata accessor for LoadTrace);
    }
  }
}

unint64_t LoadTracer.endLoad(of:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace);
  int v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  unint64_t v13 = DispatchTime.uptimeNanoseconds.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  unint64_t result = DispatchTime.uptimeNanoseconds.getter();
  unint64_t v15 = v13 - result;
  if (v13 < result)
  {
    __break(1u);
  }
  else
  {
    int v16 = *(unsigned __int8 *)(a2 + 4);
    if (v16 == 1)
    {
      unint64_t v17 = 0xEB0000000073756FLL;
      uint64_t v18 = 0x6E6F7268636E7973;
    }
    else if (v16 == 2)
    {
      unint64_t v17 = 0xEC00000073756F6ELL;
      uint64_t v18 = 0x6F7268636E797361;
    }
    else
    {
      uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      unint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __SceneImportOperation.__ImportedScene(a2, (uint64_t)v8, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(double *)&uint64_t v21 = (double)v15 / 1000000000.0;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = v18;
      uint64_t v23 = v22;
      uint64_t v31 = swift_slowAlloc();
      v34[0] = v31;
      *(_DWORD *)uint64_t v23 = 136315906;
      uint64_t v32 = a1;
      uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      unint64_t v25 = *(void *)(v3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v17, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 22) = 2080;
      uint64_t v26 = *((void *)v8 + 3);
      unint64_t v27 = *((void *)v8 + 4);
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v8, type metadata accessor for LoadTrace);
      *(_WORD *)(v23 + 32) = 2048;
      uint64_t v33 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, v19, v20, "%sFinished loading %s %s in %fs", (uint8_t *)v23, 0x2Au);
      uint64_t v28 = v31;
      swift_arrayDestroy();
      MEMORY[0x22A696500](v28, -1, -1);
      MEMORY[0x22A696500](v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v8, type metadata accessor for LoadTrace);
    }
    RECreateLoadTraceTypeBitFieldSignpostArg();
    REEntityGetLocalId();
    RESignpostEmitREAssetEntityLoadEndedImpulse();
    uint64_t v29 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v29, (uint64_t)v34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAssetService);
    type metadata accessor for __REAssetManager();
    unint64_t result = swift_dynamicCast();
    if (result)
    {
      if (_REAssetManagerIsFullLoadTracingEnabled()) {
        REEntityAddLoadTraceComponent();
      }
      return swift_release();
    }
  }
  return result;
}

void closure #1 in LoadTracer.subscribe<A>(to:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Trace = type metadata accessor for LoadTrace(0);
  MEMORY[0x270FA5388](Trace);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  unint64_t v12 = DispatchTime.uptimeNanoseconds.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  unint64_t v13 = DispatchTime.uptimeNanoseconds.getter();
  BOOL v14 = v12 >= v13;
  unint64_t v15 = v12 - v13;
  if (v14)
  {
    int v16 = *(unsigned __int8 *)(a2 + 4);
    if (v16 == 1)
    {
      unint64_t v17 = 0xEB0000000073756FLL;
      uint64_t v18 = 0x6E6F7268636E7973;
    }
    else if (v16 == 2)
    {
      unint64_t v17 = 0xEC00000073756F6ELL;
      uint64_t v18 = 0x6F7268636E797361;
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
      unint64_t v17 = *(void *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg + 8);
      swift_bridgeObjectRetain();
    }
    outlined init with copy of __SceneImportOperation.__ImportedScene(a2, (uint64_t)v7, type metadata accessor for LoadTrace);
    swift_retain_n();
    swift_bridgeObjectRetain();
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(double *)&uint64_t v21 = (double)v15 / 1000000000.0;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v32 = v30;
      *(_DWORD *)uint64_t v22 = 136315906;
      uint64_t v23 = v18;
      uint64_t v25 = *(void *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
      unint64_t v24 = *(void *)(a3 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix + 8);
      swift_bridgeObjectRetain();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 22) = 2080;
      uint64_t v26 = *((void *)v7 + 3);
      unint64_t v27 = *((void *)v7 + 4);
      swift_bridgeObjectRetain();
      uint64_t v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v7, type metadata accessor for LoadTrace);
      *(_WORD *)(v22 + 32) = 2048;
      uint64_t v31 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_227DD2000, v19, v20, "%sFinished loading %s %s in %fs", (uint8_t *)v22, 0x2Au);
      uint64_t v28 = v30;
      swift_arrayDestroy();
      MEMORY[0x22A696500](v28, -1, -1);
      MEMORY[0x22A696500](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();

      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v7, type metadata accessor for LoadTrace);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t LoadTracer.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t LoadManager.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t LoadManager.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F138], v4);
  static DispatchQoS.unspecified.getter();
  uint64_t v8 = MEMORY[0x263F8EE78];
  v15[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LoadTracer(0);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 1;
  *(void *)(v9 + 24) = specialized Dictionary.init(dictionaryLiteral:)(v8);
  Logger.init(subsystem:category:)();
  uint64_t v10 = (void *)(v9 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_logPrefix);
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  uint64_t v11 = (void *)(v9 + OBJC_IVAR____TtC17RealityFoundation10LoadTracer_unknownLoadTypeMsg);
  *uint64_t v11 = 0xD000000000000018;
  v11[1] = 0x8000000228356490;
  *(void *)(v1 + 24) = v9;
  type metadata accessor for __SceneResourceCache();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = specialized __SceneResourceCache.CachedEntries.init()();
  *(void *)(v12 + 24) = v13;
  *(void *)(v1 + 32) = v12;
  return v1;
}

Swift::Void __swiftcall Entity.__setLoadContext(_:)(RealityKit::__SceneResourceLoadResultLoadContext_optional a1)
{
  if (*(void *)(a1.value.fileName._countAndFlagsBits + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v2, (void *)0x301);
  swift_endAccess();
  swift_unknownObjectRelease();
}

RealityKit::__SceneResourceLoadResultLoadContext_optional __swiftcall Entity.__fetchLoadContext()()
{
  uint64_t v2 = v0;
  swift_beginAccess();
  id v3 = objc_getAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
  swift_endAccess();
  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v9)
  {
    uint64_t v4 = swift_dynamicCast();
    if (v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = outlined destroy of BodyTrackingComponent?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
LABEL_9:
  result.value.fileName._object = v5;
  result.value.fileName._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t Entity.__setSceneResourceCacheEntry(_:)(void *a1)
{
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, a1, (void *)0x301);
  return swift_endAccess();
}

uint64_t Entity.__fetchSceneResourceCacheEntry()()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Transform?((uint64_t)v4, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v6)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t type metadata accessor for __SceneResourceCache.Entry()
{
  return self;
}

Swift::Void __swiftcall Entity.setLoadContext(fileName:)(Swift::String fileName)
{
  swift_bridgeObjectRetain_n();
  uint64_t v2 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  swift_beginAccess();
  objc_setAssociatedObject(v1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v2, (void *)0x301);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
}

uint64_t protocol witness for SceneResourceLoadResultBase.cacheHit.getter in conformance UncachedSceneResourceLoadResult()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t protocol witness for SceneResourceLoadResultBase.cacheHit.getter in conformance SceneResourceLoadResult()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t __SceneResourceCache.Entry.activeSceneAssets.getter()
{
  uint64_t v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v36 - v6;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t result = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v0 + 16, (uint64_t)v46);
  if ((v48 & 1) == 0)
  {
    v45[0] = v46[0];
    v45[1] = v46[1];
    uint64_t v45[2] = v46[2];
    v45[3] = v47;
    uint64_t v19 = *((void *)&v47 + 1);
    if ((*((void *)&v47 + 1) & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = __CocoaSet.count.getter();
      if (v20)
      {
LABEL_15:
        uint64_t v44 = MEMORY[0x263F8EE78];
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t result = specialized Dictionary.startIndex.getter(v19);
        uint64_t v41 = result;
        uint64_t v42 = v21;
        char v43 = v22 & 1;
        if (v20 < 0) {
          goto LABEL_36;
        }
        do
        {
          while (1)
          {
            uint64_t v28 = v41;
            uint64_t v29 = v42;
            char v30 = v43;
            specialized Dictionary.subscript.getter((uint64_t)v40, v41, v42, v43, v19);
            swift_release();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            uint64_t result = specialized ContiguousArray._endMutation()();
            if ((v19 & 0xC000000000000001) != 0) {
              break;
            }
            uint64_t v23 = specialized _NativeDictionary.index(after:)(v28, v29, v30, v19);
            uint64_t v25 = v24;
            char v27 = v26;
            outlined consume of [String : AnimationResource].Index._Variant(v28, v29, v30);
            uint64_t v41 = v23;
            uint64_t v42 = v25;
            char v43 = v27 & 1;
            if (!--v20) {
              goto LABEL_23;
            }
          }
          if ((v30 & 1) == 0) {
            goto LABEL_37;
          }
          if (__CocoaDictionary.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__REAsset : RESceneDescriptor].Index);
          uint64_t v31 = (void (*)(unsigned char *, void))Dictionary.Index._asCocoa.modify();
          __CocoaDictionary.formIndex(after:isUnique:)();
          v31(v40, 0);
          --v20;
        }
        while (v20);
LABEL_23:
        outlined consume of [String : AnimationResource].Index._Variant(v41, v42, v43);
        uint64_t v13 = v44;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v20 = *(void *)(*((void *)&v47 + 1) + 16);
      swift_bridgeObjectRetain();
      if (v20) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_33:
    outlined destroy of __REAssetBundle((uint64_t)v45);
    return v13;
  }
  uint64_t v12 = *(void *)&v46[0];
  uint64_t v13 = MEMORY[0x263F8EE78];
  *(void *)&v45[0] = MEMORY[0x263F8EE78];
  uint64_t v39 = *(void *)(*(void *)&v46[0] + 16);
  if (!v39)
  {
    uint64_t v32 = MEMORY[0x263F8EE78];
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void *)(v32 + 16);
    if (v33)
    {
      *(void *)&v45[0] = v13;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v34 = v32 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v35 = *(void *)(v2 + 72);
      do
      {
        outlined init with copy of __SceneImportOperation.__ImportedScene(v34, (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        swift_retain();
        outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v34 += v35;
        --v33;
      }
      while (v33);
      uint64_t v13 = *(void *)&v45[0];
    }
    swift_release();
    return v13;
  }
  unint64_t v14 = 0;
  uint64_t v38 = v2;
  uint64_t v37 = v1;
  while (v14 < *(void *)(v12 + 16))
  {
    unint64_t v15 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v16 = *(void *)(v2 + 72);
    outlined init with copy of __SceneImportOperation.__ImportedScene(v12 + v15 + v16 * v14, (uint64_t)v10, type metadata accessor for __SceneImportOperation.ImportedScene);
    if (v10[*(int *)(v1 + 28)] == 1)
    {
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v10, (uint64_t)v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
      }
      uint64_t v13 = *(void *)&v45[0];
      unint64_t v18 = *(void *)(*(void *)&v45[0] + 16);
      unint64_t v17 = *(void *)(*(void *)&v45[0] + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v13 = *(void *)&v45[0];
      }
      *(void *)(v13 + 16) = v18 + 1;
      uint64_t result = outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v7, v13 + v15 + v18 * v16);
      uint64_t v1 = v37;
      uint64_t v2 = v38;
    }
    else
    {
      uint64_t result = outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v10, type metadata accessor for __SceneImportOperation.ImportedScene);
    }
    if (v39 == ++v14)
    {
      uint64_t v32 = *(void *)&v45[0];
      uint64_t v13 = MEMORY[0x263F8EE78];
      goto LABEL_26;
    }
  }
  __break(1u);
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.Entry.attach(toEntity:)(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 24);
  swift_unownedRetainStrong();
  uint64_t v9 = *(void **)(v8 + 32);
  swift_retain();
  id v10 = v9;
  swift_release();
  *uint64_t v6 = v10;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x263F8F0E0], v3);
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v8)
  {
    __SceneResourceCache.Entry.registerWithSceneLookupTable()();
    swift_beginAccess();
    objc_setAssociatedObject(a1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, v1, (void *)0x301);
    swift_endAccess();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __SceneResourceCache.Entry.registerWithSceneLookupTable()()
{
  uint64_t v1 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v41 = (id *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void (***)(char *, uint64_t))(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v40 = (char *)&v37 - v11;
  if (one-time initialization token for shared != -1) {
LABEL_25:
  }
    swift_once();
  uint64_t v12 = (id *)static __RKSceneAssetLookupTable.shared;
  uint64_t v13 = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v0 + 16, (uint64_t)v45);
  if (v46)
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(*(void *)&v45[0] + 16);
    if (v15)
    {
      unint64_t v43 = *(int *)(v1 + 24);
      unint64_t v16 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v40 = *(char **)&v45[0];
      uint64_t v17 = *(void *)&v45[0] + v16;
      uint64_t v42 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v2 + 72);
      unint64_t v18 = (void (**)(uint64_t, char *, uint64_t))(v37 + 2);
      uint64_t v19 = (void (**)(uint64_t, uint64_t))(v37 + 1);
      uint64_t v41 = v14;
      do
      {
        outlined init with copy of __SceneImportOperation.__ImportedScene(v17, (uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        uint64_t v20 = *(void *)&v4[v43];
        (*v18)(v9, v4, v7);
        swift_retain();
        outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v4, type metadata accessor for __SceneImportOperation.ImportedScene);
        id v21 = v41[2];
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v21, sel_setObject_forKey_, v20, isa);
        swift_release();

        (*v19)(v9, v7);
        v17 += (uint64_t)v42;
        --v15;
      }
      while (v15);
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = v7;
  v44[0] = v45[0];
  v44[1] = v45[1];
  unsigned char v44[2] = v45[2];
  v44[3] = v45[3];
  unint64_t v25 = *((void *)&v45[0] + 1);
  MEMORY[0x270FA5388](v13);
  *(&v37 - 2) = (void (**)(char *, uint64_t))v44;
  swift_bridgeObjectRetain();
  unint64_t v26 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in __REAssetBundle.getSceneDescriptors()partial apply, (uint64_t)(&v37 - 4), v25);
  swift_bridgeObjectRelease();
  if (!(v26 >> 62))
  {
    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v2 = (uint64_t)v41;
    if (v27) {
      goto LABEL_9;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return outlined destroy of __REAssetBundle((uint64_t)v44);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = (uint64_t)v41;
  if (!v27) {
    goto LABEL_27;
  }
LABEL_9:
  unint64_t v43 = v26 & 0xC000000000000001;
  uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 6);
  uint64_t v38 = (void (**)(char *, uint64_t, uint64_t))(v37 + 4);
  ++v37;
  uint64_t v9 = 4;
  uint64_t v39 = v27;
  while (1)
  {
    uint64_t v0 = v9 - 4;
    if (v43)
    {
      uint64_t v1 = MEMORY[0x22A689930](v9 - 4, v26);
      uint64_t v4 = (char *)(v9 - 3);
      if (__OFADD__(v0, 1)) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v1 = *(void *)(v26 + 8 * v9);
      swift_retain();
      uint64_t v4 = (char *)(v9 - 3);
      if (__OFADD__(v0, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    uint64_t result = __REAssetBundle.sceneAsset(for:)(v1);
    if (!result) {
      break;
    }
    uint64_t v7 = result;
    RESceneDescriptorGetSceneIdentifier();
    uint64_t v28 = String.init(cString:)();
    uint64_t v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0) {
      uint64_t v30 = v28 & 0xFFFFFFFFFFFFLL;
    }
    if (v30)
    {
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v42)(v2, 1, v24) == 1)
      {
        swift_release();
        swift_release();
        outlined destroy of BodyTrackingComponent?(v2, &demangling cache variable for type metadata for UUID?);
      }
      else
      {
        unint64_t v31 = v26;
        uint64_t v32 = v40;
        (*v38)(v40, v2, v24);
        uint64_t v33 = v12;
        id v34 = v12[2];
        Class v35 = UUID._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v34, sel_setObject_forKey_, v7, v35);
        swift_release();
        swift_release();

        uint64_t v12 = v33;
        uint64_t v2 = (uint64_t)v41;

        uint64_t v36 = v32;
        unint64_t v26 = v31;
        uint64_t v27 = v39;
        (*v37)(v36, v24);
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    ++v9;
    if (v4 == (char *)v27) {
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.Entry.deinit()
{
  outlined destroy of __SceneResourceCache.Entry.EntryHolder(v0 + 16);
  return v0;
}

uint64_t outlined destroy of __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  return a1;
}

uint64_t __SceneResourceCache.Entry.__deallocating_deinit()
{
  outlined destroy of __SceneResourceCache.Entry.EntryHolder(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t static __SceneResourceCache.attachImportedScenesForSceneChangeToEntity(importedScenes:entity:)(uint64_t a1, void *a2)
{
  unint64_t v25 = a2;
  uint64_t v3 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  uint64_t v4 = *((void *)v3 - 1);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v8 = *((void *)v7 - 1);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    uint64_t v27 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v26 = *(void *)(v4 + 72);
    do
    {
      outlined init with copy of __SceneImportOperation.__ImportedScene(v13, (uint64_t)v6, type metadata accessor for __SceneImportOperation.__ImportedScene);
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v10, v6, v14);
      uint64_t v15 = &v6[v3[5]];
      uint64_t v17 = *(void *)v15;
      uint64_t v16 = *((void *)v15 + 1);
      uint64_t v18 = *(void *)&v6[v3[6]];
      LOBYTE(v15) = v6[v3[7]];
      uint64_t v19 = &v10[v7[5]];
      *(void *)uint64_t v19 = v17;
      *((void *)v19 + 1) = v16;
      *(void *)&v10[v7[6]] = v18;
      v10[v7[7]] = (char)v15;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v6, type metadata accessor for __SceneImportOperation.__ImportedScene);
      uint64_t v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v12 = v27;
      }
      unint64_t v21 = *(void *)(v12 + 16);
      unint64_t v20 = *(void *)(v12 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v12 = v27;
      }
      *(void *)(v12 + 16) = v21 + 1;
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v21);
      v13 += v26;
      --v11;
    }
    while (v11);
  }
  type metadata accessor for __SceneResourceCache.Entry();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v12;
  *(unsigned char *)(v22 + 80) = 1;
  __SceneResourceCache.Entry.attach(toEntity:)(v25);
  return swift_release();
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result = objc_msgSend(a1, sel_objectForKey_);
  uint64_t v9 = (uint64_t)result;
  if (!result)
  {
    outlined init with copy of __REAssetBundle(a3, (uint64_t)v12);
    type metadata accessor for __SceneResourceCache.Entry();
    uint64_t v9 = swift_allocObject();
    long long v10 = v12[1];
    *(_OWORD *)(v9 + 16) = v12[0];
    *(_OWORD *)(v9 + 32) = v10;
    long long v11 = v12[3];
    *(_OWORD *)(v9 + 48) = v12[2];
    *(_OWORD *)(v9 + 64) = v11;
    *(unsigned char *)(v9 + 80) = 0;
    id result = objc_msgSend(a1, sel_setObject_forKey_, v9, a2);
  }
  *a4 = v9;
  return result;
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id result = objc_msgSend(a1, sel_objectForKey_);
  uint64_t v9 = (uint64_t)result;
  if (!result)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a3;
    *(unsigned char *)(v9 + 80) = 1;
    swift_bridgeObjectRetain();
    id result = objc_msgSend(a1, sel_setObject_forKey_, v9, a2);
  }
  *a4 = v9;
  return result;
}

uint64_t static __SceneResourceCache.__init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = specialized __SceneResourceCache.CachedEntries.init()();
  *(void *)(v0 + 24) = v1;
  return v0;
}

void __SceneResourceCache.findSceneResource(named:bundle:options:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v204 = a4;
  uint64_t v248 = *MEMORY[0x263EF8340];
  uint64_t v9 = (void **)type metadata accessor for URL();
  uint64_t v222 = (uint64_t)*(v9 - 1);
  MEMORY[0x270FA5388](v9);
  uint64_t v195 = (char *)v191 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v196 = (char *)v191 - v12;
  MEMORY[0x270FA5388](v13);
  uint64_t v197 = (char *)v191 - v14;
  MEMORY[0x270FA5388](v15);
  uint64_t v199 = (char *)v191 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v220 = (char *)v191 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v202 = (char *)v191 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v22 = MEMORY[0x270FA5388](v21);
  uint64_t v217 = (char *)v191 - v23;
  uint64_t v24 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000, v22);
  uint64_t v212 = a3;
  id v25 = objc_msgSend(a3, sel_URLsForResourcesWithExtension_subdirectory_, v24, 0);

  if (!v25)
  {
    *(void *)(a5 + 32) = 0;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    return;
  }
  uint64_t v194 = (uint64_t *)a5;
  uint64_t v216 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v227 = a1;
  uint64_t v26 = (void *)MEMORY[0x22A688A50](a1, a2);
  id v27 = objc_msgSend(v26, sel_pathExtension);

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = (unint64_t)v29;

  if (v28 == 0x7974696C616572 && v30 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      uint64_t v228 = a2;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = String.count.getter();
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (v32) {
    goto LABEL_143;
  }
  uint64_t v34 = specialized BidirectionalCollection.dropLast(_:)(v33);
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  uint64_t v227 = MEMORY[0x22A688B50](v34, v36, v38, v40);
  uint64_t v228 = v41;
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v42 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v42 + 120, (uint64_t)&v242);
  uint64_t v43 = v244;
  uint64_t v44 = v245;
  unint64_t v30 = (unint64_t)__swift_project_boxed_opaque_existential_1(&v242, v244);
  float32x4_t v45 = *(uint64_t (**)(uint64_t, uint64_t))(v44 + 32);
  uint64_t v200 = v42;
  swift_retain();
  uint64_t v218 = v45(v43, v44);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v242);
  uint64_t v46 = v216;
  uint64_t v201 = *(void *)(v216 + 16);
  if (v201)
  {
    id v213 = 0;
    unint64_t v47 = 0;
    unint64_t v207 = v216 + ((*(unsigned __int8 *)(v222 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v222 + 80));
    uint64_t v210 = v222 + 16;
    uint64_t v205 = v222 + 48;
    uint64_t v206 = v222 + 56;
    uint64_t v203 = (void (**)(uint64_t, char *, void **))(v222 + 32);
    v208 = (void (**)(char *, void **))(v222 + 8);
    v191[1] = (v222 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    unint64_t v192 = 0x8000000228356420;
    uint64_t v28 = (uint64_t)v220;
    unint64_t v48 = v228;
    unint64_t v49 = v217;
    while (1)
    {
      if (v47 >= *(void *)(v46 + 16)) {
        goto LABEL_141;
      }
      uint64_t v50 = v222;
      uint64_t v51 = *(void *)(v222 + 72);
      unint64_t v211 = v47;
      uint64_t v198 = *(void (**)(char *, unint64_t, void **))(v222 + 16);
      v198(v49, v207 + v51 * v47, v9);
      uint64_t v209 = *(void (**)(char *, void, uint64_t, void **))(v50 + 56);
      v209(v49, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, void **))(v50 + 48))(v49, 1, v9) == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v30 = v227;
        goto LABEL_78;
      }
      (*v203)(v28, v49, v9);
      *(void *)&unsigned long long v229 = 0;
      URL._bridgeToObjectiveC()(v52);
      unint64_t v30 = (unint64_t)v53;
      uint64_t v54 = RERealityFileMountFileAtURL();

      if (v54)
      {
        uint64_t AssetDescriptorCount = RERealityFileGetAssetDescriptorCount();
        if (AssetDescriptorCount < 0) {
          goto LABEL_142;
        }
        uint64_t v56 = AssetDescriptorCount;
        if (AssetDescriptorCount)
        {
          uint64_t v57 = 0;
          uint64_t v28 = MEMORY[0x263F8EE78];
          do
          {
            if (RERealityFileGetAssetDescriptorAtIndex())
            {
              uint64_t v58 = RERealityFileAssetDescriptorAsSceneDescriptor();
              if (v58)
              {
                uint64_t v59 = v58;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v28 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, (void *)v28);
                }
                unint64_t v61 = *(void *)(v28 + 16);
                unint64_t v60 = *(void *)(v28 + 24);
                if (v61 >= v60 >> 1) {
                  uint64_t v28 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v60 > 1), v61 + 1, 1, (void *)v28);
                }
                *(void *)(v28 + 16) = v61 + 1;
                *(void *)(v28 + 8 * v61 + 32) = v59;
              }
            }
            ++v57;
          }
          while (v56 != v57);
        }
        else
        {
          uint64_t v28 = MEMORY[0x263F8EE78];
        }
        uint64_t v214 = *(void *)(v28 + 16);
        if (v214)
        {
          unint64_t v66 = 0;
          uint64_t v215 = v28 + 32;
          unint64_t v30 = v227;
          unint64_t v48 = v228;
          uint64_t v223 = v54;
          uint64_t v193 = v9;
          while (1)
          {
            if (v66 >= *(void *)(v28 + 16)) {
              goto LABEL_140;
            }
            unint64_t v221 = v66;
            uint64_t v67 = *(void *)(v215 + 8 * v66);
            if (RESceneDescriptorGetSceneName())
            {
              uint64_t v68 = String.init(cString:)();
              unint64_t v70 = v69;
              if (v68 != v30) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v68 = 0;
              unint64_t v70 = 0xE000000000000000;
              if (v30) {
                goto LABEL_39;
              }
            }
            if (v70 == v48)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v68 = v30;
              unint64_t v70 = v48;
              goto LABEL_100;
            }
LABEL_39:
            if (_stringCompareWithSmolCheck(_:_:expecting:)())
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_100;
            }
            if (one-time initialization token for usdExtensions != -1) {
              swift_once();
            }
            uint64_t v71 = (void *)static LoadUtilities.usdExtensions;
            uint64_t v225 = *(void *)(static LoadUtilities.usdExtensions + 16);
            if (v225)
            {
              unint64_t v224 = v70;
              uint64_t v226 = v68;
              uint64_t v73 = *(void *)(static LoadUtilities.usdExtensions + 32);
              uint64_t v72 = *(void **)(static LoadUtilities.usdExtensions + 40);
              unint64_t v242 = v30;
              unint64_t v243 = v228;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v74._uint64_t countAndFlagsBits = 46;
              v74._object = (void *)0xE100000000000000;
              String.append(_:)(v74);
              swift_bridgeObjectRetain();
              v75._uint64_t countAndFlagsBits = v73;
              unint64_t v70 = v224;
              v75._object = v72;
              String.append(_:)(v75);
              swift_bridgeObjectRelease();
              uint64_t v68 = v226;
              swift_bridgeObjectRelease();
              unint64_t v30 = v243;
              if (v68 == v242 && v70 == v243 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_99;
              }
              swift_bridgeObjectRelease();
              if (v225 == 1)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unint64_t v30 = v227;
              }
              else
              {
                if (v71[2] < 2uLL) {
                  goto LABEL_144;
                }
                uint64_t v76 = v71[6];
                uint64_t v77 = (void *)v71[7];
                unint64_t v242 = v227;
                unint64_t v243 = v228;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v78._uint64_t countAndFlagsBits = 46;
                v78._object = (void *)0xE100000000000000;
                String.append(_:)(v78);
                swift_bridgeObjectRetain();
                v79._uint64_t countAndFlagsBits = v76;
                uint64_t v68 = v226;
                v79._object = v77;
                String.append(_:)(v79);
                unint64_t v70 = v224;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v68 == v242 && v70 == v243 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
LABEL_99:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  unint64_t v30 = v227;
                  unint64_t v48 = v228;
LABEL_100:
                  uint64_t v226 = v68;
                  RERetain();
                  type metadata accessor for RESceneDescriptor();
                  uint64_t v121 = swift_allocObject();
                  *(void *)(v121 + 16) = v67;
                  if (RERealityFileGetCertifiedFreeOfChangeSceneActions())
                  {
                    outlined init with copy of __REAssetBundle.LoadOptions(v204, (uint64_t)&v242);
                    outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v246, *((unint64_t *)&v246 + 1));
                    *(void *)&long long v246 = v30;
                    *((void *)&v246 + 1) = v48;
                    long long v122 = v212;
                    uint64_t v123 = v220;
                    uint64_t v124 = URL.lastPathComponent.getter();
                    id v126 = v125;
                    uint64_t v127 = specialized static __ServiceLocator.shared.getter();
                    outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v242, (uint64_t)&v229);
                    swift_retain();
                    uint64_t v128 = v219;
                    __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v122, v124, v126, v127, (uint64_t)&v229, (uint64_t *)&v238);
                    if (v128)
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                      RERealityFileUnmount();
                      swift_release();

                      (*v208)(v123, v9);
                    }
                    else
                    {
                      uint64_t v219 = 0;
                      uint64_t v134 = __REAssetBundle.sceneAsset(for:)(v121);
                      if (v134)
                      {
                        uint64_t v135 = v134;
                        swift_bridgeObjectRelease();
                        swift_retain();
                        uint64_t v136 = v220;
                        uint64_t v228 = URL.lastPathComponent.getter();
                        uint64_t v138 = v137;
                        uint64_t v139 = *(void *)(v135 + 16);
                        RERetain();
                        type metadata accessor for __SceneResource();
                        uint64_t v140 = swift_allocObject();
                        *(void *)(v140 + 16) = v139;
                        swift_release();
                        uint64_t v141 = v194;
                        v194[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
                        v141[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
                        uint64_t v142 = swift_allocObject();
                        *uint64_t v141 = v142;
                        swift_release();
                        swift_release();
                        *(void *)(v142 + 16) = v140;
                        *(unsigned char *)(v142 + 24) = 0;
                        *(void *)(v142 + 32) = v228;
                        *(void *)(v142 + 40) = v138;
                        outlined destroy of __REAssetBundle((uint64_t)&v238);
                        outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                        RERealityFileUnmount();
                        swift_release();

                        (*v208)(v136, v9);
                      }
                      else
                      {
                        type metadata accessor for SceneResourceLoadResult.InternalError(0);
                        lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
                        swift_allocError();
                        char v167 = v166;
                        uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
                        uint64_t v169 = (char *)v167 + *(int *)(v168 + 48);
                        *char v167 = v226;
                        v167[1] = v70;
                        uint64_t v170 = v220;
                        v198(v169, (unint64_t)v220, v9);
                        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56))(v167, 0, 2, v168);
                        swift_willThrow();
                        swift_release();
                        outlined destroy of __REAssetBundle((uint64_t)&v238);
                        outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                        RERealityFileUnmount();
                        swift_release();

                        (*v208)(v170, v9);
                      }
                    }
                    return;
                  }
                  swift_bridgeObjectRelease();
                  outlined init with copy of __REAssetBundle.LoadOptions(v204, (uint64_t)&v242);
                  outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v246, *((unint64_t *)&v246 + 1));
                  long long v246 = 0uLL;
                  uint64_t v129 = v220;
                  uint64_t v130 = (void *)URL.lastPathComponent.getter();
                  uint64_t v131 = v219;
                  uint64_t v133 = __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(v212, v130, v132, (uint64_t)&v242);
                  if (v131)
                  {
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                    RERealityFileUnmount();
                    swift_release();

                    (*v208)(v129, v9);
                    return;
                  }
                  uint64_t v143 = v133;
                  swift_bridgeObjectRelease();
                  outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v143 + 16, (uint64_t)&v229);
                  if (v233 == 1)
                  {
                    outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v229);
                    unsigned long long v234 = 0u;
                    long long v235 = 0u;
                    long long v236 = 0u;
                    long long v237 = 0u;
                    goto LABEL_114;
                  }
                  unsigned long long v234 = v229;
                  long long v235 = v230;
                  long long v236 = v231;
                  long long v237 = v232;
                  if ((void)v229)
                  {
                    uint64_t v219 = 0;
                    unsigned long long v238 = v234;
                    long long v239 = v235;
                    long long v240 = v236;
                    long long v241 = v237;
                    uint64_t v146 = __REAssetBundle.sceneAsset(for:)(v121);
                    if (v146)
                    {
                      uint64_t v147 = v146;
                      swift_bridgeObjectRelease();
                      uint64_t v148 = v220;
                      uint64_t v149 = URL.lastPathComponent.getter();
                      uint64_t v227 = v150;
                      uint64_t v228 = v149;
                      uint64_t v151 = v194;
                      v194[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
                      v151[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
                      uint64_t v152 = swift_allocObject();
                      *uint64_t v151 = v152;
                      uint64_t v153 = *(void *)(v147 + 16);
                      RERetain();
                      type metadata accessor for __SceneResource();
                      uint64_t v154 = v9;
                      uint64_t v155 = swift_allocObject();
                      *(void *)(v155 + 16) = v153;
                      swift_release();
                      swift_release();
                      uint64_t v156 = v228;
                      *(void *)(v152 + 16) = v155;
                      *(void *)(v152 + 24) = v156;
                      *(void *)(v152 + 32) = v227;
                      *(void *)(v152 + 40) = v143;
                      *(unsigned char *)(v152 + 48) = 1;
                      outlined destroy of __REAssetBundle((uint64_t)&v238);
                      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                      RERealityFileUnmount();
                      swift_release();

                      (*v208)(v148, v154);
                      return;
                    }
                    outlined destroy of __REAssetBundle((uint64_t)&v238);
                  }
                  else
                  {
LABEL_114:
                    outlined destroy of BodyTrackingComponent?((uint64_t)&v234, &demangling cache variable for type metadata for __REAssetBundle?);
                  }
                  type metadata accessor for SceneResourceLoadResult.InternalError(0);
                  lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
                  swift_allocError();
                  uint64_t v158 = v157;
                  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
                  uint64_t v160 = (char *)v158 + *(int *)(v159 + 48);
                  uint64_t *v158 = v226;
                  v158[1] = v70;
                  uint64_t v161 = v220;
                  v198(v160, (unint64_t)v220, v9);
                  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v159 - 8) + 56))(v158, 0, 2, v159);
                  swift_willThrow();
                  swift_release();
                  swift_release();
                  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                  RERealityFileUnmount();
                  swift_release();

                  (*v208)(v161, v9);
                  return;
                }
                swift_bridgeObjectRelease();
                if (v225 != 2)
                {
                  v191[0] = v67;
                  uint64_t v9 = (void **)(v71 + 9);
                  unint64_t v80 = 2;
                  unint64_t v30 = v227;
                  while (v80 < v71[2])
                  {
                    uint64_t v82 = (uint64_t)*(v9 - 1);
                    long long v81 = *v9;
                    unint64_t v242 = v30;
                    unint64_t v243 = v228;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    v83._uint64_t countAndFlagsBits = 46;
                    v83._object = (void *)0xE100000000000000;
                    String.append(_:)(v83);
                    swift_bridgeObjectRetain();
                    v84._uint64_t countAndFlagsBits = v82;
                    v84._object = v81;
                    String.append(_:)(v84);
                    unint64_t v70 = v224;
                    swift_bridgeObjectRelease();
                    uint64_t v68 = v226;
                    swift_bridgeObjectRelease();
                    if (v68 == v242 && v70 == v243)
                    {
                      uint64_t v9 = v193;
                      uint64_t v67 = v191[0];
                      goto LABEL_99;
                    }
                    if (_stringCompareWithSmolCheck(_:_:expecting:)())
                    {
                      uint64_t v9 = v193;
                      uint64_t v67 = v191[0];
                      goto LABEL_99;
                    }
                    ++v80;
                    swift_bridgeObjectRelease();
                    v9 += 2;
                    unint64_t v30 = v227;
                    if (v225 == v80) {
                      goto LABEL_60;
                    }
                  }
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  swift_bridgeObjectRetain();
                  if (!_CocoaArrayWrapper.endIndex.getter()) {
                    goto LABEL_146;
                  }
LABEL_85:
                  if ((v30 & 0xC000000000000001) != 0)
                  {
                    uint64_t v112 = MEMORY[0x22A689930](0, v30);
                    goto LABEL_88;
                  }
                  if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  {
                    uint64_t v112 = *(void *)(v30 + 32);
                    swift_retain();
LABEL_88:
                    swift_bridgeObjectRelease();
                    swift_retain();
                    uint64_t v113 = v197;
                    uint64_t v228 = URL.lastPathComponent.getter();
                    uint64_t v115 = v114;
                    uint64_t v116 = *(void *)(v112 + 16);
                    RERetain();
                    type metadata accessor for __SceneResource();
                    uint64_t v117 = swift_allocObject();
                    *(void *)(v117 + 16) = v116;
                    swift_release();
                    long long v118 = v194;
                    v194[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
                    v118[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
                    uint64_t v119 = swift_allocObject();
                    uint64_t *v118 = v119;
                    swift_release();
                    *(void *)(v119 + 16) = v117;
                    *(unsigned char *)(v119 + 24) = 0;
                    *(void *)(v119 + 32) = v228;
                    *(void *)(v119 + 40) = v115;
                    outlined destroy of __REAssetBundle((uint64_t)&v238);
                    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                    RERealityFileUnmount();
                    swift_release();

                    (*(void (**)(char *, void **))(v222 + 8))(v113, v9);
                    return;
                  }
                  __break(1u);
LABEL_150:
                  swift_bridgeObjectRetain();
                  if (!_CocoaArrayWrapper.endIndex.getter()) {
                    goto LABEL_151;
                  }
LABEL_129:
                  uint64_t v193 = v9;
                  if ((v30 & 0xC000000000000001) != 0)
                  {
                    uint64_t v175 = MEMORY[0x22A689930](0, v30);
                  }
                  else
                  {
                    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      __break(1u);
                      return;
                    }
                    uint64_t v175 = *(void *)(v30 + 32);
                    swift_retain();
                  }
                  swift_bridgeObjectRelease();
                  uint64_t v176 = v197;
                  uint64_t v228 = URL.lastPathComponent.getter();
                  uint64_t v178 = v177;
                  uint64_t v179 = v194;
                  v194[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
                  v179[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
                  uint64_t v180 = swift_allocObject();
                  *uint64_t v179 = v180;
                  uint64_t v181 = *(void *)(v175 + 16);
                  RERetain();
                  type metadata accessor for __SceneResource();
                  uint64_t v182 = swift_allocObject();
                  *(void *)(v182 + 16) = v181;
                  swift_release();
                  uint64_t v183 = v228;
                  *(void *)(v180 + 16) = v182;
                  *(void *)(v180 + 24) = v183;
                  *(void *)(v180 + 32) = v178;
                  *(void *)(v180 + 40) = v28;
                  *(unsigned char *)(v180 + 48) = 0;
                  outlined destroy of __REAssetBundle((uint64_t)&v238);
                  outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
                  RERealityFileUnmount();
                  swift_release();

                  (*(void (**)(char *, void **))(v222 + 8))(v176, v193);
                  return;
                }
                unint64_t v30 = v227;
LABEL_60:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v9 = v193;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            unint64_t v66 = v221 + 1;
            unint64_t v48 = v228;
            if (v221 + 1 == v214)
            {
              swift_bridgeObjectRelease();
              goto LABEL_62;
            }
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v30 = v227;
        unint64_t v48 = v228;
LABEL_62:
        RERealityFileUnmount();
        uint64_t v28 = (uint64_t)v220;
        (*v208)(v220, v9);
        uint64_t v46 = v216;
        unint64_t v49 = v217;
        goto LABEL_73;
      }
      uint64_t v62 = v229;
      uint64_t v63 = v219;
      specialized static __REAssetBundle.checkForUnsupportedVersion(_:)((void *)v229);
      if (!v63) {
        break;
      }
      uint64_t v64 = v63;
      uint64_t v65 = *v208;
LABEL_69:
      uint64_t v219 = 0;
      v65(v220, v9);
      uint64_t v46 = v216;
      unint64_t v49 = v217;
      if (v213) {

      }
      else {
        id v213 = v64;
      }
      uint64_t v28 = (uint64_t)v220;
      unint64_t v30 = v227;
LABEL_73:
      unint64_t v47 = v211 + 1;
      if (v211 + 1 == v201)
      {
        uint64_t v171 = v209;
        goto LABEL_77;
      }
    }
    long long v85 = v199;
    if (v62)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v64 = (void *)swift_allocError();
      *long long v86 = v62;
      v198(v85, (unint64_t)v220, v9);
      if (v64)
      {
LABEL_68:
        uint64_t v65 = *v208;
        (*v208)(v85, v9);
        swift_willThrow();
        goto LABEL_69;
      }
    }
    else
    {
      v198(v199, (unint64_t)v220, v9);
    }
    unint64_t v242 = 0;
    unint64_t v243 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v242 = 0xD00000000000001FLL;
    unint64_t v243 = v192;
    v87._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    v88._uint64_t countAndFlagsBits = 46;
    v88._object = (void *)0xE100000000000000;
    String.append(_:)(v88);
    unint64_t v89 = v242;
    unint64_t v90 = v243;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    uint64_t v64 = (void *)swift_allocError();
    *(void *)uint64_t v91 = v89;
    *(void *)(v91 + 8) = v90;
    long long v85 = v199;
    *(unsigned char *)(v91 + 16) = 3;
    goto LABEL_68;
  }
  id v213 = 0;
  uint64_t v171 = *(void (**)(char *, void, uint64_t, void **))(v222 + 56);
  unint64_t v30 = v227;
  unint64_t v48 = v228;
  unint64_t v49 = v217;
LABEL_77:
  uint64_t v209 = v171;
  v171(v49, 1, 1, v9);
  swift_bridgeObjectRelease();
LABEL_78:
  long long v92 = (void *)MEMORY[0x22A688A50](v30, v48);
  double v93 = (void *)MEMORY[0x22A688A50](0x7974696C616572, 0xE700000000000000);
  id v94 = objc_msgSend(v212, sel_URLForResource_withExtension_subdirectory_, v92, v93, 0);

  if (!v94)
  {
    uint64_t v98 = (uint64_t)v202;
    v209(v202, 1, 1, v9);
    goto LABEL_90;
  }
  char v95 = v196;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v96 = v222;
  uint64_t v97 = *(void (**)(char *, char *, void **))(v222 + 32);
  uint64_t v98 = (uint64_t)v202;
  v97(v202, v95, v9);
  v209((char *)v98, 0, 1, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(v96 + 48))(v98, 1, v9) == 1)
  {
LABEL_90:
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?(v98, &demangling cache variable for type metadata for URL?);
LABEL_91:
    long long v120 = v194;
    if (!v213)
    {
      swift_release();
      v120[4] = 0;
      *(_OWORD *)long long v120 = 0u;
      *((_OWORD *)v120 + 1) = 0u;
      return;
    }
    swift_willThrow();
LABEL_93:
    swift_release();
    return;
  }
  v97(v197, (char *)v98, v9);
  uint64_t v247 = 0;
  URL._bridgeToObjectiveC()(v99);
  uint64_t v101 = v100;
  uint64_t v102 = RERealityFileMountFileAtURL();

  if (v102)
  {
    if (RERealityFileGetCertifiedFreeOfChangeSceneActions())
    {
      outlined init with copy of __REAssetBundle.LoadOptions(v204, (uint64_t)&v242);
      outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v246, *((unint64_t *)&v246 + 1));
      long long v246 = xmmword_228323FE0;
      *(void *)&unsigned long long v229 = v227;
      *((void *)&v229 + 1) = v48;
      swift_bridgeObjectRetain();
      v103._uint64_t countAndFlagsBits = 46;
      v103._object = (void *)0xE100000000000000;
      String.append(_:)(v103);
      unint64_t v105 = *((void *)&v229 + 1);
      unint64_t v104 = v229;
      char v106 = v212;
      swift_bridgeObjectRelease();
      unsigned long long v229 = __PAIR128__(v105, v104);
      swift_bridgeObjectRetain();
      v107._uint64_t countAndFlagsBits = 0x7974696C616572;
      v107._object = (void *)0xE700000000000000;
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      uint64_t v28 = *((void *)&v229 + 1);
      uint64_t v108 = v229;
      uint64_t v109 = specialized static __ServiceLocator.shared.getter();
      outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)&v242, (uint64_t)&v229);
      swift_retain();
      uint64_t v110 = v219;
      __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v106, v108, (void *)v28, v109, (uint64_t)&v229, (uint64_t *)&v238);
      if (!v110)
      {
        uint64_t v219 = 0;
        unint64_t v30 = *((void *)&v238 + 1);
        if (*((void *)&v238 + 1) >> 62) {
          goto LABEL_145;
        }
        uint64_t v111 = *(void *)((*((void *)&v238 + 1) & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v111) {
          goto LABEL_85;
        }
LABEL_146:
        swift_bridgeObjectRelease();
        outlined destroy of __REAssetBundle((uint64_t)&v238);
        outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
        goto LABEL_147;
      }
LABEL_119:
      outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
      RERealityFileUnmount();
      swift_release();

      (*(void (**)(char *, void **))(v222 + 8))(v197, v9);
      return;
    }
    outlined init with copy of __REAssetBundle.LoadOptions(v204, (uint64_t)&v242);
    outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v246, *((unint64_t *)&v246 + 1));
    long long v246 = 0uLL;
    *(void *)&unsigned long long v229 = v227;
    *((void *)&v229 + 1) = v48;
    swift_bridgeObjectRetain();
    v162._uint64_t countAndFlagsBits = 46;
    v162._object = (void *)0xE100000000000000;
    String.append(_:)(v162);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v163._uint64_t countAndFlagsBits = 0x7974696C616572;
    v163._object = (void *)0xE700000000000000;
    String.append(_:)(v163);
    swift_bridgeObjectRelease();
    uint64_t v164 = v219;
    uint64_t v165 = __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(v212, (void *)v229, *((void **)&v229 + 1), (uint64_t)&v242);
    if (v164)
    {
      swift_bridgeObjectRelease();
      goto LABEL_119;
    }
    uint64_t v28 = v165;
    swift_bridgeObjectRelease();
    outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v28 + 16, (uint64_t)&v229);
    if (v233 == 1)
    {
      outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v229);
      unsigned long long v234 = 0u;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
    }
    else
    {
      unsigned long long v234 = v229;
      long long v235 = v230;
      long long v236 = v231;
      long long v237 = v232;
      if ((void)v229)
      {
        uint64_t v219 = 0;
        unsigned long long v238 = v234;
        long long v239 = v235;
        long long v240 = v236;
        long long v241 = v237;
        unint64_t v30 = *((void *)&v234 + 1);
        if (*((void *)&v234 + 1) >> 62) {
          goto LABEL_150;
        }
        uint64_t v174 = *(void *)((*((void *)&v234 + 1) & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v174) {
          goto LABEL_129;
        }
LABEL_151:
        swift_bridgeObjectRelease();
        outlined destroy of __REAssetBundle((uint64_t)&v238);
        swift_release();
        goto LABEL_134;
      }
    }
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v234, &demangling cache variable for type metadata for __REAssetBundle?);
LABEL_134:
    outlined destroy of __REAssetBundle.LoadOptions((uint64_t)&v242);
LABEL_147:
    RERealityFileUnmount();
    (*(void (**)(char *, void **))(v222 + 8))(v197, v9);
    goto LABEL_91;
  }
  swift_bridgeObjectRelease();
  uint64_t v144 = v247;
  unint64_t v145 = v219;
  specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v247);
  if (v145)
  {
    (*(void (**)(char *, void **))(v222 + 8))(v197, v9);

    goto LABEL_93;
  }
  if (v144)
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
    uint64_t v172 = swift_allocError();
    void *v173 = v144;
  }
  else
  {
    uint64_t v172 = 0;
  }
  uint64_t v184 = v195;
  (*(void (**)(char *, char *, void **))(v222 + 16))(v195, v197, v9);
  if (!v172)
  {
    unint64_t v242 = 0;
    unint64_t v243 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    unint64_t v242 = 0xD00000000000001FLL;
    unint64_t v243 = 0x8000000228356420;
    v185._uint64_t countAndFlagsBits = URL.path.getter();
    String.append(_:)(v185);
    swift_bridgeObjectRelease();
    v186._uint64_t countAndFlagsBits = 46;
    v186._object = (void *)0xE100000000000000;
    String.append(_:)(v186);
    unint64_t v187 = v242;
    unint64_t v188 = v243;
    lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
    swift_allocError();
    *(void *)uint64_t v189 = v187;
    *(void *)(v189 + 8) = v188;
    *(unsigned char *)(v189 + 16) = 3;
  }
  uint64_t v190 = *(void (**)(char *, void **))(v222 + 8);
  v190(v184, v9);
  swift_willThrow();
  swift_release();

  v190(v197, v9);
}

uint64_t __SceneResourceCache.loadAssetBundle(bundle:entryName:options:)(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v43 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v41 - v18;
  id v45 = a2;
  uint64_t v20 = (void *)MEMORY[0x22A688A50](a2, a3, v17);
  id v44 = a1;
  id v21 = objc_msgSend(a1, sel_URLForResource_withExtension_subdirectory_, v20, 0, 0);

  if (v21)
  {
    uint64_t v42 = a3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    __n128 v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v22(v11, v15, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
    if (result != 1)
    {
      v22(v19, v11, v12);
      URL._bridgeToObjectiveC()(v24);
      uint64_t v26 = v25;
      id v27 = *(void **)(v5 + 24);
      MEMORY[0x270FA5388](v25);
      *(&v41 - 4) = (uint64_t)v28;
      *(&v41 - 3) = (uint64_t)v27;
      *(&v41 - 2) = v29;
      id v30 = v28;
      id v31 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneResourceCache.Entry?);
      BOOL v32 = v48;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v33 = v32;

      uint64_t v34 = (void *)v46[0];
      if (!v46[0])
      {
        uint64_t v35 = specialized static __ServiceLocator.shared.getter();
        outlined init with copy of __REAssetBundle.LoadOptions(v43, (uint64_t)v46);
        swift_retain_n();
        id v36 = v44;
        uint64_t v34 = v42;
        swift_bridgeObjectRetain();
        uint64_t v37 = __REAssetBundle.init(bundle:entryName:serviceLocator:_:)(v36, (uint64_t)v45, v34, v35, (uint64_t)v46, v47);
        if (v33)
        {
          swift_release();

          (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
          return (uint64_t)v34;
        }
        unint64_t v48 = &v41;
        uint64_t v38 = *(void **)(v5 + 16);
        uint64_t v39 = *(void **)(v5 + 24);
        MEMORY[0x270FA5388](v37);
        *(&v41 - 4) = (uint64_t)v38;
        *(&v41 - 3) = (uint64_t)v39;
        *(&v41 - 2) = (uint64_t)v26;
        *(&v41 - 1) = (uint64_t)v47;
        id v44 = (id)type metadata accessor for __SceneResourceCache.Entry();
        id v45 = v38;
        id v40 = v39;
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();

        uint64_t v34 = (void *)v46[0];
        outlined destroy of __REAssetBundle((uint64_t)v47);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);

      return (uint64_t)v34;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.loadSceneResource(url:sceneName:loadOptions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v93 = a2;
  unint64_t v96 = a3;
  unint64_t v90 = a5;
  uint64_t v114 = *MEMORY[0x263EF8340];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v94 = *(void *)(v7 - 8);
  uint64_t v95 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v89 - v11;
  memset(v113, 0, sizeof(v113));
  outlined init with copy of __REAssetBundle.LoadOptions(a4, (uint64_t)v110);
  uint64_t v13 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v13 + 120, (uint64_t)&v99);
  uint64_t v14 = *((void *)&v100 + 1);
  uint64_t v15 = v101;
  __swift_project_boxed_opaque_existential_1(&v99, *((uint64_t *)&v100 + 1));
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
  uint64_t v97 = v13;
  uint64_t v17 = a1;
  swift_retain();
  uint64_t v18 = v16(v14, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v99);
  uint64_t v109 = 0;
  URL._bridgeToObjectiveC()(v19);
  id v21 = v20;
  uint64_t v22 = RERealityFileMountFileAtURL();

  if (!v22)
  {
    BOOL v32 = v109;
    uint64_t v33 = v98;
    specialized static __REAssetBundle.checkForUnsupportedVersion(_:)(v109);
    if (v33)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
      swift_release();
      return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v110);
    }
    if (v32)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v35 = swift_allocError();
      *id v36 = v32;
    }
    else
    {
      uint64_t v35 = 0;
    }
    uint64_t v63 = v94;
    uint64_t v62 = v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v9, v17, v95);
    if (!v35)
    {
      *(void *)&long long v99 = 0;
      *((void *)&v99 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      *(void *)&long long v99 = 0xD00000000000001FLL;
      *((void *)&v99 + 1) = 0x8000000228356420;
      v64._uint64_t countAndFlagsBits = URL.path.getter();
      String.append(_:)(v64);
      swift_bridgeObjectRelease();
      v65._uint64_t countAndFlagsBits = 46;
      v65._object = (void *)0xE100000000000000;
      String.append(_:)(v65);
      long long v66 = v99;
      lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError();
      swift_allocError();
      *(_OWORD *)uint64_t v67 = v66;
      *(unsigned char *)(v67 + 16) = 3;
    }
    (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v62);
    swift_willThrow();
    goto LABEL_40;
  }
  uint64_t v91 = v18;
  uint64_t v23 = v98;
  int v24 = RERealityFileGetCertifiedFreeOfChangeSceneActions();
  if (v24)
  {
    uint64_t v25 = v17;
    if (v96) {
      uint64_t v26 = v93;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v96 <= 1) {
      unint64_t v27 = 1;
    }
    else {
      unint64_t v27 = v96;
    }
    uint64_t v29 = v111;
    unint64_t v28 = v112;
    swift_bridgeObjectRetain();
    outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v29, v28);
    uint64_t v111 = v26;
    unint64_t v112 = v27;
    uint64_t v17 = v25;
    uint64_t v30 = specialized static __ServiceLocator.shared.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v12, v25, v95);
    outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v110, (uint64_t)&v99);
    swift_retain();
    __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v12, v30, (uint64_t)&v99, (uint64_t *)v104);
    if (!v23)
    {
      long long v105 = v104[0];
      long long v106 = v104[1];
      long long v107 = v104[2];
      long long v108 = v104[3];
      outlined destroy of BodyTrackingComponent?((uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
      outlined init with take of Transform?((uint64_t)&v105, (uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
      uint64_t v31 = 0;
      goto LABEL_21;
    }
LABEL_14:
    RERealityFileUnmount();
LABEL_40:
    swift_release();
    goto LABEL_41;
  }
  outlined consume of __REAssetBundle.LoadOptions.ContentRequest(v111, v112);
  uint64_t v111 = 0;
  unint64_t v112 = 0;
  uint64_t v34 = __SceneResourceCache.loadAssetBundle(url:loadOptions:)(v17, (uint64_t)v110);
  if (v23) {
    goto LABEL_14;
  }
  uint64_t v31 = v34;
  outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v34 + 16, (uint64_t)&v99);
  if (v103)
  {
    swift_retain();
    outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)&v99);
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    swift_release();
  }
  else
  {
    long long v105 = v99;
    long long v106 = v100;
    long long v107 = v101;
    long long v108 = v102;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
  outlined init with take of Transform?((uint64_t)&v105, (uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
LABEL_21:
  outlined init with copy of __REAssetBundle?((uint64_t)v113, (uint64_t)&v105);
  if (!(void)v105)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v105, &demangling cache variable for type metadata for __REAssetBundle?);
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    uint64_t v53 = v52;
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 2, v54);
    swift_willThrow();
    RERealityFileUnmount();
    swift_release();
    swift_release();
LABEL_41:
    outlined destroy of BodyTrackingComponent?((uint64_t)v113, &demangling cache variable for type metadata for __REAssetBundle?);
    return outlined destroy of __REAssetBundle.LoadOptions((uint64_t)v110);
  }
  long long v99 = v105;
  long long v100 = v106;
  long long v101 = v107;
  long long v102 = v108;
  if (v96)
  {
    uint64_t v98 = v17;
    unint64_t v37 = *((void *)&v99 + 1);
    MEMORY[0x270FA5388](v96);
    *(&v89 - 2) = (uint64_t)&v99;
    uint64_t v92 = v31;
    uint64_t v39 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v40 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))closure #1 in __REAssetBundle.getSceneDescriptors()partial apply, (uint64_t)(&v89 - 4), v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v41 = v93;
    uint64_t v42 = specialized Sequence.first(where:)(v40, v93, v39);
    swift_bridgeObjectRelease();
    uint64_t v43 = v92;
    swift_bridgeObjectRelease();
    if (v42)
    {
      uint64_t v44 = __REAssetBundle.sceneAsset(for:)(v42);
      if (v44)
      {
        uint64_t v45 = v44;
        uint64_t v95 = v42;
        swift_bridgeObjectRelease();
        if (v24)
        {
          swift_retain();
          uint64_t v46 = URL.lastPathComponent.getter();
          uint64_t v98 = v47;
          uint64_t v48 = *(void *)(v45 + 16);
          RERetain();
          type metadata accessor for __SceneResource();
          uint64_t v49 = swift_allocObject();
          *(void *)(v49 + 16) = v48;
          swift_release();
          uint64_t v50 = v90;
          v90[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
          v50[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
          uint64_t v51 = swift_allocObject();
          *uint64_t v50 = v51;
          swift_release();
LABEL_35:
          swift_release();
          *(void *)(v51 + 16) = v49;
          *(unsigned char *)(v51 + 24) = 0;
          uint64_t v61 = v98;
          *(void *)(v51 + 32) = v46;
          *(void *)(v51 + 40) = v61;
          outlined destroy of __REAssetBundle((uint64_t)&v99);
          RERealityFileUnmount();
          swift_release();
          goto LABEL_40;
        }
        unint64_t v96 = v22;
        uint64_t result = URL.lastPathComponent.getter();
        if (v43)
        {
          uint64_t v76 = result;
          uint64_t v77 = v75;
          uint64_t v78 = v43;
          Swift::String v79 = v90;
          v90[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
          v79[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
          uint64_t v80 = swift_allocObject();
          *Swift::String v79 = v80;
          uint64_t v81 = *(void *)(v45 + 16);
          swift_retain();
          RERetain();
          type metadata accessor for __SceneResource();
          uint64_t v82 = swift_allocObject();
          *(void *)(v82 + 16) = v81;
          swift_release();
LABEL_49:
          swift_release();
          *(void *)(v80 + 16) = v82;
          *(void *)(v80 + 24) = v76;
          *(void *)(v80 + 32) = v77;
          *(void *)(v80 + 40) = v78;
          *(unsigned char *)(v80 + 48) = 0;
          outlined destroy of __REAssetBundle((uint64_t)&v99);
          RERealityFileUnmount();
          swift_release();
          goto LABEL_40;
        }
        __break(1u);
        goto LABEL_56;
      }
      swift_release();
    }
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    unint64_t v70 = v69;
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    uint64_t v72 = (char *)v70 + *(int *)(v71 + 48);
    uint64_t v73 = v95;
    unint64_t v74 = v96;
    *unint64_t v70 = v41;
    v70[1] = v74;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v72, v98, v73);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v70, 0, 2, v71);
LABEL_52:
    swift_willThrow();
    outlined destroy of __REAssetBundle((uint64_t)&v99);
    RERealityFileUnmount();
    swift_release();
    goto LABEL_40;
  }
  uint64_t v55 = *((void *)&v99 + 1);
  if (!(*((void *)&v99 + 1) >> 62))
  {
    uint64_t v56 = *(void *)((*((void *)&v99 + 1) & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v56) {
      goto LABEL_30;
    }
LABEL_51:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    uint64_t v87 = v86;
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 2, v88);
    goto LABEL_52;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_51;
  }
LABEL_30:
  if ((v55 & 0xC000000000000001) != 0)
  {
    uint64_t v57 = MEMORY[0x22A689930](0, v55);
  }
  else
  {
    if (!*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    uint64_t v57 = *(void *)(v55 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  if (v24)
  {
    swift_retain();
    uint64_t v46 = URL.lastPathComponent.getter();
    uint64_t v98 = v58;
    uint64_t v59 = *(void *)(v57 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v59;
    swift_release();
    unint64_t v60 = v90;
    v90[3] = (uint64_t)&type metadata for UncachedSceneResourceLoadResult;
    v60[4] = (uint64_t)&protocol witness table for UncachedSceneResourceLoadResult;
    uint64_t v51 = swift_allocObject();
    *unint64_t v60 = v51;
    goto LABEL_35;
  }
  unint64_t v96 = v22;
  uint64_t result = URL.lastPathComponent.getter();
  if (v31)
  {
    uint64_t v76 = result;
    uint64_t v77 = v83;
    uint64_t v78 = v31;
    Swift::String v84 = v90;
    v90[3] = (uint64_t)&type metadata for SceneResourceLoadResult;
    v84[4] = (uint64_t)&protocol witness table for SceneResourceLoadResult;
    uint64_t v80 = swift_allocObject();
    *Swift::String v84 = v80;
    uint64_t v85 = *(void *)(v57 + 16);
    swift_retain();
    RERetain();
    type metadata accessor for __SceneResource();
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = v85;
    goto LABEL_49;
  }
LABEL_56:
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.loadAssetBundle(url:loadOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v25 = (uint64_t *)a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v24 - v10;
  URL.standardizedFileURL.getter();
  URL._bridgeToObjectiveC()(v12);
  uint64_t v13 = *(void **)(v2 + 24);
  id v26 = *(id *)(v4 + 16);
  unint64_t v27 = v13;
  id v32 = v14;
  unint64_t v28 = v14;
  id v15 = v26;
  id v16 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneResourceCache.Entry?);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v17 = v29[0];
  if (!v29[0])
  {
    uint64_t v17 = specialized static __ServiceLocator.shared.getter();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
    outlined init with copy of __REAssetBundle.LoadOptions((uint64_t)v25, (uint64_t)v29);
    swift_retain();
    uint64_t v18 = __REAssetBundle.init(url:serviceLocator:_:)((uint64_t)v8, v17, (uint64_t)v29, (uint64_t *)v30);
    if (v3)
    {

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v17;
    }
    uint64_t v25 = &v24;
    v31[0] = v30[0];
    v31[1] = v30[1];
    uint64_t v31[2] = v30[2];
    v31[3] = v30[3];
    uint64_t v20 = *(void **)(v4 + 16);
    id v21 = *(void **)(v4 + 24);
    MEMORY[0x270FA5388](v18);
    *(&v24 - 4) = (uint64_t)v20;
    *(&v24 - 3) = (uint64_t)v21;
    *(&v24 - 2) = (uint64_t)v32;
    *(&v24 - 1) = (uint64_t)v31;
    type metadata accessor for __SceneResourceCache.Entry();
    id v22 = v20;
    id v23 = v21;
    OS_dispatch_queue.sync<A>(execute:)();

    uint64_t v17 = v29[0];
    outlined destroy of __REAssetBundle((uint64_t)v31);
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);

  return v17;
}

uint64_t __SceneResourceCache.loadSceneResources(url:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t ResultVs5NeverOTg5 = a1;
  uint64_t v4 = __SceneResourceCache.loadAssetBundle(url:loadOptions:)(a1, a2);
  if (!v2)
  {
    uint64_t v5 = (_OWORD *)v4;
    uint64_t v6 = outlined init with copy of __SceneResourceCache.Entry.EntryHolder(v4 + 16, (uint64_t)v16);
    if (v17 == 1)
    {
      outlined destroy of __SceneResourceCache.Entry.EntryHolder((uint64_t)v16);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
LABEL_6:
      outlined destroy of BodyTrackingComponent?((uint64_t)&v18, &demangling cache variable for type metadata for __REAssetBundle?);
      type metadata accessor for SceneResourceLoadResult.InternalError(0);
      lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
      swift_allocError();
      uint64_t ResultVs5NeverOTg5 = v10;
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(ResultVs5NeverOTg5, 1, 2, v11);
      swift_willThrow();
      swift_release();
      return ResultVs5NeverOTg5;
    }
    long long v18 = v16[0];
    long long v19 = v16[1];
    long long v20 = v16[2];
    long long v21 = v16[3];
    if (!*(void *)&v16[0]) {
      goto LABEL_6;
    }
    v22[0] = v18;
    v22[1] = v19;
    v22[2] = v20;
    v22[3] = v21;
    unint64_t v7 = *((void *)&v18 + 1);
    MEMORY[0x270FA5388](v6);
    id v15 = v22;
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in __REAssetBundle.getSceneDescriptors(), (uint64_t)v14, v7);
    uint64_t v9 = swift_bridgeObjectRelease();
    MEMORY[0x270FA5388](v9);
    v14[0] = v22;
    v14[1] = ResultVs5NeverOTg5;
    id v15 = v5;
    uint64_t ResultVs5NeverOTg5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation17RESceneDescriptorCG_AF23SceneResourceLoadResultVs5NeverOTg5((void (*)(void *__return_ptr, uint64_t *))partial apply for closure #1 in __SceneResourceCache.loadSceneResources(url:options:), (uint64_t)&v13, v8);
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of __REAssetBundle((uint64_t)v22);
  }
  return ResultVs5NeverOTg5;
}

uint64_t closure #1 in __SceneResourceCache.loadSceneResources(url:options:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = __REAssetBundle.sceneAsset(for:)(*a1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = URL.lastPathComponent.getter();
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v6 + 16);
    swift_retain();
    RERetain();
    type metadata accessor for __SceneResource();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    uint64_t result = swift_release();
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v9;
    *(void *)(a3 + 24) = a2;
    *(unsigned char *)(a3 + 32) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 __SceneResourceCache.__registerImportedScenes(url:importedScenes:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v29 = a3;
  unint64_t v37 = (int *)type metadata accessor for __SceneImportOperation.__ImportedScene(0);
  uint64_t v5 = *((void *)v37 - 1);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for __SceneImportOperation.ImportedScene(0);
  uint64_t v33 = *((void *)v8 - 1);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (v11)
  {
    v28[1] = v3;
    v34[0] = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v13 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v14 = *(void *)(v5 + 72);
    uint64_t v32 = v14;
    do
    {
      outlined init with copy of __SceneImportOperation.__ImportedScene(v13, (uint64_t)v7, type metadata accessor for __SceneImportOperation.__ImportedScene);
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v10, v7, v15);
      id v16 = &v7[v37[5]];
      uint64_t v18 = *(void *)v16;
      uint64_t v17 = *((void *)v16 + 1);
      uint64_t v19 = *(void *)&v7[v37[6]];
      LOBYTE(v16) = v7[v37[7]];
      long long v20 = &v10[v8[5]];
      *(void *)long long v20 = v18;
      *((void *)v20 + 1) = v17;
      *(void *)&v10[v8[6]] = v19;
      v10[v8[7]] = (char)v16;
      swift_bridgeObjectRetain();
      swift_retain();
      outlined destroy of __SceneImportOperation.__ImportedScene((uint64_t)v7, type metadata accessor for __SceneImportOperation.__ImportedScene);
      uint64_t v12 = v34[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
        uint64_t v14 = v32;
        uint64_t v12 = v34[0];
      }
      unint64_t v22 = *(void *)(v12 + 16);
      unint64_t v21 = *(void *)(v12 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
        uint64_t v14 = v32;
        uint64_t v12 = v34[0];
      }
      *(void *)(v12 + 16) = v22 + 1;
      outlined init with take of __SceneImportOperation.ImportedScene((uint64_t)v10, v12+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v22);
      v13 += v14;
      --v11;
    }
    while (v11);
  }
  uint64_t v23 = v31;
  __SceneResourceCache.registerImportedScenes(url:importedScenes:)(v12, v34);
  swift_bridgeObjectRelease();
  if (!v23)
  {
    uint64_t v25 = v34[1];
    unsigned __int8 v26 = v36;
    __n128 result = v35;
    unint64_t v27 = v29;
    v29->n128_u64[0] = v34[0];
    v27->n128_u64[1] = v25;
    v27[1] = result;
    v27[2].n128_u8[0] = v26;
  }
  return result;
}

unint64_t __SceneResourceCache.registerImportedScenes(url:importedScenes:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.standardizedFileURL.getter();
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = *(void **)(v2 + 24);
  unsigned __int8 v36 = *(void **)(v2 + 16);
  uint64_t v8 = v36;
  unint64_t v37 = v9;
  id v34 = v10;
  uint64_t v38 = v10;
  uint64_t v39 = a1;
  type metadata accessor for __SceneResourceCache.Entry();
  id v11 = v8;
  id v12 = v9;
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v13 = v40;
  unint64_t result = __SceneResourceCache.Entry.activeSceneAssets.getter();
  unint64_t v15 = result;
  if (!(result >> 62))
  {
    unint64_t v16 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16 < 2)
    {
      if (v16) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    uint64_t v30 = v29;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 2, 2, v31);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v24 > 1) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    type metadata accessor for SceneResourceLoadResult.InternalError(0);
    lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError, (void (*)(uint64_t))type metadata accessor for SceneResourceLoadResult.InternalError);
    swift_allocError();
    uint64_t v27 = v26;
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 2, v28);
LABEL_12:
    swift_willThrow();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v35);
  }
LABEL_4:
  if ((v15 & 0xC000000000000001) != 0)
  {
    uint64_t v17 = MEMORY[0x22A689930](0, v15);
    goto LABEL_7;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v17 = *(void *)(v15 + 32);
    swift_retain();
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v18 = URL.lastPathComponent.getter();
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(v17 + 16);
    RERetain();
    type metadata accessor for __SceneResource();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v21;

    swift_release();
    uint64_t v23 = v33;
    *uint64_t v33 = v22;
    v23[1] = v18;
    void v23[2] = v20;
    _OWORD v23[3] = v13;
    *((unsigned char *)v23 + 32) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v35);
  }
  __break(1u);
  return result;
}

uint64_t __SceneResourceCache.deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);

  return v0;
}

uint64_t __SceneResourceCache.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t outlined init with take of __SceneImportOperation.ImportedScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __SceneImportOperation.ImportedScene(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id specialized __SceneResourceCache.CachedEntries.init()()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x270FA5388](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x270FA5388](v5 - 8);
  id v6 = objc_msgSend(self, sel_strongToWeakObjectsMapTable);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v8[1] = MEMORY[0x263F8EE78];
  lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x263F8F130], v0);
  OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v6;
}

uint64_t ObjC metadata update function for LoadTracer()
{
  return type metadata accessor for LoadTracer(0);
}

uint64_t type metadata accessor for LoadTracer(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for LoadTracer);
}

uint64_t type metadata completion function for LoadTracer()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for LoadManager()
{
  return self;
}

ValueMetadata *type metadata accessor for __SceneResourceLoadResultLoadContext()
{
  return &type metadata for __SceneResourceLoadResultLoadContext;
}

ValueMetadata *type metadata accessor for __SceneResourceLoadResult()
{
  return &type metadata for __SceneResourceLoadResult;
}

uint64_t type metadata accessor for __SceneResourceCache()
{
  return self;
}

uint64_t method lookup function for __SceneResourceCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __SceneResourceCache);
}

uint64_t method lookup function for __SceneResourceCache.Entry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for __SceneResourceCache.Entry);
}

void *initializeBufferWithCopyOfBuffer for __SceneResourceCache.CachedEntries(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for __SceneResourceCache.CachedEntries(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for __SceneResourceCache.CachedEntries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for __SceneResourceCache.CachedEntries(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for __SceneResourceCache.CachedEntries()
{
  return &type metadata for __SceneResourceCache.CachedEntries;
}

uint64_t *initializeBufferWithCopyOfBuffer for SceneResourceLoadResult.InternalError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = *(int *)(v7 + 48);
      id v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for URL();
      unint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t destroy for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 2, v2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = a1 + *(int *)(v2 + 48);
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  return result;
}

void *initializeWithCopy for SceneResourceLoadResult.InternalError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = *(int *)(v6 + 48);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithCopy for SceneResourceLoadResult.InternalError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(int *)(v6 + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 24))(v18, v19, v20);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (String, URL));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v11 = *(int *)(v6 + 48);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  unint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

_OWORD *initializeWithTake for SceneResourceLoadResult.InternalError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(v6 + 48);
    int v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *assignWithTake for SceneResourceLoadResult.InternalError(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      swift_bridgeObjectRelease();
      uint64_t v17 = *(int *)(v6 + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
      return a1;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)a1, &demangling cache variable for type metadata for (String, URL));
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(int *)(v6 + 48);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneResourceLoadResult.InternalError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22803DF14);
}

uint64_t sub_22803DF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SceneResourceLoadResult.InternalError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22803DF98);
}

uint64_t sub_22803DF98(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t destructiveInjectEnumTag for SceneResourceLoadResult.InternalError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, URL));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

uint64_t type metadata accessor for SceneResourceLoadResult.InternalError(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for SceneResourceLoadResult.InternalError);
}

uint64_t type metadata completion function for SceneResourceLoadResult.InternalError()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LoadTrace(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v5 = a2[4];
    uint64_t v6 = *(int *)(a3 + 36);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v5;
    uint64_t v9 = type metadata accessor for DispatchTime();
    int v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v3;
}

uint64_t destroy for LoadTrace(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a2 + v5;
  uint64_t v7 = a1 + v5;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v9(v7, v6, v8);
  return a1;
}

uint64_t assignWithCopy for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for DispatchTime();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22803E634);
}

uint64_t sub_22803E634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for DispatchTime();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LoadTrace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22803E6F8);
}

uint64_t sub_22803E6F8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for DispatchTime();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LoadTrace(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for LoadTrace);
}

uint64_t type metadata completion function for LoadTrace()
{
  uint64_t result = type metadata accessor for DispatchTime();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 != 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 64);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  *(void *)a1 = *(void *)a2;
  if (v4 == 1)
  {
    char v5 = 1;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v6;
    uint64_t v7 = v6;
    uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
    swift_retain();
    swift_bridgeObjectRetain();
    v8(a1 + 16, a2 + 16, v7);
    char v5 = 0;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  swift_bridgeObjectRetain();
  *(unsigned char *)(a1 + 64) = v5;
  return a1;
}

uint64_t assignWithCopy for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    swift_bridgeObjectRelease();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    *(void *)a1 = *(void *)a2;
    if (v5 != 1)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
      swift_retain();
      swift_bridgeObjectRetain();
      v7(a1 + 16, a2 + 16, v6);
      LOBYTE(v5) = 0;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
    }
    *(unsigned char *)(a1 + 64) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    swift_bridgeObjectRelease();
    unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
    }
    *(unsigned char *)(a1 + 64) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for __SceneResourceCache.Entry.EntryHolder(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for __SceneResourceCache.Entry.EntryHolder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for __SceneResourceCache.Entry.EntryHolder(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for __SceneResourceCache.Entry.EntryHolder(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

void *type metadata accessor for __SceneResourceCache.Entry.EntryHolder()
{
  return &unk_26DC9E890;
}

uint64_t outlined init with copy of __SceneResourceCache.Entry.EntryHolder(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in __REAssetBundle.getSceneDescriptors()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in __REAssetBundle.getSceneDescriptors()(*(void *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in __SceneResourceCache.loadSceneResources(url:options:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in __SceneResourceCache.loadSceneResources(url:options:)(a1, *(void *)(v2 + 32), a2);
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getCacheEntry(for:)@<X0>(void *a1@<X8>)
{
  return partial apply for closure #1 in __SceneResourceCache.CachedEntries.getCacheEntry(for:)(a1);
}

{
  uint64_t v1;
  id result;

  uint64_t result = objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, *(void *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t outlined init with copy of __REAssetBundle.LoadOptions(uint64_t a1, uint64_t a2)
{
  return a2;
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)(*(void **)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t outlined init with copy of __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __SceneImportOperation.__ImportedScene(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x22A689930](v7 - 4, a1);
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        if (RESceneDescriptorGetSceneName())
        {
          uint64_t v11 = String.init(cString:)();
          unint64_t v13 = v12;
          if (v11 != a2) {
            goto LABEL_14;
          }
        }
        else
        {
          unint64_t v13 = 0xE000000000000000;
          if (a2) {
            goto LABEL_14;
          }
        }
        if (v13 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v9;
        }
LABEL_14:
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_18;
        }
        swift_release();
        ++v7;
      }
      while (v10 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;

  if (a1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x22A689930](v7 - 4, a1);
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
        }
        RESceneGetName();
        if (String.init(cString:)() == a2 && v11 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          return v9;
        }
        unint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v13) {
          goto LABEL_17;
        }
        swift_release();
        ++v7;
      }
      while (v10 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t outlined destroy of __REAssetBundle.LoadOptions(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type SceneResourceLoadResult.InternalError and conformance SceneResourceLoadResult.InternalError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RealityFileError and conformance __RealityFileError()
{
  unint64_t result = lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError;
  if (!lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RealityFileError and conformance __RealityFileError);
  }
  return result;
}

uint64_t outlined consume of __REAssetBundle.LoadOptions.ContentRequest(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22803F10C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t sub_22803F154()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

id partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:importedScenes:)(*(void **)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t destroy for __SceneResourceLoadResult()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for __SceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for SceneResourceLoadResult()
{
  return &type metadata for SceneResourceLoadResult;
}

uint64_t destroy for UncachedSceneResourceLoadResult()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UncachedSceneResourceLoadResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UncachedSceneResourceLoadResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UncachedSceneResourceLoadResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UncachedSceneResourceLoadResult()
{
  return &type metadata for UncachedSceneResourceLoadResult;
}

id closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in __SceneResourceCache.CachedEntries.getOrCreateCacheEntry(for:assetBundle:)(a1);
}

uint64_t closure #1 in __REAssetBundle.getSceneDescriptors()partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in __REAssetBundle.getSceneDescriptors()(a1);
}

float OpacityComponent.opacity.getter()
{
  return *(float *)v0;
}

void OpacityComponent.opacity.setter(float a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*OpacityComponent.opacity.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::OpacityComponent __swiftcall OpacityComponent.init(opacity:)(RealityFoundation::OpacityComponent opacity)
{
  v1->opacity = opacity.opacity;
  return opacity;
}

BOOL static OpacityComponent.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static OpacityComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REHierarchicalFadeComponentGetOpacity();
  *a1 = v3;
  return result;
}

uint64_t OpacityComponent.__toCore(_:)()
{
  REHierarchicalFadeComponentSetOpacity();

  return RENetworkMarkComponentDirty();
}

void static OpacityComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2005;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance OpacityComponent@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = REHierarchicalFadeComponentGetOpacity();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance OpacityComponent()
{
  REHierarchicalFadeComponentSetOpacity();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance OpacityComponent(_DWORD *a1@<X8>)
{
  *a1 = 2005;
}

float static OpacityComponent.getComputedOpacity(_:)()
{
  uint64_t v0 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!MEMORY[0x22A6922B0](*(void *)(v0 + 16))) {
    return -1.0;
  }
  REOpacityServiceGetComputedOpacity();
  return result;
}

ValueMetadata *type metadata accessor for OpacityComponent()
{
  return &type metadata for OpacityComponent;
}

uint64_t Sequence.count(where:)()
{
  Sequence.reduce<A>(_:_:)();
  return v1;
}

uint64_t partial apply for closure #1 in Sequence.count(where:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t))(v3 + 32))(a2);
  if ((result & 1) != 0 && (BOOL v7 = __OFADD__(v5, 1), ++v5, v7)) {
    __break(1u);
  }
  else {
    *a3 = v5;
  }
  return result;
}

__n128 ProjectiveTransformCameraComponent.transform.getter()
{
  return *(__n128 *)v0;
}

void ProjectiveTransformCameraComponent.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  *uint64_t v4 = a1;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  v4[3] = a4;
}

uint64_t (*ProjectiveTransformCameraComponent.transform.modify())(void, void)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall ProjectiveTransformCameraComponent.init(projectionMatrix:)(RealityFoundation::ProjectiveTransformCameraComponent *__return_ptr retstr, simd_float4x4 *projectionMatrix)
{
  retstr->transform.columns[0] = v2;
  retstr->transform.columns[1] = v3;
  retstr->transform.columns[2] = v4;
  retstr->transform.columns[3] = v5;
}

uint64_t static ProjectiveTransformCameraComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = RECustomMatrixCameraComponentGetProjectionMatrix();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t ProjectiveTransformCameraComponent.__toCore(_:)()
{
  RECustomMatrixCameraComponentSetProjectionFromMatrix();

  return RENetworkMarkComponentDirty();
}

void static ProjectiveTransformCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 56;
}

uint64_t static ProjectiveTransformCameraComponent.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[1], a2[1]), (int8x16_t)vceqq_f32(*a1, *a2)), vandq_s8((int8x16_t)vceqq_f32(a1[2], a2[2]), (int8x16_t)vceqq_f32(a1[3], a2[3])))) >> 31;
}

uint64_t simd_equal(simd_float4x4 a1, simd_float4x4 a2)
{
  return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a1.columns[0], (float32x4_t)a2.columns[0]), (int8x16_t)vceqq_f32((float32x4_t)a1.columns[1], (float32x4_t)a2.columns[1])), vandq_s8((int8x16_t)vceqq_f32((float32x4_t)a1.columns[2], (float32x4_t)a2.columns[2]), (int8x16_t)vceqq_f32((float32x4_t)a1.columns[3], (float32x4_t)a2.columns[3])))) >> 31;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance ProjectiveTransformCameraComponent@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result = RECustomMatrixCameraComponentGetProjectionMatrix();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ProjectiveTransformCameraComponent()
{
  RECustomMatrixCameraComponentSetProjectionFromMatrix();

  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ProjectiveTransformCameraComponent(_DWORD *a1@<X8>)
{
  *a1 = 56;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProjectiveTransformCameraComponent(simd_float4x4 *a1, simd_float4x4 *a2)
{
  return simd_equal(*a1, *a2);
}

ValueMetadata *type metadata accessor for ProjectiveTransformCameraComponent()
{
  return &type metadata for ProjectiveTransformCameraComponent;
}

uint64_t __REAnchoringType.isEqualToARAnchor(anchor:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for __REAnchoringType();
  MEMORY[0x270FA5388](v3);
  long long v5 = (uint64_t *)((char *)&v18[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of Any(a1, (uint64_t)v18);
  type metadata accessor for ARAnchor();
  swift_dynamicCast();
  id v6 = v19;
  outlined init with copy of __REAnchoringType(v1, (uint64_t)v5);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v12 = (char *)v5
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v13 - 8) + 8))(v5, v13);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
      goto LABEL_6;
    case 2u:
      goto LABEL_6;
    case 3u:
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v15 - 8) + 8))(v5, v15);
LABEL_6:
      self;
      char v11 = swift_dynamicCastObjCClass() != 0;
      goto LABEL_7;
    default:
      uint64_t v7 = *v5;
      unint64_t v8 = v5[1];
      self;
      uint64_t v9 = swift_dynamicCastObjCClass();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        v18[0] = v7;
        uint64_t v19 = (void *)v8;
        id v6 = v6;
        char v11 = __REAnchoringType.isEqualToARPlaneAnchor(_:alignment:classification:)(v10, v18, (unint64_t *)&v19);

LABEL_7:
      }
      else
      {

        char v11 = 0;
      }
      return v11 & 1;
  }
}

unint64_t type metadata accessor for ARAnchor()
{
  unint64_t result = lazy cache variable for type metadata for ARAnchor;
  if (!lazy cache variable for type metadata for ARAnchor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  }
  return result;
}

uint64_t __REAnchoringType.isEqualToARPlaneAnchor(_:alignment:classification:)(void *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4 = *a2;
  unint64_t v5 = *a3;
  id v6 = objc_msgSend(a1, sel_alignment);
  if (v6 == (id)1)
  {
    if (v4) {
      BOOL v8 = (v4 & 2) == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      goto LABEL_5;
    }
LABEL_10:
    unint64_t v10 = v5;
    char v7 = __REAnchoringType.isEqualToARPlaneAnchorClassification(_:classification:)(a1, &v10);
    return v7 & 1;
  }
  if (!v6 && (!v4 || (v4 & 1) != 0)) {
    goto LABEL_10;
  }
LABEL_5:
  char v7 = 0;
  return v7 & 1;
}

uint64_t __REAnchoringType.isEqualToARPlaneAnchorClassification(_:classification:)(void *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (objc_msgSend(self, sel_isClassificationSupported)) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 1;
  }
  switch((unint64_t)objc_msgSend(a1, sel_classification))
  {
    case 1uLL:
      uint64_t result = v3 & 1;
      break;
    case 2uLL:
      uint64_t result = (v3 >> 1) & 1;
      break;
    case 3uLL:
      uint64_t result = (v3 >> 2) & 1;
      break;
    case 4uLL:
      uint64_t result = (v3 >> 3) & 1;
      break;
    case 5uLL:
      uint64_t result = (v3 >> 4) & 1;
      break;
    default:
      uint64_t result = objc_msgSend(a1, sel_classificationStatus) == 0;
      break;
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReaderError.errorDescription.getter()
{
  uint64_t v1 = *(void *)v0;
  simd_float4 v2 = *(void **)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  BOOL v4 = *(void **)(v0 + 24);
  switch(*(unsigned char *)(v0 + 32))
  {
    case 1:
      uint64_t v23 = 0;
      _StringGuts.grow(_:)(119);
      v11._uint64_t countAndFlagsBits = 0xD00000000000004DLL;
      v11._object = (void *)0x8000000228356560;
      String.append(_:)(v11);
      v12._uint64_t countAndFlagsBits = v3;
      v12._object = v4;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = 0xD000000000000024;
      v13._object = (void *)0x80000002283565B0;
      String.append(_:)(v13);
      v14._uint64_t countAndFlagsBits = v1;
      v14._object = v2;
      String.append(_:)(v14);
      unint64_t v9 = 11869;
      goto LABEL_8;
    case 2:
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      uint64_t v23 = 0x6573736120656854;
      v15._uint64_t countAndFlagsBits = v1;
      v15._object = v2;
      String.append(_:)(v15);
      unint64_t v16 = 0x8000000228356540;
      unint64_t v9 = 0xD000000000000011;
      goto LABEL_9;
    case 3:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      uint64_t v23 = 0x6573736120656854;
      v17._uint64_t countAndFlagsBits = v1;
      v17._object = v2;
      String.append(_:)(v17);
      unint64_t v9 = 0xD00000000000001DLL;
      unint64_t v10 = "' does not have a scene name.";
      goto LABEL_6;
    case 4:
      uint64_t v23 = 0;
      _StringGuts.grow(_:)(93);
      v18._uint64_t countAndFlagsBits = 0xD000000000000026;
      v18._object = (void *)0x80000002283564B0;
      String.append(_:)(v18);
      v19._uint64_t countAndFlagsBits = v3;
      v19._object = v4;
      String.append(_:)(v19);
      v20._uint64_t countAndFlagsBits = 0xD000000000000031;
      v20._object = (void *)0x80000002283564E0;
      String.append(_:)(v20);
      v21._uint64_t countAndFlagsBits = v1;
      v21._object = v2;
      String.append(_:)(v21);
      unint64_t v9 = 11815;
LABEL_8:
      unint64_t v16 = 0xE200000000000000;
      goto LABEL_9;
    default:
      uint64_t v23 = 0;
      _StringGuts.grow(_:)(108);
      v5._uint64_t countAndFlagsBits = 0xD00000000000004ALL;
      v5._object = (void *)0x80000002283565E0;
      String.append(_:)(v5);
      v6._uint64_t countAndFlagsBits = v1;
      v6._object = v2;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = 0x6E69207461202C27;
      v7._object = (void *)0xEC00000020786564;
      String.append(_:)(v7);
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD000000000000012;
      unint64_t v10 = " in the set array.";
LABEL_6:
      unint64_t v16 = (unint64_t)(v10 - 32) | 0x8000000000000000;
LABEL_9:
      String.append(_:)(*(Swift::String *)&v9);
      return v23;
  }
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError);
  }
  return result;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 4u)
  {
    if (((1 << a5) & 0xD) == 0) {
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 <= 4u)
  {
    if (((1 << a5) & 0xD) == 0) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of Entity.ConfigurationCatalog.RealityFileConfigurationReaderError(v4, v6, v5, v7, v9);
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError()
{
  return &type metadata for Entity.ConfigurationCatalog.RealityFileConfigurationReaderError;
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = v3;
  uint64_t v26 = *MEMORY[0x263EF8340];
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v5 = type metadata accessor for URL();
  v3[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[8] = v6;
  uint64_t v7 = swift_task_alloc();
  v3[9] = v7;
  swift_defaultActor_initialize();
  _OWORD v3[2] = 0;
  URL._bridgeToObjectiveC()(v8);
  uint64_t v10 = v9;
  uint64_t v11 = RERealityFileCreateByOpeningFileAtURL();

  if (v11)
  {
    RERealityFileCopyConfigurationSetNames();
    uint64_t v25 = 0;
    uint64_t v12 = static Array._forceBridgeFromObjectiveC(_:result:)();
    __break(1u);
    __break(1u);
    __break(1u);
    return MEMORY[0x270FA2498](v12, v21, v22);
  }
  else
  {
    uint64_t v13 = v3[2];
    if (v13)
    {
      type metadata accessor for CFErrorRef(0);
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, type metadata accessor for CFErrorRef);
      uint64_t v14 = swift_allocError();
      *Swift::String v15 = v13;
    }
    else
    {
      uint64_t v14 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, a1, v5);
    if (!v14)
    {
      _sSo10CFErrorRefaABs5Error10FoundationWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x263F06EA8]);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type __REAsset.LoadError and conformance __REAsset.LoadError();
      swift_allocError();
      *(void *)uint64_t v19 = v16;
      *(void *)(v19 + 8) = v18;
      *(void *)(v19 + 16) = 0;
      *(void *)(v19 + 24) = 0;
      *(unsigned char *)(v19 + 32) = 2;
    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v5);
    swift_willThrow();
    type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
    swift_defaultActor_destroy();
    outlined destroy of BodyTrackingComponent?(a2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    Swift::String v20 = (uint64_t (*)(void))v3[1];
    return v20();
  }
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  swift_release();
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v1);
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v6 = v0[6];
  return v5(v6);
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.__deallocating_deinit()
{
  RERelease();
  outlined destroy of BodyTrackingComponent?(v0 + 112, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCVE17RealityFoundationC10RealityKit6Entity20ConfigurationCatalog30RealityFileConfigurationReader_loadingUrl;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t ObjC metadata update function for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  uint64_t result = type metadata singleton initialization cache for Entity.ConfigurationCatalog.RealityFileConfigurationReader;
  if (!type metadata singleton initialization cache for Entity.ConfigurationCatalog.RealityFileConfigurationReader) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 152) = a2;
  *(void *)(v4 + 160) = v3;
  *(unsigned char *)(v4 + 232) = a3;
  *(void *)(v4 + 144) = a1;
  uint64_t v5 = type metadata accessor for URL();
  *(void *)(v4 + 168) = v5;
  *(void *)(v4 + 176) = *(void *)(v5 - 8);
  *(void *)(v4 + 184) = swift_task_alloc();
  *(void *)(v4 + 192) = swift_task_alloc();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:), v3, 0);
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 176) + 16);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 152);
  if (*(unsigned char *)(v0 + 232) == 1)
  {
    uint64_t v5 = v0 + 80;
    uint64_t v6 = *(void *)(v0 + 192);
    type metadata accessor for AnchorEntity();
    (*v2)(v6, v4, v1);
    outlined init with copy of Entity.__LoadOptions(v3, v0 + 80);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v7;
    *uint64_t v7 = v0;
    v7[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:);
    uint64_t v8 = *(void *)(v0 + 192);
  }
  else
  {
    uint64_t v5 = v0 + 16;
    uint64_t v9 = *(void *)(v0 + 184);
    type metadata accessor for Entity();
    (*v2)(v9, v4, v1);
    outlined init with copy of Entity.__LoadOptions(v3, v0 + 16);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v10;
    *uint64_t v10 = v0;
    v10[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:);
    uint64_t v8 = *(void *)(v0 + 184);
  }
  return Entity.init(contentsOf:withName:options:)(v8, 0, 0, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[26] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[20];
    return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:), v5, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(a1);
  }
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v4 = (void *)*v2;
  v4[28] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[20];
    return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:), v5, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(a1);
  }
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[93] = v3;
  v4[92] = a3;
  v4[91] = a2;
  v4[90] = a1;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  v4[94] = v5;
  v4[95] = *(void *)(v5 - 8);
  v4[96] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for URL();
  v4[97] = v6;
  v4[98] = *(void *)(v6 - 8);
  v4[99] = swift_task_alloc();
  type metadata accessor for String.Encoding();
  v4[100] = swift_task_alloc();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v3, 0);
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v1 = (void *)v0;
  uint64_t v2 = (_OWORD *)(v0 + 432);
  uint64_t v3 = (void *)(v0 + 560);
  outlined init with copy of (Int, URL)(*(void *)(v0 + 736), v0 + 192, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 192) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 192, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    *(void *)(v0 + 568) = 0;
    *(void *)(v0 + 576) = 0;
    *uint64_t v3 = 0;
    *(void *)(v0 + 584) = 1;
    *(_OWORD *)(v0 + 592) = 0u;
    *(_OWORD *)(v0 + 608) = 0u;
  }
  else
  {
    outlined init with copy of (Int, URL)(v0 + 216, v0 + 560, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v0 + 192);
    if (*(void *)(v0 + 584) != 1)
    {
      long long v7 = *(_OWORD *)(v0 + 576);
      *uint64_t v2 = *(_OWORD *)v3;
      *(_OWORD *)(v0 + 448) = v7;
      long long v8 = *(_OWORD *)(v0 + 608);
      *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 592);
      *(_OWORD *)(v0 + 480) = v8;
      goto LABEL_11;
    }
  }
  uint64_t v4 = (void *)(v0 + 368);
  outlined init with copy of (Int, URL)(*(void *)(v0 + 744) + 112, v0 + 280, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 280) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 280, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    *(void *)(v0 + 376) = 0;
    *(void *)(v0 + 384) = 0;
    *uint64_t v4 = 0;
    *(void *)(v0 + 392) = 1;
    *(_OWORD *)(v0 + 400) = 0u;
    *(_OWORD *)(v0 + 416) = 0u;
  }
  else
  {
    outlined init with copy of (Int, URL)(v0 + 304, v0 + 368, &demangling cache variable for type metadata for Entity.__LoadOptions?);
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v0 + 280);
    if (*(void *)(v0 + 392) != 1)
    {
      long long v9 = *(_OWORD *)(v0 + 384);
      *uint64_t v2 = *(_OWORD *)v4;
      *(_OWORD *)(v0 + 448) = v9;
      long long v10 = *(_OWORD *)(v0 + 416);
      *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 400);
      *(_OWORD *)(v0 + 480) = v10;
      goto LABEL_10;
    }
  }
  *(void *)(v0 + 656) = 0;
  *(_OWORD *)(v0 + 624) = 0u;
  *(_OWORD *)(v0 + 640) = 0u;
  *(_OWORD *)(v0 + 496) = 0u;
  *(_OWORD *)(v0 + 512) = 0u;
  *(_OWORD *)(v0 + 528) = 0u;
  *(unsigned char *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 545) = 2;
  *(void *)(v0 + 552) = 0;
  outlined assign with take of __DownsamplingStrategy?(v0 + 624, v0 + 496);
  *(void *)(v0 + 536) = 0;
  long long v5 = *(_OWORD *)(v0 + 512);
  *uint64_t v2 = *(_OWORD *)(v0 + 496);
  *(_OWORD *)(v0 + 448) = v5;
  long long v6 = *(_OWORD *)(v0 + 544);
  *(_OWORD *)(v0 + 464) = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 480) = v6;
  swift_beginAccess();
  *(unsigned char *)(v0 + 480) = static RKARSystemCore.generateDecimatedMeshes;
  outlined destroy of BodyTrackingComponent?(v0 + 368, &demangling cache variable for type metadata for Entity.__LoadOptions?);
LABEL_10:
  outlined destroy of BodyTrackingComponent?(v0 + 560, &demangling cache variable for type metadata for Entity.__LoadOptions?);
LABEL_11:
  outlined init with copy of (Int, URL)(*(void *)(v0 + 736), v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 104) != 1)
  {
    char v12 = *(unsigned char *)(v0 + 120);
    uint64_t v14 = v0 + 104;
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(v0 + 744);
  outlined destroy of BodyTrackingComponent?(v0 + 104, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  outlined init with copy of (Int, URL)(v11 + 112, v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(void *)(v0 + 16) != 1)
  {
    char v12 = *(unsigned char *)(v0 + 32);
    uint64_t v14 = v0 + 16;
LABEL_17:
    outlined destroy of Entity.ConfigurationCatalog.LoadOptions(v14);
    uint64_t v13 = *(void *)(v0 + 728);
    if (!v13) {
      goto LABEL_21;
    }
    goto LABEL_18;
  }
  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  char v12 = 0;
  uint64_t v13 = *(void *)(v0 + 728);
  if (!v13) {
    goto LABEL_21;
  }
LABEL_18:
  if (*(void *)(v13 + 16))
  {
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
    if (v16)
    {
      uint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v15);
      swift_bridgeObjectRetain();
      goto LABEL_22;
    }
  }
LABEL_21:
  uint64_t v17 = MEMORY[0x263F8EE80];
LABEL_22:
  uint64_t v18 = *(void *)(*(void *)(*(void *)(v0 + 744) + 208) + 24);
  if (!*(void *)(v18 + 16))
  {
LABEL_36:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_OWORD *)uint64_t v35 = xmmword_228330E70;
    *(void *)(v35 + 24) = 0;
    *(void *)(v35 + 32) = 0;
    *(void *)(v35 + 16) = 0;
    *(unsigned char *)(v35 + 40) = 0;
    swift_willThrow();
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(47, 0xE100000000000000);
  if ((v20 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  char v68 = v12;
  uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
  *(void *)(v0 + 808) = v21;
  swift_retain();
  swift_bridgeObjectRelease();
  unint64_t v22 = *(void *)(v21 + 32);
  uint64_t v72 = v17;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23)
    {
LABEL_26:
      unint64_t v70 = v2;
      unint64_t v69 = v1;
      uint64_t v73 = MEMORY[0x263F8EE78];
      uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23 & ~(v23 >> 63), 0);
      if (v23 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v25 = 0;
      uint64_t v26 = v73;
      unint64_t v27 = v22 & 0xC000000000000001;
      unint64_t v28 = v22;
      do
      {
        if (v27)
        {
          uint64_t v29 = MEMORY[0x22A689930](v25, v22);
        }
        else
        {
          uint64_t v29 = *(void *)(v22 + 8 * v25 + 32);
          swift_retain();
        }
        uint64_t v31 = *(void *)(v29 + 32);
        uint64_t v30 = *(void *)(v29 + 40);
        swift_bridgeObjectRetain();
        swift_release();
        unint64_t v33 = *(void *)(v73 + 16);
        unint64_t v32 = *(void *)(v73 + 24);
        if (v33 >= v32 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        }
        ++v25;
        *(void *)(v73 + 16) = v33 + 1;
        unint64_t v34 = v73 + 16 * v33;
        *(void *)(v34 + 32) = v31;
        *(void *)(v34 + 40) = v30;
        unint64_t v22 = v28;
      }
      while (v23 != v25);
      swift_bridgeObjectRelease();
      uint64_t v1 = v69;
      uint64_t v2 = v70;
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = MEMORY[0x263F8EE78];
LABEL_40:
  swift_bridgeObjectRetain();
  uint64_t M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSsAE_pTg5166_s10RealityKit6EntityC0A10FoundationE20ConfigurationCatalogV0a4FileE6ReaderC04loadC04into18withConfigurations0I7OptionsyAC_SDySSSDyS2SGGSgAF04LoadM0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n(v26, v72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v38 = v1[93];
  if (!*(void *)(M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v49 = v38
        + OBJC_IVAR____TtCVE17RealityFoundationC10RealityKit6Entity20ConfigurationCatalog30RealityFileConfigurationReader_loadingUrl;
    uint64_t v50 = (void *)swift_task_alloc();
    v1[102] = v50;
    *uint64_t v50 = v1;
    v50[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
    uint64_t v48 = v49;
    goto LABEL_54;
  }
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  uint64_t RealityFileAssetDescriptorWithConfigurationSpecifications = RERealityFileGetRealityFileAssetDescriptorWithConfigurationSpecifications();

  if (!RealityFileAssetDescriptorWithConfigurationSpecifications)
  {
    v1[88] = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v71 = (uint64_t)v2;
    uint64_t v53 = v52;
    swift_bridgeObjectRelease();
    v1[89] = M0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n;
    uint64_t v54 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v56 = v55;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
    swift_allocError();
    *(void *)uint64_t v57 = v51;
    *(void *)(v57 + 8) = v53;
    *(void *)(v57 + 16) = v54;
    *(void *)(v57 + 24) = v56;
    *(unsigned char *)(v57 + 32) = 1;
    swift_willThrow();
    swift_release();
    outlined destroy of Entity.__LoadOptions(v71);
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (RERealityFileAssetDescriptorAsSceneDescriptor())
  {
    if (RESceneDescriptorGetSceneName())
    {
      static String.Encoding.utf8.getter();
      uint64_t v41 = String.init(cString:encoding:)();
      if (v42)
      {
        uint64_t v43 = HIBYTE(v42) & 0xF;
        if ((v42 & 0x2000000000000000) == 0) {
          uint64_t v43 = v41 & 0xFFFFFFFFFFFFLL;
        }
        if (v43)
        {
          uint64_t v44 = v1[96];
          uint64_t v45 = v1[95];
          uint64_t v46 = v1[94];
          v1[86] = v41;
          v1[87] = v42;
          (*(void (**)(uint64_t, void, uint64_t))(v45 + 104))(v44, *MEMORY[0x263F06E50], v46);
          lazy protocol witness table accessor for type String and conformance String();
          URL.appending<A>(component:directoryHint:)();
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
          swift_bridgeObjectRelease();
          uint64_t v47 = (void *)swift_task_alloc();
          v1[106] = v47;
          *uint64_t v47 = v1;
          v47[1] = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
          uint64_t v48 = v1[99];
LABEL_54:
          return Entity.ConfigurationCatalog.RealityFileConfigurationReader.initEntity(url:options:requestAnchor:)(v48, (uint64_t)v2, v68);
        }
        swift_bridgeObjectRelease();
      }
    }
    RERealityFileAssetDescriptorGetFilename();
    static String.Encoding.utf8.getter();
    uint64_t v64 = String.init(cString:encoding:)();
    if (v65) {
      unint64_t v66 = v64;
    }
    else {
      unint64_t v66 = 0xD000000000000010;
    }
    if (v65) {
      unint64_t v67 = v65;
    }
    else {
      unint64_t v67 = 0x8000000228356730;
    }
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
    swift_allocError();
    *(void *)uint64_t v62 = v66;
    *(void *)(v62 + 8) = v67;
    *(void *)(v62 + 16) = 0;
    *(void *)(v62 + 24) = 0;
    char v63 = 3;
  }
  else
  {
    RERealityFileAssetDescriptorGetFilename();
    static String.Encoding.utf8.getter();
    uint64_t v58 = String.init(cString:encoding:)();
    if (v59) {
      unint64_t v60 = v58;
    }
    else {
      unint64_t v60 = 0xD000000000000010;
    }
    if (v59) {
      unint64_t v61 = v59;
    }
    else {
      unint64_t v61 = 0x8000000228356730;
    }
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.RealityFileConfigurationReaderError and conformance Entity.ConfigurationCatalog.RealityFileConfigurationReaderError();
    swift_allocError();
    *(void *)uint64_t v62 = v60;
    *(void *)(v62 + 8) = v61;
    *(void *)(v62 + 16) = 0;
    *(void *)(v62 + 24) = 0;
    char v63 = 2;
  }
  *(unsigned char *)(v62 + 32) = v63;
  swift_willThrow();
  swift_release();
LABEL_37:
  outlined destroy of Entity.__LoadOptions((uint64_t)v2);
LABEL_41:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v37 = (uint64_t (*)(void))v1[1];
  return v37();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 840) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 720);
  swift_release();
  Entity.copy(to:recursive:)(v2, 1);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 872) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 744);
  uint64_t v2 = *(void *)(v0 + 720);
  swift_release();
  Entity.copy(to:recursive:)(v2, 1);
  return MEMORY[0x270FA2498](Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[99];
  uint64_t v2 = v0[98];
  uint64_t v3 = v0[97];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 54));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  outlined destroy of Entity.__LoadOptions(v0 + 432);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[99];
  uint64_t v2 = v0[98];
  uint64_t v3 = v0[97];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of Entity.__LoadOptions((uint64_t)(v0 + 54));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[103] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[93];
  if (v1)
  {
    long long v6 = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  else
  {
    v4[104] = a1;
    long long v6 = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v4 = (void *)*v2;
  v4[107] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[93];
  if (v1)
  {
    long long v6 = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  else
  {
    v4[108] = a1;
    long long v6 = Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:);
  }
  return MEMORY[0x270FA2498](v6, v5, 0);
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return v0;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.getDefaultSourcePath() in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return 47;
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.configurationMapCache.getter in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader()
{
  return swift_retain();
}

uint64_t protocol witness for Entity.ConfigurationCatalog.FormatReader.loadEntity(into:withConfigurations:loadOptions:) in conformance Entity.ConfigurationCatalog.RealityFileConfigurationReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *long long v7 = v3;
  v7[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return Entity.ConfigurationCatalog.RealityFileConfigurationReader.loadEntity(into:withConfigurations:loadOptions:)(a1, a2, a3);
}

uint64_t outlined assign with take of __DownsamplingStrategy?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __DownsamplingStrategy?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError);
  }
  return result;
}

uint64_t outlined destroy of Entity.__LoadOptions(uint64_t a1)
{
  return a1;
}

uint64_t specialized Dictionary.Values.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySSG_SSsAE_pTg5166_s10RealityKit6EntityC0A10FoundationE20ConfigurationCatalogV0a4FileE6ReaderC04loadC04into18withConfigurations0I7OptionsyAC_SDySSSDyS2SGGSgAF04LoadM0VSgtYaKFS2SKXEfU0_SDyS2SGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v20 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v20;
    unsigned int v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v7 = *v6;
      uint64_t v9 = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      if (!v9) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        break;
      }
      char v12 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
      unint64_t v16 = *(void *)(v20 + 16);
      unint64_t v15 = *(void *)(v20 + 24);
      if (v16 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      v6 += 2;
      *(void *)(v20 + 16) = v16 + 1;
      uint64_t v17 = v20 + 16 * v16;
      *(void *)(v17 + 32) = v14;
      *(void *)(v17 + 40) = v13;
      if (!--v2) {
        return v3;
      }
    }
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(void *)uint64_t v18 = v8;
    *(void *)(v18 + 8) = v7;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 16) = 0;
    *(unsigned char *)(v18 + 40) = 4;
    swift_willThrow();
    swift_release();
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Entity.ConfigurationCatalog.LoadOptions(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Entity.__LoadOptions(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _sSo10CFErrorRefaABs5Error10FoundationWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

RealityKit::__Downsampling::Factor __swiftcall __Downsampling.Factor.init(mipmapOffset:)(RealityKit::__Downsampling::Factor mipmapOffset)
{
  uint64_t v2 = 1 << SLOBYTE(mipmapOffset.value);
  if ((unint64_t)mipmapOffset.value >= 0x40) {
    uint64_t v2 = 0;
  }
  if ((unint64_t)mipmapOffset.value > 0x40) {
    uint64_t v2 = 0;
  }
  *unint64_t v1 = v2;
  return mipmapOffset;
}

RealityKit::__Downsampling::Factor __swiftcall __Downsampling.Factor.init(value:)(RealityKit::__Downsampling::Factor value)
{
  v1->CGColorRef value = value.value;
  return value;
}

uint64_t __DownsamplingStrategyClosure.resolve(_:)()
{
  return (*v0)();
}

uint64_t protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __DownsamplingStrategyClosure()
{
  return (*v0)();
}

void __Downsampling.Minimal.resolve(_:)(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x263F8EE78];
    if (!v6)
    {
LABEL_20:
      *(void *)a2 = v7;
      return;
    }
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    unint64_t v16 = (void *)a2;
    uint64_t v17 = v3;
    uint64_t v8 = 0;
    uint64_t v7 = v18;
    while (1)
    {
      id v9 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x22A689930](v8, a1) : *(id *)(a1 + 8 * v8 + 32);
      unint64_t v10 = v9;
      id v11 = objc_msgSend(v9, sel_mipmapLevelCount, v16, v17);

      unint64_t v12 = (unint64_t)v11 - 1;
      if (__OFSUB__(v11, 1)) {
        break;
      }
      BOOL v13 = v12 > 0x40;
      if (v12 >= 0x40) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 1 << v12;
      }
      if (v13) {
        uint64_t v3 = 0;
      }
      else {
        uint64_t v3 = v14;
      }
      a2 = *(void *)(v18 + 16);
      unint64_t v15 = *(void *)(v18 + 24);
      if (a2 >= v15 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, a2 + 1, 1);
      }
      ++v8;
      *(void *)(v18 + 16) = a2 + 1;
      *(void *)(v18 + 8 * a2 + 32) = v3;
      if (v6 == v8)
      {
        a2 = (unint64_t)v16;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
}

void protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __Downsampling.Minimal(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
}

unint64_t __Downsampling.Error.debugDescription.getter()
{
  _StringGuts.grow(_:)(58);
  v0._uint64_t countAndFlagsBits = 0x6764756220656874;
  v0._object = (void *)0xEE0020666F207465;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x8000000228356790;
  v2._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v7._object = v4;
  v5._uint64_t countAndFlagsBits = 0x2E736574796220;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000037;
}

uint64_t __Downsampling.Budgeted.init(availableBytes:device:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t __Downsampling.Budgeted.resolve(_:)@<X0>(unint64_t a1@<X0>, int64x2_t **a2@<X8>)
{
  long long v105 = a2;
  unint64_t v4 = *v2;
  swift_unknownObjectRetain();
  unint64_t v112 = v4;
  uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20MTLTextureDescriptorCG_Says6UInt64VGs5NeverOTg5072_s10RealityKit14__DownsamplingV8BudgetedV7resolveyAC10ResolutionOSaySo20de9CGKFSays6F9VGAJXEfU_0I3Kit02__K0V0M0VTf1cn_nTf4ng_n(a1);
  swift_unknownObjectRelease();
  int64_t v6 = *(void *)(v5 + 16);
  Swift::String v7 = (int64x2_t *)MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v116 = (int64x2_t *)MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = 0;
    Swift::String v7 = v116;
    while (1)
    {
      uint64_t v9 = *(void *)(v5 + 32 + 8 * v8);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10) {
        break;
      }
      uint64_t v11 = 0;
LABEL_9:
      uint64_t v116 = v7;
      unint64_t v16 = v7[1].u64[0];
      unint64_t v15 = v7[1].u64[1];
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        Swift::String v7 = v116;
      }
      ++v8;
      v7[1].i64[0] = v17;
      v7[2].i64[v16] = v11;
      if (v8 == v6) {
        goto LABEL_14;
      }
    }
    uint64_t v11 = 0;
    unint64_t v12 = (uint64_t *)(v9 + 32);
    while (1)
    {
      uint64_t v13 = *v12++;
      BOOL v14 = __CFADD__(v11, v13);
      v11 += v13;
      if (v14) {
        break;
      }
      if (!--v10) {
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v17 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (v17)
  {
LABEL_14:
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v7[2].i64[v18];
      BOOL v14 = __CFADD__(v19, v20);
      unint64_t v19 = (int64x2_t *)((char *)v19 + v20);
      if (v14) {
        goto LABEL_66;
      }
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    if (v112 >= (unint64_t)v19) {
      goto LABEL_49;
    }
    unint64_t v19 = (int64x2_t *)MEMORY[0x263F8EE78];
    uint64_t v113 = v5;
    if (v6)
    {
      uint64_t v116 = (int64x2_t *)MEMORY[0x263F8EE78];
      int64_t v106 = v6;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      unint64_t v19 = (int64x2_t *)MEMORY[0x263F8EE78];
      uint64_t v21 = 0;
      int64_t v6 = (int64_t)v116;
      unint64_t v108 = a1;
      uint64_t v110 = v5 + 32;
      while (1)
      {
        uint64_t v22 = *(void *)(v110 + 8 * v21);
        a1 = *(void *)(v22 + 16);
        if (a1) {
          break;
        }
        swift_bridgeObjectRetain();
        unint64_t v28 = v19[1].u64[0];
        uint64_t v23 = v19;
LABEL_30:
        a1 = v108;
        if (v28 >= 2)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v23 = (int64x2_t *)specialized _ArrayBuffer._consumeAndCreateNew()(v23);
          }
          unint64_t v31 = 0;
          unint64_t v32 = v23 + 2;
          do
          {
            unint64_t v36 = v31 + 1;
            unint64_t v37 = v28 - (v31 + 1);
            if (__OFSUB__(v28, v31 + 1)) {
              goto LABEL_65;
            }
            if (v31 != v37)
            {
              if ((v31 & 0x8000000000000000) != 0) {
                goto LABEL_67;
              }
              unint64_t v38 = v23[1].u64[0];
              if (v31 >= v38) {
                goto LABEL_68;
              }
              if (v37 >= v38) {
                goto LABEL_69;
              }
              unint64_t v33 = &v23->i64[v31];
              uint64_t v34 = v33[4];
              uint64_t v35 = v37;
              v33[4] = v32->i64[v35];
              v32->i64[v35] = v34;
            }
            unint64_t v31 = v36;
          }
          while (v28 >> 1 != v36);
        }
        swift_bridgeObjectRelease();
        uint64_t v116 = (int64x2_t *)v6;
        unint64_t v30 = *(void *)(v6 + 16);
        unint64_t v29 = *(void *)(v6 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
          unint64_t v19 = (int64x2_t *)MEMORY[0x263F8EE78];
          int64_t v6 = (int64_t)v116;
        }
        ++v21;
        *(void *)(v6 + 16) = v30 + 1;
        *(void *)(v6 + 8 * v30 + 32) = v23;
        if (v21 == v106) {
          goto LABEL_51;
        }
      }
      int64_t v114 = v6;
      uint64_t v115 = v19;
      swift_bridgeObjectRetain();
      unint64_t v19 = (int64x2_t *)&v115;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1, 0);
      int64_t v6 = 0;
      uint64_t v23 = v115;
      uint64_t v5 = v22 + 24;
      while (a1)
      {
        unint64_t v24 = a1 - 1;
        if (a1 - 1 >= *(void *)(v22 + 16)) {
          goto LABEL_63;
        }
        uint64_t v25 = *(void *)(v5 + 8 * a1);
        BOOL v14 = __CFADD__(v6, v25);
        v6 += v25;
        if (v14) {
          goto LABEL_64;
        }
        uint64_t v115 = v23;
        unint64_t v27 = v23[1].u64[0];
        unint64_t v26 = v23[1].u64[1];
        unint64_t v28 = v27 + 1;
        if (v27 >= v26 >> 1)
        {
          unint64_t v19 = (int64x2_t *)&v115;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          uint64_t v23 = v115;
        }
        v23[1].i64[0] = v28;
        v23[2].i64[v27] = v6;
        a1 = v24;
        if (!v24)
        {
          uint64_t v5 = v113;
          int64_t v6 = v114;
          unint64_t v19 = (int64x2_t *)MEMORY[0x263F8EE78];
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
    }
    else
    {
      int64_t v6 = MEMORY[0x263F8EE78];
LABEL_51:
      int64_t v114 = v6;
      if (!(a1 >> 62))
      {
        uint64_t v40 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v40) {
          goto LABEL_71;
        }
        goto LABEL_53;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v40)
    {
LABEL_71:
      unint64_t v47 = v19[1].u64[0];
      if (!v47)
      {
        swift_bridgeObjectRelease();
        goto LABEL_121;
      }
LABEL_72:
      if (v47 >= 4)
      {
        unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v50 = v19 + 3;
        int64x2_t v51 = 0uLL;
        unint64_t v52 = v47 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v53 = 0uLL;
        do
        {
          int64x2_t v51 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v50[-1], v51), (int8x16_t)v50[-1], (int8x16_t)v51);
          int64x2_t v53 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(*v50, v53), *(int8x16_t *)v50, (int8x16_t)v53);
          v50 += 2;
          v52 -= 4;
        }
        while (v52);
        int8x16_t v54 = vbslq_s8((int8x16_t)vcgtq_s64(v51, v53), (int8x16_t)v51, (int8x16_t)v53);
        uint64_t v55 = vextq_s8(v54, v54, 8uLL).u64[0];
        int8x8_t v49 = vbsl_s8((int8x8_t)vcgtd_s64(v54.i64[0], v55), *(int8x8_t *)v54.i8, (int8x8_t)v55);
        if (v47 == v48) {
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v48 = 0;
        int8x8_t v49 = 0;
      }
      unint64_t v56 = v47 - v48;
      uint64_t v57 = (int8x8_t *)&v19[2] + v48;
      do
      {
        int8x8_t v59 = *v57++;
        int8x8_t v58 = v59;
        if (*(void *)&v59 > *(void *)&v49) {
          int8x8_t v49 = v58;
        }
        --v56;
      }
      while (v56);
LABEL_81:
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v60 = (int64x2_t *)MEMORY[0x263F8EE78];
      if (v49)
      {
        uint64_t v61 = 0;
        int64_t v62 = *(void *)(v6 + 16);
        int64_t v107 = v6 + 32;
        int64_t v109 = v62;
        int8x8_t v111 = v49;
        while (v61 != *(void *)&v49)
        {
          if (v62)
          {
            uint64_t v116 = v60;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0);
            char v63 = v116;
            int64_t v64 = v107;
            int64_t v65 = v62;
            while (1)
            {
              unint64_t v66 = *(void *)(*(void *)v64 + 16);
              unint64_t v67 = (uint64_t)(v66 - 1) >= v61 ? v61 : v66 - 1;
              if (v67 >= v66) {
                break;
              }
              uint64_t v68 = *(void *)(*(void *)v64 + 8 * v67 + 32);
              uint64_t v116 = v63;
              unint64_t v70 = v63[1].u64[0];
              unint64_t v69 = v63[1].u64[1];
              int64_t v71 = v70 + 1;
              if (v70 >= v69 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
                char v63 = v116;
              }
              v63[1].i64[0] = v71;
              uint64_t v72 = &v63[v70];
              v72[2].i64[0] = v68;
              v72[2].i64[1] = v67;
              v64 += 8;
              if (!--v65)
              {
                unint64_t v60 = (int64x2_t *)MEMORY[0x263F8EE78];
                goto LABEL_96;
              }
            }
LABEL_140:
            __break(1u);
LABEL_141:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v104 = (int64x2_t *)MEMORY[0x263F8EE78];
            uint64_t result = swift_bridgeObjectRelease();
            *long long v105 = v104;
            return result;
          }
          int64_t v71 = v60[1].i64[0];
          if (v71)
          {
            char v63 = v60;
LABEL_96:
            uint64_t v116 = v60;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
            uint64_t v73 = v116;
            int64_t v74 = v116[1].i64[0];
            uint64_t v75 = 2;
            int64_t v76 = v71;
            do
            {
              unint64_t v77 = v74;
              uint64_t v78 = v63[v75].i64[0];
              uint64_t v116 = v73;
              unint64_t v79 = v73[1].u64[1];
              ++v74;
              if (v77 >= v79 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v74, 1);
                uint64_t v73 = v116;
              }
              v73[1].i64[0] = v74;
              v73[2].i64[v77] = v78;
              ++v75;
              --v76;
            }
            while (v76);
            uint64_t v80 = 0;
            unint64_t v81 = 0;
            int64_t v62 = v109;
            int8x8_t v49 = v111;
            do
            {
              uint64_t v82 = v73[2].i64[v80];
              BOOL v14 = __CFADD__(v81, v82);
              v81 += v82;
              if (v14)
              {
                __break(1u);
                goto LABEL_140;
              }
              ++v80;
            }
            while (v77 + 1 != v80);
            swift_bridgeObjectRelease();
            if (v81 >= v112)
            {
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v5 = v113;
              unint64_t v60 = (int64x2_t *)MEMORY[0x263F8EE78];
              goto LABEL_105;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v116 = (int64x2_t *)MEMORY[0x263F8EE78];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
            uint64_t v83 = 5;
            Swift::String v84 = v116;
            do
            {
              unint64_t v85 = v63->u64[v83];
              BOOL v86 = v85 > 0x40;
              if (v85 >= 0x40) {
                uint64_t v87 = 0;
              }
              else {
                uint64_t v87 = 1 << v85;
              }
              if (v86) {
                uint64_t v88 = 0;
              }
              else {
                uint64_t v88 = v87;
              }
              uint64_t v116 = v84;
              unint64_t v90 = v84[1].u64[0];
              unint64_t v89 = v84[1].u64[1];
              if (v90 >= v89 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v89 > 1, v90 + 1, 1);
                Swift::String v84 = v116;
              }
              v84[1].i64[0] = v90 + 1;
              v84[2].i64[v90] = v88;
              v83 += 2;
              --v71;
            }
            while (v71);
            uint64_t result = swift_bridgeObjectRelease();
            *long long v105 = v84;
            return result;
          }
          swift_bridgeObjectRelease();
          if (v112) {
            goto LABEL_141;
          }
          uint64_t result = swift_bridgeObjectRelease();
LABEL_105:
          if (++v61 == *(void *)&v49) {
            goto LABEL_121;
          }
        }
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
LABEL_121:
      swift_bridgeObjectRelease();
      uint64_t v91 = *(void *)(v5 + 16);
      if (v91)
      {
        swift_bridgeObjectRetain();
        uint64_t v92 = 0;
        uint64_t v93 = (void *)MEMORY[0x263F8EE78];
        do
        {
          uint64_t v94 = *(void *)(v5 + 8 * v92 + 32);
          uint64_t v95 = *(void *)(v94 + 16);
          if (v95)
          {
            uint64_t v96 = *(void *)(v94 + 8 * v95 + 24);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93[2] + 1, 1, v93);
            }
            unint64_t v98 = v93[2];
            unint64_t v97 = v93[3];
            if (v98 >= v97 >> 1) {
              uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v97 > 1), v98 + 1, 1, v93);
            }
            v93[2] = v98 + 1;
            v93[v98 + 4] = v96;
          }
          ++v92;
        }
        while (v91 != v92);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v93 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v99 = v93[2];
      if (!v99)
      {
        unint64_t v100 = 0;
LABEL_138:
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type __Downsampling.Error and conformance __Downsampling.Error();
        swift_allocError();
        *char v103 = v112;
        v103[1] = v100;
        return swift_willThrow();
      }
      unint64_t v100 = 0;
      long long v101 = v93 + 4;
      while (1)
      {
        uint64_t v102 = *v101++;
        BOOL v14 = __CFADD__(v100, v102);
        v100 += v102;
        if (v14) {
          break;
        }
        if (!--v99) {
          goto LABEL_138;
        }
      }
      __break(1u);
      goto LABEL_143;
    }
LABEL_53:
    uint64_t v116 = v19;
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0);
    if (v40 < 0)
    {
LABEL_144:
      __break(1u);
      return result;
    }
    uint64_t v41 = 0;
    unint64_t v19 = v116;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v42 = (id)MEMORY[0x22A689930](v41, a1);
      }
      else {
        id v42 = *(id *)(a1 + 8 * v41 + 32);
      }
      uint64_t v43 = v42;
      id v44 = objc_msgSend(v42, sel_mipmapLevelCount, v105);

      uint64_t v116 = v19;
      unint64_t v46 = v19[1].u64[0];
      unint64_t v45 = v19[1].u64[1];
      unint64_t v47 = v46 + 1;
      if (v46 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        unint64_t v19 = v116;
      }
      ++v41;
      v19[1].i64[0] = v47;
      v19[2].i64[v46] = (uint64_t)v44;
    }
    while (v40 != v41);
    uint64_t v5 = v113;
    int64_t v6 = v114;
    goto LABEL_72;
  }
LABEL_48:
  swift_bridgeObjectRelease();
LABEL_49:
  uint64_t result = swift_bridgeObjectRelease();
  *long long v105 = 0;
  return result;
}

uint64_t protocol witness for __DownsamplingStrategy.resolve(_:) in conformance __Downsampling.Budgeted@<X0>(unint64_t a1@<X0>, int64x2_t **a2@<X8>)
{
  return __Downsampling.Budgeted.resolve(_:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So19MTLTextureLevelInfoVs5NeverOTg5076_s10RealityKit14__DownsamplingV18getMipmapByteSizes_6deviceSays6UInt64VGSo20d34DescriptorC_So9MTLDevice_ptFZSo0J9eF8VSiXEfU_So0V0_pSo0dT0CTf1cn_nTf4ngg_n(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v5 = MEMORY[0x263F8EE78];
  if (!v4) {
    return v5;
  }
  uint64_t v8 = result;
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (a2 >= v8 && (v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = v25;
    while (a2 != v8)
    {
      objc_msgSend(a4, sel_pixelFormat);
      objc_msgSend(a4, sel_width);
      objc_msgSend(a4, sel_height);
      objc_msgSend(a4, sel_depth);
      objc_msgSend(a4, sel_sampleCount);
      uint64_t result = MTLGetTextureLevelInfoForDeviceWithOptions();
      long long v9 = v18;
      long long v10 = v19;
      long long v11 = v20;
      long long v12 = v21;
      long long v13 = v22;
      long long v14 = v23;
      unint64_t v16 = *(void *)(v25 + 16);
      unint64_t v15 = *(void *)(v25 + 24);
      if (v16 >= v15 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        long long v14 = v23;
        long long v13 = v22;
        long long v12 = v21;
        long long v11 = v20;
        long long v10 = v19;
        long long v9 = v18;
      }
      *(void *)(v25 + 16) = v16 + 1;
      uint64_t v17 = v25 + 104 * v16;
      *(_OWORD *)(v17 + 32) = v9;
      *(_OWORD *)(v17 + 48) = v10;
      *(_OWORD *)(v17 + 64) = v11;
      *(_OWORD *)(v17 + 80) = v12;
      *(_OWORD *)(v17 + 96) = v13;
      *(_OWORD *)(v17 + 112) = v14;
      *(void *)(v17 + 128) = v24;
      if (a2 == ++v8) {
        return v5;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized static __Downsampling.getMipmapByteSizes(_:device:)(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)objc_msgSend(a1, sel_mipmapLevelCount);
  if (v4 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = v4;
  swift_unknownObjectRetain();
  id v6 = a1;
  uint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So19MTLTextureLevelInfoVs5NeverOTg5076_s10RealityKit14__DownsamplingV18getMipmapByteSizes_6deviceSays6UInt64VGSo20d34DescriptorC_So9MTLDevice_ptFZSo0J9eF8VSiXEfU_So0V0_pSo0dT0CTf1cn_nTf4ngg_n(0, v5, a2, v6);
  swift_unknownObjectRelease();

  if (objc_msgSend(v6, sel_textureType) == (id)5) {
    uint64_t v8 = 6;
  }
  else {
    uint64_t v8 = 1;
  }
  int64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = 128;
    uint64_t v11 = v17;
    while (1)
    {
      uint64_t v12 = *(void *)(v7 + v10);
      uint64_t v13 = v8 * v12;
      if ((unsigned __int128)(v8 * (__int128)v12) >> 64 != (v8 * v12) >> 63) {
        break;
      }
      if (v13 < 0) {
        goto LABEL_17;
      }
      unint64_t v15 = *(void *)(v17 + 16);
      unint64_t v14 = *(void *)(v17 + 24);
      if (v15 >= v14 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      }
      *(void *)(v17 + 16) = v15 + 1;
      *(void *)(v17 + 8 * v15 + 32) = v13;
      v10 += 104;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo20MTLTextureDescriptorCG_Says6UInt64VGs5NeverOTg5072_s10RealityKit14__DownsamplingV8BudgetedV7resolveyAC10ResolutionOSaySo20de9CGKFSays6F9VGAJXEfU_0I3Kit02__K0V0M0VTf1cn_nTf4ng_n(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_39;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    if (!v2) {
      return v3;
    }
    uint64_t v46 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    unint64_t v35 = v1 & 0xC000000000000001;
    uint64_t v3 = v46;
    unint64_t v32 = v1 + 32;
    uint64_t v5 = MEMORY[0x263F8EE78];
    uint64_t v33 = v2;
    unint64_t v34 = v1;
    while (v4 != v2)
    {
      if (v35) {
        id v6 = (id)MEMORY[0x22A689930](v4, v1);
      }
      else {
        id v6 = *(id *)(v32 + 8 * v4);
      }
      uint64_t v7 = v6;
      int64_t v8 = (int64_t)objc_msgSend(v6, sel_mipmapLevelCount);
      if (v8 < 0) {
        goto LABEL_38;
      }
      int64_t v9 = v8;
      uint64_t v37 = v3;
      uint64_t v38 = v4;
      if (v8)
      {
        swift_unknownObjectRetain();
        unint64_t v1 = (unint64_t)v7;
        id v10 = v7;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        uint64_t v11 = 0;
        uint64_t v12 = v5;
        while (v9 != v11)
        {
          objc_msgSend(v10, sel_pixelFormat);
          objc_msgSend(v10, sel_width);
          objc_msgSend(v10, sel_height);
          objc_msgSend(v10, sel_depth);
          objc_msgSend(v10, sel_sampleCount);
          MTLGetTextureLevelInfoForDeviceWithOptions();
          long long v13 = v39;
          long long v14 = v40;
          long long v15 = v41;
          long long v16 = v42;
          long long v17 = v43;
          long long v18 = v44;
          unint64_t v20 = *(void *)(v5 + 16);
          unint64_t v19 = *(void *)(v5 + 24);
          if (v20 >= v19 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            long long v18 = v44;
            long long v17 = v43;
            long long v16 = v42;
            long long v15 = v41;
            long long v14 = v40;
            long long v13 = v39;
          }
          ++v11;
          *(void *)(v5 + 16) = v20 + 1;
          uint64_t v21 = v5 + 104 * v20;
          *(_OWORD *)(v21 + 32) = v13;
          *(_OWORD *)(v21 + 48) = v14;
          *(_OWORD *)(v21 + 64) = v15;
          *(_OWORD *)(v21 + 80) = v16;
          *(_OWORD *)(v21 + 96) = v17;
          *(_OWORD *)(v21 + 112) = v18;
          *(void *)(v21 + 128) = v45;
          if (v9 == v11)
          {
            swift_unknownObjectRelease();

            uint64_t v5 = MEMORY[0x263F8EE78];
            uint64_t v7 = (void *)v1;
            goto LABEL_19;
          }
        }
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v12 = v5;
LABEL_19:
      if (objc_msgSend(v7, sel_textureType) == (id)5) {
        uint64_t v22 = 6;
      }
      else {
        uint64_t v22 = 1;
      }
      int64_t v23 = *(void *)(v12 + 16);
      if (v23)
      {
        unint64_t v36 = v7;
        *(void *)&long long v39 = v5;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23, 0);
        uint64_t v24 = v5;
        uint64_t v25 = 128;
        while (1)
        {
          uint64_t v26 = *(void *)(v12 + v25);
          uint64_t v27 = v22 * v26;
          if ((unsigned __int128)(v22 * (__int128)v26) >> 64 != (v22 * v26) >> 63) {
            break;
          }
          if (v27 < 0) {
            goto LABEL_41;
          }
          *(void *)&long long v39 = v5;
          unint64_t v1 = *(void *)(v5 + 16);
          unint64_t v28 = *(void *)(v5 + 24);
          if (v1 >= v28 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v1 + 1, 1);
          }
          *(void *)(v5 + 16) = v1 + 1;
          *(void *)(v5 + 8 * v1 + 32) = v27;
          v25 += 104;
          if (!--v23)
          {

            swift_bridgeObjectRelease();
            uint64_t v5 = MEMORY[0x263F8EE78];
            goto LABEL_31;
          }
        }
LABEL_36:
        __break(1u);
        break;
      }

      swift_bridgeObjectRelease();
      uint64_t v24 = v5;
LABEL_31:
      uint64_t v3 = v37;
      unint64_t v30 = *(void *)(v37 + 16);
      unint64_t v29 = *(void *)(v37 + 24);
      if (v30 >= v29 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        uint64_t v5 = MEMORY[0x263F8EE78];
        uint64_t v3 = v37;
      }
      uint64_t v4 = v38 + 1;
      *(void *)(v3 + 16) = v30 + 1;
      *(void *)(v3 + 8 * v30 + 32) = v24;
      uint64_t v2 = v33;
      unint64_t v1 = v34;
      if (v38 + 1 == v33) {
        return v3;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_41:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type __Downsampling.Error and conformance __Downsampling.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error;
  if (!lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __Downsampling.Error and conformance __Downsampling.Error);
  }
  return result;
}

ValueMetadata *type metadata accessor for __Downsampling()
{
  return &type metadata for __Downsampling;
}

ValueMetadata *type metadata accessor for __Downsampling.Factor()
{
  return &type metadata for __Downsampling.Factor;
}

void *initializeBufferWithCopyOfBuffer for __Downsampling.Resolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for __Downsampling.Resolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for __Downsampling.Resolution(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __Downsampling.Resolution()
{
  return &type metadata for __Downsampling.Resolution;
}

uint64_t dispatch thunk of __DownsamplingStrategy.resolve(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void *initializeBufferWithCopyOfBuffer for __DownsamplingStrategyClosure(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for __DownsamplingStrategyClosure(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __DownsamplingStrategyClosure(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for __DownsamplingStrategyClosure()
{
  return &type metadata for __DownsamplingStrategyClosure;
}

ValueMetadata *type metadata accessor for __Downsampling.Minimal()
{
  return &type metadata for __Downsampling.Minimal;
}

ValueMetadata *type metadata accessor for __Downsampling.Error()
{
  return &type metadata for __Downsampling.Error;
}

void *initializeBufferWithCopyOfBuffer for __Downsampling.Budgeted(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for __Downsampling.Budgeted()
{
  return swift_unknownObjectRelease();
}

void *assignWithCopy for __Downsampling.Budgeted(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for __Downsampling.Budgeted(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for __Downsampling.Budgeted()
{
  return &type metadata for __Downsampling.Budgeted;
}

uint64_t VideoPlaybackController.init(fromCore:)(uint64_t a1)
{
  uint64_t v2 = v1;
  *(unsigned char *)(v1 + 24) = 1;
  uint64_t v4 = v1 + 24;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v4 - 8) = a1;
  swift_retain();
  unsigned int AudioInputMode = REVideoAssetGetAudioInputMode();
  if (AudioInputMode >= 3) {
    goto LABEL_36;
  }
  unsigned int v6 = 0x20001u >> (8 * AudioInputMode);
  swift_beginAccess();
  *(unsigned char *)(v2 + 24) = v6;
  REVideoAssetGetReverbSendLevelDecibels();
  *(double *)(v2 + 32) = v7;
  int64_t v8 = (uint64_t *)(a1 + 24);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v21 = MEMORY[0x263F8EE78];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_4:
      if (v10 >= 1)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if ((v9 & 0xC000000000000001) != 0) {
            MEMORY[0x22A689930](i, v9);
          }
          else {
            swift_retain();
          }
          uint64_t Strong = swift_weakLoadStrong();
          swift_release();
          if (Strong)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {
            swift_release();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v21;
        goto LABEL_16;
      }
      __break(1u);
LABEL_36:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = MEMORY[0x263F8EE78];
LABEL_16:
  *int64_t v8 = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *v8;
  if ((unint64_t)*v8 >> 62) {
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v15)
  {
    uint64_t v16 = 4;
    while (1)
    {
      uint64_t v17 = v16 - 4;
      if ((v14 & 0xC000000000000001) == 0) {
        break;
      }
      MEMORY[0x22A689930](v16 - 4, v14);
      uint64_t v18 = v16 - 3;
      if (__OFADD__(v17, 1)) {
        goto LABEL_31;
      }
LABEL_27:
      if (!swift_weakLoadStrong()) {
        goto LABEL_20;
      }
      REVideoComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        swift_release();
LABEL_20:
        swift_release();
        goto LABEL_21;
      }
      int DesiredViewingMode = REVideoComponentGetDesiredViewingMode();
      swift_release();
      swift_release();
      if (DesiredViewingMode == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        *(unsigned char *)(v2 + 40) = 0;
        return v2;
      }
LABEL_21:
      ++v16;
      if (v18 == v15) {
        goto LABEL_33;
      }
    }
    swift_retain();
    uint64_t v18 = v16 - 3;
    if (!__OFADD__(v17, 1)) {
      goto LABEL_27;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_33:
  swift_release();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t VideoPlaybackController.init(videoResource:)(uint64_t a1)
{
  *(unsigned char *)(v1 + 24) = 1;
  uint64_t v2 = v1 + 24;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  *(void *)(v2 - 8) = a1;
  swift_beginAccess();
  swift_retain();
  REVideoAssetSetAudioInputMode();
  REVideoAssetSetReverbSendLevelDecibels();
  uint64_t v3 = (uint64_t *)(*(void *)(v2 - 8) + 24);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v14 = MEMORY[0x263F8EE78];
  if ((unint64_t)*v3 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_14;
  }
LABEL_3:
  if (v5 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](i, v4);
    }
    else {
      swift_retain();
    }
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v14;
LABEL_15:
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_17;
    }
LABEL_29:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return v13;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_29;
  }
LABEL_17:
  if (v11 >= 1)
  {
    for (uint64_t j = 0; j != v11; ++j)
    {
      if ((v10 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](j, v10);
      }
      else {
        swift_retain();
      }
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentSetDesiredViewingMode();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
      swift_release();
    }
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

double VideoPlaybackController.reverbSendLevel.getter()
{
  return *(double *)(v0 + 32);
}

uint64_t VideoPlaybackController.audioInputMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 24);
  return result;
}

uint64_t VideoPlaybackController.audioInputMode.setter(char *a1)
{
  char v2 = *a1;
  swift_beginAccess();
  *(unsigned char *)(v1 + 24) = v2;
  return REVideoAssetSetAudioInputMode();
}

uint64_t (*VideoPlaybackController.audioInputMode.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return VideoPlaybackController.audioInputMode.modify;
}

uint64_t VideoPlaybackController.audioInputMode.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    return REVideoAssetSetAudioInputMode();
  }
  return result;
}

uint64_t VideoPlaybackController._preferredViewingMode.didset()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 16) + 24);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v11 = MEMORY[0x263F8EE78];
  if ((unint64_t)*v1 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain();
  uint64_t result = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_14;
  }
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v3; ++i)
  {
    if ((v2 & 0xC000000000000001) != 0) {
      MEMORY[0x22A689930](i, v2);
    }
    else {
      swift_retain();
    }
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (Strong)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = v11;
LABEL_15:
  *uint64_t v1 = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_17;
    }
LABEL_29:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v9 = result;
  if (!result) {
    goto LABEL_29;
  }
LABEL_17:
  if (v9 >= 1)
  {
    for (uint64_t j = 0; j != v9; ++j)
    {
      if ((v8 & 0xC000000000000001) != 0) {
        MEMORY[0x22A689930](j, v8);
      }
      else {
        swift_retain();
      }
      if (swift_weakLoadStrong())
      {
        REVideoComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REVideoComponentSetDesiredViewingMode();
          RENetworkMarkComponentDirty();
        }
        swift_release();
      }
      swift_release();
    }
    goto LABEL_29;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t VideoPlaybackController.deinit()
{
  swift_release();
  return v0;
}

uint64_t VideoPlaybackController.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t static VideoPlaybackController.ViewingMode.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  if ((*a1 & 1) == 0 && (*a2 & 1) == 0) {
    return 1;
  }
  uint64_t result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void VideoPlaybackController.ViewingMode.hash(into:)()
{
  if (*v0)
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int VideoPlaybackController.ViewingMode.hashValue.getter()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Swift::Int result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance VideoPlaybackController.ViewingMode(unsigned char *a1, unsigned char *a2)
{
  if ((*a1 & 1) == 0 && (*a2 & 1) == 0) {
    return 1;
  }
  uint64_t result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance VideoPlaybackController.ViewingMode()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Swift::Int result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance VideoPlaybackController.ViewingMode()
{
  if (*v0)
  {
    _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance VideoPlaybackController.ViewingMode()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    Swift::Int result = _diagnoseUnavailableCodeReached()();
    __break(1u);
  }
  else
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }
  return result;
}

uint64_t (*VideoPlaybackController.preferredViewingMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 40);
  return VideoPlaybackController.preferredViewingMode.modify;
}

uint64_t VideoPlaybackController.currentViewingMode.getter@<X0>(char *a1@<X8>)
{
  swift_retain();
  __VideoResource.currentViewingMode.getter(a1);

  return swift_release();
}

uint64_t VideoPlaybackController.currentImageSize.getter()
{
  swift_retain();
  uint64_t v0 = __VideoResource.currentImageSize.getter();
  swift_release();
  return v0;
}

void VideoPlaybackController.desiredViewingMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 40);
}

uint64_t VideoPlaybackController.desiredViewingMode.setter(unsigned char *a1)
{
  *(unsigned char *)(v1 + 40) = *a1;
  return VideoPlaybackController._preferredViewingMode.didset();
}

uint64_t (*VideoPlaybackController.desiredViewingMode.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 40);
  return VideoPlaybackController.preferredViewingMode.modify;
}

uint64_t VideoPlaybackController.preferredViewingMode.modify(unsigned char *a1)
{
  *(unsigned char *)(*(void *)a1 + 40) = a1[8];
  return VideoPlaybackController._preferredViewingMode.didset();
}

uint64_t VideoPlaybackController.reverbSendLevel.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

uint64_t (*VideoPlaybackController.reverbSendLevel.modify(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 32);
  return VideoPlaybackController.reverbSendLevel.modify;
}

uint64_t VideoPlaybackController.reverbSendLevel.modify(void *a1)
{
  *(void *)(a1[1] + 32) = *a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

unint64_t lazy protocol witness table accessor for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode()
{
  unint64_t result = lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode;
  if (!lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VideoPlaybackController.ViewingMode and conformance VideoPlaybackController.ViewingMode);
  }
  return result;
}

uint64_t sub_22804558C@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 24);
  return result;
}

uint64_t sub_2280455D4(char *a1)
{
  char v2 = *a1;
  return VideoPlaybackController.audioInputMode.setter(&v2);
}

uint64_t sub_22804560C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(*(void *)result + 40);
  return result;
}

uint64_t keypath_set_3Tm_1(unsigned char *a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 40) = *a1;
  return VideoPlaybackController._preferredViewingMode.didset();
}

double sub_228045650@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(*(void *)a1 + 32);
  *a2 = result;
  return result;
}

uint64_t sub_228045660(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *a1;
  return REVideoAssetSetReverbSendLevelDecibels();
}

uint64_t type metadata accessor for VideoPlaybackController()
{
  return self;
}

uint64_t method lookup function for VideoPlaybackController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for VideoPlaybackController);
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of VideoPlaybackController.audioInputMode.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

unsigned char *storeEnumTagSinglePayload for VideoPlaybackController.ViewingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x2280457F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VideoPlaybackController.ViewingMode()
{
  return &type metadata for VideoPlaybackController.ViewingMode;
}

RealityKit::__RKEntityProximityTrigger::ExitType_optional __swiftcall __RKEntityProximityTrigger.ExitType.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (RealityKit::__RKEntityProximityTrigger::ExitType_optional)rawValue;
}

uint64_t __RKEntityProximityTrigger.ExitType.rawValue.getter()
{
  return *v0;
}

RealityKit::__RKEntityProximityTrigger::ExitType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityProximityTrigger.ExitType(Swift::Int *a1)
{
  return __RKEntityProximityTrigger.ExitType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityProximityTrigger.ExitType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityProximityTrigger.ExitType()
{
  return RawRepresentable<>.encode(to:)();
}

float __RKEntityProximityTrigger.distance.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 32);
}

uint64_t __RKEntityProximityTrigger.distance.setter(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 32) = a1;
  return result;
}

uint64_t (*__RKEntityProximityTrigger.distance.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityProximityTrigger.type.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 36);
  return result;
}

uint64_t __RKEntityProximityTrigger.type.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 36) = v2;
  return result;
}

uint64_t (*__RKEntityProximityTrigger.type.modify())()
{
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityProximityTrigger.enterFired.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t __RKEntityProximityTrigger.exitFired.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 38);
}

uint64_t __RKEntityProximityTrigger.__allocating_init(targetEntity:distance:type:)(uint64_t a1, char *a2, float a3)
{
  uint64_t v6 = swift_allocObject();
  char v7 = *a2;
  *(void *)(v6 + 24) = 0;
  *(_WORD *)(v6 + 37) = 0;
  swift_beginAccess();
  *(void *)(v6 + 24) = a1;
  swift_retain();
  swift_release();
  *(float *)(v6 + 32) = a3;
  *(unsigned char *)(v6 + 36) = v7;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + 18) = 0;
  return v6;
}

uint64_t __RKEntityProximityTrigger.init(targetEntity:distance:type:)(uint64_t a1, char *a2, float a3)
{
  char v6 = *a2;
  *(void *)(v3 + 24) = 0;
  *(_WORD *)(v3 + 37) = 0;
  swift_beginAccess();
  *(void *)(v3 + 24) = a1;
  swift_retain();
  swift_release();
  *(float *)(v3 + 32) = a3;
  *(unsigned char *)(v3 + 36) = v6;
  swift_release();
  *(_WORD *)(v3 + 16) = 0;
  *(unsigned char *)(v3 + 18) = 0;
  return v3;
}

uint64_t __RKEntityProximityTrigger.matches(with:)(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)&long long v52 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int64x2_t v51 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = &v47[-v15];
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = &v47[-v18];
  type metadata accessor for __RKEntityProximityTrigger();
  uint64_t v53 = a1;
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20) {
    goto LABEL_16;
  }
  uint64_t v2 = v20;
  uint64_t v50 = (unsigned char *)(v4 + 36);
  swift_beginAccess();
  int v21 = *(unsigned __int8 *)(v4 + 36);
  swift_beginAccess();
  if (v21 != *(unsigned __int8 *)(v2 + 36)) {
    goto LABEL_16;
  }
  swift_beginAccess();
  if (*(void *)(v4 + 24))
  {
    swift_retain();
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v19);
    swift_release();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v19, 1, 1, v6);
    swift_retain();
  }
  swift_beginAccess();
  uint64_t v22 = *(void *)(v2 + 24);
  uint64_t v49 = v4;
  if (v22)
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v16);
    swift_release();
    uint64_t v23 = v52;
  }
  else
  {
    uint64_t v23 = v52;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v16, 1, 1, v6);
  }
  uint64_t v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
  outlined init with copy of UUID?((uint64_t)v16, v24);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v25((uint64_t)v10, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    int v26 = v25(v24, 1, v6);
    uint64_t v4 = v49;
    if (v26 == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
      goto LABEL_31;
    }
    goto LABEL_14;
  }
  outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v13);
  if (v25(v24, 1, v6) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v13, v6);
    uint64_t v4 = v49;
LABEL_14:
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  unint64_t v35 = v51;
  uint64_t v34 = v52;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v52 + 32))(v51, v24, v6);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  int v48 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v34 + 8);
  v36(v35, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  v36(v13, v6);
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
  uint64_t v4 = v49;
  if ((v48 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_31:
  swift_beginAccess();
  float v3 = *(float *)(v4 + 32);
  if (!*(void *)(v4 + 24)) {
    goto LABEL_51;
  }
  swift_retain();
  uint64_t v37 = Entity.rcSceneEntity.getter();
  swift_release();
  if (!v37) {
    goto LABEL_51;
  }
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v54);
  uint64_t v39 = v54[0];
  uint64_t v38 = v54[1];
  swift_release();
  outlined init with take of Transform?((uint64_t)v54, (uint64_t)v55);
  if ((v55[48] & 1) == 0)
  {
    *(void *)&long long v40 = v39;
    *((void *)&v40 + 1) = v38;
    goto LABEL_50;
  }
  if (one-time initialization token for identity != -1) {
    goto LABEL_70;
  }
  while (1)
  {
    long long v40 = static Transform.identity;
LABEL_50:
    long long v52 = v40;
    swift_release();
    float v3 = v3 * fmaxf(fmaxf(*(float *)&v52, *((float *)&v52 + 2)), *((float *)&v52 + 1));
LABEL_51:
    swift_beginAccess();
    float v46 = *(float *)(v2 + 32);
    swift_release();
    if (!*v50) {
      break;
    }
    if (v46 <= v3)
    {
      swift_beginAccess();
      *(unsigned char *)(v4 + 38) = 0;
      swift_beginAccess();
      uint64_t v27 = 0;
      if ((*(unsigned char *)(v4 + 37) & 1) == 0)
      {
        *(unsigned char *)(v4 + 37) = 1;
        return 1;
      }
      return v27;
    }
    swift_beginAccess();
    *(unsigned char *)(v4 + 37) = 0;
    swift_beginAccess();
    if ((*(unsigned char *)(v4 + 38) & 1) == 0)
    {
      *(unsigned char *)(v4 + 38) = 1;
      return 1;
    }
LABEL_16:
    type metadata accessor for __RKEntityTriggerGroup();
    uint64_t v27 = swift_dynamicCastClass();
    if (!v27) {
      return v27;
    }
    swift_beginAccess();
    unint64_t v28 = *(void *)(v27 + 24);
    if (v28 >> 62)
    {
LABEL_64:
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      if (!v29) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v29 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v29) {
        goto LABEL_25;
      }
    }
    unint64_t v30 = v28 & 0xC000000000000001;
    if ((v28 & 0xC000000000000001) != 0)
    {
      uint64_t v2 = MEMORY[0x22A689930](0, v28);
    }
    else
    {
      if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      uint64_t v2 = *(void *)(v28 + 32);
      swift_retain();
    }
    char v31 = __RKEntityProximityTrigger.matches(with:)(v2);
    swift_release();
    if (v31) {
      goto LABEL_23;
    }
    if (v29 == 1) {
      goto LABEL_25;
    }
    if (v30)
    {
      uint64_t v33 = MEMORY[0x22A689930](1, v28);
LABEL_38:
      char v41 = __RKEntityProximityTrigger.matches(with:)(v33);
      swift_release();
      if (v41)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        swift_release();
        return 1;
      }
      uint64_t v2 = 0;
      uint64_t v42 = v29 - 2;
      while (v42 != v2)
      {
        unint64_t v43 = v2 + 2;
        if (v30)
        {
          uint64_t v44 = MEMORY[0x22A689930](v2 + 2, v28);
          if (__OFADD__(v43, 1)) {
            goto LABEL_63;
          }
        }
        else
        {
          if (v43 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_68;
          }
          uint64_t v44 = *(void *)(v28 + 8 * v2 + 48);
          swift_retain();
          if (__OFADD__(v43, 1))
          {
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
        }
        char v45 = __RKEntityProximityTrigger.matches(with:)(v44);
        swift_release();
        ++v2;
        if (v45) {
          goto LABEL_23;
        }
      }
LABEL_25:
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      uint64_t v33 = *(void *)(v28 + 40);
      swift_retain();
      goto LABEL_38;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    swift_once();
  }
  swift_beginAccess();
  *(unsigned char *)(v4 + 38) = 0;
  if (v46 > v3 || (uint64_t v27 = 1, swift_beginAccess(), (*(unsigned char *)(v4 + 37) & 1) != 0))
  {
    if (v3 >= v46) {
      return 0;
    }
    swift_beginAccess();
    if (*(unsigned char *)(v4 + 37) != 1) {
      return 0;
    }
    uint64_t v27 = 0;
    *(unsigned char *)(v4 + 37) = 0;
  }
  else
  {
    *(unsigned char *)(v4 + 37) = 1;
  }
  return v27;
}