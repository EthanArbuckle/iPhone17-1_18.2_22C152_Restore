void sub_19DDB315C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_19DDB316C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a2 == 1)
  {
    id v27 = objc_begin_catch(a1);
    v28 = ne_log_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      LODWORD(STACK[0x220]) = 138412290;
      STACK[0x224] = (unint64_t)v27;
      _os_log_fault_impl(&dword_19DDAF000, v28, OS_LOG_TYPE_FAULT, "Got an exception while reading the index: %@", (uint8_t *)&STACK[0x220], 0xCu);
    }

    -[NEConfigurationManager errorWithCode:specifics:](a26, 1, 0);
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x19DDB24E4);
  }
  _Unwind_Resume(a1);
}

void sub_19DDB3928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDB4C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t isa_nsarray(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t NEUIDForAuditToken()
{
  return 0;
}

uint64_t isa_nsuuid(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsstring(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_19DDB6A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_19DDB7ED8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_19DDB7EEC()
{
  return sub_19DF730D0();
}

uint64_t sub_19DDB7F34()
{
  return sub_19DF730C0();
}

uint64_t sub_19DDB7F60()
{
  return sub_19DF730D0();
}

CFErrorRef sub_19DDB7FB4(__SecKey *a1)
{
  v7[1] = *(CFErrorRef *)MEMORY[0x1E4F143B8];
  v7[0] = 0;
  CFDataRef v1 = SecKeyCopyExternalRepresentation(a1, v7);
  if (v1)
  {
    CFDataRef v2 = v1;
    CFErrorRef v3 = (CFErrorRef)sub_19DF72A50();
  }
  else
  {
    CFErrorRef v3 = v7[0];
    if (v7[0])
    {
      type metadata accessor for CFError(0);
      sub_19DDC06AC();
      swift_allocError();
      CFErrorRef *v4 = v3;
    }
    else
    {
      sub_19DDC0584();
      swift_allocError();
      unsigned char *v5 = 0;
    }
    swift_willThrow();
  }
  return v3;
}

id NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyRef:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  id v18 = objc_allocWithZone(v9);
  id v19 = sub_19DDBF1CC(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  sub_19DDBF398(a7, a8);
  sub_19DDBF398(a5, a6);
  sub_19DDBF3F0(a3, a4);
  sub_19DDBF398(a1, a2);
  return v19;
}

id NEIKEv2CryptoKitHPKE.init(payload:aad:psk:pskID:keyRef:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  id v17 = sub_19DDBF1CC(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  sub_19DDBF398(a7, a8);
  sub_19DDBF398(a5, a6);
  sub_19DDBF3F0(a3, a4);
  sub_19DDBF398(a1, a2);
  return v17;
}

id NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyData:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  id v18 = objc_allocWithZone(v10);
  id v19 = sub_19DDBF404(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_19DDBF398(a9, a10);
  sub_19DDBF398(a7, a8);
  sub_19DDBF398(a5, a6);
  sub_19DDBF3F0(a3, a4);
  sub_19DDBF398(a1, a2);
  return v19;
}

id NEIKEv2CryptoKitHPKE.init(payload:aad:psk:pskID:keyData:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  id v17 = sub_19DDBF404(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_19DDBF398(a9, a10);
  sub_19DDBF398(a7, a8);
  sub_19DDBF398(a5, a6);
  sub_19DDBF3F0(a3, a4);
  sub_19DDBF398(a1, a2);
  return v17;
}

void sub_19DDB8688(uint64_t a1@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v3 = sub_19DF72C60();
  uint64_t v35 = *(void *)(v3 - 8);
  uint64_t v36 = v3;
  ((void (*)(void))MEMORY[0x1F4188790])();
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72FC0();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  ((void (*)(void))MEMORY[0x1F4188790])();
  v48 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_19DF72D00();
  uint64_t v45 = *(void *)(v47 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  v44 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_19DF72CE0();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  ((void (*)(void))MEMORY[0x1F4188790])();
  v43 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_19DF72CF0();
  uint64_t v40 = *(void *)(v10 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72CD0();
  ((void (*)(void))MEMORY[0x1F4188790])();
  v46 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_19DF72BD0();
  uint64_t v54 = *(void *)(v14 - 8);
  uint64_t v15 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  v51 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  id v19 = (char *)&v34 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  v22 = (char *)&v34 - v21;
  MEMORY[0x1F4188790](v20);
  v24 = (char *)&v34 - v23;
  uint64_t v38 = v1;
  v26 = *(__CFError **)(v1 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
  uint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key + 8);
  if ((v25 & 0x2000000000000000) != 0)
  {
    CFErrorRef v52 = v26;
    unint64_t v53 = v25 & 0xDFFFFFFFFFFFFFFFLL;
    sub_19DDBF5E0((uint64_t)v26, v25 & 0xDFFFFFFFFFFFFFFFLL);
    sub_19DF72BC0();
    if (v2) {
      return;
    }
  }
  else
  {
    CFErrorRef v27 = sub_19DDB7FB4(v26);
    if (v2)
    {
      sub_19DDC0384(v26, v25);
      return;
    }
    CFErrorRef v52 = v27;
    unint64_t v53 = v28;
    sub_19DF72BC0();
    sub_19DDC0384(v26, v25);
    v22 = v19;
  }
  uint64_t v29 = v54;
  (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v24, v22, v14);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v51, v24, v14);
  (*(void (**)(char *, void, uint64_t))(v40 + 104))(v12, *MEMORY[0x1E4F250B0], v10);
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v43, *MEMORY[0x1E4F250A0], v42);
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, *MEMORY[0x1E4F250C0], v47);
  sub_19DF72CC0();
  v30 = v48;
  sub_19DF72FB0();
  sub_19DF72FA0();
  unint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v50);
  if (v32 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v37, v38 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v36);
    sub_19DDBF5E0(*(void *)(v33 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID), *(void *)(v33 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID + 8));
    sub_19DF72D10();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v14);
  }
}

void sub_19DDB8CE0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v70 = a1;
  unint64_t v71 = a2;
  uint64_t v69 = a3;
  uint64_t v67 = sub_19DF72C60();
  uint64_t v66 = *(void *)(v67 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v67);
  v62[0] = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  v63 = (char *)v62 - v6;
  uint64_t v7 = sub_19DF72FC0();
  uint64_t v82 = *(void *)(v7 - 8);
  uint64_t v83 = v7;
  MEMORY[0x1F4188790](v7);
  v81 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = sub_19DF72D00();
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  v79 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_19DF72CE0();
  uint64_t v75 = *(void *)(v10 - 8);
  uint64_t v76 = v10;
  MEMORY[0x1F4188790](v10);
  v77 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_19DF72CF0();
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v73 = v12;
  MEMORY[0x1F4188790](v12);
  v74 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_19DF72CD0();
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  v62[1] = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v65 = (char *)v62 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454240);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_19DF72C80();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v64 = (char *)v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v26 = (char *)v62 - v25;
  uint64_t v27 = sub_19DF72C10();
  unint64_t v86 = *(void *)(v27 - 8);
  uint64_t v87 = v27;
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  v84 = (char *)v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v32 = (char *)v62 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)v62 - v34;
  MEMORY[0x1F4188790](v33);
  v85 = (char *)v62 - v36;
  uint64_t v68 = v3;
  uint64_t v38 = *(void **)(v3 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
  uint64_t v37 = *(void *)(v3 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key + 8);
  if ((v37 & 0x2000000000000000) != 0)
  {
    CFErrorRef v88 = *(CFErrorRef *)(v3 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key);
    unint64_t v89 = v37 & 0xDFFFFFFFFFFFFFFFLL;
    sub_19DDBF5E0((uint64_t)v38, v37 & 0xDFFFFFFFFFFFFFFFLL);
    v44 = v90;
    sub_19DF72BF0();
    if (!v44) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v39 = v38;
    uint64_t v40 = v90;
    sub_19DF72C70();
    if (v40)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
      sub_19DDC063C((uint64_t)v20, &qword_1E9454240);
      CFErrorRef v41 = sub_19DDB7FB4(v39);
      unint64_t v43 = v42;
      CFErrorRef v88 = v41;
      unint64_t v89 = v42;
      sub_19DDBF5E0((uint64_t)v41, v42);
      sub_19DF72BF0();
      sub_19DDC0384(v38, v37);
      sub_19DDBF398((uint64_t)v41, v43);
      uint64_t v35 = v32;
LABEL_5:
      v46 = v85;
      unint64_t v45 = v86;
      uint64_t v47 = v87;
      (*(void (**)(char *, char *, uint64_t))(v86 + 32))(v85, v35, v87);
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v84, v46, v47);
      (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, *MEMORY[0x1E4F250B0], v73);
      (*(void (**)(char *, void, uint64_t))(v75 + 104))(v77, *MEMORY[0x1E4F250A0], v76);
      (*(void (**)(char *, void, uint64_t))(v78 + 104))(v79, *MEMORY[0x1E4F250C0], v80);
      sub_19DF72CC0();
      v48 = v81;
      sub_19DF72FB0();
      sub_19DF72FA0();
      unint64_t v50 = v49;
      (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v83);
      if (v50 >> 60 != 15)
      {
        uint64_t v51 = v68;
        (*(void (**)(void, uint64_t, uint64_t))(v66 + 16))(v62[0], v68 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v67);
        uint64_t v52 = v51 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID;
        uint64_t v53 = *(void *)(v51 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID);
        unint64_t v54 = *(void *)(v52 + 8);
        sub_19DDBF5E0(v70, v71);
        sub_19DDBF5E0(v53, v54);
        sub_19DF72D50();
        (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v87);
        return;
      }
      __break(1u);
      goto LABEL_11;
    }
    v90 = 0;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v26, v20, v21);
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v64, v26, v21);
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, *MEMORY[0x1E4F250B0], v73);
    (*(void (**)(char *, void, uint64_t))(v75 + 104))(v77, *MEMORY[0x1E4F250A0], v76);
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v79, *MEMORY[0x1E4F250C0], v80);
    sub_19DF72CC0();
    v55 = v81;
    sub_19DF72FB0();
    uint64_t v87 = sub_19DF72FA0();
    unint64_t v57 = v56;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v55, v83);
    unint64_t v86 = v57;
    if (v57 >> 60 == 15)
    {
LABEL_11:
      __break(1u);
      return;
    }
    uint64_t v58 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v63, v68 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk, v67);
    uint64_t v59 = v58 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID;
    uint64_t v60 = *(void *)(v58 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID);
    unint64_t v61 = *(void *)(v59 + 8);
    sub_19DDBF5E0(v70, v71);
    sub_19DDBF5E0(v60, v61);
    sub_19DF72D50();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v21);
    sub_19DDC0384(v38, v37);
  }
}

void NEIKEv2CryptoKitHPKE.performHPKESeal()()
{
  uint64_t v2 = sub_19DF72D40();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DDB8688((uint64_t)v5);
  if (!v1)
  {
    uint64_t v35 = v3;
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload);
    unint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload + 8);
    uint64_t v33 = v6;
    unint64_t v34 = v7;
    uint64_t v8 = v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad;
    uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v10 >> 60 == 15) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v9;
    }
    if (v10 >> 60 == 15) {
      unint64_t v12 = 0xC000000000000000;
    }
    else {
      unint64_t v12 = *(void *)(v8 + 8);
    }
    uint64_t v31 = v11;
    unint64_t v32 = v12;
    sub_19DDBF5E0(v6, v7);
    sub_19DDBF638(v9, v10);
    sub_19DDBF64C();
    uint64_t v13 = sub_19DF72D30();
    unint64_t v15 = v14;
    uint64_t v30 = v13;
    sub_19DDBF398(v11, v12);
    sub_19DDBF398(v6, v7);
    uint64_t v16 = sub_19DF72D20();
    uint64_t v18 = v16;
    unint64_t v19 = v17;
    uint64_t v20 = 0;
    switch(v17 >> 62)
    {
      case 1uLL:
        LODWORD(v20) = HIDWORD(v16) - v16;
        if (__OFSUB__(HIDWORD(v16), v16)) {
          goto LABEL_23;
        }
        uint64_t v20 = (int)v20;
LABEL_15:
        uint64_t v24 = 0;
        switch(v15 >> 62)
        {
          case 1uLL:
            LODWORD(v24) = HIDWORD(v30) - v30;
            if (__OFSUB__(HIDWORD(v30), v30)) {
              goto LABEL_25;
            }
            uint64_t v24 = (int)v24;
LABEL_20:
            if (__OFADD__(v20, v24))
            {
              __break(1u);
LABEL_23:
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              __break(1u);
LABEL_26:
              __break(1u);
              JUMPOUT(0x19DDB9A50);
            }
            uint64_t v33 = sub_19DDBF6A0(v20 + v24);
            unint64_t v34 = v27;
            sub_19DF72A60();
            uint64_t v28 = v30;
            sub_19DF72A60();
            sub_19DDBF398(v18, v19);
            sub_19DDBF398(v28, v15);
            (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v2);
            break;
          case 2uLL:
            uint64_t v26 = *(void *)(v30 + 16);
            uint64_t v25 = *(void *)(v30 + 24);
            BOOL v23 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v23) {
              goto LABEL_20;
            }
            goto LABEL_26;
          case 3uLL:
            goto LABEL_20;
          default:
            uint64_t v24 = BYTE6(v15);
            goto LABEL_20;
        }
        break;
      case 2uLL:
        uint64_t v22 = *(void *)(v16 + 16);
        uint64_t v21 = *(void *)(v16 + 24);
        BOOL v23 = __OFSUB__(v21, v22);
        uint64_t v20 = v21 - v22;
        if (!v23) {
          goto LABEL_15;
        }
        goto LABEL_24;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v20 = BYTE6(v17);
        goto LABEL_15;
    }
  }
}

uint64_t NEIKEv2CryptoKitHPKE.performHPKEOpen()()
{
  uint64_t v2 = sub_19DF72D70();
  uint64_t v22 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload);
  unint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload + 8);
  sub_19DDBF5E0(v5, v6);
  sub_19DDB9CD4(32, v5, v6, &v20);
  uint64_t v8 = v20;
  unint64_t v7 = v21;
  sub_19DDBF5E0(v5, v6);
  sub_19DDB9E70(32, v5, v6, &v20);
  uint64_t v10 = v20;
  unint64_t v9 = v21;
  sub_19DDB8CE0(v8, v7, (uint64_t)v4);
  if (v1)
  {
    sub_19DDBF398(v10, v9);
    sub_19DDBF398(v8, v7);
  }
  else
  {
    uint64_t v20 = v10;
    unint64_t v21 = v9;
    uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    unint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad + 8);
    if (v12 >> 60 == 15) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad);
    }
    if (v12 >> 60 == 15) {
      unint64_t v14 = 0xC000000000000000;
    }
    else {
      unint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad + 8);
    }
    uint64_t v16 = v13;
    uint64_t v17 = v2;
    uint64_t v18 = v13;
    unint64_t v19 = v14;
    sub_19DDBF638(v11, v12);
    sub_19DDBF64C();
    uint64_t v0 = sub_19DF72D60();
    sub_19DDBF398(v8, v7);
    sub_19DDBF398(v16, v14);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v4, v17);
    sub_19DDBF398(v10, v9);
  }
  return v0;
}

uint64_t sub_19DDB9CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_19DDBF0E0(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_19DDBF064(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x19DDB9E40);
  }
LABEL_16:
  uint64_t v14 = sub_19DF72A30();
  uint64_t v16 = v15;
  uint64_t result = sub_19DDBF398(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_19DDB9E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_19DDBF0E0(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_19DDBF064(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x19DDB9FF0);
    }
  }
  uint64_t v14 = sub_19DF72A30();
  uint64_t v16 = v15;
  uint64_t result = sub_19DDBF398(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void NEIKEv2CryptoKitHPKE.init()()
{
}

BOOL sub_19DDBA15C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.__allocating_init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  id v17 = objc_allocWithZone(v11);
  return NEIKEv2CryptoKitSPAKE2Plus.init(seed:initiatorID:responderID:salt:context:forInitiator:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char a11)
{
  uint64_t v80 = a5;
  uint64_t v12 = v11;
  unint64_t v81 = a6;
  uint64_t v82 = a3;
  unint64_t v83 = a4;
  uint64_t v84 = a1;
  unint64_t v85 = a2;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454178);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v67 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454180);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v66 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_19DF72A90();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v78 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v77 = (char *)&v60 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v87 = (char *)&v60 - v25;
  uint64_t v26 = sub_19DF72FC0();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (uint64_t)v12 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
  uint64_t v31 = sub_19DF72AE0();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
  uint64_t v69 = v30;
  uint64_t v65 = v31;
  v64 = v33;
  uint64_t v63 = v32 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v33)(v30, 1, 1);
  uint64_t v34 = (uint64_t)v12 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
  uint64_t v35 = sub_19DF72B30();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
  uint64_t v68 = v34;
  uint64_t v62 = v35;
  unint64_t v61 = v37;
  uint64_t v60 = v36 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v34, 1, 1);
  id v38 = v12;
  sub_19DF72FB0();
  uint64_t v75 = sub_19DF72FA0();
  unint64_t v40 = v39;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  unint64_t v76 = v40;
  if (v40 >> 60 != 15)
  {
    uint64_t v42 = *MEMORY[0x1E4F5E510];
    uint64_t v71 = v20;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v87, v42, v19);
    unint64_t v43 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v72 = v19;
    unint64_t v73 = a8;
    id v70 = v38;
    if (a11)
    {
      *((unsigned char *)v38 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) = 0;
      (*v43)(v77, v87, v19);
      uint64_t v44 = v84;
      sub_19DDBF5E0(v84, v85);
      sub_19DDBF5E0(a7, a8);
      sub_19DDBF5E0(a9, a10);
      uint64_t v46 = v80;
      unint64_t v45 = v81;
      sub_19DDBF5E0(v80, v81);
      uint64_t v47 = v82;
      unint64_t v48 = a10;
      unint64_t v49 = v83;
      sub_19DDBF5E0(v82, v83);
      unint64_t v50 = v73;
      uint64_t v51 = v79;
      sub_19DF72AC0();
      uint64_t v79 = v51;
      if (!v51)
      {
        unint64_t v52 = a10;
        id v53 = v70;
        uint64_t v54 = a7;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v87, v72);
        uint64_t v55 = (uint64_t)v66;
        v64(v66, 0, 1, v65);
        uint64_t v56 = v69;
        swift_beginAccess();
        unint64_t v57 = &qword_1E9454180;
LABEL_8:
        sub_19DDBF7E0(v55, v56, v57);
        swift_endAccess();

        v86.receiver = v53;
        v86.super_class = ObjectType;
        id v59 = objc_msgSendSuper2(&v86, sel_init);
        sub_19DDBF398(a9, v52);
        sub_19DDBF398(v54, v50);
        sub_19DDBF398(v80, v81);
        sub_19DDBF398(v82, v83);
        sub_19DDBF398(v84, v85);
        return (uint64_t)v59;
      }
    }
    else
    {
      *((unsigned char *)v38 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role) = 1;
      (*v43)(v78, v87, v19);
      uint64_t v44 = v84;
      sub_19DDBF5E0(v84, v85);
      sub_19DDBF5E0(a7, a8);
      sub_19DDBF5E0(a9, a10);
      uint64_t v46 = v80;
      unint64_t v45 = v81;
      sub_19DDBF5E0(v80, v81);
      uint64_t v47 = v82;
      unint64_t v48 = a10;
      unint64_t v49 = v83;
      sub_19DDBF5E0(v82, v83);
      unint64_t v50 = v73;
      uint64_t v58 = v79;
      sub_19DF72B10();
      uint64_t v79 = v58;
      if (!v58)
      {
        unint64_t v52 = a10;
        id v53 = v70;
        uint64_t v54 = a7;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v87, v72);
        uint64_t v55 = (uint64_t)v67;
        v61(v67, 0, 1, v62);
        uint64_t v56 = v68;
        swift_beginAccess();
        unint64_t v57 = &qword_1E9454178;
        goto LABEL_8;
      }
    }
    sub_19DDBF398(a9, v48);
    sub_19DDBF398(a7, v50);
    sub_19DDBF398(v46, v45);
    sub_19DDBF398(v47, v49);
    sub_19DDBF398(v44, v85);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v87, v72);
    sub_19DDC063C(v69, &qword_1E9454180);
    sub_19DDC063C(v68, &qword_1E9454178);
    id v59 = v70;

    swift_deallocPartialClassInstance();
    return (uint64_t)v59;
  }
  __break(1u);
  return result;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.getFirstMessage()()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454178);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454180);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role))
  {
    uint64_t v9 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    sub_19DDC05D8(v9, (uint64_t)v5, &qword_1E9454178);
    uint64_t v10 = sub_19DF72B30();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10);
    if (result != 1)
    {
      uint64_t v13 = sub_19DF72B20();
      if (!v1) {
        uint64_t v2 = v13;
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v10);
      return v2;
    }
    __break(1u);
  }
  else
  {
    uint64_t v14 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
    swift_beginAccess();
    sub_19DDC05D8(v14, (uint64_t)v8, &qword_1E9454180);
    uint64_t v15 = sub_19DF72AE0();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v8, 1, v15);
    if (result != 1)
    {
      uint64_t v17 = sub_19DF72AD0();
      if (!v1) {
        uint64_t v2 = v17;
      }
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
      return v2;
    }
  }
  __break(1u);
  return result;
}

id sub_19DDBADC8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = a1;
  uint64_t v6 = a4();
  unint64_t v8 = v7;

  uint64_t v9 = (void *)sub_19DF72A40();
  sub_19DDBF398(v6, v8);

  return v9;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.processFirstPeerMessage(_:)()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role))
  {
    uint64_t v1 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    uint64_t v2 = sub_19DF72B30();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
    if (result != 1)
    {
      uint64_t v4 = sub_19DF72B00();
LABEL_6:
      uint64_t v7 = v4;
      swift_endAccess();
      return v7;
    }
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
    swift_beginAccess();
    uint64_t v6 = sub_19DF72AE0();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
    if (result != 1)
    {
      uint64_t v4 = sub_19DF72AB0();
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t NEIKEv2CryptoKitSPAKE2Plus.processSecondPeerMessage(_:)()
{
  uint64_t v2 = sub_19DF72A80();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)v17 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v17 - v10;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_role))
  {
    uint64_t v12 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_verifier;
    swift_beginAccess();
    uint64_t v13 = sub_19DF72B30();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
    if (result != 1)
    {
      sub_19DF72AF0();
      uint64_t result = swift_endAccess();
      uint64_t v9 = v6;
      if (v1) {
        return result;
      }
LABEL_7:
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v9, v2);
      sub_19DDBF780();
      sub_19DF72A70();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      return v17[1];
    }
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v15 = v0 + OBJC_IVAR____TtC16NetworkExtension26NEIKEv2CryptoKitSPAKE2Plus_prover;
  swift_beginAccess();
  uint64_t v16 = sub_19DF72AE0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16);
  if (result == 1) {
    goto LABEL_9;
  }
  sub_19DF72AA0();
  uint64_t result = swift_endAccess();
  if (!v1) {
    goto LABEL_7;
  }
  return result;
}

id sub_19DDBB3C4@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_19DDBD430(a1, a2, a3);
}

void NEIKEv2CryptoKitSPAKE2Plus.init()()
{
}

uint64_t NEIKEv2CryptoKitECDH.keyExchangeData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData);
  sub_19DDBF5E0(v1, *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData + 8));
  return v1;
}

uint64_t NEIKEv2CryptoKitECDH.sharedSecret.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_19DF72C30();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret;
  swift_beginAccess();
  sub_19DDC05D8(v8, (uint64_t)v3, &qword_1E9454198);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_19DDC063C((uint64_t)v3, &qword_1E9454198);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    sub_19DDBF780();
    sub_19DF72C20();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v10[2];
  }
}

uint64_t sub_19DDBB7DC()
{
  return sub_19DDBD49C();
}

uint64_t NEIKEv2CryptoKitECDH.processPeerPayload(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68))(a1, a2);
  if (!v3)
  {
    uint64_t v10 = sub_19DF72C30();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
    uint64_t v11 = (uint64_t)v2 + OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret;
    swift_beginAccess();
    sub_19DDBF7E0((uint64_t)v8, v11, &qword_1E9454198);
    return swift_endAccess();
  }
  return result;
}

void NEIKEv2CryptoKitECDH.init()()
{
}

id NEIKEv2CryptoKitECDH.__deallocating_deinit()
{
  return sub_19DDBD8BC(type metadata accessor for NEIKEv2CryptoKitECDH);
}

id NEIKEv2CryptoKitP256.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP256.init()();
}

id NEIKEv2CryptoKitP256.init()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72D90();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_19DF72DC0();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72DB0();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey], v12, v9);
  sub_19DF72DA0();
  uint64_t v13 = sub_19DF72D80();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  uint64_t v17 = sub_19DF72C30();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *uint64_t v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  uint64_t v20 = v1;
  sub_19DDBF5E0(v13, v15);
  sub_19DDBF7E0((uint64_t)v4, v16, &qword_1E9454198);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19DDBF398(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return v22;
}

uint64_t sub_19DDBBEF4(uint64_t a1, unint64_t a2)
{
  return sub_19DDBCEE8(a1, a2, MEMORY[0x1E4F250D8], MEMORY[0x1E4F250C8], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey, MEMORY[0x1E4F250E0]);
}

uint64_t sub_19DDBBF50()
{
  return sub_19DDBD060(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP256_privateKey, MEMORY[0x1E4F250F0]);
}

id NEIKEv2CryptoKitP384.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP384.init()();
}

id NEIKEv2CryptoKitP384.init()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72DE0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_19DF72E10();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72E00();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey], v12, v9);
  sub_19DF72DF0();
  uint64_t v13 = sub_19DF72D80();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  uint64_t v17 = sub_19DF72C30();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *uint64_t v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  uint64_t v20 = v1;
  sub_19DDBF5E0(v13, v15);
  sub_19DDBF7E0((uint64_t)v4, v16, &qword_1E9454198);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19DDBF398(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return v22;
}

uint64_t sub_19DDBC2DC(uint64_t a1, unint64_t a2)
{
  return sub_19DDBCEE8(a1, a2, MEMORY[0x1E4F25118], MEMORY[0x1E4F25100], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey, MEMORY[0x1E4F25120]);
}

uint64_t sub_19DDBC338()
{
  return sub_19DDBD060(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP384_privateKey, MEMORY[0x1E4F25130]);
}

id NEIKEv2CryptoKitP521.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitP521.init()();
}

id NEIKEv2CryptoKitP521.init()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72E30();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_19DF72E60();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72E50();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey], v12, v9);
  sub_19DF72E40();
  uint64_t v13 = sub_19DF72D80();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  uint64_t v17 = sub_19DF72C30();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *uint64_t v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  uint64_t v20 = v1;
  sub_19DDBF5E0(v13, v15);
  sub_19DDBF7E0((uint64_t)v4, v16, &qword_1E9454198);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19DDBF398(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return v22;
}

uint64_t sub_19DDBC6C4(uint64_t a1, unint64_t a2)
{
  return sub_19DDBCEE8(a1, a2, MEMORY[0x1E4F25150], MEMORY[0x1E4F25148], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey, MEMORY[0x1E4F25158]);
}

uint64_t sub_19DDBC720()
{
  return sub_19DDBD060(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitP521_privateKey, MEMORY[0x1E4F25160]);
}

id NEIKEv2CryptoKitX25519.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitX25519.init()();
}

id NEIKEv2CryptoKitX25519.init()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72BD0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_19DF72C10();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72C00();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v1[OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey], v12, v9);
  sub_19DF72BE0();
  uint64_t v13 = sub_19DF72BB0();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  uint64_t v17 = sub_19DF72C30();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *uint64_t v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  uint64_t v20 = v1;
  sub_19DDBF5E0(v13, v15);
  sub_19DDBF7E0((uint64_t)v4, v16, &qword_1E9454198);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19DDBF398(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return v22;
}

uint64_t sub_19DDBCAA8(uint64_t a1, unint64_t a2)
{
  return sub_19DDBCEE8(a1, a2, MEMORY[0x1E4F24F38], MEMORY[0x1E4F24F28], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey, MEMORY[0x1E4F24F40]);
}

uint64_t sub_19DDBCB04()
{
  return sub_19DDBD060(&OBJC_IVAR____TtC16NetworkExtension22NEIKEv2CryptoKitX25519_privateKey, MEMORY[0x1E4F24F58]);
}

id NEIKEv2CryptoKitX448.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitX448.init()();
}

id NEIKEv2CryptoKitX448.init()()
{
  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454198);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_19DF72E80();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_19DF72EB0();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DF72EA0();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey], v12, v9);
  sub_19DF72E90();
  uint64_t v13 = sub_19DF72E70();
  unint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = (uint64_t)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_internalSharedSecret];
  uint64_t v17 = sub_19DF72C30();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  uint64_t v19 = (uint64_t *)&v1[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitECDH_keyExchangeData];
  *uint64_t v19 = v13;
  v19[1] = v15;
  v18((uint64_t)v4, 1, 1, v17);
  swift_beginAccess();
  uint64_t v20 = v1;
  sub_19DDBF5E0(v13, v15);
  sub_19DDBF7E0((uint64_t)v4, v16, &qword_1E9454198);
  swift_endAccess();

  uint64_t v21 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitECDH(0);
  v25.receiver = v20;
  v25.super_class = v21;
  id v22 = objc_msgSendSuper2(&v25, sel_init);
  sub_19DDBF398(v13, v15);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v24);
  return v22;
}

uint64_t sub_19DDBCE8C(uint64_t a1, unint64_t a2)
{
  return sub_19DDBCEE8(a1, a2, MEMORY[0x1E4F251A0], MEMORY[0x1E4F25198], (uint64_t)&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey, MEMORY[0x1E4F251A8]);
}

uint64_t sub_19DDBCEE8(uint64_t a1, unint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void *, void, void), uint64_t a5, void (*a6)(char *))
{
  uint64_t v17 = a6;
  v15[1] = a5;
  uint64_t v10 = a3(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v15 - v12;
  v16[0] = a1;
  v16[1] = a2;
  sub_19DDBF5E0(a1, a2);
  uint64_t result = a4(v16, MEMORY[0x1E4F277C0], MEMORY[0x1E4F277B0]);
  if (!v6)
  {
    v17(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return result;
}

uint64_t sub_19DDBD040()
{
  return sub_19DDBD060(&OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitX448_privateKey, MEMORY[0x1E4F251B0]);
}

uint64_t sub_19DDBD060(void *a1, uint64_t (*a2)(void))
{
  uint64_t v3 = v2 + *a1;
  uint64_t v4 = a2(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t sub_19DDBD0F0(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a1 + *a3;
  uint64_t v5 = a4(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

id sub_19DDBD168(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_19DDBF5E0(*v3, v5);
  uint64_t v6 = (void *)sub_19DF72A40();
  sub_19DDBF398(v4, v5);

  return v6;
}

uint64_t NEIKEv2CryptoKitKEM.keyExchangeData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData);
  sub_19DDBF5E0(v1, *(void *)(v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData + 8));
  return v1;
}

uint64_t NEIKEv2CryptoKitKEM.sharedSecret.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_19DF72C60();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret;
  swift_beginAccess();
  sub_19DDC05D8(v8, (uint64_t)v3, &qword_1E94541A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_19DDC063C((uint64_t)v3, &qword_1E94541A0);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    sub_19DDBF780();
    sub_19DF72C40();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v10[2];
  }
}

id sub_19DDBD430@<X0>(id result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (result)
  {
    uint64_t result = objc_msgSend(self, sel__newZeroingDataWithBytes_length_, result, a2 - (void)result);
    if (result)
    {
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_19DDBD49C()
{
  sub_19DDC0584();
  swift_allocError();
  *uint64_t v0 = 2;
  return swift_willThrow();
}

uint64_t NEIKEv2CryptoKitKEM.processPeerPayload(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68))(a1, a2);
  if (!v3)
  {
    uint64_t v10 = sub_19DF72C60();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
    uint64_t v11 = (uint64_t)v2 + OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret;
    swift_beginAccess();
    sub_19DDBF7E0((uint64_t)v8, v11, &qword_1E94541A0);
    return swift_endAccess();
  }
  return result;
}

id NEIKEv2CryptoKitKEM.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void NEIKEv2CryptoKitKEM.init()()
{
}

id NEIKEv2CryptoKitKEM.__deallocating_deinit()
{
  return sub_19DDBD8BC(type metadata accessor for NEIKEv2CryptoKitKEM);
}

id sub_19DDBD8BC(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_19DDBD918(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, void *a5)
{
  sub_19DDC063C(a1 + *a3, a4);
  uint64_t v7 = (uint64_t *)(a1 + *a5);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_19DDBF398(v8, v9);
}

void (**NEIKEv2CryptoKitMLKEM768.__allocating_init()())(char *, uint64_t)
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitMLKEM768.init()();
}

void (**NEIKEv2CryptoKitMLKEM768.init()())(char *, uint64_t)
{
  swift_getObjectType();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_19DF72F20();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_19DF72EE0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v0;
  sub_19DF72ED0();
  if (v1)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v13 = &v12[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitMLKEM768_privateKey];
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v12[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitMLKEM768_privateKey], v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);

    sub_19DF72EC0();
    uint64_t v14 = sub_19DF72F00();
    uint64_t v26 = v8;
    uint64_t v27 = v9;
    uint64_t v15 = v14;
    unint64_t v17 = v16;
    v5[1](v7, v4);
    uint64_t v18 = (uint64_t)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    uint64_t v19 = sub_19DF72C60();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    v20(v18, 1, 1, v19);
    uint64_t v21 = (uint64_t *)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *uint64_t v21 = v15;
    v21[1] = v17;
    uint64_t v28 = 0;
    uint64_t v22 = (uint64_t)v30;
    v20((uint64_t)v30, 1, 1, v19);
    swift_beginAccess();
    uint64_t v23 = v12;
    sub_19DDBF5E0(v15, v17);
    sub_19DDBF7E0(v22, v18, &qword_1E94541A0);
    swift_endAccess();

    uint64_t v24 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v29.receiver = v23;
    v29.super_class = v24;
    uint64_t v5 = (void (**)(char *, uint64_t))objc_msgSendSuper2(&v29, sel_init);
    sub_19DDBF398(v15, v17);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
  }
  return v5;
}

char *NEIKEv2CryptoKitMLKEM768.__allocating_init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return NEIKEv2CryptoKitMLKEM768.init(publicKeyData:)(a1, a2);
}

char *NEIKEv2CryptoKitMLKEM768.init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_19DF72CB0();
  uint64_t v49 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v50 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_19DF72F20();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v2[OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitMLKEM768_privateKey];
  uint64_t v15 = sub_19DF72EE0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  unint64_t v16 = v2;
  unint64_t v17 = a2;
  uint64_t v18 = v16;
  sub_19DDBF5E0(a1, v17);
  uint64_t v19 = v55;
  sub_19DF72F10();
  if (v19)
  {
    sub_19DDBF398(a1, v17);
    sub_19DDC063C((uint64_t)v14, (uint64_t *)&unk_1E94541A8);

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v46 = a1;
    uint64_t v47 = v11;
    unint64_t v48 = v17;
    uint64_t v55 = v10;
    uint64_t v44 = v8;
    unint64_t v45 = v7;
    uint64_t v20 = v50;
    sub_19DF72EF0();

    uint64_t v22 = sub_19DF72C90();
    unint64_t v24 = v23;
    objc_super v25 = &v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    CFErrorRef v41 = &v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    uint64_t v26 = sub_19DF72C60();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v42 = v28;
    uint64_t v29 = v27 + 56;
    uint64_t v30 = v25;
    uint64_t v31 = v26;
    uint64_t ObjectType = v26;
    ((void (*)(char *, uint64_t, uint64_t))v28)(v30, 1, 1);
    uint64_t v43 = v29;
    uint64_t v32 = (uint64_t *)&v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *uint64_t v32 = v22;
    v32[1] = v24;
    v28((uint64_t)v45, 1, 1, v31);
    uint64_t v33 = (uint64_t)v41;
    swift_beginAccess();
    uint64_t v34 = v18;
    uint64_t v35 = v22;
    unint64_t v36 = v24;
    sub_19DDBF5E0(v22, v24);
    uint64_t v37 = (uint64_t)v45;
    sub_19DDBF7E0((uint64_t)v45, v33, &qword_1E94541A0);
    swift_endAccess();

    id v38 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v52.receiver = v34;
    v52.super_class = v38;
    id v39 = objc_msgSendSuper2(&v52, sel_init);
    sub_19DDBF398(v35, v36);
    uint64_t v14 = (char *)v39;
    sub_19DF72CA0();
    sub_19DDBF398(v46, v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v44);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v55);
    v42(v37, 0, 1, ObjectType);
    uint64_t v40 = (uint64_t)&v14[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    swift_beginAccess();
    sub_19DDBF7E0(v37, v40, &qword_1E94541A0);
    swift_endAccess();
  }
  return v14;
}

uint64_t sub_19DDBE28C(uint64_t a1, uint64_t a2)
{
  return sub_19DDBEDDC(a1, a2, (uint64_t *)&unk_1E94541A8, MEMORY[0x1E4F25218], &OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitMLKEM768_privateKey, MEMORY[0x1E4F25210]);
}

uint64_t sub_19DDBE2DC()
{
  return sub_19DDC063C(v0 + OBJC_IVAR____TtC16NetworkExtension24NEIKEv2CryptoKitMLKEM768_privateKey, (uint64_t *)&unk_1E94541A8);
}

void (**NEIKEv2CryptoKitMLKEM1024.__allocating_init()())(char *, uint64_t)
{
  id v1 = objc_allocWithZone(v0);
  return NEIKEv2CryptoKitMLKEM1024.init()();
}

void (**NEIKEv2CryptoKitMLKEM1024.init()())(char *, uint64_t)
{
  swift_getObjectType();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_19DF72F90();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_19DF72F50();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v0;
  sub_19DF72F40();
  if (v1)
  {

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v13 = &v12[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitMLKEM1024_privateKey];
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&v12[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitMLKEM1024_privateKey], v11, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);

    sub_19DF72F30();
    uint64_t v14 = sub_19DF72F70();
    uint64_t v26 = v8;
    uint64_t v27 = v9;
    uint64_t v15 = v14;
    unint64_t v17 = v16;
    v5[1](v7, v4);
    uint64_t v18 = (uint64_t)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    uint64_t v19 = sub_19DF72C60();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56);
    v20(v18, 1, 1, v19);
    uint64_t v21 = (uint64_t *)&v12[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *uint64_t v21 = v15;
    v21[1] = v17;
    uint64_t v28 = 0;
    uint64_t v22 = (uint64_t)v30;
    v20((uint64_t)v30, 1, 1, v19);
    swift_beginAccess();
    unint64_t v23 = v12;
    sub_19DDBF5E0(v15, v17);
    sub_19DDBF7E0(v22, v18, &qword_1E94541A0);
    swift_endAccess();

    unint64_t v24 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v29.receiver = v23;
    v29.super_class = v24;
    uint64_t v5 = (void (**)(char *, uint64_t))objc_msgSendSuper2(&v29, sel_init);
    sub_19DDBF398(v15, v17);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
  }
  return v5;
}

uint64_t sub_19DDBE72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

char *NEIKEv2CryptoKitMLKEM1024.__allocating_init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return NEIKEv2CryptoKitMLKEM1024.init(publicKeyData:)(a1, a2);
}

char *NEIKEv2CryptoKitMLKEM1024.init(publicKeyData:)(uint64_t a1, unint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94541A0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_19DF72CB0();
  uint64_t v49 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v50 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_19DF72F90();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = &v2[OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitMLKEM1024_privateKey];
  uint64_t v15 = sub_19DF72F50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  unint64_t v16 = v2;
  unint64_t v17 = a2;
  uint64_t v18 = v16;
  sub_19DDBF5E0(a1, v17);
  uint64_t v19 = v55;
  sub_19DF72F80();
  if (v19)
  {
    sub_19DDBF398(a1, v17);
    sub_19DDC063C((uint64_t)v14, &qword_1E94541B8);

    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v46 = a1;
    uint64_t v47 = v11;
    unint64_t v48 = v17;
    uint64_t v55 = v10;
    uint64_t v44 = v8;
    unint64_t v45 = v7;
    uint64_t v20 = v50;
    sub_19DF72F60();

    uint64_t v22 = sub_19DF72C90();
    unint64_t v24 = v23;
    objc_super v25 = &v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    CFErrorRef v41 = &v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    uint64_t v26 = sub_19DF72C60();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v42 = v28;
    uint64_t v29 = v27 + 56;
    uint64_t v30 = v25;
    uint64_t v31 = v26;
    uint64_t ObjectType = v26;
    ((void (*)(char *, uint64_t, uint64_t))v28)(v30, 1, 1);
    uint64_t v43 = v29;
    uint64_t v32 = (uint64_t *)&v18[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_keyExchangeData];
    *uint64_t v32 = v22;
    v32[1] = v24;
    v28((uint64_t)v45, 1, 1, v31);
    uint64_t v33 = (uint64_t)v41;
    swift_beginAccess();
    uint64_t v34 = v18;
    uint64_t v35 = v22;
    unint64_t v36 = v24;
    sub_19DDBF5E0(v22, v24);
    uint64_t v37 = (uint64_t)v45;
    sub_19DDBF7E0((uint64_t)v45, v33, &qword_1E94541A0);
    swift_endAccess();

    id v38 = (objc_class *)type metadata accessor for NEIKEv2CryptoKitKEM(0);
    v52.receiver = v34;
    v52.super_class = v38;
    id v39 = objc_msgSendSuper2(&v52, sel_init);
    sub_19DDBF398(v35, v36);
    uint64_t v14 = (char *)v39;
    sub_19DF72CA0();
    sub_19DDBF398(v46, v48);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v44);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v55);
    v42(v37, 0, 1, ObjectType);
    uint64_t v40 = (uint64_t)&v14[OBJC_IVAR____TtC16NetworkExtension19NEIKEv2CryptoKitKEM_internalSharedSecret];
    swift_beginAccess();
    sub_19DDBF7E0(v37, v40, &qword_1E94541A0);
    swift_endAccess();
  }
  return v14;
}

uint64_t sub_19DDBECD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6 = a3;
  uint64_t v7 = sub_19DF72A50();
  uint64_t v9 = v8;

  return a5(v7, v9);
}

uint64_t sub_19DDBED8C(uint64_t a1, uint64_t a2)
{
  return sub_19DDBEDDC(a1, a2, &qword_1E94541B8, MEMORY[0x1E4F25228], &OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitMLKEM1024_privateKey, MEMORY[0x1E4F25220]);
}

uint64_t sub_19DDBEDDC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), void *a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v21 = a6;
  uint64_t v20 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a4(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v20 - v16;
  sub_19DDC05D8(v6 + *a5, (uint64_t)v13, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_19DDC063C((uint64_t)v13, a3);
    sub_19DDC0584();
    swift_allocError();
    *uint64_t v18 = 1;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v21(a1, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_19DDBEFD0()
{
  return sub_19DDC063C(v0 + OBJC_IVAR____TtC16NetworkExtension25NEIKEv2CryptoKitMLKEM1024_privateKey, &qword_1E94541B8);
}

id _s16NetworkExtension20NEIKEv2CryptoKitHPKECfD_0()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_19DDBF064(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x19DDBF0D0);
  }
  return result;
}

uint64_t sub_19DDBF0E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x19DDBF1ACLL);
  }
  return result;
}

id sub_19DDBF1CC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10 = v9;
  uint64_t v32 = a7;
  unint64_t v33 = a8;
  uint64_t v31 = a9;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v17 = sub_19DF72C60();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (uint64_t *)&v10[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload];
  *uint64_t v21 = a1;
  v21[1] = a2;
  uint64_t v22 = (uint64_t *)&v10[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad];
  uint64_t *v22 = a3;
  v22[1] = a4;
  uint64_t v36 = a5;
  unint64_t v37 = a6;
  unint64_t v23 = v10;
  sub_19DDBF5E0(a1, a2);
  sub_19DDBF638(a3, a4);
  sub_19DDBF5E0(a5, a6);
  sub_19DF72C50();
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk], v20, v17);
  unint64_t v24 = (uint64_t *)&v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID];
  uint64_t v25 = v32;
  unint64_t v26 = v33;
  uint64_t *v24 = v32;
  v24[1] = v26;
  uint64_t v27 = &v23[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key];
  uint64_t v28 = v31;
  *(void *)uint64_t v27 = v31;
  *((void *)v27 + 1) = 0;
  sub_19DDBF5E0(v25, v26);
  id v29 = v28;

  v35.receiver = v23;
  v35.super_class = ObjectType;
  return objc_msgSendSuper2(&v35, sel_init);
}

uint64_t sub_19DDBF398(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_19DDBF3F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_19DDBF398(a1, a2);
  }
  return a1;
}

id sub_19DDBF404(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v35 = a7;
  unint64_t v36 = a8;
  unint64_t v33 = a10;
  uint64_t v34 = a9;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v18 = sub_19DF72C60();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t *)&v11[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_payload];
  uint64_t *v22 = a1;
  v22[1] = a2;
  unint64_t v23 = (uint64_t *)&v11[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_aad];
  *unint64_t v23 = a3;
  v23[1] = a4;
  uint64_t v39 = a5;
  unint64_t v40 = a6;
  unint64_t v24 = v11;
  sub_19DDBF5E0(a1, a2);
  sub_19DDBF638(a3, a4);
  sub_19DDBF5E0(a5, a6);
  sub_19DF72C50();
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_psk], v21, v18);
  uint64_t v25 = (uint64_t *)&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_pskID];
  uint64_t v26 = v35;
  unint64_t v27 = v36;
  *uint64_t v25 = v35;
  v25[1] = v27;
  unint64_t v29 = v33;
  uint64_t v28 = v34;
  uint64_t v30 = (uint64_t *)&v24[OBJC_IVAR____TtC16NetworkExtension20NEIKEv2CryptoKitHPKE_key];
  uint64_t *v30 = v34;
  v30[1] = v29 | 0x2000000000000000;
  sub_19DDBF5E0(v26, v27);
  sub_19DDBF5E0(v28, v29);

  v38.receiver = v24;
  v38.super_class = ObjectType;
  return objc_msgSendSuper2(&v38, sel_init);
}

uint64_t sub_19DDBF5E0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_19DDBF638(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_19DDBF5E0(a1, a2);
  }
  return a1;
}

unint64_t sub_19DDBF64C()
{
  unint64_t result = qword_1E9454170;
  if (!qword_1E9454170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9454170);
  }
  return result;
}

uint64_t sub_19DDBF6A0(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_19DF72A00();
      swift_allocObject();
      sub_19DF729F0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_19DF72A20();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_19DDBF780()
{
  unint64_t result = qword_1E9454190;
  if (!qword_1E9454190)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9454190);
  }
  return result;
}

uint64_t type metadata accessor for NEIKEv2CryptoKitECDH(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E9454040);
}

uint64_t sub_19DDBF7E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NEIKEv2CryptoKitKEM(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E9453FD8);
}

uint64_t sub_19DDBF864()
{
  return type metadata accessor for NEIKEv2CryptoKitHPKE(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitHPKE(uint64_t a1)
{
  return sub_19DDC0058(a1, qword_1EB4B0DA0);
}

uint64_t sub_19DDBF88C()
{
  uint64_t result = sub_19DF72C60();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NEIKEv2CryptoKitHPKE(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitHPKE);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyRef:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitHPKE.__allocating_init(payload:aad:psk:pskID:keyData:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_19DDBF98C()
{
  return type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E9453FE8);
}

void sub_19DDBF9B4()
{
  sub_19DDC0118(319, &qword_1E9453FC8, MEMORY[0x1E4F5E518]);
  if (v0 <= 0x3F)
  {
    sub_19DDC0118(319, &qword_1E9453FD0, MEMORY[0x1E4F5E520]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for NEIKEv2CryptoKitSPAKE2Plus(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitSPAKE2Plus);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitSPAKE2Plus.__allocating_init(seed:initiatorID:responderID:salt:context:forInitiator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(a1, a2, a3);
}

uint64_t sub_19DDBFB18()
{
  return type metadata accessor for NEIKEv2CryptoKitECDH(0);
}

void sub_19DDBFB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t method lookup function for NEIKEv2CryptoKitECDH(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitECDH);
}

uint64_t sub_19DDBFB58()
{
  return type metadata accessor for NEIKEv2CryptoKitP256(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP256(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E9454080);
}

uint64_t sub_19DDBFB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19DDBFC04(a1, a2, a3, MEMORY[0x1E4F250F0]);
}

uint64_t method lookup function for NEIKEv2CryptoKitP256(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitP256);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitP256.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19DDBFBC4()
{
  return type metadata accessor for NEIKEv2CryptoKitP384(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP384(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E9454098);
}

uint64_t sub_19DDBFBEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19DDBFC04(a1, a2, a3, MEMORY[0x1E4F25130]);
}

uint64_t sub_19DDBFC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for NEIKEv2CryptoKitP384(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitP384);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitP384.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19DDBFCC4()
{
  return type metadata accessor for NEIKEv2CryptoKitP521(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitP521(uint64_t a1)
{
  return sub_19DDC0058(a1, qword_1E94540B0);
}

uint64_t sub_19DDBFCEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19DDBFC04(a1, a2, a3, MEMORY[0x1E4F25160]);
}

uint64_t method lookup function for NEIKEv2CryptoKitP521(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitP521);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitP521.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19DDBFD30()
{
  return type metadata accessor for NEIKEv2CryptoKitX25519(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitX25519(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E94540E8);
}

uint64_t sub_19DDBFD58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19DDBFC04(a1, a2, a3, MEMORY[0x1E4F24F58]);
}

uint64_t method lookup function for NEIKEv2CryptoKitX25519(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitX25519);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitX25519.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19DDBFD9C()
{
  return type metadata accessor for NEIKEv2CryptoKitX448(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitX448(uint64_t a1)
{
  return sub_19DDC0058(a1, (uint64_t *)&unk_1E94540D0);
}

uint64_t sub_19DDBFDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19DDBFC04(a1, a2, a3, MEMORY[0x1E4F251B0]);
}

uint64_t method lookup function for NEIKEv2CryptoKitX448(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitX448);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitX448.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_19DDBFE08()
{
  return type metadata accessor for NEIKEv2CryptoKitKEM(0);
}

void sub_19DDBFE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_19DDBFE30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_19DDC0118(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NEIKEv2CryptoKitKEM(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitKEM);
}

uint64_t sub_19DDBFEE8()
{
  return type metadata accessor for NEIKEv2CryptoKitMLKEM768(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitMLKEM768(uint64_t a1)
{
  return sub_19DDC0058(a1, qword_1E9454128);
}

void sub_19DDBFF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_19DDBFF30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_19DDC0118(319, a4, a5);
  if (v5 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NEIKEv2CryptoKitMLKEM768(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitMLKEM768);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitMLKEM768.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitMLKEM768.__allocating_init(publicKeyData:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_19DDC0030()
{
  return type metadata accessor for NEIKEv2CryptoKitMLKEM1024(0);
}

uint64_t type metadata accessor for NEIKEv2CryptoKitMLKEM1024(uint64_t a1)
{
  return sub_19DDC0058(a1, qword_1E9454148);
}

uint64_t sub_19DDC0058(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_19DDC0090(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t method lookup function for NEIKEv2CryptoKitMLKEM1024(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NEIKEv2CryptoKitMLKEM1024);
}

uint64_t dispatch thunk of NEIKEv2CryptoKitMLKEM1024.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NEIKEv2CryptoKitMLKEM1024.__allocating_init(publicKeyData:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void sub_19DDC0118(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_19DF72FF0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitSPAKE2Plus.Role(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NEIKEv2CryptoKitSPAKE2Plus.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19DDC02D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_19DDC0300(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_19DDC030C(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitSPAKE2Plus.Role()
{
  return &type metadata for NEIKEv2CryptoKitSPAKE2Plus.Role;
}

void *initializeBufferWithCopyOfBuffer for NEIKEv2CryptoKitKey(void *a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  sub_19DDC0368(*(id *)a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

id sub_19DDC0368(id a1, uint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    return (id)sub_19DDBF5E0((uint64_t)a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else {
    return a1;
  }
}

void destroy for NEIKEv2CryptoKitKey(uint64_t a1)
{
}

void sub_19DDC0384(id a1, uint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    sub_19DDBF398((uint64_t)a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else {
}
  }

uint64_t assignWithCopy for NEIKEv2CryptoKitKey(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  sub_19DDC0368(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  sub_19DDC0384(v5, v6);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for NEIKEv2CryptoKitKey(uint64_t a1, _OWORD *a2)
{
  id v3 = *(void **)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  sub_19DDC0384(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NEIKEv2CryptoKitKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_19DDC04C0(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_19DDC04CC(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_19DDC04DC(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitKey()
{
  return &type metadata for NEIKEv2CryptoKitKey;
}

void type metadata accessor for Verdict(uint64_t a1)
{
}

void type metadata accessor for NETrafficDirection(uint64_t a1)
{
}

unint64_t sub_19DDC0530()
{
  unint64_t result = qword_1E9454230;
  if (!qword_1E9454230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9454230);
  }
  return result;
}

unint64_t sub_19DDC0584()
{
  unint64_t result = qword_1E9454238;
  if (!qword_1E9454238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9454238);
  }
  return result;
}

uint64_t sub_19DDC05D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_19DDC063C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CFError(uint64_t a1)
{
}

unint64_t sub_19DDC06AC()
{
  unint64_t result = qword_1E9454248;
  if (!qword_1E9454248)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9454248);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NEIKEv2CryptoKitErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NEIKEv2CryptoKitErrors(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x19DDC0860);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_19DDC0888(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NEIKEv2CryptoKitErrors()
{
  return &type metadata for NEIKEv2CryptoKitErrors;
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void sub_19DDC08B4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

unint64_t sub_19DDC0900()
{
  unint64_t result = qword_1E9454260;
  if (!qword_1E9454260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9454260);
  }
  return result;
}

uint64_t NENetworkRule.init(destinationNetworkEndpoint:prefix:protocol:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_19DF72B40();
  if (result)
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDestinationNetworkEndpoint_prefix_protocol_, result, a2, a3);
    swift_unknownObjectRelease();
    uint64_t v8 = sub_19DF72B50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
    return (uint64_t)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t NENetworkRule.init(destinationHostEndpoint:protocol:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_19DF72B40();
  if (result)
  {
    id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDestinationHostEndpoint_protocol_, result, a2);
    swift_unknownObjectRelease();
    uint64_t v6 = sub_19DF72B50();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id NENetworkRule.init(remoteNetworkEndpoint:remotePrefix:localNetworkEndpoint:localPrefix:protocol:direction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v22 = a2;
  uint64_t v23 = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v22 - v12;
  sub_19DDC0CD4(a1, (uint64_t)&v22 - v12);
  uint64_t v14 = sub_19DF72B50();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14) == 1)
  {
    sub_19DDC0D3C((uint64_t)v13);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = sub_19DF72B40();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
  }
  sub_19DDC0CD4(a3, (uint64_t)v11);
  if (v16(v11, 1, v14) == 1)
  {
    sub_19DDC0D3C((uint64_t)v11);
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = sub_19DF72B40();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v14);
  }
  id v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v20 = objc_msgSend(v19, sel_initWithRemoteNetworkEndpoint_remotePrefix_localNetworkEndpoint_localPrefix_protocol_direction_, v17, v22, v18, v23, v24, v25);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_19DDC0D3C(a3);
  sub_19DDC0D3C(a1);
  return v20;
}

uint64_t sub_19DDC0CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19DDC0D3C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t NENetworkRule.matchRemoteHostOrNetworkEndpoint.getter()
{
  return sub_19DDC0DB4((SEL *)&selRef_matchRemoteHostOrNetworkEndpoint);
}

uint64_t NENetworkRule.matchLocalNetworkEndpoint.getter()
{
  return sub_19DDC0DB4((SEL *)&selRef_matchLocalNetworkEndpoint);
}

uint64_t sub_19DDC0DB4(SEL *a1)
{
  id v2 = [v1 *a1];

  return sub_19DF72B60();
}

uint64_t NEHotspotHelperCommand.interface.getter()
{
  id v1 = objc_msgSend(v0, sel_interface);

  return sub_19DF72B90();
}

uint64_t (*NEFilterPacketProvider.handler.getter())(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t result = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))objc_msgSend(v0, sel_packetHandler);
  if (result)
  {
    id v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_19DDC11B4;
    *(void *)(v4 + 24) = v3;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = sub_19DDC1278;
    *(void *)(v5 + 24) = v4;
    return sub_19DDC1280;
  }
  return result;
}

void *sub_19DDC0F14@<X0>(id *a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *@<X0>, uint64_t *@<X2>, uint64_t *@<X3>, uint64_t *@<X8>)@<X8>)
{
  uint64_t result = objc_msgSend(*a1, sel_packetHandler);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t result = (void *)swift_allocObject();
    result[2] = sub_19DDC1910;
    result[3] = v5;
    uint64_t v6 = sub_19DDC1920;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t *@<X2>, uint64_t *@<X3>, uint64_t *@<X8>))result;
  return result;
}

void sub_19DDC0FBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = sub_19DDC1280;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  sub_19DDC187C(v1);
  NEFilterPacketProvider.handler.setter((uint64_t)v4, v3);
}

void NEFilterPacketProvider.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a1;
    *(void *)(v6 + 24) = a2;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_19DDC13D0;
    *(void *)(v7 + 24) = v6;
    v9[4] = sub_19DDC1410;
    v9[5] = v7;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    v9[2] = sub_19DDC1414;
    v9[3] = &block_descriptor;
    uint64_t v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_msgSend(v3, sel_setPacketHandler_, v8);
  sub_19DDC1284(a1);
  _Block_release(v8);
}

uint64_t sub_19DDC117C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19DDC11B4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_19DDC11D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t result = sub_19DF72B70();
  if (result)
  {
    if (v9) {
      uint64_t v12 = v10 - v9;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = a4(v7, result, v8, v9, v12);
    uint64_t result = swift_unknownObjectRelease();
    *a5 = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_19DDC1278@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_19DDC11D8(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16), a4);
}

uint64_t sub_19DDC1284(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_19DDC1294@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t (*a5)(uint64_t, char *, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v11 = sub_19DF72B80();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v16 = *a2;
  uint64_t v17 = *a3;
  uint64_t v18 = *a4;
  swift_unknownObjectRetain();
  sub_19DF72B90();
  uint64_t v19 = a5(v15, v14, v16, v17, v17 + v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t *v22 = v19;
  return result;
}

uint64_t sub_19DDC13D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  return sub_19DDC1294(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v5 + 16), a5);
}

uint64_t sub_19DDC13D8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_19DDC1414(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  id v12 = a2;
  swift_unknownObjectRetain();
  uint64_t v13 = v11(v12, a3, a4, a5, a6);
  swift_release();

  swift_unknownObjectRelease();
  return v13;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void (*NEFilterPacketProvider.handler.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = objc_msgSend(v1, sel_packetHandler);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_19DDC1910;
    *(void *)(v7 + 24) = v6;
    uint64_t v4 = (void *)swift_allocObject();
    v4[2] = sub_19DDC1920;
    v4[3] = v7;
    uint64_t v8 = sub_19DDC1280;
  }
  else
  {
    uint64_t v8 = 0;
  }
  v3[6] = v8;
  v3[7] = v4;
  return sub_19DDC15E0;
}

void sub_19DDC15E0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 48);
  uint64_t v4 = *(void *)(*(void *)a1 + 56);
  if (a2)
  {
    if (v3)
    {
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = v3;
      *(void *)(v5 + 24) = v4;
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = sub_19DDC191C;
      *(void *)(v6 + 24) = v5;
      v2[4] = sub_19DDC1410;
      v2[5] = v6;
      *uint64_t v2 = MEMORY[0x1E4F143A8];
      v2[1] = 1107296256;
      v2[2] = sub_19DDC1414;
      v2[3] = &block_descriptor_23;
      uint64_t v7 = _Block_copy(v2);
      swift_retain_n();
      swift_release();
    }
    else
    {
      uint64_t v7 = 0;
    }
    objc_msgSend((id)v2[8], sel_setPacketHandler_, v7);
    sub_19DDC1284(v3);
    _Block_release(v7);
    sub_19DDC1284(v2[6]);
  }
  else
  {
    if (v3)
    {
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = v3;
      *(void *)(v8 + 24) = v4;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = sub_19DDC191C;
      *(void *)(v9 + 24) = v8;
      v2[4] = sub_19DDC1410;
      v2[5] = v9;
      *uint64_t v2 = MEMORY[0x1E4F143A8];
      v2[1] = 1107296256;
      v2[2] = sub_19DDC1414;
      v2[3] = &block_descriptor_34;
      uint64_t v10 = _Block_copy(v2);
      swift_retain();
      swift_release();
    }
    else
    {
      uint64_t v10 = 0;
    }
    objc_msgSend((id)v2[8], sel_setPacketHandler_, v10);
    sub_19DDC1284(v3);
    _Block_release(v10);
  }

  free(v2);
}

uint64_t sub_19DDC181C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(v5 + 16);
  uint64_t v13 = a1;
  uint64_t v11 = a3;
  id v12 = a2;
  uint64_t v9 = a5;
  uint64_t v10 = a4;
  v6(&v8, &v13, &v12, &v11, &v10, &v9);
  return v8;
}

uint64_t sub_19DDC187C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_19DDC188C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, void *);
  uint64_t v8;
  void v9[2];
  uint64_t v10;
  uint64_t v11;

  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t *, void *))(v5 + 16);
  uint64_t v11 = a1;
  v9[1] = a5;
  uint64_t v10 = a3;
  v9[0] = a4;
  v6(&v8, &v11, a2, &v10, v9);
  return v8;
}

uint64_t NEAppProxyTCPFlow.remoteFlowEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v2, sel_remoteFlowEndpoint);
  sub_19DF72B60();
  uint64_t v8 = sub_19DF72B50();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v8);
  }
  __break(1u);
  return result;
}

uint64_t NEFilterSocketFlow.remoteFlowEndpoint.getter()
{
  return sub_19DDC0DB4((SEL *)&selRef_remoteFlowEndpoint);
}

uint64_t NEFilterSocketFlow.localFlowEndpoint.getter()
{
  return sub_19DDC0DB4((SEL *)&selRef_localFlowEndpoint);
}

void NEAppProxyUDPFlow.readDatagrams(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = sub_19DDC1EAC;
  v7[5] = v5;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  CFErrorRef v7[2] = sub_19DDC2110;
  v7[3] = &block_descriptor_0;
  uint64_t v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_readDatagramsAndFlowEndpointsWithCompletionHandler_, v6);
  _Block_release(v6);
}

size_t sub_19DDC1B3C(uint64_t (**a1)(char *, uint64_t, uint64_t), unint64_t a2, void (**a3)(char *, char *, uint64_t), char *a4, unint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_19DF72B50();
  uint64_t v33 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && a2)
  {
    if (a2 >> 62) {
      goto LABEL_23;
    }
    uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      uint64_t v17 = MEMORY[0x1E4FBC860];
      if (!v16)
      {
LABEL_20:
        uint64_t v25 = swift_bridgeObjectRetain();
        size_t v24 = sub_19DDC2F74(v25, v17);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      uint64_t v34 = MEMORY[0x1E4FBC860];
      size_t result = sub_19DDC2C58(0, v16 & ~(v16 >> 63), 0);
      if (v16 < 0) {
        break;
      }
      v26[1] = a1;
      unint64_t v27 = a3;
      unint64_t v28 = a5;
      unint64_t v29 = a4;
      a4 = 0;
      unint64_t v31 = a2;
      unint64_t v32 = a2 & 0xC000000000000001;
      uint64_t v17 = v34;
      a1 = (uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
      a3 = (void (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v30 = v15;
      while ((char *)v16 != a4)
      {
        if (v32) {
          MEMORY[0x19F3B5D10](a4, a2);
        }
        else {
          swift_unknownObjectRetain();
        }
        swift_unknownObjectRetain();
        sub_19DF72B60();
        size_t result = (*a1)(v12, 1, v13);
        if (result == 1) {
          goto LABEL_25;
        }
        uint64_t v19 = *a3;
        (*a3)(v15, v12, v13);
        swift_unknownObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v34 = v17;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_19DDC2C58(0, *(void *)(v17 + 16) + 1, 1);
          uint64_t v17 = v34;
        }
        unint64_t v22 = *(void *)(v17 + 16);
        unint64_t v21 = *(void *)(v17 + 24);
        a5 = v22 + 1;
        if (v22 >= v21 >> 1)
        {
          sub_19DDC2C58(v21 > 1, v22 + 1, 1);
          uint64_t v17 = v34;
        }
        ++a4;
        *(void *)(v17 + 16) = a5;
        unint64_t v23 = v17
            + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
            + *(void *)(v33 + 72) * v22;
        uint64_t v15 = v30;
        v19((char *)v23, v30, v13);
        uint64_t v34 = v17;
        a2 = v31;
        if ((char *)v16 == a4)
        {
          a4 = v29;
          a3 = v27;
          goto LABEL_20;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_19DF73060();
      swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_25:
    __break(1u);
  }
  else
  {
    size_t v24 = 0;
LABEL_21:
    ((void (*)(size_t, void (**)(char *, char *, uint64_t)))a4)(v24, a3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_19DDC1E74()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

size_t sub_19DDC1EAC(uint64_t (**a1)(char *, uint64_t, uint64_t), unint64_t a2, void (**a3)(char *, char *, uint64_t))
{
  return sub_19DDC1B3C(a1, a2, a3, *(char **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_19DDC1EB4(uint64_t a1)
{
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  uint64_t v3 = *(void *)(v30 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v30);
  uint64_t v6 = (void *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v4);
  unint64_t v29 = (char *)v25 - v7;
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    v25[1] = v1;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    sub_19DDC2C78(0, v8, 0);
    uint64_t v10 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    uint64_t v28 = *(void *)(v3 + 72);
    uint64_t v27 = sub_19DF72B50();
    uint64_t v11 = *(void *)(v27 - 8);
    id v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v25[2] = v11 + 16;
    uint64_t v26 = v12;
    uint64_t v13 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    do
    {
      uint64_t v14 = v30;
      uint64_t v15 = *(int *)(v30 + 48);
      uint64_t v16 = &v29[v15];
      uint64_t v17 = *v10;
      unint64_t v18 = v10[1];
      uint64_t v19 = v27;
      v26(&v29[v15], (char *)v10 + v15, v27);
      id v20 = (char *)v6 + *(int *)(v14 + 48);
      *uint64_t v6 = v17;
      v6[1] = v18;
      (*v13)(v20, v16, v19);
      sub_19DDBF5E0(v17, v18);
      sub_19DDBF5E0(v17, v18);
      sub_19DDC2884((uint64_t)v6);
      uint64_t v9 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_19DDC2C78(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v31;
      }
      unint64_t v22 = *(void *)(v9 + 16);
      unint64_t v21 = *(void *)(v9 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_19DDC2C78((char *)(v21 > 1), v22 + 1, 1);
        uint64_t v9 = v31;
      }
      uint64_t v10 = (uint64_t *)((char *)v10 + v28);
      *(void *)(v9 + 16) = v22 + 1;
      uint64_t v23 = v9 + 16 * v22;
      *(void *)(v23 + 32) = v17;
      *(void *)(v23 + 40) = v18;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_19DDC2110(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v7 = sub_19DF72FE0();
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v7 = 0;
  if (a3)
  {
LABEL_3:
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454340);
    uint64_t v5 = sub_19DF72FE0();
  }
LABEL_4:
  swift_retain();
  id v8 = a4;
  v6(v7, v5, a4);
  swift_release();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t NEAppProxyUDPFlow.readDatagrams()()
{
  *(void *)(v1 + 144) = v0;
  return MEMORY[0x1F4188298](sub_19DDC2214, 0, 0);
}

uint64_t sub_19DDC2214()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0;
  uint64_t v3 = v0 + 2;
  uint64_t v4 = v0 + 10;
  uint64_t v5 = v0 + 16;
  uint64_t v6 = (void *)v0[18];
  v1[2] = v2;
  v1[7] = v5;
  v1[3] = sub_19DDC23A4;
  uint64_t v7 = swift_continuation_init();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_19DDC2524;
  *(void *)(v9 + 24) = v8;
  v1[14] = sub_19DDC35B8;
  v1[15] = v9;
  v1[10] = MEMORY[0x1E4F143A8];
  v1[11] = 1107296256;
  v1[12] = sub_19DDC2110;
  v1[13] = &block_descriptor_10;
  uint64_t v10 = _Block_copy(v4);
  swift_retain();
  swift_release();
  objc_msgSend(v6, sel_readDatagramsAndFlowEndpointsWithCompletionHandler_, v10);
  _Block_release(v10);
  swift_release();
  return MEMORY[0x1F41881E8](v3);
}

uint64_t sub_19DDC23A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v0 + 8);
  return v3(v1, v2);
}

uint64_t sub_19DDC24A8(uint64_t a1, void *a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  id v6 = a2;
  uint64_t v7 = *(void **)(*(void *)(a3 + 64) + 40);
  *uint64_t v7 = a1;
  v7[1] = a2;

  return MEMORY[0x1F41881F8](a3);
}

uint64_t sub_19DDC2514()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19DDC2524(uint64_t a1, void *a2)
{
  return sub_19DDC24A8(a1, a2, *(void *)(v2 + 16));
}

void NEAppProxyUDPFlow.writeDatagrams(_:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (_OWORD *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (_OWORD *)((char *)&v25 - v10);
  uint64_t v12 = sub_19DDC1EB4(a1);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v25 = v12;
    uint64_t v26 = v3;
    aBlock[0] = MEMORY[0x1E4FBC860];
    sub_19DF73030();
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v15 = *(void *)(v6 + 72);
    while (1)
    {
      sub_19DDC281C(v14, (uint64_t)v11);
      uint64_t v16 = *(int *)(v5 + 48);
      uint64_t v17 = (char *)v9 + v16;
      unint64_t v18 = (char *)v11 + v16;
      _OWORD *v9 = *v11;
      uint64_t v19 = sub_19DF72B50();
      uint64_t v20 = *(void *)(v19 - 8);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      uint64_t v21 = sub_19DF72B40();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
      if (!v21) {
        break;
      }
      sub_19DDC2884((uint64_t)v11);
      sub_19DF73010();
      sub_19DF73040();
      sub_19DF73050();
      sub_19DF73020();
      v14 += v15;
      if (!--v13)
      {
        uint64_t v3 = v26;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    unint64_t v22 = (void *)sub_19DF72FD0();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454340);
    uint64_t v23 = (void *)sub_19DF72FD0();
    swift_bridgeObjectRelease();
    aBlock[4] = v27;
    aBlock[5] = v28;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_19DDC28E4;
    aBlock[3] = &block_descriptor_13;
    size_t v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_writeDatagrams_sentByFlowEndpoints_completionHandler_, v22, v23, v24);
    _Block_release(v24);
  }
}

uint64_t sub_19DDC281C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_19DDC2884(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_19DDC28E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t NEAppProxyUDPFlow.writeDatagrams(_:)(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return MEMORY[0x1F4188298](sub_19DDC2970, 0, 0);
}

uint64_t sub_19DDC2970()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[3] = sub_19DDC2A50;
  uint64_t v3 = swift_continuation_init();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  NEAppProxyUDPFlow.writeDatagrams(_:completionHandler:)(v2, (uint64_t)sub_19DDC2C04, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v1);
}

uint64_t sub_19DDC2A50()
{
  uint64_t v1 = *v0;
  if (*(void *)(*v0 + 48)) {
    swift_willThrow();
  }
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return v2();
}

uint64_t sub_19DDC2B58(void *a1, uint64_t a2)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454350);
    uint64_t v4 = swift_allocError();
    void *v5 = a1;
    id v6 = a1;
    return MEMORY[0x1F4188208](a2, v4);
  }
  else
  {
    return MEMORY[0x1F4188200](a2);
  }
}

uint64_t sub_19DDC2BF4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_19DDC2C04(void *a1)
{
  return sub_19DDC2B58(a1, *(void *)(v1 + 16));
}

uint64_t NEAppProxyUDPFlow.localFlowEndpoint.getter()
{
  id v1 = objc_msgSend(v0, sel_localFlowEndpoint);

  return sub_19DF72B60();
}

size_t sub_19DDC2C58(size_t a1, int64_t a2, char a3)
{
  size_t result = sub_19DDC2C98(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_19DDC2C78(char *a1, int64_t a2, char a3)
{
  size_t result = sub_19DDC2E6C(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t sub_19DDC2C98(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_1E9454370);
  uint64_t v10 = *(void *)(sub_19DF72B50() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_19DF72B50() - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *sub_19DDC2E6C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454358);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t sub_19DDC2F74(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  uint64_t v4 = *(char **)(v88 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v88);
  int64_t v7 = (unint64_t *)((char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  v77 = (uint64_t *)((char *)&v71 - v9);
  MEMORY[0x1F4188790](v8);
  uint64_t v78 = (uint64_t)&v71 - v10;
  unint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a2 + 16);
  if (v12 >= v11) {
    int64_t v13 = *(void *)(a1 + 16);
  }
  else {
    int64_t v13 = *(void *)(a2 + 16);
  }
  unint64_t v85 = *(void *)(a1 + 16);
  unint64_t v87 = v12;
  uint64_t v75 = a1;
  unint64_t v76 = v4;
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454368);
    uint64_t v14 = *((void *)v4 + 9);
    uint64_t v15 = v4[80];
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v84 = (char *)swift_allocObject();
    size_t result = _swift_stdlib_malloc_size(v84);
    if (!v14)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    int64_t v18 = result - v16;
    BOOL v19 = result - v16 == 0x8000000000000000 && v14 == -1;
    uint64_t v86 = (v15 + 32) & ~v15;
    if (v19) {
      goto LABEL_64;
    }
    uint64_t v73 = v15;
    uint64_t v74 = a2;
    uint64_t v20 = v18 / v14;
    int64_t v79 = v13;
    uint64_t v21 = v84;
    *((void *)v84 + 2) = v13;
    *((void *)v21 + 3) = 2 * (v18 / v14);
    size_t result = sub_19DF72B50();
    size_t v83 = result;
    uint64_t v22 = *(void *)(result - 8);
    if (v11)
    {
      uint64_t v23 = *(void *)(result - 8);
      uint64_t v15 = 0;
      uint64_t v82 = v74 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      uint64_t v72 = v20 & 0x7FFFFFFFFFFFFFFFLL;
      size_t v24 = (unint64_t *)(v75 + 40);
      int64_t v80 = v79 - 1;
      unint64_t v81 = (char *)(v22 + 16);
      uint64_t v25 = v84;
      uint64_t v4 = &v84[v14];
      while (v12 != v15)
      {
        unint64_t v11 = *(v24 - 1);
        unint64_t v12 = *v24;
        size_t v26 = v83;
        uint64_t v27 = v82 + *(void *)(v23 + 72) * v15;
        uint64_t v28 = (char *)v7 + *(int *)(v88 + 48);
        *int64_t v7 = v11;
        v7[1] = v12;
        (*(void (**)(char *, uint64_t, size_t))(v23 + 16))(v28, v27, v26);
        sub_19DDC3544((uint64_t)v7, (uint64_t)&v25[v16]);
        if (v80 == v15) {
          goto LABEL_16;
        }
        v24 += 2;
        size_t result = sub_19DDBF5E0(v11, v12);
        ++v15;
        v4 += v14;
        v25 += v14;
        uint64_t v16 = v86;
        unint64_t v12 = v87;
        if (v85 == v15) {
          goto LABEL_15;
        }
      }
      __break(1u);
      goto LABEL_56;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    a2 = v74;
    swift_bridgeObjectRetain();
    size_t result = sub_19DDBF5E0(v11, v12);
    uint64_t v29 = ~v15;
    uint64_t v30 = v73;
    unint64_t v31 = v29 + v72;
    unint64_t v11 = v85;
    uint64_t v32 = (uint64_t)&v4[v86];
    uint64_t v4 = v76;
    unint64_t v12 = v87;
    int64_t v13 = v79;
    if (v85 > v87)
    {
LABEL_19:
      if (v13 <= (uint64_t)v12) {
        unint64_t v34 = v12;
      }
      else {
        unint64_t v34 = v13;
      }
      uint64_t v82 = v30 | 7;
      size_t v83 = v34;
      uint64_t v35 = (unint64_t *)(v75 + 16 * v13 + 40);
      while (v11 != v13)
      {
        if (v12 == v13) {
          goto LABEL_50;
        }
        if (v83 == v13) {
          goto LABEL_57;
        }
        int64_t v36 = v13;
        uint64_t v38 = *(v35 - 1);
        unint64_t v37 = *v35;
        uint64_t v39 = sub_19DF72B50();
        uint64_t v40 = *(void *)(v39 - 8);
        CFErrorRef v41 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
        uint64_t v42 = a2 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
        uint64_t v43 = *(void *)(v40 + 72);
        int64_t v79 = v36;
        uint64_t v44 = v42 + v43 * v36;
        uint64_t v45 = (uint64_t)v77;
        uint64_t v46 = (char *)v77 + *(int *)(v88 + 48);
        uint64_t *v77 = v38;
        *(void *)(v45 + 8) = v37;
        v41(v46, v44, v39);
        size_t result = sub_19DDC3544(v45, v78);
        if (v31)
        {
          size_t result = sub_19DDBF5E0(v38, v37);
          uint64_t v47 = v84;
        }
        else
        {
          unint64_t v48 = v84;
          unint64_t v49 = *((void *)v84 + 3);
          if ((uint64_t)((v49 >> 1) + 0x4000000000000000) < 0) {
            goto LABEL_59;
          }
          unint64_t v50 = v4;
          uint64_t v51 = a2;
          int64_t v52 = v49 & 0xFFFFFFFFFFFFFFFELL;
          if (v52 <= 1) {
            uint64_t v53 = 1;
          }
          else {
            uint64_t v53 = v52;
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454368);
          uint64_t v54 = *((void *)v50 + 9);
          uint64_t v55 = v86;
          uint64_t v47 = (char *)swift_allocObject();
          size_t result = _swift_stdlib_malloc_size(v47);
          if (!v54) {
            goto LABEL_60;
          }
          int64_t v56 = result - v55;
          if (result - v55 == 0x8000000000000000 && v54 == -1) {
            goto LABEL_61;
          }
          uint64_t v58 = v56 / v54;
          *((void *)v47 + 2) = v53;
          *((void *)v47 + 3) = 2 * (v56 / v54);
          id v59 = &v47[v55];
          uint64_t v60 = *((void *)v48 + 2);
          uint64_t v61 = *((void *)v48 + 3) >> 1;
          uint64_t v62 = v61 * v54;
          uint64_t v63 = v48;
          uint64_t v32 = (uint64_t)&v47[v55 + v62];
          uint64_t v64 = v55;
          unint64_t v31 = (v58 & 0x7FFFFFFFFFFFFFFFLL) - v61;
          if (v60)
          {
            uint64_t v65 = &v63[v64];
            BOOL v66 = v47 >= v63;
            a2 = v51;
            if (v66 && v59 < &v65[v62])
            {
              unint64_t v81 = v65;
              sub_19DDBF5E0(v38, v37);
              uint64_t v4 = v76;
              if (v47 != v84) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            else
            {
              sub_19DDBF5E0(v38, v37);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v4 = v76;
            }
            *((void *)v84 + 2) = 0;
            size_t result = swift_release();
          }
          else
          {
            sub_19DDBF5E0(v38, v37);
            size_t result = swift_release();
            a2 = v51;
            uint64_t v4 = v76;
          }
          unint64_t v11 = v85;
        }
        BOOL v67 = __OFSUB__(v31--, 1);
        unint64_t v12 = v87;
        if (v67) {
          goto LABEL_58;
        }
        int64_t v13 = v79 + 1;
        size_t result = sub_19DDC3544(v78, v32);
        v32 += *((void *)v4 + 9);
        v35 += 2;
        uint64_t v84 = v47;
        if (v11 == v13) {
          goto LABEL_51;
        }
      }
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
  }
  else
  {
    uint64_t v30 = v4[80];
    unint64_t v33 = *(void *)(MEMORY[0x1E4FBC860] + 24);
    uint64_t v86 = (v30 + 32) & ~v30;
    uint64_t v84 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v32 = MEMORY[0x1E4FBC860] + v86;
    unint64_t v31 = v33 >> 1;
    swift_bridgeObjectRetain();
    size_t result = swift_bridgeObjectRetain();
    if (v11 > v12) {
      goto LABEL_19;
    }
  }
LABEL_50:
  uint64_t v47 = v84;
LABEL_51:
  swift_bridgeObjectRelease();
  size_t result = swift_bridgeObjectRelease();
  unint64_t v68 = *((void *)v47 + 3);
  if (v68 < 2) {
    return (size_t)v47;
  }
  unint64_t v69 = v68 >> 1;
  BOOL v67 = __OFSUB__(v69, v31);
  unint64_t v70 = v69 - v31;
  if (!v67)
  {
    *((void *)v47 + 2) = v70;
    return (size_t)v47;
  }
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t sub_19DDC3544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454338);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of NEAppProxyUDPFlowHandling.handleNewUDPFlow(_:initialRemoteFlowEndpoint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_19DDC35D8(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_19DF72B50();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v19 = v1;
  sub_19DDC388C();
  id v10 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454390);
  if (!swift_dynamicCast())
  {
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_19DDC38CC((uint64_t)v17);
    return -1;
  }
  sub_19DDC392C(v17, (uint64_t)v20);
  v16[1] = &unk_1EF0A5550;
  swift_dynamicCastObjCProtocolUnconditional();
  swift_unknownObjectRetain();
  sub_19DF72B60();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    uint64_t v12 = v21;
    uint64_t v13 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    char v14 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v13 + 8))(a1, v9, v12, v13);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = v14 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    return v15;
  }
  __break(1u);
  return result;
}

unint64_t sub_19DDC388C()
{
  unint64_t result = qword_1E9454388;
  if (!qword_1E9454388)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9454388);
  }
  return result;
}

uint64_t sub_19DDC38CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454398);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_19DDC392C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t NEAppProxyFlow.open(withLocalFlowEndpoint:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E9454360);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DDC05D8(a1, (uint64_t)v10, &qword_1E9454360);
  uint64_t v11 = sub_19DF72B50();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_19DDC063C((uint64_t)v10, &qword_1E9454360);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = sub_19DF72B40();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_19DDC28E4;
  aBlock[3] = &block_descriptor_1;
  char v14 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_openWithLocalFlowEndpoint_completionHandler_, v13, v14);
  _Block_release(v14);
  return swift_unknownObjectRelease();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t NEAppProxyFlow.open(withLocalFlowEndpoint:)(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return MEMORY[0x1F4188298](sub_19DDC3BE4, 0, 0);
}

uint64_t sub_19DDC3BE4()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[10];
  v0[2] = v0;
  v0[3] = sub_19DDC2A50;
  uint64_t v3 = swift_continuation_init();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  NEAppProxyFlow.open(withLocalFlowEndpoint:completionHandler:)(v2, (uint64_t)sub_19DDC2C04, v4);
  swift_release();
  return MEMORY[0x1F41881E8](v1);
}

uint64_t sub_19DDC3CC4()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t NEAppProxyFlow.setMetadata(on:)()
{
  objc_msgSend(v0, sel_setMetadata_, sub_19DF72BA0());

  return swift_unknownObjectRelease();
}

uint64_t NEAppProxyFlow.interface.getter@<X0>(uint64_t a1@<X8>)
{
  if (objc_msgSend(v1, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19DF72B90();
    uint64_t v3 = sub_19DF72B80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v5 = sub_19DF72B80();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    return v6(a1, 1, 1, v5);
  }
}

uint64_t sub_19DDC3E1C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  if (objc_msgSend(*a1, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19DF72B90();
    uint64_t v3 = sub_19DF72B80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v5 = sub_19DF72B80();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    return v6(a2, 1, 1, v5);
  }
}

uint64_t sub_19DDC3F10(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94543A8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DDC05D8(a1, (uint64_t)v4, &qword_1E94543A8);
  return NEAppProxyFlow.interface.setter((uint64_t)v4);
}

uint64_t NEAppProxyFlow.interface.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1E94543A8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_19DF72B80();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_19DDC05D8(a1, (uint64_t)v6, &qword_1E94543A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_19DDC063C((uint64_t)v6, &qword_1E94543A8);
    objc_msgSend(v2, sel_setNetworkInterface_, 0);
    return sub_19DDC063C(a1, &qword_1E94543A8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    uint64_t result = sub_19DF72B70();
    if (result)
    {
      objc_msgSend(v2, sel_setNetworkInterface_, result);
      swift_unknownObjectRelease();
      sub_19DDC063C(a1, &qword_1E94543A8);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void (*NEAppProxyFlow.interface.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v2 = v1;
  *a1 = v1;
  size_t v4 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1E94543A8) - 8) + 64);
  a1[1] = malloc(v4);
  uint64_t v5 = malloc(v4);
  a1[2] = v5;
  if (objc_msgSend(v2, sel_networkInterface))
  {
    swift_unknownObjectRetain();
    sub_19DF72B90();
    uint64_t v6 = sub_19DF72B80();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 0, 1, v6);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v7 = sub_19DF72B80();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  return sub_19DDC42CC;
}

void sub_19DDC42CC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_19DDC05D8(*(void *)(a1 + 16), (uint64_t)v2, &qword_1E94543A8);
    NEAppProxyFlow.interface.setter((uint64_t)v2);
    sub_19DDC063C((uint64_t)v3, &qword_1E94543A8);
  }
  else
  {
    NEAppProxyFlow.interface.setter(*(void *)(a1 + 16));
  }
  free(v3);

  free(v2);
}

uint64_t NEPacketTunnelProvider.virtualInterface.getter@<X0>(uint64_t a1@<X8>)
{
  if (objc_msgSend(v1, sel_virtualInterface))
  {
    swift_unknownObjectRetain();
    sub_19DF72B90();
    uint64_t v3 = sub_19DF72B80();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v5 = sub_19DF72B80();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    return v6(a1, 1, 1, v5);
  }
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  size_t v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_68;
  }
  uint64_t v5 = &v4[v3];
  uint64_t v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    uint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      char v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0;
            }
LABEL_34:
            uint64_t result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          uint64_t v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28) {
            goto LABEL_69;
          }
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_68;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    uint64_t v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERDecodeItemPartialBuffer(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  size_t v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_54;
  }
  uint64_t v5 = &v4[v3];
  uint64_t v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    uint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_55;
      }
      char v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        BOOL v17 = v16 < v15 && a3 == 0;
        unint64_t v18 = (unint64_t)(v12 + 1);
        if (v17) {
          return 3;
        }
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL)) {
          return 7;
        }
        if (v18 <= v18 + v15)
        {
          uint64_t result = 0;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }
        goto LABEL_55;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_55;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_56;
        }
        unsigned int v23 = *v14++;
        unint64_t v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (v15 <= v22) {
            char v24 = 1;
          }
          else {
            char v24 = a3;
          }
          uint64_t result = 3;
          if (v15 >= 0x80 && (v24 & 1) != 0) {
            goto LABEL_28;
          }
          return result;
        }
      }
    }
LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_54;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_55;
    }
    uint64_t v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, unsigned char *a3)
{
  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(void *)(result + 8)) {
    return 3;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      unint64_t v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          uint64_t result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t DERParseBoolean(unsigned __int8 **a1, BOOL *a2)
{
  if (a1[1] != (unsigned __int8 *)1) {
    return 3;
  }
  int v2 = **a1;
  if (v2 != 255 && v2 != 0) {
    return 3;
  }
  uint64_t result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t DERParseBooleanWithDefault(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned int v3 = a1[1];
  if (!v3) {
    goto LABEL_9;
  }
  if (v3 == (unsigned __int8 *)1)
  {
    int v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      uint64_t result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

uint64_t DERParseInteger(char **a1, _DWORD *a2)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = DERParseInteger64(a1, v4);
  if (!result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      uint64_t result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t DERParseInteger64(char **a1, unint64_t *a2)
{
  unint64_t v2 = (unint64_t)a1[1];
  if (!v2) {
    return 3;
  }
  unsigned int v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0) {
    return 3;
  }
  if (**a1)
  {
    if (v2 > 8) {
      return 7;
    }
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0) {
      return 3;
    }
    if (v2 > 9) {
      return 7;
    }
  }
LABEL_10:
  unint64_t v5 = 0;
  do
  {
    unsigned int v6 = *v3++;
    unint64_t v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t DERDecodeSeqInit(uint64_t a1, void *a2, void *a3)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  memset(v8, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v8, 0);
  if (!result)
  {
    unint64_t v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        unint64_t v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          uint64_t result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *DERDecodeSeqContentInit(unint64_t *result, unint64_t *a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    unint64_t v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  v12[3] = *MEMORY[0x1E4F143B8];
  memset(v12, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!result)
  {
    if (v12[0] == 0x2000000000000010) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v32 = 0;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    uint64_t v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if (result) {
        break;
      }
      if (a2 <= v13) {
        return 2;
      }
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3) {
          goto LABEL_58;
        }
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24 * v13 + 8)) {
          break;
        }
        uint64_t result = 2;
        if (v18)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1)) {
            continue;
          }
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4) {
          goto LABEL_59;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }
    if (result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        BOOL v25 = (__int16 *)(a3 + 24 * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

unint64_t *DERParseSequenceContent(unint64_t *result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return (unint64_t *)DERParseSequenceContentToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  v4[3] = *MEMORY[0x1E4F143B8];
  memset(v4, 170, 24);
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v4, 0);
  if (!result)
  {
    if (v4[0] - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL) {
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }
  unint64_t v4 = v2 + v3;
  if (v2 > v4) {
    goto LABEL_13;
  }
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  char v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if (result) {
      break;
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if (result) {
      break;
    }
    if (v7) {
      return 0;
    }
  }
  if (result <= 1) {
    return 0;
  }
  else {
    return result;
  }
}

BOOL DEROidCompare(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    size_t v4 = *(void *)(a1 + 8);
    return v4 == *(void *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }
  return result;
}

void sub_19DDC8148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_19DDC95E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDC9DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t __Block_byref_object_copy__111(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__112(uint64_t a1)
{
}

void sub_19DDCA340(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_19DDCB634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t __Block_byref_object_copy__169(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__170(uint64_t a1)
{
}

void sub_19DDCC318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDD0D00(_Unwind_Exception *a1)
{
}

id setLocalCertificate(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    if (isa_nsdata(v1))
    {
      id v3 = v2;
      goto LABEL_8;
    }
    size_t v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 138412290;
      id v8 = (id)objc_opt_class();
      id v6 = v8;
      _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "setLocalCertificate: unsupported data type %@.", (uint8_t *)&v7, 0xCu);
    }
  }
  id v3 = 0;
LABEL_8:

  return v3;
}

uint64_t ingestIKEv2Dict(void *a1, void *a2, void *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  int v7 = a3;
  id v8 = v7;
  if (v6)
  {
    if (v7)
    {
      uint64_t v9 = [v6 objectForKeyedSubscript:@"DeadPeerDetectionRate"];
      int v10 = isa_nsstring(v9);

      if (!v10) {
        goto LABEL_19;
      }
      unint64_t v11 = [v6 objectForKeyedSubscript:@"DeadPeerDetectionRate"];
      if ([v11 isEqualToString:@"None"])
      {
        uint64_t v12 = 0;
      }
      else if ([v11 isEqualToString:@"Low"])
      {
        uint64_t v12 = 1;
      }
      else if ([v11 isEqualToString:@"Medium"])
      {
        uint64_t v12 = 2;
      }
      else
      {
        if (![v11 isEqualToString:@"High"])
        {
LABEL_18:

LABEL_19:
          unint64_t v15 = [v6 objectForKeyedSubscript:@"ServerCertificateIssuerCommonName"];
          [v8 setServerCertificateIssuerCommonName:v15];

          unint64_t v16 = [v6 objectForKeyedSubscript:@"ServerCertificateCommonName"];
          [v8 setServerCertificateCommonName:v16];

          unsigned __int16 v17 = [v6 objectForKeyedSubscript:@"IKESecurityAssociationParameters"];
          int v18 = isa_nsdictionary(v17);

          if (v18)
          {
            unint64_t v19 = [v6 objectForKeyedSubscript:@"IKESecurityAssociationParameters"];
            uint64_t v20 = [v8 IKESecurityAssociationParameters];
            ingestIKEv2SAParameters(v19, v20);
          }
          uint64_t v21 = [v6 objectForKeyedSubscript:@"ChildSecurityAssociationParameters"];
          int v22 = isa_nsdictionary(v21);

          if (v22)
          {
            uint64_t v23 = [v6 objectForKeyedSubscript:@"ChildSecurityAssociationParameters"];
            unint64_t v24 = [v8 childSecurityAssociationParameters];
            ingestIKEv2SAParameters(v23, v24);
          }
          BOOL v25 = [v6 objectForKeyedSubscript:@"CertificateType"];
          int v26 = isa_nsstring(v25);

          if (!v26)
          {
LABEL_40:
            uint64_t v29 = [v6 objectForKeyedSubscript:@"UseConfigurationAttributeInternalIPSubnet"];
            int v30 = isa_nsnumber(v29);

            if (v30)
            {
              unint64_t v31 = [v6 objectForKeyedSubscript:@"UseConfigurationAttributeInternalIPSubnet"];
              objc_msgSend(v8, "setUseConfigurationAttributeInternalIPSubnet:", objc_msgSend(v31, "BOOLValue"));
            }
            unint64_t v32 = [v6 objectForKeyedSubscript:@"DisableMOBIKE"];
            int v33 = isa_nsnumber(v32);

            if (v33)
            {
              uint64_t v34 = [v6 objectForKeyedSubscript:@"DisableMOBIKE"];
              objc_msgSend(v8, "setDisableMOBIKE:", objc_msgSend(v34, "BOOLValue"));
            }
            uint64_t v35 = [v6 objectForKeyedSubscript:@"DisableRedirect"];
            int v36 = isa_nsnumber(v35);

            if (v36)
            {
              unint64_t v37 = [v6 objectForKeyedSubscript:@"DisableRedirect"];
              objc_msgSend(v8, "setDisableRedirect:", objc_msgSend(v37, "BOOLValue"));
            }
            uint64_t v38 = [v6 objectForKeyedSubscript:@"EnablePFS"];
            int v39 = isa_nsnumber(v38);

            if (v39)
            {
              uint64_t v40 = [v6 objectForKeyedSubscript:@"EnablePFS"];
              objc_msgSend(v8, "setEnablePFS:", objc_msgSend(v40, "BOOLValue"));
            }
            CFErrorRef v41 = [v6 objectForKeyedSubscript:@"NATKeepAliveOffloadEnable"];
            if (isa_nsnumber(v41))
            {
              uint64_t v42 = [v6 objectForKeyedSubscript:@"NATKeepAliveOffloadEnable"];
              char v43 = [v42 BOOLValue];

              if ((v43 & 1) == 0) {
                [v8 setNatKeepAliveOffloadEnable:1];
              }
            }
            else
            {
            }
            if ([v8 natKeepAliveOffloadEnable] == 2)
            {
              uint64_t v44 = [v6 objectForKeyedSubscript:@"NATKeepAliveInterval"];
              if (!isa_nsnumber(v44))
              {
LABEL_56:

                goto LABEL_57;
              }
              uint64_t v45 = [v6 objectForKeyedSubscript:@"NATKeepAliveInterval"];
              int v46 = [v45 intValue];

              if (v46 >= 20)
              {
                uint64_t v44 = [v6 objectForKeyedSubscript:@"NATKeepAliveInterval"];
                objc_msgSend(v8, "setNatKeepAliveOffloadInterval:", objc_msgSend(v44, "intValue"));
                goto LABEL_56;
              }
            }
LABEL_57:
            uint64_t v47 = [v6 objectForKeyedSubscript:@"EnableCertificateRevocationCheck"];
            int v48 = isa_nsnumber(v47);

            if (v48)
            {
              unint64_t v49 = [v6 objectForKeyedSubscript:@"EnableCertificateRevocationCheck"];
              objc_msgSend(v8, "setEnableRevocationCheck:", objc_msgSend(v49, "BOOLValue"));

              if ([v8 enableRevocationCheck])
              {
                unint64_t v50 = [v6 objectForKeyedSubscript:@"StrictCertificateRevocationCheck"];
                int v51 = isa_nsnumber(v50);

                if (v51)
                {
                  int64_t v52 = [v6 objectForKeyedSubscript:@"StrictCertificateRevocationCheck"];
                  objc_msgSend(v8, "setStrictRevocationCheck:", objc_msgSend(v52, "BOOLValue"));
                }
              }
            }
            uint64_t v53 = [v6 objectForKeyedSubscript:@"TLSMinimumVersion"];
            int v54 = isa_nsstring(v53);

            if (!v54)
            {
LABEL_70:
              unint64_t v57 = [v6 objectForKeyedSubscript:@"TLSMaximumVersion"];
              int v58 = isa_nsstring(v57);

              if (!v58) {
                goto LABEL_79;
              }
              id v59 = [v6 objectForKeyedSubscript:@"TLSMaximumVersion"];
              if ([v59 isEqualToString:@"1.0"])
              {
                uint64_t v60 = 1;
              }
              else if ([v59 isEqualToString:@"1.1"])
              {
                uint64_t v60 = 2;
              }
              else
              {
                if (![v59 isEqualToString:@"1.2"])
                {
LABEL_78:

LABEL_79:
                  uint64_t v61 = [v6 objectForKeyedSubscript:@"MTU"];
                  int v62 = isa_nsnumber(v61);

                  if (v62)
                  {
                    unsigned __int16 v13 = [v6 objectForKeyedSubscript:@"MTU"];
                    if ((unint64_t)[v13 unsignedIntegerValue] < 0x3E8
                      || (unint64_t)[v13 unsignedIntegerValue] >= 0x5DD)
                    {
                      uint64_t v63 = ne_log_obj();
                      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                      {
                        v84[0] = 67109632;
                        v84[1] = [v13 intValue];
                        __int16 v85 = 1024;
                        int v86 = 1000;
                        __int16 v87 = 1024;
                        int v88 = 1500;
                        _os_log_error_impl(&dword_19DDAF000, v63, OS_LOG_TYPE_ERROR, "invalid mtu size %d, should be between %d and %d", (uint8_t *)v84, 0x14u);
                      }

                      goto LABEL_85;
                    }
                    objc_msgSend(v8, "setMtu:", -[NSObject unsignedIntegerValue](v13, "unsignedIntegerValue"));
                  }
                  uint64_t v65 = [v6 objectForKeyedSubscript:@"ExtensibleSSOProvider"];
                  int v66 = isa_nsstring(v65);

                  if (v66)
                  {
                    BOOL v67 = [v6 objectForKeyedSubscript:@"ExtensibleSSOProvider"];
                    [v8 setExtensibleSSOProvider:v67];
                  }
                  unint64_t v68 = [v6 objectForKeyedSubscript:@"PPKIdentifier"];
                  if (isa_nsstring(v68))
                  {
                    unint64_t v69 = [v6 objectForKeyedSubscript:@"PPK"];
                    int v70 = isa_nsdata(v69);

                    if (!v70)
                    {
LABEL_99:
                      uint64_t v64 = 1;
                      goto LABEL_100;
                    }
                    unint64_t v68 = objc_alloc_init(NEVPNIKEv2PPKConfiguration);
                    uint64_t v71 = [NEKeychainItem alloc];
                    uint64_t v72 = [v6 objectForKeyedSubscript:@"PPK"];
                    uint64_t v73 = v8[10];
                    id v75 = objc_getProperty(v8, v74, 88, 1);
                    v77 = [(NEKeychainItem *)v71 initWithData:v72 domain:v73 accessGroup:v75];
                    if (v68) {
                      objc_setProperty_atomic_copy(v68, v76, v77, 32);
                    }

                    int64_t v79 = [v6 objectForKeyedSubscript:@"PPKIdentifier"];
                    if (v68) {
                      objc_setProperty_atomic_copy(v68, v78, v79, 16);
                    }

                    int64_t v80 = [v6 objectForKeyedSubscript:@"PPKMandatory"];
                    int v81 = isa_nsnumber(v80);

                    if (v81)
                    {
                      uint64_t v82 = [v6 objectForKeyedSubscript:@"PPKMandatory"];
                      -[NEVPNIKEv2PPKConfiguration setIsMandatory:](v68, "setIsMandatory:", [v82 BOOLValue]);
                    }
                    [v8 setPpkConfiguration:v68];
                  }

                  goto LABEL_99;
                }
                uint64_t v60 = 3;
              }
              [v8 setMaximumTLSVersion:v60];
              goto LABEL_78;
            }
            uint64_t v55 = [v6 objectForKeyedSubscript:@"TLSMinimumVersion"];
            if ([v55 isEqualToString:@"1.0"])
            {
              uint64_t v56 = 1;
            }
            else if ([v55 isEqualToString:@"1.1"])
            {
              uint64_t v56 = 2;
            }
            else
            {
              if (![v55 isEqualToString:@"1.2"])
              {
LABEL_69:

                goto LABEL_70;
              }
              uint64_t v56 = 3;
            }
            [v8 setMinimumTLSVersion:v56];
            goto LABEL_69;
          }
          __int16 v27 = [v6 objectForKeyedSubscript:@"CertificateType"];
          if ([v27 isEqualToString:@"RSA"])
          {
            uint64_t v28 = 1;
          }
          else if ([v27 isEqualToString:@"ECDSA256"])
          {
            uint64_t v28 = 2;
          }
          else if ([v27 isEqualToString:@"ECDSA384"])
          {
            uint64_t v28 = 3;
          }
          else if ([v27 isEqualToString:@"ECDSA521"])
          {
            uint64_t v28 = 4;
          }
          else if ([v27 isEqualToString:@"Ed25519"])
          {
            uint64_t v28 = 5;
          }
          else if ([v27 isEqualToString:@"Ed448"])
          {
            uint64_t v28 = 7;
          }
          else
          {
            if (![v27 isEqualToString:@"RSA-PSS"])
            {
LABEL_39:

              goto LABEL_40;
            }
            uint64_t v28 = 6;
          }
          [v8 setCertificateType:v28];
          goto LABEL_39;
        }
        uint64_t v12 = 3;
      }
      [v8 setDeadPeerDetectionRate:v12];
      goto LABEL_18;
    }
    unsigned __int16 v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v84[0]) = 0;
      unint64_t v14 = "ingestIKEv2Dict: uninitialized protocol";
      goto LABEL_10;
    }
  }
  else
  {
    unsigned __int16 v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v84[0]) = 0;
      unint64_t v14 = "ingestIKEv2Dict: empty dictionary";
LABEL_10:
      _os_log_error_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)v84, 2u);
    }
  }
LABEL_85:

  uint64_t v64 = 0;
LABEL_100:

  return v64;
}

void ingestIKEv2SAParameters(void *a1, void *a2)
{
  id v22 = a1;
  id v3 = a2;
  size_t v4 = [v22 objectForKeyedSubscript:@"EncryptionAlgorithm"];
  int v5 = isa_nsstring(v4);

  if (v5)
  {
    id v6 = [v22 objectForKeyedSubscript:@"EncryptionAlgorithm"];
    if ([v6 isEqualToString:@"DES"])
    {
      uint64_t v7 = 1;
    }
    else if ([v6 isEqualToString:@"3DES"])
    {
      uint64_t v7 = 2;
    }
    else if ([v6 isEqualToString:@"AES-128"])
    {
      uint64_t v7 = 3;
    }
    else if ([v6 isEqualToString:@"AES-256"])
    {
      uint64_t v7 = 4;
    }
    else if ([v6 isEqualToString:@"AES-128-GCM"])
    {
      uint64_t v7 = 5;
    }
    else if ([v6 isEqualToString:@"AES-256-GCM"])
    {
      uint64_t v7 = 6;
    }
    else
    {
      if (![v6 isEqualToString:@"ChaCha20Poly1305"])
      {
LABEL_17:

        goto LABEL_18;
      }
      uint64_t v7 = 7;
    }
    [v3 setEncryptionAlgorithm:v7];
    goto LABEL_17;
  }
LABEL_18:
  id v8 = [v22 objectForKeyedSubscript:@"IntegrityAlgorithm"];
  int v9 = isa_nsstring(v8);

  if (!v9) {
    goto LABEL_31;
  }
  int v10 = [v22 objectForKeyedSubscript:@"IntegrityAlgorithm"];
  if ([v10 isEqualToString:@"SHA1-96"])
  {
    uint64_t v11 = 1;
LABEL_29:
    [v3 setIntegrityAlgorithm:v11];
    goto LABEL_30;
  }
  if ([v10 isEqualToString:@"SHA1-160"])
  {
    uint64_t v11 = 2;
    goto LABEL_29;
  }
  if ([v10 isEqualToString:@"SHA2-256"])
  {
    uint64_t v11 = 3;
    goto LABEL_29;
  }
  if ([v10 isEqualToString:@"SHA2-384"])
  {
    uint64_t v11 = 4;
    goto LABEL_29;
  }
  if ([v10 isEqualToString:@"SHA2-512"])
  {
    uint64_t v11 = 5;
    goto LABEL_29;
  }
LABEL_30:

LABEL_31:
  uint64_t v12 = [v22 objectForKeyedSubscript:@"DiffieHellmanGroup"];
  int v13 = isa_nsnumber(v12);

  if (v13)
  {
    unint64_t v14 = [v22 objectForKeyedSubscript:@"DiffieHellmanGroup"];
    objc_msgSend(v3, "setDiffieHellmanGroup:", (int)objc_msgSend(v14, "intValue"));
  }
  unint64_t v15 = [v22 objectForKeyedSubscript:@"AdditionalKeyExchangeMethods"];
  int v16 = isa_nsarray(v15);

  if (v16)
  {
    int v18 = [v22 objectForKeyedSubscript:@"AdditionalKeyExchangeMethods"];
    if (v3) {
      objc_setProperty_atomic(v3, v17, v18, 40);
    }
  }
  unint64_t v19 = [v22 objectForKeyedSubscript:@"LifeTimeInMinutes"];
  int v20 = isa_nsnumber(v19);

  if (v20)
  {
    uint64_t v21 = [v22 objectForKeyedSubscript:@"LifeTimeInMinutes"];
    objc_msgSend(v3, "setLifetimeMinutes:", objc_msgSend(v21, "intValue"));
  }
}

CFStringRef copyNextName(CFStringRef theString)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @" ");
  if (ArrayBySeparatingStrings)
  {
    CFArrayRef v3 = ArrayBySeparatingStrings;
    MutableCopy = CFArrayCreateMutableCopy(0, 0, ArrayBySeparatingStrings);
    CFRelease(v3);
  }
  else
  {
    MutableCopy = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(MutableCopy, theString);
  }
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count < 2
    || (CFIndex v6 = Count - 1,
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, Count - 1),
        SInt32 IntValue = CFStringGetIntValue(ValueAtIndex),
        IntValue < 1))
  {
    uint64_t v9 = 2;
  }
  else
  {
    uint64_t v9 = (IntValue + 1);
    CFArrayRemoveValueAtIndex(MutableCopy, v6);
  }
  CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"%d", v9);
  CFArrayAppendValue(MutableCopy, v10);
  CFRelease(v10);
  CFStringRef v11 = CFStringCreateByCombiningStrings(0, MutableCopy, @" ");
  CFRelease(MutableCopy);
  return v11;
}

id getWriterSemaphore()
{
  if (getWriterSemaphore_sema_init != -1) {
    dispatch_once(&getWriterSemaphore_sema_init, &__block_literal_global_388);
  }
  uint64_t v0 = (void *)getWriterSemaphore_semaphore;

  return v0;
}

uint64_t __getWriterSemaphore_block_invoke()
{
  getWriterSemaphore_semaphore = (uint64_t)dispatch_semaphore_create(1);

  return MEMORY[0x1F41817F8]();
}

void sub_19DDEF7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_19DDF2448(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF24CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF2564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DDF25E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF2688(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF271C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF2A18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NEDNSProxyMapError(void *a1)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  unint64_t v2 = v1;
  if (v1)
  {
    CFArrayRef v3 = [v1 domain];
    int v4 = [v3 isEqual:@"NEConfigurationErrorDomain"];

    if (v4)
    {
      switch([v2 code])
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 10:
        case 11:
        case 12:
        case 20:
        case 21:
          int v5 = [v2 localizedDescription];
          goto LABEL_7;
        case 5:
          int v5 = [v2 localizedDescription];
          uint64_t v7 = 3;
          goto LABEL_8;
        case 9:
          int v5 = ne_log_obj();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_DEFAULT, "The configuration was not saved because it was unchanged from the previously saved version", buf, 2u);
          }
          CFIndex v6 = 0;
          break;
        default:
          CFStringRef v11 = NSString;
          uint64_t v12 = [v2 localizedDescription];
          int v5 = [v11 stringWithFormat:@"Unknown: %@", v12];

          goto LABEL_7;
      }
    }
    else
    {
      int v5 = @"Unknown.";
LABEL_7:
      uint64_t v7 = 1;
LABEL_8:
      id v8 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v14 = *MEMORY[0x1E4F28568];
      v15[0] = v5;
      uint64_t v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v15 forKeys:&v14 count:1];
      CFIndex v6 = [v8 errorWithDomain:@"NEDNSProxyErrorDomain" code:v7 userInfo:v9];
    }
  }
  else
  {
    CFIndex v6 = 0;
  }

  return v6;
}

void sub_19DDF3158(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF3500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF3764(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF405C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

void sub_19DDF45A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDF4688(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19DDF75B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDFA208(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19DDFA964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDFCB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDFD020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDFDDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DDFE560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_19DDFE730(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DDFE7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DDFE90C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE00930(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE00B54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE00CC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE00E88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE01060(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE01120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DE01448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  objc_sync_exit(v14);
  _Unwind_Resume(a1);
}

void sub_19DE01A20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE03874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_19DE0BE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DE0CD10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE0CF20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE0D0E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE0D1E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE0D314(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DE137C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13964(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE139E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DE13B00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DE13C18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13CBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE13D50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE14168(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NEFilterMapError(void *a1)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = [v1 domain];
  int v3 = [v2 isEqual:@"NEConfigurationErrorDomain"];

  if (v3)
  {
    switch([v1 code])
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 7:
        int v4 = [v1 localizedDescription];
        uint64_t v5 = 1;
        goto LABEL_7;
      case 5:
        int v4 = [v1 localizedDescription];
        uint64_t v5 = 3;
        goto LABEL_7;
      case 6:
      case 8:
      case 11:
      case 12:
      case 20:
        int v4 = [v1 localizedDescription];
        goto LABEL_6;
      case 9:
        int v4 = ne_log_obj();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_DEFAULT, "The configuration was not saved because it was unchanged from the previously saved version", buf, 2u);
        }
        id v8 = 0;
        break;
      case 10:
      case 21:
        int v4 = [v1 localizedDescription];
        uint64_t v5 = 5;
        goto LABEL_7;
      default:
        CFStringRef v10 = NSString;
        CFStringRef v11 = [v1 localizedDescription];
        int v4 = [v10 stringWithFormat:@"Unknown: %@", v11];

        goto LABEL_6;
    }
  }
  else
  {
    int v4 = @"Unknown.";
LABEL_6:
    uint64_t v5 = 6;
LABEL_7:
    CFIndex v6 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v13 = *MEMORY[0x1E4F28568];
    v14[0] = v4;
    uint64_t v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v14 forKeys:&v13 count:1];
    id v8 = [v6 errorWithDomain:@"NEFilterErrorDomain" code:v5 userInfo:v7];
  }

  return v8;
}

void sub_19DE14894(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE14C10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE14E88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE159E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DE163AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DE1648C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19DE1C704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DE202B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE20520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE212CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 128));
  _Unwind_Resume(a1);
}

void sub_19DE21D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DE22EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE22F88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23028(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE230C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23178(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23220(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE232D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23438(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE234E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DE23618(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23ABC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE23E84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE24230(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE245A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6807(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6808(uint64_t a1)
{
}

void sub_19DE24C84(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE24F38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DE25BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 176), 8);
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_19DE26BC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_19DE275C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id createHotspotNetworkArray(const __CFArray *a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v4 = Count;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      id v7 = -[NEHotspotNetwork initWithNetwork:]([NEHotspotNetwork alloc], ValueAtIndex);
      [v2 addObject:v7];
    }
  }

  return v2;
}

__CFString *NEIKEv2DigitalSignatureAlgorithmCreateString(unint64_t a1)
{
  if (a1 >= 0xC) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown[%lld]", a1);
  }
  else {
    return off_1E59900F8[a1];
  }
}

__CFString *NEIKEv2SecurePasswordMethodCreateString(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  BOOL result = @"Invalid";
  switch(v1)
  {
    case 0:
      BOOL result = @"Placeholder";
      break;
    case 1:
      return result;
    case 2:
      BOOL result = @"PACE";
      break;
    case 3:
      BOOL result = @"AugPAKE";
      break;
    case 4:
      BOOL result = @"SecurePSK";
      break;
    default:
      if (@"Invalid" == (__CFString *)11001) {
        BOOL result = @"SPAKE2Plus";
      }
      else {
        BOOL result = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown[%lld]", @"Invalid");
      }
      break;
  }
  return result;
}

__CFString *NEIKEv2AuthenticationMethodCreateString(uint64_t a1)
{
  BOOL result = @"None";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      BOOL result = @"RSASignature";
      break;
    case 2:
      BOOL result = @"SharedKey";
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      goto LABEL_5;
    case 9:
      BOOL result = @"ECDSA256";
      break;
    case 10:
      BOOL result = @"ECDSA384";
      break;
    case 11:
      BOOL result = @"ECDSA521";
      break;
    case 12:
      BOOL result = @"GenericSecurePassword";
      break;
    case 13:
      BOOL result = @"NULL";
      break;
    case 14:
      BOOL result = @"DigitalSignature";
      break;
    default:
      if (a1 == 245) {
        BOOL result = @"RSAPSS";
      }
      else {
LABEL_5:
      }
        BOOL result = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown[%lld]", a1);
      break;
  }
  return result;
}

__CFString *NEIKEv2EncryptionTypeCreateString(unint64_t a1)
{
  if (a1 >= 0xA) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown[%lld]", a1);
  }
  else {
    return off_1E5990298[a1];
  }
}

__CFString *NEIKEv2EncryptionWireTypeCreateString(unint64_t a1)
{
  if (a1 >= 0x20) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown[%lld]", a1);
  }
  else {
    return off_1E5990198[a1];
  }
}

__CFString *NEIKEv2CreateChildSAModeString(unint64_t a1)
{
  if (a1 >= 3) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    return off_1E59900E0[a1];
  }
}

uint64_t NEIKEv2CreateErrorInternal(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    CFStringRef v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    CFStringRef v11 = (void *)[[NSString alloc] initWithFormat:@"Internal: %@", v10];
    uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(1, v11);
  }
  else
  {
    uint64_t v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "NEIKEv2CreateErrorInternal";
      _os_log_fault_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    uint64_t ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorWithDescription(uint64_t a1, void *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc(MEMORY[0x1E4F28C58]);
  uint64_t v8 = *MEMORY[0x1E4F28568];
  v9[0] = v3;
  uint64_t v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v9 forKeys:&v8 count:1];
  uint64_t v6 = [v4 initWithDomain:@"NEIKEv2ErrorDomain" code:a1 userInfo:v5];

  if (!v6) {
    abort();
  }

  return v6;
}

__CFString *NEIKEv2AttributeTypeCreateString(uint64_t a1)
{
  BOOL result = @"Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      BOOL result = @"InternalIP4Address";
      break;
    case 2:
      BOOL result = @"InternalIP4Netmask";
      break;
    case 3:
      BOOL result = @"InternalIP4DNS";
      break;
    case 4:
      BOOL result = @"InternalIP4NBNS";
      break;
    case 5:
      BOOL result = @"InternalAddressExpiry";
      break;
    case 6:
      BOOL result = @"InternalIP4DHCP";
      break;
    case 7:
      BOOL result = @"ApplicationVersion";
      break;
    case 8:
      BOOL result = @"InternalIP6Address";
      break;
    case 9:
    case 11:
    case 16:
    case 17:
    case 18:
    case 19:
    case 22:
    case 23:
    case 24:
      goto LABEL_6;
    case 10:
      BOOL result = @"InternalIP6DNS";
      break;
    case 12:
      BOOL result = @"InternalIP6DHCP";
      break;
    case 13:
      BOOL result = @"InternalIP4Subnet";
      break;
    case 14:
      BOOL result = @"SupportedAttributes";
      break;
    case 15:
      BOOL result = @"InternalIP6Subnet";
      break;
    case 20:
      BOOL result = @"PCSCFIP4Address";
      break;
    case 21:
      BOOL result = @"PCSCFIP6Address";
      break;
    case 25:
      BOOL result = @"InternalDNSDomain";
      break;
    default:
      if (a1 == 25958)
      {
        BOOL result = @"InitiatorTransportIP6Address";
      }
      else if (a1 == 25959)
      {
        BOOL result = @"ResponderTransportIP6Address";
      }
      else
      {
LABEL_6:
        BOOL result = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
      }
      break;
  }
  return result;
}

uint64_t NEIKEv2CreateError(uint64_t a1)
{
  if (a1 == 1)
  {
    uint64_t v1 = ne_log_obj();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_fault_impl(&dword_19DDAF000, v1, OS_LOG_TYPE_FAULT, "NEIKEv2CreateError(NEIKEv2ErrorInternal) is not allowed, use NEIKEv2CreateErrorInternal() instead", v7, 2u);
    }

    String = @"Internal";
    uint64_t v3 = 1;
  }
  else
  {
    String = NEIKEv2ErrorCreateString(a1);
    uint64_t v3 = a1;
  }
  uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(v3, String);

  return ErrorWithDescription;
}

__CFString *NEIKEv2ErrorCreateString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 0xF) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    return off_1E5990068[a1 - 1];
  }
}

uint64_t NEIKEv2CreateErrorFailedToSend(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    CFStringRef v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    CFStringRef v11 = (void *)[[NSString alloc] initWithFormat:@"FailedToSend: %@", v10];
    uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(2, v11);
  }
  else
  {
    uint64_t v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "NEIKEv2CreateErrorFailedToSend";
      _os_log_fault_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    uint64_t ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorCrypto(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    CFStringRef v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    CFStringRef v11 = (void *)[[NSString alloc] initWithFormat:@"Crypto: %@", v10];
    uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(7, v11);
  }
  else
  {
    uint64_t v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "NEIKEv2CreateErrorCrypto";
      _os_log_fault_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    uint64_t ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorPeerInvalidSyntax(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    CFStringRef v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    CFStringRef v11 = (void *)[[NSString alloc] initWithFormat:@"PeerInvalidSyntax: %@", v10];
    uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(6, v11);
  }
  else
  {
    uint64_t v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "NEIKEv2CreateErrorPeerInvalidSyntax";
      _os_log_fault_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    uint64_t ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

uint64_t NEIKEv2CreateErrorAuthentication(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  if (v9)
  {
    buf[0] = &a9;
    CFStringRef v10 = (void *)[[NSString alloc] initWithFormat:v9 arguments:&a9];
    CFStringRef v11 = (void *)[[NSString alloc] initWithFormat:@"Authentication: %@", v10];
    uint64_t ErrorWithDescription = NEIKEv2CreateErrorWithDescription(8, v11);
  }
  else
  {
    uint64_t v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = "NEIKEv2CreateErrorAuthentication";
      _os_log_fault_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_FAULT, "%s called with null errorDescriptionFormat", (uint8_t *)buf, 0xCu);
    }

    uint64_t ErrorWithDescription = 0;
  }

  return ErrorWithDescription;
}

__CFString *NEIKEv2HashTypeCreateString(unint64_t a1)
{
  if (a1 >= 6) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    return off_1E5990520[a1];
  }
}

uint64_t NEIKEv2ASN1CheckForNULLItem(uint64_t a1, _DWORD *a2)
{
  uint64_t v6 = 0;
  long long v5 = xmmword_19DF9D008;
  if (*(void *)(a1 + 8))
  {
    int v3 = DERDecodeItem(a1, (unint64_t *)&v5);
    *a2 = v3;
    if (v3 || (v5 & 0x1FFFFFFFFFFFFFFFLL) != 5) {
      return 0;
    }
  }
  else
  {
    *a2 = 0;
  }
  return 1;
}

uint64_t NEIKEv2ASN1DecodeIntegerItem(uint64_t a1, int *a2)
{
  unint64_t v7 = 0;
  v8[0] = 0;
  v8[1] = 0;
  int v3 = DERDecodeItem(a1, &v7);
  if (v3)
  {
    int v4 = v3;
    uint64_t result = 0;
  }
  else if (v7 == 2)
  {
    unsigned int v6 = 0;
    int v4 = DERParseInteger(v8, &v6);
    if (v4) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = v6;
    }
  }
  else
  {
    uint64_t result = 0;
    int v4 = 2;
  }
  *a2 = v4;
  return result;
}

uint64_t __Block_byref_object_copy__9363(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__9364(uint64_t a1)
{
}

void sub_19DE8A0E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_19DE9D2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__12137(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__12138(uint64_t a1)
{
}

void sub_19DE9DCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  objc_destroyWeak(v9);
  objc_destroyWeak(&a9);
  _Unwind_Resume(a1);
}

void sub_19DE9FF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEA04C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DEA3494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
}

uint64_t NEIKEv2PacketTunnelProviderGetSocket(void *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, void *a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  uint64_t v30 = 0;
  unint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  int v33 = -1;
  if (objc_getProperty(v9, v10, 160, 1))
  {
    CFStringRef v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v35 = "NEIKEv2PacketTunnelProviderGetSocket";
      _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, "%s: A previous call is in progress, ignore", buf, 0xCu);
    }
LABEL_4:
    uint64_t v12 = 0xFFFFFFFFLL;
    goto LABEL_20;
  }
  uint64_t v13 = ne_log_obj();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = "PFKey";
    uint64_t v35 = "NEIKEv2PacketTunnelProviderGetSocket";
    __int16 v36 = 2112;
    *(_DWORD *)buf = 136315906;
    id v37 = v9;
    if (a2) {
      uint64_t v14 = "IKE";
    }
    __int16 v38 = 2080;
    int v39 = v14;
    __int16 v40 = 2080;
    CFErrorRef v41 = a5;
    _os_log_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_INFO, "%s: %@: socket type %s (%s)", buf, 0x2Au);
  }

  if (a2)
  {
    if (!a3 || !a4)
    {
      CFStringRef v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v35 = "NEIKEv2PacketTunnelProviderGetSocket";
        __int16 v36 = 2112;
        id v37 = v9;
        _os_log_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_INFO, "%s: %@: Null local/remote", buf, 0x16u);
      }
      goto LABEL_4;
    }
    CFStringRef v11 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:*a3];
    unint64_t v15 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a4 length:*a4];
    if (a5) {
      a5 = (void *)[[NSString alloc] initWithUTF8String:a5];
    }
  }
  else
  {
    a5 = 0;
    unint64_t v15 = 0;
    CFStringRef v11 = 0;
  }
  dispatch_semaphore_t v16 = dispatch_semaphore_create(0);
  objc_setProperty_atomic(v9, v17, v16, 160);

  v26[0] = MEMORY[0x1E4F143A8];
  v26[1] = 3221225472;
  void v26[2] = __NEIKEv2PacketTunnelProviderGetSocket_block_invoke;
  v26[3] = &unk_1E5990C60;
  id v18 = v9;
  char v29 = a2;
  id v27 = v18;
  uint64_t v28 = &v30;
  [v18 requestSocket:a2 interface:a5 local:v11 remote:v15 completionHandler:v26];
  int v20 = objc_getProperty(v18, v19, 160, 1);
  dispatch_time_t v21 = dispatch_time(0, 2000000000);
  intptr_t v22 = dispatch_semaphore_wait(v20, v21);

  if (v22)
  {
    unint64_t v24 = ne_log_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v35 = "NEIKEv2PacketTunnelProviderGetSocket";
      __int16 v36 = 2112;
      id v37 = v18;
      _os_log_error_impl(&dword_19DDAF000, v24, OS_LOG_TYPE_ERROR, "%s: %@ Wait Timeout\n", buf, 0x16u);
    }
  }
  objc_setProperty_atomic(v18, v23, 0, 160);
  uint64_t v12 = *((unsigned int *)v31 + 6);

LABEL_20:
  _Block_object_dispose(&v30, 8);

  return v12;
}

void sub_19DEA3964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DEA430C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void NEIKEv2PacketTunnelHandleConnected(void *a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  uint64_t v103 = 0;
  v104 = &v103;
  uint64_t v105 = 0x3032000000;
  v106 = __Block_byref_object_copy__12137;
  v107 = __Block_byref_object_dispose__12138;
  self = a1;
  id v108 = self;
  uint64_t v1 = ne_log_obj();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = self[21];
    uint64_t v3 = &stru_1EF054CB8;
    *(_DWORD *)buf = 138412802;
    if ((~v2 & 0xF) == 0) {
      uint64_t v3 = @"Connected with Config";
    }
    *(void *)&uint8_t buf[4] = self;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v3;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v114) = v2;
    _os_log_impl(&dword_19DDAF000, v1, OS_LOG_TYPE_DEFAULT, "%@: Tunnel flags - %@ <%X>", buf, 0x1Cu);
  }

  if ((~self[21] & 0xF) != 0) {
    goto LABEL_35;
  }
  id v5 = objc_getProperty(self, v4, 88, 1);
  if (!v5) {
    goto LABEL_29;
  }
  unint64_t v7 = v5;
  id v8 = objc_getProperty(self, v6, 96, 1);
  if (!v8)
  {
LABEL_28:

    goto LABEL_29;
  }
  SEL v10 = v8;
  id v11 = objc_getProperty(self, v9, 104, 1);
  if (!v11)
  {

    goto LABEL_28;
  }
  uint64_t v12 = v11;
  uint64_t v13 = [self protocolConfiguration];
  BOOL v14 = v13 == 0;

  if (v14) {
    goto LABEL_29;
  }
  id v16 = objc_getProperty(self, v15, 128, 1);
  id Property = objc_getProperty(self, v17, 208, 1);
  v95 = -[NEIKEv2Server getViableServerAddressForPath:](v16, Property);

  v96 = [(NETunnelNetworkSettings *)[NEPacketTunnelNetworkSettings alloc] initWithTunnelRemoteAddress:v95];
  id v20 = objc_getProperty(self, v19, 88, 1);
  self;
  id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v98 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id v22 = v20;
  uint64_t v23 = [v22 countByEnumeratingWithState:&v109 objects:buf count:16];
  if (!v23) {
    goto LABEL_24;
  }
  uint64_t v24 = *(void *)v110;
  do
  {
    uint64_t v25 = 0;
    do
    {
      if (*(void *)v110 != v24) {
        objc_enumerationMutation(v22);
      }
      int v26 = *(void **)(*((void *)&v109 + 1) + 8 * v25);
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
        id v27 = [v26 address];
        uint64_t v28 = [v27 hostname];
        [v21 addObject:v28];

LABEL_18:
        goto LABEL_19;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v27 = [v26 stringValue];
        [v98 addObject:v27];
        goto LABEL_18;
      }
LABEL_19:
      ++v25;
    }
    while (v23 != v25);
    uint64_t v29 = [v22 countByEnumeratingWithState:&v109 objects:buf count:16];
    uint64_t v23 = v29;
  }
  while (v29);
LABEL_24:

  if ([v21 count])
  {
    uint64_t v30 = [[NEDNSSettings alloc] initWithServers:v21];
    if ([v98 count]) {
      [(NEDNSSettings *)v30 setMatchDomains:v98];
    }
  }
  else
  {
    uint64_t v30 = 0;
  }

  [(NETunnelNetworkSettings *)v96 setDNSSettings:v30];
  id v35 = objc_getProperty(self, v34, 88, 1);
  id v37 = objc_getProperty(self, v36, 96, 1);
  id v39 = objc_getProperty(self, v38, 104, 1);
  id v40 = v35;
  id v41 = v37;
  id v99 = v39;
  self;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  id v42 = v40;
  char v43 = (NEIPv4Settings *)[v42 countByEnumeratingWithState:&v109 objects:buf count:16];
  if (!v43)
  {
    uint64_t v45 = 0;
    uint64_t v44 = 0;
    uint64_t v53 = v42;
    goto LABEL_56;
  }
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = *(void *)v110;
  while (2)
  {
    uint64_t v47 = 0;
    while (2)
    {
      if (*(void *)v110 != v46) {
        objc_enumerationMutation(v42);
      }
      int v48 = *(void **)(*((void *)&v109 + 1) + 8 * v47);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v49 = [v48 address];
        uint64_t v50 = [v49 hostname];
        uint64_t v51 = v45;
        uint64_t v45 = (void *)v50;
        goto LABEL_46;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unint64_t v49 = [v48 address];
        uint64_t v52 = [v49 hostname];
        uint64_t v51 = v44;
        uint64_t v44 = (void *)v52;
LABEL_46:
      }
      if (v43 != (NEIPv4Settings *)++v47) {
        continue;
      }
      break;
    }
    char v43 = (NEIPv4Settings *)[v42 countByEnumeratingWithState:&v109 objects:buf count:16];
    if (v43) {
      continue;
    }
    break;
  }

  if (v45)
  {
    uint64_t v53 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v45, 0);
    if (v44) {
      int v54 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v44, 0);
    }
    else {
      int v54 = 0;
    }
    char v43 = [[NEIPv4Settings alloc] initWithAddresses:v53 subnetMasks:v54];
    uint64_t v55 = +[NEIKEv2Helper createRouteArrayFromTunnelConfig:localTS:remoteTS:gatewayAddress:isIPv4:]((uint64_t)NEIKEv2Helper, v42, v41, v99, v45, 1);
    [(NEIPv4Settings *)v43 setIncludedRoutes:v55];

LABEL_56:
  }
  else
  {
    char v43 = 0;
  }

  [(NEPacketTunnelNetworkSettings *)v96 setIPv4Settings:v43];
  id v57 = objc_getProperty(self, v56, 88, 1);
  id v59 = objc_getProperty(self, v58, 96, 1);
  id v61 = objc_getProperty(self, v60, 104, 1);
  id v62 = v57;
  id v63 = v59;
  id v100 = v61;
  self;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  uint64_t v64 = (__CFString *)v62;
  uint64_t v65 = [(__CFString *)v64 countByEnumeratingWithState:&v109 objects:buf count:16];
  if (!v65)
  {
    int64_t v80 = 0;
    BOOL v67 = v64;
    goto LABEL_73;
  }
  uint64_t v66 = 0;
  BOOL v67 = 0;
  uint64_t v68 = *(void *)v110;
  do
  {
    for (uint64_t i = 0; i != v65; ++i)
    {
      if (*(void *)v110 != v68) {
        objc_enumerationMutation(v64);
      }
      int v70 = *(void **)(*((void *)&v109 + 1) + 8 * i);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v71 = [v70 address];
        uint64_t v72 = [v71 hostname];

        uint64_t v66 = [v70 prefix];
        BOOL v67 = (__CFString *)v72;
      }
    }
    uint64_t v65 = [(__CFString *)v64 countByEnumeratingWithState:&v109 objects:buf count:16];
  }
  while (v65);

  if (v67)
  {
    uint64_t v73 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C978]), "initWithObjects:", v67, 0);
    id v74 = objc_alloc(MEMORY[0x1E4F1C978]);
    id v75 = [NSNumber numberWithInt:v66];
    unint64_t v76 = objc_msgSend(v74, "initWithObjects:", v75, 0);

    v77 = [[NEIPv6Settings alloc] initWithAddresses:v73 networkPrefixLengths:v76];
    uint64_t v78 = (__CFString *)NECreateIPv6SubnetAddressWithPrefix(v67, v66);
    if (v78)
    {
      int64_t v79 = +[NEIKEv2Helper createRouteArrayFromTunnelConfig:localTS:remoteTS:gatewayAddress:isIPv4:]((uint64_t)NEIKEv2Helper, v64, v63, v100, v78, 0);
      [(NEIPv6Settings *)v77 setIncludedRoutes:v79];

      int64_t v80 = v77;
    }
    else
    {
      int64_t v80 = 0;
    }

LABEL_73:
  }
  else
  {
    int64_t v80 = 0;
  }

  [(NEPacketTunnelNetworkSettings *)v96 setIPv6Settings:v80];
  int v81 = [NSNumber numberWithUnsignedInteger:1280];
  [(NEPacketTunnelNetworkSettings *)v96 setMTU:v81];

  if (!v96)
  {
LABEL_29:
    unint64_t v31 = ne_log_obj();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = self;
      _os_log_error_impl(&dword_19DDAF000, v31, OS_LOG_TYPE_ERROR, "%@: Stopping tunnel because create tunnel settings failed", buf, 0xCu);
    }

    uint64_t v32 = v104[5];
    if (v32) {
      *(unsigned char *)(v32 + 77) = 1;
    }
    v102[0] = MEMORY[0x1E4F143A8];
    v102[1] = 3221225472;
    v102[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke;
    v102[3] = &unk_1E5990B50;
    v102[4] = &v103;
    -[NEIKEv2PacketTunnelProvider stopIKEv2TunnelWithReason:completionHandler:](self, 9, v102);
    int v33 = 0;
    goto LABEL_34;
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000;
  v114 = __Block_byref_object_copy__12137;
  v115 = __Block_byref_object_dispose__12138;
  uint64_t v82 = self;
  id v116 = v82;
  v101[0] = MEMORY[0x1E4F143A8];
  v101[1] = 3221225472;
  v101[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke_2;
  v101[3] = &unk_1E5990B78;
  v101[4] = buf;
  [v82 setTunnelNetworkSettings:v96 completionHandler:v101];
  id v84 = objc_getProperty(v82, v83, 240, 1);
  int v86 = v84;
  if (v84)
  {
    __int16 v87 = objc_getProperty(v84, v85, 336, 1);
    if (v87)
    {
      char v88 = v87[12] & 1;
      goto LABEL_78;
    }
  }
  else
  {
    __int16 v87 = 0;
  }
  char v88 = 0;
LABEL_78:
  v82[76] = v88;

  id v90 = objc_getProperty(v82, v89, 240, 1);
  v92 = v90;
  if (v90)
  {
    v93 = objc_getProperty(v90, v91, 336, 1);
    if (v93)
    {
      char v94 = v93[11] & 1;
      goto LABEL_81;
    }
  }
  else
  {
    v93 = 0;
  }
  char v94 = 0;
LABEL_81:
  v82[79] = v94;

  _Block_object_dispose(buf, 8);
  int v33 = v96;
LABEL_34:

LABEL_35:
  _Block_object_dispose(&v103, 8);
}

void sub_19DEA7610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void __NEIKEv2PacketTunnelHandleConnected_block_invoke(uint64_t a1)
{
}

void __NEIKEv2PacketTunnelHandleConnected_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id Property = *(NSObject **)(*(void *)(v5 + 8) + 40);
  if (v4)
  {
    if (Property)
    {
      id Property = objc_getProperty(Property, v3, 264, 1);
      uint64_t v5 = *(void *)(a1 + 32);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke_3;
    block[3] = &unk_1E5990B50;
    block[4] = v5;
    dispatch_async(Property, block);
  }
  else
  {
    [Property setReasserting:0];
    -[NEIKEv2PacketTunnelProvider invokeStartTunnelCompletionHandler:](*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0);
    unint64_t v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v10 = *(void *)(v9 + 40);
      if (v10) {
        id v11 = objc_getProperty(*(id *)(v9 + 40), v8, 208, 1);
      }
      else {
        id v11 = 0;
      }
      uint64_t v13 = [v11 scopedInterface];
      id v14 = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      if (v13)
      {
        if (v14) {
          id v14 = objc_getProperty(v14, v12, 208, 1);
        }
        id v15 = v14;
        id v16 = [v15 scopedInterface];
      }
      else
      {
        if (v14) {
          id v14 = objc_getProperty(v14, v12, 208, 1);
        }
        id v15 = v14;
        id v16 = [v15 interface];
      }
      SEL v17 = v16;
      id v18 = [v16 interfaceName];
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      uint64_t v23 = v18;
      _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%@: Tunnel Status: UP - (scoped to %@)", buf, 0x16u);
    }
  }
}

void __NEIKEv2PacketTunnelHandleConnected_block_invoke_3(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v6;
    _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, "%@: Stopping tunnel due to set tunnel network settings failed", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(v3 + 8) + 40);
  if (v4)
  {
    *(unsigned char *)(v4 + 77) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v5 = *(unsigned char **)(*(void *)(v3 + 8) + 40);
  }
  else
  {
    uint64_t v5 = 0;
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  CFErrorRef v7[2] = __NEIKEv2PacketTunnelHandleConnected_block_invoke_368;
  v7[3] = &unk_1E5990B50;
  v7[4] = v3;
  -[NEIKEv2PacketTunnelProvider stopIKEv2TunnelWithReason:completionHandler:](v5, 9, v7);
}

void __NEIKEv2PacketTunnelHandleConnected_block_invoke_368(uint64_t a1)
{
}

void sub_19DEA83D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEA8900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __NEIKEv2CompanionDatapathCopyQueue_block_invoke()
{
  int v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("Companion proxy datapath queue", v2);
  uint64_t v1 = (void *)NEIKEv2CompanionDatapathCopyQueue_queue;
  NEIKEv2CompanionDatapathCopyQueue_queue = (uint64_t)v0;
}

void __NEIKEv2PacketTunnelProviderGetSocket_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = ne_log_obj();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(unsigned char *)(a1 + 48)) {
      uint64_t v6 = "IKE";
    }
    else {
      uint64_t v6 = "PFKEY";
    }
    int v14 = 136315650;
    id v15 = "NEIKEv2PacketTunnelProviderGetSocket_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    __int16 v18 = 2080;
    SEL v19 = v6;
    _os_log_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_INFO, "%s: %@: completion handler invoked for %s socket request", (uint8_t *)&v14, 0x20u);
  }

  if (v3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = dup([v3 fileDescriptor]);
    id v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      int v14 = 136315650;
      id v15 = "NEIKEv2PacketTunnelProviderGetSocket_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 1024;
      LODWORD(v19) = v10;
      _os_log_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_INFO, "%s: %@: Got socket %d", (uint8_t *)&v14, 0x1Cu);
    }

    close([v3 fileDescriptor]);
  }
  id v11 = *(void **)(a1 + 32);
  if (v11 && objc_getProperty(v11, v7, 160, 1))
  {
    id Property = *(NSObject **)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v12, 160, 1);
    }
    dispatch_semaphore_signal(Property);
  }
}

void __NEIKEv2PacketTunnelProviderCopyQueue_block_invoke()
{
  int v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("NEIKEv2PacketTunnelProvider Queue", v2);
  uint64_t v1 = (void *)NEIKEv2PacketTunnelProviderCopyQueue_queue;
  NEIKEv2PacketTunnelProviderCopyQueue_queue = (uint64_t)v0;
}

void sub_19DEAB848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEABE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

long long *ne_loopback_protocol_get_id()
{
  if (ne_loopback_protocol_get_id_protocolOnce != -1) {
    dispatch_once(&ne_loopback_protocol_get_id_protocolOnce, &__block_literal_global_12784);
  }
  return &g_identifier;
}

void __ne_loopback_protocol_get_id_block_invoke()
{
  xmmword_1E9456270 = 0u;
  unk_1E9456280 = 0u;
  xmmword_1E9456250 = 0u;
  unk_1E9456260 = 0u;
  xmmword_1E9456230 = 0u;
  *(_OWORD *)&qword_1E9456240 = 0u;
  xmmword_1E9456210 = 0u;
  unk_1E9456220 = 0u;
  xmmword_1E94561F0 = 0u;
  unk_1E9456200 = 0u;
  xmmword_1E94561D0 = 0u;
  *(_OWORD *)&qword_1E94561E0 = 0u;
  xmmword_1E94561B0 = 0u;
  unk_1E94561C0 = 0u;
  xmmword_1E9456190 = 0u;
  *(_OWORD *)&qword_1E94561A0 = 0u;
  g_callbacks = 0u;
  qword_1E94562B0 = 0;
  g_identifier = 0u;
  unk_1E94562A0 = 0u;
  __strlcpy_chk();
  qword_1E94562B0 = 0x100000004;
  nw_protocol_set_default_one_to_one_callbacks();
  *(void *)&g_callbacks = ne_loopback_add_input_handler;
  *((void *)&g_callbacks + 1) = ne_loopback_remove_input_handler;
  *(void *)&xmmword_1E94561D0 = ne_loopback_get_input_frames;
  *((void *)&xmmword_1E94561D0 + 1) = ne_loopback_get_output_frames;
  qword_1E94561E0 = (uint64_t)ne_loopback_finalize_output_frames;
  *(void *)&xmmword_1E9456230 = ne_loopback_supports_external_data;
  qword_1E9456240 = (uint64_t)ne_loopback_output_finished;
  qword_1E94561A8 = (uint64_t)ne_loopback_connected;
  *((void *)&xmmword_1E94561B0 + 1) = ne_loopback_error;
  *((void *)&xmmword_1E9456190 + 1) = ne_loopback_connect;
  qword_1E94561A0 = (uint64_t)ne_loopback_disconnect;
  if ((nw_protocol_register_extended() & 1) == 0)
  {
    dispatch_queue_t v0 = ne_log_obj();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_error_impl(&dword_19DDAF000, v0, OS_LOG_TYPE_ERROR, "Failed to register the np_tunnel_flow protocol", v1, 2u);
    }
  }
}

char *ne_loopback_protocol_create(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (ne_loopback_protocol_get_id_protocolOnce != -1) {
    dispatch_once(&ne_loopback_protocol_get_id_protocolOnce, &__block_literal_global_12784);
  }
  if (nw_protocols_are_equal())
  {
    uint64_t v6 = (void *)nw_parameters_copy_context();
    unint64_t v7 = [NELoopbackConnection alloc];
    id v8 = v6;
    if (v7
      && (v13.receiver = v7,
          v13.super_class = (Class)NELoopbackConnection,
          (uint64_t v9 = (char *)objc_msgSendSuper2(&v13, sel_init)) != 0))
    {
      int v10 = v9;
      *(_OWORD *)(v9 + 8) = xmmword_19DF9BF20;
      *(_OWORD *)(v9 + 24) = xmmword_19DF9BF30;
      *(_OWORD *)(v9 + 40) = 0u;
      id v11 = v9 + 40;
      *(_OWORD *)(v9 + 56) = 0u;
      *(_OWORD *)(v9 + 72) = 0u;
      *(_OWORD *)(v9 + 88) = 0u;
      *((void *)v9 + 7) = &g_identifier;
      *((void *)v9 + 8) = &g_callbacks;
      objc_storeStrong((id *)v9 + 15, v6);
      nw_frame_array_init();

      *((void *)v10 + 10) = v10;
    }
    else
    {

      id v11 = 0;
    }
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

void ne_loopback_disconnect(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  id v3 = v1;
  if (v1) {
    objc_getProperty(v1, v2, 120, 1);
  }
  id v5 = v3;
  id v4 = v3;
  nw_queue_context_async();
}

uint64_t __ne_loopback_disconnect_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = v1 + 40;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t result = *(void *)(v2 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 48))();
  }
  return result;
}

uint64_t ne_loopback_connect(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  id v3 = v1;
  if (v1) {
    objc_getProperty(v1, v2, 120, 1);
  }
  uint64_t v6 = v3;
  id v4 = v3;
  nw_queue_context_async();

  return 1;
}

uint64_t __ne_loopback_connect_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    uint64_t v2 = v1 + 40;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t result = *(void *)(v2 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 40))();
  }
  return result;
}

uint64_t ne_loopback_error(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 48);
    if (result) {
      return (*(uint64_t (**)(void))(*(void *)(result + 24) + 56))();
    }
  }
  return result;
}

uint64_t ne_loopback_connected(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32) == a2) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(result + 48) + 24) + 40))();
  }
  return result;
}

void ne_loopback_output_finished(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(id *)(a1 + 40);
  uint64_t v6 = v1;
  if (v1)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = v6[17];
      *(_DWORD *)buf = 134218240;
      uint64_t v8 = v3;
      __int16 v9 = 1024;
      int v10 = nw_frame_array_unclaimed_length();
      _os_log_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_DEFAULT, "Loopback received output finished with %llu bytes received, current input bytes %u", buf, 0x12u);
    }

    uint64_t v1 = v6;
    uint64_t v4 = v6[11];
    if (v4)
    {
      id v5 = *(void (**)(void))(*(void *)(v4 + 24) + 184);
      if (v5)
      {
        v5();
        uint64_t v1 = v6;
      }
    }
  }
  [(NELoopbackConnection *)v1 notifyInputHandler];
}

uint64_t ne_loopback_supports_external_data(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 48) + 24) + 176))();
}

uint64_t ne_loopback_finalize_output_frames(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  nw_frame_array_foreach();
  [(NELoopbackConnection *)v1 notifyInputHandler];

  return 1;
}

uint64_t __ne_loopback_finalize_output_frames_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  nw_frame_array_remove();
  nw_frame_finalize();

  return 1;
}

uint64_t ne_loopback_get_output_frames(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    return 0;
  }
  nw_frame_array_init();
  uint64_t result = 0;
  if (a4 && a5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(v5 + 128);
    int v11 = a5 - 1;
    while (1)
    {
      unint64_t v12 = *(void *)(v5 + 8 + 8 * v10);
      size_t v13 = v12 >= a4 ? a4 : v12;
      if (!malloc_type_malloc(v13, 0x100004077774924uLL)) {
        break;
      }
      nw_frame_create();
      nw_frame_array_append();
      uint64_t v14 = *(void *)(v5 + 128);
      if (v14 == 3) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v14 + 1;
      }
      *(void *)(v5 + 128) = v10;
      a4 -= v13;
      uint64_t result = (v9 + 1);
      if (a4) {
        BOOL v15 = v11 == v9;
      }
      else {
        BOOL v15 = 1;
      }
      uint64_t v9 = (v9 + 1);
      if (v15) {
        return result;
      }
    }
    return v9;
  }
  return result;
}

void ne_loopback_output_frame_finalizer(void *a1, int a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      id v5 = a1;
      *(void *)(a3 + 136) += nw_frame_unclaimed_length();
      nw_frame_get_buffer();
      nw_frame_reset();
      nw_frame_array_append();
    }
  }
  else
  {
    ne_loopback_input_frame_finalizer(a1);
  }
}

void ne_loopback_input_frame_finalizer(void *a1)
{
  id v1 = a1;
  buffer = (void *)nw_frame_get_buffer();
  nw_frame_reset();

  free(buffer);
}

uint64_t ne_loopback_get_input_frames(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  int v26 = 0;
  nw_frame_array_init();
  if (!a4 || !a5)
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a5;
      LOWORD(v28) = 1024;
      *(_DWORD *)((char *)&v28 + 2) = a4;
      uint64_t v9 = "Maximum frame count (%u) and/or maximum byte count (%u) is 0";
      uint64_t v10 = buf;
      size_t v13 = v8;
      uint32_t v14 = 14;
      goto LABEL_28;
    }
    goto LABEL_8;
  }
  if (nw_frame_array_is_empty())
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      uint64_t v9 = "No input data currently available";
      uint64_t v10 = buf;
LABEL_15:
      size_t v13 = v8;
      uint32_t v14 = 2;
LABEL_28:
      _os_log_debug_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_DEBUG, v9, v10, v14);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  *(void *)buf = MEMORY[0x1E4F143A8];
  uint64_t v28 = 3221225472;
  uint64_t v29 = __90__NELoopbackConnection_addInputFramesToArray_maximumBytes_minimumBytes_maximumFrameCount___block_invoke;
  uint64_t v30 = &unk_1E5990D50;
  unint64_t v31 = &v23;
  nw_frame_array_foreach();
  if (*((_DWORD *)v24 + 6) < a3)
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v22 = 0;
      uint64_t v9 = "Not enough data available to meet the required minimum";
      uint64_t v10 = (uint8_t *)&v22;
      goto LABEL_15;
    }
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = nw_frame_array_first();
  if (!v8)
  {
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = 0;
  unsigned int v15 = 0;
  do
  {
    if (v11 >= a5) {
      break;
    }
    size_t v16 = a4 - v15;
    if (a4 <= v15) {
      break;
    }
    uint64_t v17 = nw_frame_array_next();
    if (nw_frame_unclaimed_length() + v15 <= a4)
    {
      nw_frame_array_remove();
      nw_frame_array_append();
      v15 += nw_frame_unclaimed_length();
      uint64_t v20 = v8;
      uint64_t v8 = v17;
    }
    else
    {
      __int16 v18 = malloc_type_malloc(a4 - v15, 0x100004077774924uLL);
      if (!v18)
      {

        break;
      }
      SEL v19 = (void *)nw_frame_create();
      nw_frame_array_append();
      uint64_t v20 = v19;
      uint64_t v21 = (const void *)nw_frame_unclaimed_bytes();
      memcpy(v18, v21, v16);
      nw_frame_claim();
      unsigned int v15 = a4;
    }

    uint64_t v11 = (v11 + 1);
  }
  while (v8);
LABEL_9:

LABEL_10:
  _Block_object_dispose(&v23, 8);
  return v11;
}

void sub_19DEAFA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ne_loopback_remove_input_handler(void *a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = a1[6];
  if (v4 == a2)
  {
    a1[6] = 0;
    uint64_t v7 = a1[4];
    if (v7) {
      (*(void (**)(void))(*(void *)(v7 + 24) + 8))();
    }
    if (a3)
    {
      uint64_t v8 = (void *)a1[5];
      a1[5] = 0;
    }
  }
  return v4 == a2;
}

uint64_t ne_loopback_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a2 + 32) = a1;
  *(void *)(a1 + 48) = a2;
  if (v2) {
    uint64_t v3 = (unsigned __int8 *)(v2 + 40);
  }
  else {
    uint64_t v3 = 0;
  }
  uuid_copy(v3, (const unsigned __int8 *)a2);
  return 1;
}

void sub_19DEB0CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NEIKEv2RequestContextTypeString(unsigned int a1)
{
  if (a1 >= 8) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    return off_1E5990F48[a1];
  }
}

void sub_19DEB5F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEB67E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NEIKEv2CreateSessionStateString(unint64_t a1)
{
  if (a1 >= 5) {
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    return off_1E5990F20[a1];
  }
}

void sub_19DEB8300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DEB9128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  if (v12) {
    objc_destroyWeak(location);
  }
  objc_destroyWeak((id *)(v13 - 136));
  _Unwind_Resume(a1);
}

void sub_19DEBAF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEBB28C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19DEBB3B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19DEBF66C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id NEIKEv2TransportCopyNATTFramerDefinition()
{
  if (NEIKEv2TransportCopyNATTFramerDefinition_onceToken != -1) {
    dispatch_once(&NEIKEv2TransportCopyNATTFramerDefinition_onceToken, &__block_literal_global_13697);
  }
  dispatch_queue_t v0 = (void *)NEIKEv2TransportCopyNATTFramerDefinition_definition;

  return v0;
}

uint64_t __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke()
{
  nw_protocol_definition_t definition = nw_framer_create_definition("UDP-NAT-T", 0, &__block_literal_global_4_13700);
  uint64_t v1 = NEIKEv2TransportCopyNATTFramerDefinition_definition;
  NEIKEv2TransportCopyNATTFramerDefinition_nw_protocol_definition_t definition = (uint64_t)definition;

  return MEMORY[0x1F41817F8](definition, v1);
}

uint64_t __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  nw_framer_set_input_handler(v2, &__block_literal_global_7);
  nw_framer_set_output_handler(v2, &__block_literal_global_12);

  return 1;
}

void __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke_9(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  nw_framer_write_output(v5, _block_invoke_nonESPMarker, 4uLL);
  uint64_t v6 = ne_log_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 134217984;
    size_t v8 = a4;
    _os_log_debug_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_DEBUG, "UDP-NAT-T: Writing frame length %zu for NAT-T", (uint8_t *)&v7, 0xCu);
  }

  nw_framer_write_output_no_copy(v5, a4);
}

uint64_t __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  uint64_t v3 = MEMORY[0x1E4F143A8];
  while (1)
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    int v19 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000;
    uint64_t v15 = 0;
    parse[0] = v3;
    parse[1] = 3221225472;
    parse[2] = __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke_4;
    parse[3] = &unk_1E5990FD0;
    parse[4] = &v16;
    parse[5] = &v12;
    if (!nw_framer_parse_input(v2, 1uLL, 0xFFFFFFFFuLL, 0, parse)) {
      break;
    }
    if (v13[3])
    {
      if (*((_DWORD *)v17 + 6))
      {
        uint64_t v4 = ne_log_obj();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          uint64_t v8 = v13[3];
          unsigned int v9 = bswap32(*((_DWORD *)v17 + 6));
          *(_DWORD *)buf = 134218240;
          uint64_t v21 = v8;
          __int16 v22 = 1024;
          unsigned int v23 = v9;
          _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "UDP-NAT-T: Reading frame length %zu for NAT-T, unexpected non-zero marker %04X", buf, 0x12u);
        }
      }
      else
      {
        uint64_t v4 = ne_log_obj();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = v13[3];
          *(_DWORD *)buf = 134217984;
          uint64_t v21 = v7;
          _os_log_debug_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_DEBUG, "UDP-NAT-T: Reading frame length %zu for NAT-T", buf, 0xCu);
        }
      }

      id v5 = nw_framer_message_create(v2);
      BOOL v6 = nw_framer_deliver_input_no_copy(v2, v13[3], v5, 1);

      if (!v6) {
        break;
      }
    }
    _Block_object_dispose(&v12, 8);
    _Block_object_dispose(&v16, 8);
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);

  return 0;
}

void sub_19DEC290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __NEIKEv2TransportCopyNATTFramerDefinition_block_invoke_4(uint64_t a1, _DWORD *a2, unint64_t a3, int a4)
{
  unint64_t v4 = 0;
  if (a2)
  {
    if (a4)
    {
      unint64_t v4 = a3;
      if (a3 >= 4)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3 - 4;
        return 4;
      }
    }
  }
  return v4;
}

id NEIKEv2TransportCopyTCPFramerDefinition()
{
  if (NEIKEv2TransportCopyTCPFramerDefinition_onceToken != -1) {
    dispatch_once(&NEIKEv2TransportCopyTCPFramerDefinition_onceToken, &__block_literal_global_14);
  }
  dispatch_queue_t v0 = (void *)NEIKEv2TransportCopyTCPFramerDefinition_definition;

  return v0;
}

uint64_t __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke()
{
  nw_protocol_definition_t definition = nw_framer_create_definition("IKE-TCP", 0, &__block_literal_global_17_13710);
  uint64_t v1 = NEIKEv2TransportCopyTCPFramerDefinition_definition;
  NEIKEv2TransportCopyTCPFramerDefinition_nw_protocol_definition_t definition = (uint64_t)definition;

  return MEMORY[0x1F41817F8](definition, v1);
}

uint64_t __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  nw_framer_set_input_handler(v2, &__block_literal_global_19);
  nw_framer_set_output_handler(v2, &__block_literal_global_22);
  nw_framer_write_output(v2, (const uint8_t *)"IKETCP", 6uLL);

  return 1;
}

void __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke_20(uint64_t a1, void *a2, uint64_t a3, size_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v5 = a4 + 6;
  *(_WORD *)output_buffer = bswap32(a4 + 6) >> 16;
  int v9 = 0;
  BOOL v6 = a2;
  nw_framer_write_output(v6, output_buffer, 6uLL);
  uint64_t v7 = ne_log_obj();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v9;
    _os_log_debug_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEBUG, "IKE-TCP: Writing frame of length %u for SPI %04X", buf, 0xEu);
  }

  nw_framer_write_output_no_copy(v6, a4);
}

uint64_t __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = MEMORY[0x1E4F143A8];
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = &v16;
    uint64_t v18 = 0x2020000000;
    int v19 = 0;
    __int16 v15 = 0;
    *(_DWORD *)temp_buffer = 0;
    parse[0] = v4;
    parse[1] = 3221225472;
    parse[2] = __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke_4;
    parse[3] = &unk_1E5991018;
    int v13 = &v16;
    unsigned __int16 v5 = v3;
    __int16 v12 = v5;
    if (nw_framer_parse_input(v5, 6uLL, 6uLL, temp_buffer, parse))
    {
      if (*((_DWORD *)v17 + 6))
      {
        BOOL v6 = ne_log_obj();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          int v9 = *((_DWORD *)v17 + 6);
          *(_DWORD *)buf = 67109376;
          int v21 = v9;
          __int16 v22 = 1024;
          int v23 = 0;
          _os_log_debug_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_DEBUG, "IKE-TCP: Reading frame of length %u for SPI %04X", buf, 0xEu);
        }

        uint64_t v7 = nw_framer_message_create(v5);
        BOOL v8 = nw_framer_deliver_input_no_copy(v5, *((unsigned int *)v17 + 6), v7, 1);

        if (!v8) {
          uint64_t v2 = 0;
        }
      }
      else
      {
        LOBYTE(v8) = 0;
        uint64_t v2 = 0;
      }
    }
    else
    {
      LOBYTE(v8) = 0;
      uint64_t v2 = 6;
    }

    _Block_object_dispose(&v16, 8);
  }
  while (v8);

  return v2;
}

void sub_19DEC2D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __NEIKEv2TransportCopyTCPFramerDefinition_block_invoke_4(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  uint64_t result = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 && a3 >= 6)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = bswap32(*a2) >> 16;
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v6 = *(_DWORD *)(v5 + 24);
    if (v6 > 5)
    {
      if (*(_DWORD *)(a2 + 1))
      {
        *(_DWORD *)(v5 + 24) = v6 - 2;
        return 2;
      }
      else
      {
        *(_DWORD *)(v5 + 24) = v6 - 6;
        return 6;
      }
    }
    else
    {
      uint64_t v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        v9[0] = 67109120;
        v9[1] = v8;
        _os_log_error_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_ERROR, "IKE-TCP: Received invalid frame length %u", (uint8_t *)v9, 8u);
      }

      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 40);
      return 0;
    }
  }
  return result;
}

void sub_19DEC307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEC6730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DEC6A88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEC6BD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *NEIPSecDBCreateSessionWithSocket(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (__NEIPSecDBInitialize_onceToken != -1) {
    dispatch_once(&__NEIPSecDBInitialize_onceToken, &__block_literal_global_13866);
  }
  if (!g_IPSecDBSessions) {
    return 0;
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = (void *)Instance;
  if (!Instance) {
    return v10;
  }
  *(void *)(Instance + 104) = 0;
  *(_OWORD *)(Instance + 88) = 0u;
  *(_OWORD *)(Instance + 72) = 0u;
  *(_OWORD *)(Instance + 56) = 0u;
  *(_OWORD *)(Instance + 40) = 0u;
  *(_OWORD *)(Instance + 24) = 0u;
  *(void *)(Instance + 16) = atomic_fetch_add_explicit(&sNEIPSecDBIndex, 1uLL, memory_order_relaxed);
  if (a2) {
    CFTypeRef v11 = CFRetain(a2);
  }
  else {
    CFTypeRef v11 = 0;
  }
  void v10[3] = v11;
  v10[4] = a3;
  v10[5] = a4;
  __int16 v12 = _NEIPSecDBGetQueue();
  int v13 = NEPFKeyOpen(v12, NEIPSecDBReceivePFKeyMessage, (uint64_t)v10, a5);
  v10[8] = v13;
  if (!v13) {
    goto LABEL_13;
  }
  uint64_t v14 = v13;
  dispatch_queue_t v15 = _NEIPSecDBGetQueue();
  NEPFKeySendRegister(v14, (uint64_t)v15, 2u);
  uint64_t v16 = v10[8];
  dispatch_queue_t v17 = _NEIPSecDBGetQueue();
  NEPFKeySendRegister(v16, (uint64_t)v17, 3u);
  v10[9] = 0x100000001;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  v10[10] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, v19, v20);
  v10[11] = Mutable;
  if (!v10[10] || !Mutable)
  {
LABEL_13:
    CFRelease(v10);
    return 0;
  }
  __int16 v22 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBCreateSessionWithSocket_block_invoke;
  block[3] = &__block_descriptor_tmp;
  block[4] = v10;
  dispatch_sync(v22, block);
  int v23 = ne_log_obj();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v27 = v10;
    _os_log_impl(&dword_19DDAF000, v23, OS_LOG_TYPE_INFO, "Created a new NEIPSecDB session %@", buf, 0xCu);
  }
  return v10;
}

dispatch_queue_t _NEIPSecDBGetQueue()
{
  dispatch_queue_t result = (dispatch_queue_t)_NEIPSecDBGetQueue_db_queue;
  if (!_NEIPSecDBGetQueue_db_queue)
  {
    uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t result = dispatch_queue_create("NEIPSecDB PFKey IO Queue", v1);
    _NEIPSecDBGetQueue_db_queue = (uint64_t)result;
  }
  return result;
}

void __NEIPSecDBCreateSessionWithSocket_block_invoke(uint64_t a1)
{
}

void NEIPSecDBReceivePFKeyMessage(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  *(void *)v156 = 0;
  __int16 v155 = 0;
  if (a3)
  {
    CFArrayRef v4 = (const __CFArray *)g_IPSecDBSessions;
    if (g_IPSecDBSessions)
    {
      v165.length = CFArrayGetCount((CFArrayRef)g_IPSecDBSessions);
      v165.location = 0;
      if (CFArrayContainsValue(v4, v165, (const void *)a3))
      {
        CFRetain((CFTypeRef)a3);
        if (!*(void *)(a3 + 80) || !*(void *)(a3 + 88)) {
          goto LABEL_145;
        }
        switch(*(unsigned char *)(v3 + 1))
        {
          case 1:
          case 2:
          case 3:
          case 5:
          case 7:
          case 9:
          case 0xA:
          case 0x1A:
            int v7 = *(_DWORD *)(v3 + 12);
            if (v7 == getpid()) {
              goto LABEL_8;
            }
            goto LABEL_145;
          case 4:
          case 8:
LABEL_8:
            CFDictionaryRef v8 = NEIPSecDBGetSAWithMessage(a3, a1, v156);
            goto LABEL_9;
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x12:
          case 0x13:
          case 0x14:
          case 0x16:
            int v13 = *(_DWORD *)(v3 + 12);
            if (v13 != getpid()) {
              goto LABEL_145;
            }
            *(void *)v156 = -1;
            uint64_t v14 = a1[5];
            if (v14)
            {
              uint64_t v15 = v14 + 8;
            }
            else
            {
              uint64_t v26 = a1[23];
              if (v26) {
                uint64_t v15 = v26 + 8;
              }
              else {
                uint64_t v15 = 0;
              }
            }
            uint64_t v154 = v15;
            uint64_t v27 = a1[6];
            if (v27)
            {
              uint64_t v28 = v27 + 8;
            }
            else
            {
              uint64_t v29 = a1[25];
              if (v29) {
                uint64_t v28 = v29 + 8;
              }
              else {
                uint64_t v28 = 0;
              }
            }
            uint64_t v153 = v28;
            CFDictionaryRef v8 = 0;
            if (!*a1) {
              goto LABEL_9;
            }
            uint64_t v30 = a1[18];
            if (!v30) {
              goto LABEL_9;
            }
            CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 88));
            if (Count < 1)
            {
LABEL_59:
              CFDictionaryRef v8 = 0;
              goto LABEL_9;
            }
            size_t v32 = Count;
            int v33 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
            SEL v34 = (const void **)malloc_type_calloc(v32, 8uLL, 0x80040B8603338uLL);
            v152 = v33;
            CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a3 + 88), v33, v34);
            uint64_t v35 = 0;
            break;
          case 0x17:
            int v48 = *(_DWORD *)(v3 + 12);
            if (v48 == getpid()) {
              goto LABEL_59;
            }
            goto LABEL_145;
          default:
            goto LABEL_145;
        }
        do
        {
          CFDictionaryRef v8 = (const __CFDictionary *)v34[v35];
          int v36 = NEGetIntFromDictionary(v8, @"PolicyID", 0);
          if (v36)
          {
            if (v36 == *(_DWORD *)(v30 + 8))
            {
              *(_DWORD *)buf = 0;
              uint64_t v53 = v152;
              CFNumberGetValue((CFNumberRef)v152[v35], kCFNumberIntType, buf);
              *(void *)v156 = *(int *)buf;
              goto LABEL_65;
            }
          }
          else
          {
            Value = (void *)CFDictionaryGetValue(v8, @"Direction");
            SEL v38 = Value;
            if (Value)
            {
              if (CFEqual(Value, @"In"))
              {
                CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v8, @"LocalAddress");
                id v40 = CFDictionaryGetValue(v8, @"LocalPort");
                SEL v38 = NECreateAddressStructFromString(v39, (uint64_t)v40, 0);
                CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v8, @"RemoteAddress");
                id v42 = CFDictionaryGetValue(v8, @"RemotePort");
                char v43 = NECreateAddressStructFromString(v41, (uint64_t)v42, 0);
              }
              else if (CFEqual(v38, @"Out"))
              {
                CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(v8, @"LocalAddress");
                uint64_t v45 = CFDictionaryGetValue(v8, @"LocalPort");
                char v43 = NECreateAddressStructFromString(v44, (uint64_t)v45, 0);
                CFStringRef v46 = (const __CFString *)CFDictionaryGetValue(v8, @"RemoteAddress");
                uint64_t v47 = CFDictionaryGetValue(v8, @"RemotePort");
                SEL v38 = NECreateAddressStructFromString(v46, (uint64_t)v47, 0);
              }
              else
              {
                char v43 = 0;
                SEL v38 = 0;
              }
            }
            else
            {
              char v43 = 0;
            }
            if (NEIPSecDBAddressesMatch((uint64_t)v43, v154) && NEIPSecDBAddressesMatch((uint64_t)v38, v153))
            {
              *(_DWORD *)buf = 0;
              uint64_t v53 = v152;
              CFNumberGetValue((CFNumberRef)v152[v35], kCFNumberIntType, buf);
              *(void *)v156 = *(int *)buf;
              if (v43) {
                free(v43);
              }
              if (v38) {
                free(v38);
              }
              goto LABEL_65;
            }
            if (v43) {
              free(v43);
            }
            if (v38) {
              free(v38);
            }
          }
          ++v35;
        }
        while (v32 != v35);
        CFDictionaryRef v8 = 0;
        uint64_t v53 = v152;
        if (!v152) {
          goto LABEL_66;
        }
LABEL_65:
        free(v53);
LABEL_66:
        free(v34);
LABEL_9:
        int v9 = *(unsigned __int8 *)(v3 + 1);
        if (v9 != 23 && !v8)
        {
          uint64_t v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            int v11 = *(unsigned __int8 *)(v3 + 1);
            unsigned int v12 = NEIPSecDBExtractSPIFromPFKeyMessage(a1);
            *(_DWORD *)buf = 138412802;
            uint64_t v158 = a3;
            __int16 v159 = 1024;
            *(_DWORD *)v160 = v11;
            *(_WORD *)&v160[4] = 1024;
            *(_DWORD *)&v160[6] = bswap32(v12);
            _os_log_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_INFO, "%@ Received PFKey SA Message that could not be matched (type %d, SPI %08X)", buf, 0x18u);
          }
LABEL_145:
          CFRelease((CFTypeRef)a3);
          return;
        }
        if (*(unsigned char *)(v3 + 2))
        {
          uint64_t v16 = ne_log_obj();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            dispatch_queue_t v17 = strerror(*(unsigned __int8 *)(v3 + 2));
            int v18 = *(unsigned __int8 *)(v3 + 1);
            *(_DWORD *)buf = 138412802;
            uint64_t v158 = a3;
            __int16 v159 = 2080;
            *(void *)v160 = v17;
            *(_WORD *)&v160[8] = 1024;
            *(_DWORD *)v161 = v18;
            _os_log_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_INFO, "%@ Received PFKey Message reporting error: %s (type %d)", buf, 0x1Cu);
          }
          int v19 = *(unsigned __int8 *)(v3 + 1);
          switch(*(unsigned char *)(v3 + 1))
          {
            case 1:
            case 3:
              uint64_t v20 = *(__CFDictionary **)(a3 + 80);
              goto LABEL_74;
            case 2:
              int v51 = v156[0];
              uint64_t v52 = *(NSObject **)(a3 + 96);
              int v19 = 2;
              goto LABEL_70;
            case 4:
              int v51 = v156[0];
              uint64_t v52 = *(NSObject **)(a3 + 96);
              int v19 = 4;
              goto LABEL_70;
            case 5:
              int v51 = v156[0];
              uint64_t v52 = *(NSObject **)(a3 + 96);
              int v19 = 5;
              goto LABEL_70;
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x11:
            case 0x12:
            case 0x13:
            case 0x14:
            case 0x15:
              goto LABEL_141;
            case 0xE:
              uint64_t v20 = *(__CFDictionary **)(a3 + 88);
LABEL_74:
              NERemoveValueFromIntKeyedDictionary(v20, v156[0]);
              int v54 = *(unsigned __int8 *)(v3 + 1);
              int v55 = v156[0];
              SEL v56 = *(NSObject **)(a3 + 96);
              goto LABEL_76;
            case 0xF:
            case 0x16:
              NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), v19, v156[0], 0, 0);
              int v49 = *(unsigned __int8 *)(v3 + 2);
              if (v49 == 22 || v49 == 2) {
                goto LABEL_62;
              }
              goto LABEL_141;
            case 0x10:
              int v55 = v156[0];
              SEL v56 = *(NSObject **)(a3 + 96);
              int v54 = 16;
LABEL_76:
              char v57 = 0;
              goto LABEL_140;
            default:
              if (v19 != 26) {
                goto LABEL_141;
              }
              int v51 = v156[0];
              uint64_t v52 = *(NSObject **)(a3 + 96);
LABEL_70:
              NEIPSecDBNotifyRequest(v52, v19, v51, 0, 0);
              if (*(unsigned char *)(v3 + 2) != 2) {
                goto LABEL_141;
              }
              uint64_t v50 = *(__CFDictionary **)(a3 + 80);
              break;
          }
LABEL_72:
          NERemoveValueFromIntKeyedDictionary(v50, v156[0]);
          goto LABEL_141;
        }
        if (v9 != 23 || NEIPSecDBStatsHandleReply(a3, a1, v156, (unsigned char *)&v155 + 1, &v155))
        {
          int v21 = ne_log_obj();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            int v22 = *(unsigned __int8 *)(v3 + 1);
            int v23 = v156[0];
            int v24 = *(_DWORD *)(v3 + 12);
            unsigned int v25 = NEIPSecDBExtractSPIFromPFKeyMessage(a1);
            *(_DWORD *)buf = 138413314;
            uint64_t v158 = a3;
            __int16 v159 = 1024;
            *(_DWORD *)v160 = v22;
            *(_WORD *)&v160[4] = 1024;
            *(_DWORD *)&v160[6] = v23;
            *(_WORD *)v161 = 1024;
            *(_DWORD *)&v161[2] = v24;
            __int16 v162 = 1024;
            unsigned int v163 = bswap32(v25);
            _os_log_impl(&dword_19DDAF000, v21, OS_LOG_TYPE_INFO, "%@ Received PFKey Message associated with DB (type %d, SAID %u, pid %u, SPI %08X", buf, 0x24u);
          }
        }
        switch(*(unsigned char *)(v3 + 1))
        {
          case 1:
            uint64_t v81 = a1[1];
            if (v81)
            {
              int v82 = bswap32(*(_DWORD *)(v81 + 4));
              SEL v83 = @"SPIValue";
              goto LABEL_117;
            }
            int v54 = 1;
            goto LABEL_138;
          case 2:
            int v55 = v156[0];
            SEL v56 = *(NSObject **)(a3 + 96);
            int v54 = 2;
            goto LABEL_139;
          case 3:
            int v55 = v156[0];
            SEL v56 = *(NSObject **)(a3 + 96);
            int v54 = 3;
            goto LABEL_139;
          case 4:
            NERemoveValueFromIntKeyedDictionary(*(__CFDictionary **)(a3 + 80), v156[0]);
            int v84 = *(_DWORD *)(v3 + 12);
            if (v84 == getpid()) {
              goto LABEL_137;
            }
            int v63 = v156[0];
            uint64_t v64 = a3;
            int v65 = 9216;
            goto LABEL_114;
          case 5:
            CFAllocatorRef v58 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!Mutable) {
              goto LABEL_137;
            }
            SEL v60 = Mutable;
            int v61 = *(unsigned __int8 *)(v3 + 3);
            if (v61 == 3)
            {
              id v62 = @"ESP";
            }
            else
            {
              if (v61 != 2) {
                goto LABEL_151;
              }
              id v62 = @"AH";
            }
            CFDictionaryAddValue(Mutable, @"IPSecProtocol", v62);
LABEL_151:
            uint64_t v99 = a1[9];
            if (v99) {
              NEAddDataToDictionary(v60, @"EncryptionKey", (UInt8 *)(v99 + 8), *(unsigned __int16 *)(v99 + 4) >> 3);
            }
            uint64_t v100 = a1[8];
            if (v100) {
              NEAddDataToDictionary(v60, @"AuthKey", (UInt8 *)(v100 + 8), *(unsigned __int16 *)(v100 + 4) >> 3);
            }
            uint64_t v101 = a1[22];
            if (v101)
            {
              if (*(unsigned char *)(v101 + 52))
              {
                CFStringRef v102 = CFStringCreateWithCString(v58, (const char *)(v101 + 52), 0x600u);
                if (v102)
                {
                  CFStringRef v103 = v102;
                  CFDictionaryAddValue(v60, @"IPSecInterface", v102);
                  CFRelease(v103);
                }
              }
              if (*(unsigned char *)(v101 + 28))
              {
                CFStringRef v104 = CFStringCreateWithCString(v58, (const char *)(v101 + 28), 0x600u);
                if (v104)
                {
                  CFStringRef v105 = v104;
                  CFDictionaryAddValue(v60, @"OutgoingInterface", v104);
                  CFRelease(v105);
                }
              }
              if (*(unsigned char *)(v101 + 4))
              {
                CFStringRef v106 = CFStringCreateWithCString(v58, (const char *)(v101 + 4), 0x600u);
                if (v106)
                {
                  CFStringRef v107 = v106;
                  CFDictionaryAddValue(v60, @"InternalInterface", v106);
                  CFRelease(v107);
                }
              }
              if (*(_WORD *)(v101 + 76)) {
                CFDictionaryAddValue(v60, @"IntializeDisabled", (const void *)*MEMORY[0x1E4F1CFD0]);
              }
            }
            uint64_t v108 = a1[2];
            if (v108)
            {
              long long v110 = (int *)a1[3];
              long long v109 = (int *)a1[4];
              time_t v111 = time(0);
              NEAddDateToDictionary(v60, @"CreateTime", *(void *)(v108 + 16));
              NEAddDateToDictionary(v60, @"CurrentTime", v111);
              NEAddIntToDictionary(v60, @"DiffTime", v111 - *(_DWORD *)(v108 + 16));
              uint64_t v112 = *(void *)(v108 + 24);
              if (v112) {
                NEAddDateToDictionary(v60, @"LastUseTime", v112);
              }
              NEAddIntToDictionary(v60, @"CurrentBytes", *(_DWORD *)(v108 + 8));
              NEAddIntToDictionary(v60, @"CurrentAllocations", *(_DWORD *)(v108 + 4));
              if (v110)
              {
                NEAddIntToDictionary(v60, @"HardLifetime", v110[4]);
                NEAddIntToDictionary(v60, @"HardUseTime", v110[6]);
                NEAddIntToDictionary(v60, @"HardBytes", v110[2]);
                NEAddIntToDictionary(v60, @"SoftAllocations", v110[1]);
              }
              if (v109)
              {
                NEAddIntToDictionary(v60, @"SoftLifetime", v109[4]);
                NEAddIntToDictionary(v60, @"SoftUseTime", v109[6]);
                NEAddIntToDictionary(v60, @"SoftBytes", v109[2]);
                NEAddIntToDictionary(v60, @"SoftAllocations", v109[1]);
              }
            }
            uint64_t v113 = a1[1];
            if (!v113) {
              goto LABEL_202;
            }
            unint64_t v114 = *(unsigned __int8 *)(v113 + 9);
            if (v114 <= 3) {
              CFDictionaryAddValue(v60, @"State", off_1E59914F0[v114]);
            }
            NEAddIntToDictionary(v60, @"SPIValue", bswap32(*(_DWORD *)(v113 + 4)));
            NEAddIntToDictionary(v60, @"ReplayWindowSize", *(unsigned __int8 *)(v113 + 8));
            int v115 = *(unsigned __int8 *)(v113 + 11);
            switch(v115)
            {
              case 1:
                id v116 = @"DES";
                break;
              case 12:
                id v116 = @"AES-128";
                break;
              case 2:
                id v116 = @"3DES";
                break;
              default:
                goto LABEL_193;
            }
            CFDictionaryAddValue(v60, @"EncryptionAlgorithm", v116);
LABEL_193:
            if (*(unsigned char *)(v113 + 10) - 1) <= 7u && ((0xE3u >> (*(unsigned char *)(v113 + 10) - 1))) {
              CFDictionaryAddValue(v60, @"AuthAlgorithm", off_1E5991510[(*(unsigned char *)(v113 + 10) - 1)]);
            }
            if ((*(unsigned char *)(v113 + 12) & 2) == 0) {
              goto LABEL_202;
            }
            v120 = (const void *)*MEMORY[0x1E4F1CFD0];
            CFDictionaryAddValue(v60, @"NATTraversal", (const void *)*MEMORY[0x1E4F1CFD0]);
            int v121 = *(_DWORD *)(v113 + 12);
            if ((v121 & 4) != 0)
            {
              CFDictionaryAddValue(v60, @"NATTKeepAlive", v120);
              int v121 = *(_DWORD *)(v113 + 12);
              if ((v121 & 0x8000) == 0)
              {
LABEL_199:
                if ((v121 & 0x1000) == 0) {
                  goto LABEL_201;
                }
                goto LABEL_200;
              }
            }
            else if ((v121 & 0x8000) == 0)
            {
              goto LABEL_199;
            }
            CFDictionaryAddValue(v60, @"NATTKeepAliveOffload", v120);
            if ((*(_DWORD *)(v113 + 12) & 0x1000) != 0) {
LABEL_200:
            }
              CFDictionaryAddValue(v60, @"NATTDetectedPeer", v120);
LABEL_201:
            NEAddIntToDictionary(v60, @"ReplayWindowSize", *(unsigned __int16 *)(v113 + 16));
LABEL_202:
            uint64_t v122 = a1[19];
            if (!v122) {
              goto LABEL_210;
            }
            int v123 = *(unsigned __int8 *)(v122 + 4);
            if (v123 == 1)
            {
              v124 = @"Transport";
            }
            else
            {
              if (v123 != 2) {
                goto LABEL_208;
              }
              v124 = @"Tunnel";
            }
            CFDictionaryAddValue(v60, @"Mode", v124);
LABEL_208:
            int v125 = *(_DWORD *)(v122 + 12);
            if (v125) {
              NEAddIntToDictionary(v60, @"UniqueID", v125);
            }
LABEL_210:
            v126 = CFDictionaryGetValue(v8, @"Direction");
            if (v126)
            {
              int v127 = CFEqual(v126, @"In");
              BOOL v128 = v127 == 0;
              if (v127)
              {
                uint64_t v129 = 6;
LABEL_215:
                v130 = (unsigned __int8 *)a1[v129];
                if (v130) {
                  goto LABEL_219;
                }
                uint64_t v131 = 25;
                if (v128) {
                  uint64_t v131 = 23;
                }
                v130 = (unsigned __int8 *)a1[v131];
                if (v130)
                {
LABEL_219:
                  NEAddAddressToDictionary(v60, @"LocalAddress", v130 + 8);
                  NEAddPortToDictionary(v60, @"LocalPort", (uint64_t)(v130 + 8));
                  NEAddIntToDictionary(v60, @"LocalPrefix", v130[5]);
                  int v132 = v130[4];
                }
                else
                {
                  int v132 = 255;
                }
                uint64_t v133 = 5;
                if (v128) {
                  uint64_t v133 = 6;
                }
                uint64_t v134 = a1[v133];
                if (v134) {
                  goto LABEL_226;
                }
                uint64_t v135 = 23;
                if (v128) {
                  uint64_t v135 = 25;
                }
                uint64_t v134 = a1[v135];
                if (v134)
                {
LABEL_226:
                  NEAddAddressToDictionary(v60, @"RemoteAddress", (unsigned __int8 *)(v134 + 8));
                  NEAddPortToDictionary(v60, @"RemotePort", v134 + 8);
                  NEAddIntToDictionary(v60, @"RemotePrefix", *(unsigned __int8 *)(v134 + 5));
                }
                if (v132 != 255) {
                  NEAddIntToDictionary(v60, @"UpperLayerProtocol", v132);
                }
                NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, v60);
                v136 = v60;
LABEL_270:
                CFRelease(v136);
                goto LABEL_141;
              }
            }
            else
            {
              BOOL v128 = 1;
            }
            uint64_t v129 = 5;
            goto LABEL_215;
          case 6:
            int v63 = v156[0];
            uint64_t v64 = a3;
            int v65 = 8448;
            goto LABEL_114;
          case 8:
            int v63 = v156[0];
            uint64_t v64 = a3;
            int v65 = 8704;
            goto LABEL_114;
          case 0xE:
            uint64_t v85 = a1[18];
            if (v85)
            {
              int v82 = *(_DWORD *)(v85 + 8);
              SEL v83 = @"PolicyID";
LABEL_117:
              int v86 = v8;
LABEL_136:
              NEAddIntToDictionary(v86, v83, v82);
LABEL_137:
              int v54 = *(unsigned __int8 *)(v3 + 1);
            }
            else
            {
              int v54 = 14;
            }
LABEL_138:
            int v55 = v156[0];
            SEL v56 = *(NSObject **)(a3 + 96);
LABEL_139:
            char v57 = 1;
LABEL_140:
            NEIPSecDBNotifyRequest(v56, v54, v55, v57, 0);
            goto LABEL_141;
          case 0xF:
          case 0x16:
            NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, 0);
LABEL_62:
            uint64_t v50 = *(__CFDictionary **)(a3 + 88);
            goto LABEL_72;
          case 0x10:
            CFAllocatorRef v66 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFMutableDictionaryRef v67 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (!v67) {
              goto LABEL_137;
            }
            uint64_t v68 = v67;
            uint64_t v69 = a1[22];
            if (v69)
            {
              if (*(unsigned char *)(v69 + 52))
              {
                CFStringRef v70 = CFStringCreateWithCString(v66, (const char *)(v69 + 52), 0x600u);
                if (v70)
                {
                  CFStringRef v71 = v70;
                  CFDictionaryAddValue(0, @"IPSecInterface", v70);
                  CFRelease(v71);
                }
              }
              if (*(unsigned char *)(v69 + 28))
              {
                CFStringRef v72 = CFStringCreateWithCString(v66, (const char *)(v69 + 28), 0x600u);
                if (v72)
                {
                  CFStringRef v73 = v72;
                  CFDictionaryAddValue(0, @"OutgoingInterface", v72);
                  CFRelease(v73);
                }
              }
              if (*(unsigned char *)(v69 + 4))
              {
                CFStringRef v74 = CFStringCreateWithCString(v66, (const char *)(v69 + 4), 0x600u);
                if (v74)
                {
                  CFStringRef v75 = v74;
                  CFDictionaryAddValue(0, @"InternalInterface", v74);
                  CFRelease(v75);
                }
              }
              if (*(_WORD *)(v69 + 76)) {
                CFDictionaryAddValue(0, @"IntializeDisabled", (const void *)*MEMORY[0x1E4F1CFD0]);
              }
            }
            unint64_t v76 = (unsigned __int16 *)a1[18];
            if (!v76) {
              goto LABEL_254;
            }
            int v77 = *((unsigned __int8 *)v76 + 6);
            if (v77 == 1)
            {
              uint64_t v78 = @"In";
            }
            else
            {
              if (v77 != 2) {
                goto LABEL_183;
              }
              uint64_t v78 = @"Out";
            }
            CFDictionaryAddValue(v68, @"Direction", v78);
LABEL_183:
            NEAddIntToDictionary(v68, @"PolicyID", *((_DWORD *)v76 + 2));
            unint64_t v117 = v76[2];
            if (v117 <= 5) {
              CFDictionaryAddValue(v68, @"PolicyType", off_1E5991550[v117]);
            }
            if (*v76 < 3u) {
              goto LABEL_252;
            }
            int v118 = *((unsigned __int8 *)v76 + 21);
            if (*((unsigned char *)v76 + 21))
            {
              if (v118 == 3)
              {
                v119 = @"Unique";
              }
              else
              {
                if (v118 != 2) {
                  goto LABEL_237;
                }
                v119 = @"Require";
              }
            }
            else
            {
              v119 = @"None";
            }
            CFDictionaryAddValue(v68, @"Level", v119);
LABEL_237:
            int v137 = *((unsigned __int8 *)v76 + 20);
            if (v137 == 1)
            {
              v138 = @"Transport";
            }
            else
            {
              if (v137 != 2) {
                goto LABEL_242;
              }
              v138 = @"Tunnel";
            }
            CFDictionaryAddValue(v68, @"Mode", v138);
LABEL_242:
            int v139 = v76[9];
            if (v139 == 50)
            {
              v140 = @"ESP";
            }
            else
            {
              if (v139 != 51) {
                goto LABEL_247;
              }
              v140 = @"AH";
            }
            CFDictionaryAddValue(v68, @"IPSecProtocol", v140);
LABEL_247:
            if (v76[11]) {
              NEAddIntToDictionary(v68, @"UniqueID", v76[11]);
            }
            unint64_t v141 = v76[8];
            if (v141 >= 9)
            {
              uint64_t v142 = *((unsigned __int8 *)v76 + 24);
              v143 = (unsigned __int8 *)v76 + v142 + 24;
              if (v142 + *v143 + 8 == v141)
              {
                NEAddAddressToDictionary(v68, @"OuterLocalAddress", (unsigned __int8 *)v76 + 24);
                NEAddAddressToDictionary(v68, @"OuterRemoteAddress", v143);
              }
            }
LABEL_252:
            if (*((unsigned char *)v76 + 6) == 1)
            {
              int v144 = 0;
              uint64_t v145 = 6;
            }
            else
            {
LABEL_254:
              int v144 = 1;
              uint64_t v145 = 5;
            }
            v146 = (unsigned __int8 *)a1[v145];
            if (v146) {
              goto LABEL_259;
            }
            uint64_t v147 = 25;
            if (v144) {
              uint64_t v147 = 23;
            }
            v146 = (unsigned __int8 *)a1[v147];
            if (v146)
            {
LABEL_259:
              NEAddAddressToDictionary(v68, @"LocalAddress", v146 + 8);
              NEAddPortToDictionary(v68, @"LocalPort", (uint64_t)(v146 + 8));
              NEAddIntToDictionary(v68, @"LocalPrefix", v146[5]);
              int v148 = v146[4];
            }
            else
            {
              int v148 = 255;
            }
            uint64_t v149 = 5;
            if (v144) {
              uint64_t v149 = 6;
            }
            uint64_t v150 = a1[v149];
            if (v150) {
              goto LABEL_266;
            }
            uint64_t v151 = 23;
            if (v144) {
              uint64_t v151 = 25;
            }
            uint64_t v150 = a1[v151];
            if (v150)
            {
LABEL_266:
              NEAddAddressToDictionary(v68, @"RemoteAddress", (unsigned __int8 *)(v150 + 8));
              NEAddPortToDictionary(v68, @"RemotePort", v150 + 8);
              NEAddIntToDictionary(v68, @"RemotePrefix", *(unsigned __int8 *)(v150 + 5));
            }
            if (v148 != 255) {
              NEAddIntToDictionary(v68, @"UpperLayerProtocol", v148);
            }
            NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), *(unsigned __int8 *)(v3 + 1), v156[0], 1, v68);
            v136 = v68;
            goto LABEL_270;
          case 0x17:
            if (HIBYTE(v155))
            {
              int v63 = v156[0];
              uint64_t v64 = a3;
              int v65 = 10240;
            }
            else
            {
              if (!(_BYTE)v155)
              {
LABEL_141:
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 80))) {
                  NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), 9, 0, 1, 0);
                }
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a3 + 88))) {
                  NEIPSecDBNotifyRequest(*(NSObject **)(a3 + 96), 19, 0, 1, 0);
                }
                goto LABEL_145;
              }
              int v63 = v156[0];
              uint64_t v64 = a3;
              int v65 = 8208;
            }
LABEL_114:
            NEIPSecDBNotifyClient(v64, v63, v65);
            goto LABEL_141;
          case 0x1A:
            int64_t v79 = CFDictionaryGetValue(v8, @"Direction");
            if (v79) {
              int v80 = CFEqual(v79, @"In");
            }
            else {
              int v80 = 0;
            }
            uint64_t v87 = a1[22];
            if (v87)
            {
              char v88 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
              if (*(unsigned char *)(v87 + 52))
              {
                CFStringRef v89 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(v87 + 52), 0x600u);
                if (v89)
                {
                  CFStringRef v90 = v89;
                  CFDictionarySetValue(v8, @"IPSecInterface", v89);
                  CFRelease(v90);
                }
              }
              int v92 = *(unsigned __int8 *)(v87 + 28);
              v91 = (const char *)(v87 + 28);
              if (v92)
              {
                CFStringRef v93 = CFStringCreateWithCString(*v88, v91, 0x600u);
                if (v93)
                {
                  CFStringRef v94 = v93;
                  CFDictionarySetValue(v8, @"OutgoingInterface", v93);
                  CFRelease(v94);
                }
              }
            }
            uint64_t v95 = 28;
            if (!v80) {
              uint64_t v95 = 27;
            }
            uint64_t v96 = a1[v95];
            if (v96)
            {
              CFDictionaryRemoveValue(v8, @"LocalAddress");
              CFDictionaryRemoveValue(v8, @"LocalPort");
              CFDictionaryRemoveValue(v8, @"LocalPrefix");
              NEAddAddressToDictionary(v8, @"LocalAddress", (unsigned __int8 *)(v96 + 8));
              NEAddPortToDictionary(v8, @"LocalPort", v96 + 8);
              NEAddIntToDictionary(v8, @"LocalPrefix", *(unsigned __int8 *)(v96 + 5));
            }
            uint64_t v97 = 27;
            if (!v80) {
              uint64_t v97 = 28;
            }
            uint64_t v98 = a1[v97];
            if (!v98) {
              goto LABEL_137;
            }
            CFDictionaryRemoveValue(v8, @"RemoteAddress");
            CFDictionaryRemoveValue(v8, @"RemotePort");
            CFDictionaryRemoveValue(v8, @"RemotePrefix");
            NEAddAddressToDictionary(v8, @"RemoteAddress", (unsigned __int8 *)(v98 + 8));
            NEAddPortToDictionary(v8, @"RemotePort", v98 + 8);
            int v82 = *(unsigned __int8 *)(v98 + 5);
            int v86 = v8;
            SEL v83 = @"RemotePrefix";
            goto LABEL_136;
          default:
            goto LABEL_141;
        }
      }
    }
  }
}

CFDictionaryRef NEIPSecDBGetSAWithMessage(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v20 = ne_log_obj();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    int v21 = "%@ pfkey received message is NULL";
LABEL_35:
    _os_log_error_impl(&dword_19DDAF000, v20, OS_LOG_TYPE_ERROR, v21, buf, 0xCu);
    return 0;
  }
  if (a3) {
    *a3 = -1;
  }
  uint64_t v5 = *a2;
  uint64_t v6 = a2[6];
  if (v6) {
    uint64_t v7 = v6 + 8;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v27 = v7;
  if (!v5)
  {
    uint64_t v20 = ne_log_obj();
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = a1;
    int v21 = "%@ pfkey received msg is NULL";
    goto LABEL_35;
  }
  uint64_t v8 = a2[1];
  if (!v8)
  {
    int v22 = ne_log_obj();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_19DDAF000, v22, OS_LOG_TYPE_INFO, "%@ pfkey received SA is NULL", buf, 0xCu);
    }
    return 0;
  }
  CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 80);
  if (!v9) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(v9);
  if (Count < 1) {
    return 0;
  }
  size_t v11 = Count;
  unsigned int v12 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  int v13 = (const void **)malloc_type_calloc(v11, 8uLL, 0x80040B8603338uLL);
  uint64_t v26 = v12;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 80), v12, v13);
  for (uint64_t i = 0; i != v11; ++i)
  {
    *(void *)buf = 0;
    int v31 = 0;
    char v30 = 0;
    int v29 = 0;
    CFDictionaryRef v15 = (const __CFDictionary *)v13[i];
    Value = CFDictionaryGetValue(v15, @"Direction");
    if (Value) {
      LODWORD(Value) = CFEqual(Value, @"In");
    }
    if (Value) {
      dispatch_queue_t v17 = (void **)buf;
    }
    else {
      dispatch_queue_t v17 = 0;
    }
    if (Value) {
      int v18 = 0;
    }
    else {
      int v18 = (void **)buf;
    }
    if (NEIPSecDBFilloutBasicSAInfo(v15, &v30, &v29, &v31, v17, v18, 0))
    {
      if ((!v31 || v31 == *(_DWORD *)(v8 + 4)) && v30 == *(unsigned char *)(v5 + 3))
      {
        int v19 = *(void **)buf;
        if (NEIPSecDBAddressesMatch(*(uint64_t *)buf, v27))
        {
          int valuePtr = 0;
          unsigned int v25 = v26;
          CFNumberGetValue((CFNumberRef)v26[i], kCFNumberIntType, &valuePtr);
          if (*(void *)buf) {
            free(*(void **)buf);
          }
          if (a3) {
            *a3 = valuePtr;
          }
          goto LABEL_41;
        }
        if (v19)
        {
LABEL_26:
          free(v19);
          continue;
        }
      }
      else
      {
        int v19 = *(void **)buf;
        if (*(void *)buf) {
          goto LABEL_26;
        }
      }
    }
  }
  CFDictionaryRef v15 = 0;
  CFDictionaryRef v23 = 0;
  unsigned int v25 = v26;
  if (!v26) {
    goto LABEL_42;
  }
LABEL_41:
  free(v25);
  CFDictionaryRef v23 = v15;
LABEL_42:
  free(v13);
  return v23;
}

BOOL NEIPSecDBAddressesMatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 1);
    if (v3 == *(unsigned __int8 *)(a2 + 1))
    {
      if (v3 == 30) {
        return *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
      }
      if (v3 == 2) {
        return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4);
      }
    }
    return 0;
  }
  return v2;
}

uint64_t NEIPSecDBExtractSPIFromPFKeyMessage(void *a1)
{
  uint64_t result = 0;
  unsigned int v3 = *(unsigned __int8 *)(*a1 + 1);
  if (v3 <= 0x1A)
  {
    int v4 = 1 << v3;
    if ((v4 & 0x40006AE) != 0)
    {
      int v5 = *(_DWORD *)(*a1 + 12);
      if (v5 != getpid() || !*a1) {
        return 0;
      }
    }
    else if ((v4 & 0x110) == 0)
    {
      return result;
    }
    uint64_t v6 = a1[1];
    if (v6) {
      return *(unsigned int *)(v6 + 4);
    }
    return 0;
  }
  return result;
}

NSObject *NEIPSecDBNotifyRequest(NSObject *result, int a2, int a3, char a4, CFTypeRef cf)
{
  if (result)
  {
    int v5 = result;
    while (1)
    {
      Class isa = v5->isa;
      if (LODWORD(v5[3].isa) == a2 && HIDWORD(v5[3].isa) == a3) {
        break;
      }
      int v5 = v5->isa;
      if (!isa) {
        return result;
      }
    }
    LOBYTE(v5[4].isa) = a4;
    if (cf) {
      uint64_t v7 = (objc_class *)CFRetain(cf);
    }
    else {
      uint64_t v7 = 0;
    }
    v5[5].Class isa = v7;
    uint64_t result = v5[2].isa;
    if (result)
    {
      return dispatch_semaphore_signal(result);
    }
  }
  return result;
}

BOOL NEIPSecDBStatsHandleReply(uint64_t a1, uint64_t *a2, void *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  if (!*a2 || (uint64_t v6 = a2[20]) == 0 || (v7 = a2[21]) == 0)
  {
    uint64_t v16 = ne_log_obj();
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v36 = 136315138;
    id v37 = "NEIPSecDBStatsHandleReply";
    int v13 = "%s: Bad sadb getsastat response";
    uint64_t v14 = v16;
    uint32_t v15 = 12;
    goto LABEL_31;
  }
  uint64_t v8 = *(void *)(v6 + 8);
  if (!v8)
  {
    dispatch_queue_t v17 = ne_log_obj();
    BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v18 = *(unsigned __int8 *)(v5 + 1);
    int v36 = 136315394;
    id v37 = "NEIPSecDBStatsHandleReply";
    __int16 v38 = 1024;
    int v39 = v18;
    int v13 = "%s: msg type %d: session-id[0] is invalid.";
LABEL_20:
    uint64_t v14 = v17;
    uint32_t v15 = 18;
LABEL_31:
    _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v36, v15);
    return 0;
  }
  *a3 = v8;
  if (!*(_DWORD *)(v7 + 12))
  {
    dispatch_queue_t v17 = ne_log_obj();
    BOOL result = os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v19 = *(unsigned __int8 *)(v5 + 1);
    int v36 = 136315394;
    id v37 = "NEIPSecDBStatsHandleReply";
    __int16 v38 = 1024;
    int v39 = v19;
    int v13 = "%s: msg type %d: sastats is invalid.";
    goto LABEL_20;
  }
  if (!a1)
  {
    uint64_t v35 = ne_log_obj();
    BOOL result = os_log_type_enabled(v35, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    int v36 = 136315138;
    id v37 = "NEIPSecDBStatsUpdate";
    _os_log_fault_impl(&dword_19DDAF000, v35, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v36, 0xCu);
    return 0;
  }
  int v9 = *(_DWORD *)(v7 + 4);
  if (v8) {
    BOOL v10 = (v9 - 1) >= 2;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    size_t v11 = ne_log_obj();
    BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v36) = 0;
    int v13 = "invalid arguments";
    uint64_t v14 = v11;
    uint32_t v15 = 2;
    goto LABEL_31;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  int v22 = *(uint64_t **)(a1 + 104);
  if (!v22) {
    return 0;
  }
  while (*((_DWORD *)v22 + 4) != v8 && *((_DWORD *)v22 + 5) != v8)
  {
    BOOL result = 0;
    int v22 = (uint64_t *)*v22;
    if (!v22) {
      return result;
    }
  }
  uint64_t v23 = *(void *)(v7 + 32);
  if (v9 != 1)
  {
    if (v22[7] != v23)
    {
      v22[7] = v23;
      *((unsigned char *)v22 + 80) = 1;
      goto LABEL_39;
    }
LABEL_37:
    int32x2_t v24 = vadd_s32(*(int32x2_t *)((char *)v22 + 68), (int32x2_t)0x100000001);
    *(uint64_t *)((char *)v22 + 68) = (uint64_t)v24;
    int v25 = v24.i32[0];
    goto LABEL_40;
  }
  if (v22[6] == v23) {
    goto LABEL_37;
  }
  v22[6] = v23;
  *((unsigned char *)v22 + 81) = 1;
LABEL_39:
  int v25 = *((_DWORD *)v22 + 17) + 1;
  *((_DWORD *)v22 + 17) = v25;
LABEL_40:
  if (v25 != *((_DWORD *)v22 + 16)) {
    return 1;
  }
  unsigned int v26 = *((_DWORD *)v22 + 8);
  if (!v26)
  {
LABEL_49:
    unsigned int v31 = *((_DWORD *)v22 + 9);
    if (v31)
    {
      if (*((unsigned char *)v22 + 80) == 1 && !*((unsigned char *)v22 + 81))
      {
        int v32 = *((_DWORD *)v22 + 19) + 1;
        *((_DWORD *)v22 + 19) = v32;
        if (*((_DWORD *)v22 + 10) * v32 >= v31)
        {
          uint64_t v33 = ne_log_obj();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            int v34 = *((_DWORD *)v22 + 10) * *((_DWORD *)v22 + 19);
            int v36 = 136315394;
            id v37 = "NEIPSecDBStatsUpdate";
            __int16 v38 = 1024;
            int v39 = v34;
            _os_log_impl(&dword_19DDAF000, v33, OS_LOG_TYPE_DEFAULT, "%s: no incoming traffic on SA for past %d secs", (uint8_t *)&v36, 0x12u);
          }
          if (a5) {
            *a5 = 1;
          }
          *((_WORD *)v22 + 40) = 0;
          *((_DWORD *)v22 + 19) = 0;
        }
      }
      else
      {
        *((_DWORD *)v22 + 19) = 0;
        *((_WORD *)v22 + 40) = 0;
      }
    }
    return 1;
  }
  if (*((_DWORD *)v22 + 18) != v25)
  {
    *((_DWORD *)v22 + 11) = 0;
    goto LABEL_49;
  }
  int v27 = *((_DWORD *)v22 + 10);
  int v28 = *((_DWORD *)v22 + 11) + 1;
  *((_DWORD *)v22 + 11) = v28;
  if (v27 * v28 < v26) {
    goto LABEL_49;
  }
  int v29 = ne_log_obj();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    int v30 = *((_DWORD *)v22 + 10) * *((_DWORD *)v22 + 11);
    int v36 = 136315394;
    id v37 = "NEIPSecDBStatsUpdate";
    __int16 v38 = 1024;
    int v39 = v30;
    _os_log_impl(&dword_19DDAF000, v29, OS_LOG_TYPE_INFO, "%s: SA is idle for past %d secs", (uint8_t *)&v36, 0x12u);
  }
  BOOL result = 1;
  if (a4) {
    *a4 = 1;
  }
  return result;
}

void NEIPSecDBNotifyClient(uint64_t a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && *(void *)(a1 + 32) && !*(unsigned char *)(a1 + 56) && *(void *)(a1 + 48))
  {
    uint64_t v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v12 = a1;
      __int16 v13 = 1024;
      int v14 = a3;
      __int16 v15 = 1024;
      int v16 = a2;
      _os_log_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_INFO, "%@ received notification %#x for SAID %u", buf, 0x18u);
    }
    CFRetain((CFTypeRef)a1);
    uint64_t v7 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBNotifyClient_block_invoke;
    block[3] = &__block_descriptor_tmp_307;
    int v9 = a2;
    int v10 = a3;
    block[4] = a1;
    void block[5] = 0;
    dispatch_async(v7, block);
  }
}

void __NEIPSecDBNotifyClient_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 56)) {
    (*(void (**)(uint64_t, void, void, void, void))(v2 + 32))(v2, *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(void *)(a1 + 40), *(void *)(v2 + 40));
  }
  unsigned int v3 = *(const void **)(a1 + 40);
  if (v3) {
    CFRelease(v3);
  }
  int v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRelease(v4);
  }
}

BOOL NEIPSecDBFilloutBasicSAInfo(CFDictionaryRef theDict, char *a2, int *a3, _DWORD *a4, void **a5, void **a6, char *a7)
{
  if (theDict)
  {
    if (a3)
    {
      Value = CFDictionaryGetValue(theDict, @"Mode");
      if (Value)
      {
        if (CFEqual(Value, @"Transport")) {
          int v15 = 1;
        }
        else {
          int v15 = 2;
        }
      }
      else
      {
        int v15 = 2;
      }
      *a3 = v15;
    }
    if (a2)
    {
      int v18 = CFDictionaryGetValue(theDict, @"IPSecProtocol");
      if (v18)
      {
        if (CFEqual(v18, @"AH")) {
          char v19 = 2;
        }
        else {
          char v19 = 3;
        }
      }
      else
      {
        char v19 = 3;
      }
      *a2 = v19;
    }
    if (a4)
    {
      unsigned int valuePtr = 0;
      CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SPIValue");
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberIntType, &valuePtr);
        unsigned int v21 = valuePtr;
      }
      else
      {
        unsigned int v21 = 0;
      }
      *a4 = bswap32(v21);
    }
    if (a5)
    {
      CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(theDict, @"LocalAddress");
      uint64_t v23 = CFDictionaryGetValue(theDict, @"LocalPort");
      *a5 = NECreateAddressStructFromString(v22, (uint64_t)v23, 0);
    }
    if (a6)
    {
      CFStringRef v24 = (const __CFString *)CFDictionaryGetValue(theDict, @"RemoteAddress");
      int v25 = CFDictionaryGetValue(theDict, @"RemotePort");
      *a6 = NECreateAddressStructFromString(v24, (uint64_t)v25, 0);
    }
    if (a7)
    {
      if (CFDictionaryContainsKey(theDict, @"IPSecInterface"))
      {
        CFStringRef v26 = (const __CFString *)CFDictionaryGetValue(theDict, @"IPSecInterface");
        CFStringGetCString(v26, a7, 24, 0x600u);
      }
    }
    return 1;
  }
  else
  {
    int v16 = ne_log_obj();
    BOOL result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_ERROR, "saData is NULL", buf, 2u);
      return 0;
    }
  }
  return result;
}

__CFString *__NEIPSecDBCopyDescription(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<NEIPSecDB %p [%p]> {", a1, v2);
  if (a1) {
    CFStringAppendFormat(Mutable, 0, @"UniqueIndex = %llu", a1[2]);
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

void __NEIPSecDBDeallocate(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = a1[8];
    if (v2)
    {
      NEPFKeyClose(v2);
      a1[8] = 0;
    }
    unsigned int v3 = a1[6];
    if (v3)
    {
      dispatch_release(v3);
      a1[6] = 0;
    }
    int v4 = (const void *)a1[10];
    if (v4)
    {
      CFRelease(v4);
      a1[10] = 0;
    }
    uint64_t v5 = (const void *)a1[11];
    if (v5)
    {
      CFRelease(v5);
      a1[11] = 0;
    }
    uint64_t v6 = (const void *)a1[3];
    if (v6)
    {
      CFRelease(v6);
      a1[3] = 0;
    }
  }
}

void *NEIPSecDBCreateSession(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  return NEIPSecDBCreateSessionWithSocket(a1, a2, a3, a4, 0xFFFFFFFF);
}

BOOL NEIPSecDBSetDispatchQueue(uint64_t a1, dispatch_object_t object)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v4 = *(NSObject **)(a1 + 48);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 48) = 0;
    }
    if (object)
    {
      *(void *)(a1 + 48) = object;
      dispatch_retain(object);
    }
    return 1;
  }
  else
  {
    uint64_t v6 = ne_log_obj();
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_FAULT);
    if (result)
    {
      int v7 = 136315138;
      uint64_t v8 = "NEIPSecDBSetDispatchQueue";
      _os_log_fault_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v7, 0xCu);
      return 0;
    }
  }
  return result;
}

uint64_t NEIPSecDBAddLarvalSA(uint64_t a1, CFTypeRef cf, unsigned int *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v27 = ne_log_obj();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v48) = 136315138;
    *(void *)((char *)&v48 + 4) = "NEIPSecDBAddLarvalSA";
    int v28 = "%s called with null session";
LABEL_46:
    _os_log_fault_impl(&dword_19DDAF000, v27, OS_LOG_TYPE_FAULT, v28, (uint8_t *)&v48, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 80))
  {
    int v27 = ne_log_obj();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v48) = 136315138;
    *(void *)((char *)&v48 + 4) = "NEIPSecDBAddLarvalSA";
    int v28 = "%s called with null session->sas";
    goto LABEL_46;
  }
  uint8_t v41 = 0;
  int v40 = 0;
  __int16 v38 = 0;
  int v39 = 0;
  int valuePtr = 0;
  uint64_t v36 = 0;
  unsigned int v35 = 0;
  v52[0] = 0;
  buffer[0] = 0;
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = &v48;
  uint64_t v49 = 0x2000000000;
  int v50 = 0;
  uint64_t v31 = 0;
  int v32 = &v31;
  uint64_t v33 = 0x2000000000;
  uint64_t v34 = 0;
  if (!NEIPSecDBValidateSADictionary(cf, 1, 0))
  {
    unsigned int v21 = ne_log_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = a1;
      _os_log_error_impl(&dword_19DDAF000, v21, OS_LOG_TYPE_ERROR, "%@ add larval SA dictionary validation failed", buf, 0xCu);
    }
    goto LABEL_31;
  }
  if (NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, (char *)&v41, &v40, &v35, &v39, &v38, v52))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"UniqueID");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LifeTimeinSeconds");
    CFNumberRef v8 = v7;
    if (v7) {
      CFNumberGetValue(v7, kCFNumberLongType, &v36);
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface"))
    {
      CFStringRef v9 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OutgoingInterface");
      CFStringGetCString(v9, buffer, 16, 0x600u);
    }
    BOOL v10 = v8 != 0;
    size_t v11 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBAddLarvalSA_block_invoke;
    block[3] = &unk_1E5991170;
    void block[6] = a1;
    block[7] = cf;
    block[4] = &v48;
    void block[5] = &v31;
    dispatch_sync(v11, block);
    uint64_t v12 = *(NSObject **)(a1 + 64);
    dispatch_queue_t v13 = _NEIPSecDBGetQueue();
    unsigned int v14 = bswap32(v35);
    int v15 = v52;
    if (!v52[0]) {
      int v15 = 0;
    }
    int v16 = buffer;
    if (!buffer[0]) {
      int v16 = 0;
    }
    *(void *)&long long v29 = v15;
    *((void *)&v29 + 1) = v16;
    if (NEPFKeySendGetSPI(v12, (uint64_t)v13, v41, v40, (uint64_t)v38, (uint64_t)v39, v14, v14, valuePtr, v10, v36, SHIDWORD(v36), 0, 1u, v29))
    {
      if (NEIPSecDBCopyResponseForQueuedRequest(v32[3], 0))
      {
        if (a3)
        {
          CFDictionaryRef v17 = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(a1 + 80), *(_DWORD *)(*((void *)&v48 + 1) + 24));
          if (v17) {
            *a3 = NEGetIntFromDictionary(v17, @"SPIValue", 0);
          }
        }
        int v18 = ne_log_obj();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          int v19 = *(_DWORD *)(*((void *)&v48 + 1) + 24);
          if (a3) {
            unsigned int v20 = bswap32(*a3);
          }
          else {
            unsigned int v20 = 0;
          }
          *(_DWORD *)buf = 138412802;
          uint64_t v43 = a1;
          __int16 v44 = 1024;
          int v45 = v19;
          __int16 v46 = 1024;
          unsigned int v47 = v20;
          _os_log_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_INFO, "%@ added larval SAID %u SPI %08X", buf, 0x18u);
        }
        goto LABEL_31;
      }
      CFStringRef v22 = ne_log_obj();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = a1;
      uint64_t v23 = "%@ add larval SA, failed to receive response for pfkey get spi";
    }
    else
    {
      CFStringRef v22 = ne_log_obj();
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
LABEL_28:
        NEIPSecDBRemoveSAIDFromSAs(a1, *(_DWORD *)(*((void *)&v48 + 1) + 24));
        *(_DWORD *)(*((void *)&v48 + 1) + 24) = 0;
        goto LABEL_31;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = a1;
      uint64_t v23 = "%@ add larval SA, pfkey send get spi failed";
    }
    _os_log_error_impl(&dword_19DDAF000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0xCu);
    goto LABEL_28;
  }
LABEL_31:
  if (v39) {
    free(v39);
  }
  if (v38) {
    free(v38);
  }
  uint64_t v24 = v32[3];
  if (v24)
  {
    NEIPSecDBRemoveQueuedRequest(v24);
    free((void *)v32[3]);
  }
  uint64_t v25 = *(unsigned int *)(*((void *)&v48 + 1) + 24);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v48, 8);
  return v25;
}

BOOL NEIPSecDBValidateSADictionary(CFTypeRef cf, int a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (NEInitCFTypes_onceToken == -1)
  {
    if (!cf) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
    if (!cf) {
      return 0;
    }
  }
  uint64_t v6 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(cf) != v6) {
    return 0;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"LocalAddress", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3790;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"LocalAddress";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"RemoteAddress", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3791;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"RemoteAddress";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalPrefix")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"LocalPrefix", CFNUMBER_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3792;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"LocalPrefix";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFNUMBER_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemotePrefix")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"RemotePrefix", CFNUMBER_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3793;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"RemotePrefix";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFNUMBER_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalPort")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"LocalPort", CFNUMBER_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3794;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"LocalPort";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFNUMBER_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemotePort")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"RemotePort", CFNUMBER_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3795;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"RemotePort";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFNUMBER_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"IPSecInterface")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"IPSecInterface", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3796;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"IPSecInterface";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"OutgoingInterface", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3797;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"OutgoingInterface";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_68;
  }
  if (a3) {
    return 1;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"Mode", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3799;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"Mode";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"IPSecProtocol", CFSTRING_TYPE))
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v12 = 136315906;
    dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
    __int16 v14 = 1024;
    int v15 = 3800;
    __int16 v16 = 2112;
    CFDictionaryRef v17 = @"IPSecProtocol";
    __int16 v18 = 2048;
    CFTypeID TypeID = CFSTRING_TYPE;
    CFStringRef v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_68;
  }
  if (a2) {
    return 1;
  }
  if (NEGetValueWithType((const __CFDictionary *)cf, @"SPIValue", CFNUMBER_TYPE))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"ReplayWindowSize")
      && !NEGetValueWithType((const __CFDictionary *)cf, @"ReplayWindowSize", CFNUMBER_TYPE))
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3804;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"ReplayWindowSize";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFNUMBER_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LifeTimeinSeconds") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"LifeTimeinSeconds", CFNUMBER_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3805;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"LifeTimeinSeconds";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFNUMBER_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"EncryptionAlgorithm") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"EncryptionAlgorithm", CFSTRING_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3807;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"EncryptionAlgorithm";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFSTRING_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"EncryptionKey") {
           && (CFTypeID v10 = CFDataGetTypeID(), !NEGetValueWithType((const __CFDictionary *)cf, @"EncryptionKey", v10)))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3808;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"EncryptionKey";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFDataGetTypeID();
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"AuthAlgorithm") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"AuthAlgorithm", CFSTRING_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3810;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"AuthAlgorithm";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFSTRING_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"AuthKey") {
           && (CFTypeID v11 = CFDataGetTypeID(), !NEGetValueWithType((const __CFDictionary *)cf, @"AuthKey", v11)))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3811;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"AuthKey";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFDataGetTypeID();
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"NATTraversal") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"NATTraversal", CFBOOLEAN_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3813;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"NATTraversal";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFBOOLEAN_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"NATTKeepAlive") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"NATTKeepAlive", CFBOOLEAN_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3814;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"NATTKeepAlive";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFBOOLEAN_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"NATTDetectedPeer") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"NATTDetectedPeer", CFBOOLEAN_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3815;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"NATTDetectedPeer";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFBOOLEAN_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"NATTPort") {
           && !NEGetValueWithType((const __CFDictionary *)cf, @"NATTPort", CFNUMBER_TYPE))
    }
    {
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3816;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"NATTPort";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFNUMBER_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
        goto LABEL_68;
      }
    }
    else
    {
      if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"NATTSourcePort")
        || NEGetValueWithType((const __CFDictionary *)cf, @"NATTSourcePort", CFNUMBER_TYPE))
      {
        return 1;
      }
      CFNumberRef v8 = ne_log_obj();
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v12 = 136315906;
        dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
        __int16 v14 = 1024;
        int v15 = 3817;
        __int16 v16 = 2112;
        CFDictionaryRef v17 = @"NATTSourcePort";
        __int16 v18 = 2048;
        CFTypeID TypeID = CFNUMBER_TYPE;
        CFStringRef v9 = "%s:%d: type of value for key %@ != %lu";
LABEL_68:
        _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v12, 0x26u);
        return 0;
      }
    }
  }
  else
  {
    CFNumberRef v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v12 = 136315906;
      dispatch_queue_t v13 = "NEIPSecDBValidateSADictionary";
      __int16 v14 = 1024;
      int v15 = 3803;
      __int16 v16 = 2112;
      CFDictionaryRef v17 = @"SPIValue";
      __int16 v18 = 2048;
      CFTypeID TypeID = CFNUMBER_TYPE;
      CFStringRef v9 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_68;
    }
  }
  return result;
}

_OWORD *__NEIPSecDBAddLarvalSA_block_invoke(void *a1)
{
  uint64_t v3 = a1[6];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[7];
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 + 1) > 1) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)(v3 + 72) = v5;
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v4;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
  if (MutableCopy)
  {
    CFNumberRef v7 = MutableCopy;
    CFDictionaryAddValue(MutableCopy, @"Direction", @"In");
    NEAddValueToIntKeyedDictionary(*(__CFDictionary **)(a1[6] + 80), *(_DWORD *)(*(void *)(a1[4] + 8) + 24), v7);
    CFRelease(v7);
  }
  BOOL result = NEIPSecDBCreateQueuedRequest(a1[6], 1, *(_DWORD *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void NEIPSecDBRemoveSAIDFromSAs(uint64_t a1, int a2)
{
  int v4 = _NEIPSecDBGetQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __NEIPSecDBRemoveSAIDFromSAs_block_invoke;
  v5[3] = &__block_descriptor_tmp_228;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

uint64_t NEIPSecDBCopyResponseForQueuedRequest(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result + 24);
    BOOL v5 = v4 > 0x1A;
    int v6 = (1 << v4) & 0x400000E;
    if (v5 || v6 == 0) {
      int64_t v8 = 2000000000;
    }
    else {
      int64_t v8 = 4000000000;
    }
    CFStringRef v9 = *(NSObject **)(result + 16);
    dispatch_time_t v10 = dispatch_time(0, v8);
    dispatch_semaphore_wait(v9, v10);
    CFTypeID v11 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBCopyResponseForQueuedRequest_block_invoke;
    block[3] = &__block_descriptor_tmp_230;
    block[4] = v3;
    dispatch_sync(v11, block);
    BOOL result = *(unsigned __int8 *)(v3 + 32);
    if (a2)
    {
      if (*(unsigned char *)(v3 + 32)) {
        *a2 = *(void *)(v3 + 40);
      }
    }
  }
  return result;
}

void NEIPSecDBRemoveQueuedRequest(uint64_t a1)
{
  CFDictionaryRef v2 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBRemoveQueuedRequest_block_invoke;
  block[3] = &__block_descriptor_tmp_231;
  block[4] = a1;
  dispatch_sync(v2, block);
}

void __NEIPSecDBRemoveQueuedRequest_block_invoke(uint64_t a1)
{
  CFDictionaryRef v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 8) = v2[1];
    CFDictionaryRef v2 = *(uint64_t **)(a1 + 32);
    uint64_t v3 = *v2;
  }
  *(void *)v2[1] = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    BOOL v5 = *(NSObject **)(v4 + 16);
    if (v5)
    {
      dispatch_release(v5);
      *(void *)(*(void *)(a1 + 32) + 16) = 0;
    }
  }
}

void __NEIPSecDBCopyResponseForQueuedRequest_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = 0;
}

void __NEIPSecDBRemoveSAIDFromSAs_block_invoke(uint64_t a1)
{
}

_OWORD *NEIPSecDBCreateQueuedRequest(uint64_t a1, int a2, int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v6 = malloc_type_malloc(0x30uLL, 0x10E004027337507uLL);
    *int v6 = 0u;
    v6[1] = 0u;
    v6[2] = 0u;
    *((_DWORD *)v6 + 6) = a2;
    *((_DWORD *)v6 + 7) = a3;
    *((void *)v6 + 2) = dispatch_semaphore_create(0);
    uint64_t v9 = *(void *)(a1 + 96);
    int64_t v8 = (void *)(a1 + 96);
    uint64_t v7 = v9;
    *(void *)int v6 = v9;
    if (v9) {
      *(void *)(v7 + 8) = v6;
    }
    *int64_t v8 = v6;
    *((void *)v6 + 1) = v8;
  }
  else
  {
    CFTypeID v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      int v12 = 136315138;
      dispatch_queue_t v13 = "NEIPSecDBCreateQueuedRequest";
      _os_log_fault_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v12, 0xCu);
    }
    return 0;
  }
  return v6;
}

uint64_t NEIPSecDBGetSPIForSA(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    dispatch_time_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBGetSPIForSA";
    CFTypeID v11 = "%s called with null session";
LABEL_14:
    _os_log_fault_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_FAULT, v11, (uint8_t *)&buf, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 80))
  {
    dispatch_time_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBGetSPIForSA";
    CFTypeID v11 = "%s called with null session->sas";
    goto LABEL_14;
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  uint64_t v4 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBGetSPIForSA_block_invoke;
  block[3] = &unk_1E5991198;
  block[4] = &buf;
  void block[5] = a1;
  int v13 = a2;
  dispatch_sync(v4, block);
  CFDictionaryRef v5 = *(const __CFDictionary **)(*((void *)&buf + 1) + 24);
  if (v5)
  {
    uint64_t v6 = NEGetIntFromDictionary(v5, @"SPIValue", 0);
    uint64_t v7 = *((void *)&buf + 1);
    int64_t v8 = *(const void **)(*((void *)&buf + 1) + 24);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(v7 + 24) = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  _Block_object_dispose(&buf, 8);
  return v6;
}

const void *__NEIPSecDBGetSPIForSA_block_invoke(uint64_t a1)
{
  BOOL result = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(*(void *)(a1 + 40) + 80), *(_DWORD *)(a1 + 48));
  if (result) {
    BOOL result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t NEIPSecDBAddSA(uint64_t a1, CFTypeRef cf)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    CFTypeID v11 = ne_log_obj();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v73) = 136315138;
    *(void *)((char *)&v73 + 4) = "NEIPSecDBAddSA";
    int v12 = "%s called with null session";
LABEL_36:
    _os_log_fault_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_FAULT, v12, (uint8_t *)&v73, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 80))
  {
    CFTypeID v11 = ne_log_obj();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v73) = 136315138;
    *(void *)((char *)&v73 + 4) = "NEIPSecDBAddSA";
    int v12 = "%s called with null session->sas";
    goto LABEL_36;
  }
  CFAllocatorRef v66 = 0;
  int v65 = 0;
  unsigned int v64 = 0;
  unsigned __int8 v63 = 0;
  int v62 = 0;
  unsigned __int8 v61 = 1;
  uint64_t v60 = 0;
  int valuePtr = 0;
  int v59 = 0;
  v77[0] = 0;
  buffer[0] = 0;
  int v57 = 0;
  *(void *)&long long v73 = 0;
  *((void *)&v73 + 1) = &v73;
  uint64_t v74 = 0x2000000000;
  int v75 = 0;
  uint64_t v53 = 0;
  int v54 = &v53;
  uint64_t v55 = 0x2000000000;
  uint64_t v56 = 0;
  if (!NEIPSecDBValidateSADictionary(cf, 0, 0))
  {
    dispatch_time_t v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v68 = a1;
      _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "%@ add SA dictionary validation failed", buf, 0xCu);
    }
    goto LABEL_108;
  }
  if (NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, (char *)&v63, &v62, &v64, (void **)&v66, &v65, v77))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"UniqueID");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ReplayWindowSize");
    if (v5) {
      CFNumberGetValue(v5, kCFNumberCharType, &v61);
    }
    uint64_t v6 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EncryptionAlgorithm");
    if (v6)
    {
      uint64_t v7 = v6;
      if (CFEqual(v6, @"DES"))
      {
        int v8 = 0;
        char v9 = 1;
LABEL_43:
        uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AuthAlgorithm");
        if (!v14) {
          goto LABEL_54;
        }
        uint64_t v15 = v14;
        if (CFEqual(v14, @"MD5-96"))
        {
          char v16 = 1;
          goto LABEL_55;
        }
        if (CFEqual(v15, @"SHA1-96"))
        {
          char v16 = 2;
          goto LABEL_55;
        }
        if (CFEqual(v15, @"SHA2-256"))
        {
          char v16 = 6;
          goto LABEL_55;
        }
        if (CFEqual(v15, @"SHA2-384"))
        {
          char v16 = 7;
          goto LABEL_55;
        }
        if (CFEqual(v15, @"SHA2-512")) {
          char v16 = 8;
        }
        else {
LABEL_54:
        }
          char v16 = 0;
LABEL_55:
        CFDataRef v17 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EncryptionKey");
        CFDataRef v18 = v17;
        if (v17) {
          CFIndex Length = CFDataGetLength(v17);
        }
        else {
          CFIndex Length = 0;
        }
        CFDataRef v20 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"AuthKey");
        CFDataRef v21 = v20;
        if (v20) {
          CFIndex v22 = CFDataGetLength(v20);
        }
        else {
          CFIndex v22 = 0;
        }
        if (Length | v22)
        {
          uint64_t v23 = (char *)malloc_type_malloc(v22 + Length, 0xC0EEEA2FuLL);
          if (Length)
          {
            BytePtr = CFDataGetBytePtr(v18);
            memcpy(v23, BytePtr, Length);
          }
          if (v22)
          {
            uint64_t v25 = CFDataGetBytePtr(v21);
            memcpy(&v23[Length], v25, v22);
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        CFBooleanRef v26 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTraversal");
        if (v26 && CFBooleanGetValue(v26)) {
          v8 |= 2u;
        }
        CFBooleanRef v27 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAlive");
        if (v27 && CFBooleanGetValue(v27)) {
          v8 |= 4u;
        }
        CFBooleanRef v28 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffload");
        if (v28 && CFBooleanGetValue(v28)) {
          v8 |= 0x8000u;
        }
        CFNumberRef v29 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffloadInterval");
        if (v29) {
          CFNumberGetValue(v29, kCFNumberShortType, &v57);
        }
        CFNumberRef v30 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveInterval");
        if (v30) {
          CFNumberGetValue(v30, kCFNumberShortType, (char *)&v57 + 2);
        }
        CFBooleanRef v31 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTDetectedPeer");
        if (v31 && CFBooleanGetValue(v31)) {
          v8 |= 0x1000u;
        }
        CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LifeTimeinSeconds");
        if (v32) {
          CFNumberGetValue(v32, kCFNumberLongType, &v60);
        }
        CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTPort");
        if (v33) {
          CFNumberGetValue(v33, kCFNumberShortType, (char *)&v59 + 2);
        }
        CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTSourcePort");
        if (v34) {
          CFNumberGetValue(v34, kCFNumberShortType, &v59);
        }
        if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface"))
        {
          CFStringRef v35 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OutgoingInterface");
          CFStringGetCString(v35, buffer, 16, 0x600u);
        }
        CFBooleanRef v36 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"sequencePerTrafficClass");
        if (v36) {
          unsigned __int16 v37 = 2 * (CFBooleanGetValue(v36) != 0);
        }
        else {
          unsigned __int16 v37 = 0;
        }
        __int16 v38 = _NEIPSecDBGetQueue();
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __NEIPSecDBAddSA_block_invoke;
        block[3] = &unk_1E59911C0;
        void block[6] = a1;
        block[7] = cf;
        block[4] = &v73;
        void block[5] = &v53;
        dispatch_sync(v38, block);
        int v39 = *(NSObject **)(a1 + 64);
        dispatch_queue_t v40 = _NEIPSecDBGetQueue();
        uint8_t v41 = v77;
        if (!v77[0]) {
          uint8_t v41 = 0;
        }
        id v42 = buffer;
        if (!buffer[0]) {
          id v42 = 0;
        }
        *(void *)&long long v51 = v41;
        *((void *)&v51 + 1) = v42;
        if (NEPFKeySendAdd(v39, (uint64_t)v40, v63, v62, v66, (const UInt8 *)v65, v64, valuePtr, v61, (const UInt8 *)v23, v9, Length, v16, v22, v8, v37, 0, v50, 0,
               0,
               v60,
               SHIDWORD(v60),
               0,
               0,
               0,
               v59,
               HIWORD(v59),
               HIWORD(v57),
               v57,
               1,
               v51))
        {
          int v43 = NEIPSecDBCopyResponseForQueuedRequest(v54[3], 0);
          __int16 v44 = ne_log_obj();
          int v45 = v44;
          if (v43)
          {
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              int v46 = *(_DWORD *)(*((void *)&v73 + 1) + 24);
              *(_DWORD *)long long buf = 138412802;
              uint64_t v68 = a1;
              __int16 v69 = 1024;
              int v70 = v46;
              __int16 v71 = 1024;
              unsigned int v72 = bswap32(v64);
              _os_log_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_INFO, "%@ added SAID %u SPI %08X", buf, 0x18u);
            }
            goto LABEL_106;
          }
          if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
LABEL_105:
            NEIPSecDBRemoveSAIDFromSAs(a1, *(_DWORD *)(*((void *)&v73 + 1) + 24));
            *(_DWORD *)(*((void *)&v73 + 1) + 24) = 0;
LABEL_106:
            if (v23)
            {
              memset_s(v23, v22 + Length, 0, v22 + Length);
              free(v23);
            }
            goto LABEL_108;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v68 = a1;
          unsigned int v47 = "%@ add SA, failed to receive response for pfkey add SA";
        }
        else
        {
          int v45 = ne_log_obj();
          if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
            goto LABEL_105;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v68 = a1;
          unsigned int v47 = "%@ add SA, pfkey add SA failed";
        }
        _os_log_error_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_ERROR, v47, buf, 0xCu);
        goto LABEL_105;
      }
      if (CFEqual(v7, @"3DES"))
      {
        int v8 = 0;
        char v9 = 2;
        goto LABEL_43;
      }
      if (CFEqual(v7, @"AES-128") || CFEqual(v7, @"AES-256"))
      {
        int v8 = 0;
        char v9 = 12;
        goto LABEL_43;
      }
      if (CFEqual(v7, @"AES-128-GCM") || CFEqual(v7, @"AES-256-GCM"))
      {
        int v8 = 0;
LABEL_22:
        char v9 = 13;
        goto LABEL_43;
      }
      if (CFEqual(v7, @"ChaCha20-Poly1305"))
      {
        int v8 = 0;
LABEL_31:
        char v9 = 14;
        goto LABEL_43;
      }
      if (CFEqual(v7, @"ChaCha20-Poly1305-IIV"))
      {
        int v8 = 1024;
        goto LABEL_31;
      }
      if (CFEqual(v7, @"AES-128-GCM-IIV") || CFEqual(v7, @"AES-256-GCM-IIV"))
      {
        int v8 = 1024;
        goto LABEL_22;
      }
      if (CFEqual(v7, @"NULL-With-AES-128-GMAC") || CFEqual(v7, @"NULL-With-AES-256-GMAC"))
      {
        int v8 = 0;
        char v9 = 15;
        goto LABEL_43;
      }
      if (CFEqual(v7, @"NULL"))
      {
        int v8 = 0;
        char v9 = 3;
        goto LABEL_43;
      }
    }
    char v9 = 0;
    int v8 = 0;
    goto LABEL_43;
  }
LABEL_108:
  if (v66) {
    free(v66);
  }
  if (v65) {
    free(v65);
  }
  uint64_t v48 = v54[3];
  if (v48)
  {
    NEIPSecDBRemoveQueuedRequest(v48);
    free((void *)v54[3]);
  }
  uint64_t v13 = *(unsigned int *)(*((void *)&v73 + 1) + 24);
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v73, 8);
  return v13;
}

_OWORD *__NEIPSecDBAddSA_block_invoke(void *a1)
{
  uint64_t v3 = a1[6];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[7];
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 + 1) > 1) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)(v3 + 72) = v5;
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v4;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
  if (MutableCopy)
  {
    uint64_t v7 = MutableCopy;
    CFDictionaryAddValue(MutableCopy, @"Direction", @"Out");
    NEAddValueToIntKeyedDictionary(*(__CFDictionary **)(a1[6] + 80), *(_DWORD *)(*(void *)(a1[4] + 8) + 24), v7);
    CFRelease(v7);
  }
  BOOL result = NEIPSecDBCreateQueuedRequest(a1[6], 3, *(_DWORD *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

uint64_t NEIPSecDBUpdateSA(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v19 = ne_log_obj();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v84) = 136315138;
    *(void *)((char *)&v84 + 4) = "NEIPSecDBUpdateSA";
    CFDataRef v20 = "%s called with null session";
LABEL_44:
    _os_log_fault_impl(&dword_19DDAF000, v19, OS_LOG_TYPE_FAULT, v20, (uint8_t *)&v84, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 80))
  {
    int v19 = ne_log_obj();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v84) = 136315138;
    *(void *)((char *)&v84 + 4) = "NEIPSecDBUpdateSA";
    CFDataRef v20 = "%s called with null session->sas";
    goto LABEL_44;
  }
  unint64_t v76 = 0;
  int v77 = 0;
  unsigned int v75 = 0;
  unsigned __int8 v74 = 0;
  int v73 = 0;
  v87[0] = 0;
  unsigned __int8 v72 = 1;
  uint64_t v71 = 0;
  int v70 = 0;
  int v68 = 0;
  int valuePtr = 0;
  *(void *)&long long v84 = 0;
  *((void *)&v84 + 1) = &v84;
  uint64_t v85 = 0x2000000000;
  uint64_t v86 = 0;
  uint64_t v64 = 0;
  int v65 = &v64;
  uint64_t v66 = 0x2000000000;
  uint64_t v67 = 0;
  if (!NEIPSecDBValidateSADictionary(cf, 0, 0))
  {
    uint64_t v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v79 = a1;
    uint64_t v15 = "%@ update SA dictionary validation failed";
LABEL_26:
    _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0xCu);
    goto LABEL_16;
  }
  uint64_t v6 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBUpdateSA_block_invoke;
  block[3] = &unk_1E59911E8;
  block[4] = &v84;
  void block[5] = a1;
  int v63 = a2;
  dispatch_sync(v6, block);
  CFDictionaryRef v7 = *(const __CFDictionary **)(*((void *)&v84 + 1) + 24);
  if (!v7)
  {
    uint64_t v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v79 = a1;
    uint64_t v15 = "%@ update SA, failed to find existing SA";
    goto LABEL_26;
  }
  if (NEIPSecDBFilloutBasicSAInfo(v7, (char *)&v74, &v73, &v75, (void **)&v77, (void **)&v76, v87))
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"UniqueID");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    }
    CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"ReplayWindowSize");
    if (v9) {
      CFNumberGetValue(v9, kCFNumberCharType, &v72);
    }
    dispatch_time_t v10 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EncryptionAlgorithm");
    if (v10)
    {
      CFTypeID v11 = v10;
      if (CFEqual(v10, @"DES"))
      {
        int v12 = 0;
        char v13 = 1;
LABEL_24:
        char v59 = v13;
LABEL_51:
        CFDataRef v21 = CFDictionaryGetValue((CFDictionaryRef)cf, @"AuthAlgorithm");
        if (!v21) {
          goto LABEL_62;
        }
        CFIndex v22 = v21;
        if (CFEqual(v21, @"MD5-96"))
        {
          char v23 = 1;
          goto LABEL_63;
        }
        if (CFEqual(v22, @"SHA1-96"))
        {
          char v23 = 2;
          goto LABEL_63;
        }
        if (CFEqual(v22, @"SHA2-256"))
        {
          char v23 = 6;
          goto LABEL_63;
        }
        if (CFEqual(v22, @"SHA2-384"))
        {
          char v23 = 7;
          goto LABEL_63;
        }
        if (CFEqual(v22, @"SHA2-512")) {
          char v23 = 8;
        }
        else {
LABEL_62:
        }
          char v23 = 0;
LABEL_63:
        CFDataRef v24 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"EncryptionKey");
        CFDataRef v25 = v24;
        if (v24) {
          CFIndex Length = CFDataGetLength(v24);
        }
        else {
          CFIndex Length = 0;
        }
        CFDataRef v27 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"AuthKey");
        CFDataRef v28 = v27;
        if (v27) {
          CFIndex v29 = CFDataGetLength(v27);
        }
        else {
          CFIndex v29 = 0;
        }
        if (Length | v29)
        {
          CFNumberRef v30 = (char *)malloc_type_malloc(v29 + Length, 0x875E4909uLL);
          if (Length)
          {
            BytePtr = CFDataGetBytePtr(v25);
            memcpy(v30, BytePtr, Length);
          }
          if (v29)
          {
            CFNumberRef v32 = CFDataGetBytePtr(v28);
            memcpy(&v30[Length], v32, v29);
          }
        }
        else
        {
          CFNumberRef v30 = 0;
        }
        CFBooleanRef v33 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTraversal");
        if (v33 && CFBooleanGetValue(v33)) {
          v12 |= 2u;
        }
        CFBooleanRef v34 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAlive");
        if (v34 && CFBooleanGetValue(v34)) {
          v12 |= 4u;
        }
        CFBooleanRef v35 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffload");
        if (v35 && CFBooleanGetValue(v35)) {
          v12 |= 0x8000u;
        }
        CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffloadInterval");
        if (v36) {
          CFNumberGetValue(v36, kCFNumberShortType, &v68);
        }
        CFNumberRef v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveInterval");
        if (v37) {
          CFNumberGetValue(v37, kCFNumberShortType, (char *)&v68 + 2);
        }
        CFBooleanRef v38 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTDetectedPeer");
        if (v38 && CFBooleanGetValue(v38)) {
          v12 |= 0x1000u;
        }
        CFNumberRef v39 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LifeTimeinSeconds");
        if (v39) {
          CFNumberGetValue(v39, kCFNumberLongType, &v71);
        }
        CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTPort");
        if (v40) {
          CFNumberGetValue(v40, kCFNumberShortType, &v70);
        }
        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTSourcePort");
        if (v41) {
          CFNumberGetValue(v41, kCFNumberShortType, (char *)&v70 + 2);
        }
        CFBooleanRef v42 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"sequencePerTrafficClass");
        if (v42) {
          unsigned __int16 v43 = 2 * (CFBooleanGetValue(v42) != 0);
        }
        else {
          unsigned __int16 v43 = 0;
        }
        __int16 v44 = _NEIPSecDBGetQueue();
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 0x40000000;
        v60[2] = __NEIPSecDBUpdateSA_block_invoke_120;
        v60[3] = &unk_1E5991210;
        v60[4] = &v64;
        v60[5] = a1;
        int v61 = a2;
        dispatch_sync(v44, v60);
        int v45 = *(NSObject **)(a1 + 64);
        dispatch_queue_t v46 = _NEIPSecDBGetQueue();
        unsigned int v47 = v87;
        if (!v87[0]) {
          unsigned int v47 = 0;
        }
        if (NEPFKeySendUpdate(v45, (uint64_t)v46, v74, v73, v76, v77, v75, valuePtr, v72, (const UInt8 *)v30, v59, Length, v23, v29, v12, v43, 0, v58, 0,
               0,
               v71,
               SHIDWORD(v71),
               0,
               0,
               0,
               HIWORD(v70),
               v70,
               HIWORD(v68),
               v68,
               1,
               (unint64_t)v47))
        {
          int v48 = NEIPSecDBCopyResponseForQueuedRequest(v65[3], 0);
          uint64_t v49 = ne_log_obj();
          int v50 = v49;
          if (v48)
          {
            uint64_t v18 = 1;
            if (os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412802;
              uint64_t v79 = a1;
              __int16 v80 = 1024;
              int v81 = a2;
              __int16 v82 = 1024;
              unsigned int v83 = bswap32(v75);
              _os_log_impl(&dword_19DDAF000, v50, OS_LOG_TYPE_INFO, "%@ updated SAID %u SPI %08X", buf, 0x18u);
            }
            goto LABEL_110;
          }
          if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
LABEL_109:
            uint64_t v18 = 0;
LABEL_110:
            uint64_t v54 = *((void *)&v84 + 1);
            uint64_t v55 = *(const void **)(*((void *)&v84 + 1) + 24);
            if (v55)
            {
              CFRelease(v55);
              *(void *)(v54 + 24) = 0;
            }
            if (v30)
            {
              memset_s(v30, v29 + Length, 0, v29 + Length);
              free(v30);
            }
            goto LABEL_114;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v79 = a1;
          uint64_t v52 = "%@ failed to receive response for pfkey update SA";
          uint64_t v53 = v50;
        }
        else
        {
          long long v51 = ne_log_obj();
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
            goto LABEL_109;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v79 = a1;
          uint64_t v52 = "%@ pfkey send update SA failed";
          uint64_t v53 = v51;
        }
        _os_log_error_impl(&dword_19DDAF000, v53, OS_LOG_TYPE_ERROR, v52, buf, 0xCu);
        goto LABEL_109;
      }
      if (CFEqual(v11, @"3DES"))
      {
        int v12 = 0;
        char v13 = 2;
        goto LABEL_24;
      }
      if (CFEqual(v11, @"AES-128") || CFEqual(v11, @"AES-256"))
      {
        int v12 = 0;
        char v13 = 12;
        goto LABEL_24;
      }
      if (CFEqual(v11, @"AES-128-GCM") || CFEqual(v11, @"AES-256-GCM"))
      {
        int v12 = 0;
LABEL_30:
        char v13 = 13;
        goto LABEL_24;
      }
      if (CFEqual(v11, @"ChaCha20-Poly1305"))
      {
        int v12 = 0;
LABEL_39:
        char v13 = 14;
        goto LABEL_24;
      }
      if (CFEqual(v11, @"ChaCha20-Poly1305-IIV"))
      {
        int v12 = 1024;
        goto LABEL_39;
      }
      if (CFEqual(v11, @"AES-128-GCM-IIV") || CFEqual(v11, @"AES-256-GCM-IIV"))
      {
        int v12 = 1024;
        goto LABEL_30;
      }
      if (CFEqual(v11, @"NULL-With-AES-128-GMAC") || CFEqual(v11, @"NULL-With-AES-256-GMAC"))
      {
        int v12 = 0;
        char v13 = 15;
        goto LABEL_24;
      }
      if (CFEqual(v11, @"NULL"))
      {
        int v12 = 0;
        char v13 = 3;
        goto LABEL_24;
      }
    }
    char v59 = 0;
    int v12 = 0;
    goto LABEL_51;
  }
LABEL_16:
  uint64_t v16 = *((void *)&v84 + 1);
  CFDataRef v17 = *(const void **)(*((void *)&v84 + 1) + 24);
  if (v17)
  {
    CFRelease(v17);
    uint64_t v18 = 0;
    *(void *)(v16 + 24) = 0;
  }
  else
  {
    uint64_t v18 = 0;
  }
LABEL_114:
  if (v77) {
    free(v77);
  }
  if (v76) {
    free(v76);
  }
  uint64_t v56 = v65[3];
  if (v56)
  {
    NEIPSecDBRemoveQueuedRequest(v56);
    free((void *)v65[3]);
  }
  _Block_object_dispose(&v64, 8);
  _Block_object_dispose(&v84, 8);
  return v18;
}

const void *__NEIPSecDBUpdateSA_block_invoke(uint64_t a1)
{
  BOOL result = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(*(void *)(a1 + 40) + 80), *(_DWORD *)(a1 + 48));
  if (result) {
    BOOL result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_OWORD *__NEIPSecDBUpdateSA_block_invoke_120(uint64_t a1)
{
  BOOL result = NEIPSecDBCreateQueuedRequest(*(void *)(a1 + 40), 2, *(_DWORD *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t NEIPSecDBMigrateSA(uint64_t a1, int a2, CFTypeRef cf)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    CFBooleanRef v42 = ne_log_obj();
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v66) = 136315138;
    *(void *)((char *)&v66 + 4) = "NEIPSecDBMigrateSA";
    unsigned __int16 v43 = "%s called with null session";
LABEL_89:
    _os_log_fault_impl(&dword_19DDAF000, v42, OS_LOG_TYPE_FAULT, v43, (uint8_t *)&v66, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 80))
  {
    CFBooleanRef v42 = ne_log_obj();
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v66) = 136315138;
    *(void *)((char *)&v66 + 4) = "NEIPSecDBMigrateSA";
    unsigned __int16 v43 = "%s called with null session->sas";
    goto LABEL_89;
  }
  char v59 = 0;
  int v57 = 0;
  int v58 = 0;
  uint64_t v56 = 0;
  int v54 = 0;
  unsigned int v55 = 0;
  int valuePtr = 0;
  uint8_t v52 = 0;
  v71[0] = 0;
  v70[0] = 0;
  buffer[0] = 0;
  *(void *)&long long v66 = 0;
  *((void *)&v66 + 1) = &v66;
  uint64_t v67 = 0x2000000000;
  uint64_t v68 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x2000000000;
  uint64_t v51 = 0;
  if (!NEIPSecDBValidateSADictionary(cf, 0, 1))
  {
    dispatch_time_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_67;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v61 = a1;
    CFTypeID v11 = "%@ migrate SA dictionary validation failed";
    goto LABEL_11;
  }
  uint64_t v6 = _NEIPSecDBGetQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __NEIPSecDBMigrateSA_block_invoke;
  block[3] = &unk_1E5991238;
  block[4] = &v66;
  void block[5] = a1;
  int v47 = a2;
  dispatch_sync(v6, block);
  CFDictionaryRef v7 = *(const __CFDictionary **)(*((void *)&v66 + 1) + 24);
  if (!v7)
  {
    dispatch_time_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_67;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v61 = a1;
    CFTypeID v11 = "%@ migrate SA, failed to find existing SA";
    goto LABEL_11;
  }
  CFNumberRef Value = CFDictionaryGetValue(v7, @"Direction");
  if (Value) {
    int v9 = CFEqual(Value, @"In");
  }
  else {
    int v9 = 0;
  }
  if (!NEIPSecDBFilloutBasicSAInfo(*(CFDictionaryRef *)(*((void *)&v66 + 1) + 24), (char *)&v52, 0, &v55, &v59, &v58, v71)|| !NEIPSecDBFilloutBasicSAInfo((CFDictionaryRef)cf, 0, 0, 0, &v57, &v56, v70))
  {
    goto LABEL_67;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface"))
  {
    CFStringRef v13 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OutgoingInterface");
    CFStringGetCString(v13, buffer, 16, 0x600u);
  }
  uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)cf, @"EncryptionAlgorithm");
  uint64_t v15 = v14;
  if (v14)
  {
    if (CFEqual(v14, @"ChaCha20-Poly1305-IIV")
      || CFEqual(v15, @"AES-128-GCM-IIV")
      || CFEqual(v15, @"AES-256-GCM-IIV"))
    {
      LODWORD(v15) = 1024;
    }
    else
    {
      LODWORD(v15) = 0;
    }
  }
  CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTraversal");
  if (v16 && CFBooleanGetValue(v16)) {
    LODWORD(v15) = v15 | 2;
  }
  CFBooleanRef v17 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAlive");
  if (v17 && CFBooleanGetValue(v17)) {
    LODWORD(v15) = v15 | 4;
  }
  CFBooleanRef v18 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffload");
  if (v18 && CFBooleanGetValue(v18)) {
    LODWORD(v15) = v15 | 0x8000;
  }
  CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveOffloadInterval");
  if (v19) {
    CFNumberGetValue(v19, kCFNumberShortType, &valuePtr);
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTKeepAliveInterval");
  if (v20) {
    CFNumberGetValue(v20, kCFNumberShortType, (char *)&valuePtr + 2);
  }
  CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTDetectedPeer");
  if (v21 && CFBooleanGetValue(v21)) {
    LODWORD(v15) = v15 | 0x1000;
  }
  CFNumberRef v22 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTPort");
  if (v22) {
    CFNumberGetValue(v22, kCFNumberShortType, &v54);
  }
  CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"NATTSourcePort");
  if (v23) {
    CFNumberGetValue(v23, kCFNumberShortType, (char *)&v54 + 2);
  }
  CFDataRef v24 = _NEIPSecDBGetQueue();
  v44[0] = MEMORY[0x1E4F143A8];
  v44[1] = 0x40000000;
  v44[2] = __NEIPSecDBMigrateSA_block_invoke_123;
  v44[3] = &unk_1E5991260;
  v44[4] = &v48;
  v44[5] = a1;
  int v45 = a2;
  dispatch_sync(v24, v44);
  if (!v49[3]) {
    goto LABEL_67;
  }
  CFDataRef v25 = *(NSObject **)(a1 + 64);
  dispatch_queue_t v26 = _NEIPSecDBGetQueue();
  CFDataRef v27 = v58;
  CFDataRef v28 = v71;
  if (!v71[0]) {
    CFDataRef v28 = 0;
  }
  if (v9) {
    CFIndex v29 = v58;
  }
  else {
    CFIndex v29 = v59;
  }
  if (v9) {
    CFDataRef v27 = v59;
  }
  CFNumberRef v30 = v56;
  if (v9) {
    CFBooleanRef v31 = v56;
  }
  else {
    CFBooleanRef v31 = v57;
  }
  if (v9) {
    CFNumberRef v30 = v57;
  }
  CFNumberRef v32 = v70;
  if (!v70[0]) {
    CFNumberRef v32 = 0;
  }
  CFBooleanRef v33 = buffer;
  if (!buffer[0]) {
    CFBooleanRef v33 = 0;
  }
  if (!NEPFKeySendMigrate(v25, (uint64_t)v26, v52, v55, (pid_t)v15, HIWORD(v54), v54, SHIWORD(valuePtr), valuePtr, (uint64_t)v29, (uint64_t)v27, v28, (uint64_t)v31, (uint64_t)v30, v32, v33))
  {
    dispatch_time_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_67;
    }
    *(_DWORD *)long long buf = 138412290;
    uint64_t v61 = a1;
    CFTypeID v11 = "%@ pfkey send migrate SA failed";
LABEL_11:
    int v12 = v10;
LABEL_12:
    _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
    goto LABEL_67;
  }
  int v34 = NEIPSecDBCopyResponseForQueuedRequest(v49[3], 0);
  CFBooleanRef v35 = ne_log_obj();
  CFNumberRef v36 = v35;
  if (v34)
  {
    uint64_t v37 = 1;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412802;
      uint64_t v61 = a1;
      __int16 v62 = 1024;
      int v63 = a2;
      __int16 v64 = 1024;
      unsigned int v65 = bswap32(v55);
      _os_log_impl(&dword_19DDAF000, v36, OS_LOG_TYPE_INFO, "%@ migrated SAID %u SPI %08X", buf, 0x18u);
    }
    goto LABEL_68;
  }
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v61 = a1;
    CFTypeID v11 = "%@ failed to receive response for pfkey migrate SA";
    int v12 = v36;
    goto LABEL_12;
  }
LABEL_67:
  uint64_t v37 = 0;
LABEL_68:
  uint64_t v38 = *((void *)&v66 + 1);
  CFNumberRef v39 = *(const void **)(*((void *)&v66 + 1) + 24);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(v38 + 24) = 0;
  }
  if (v59) {
    free(v59);
  }
  if (v58) {
    free(v58);
  }
  if (v57) {
    free(v57);
  }
  if (v56) {
    free(v56);
  }
  uint64_t v40 = v49[3];
  if (v40)
  {
    NEIPSecDBRemoveQueuedRequest(v40);
    free((void *)v49[3]);
  }
  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v66, 8);
  return v37;
}

const void *__NEIPSecDBMigrateSA_block_invoke(uint64_t a1)
{
  BOOL result = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(*(void *)(a1 + 40) + 80), *(_DWORD *)(a1 + 48));
  if (result) {
    BOOL result = CFRetain(result);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

_OWORD *__NEIPSecDBMigrateSA_block_invoke_123(uint64_t a1)
{
  BOOL result = NEIPSecDBCreateQueuedRequest(*(void *)(a1 + 40), 26, *(_DWORD *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t NEIPSecDBDeleteSA(uint64_t a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v4 = ne_log_obj();
  int v5 = v4;
  if (a1)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_INFO, "%@ deleting SAID %u", buf, 0x12u);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    uint64_t v27 = 0;
    uint64_t v18 = 0;
    CFNumberRef v19 = &v18;
    uint64_t v20 = 0x2000000000;
    uint64_t v21 = 0;
    uint64_t v6 = _NEIPSecDBGetQueue();
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    void v16[2] = __NEIPSecDBDeleteSA_block_invoke;
    v16[3] = &unk_1E5991288;
    v16[5] = &v18;
    v16[6] = a1;
    int v17 = a2;
    v16[4] = buf;
    dispatch_sync(v6, v16);
    CFDictionaryRef v7 = *(const __CFDictionary **)(*(void *)&buf[8] + 24);
    if (v7)
    {
      if (!_NEIPSecDBDeleteSA(a1, v7)
        || !NEIPSecDBCopyResponseForQueuedRequest(v19[3], 0))
      {
        CFTypeID v11 = ne_log_obj();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFNumberRef v22 = 138412546;
          uint64_t v23 = a1;
          __int16 v24 = 1024;
          int v25 = a2;
          _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, "%@ failed to receive response for pfkey delete SAID %u", v22, 0x12u);
        }
        uint64_t v9 = 0;
        goto LABEL_15;
      }
      int v8 = ne_log_obj();
      uint64_t v9 = 1;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)CFNumberRef v22 = 138412546;
        uint64_t v23 = a1;
        __int16 v24 = 1024;
        int v25 = a2;
        dispatch_time_t v10 = "%@ deleted SAID %u";
LABEL_14:
        _os_log_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_INFO, v10, v22, 0x12u);
      }
    }
    else
    {
      int v8 = ne_log_obj();
      uint64_t v9 = 1;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)CFNumberRef v22 = 138412546;
        uint64_t v23 = a1;
        __int16 v24 = 1024;
        int v25 = a2;
        dispatch_time_t v10 = "%@ delete SA, saData is NULL for SAID %u, may already be removed";
        goto LABEL_14;
      }
    }
LABEL_15:
    uint64_t v12 = *(void *)&buf[8];
    CFStringRef v13 = *(const void **)(*(void *)&buf[8] + 24);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v12 + 24) = 0;
    }
    uint64_t v14 = v19[3];
    if (v14)
    {
      NEIPSecDBRemoveQueuedRequest(v14);
      free((void *)v19[3]);
    }
    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(buf, 8);
    return v9;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "NEIPSecDBDeleteSA";
    _os_log_fault_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
  }
  return 0;
}

void __NEIPSecDBDeleteSA_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(void *)(v2 + 80))
  {
    uint64_t v3 = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(v2 + 80), *(_DWORD *)(a1 + 56));
    if (v3) {
      uint64_t v3 = CFRetain(v3);
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
    uint64_t v2 = *(void *)(a1 + 48);
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = NEIPSecDBCreateQueuedRequest(v2, 4, *(_DWORD *)(a1 + 56));
      uint64_t v2 = *(void *)(a1 + 48);
    }
  }
  int v4 = *(void **)(v2 + 104);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 56);
    do
    {
      uint64_t v6 = *(void **)v4;
      int v7 = *((_DWORD *)v4 + 4);
      if (v7) {
        BOOL v8 = v7 == v5;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        *((_DWORD *)v4 + 4) = 0;
        if (!*((_DWORD *)v4 + 5)) {
          goto LABEL_24;
        }
      }
      else
      {
        int v9 = *((_DWORD *)v4 + 5);
        if (v9) {
          BOOL v10 = v9 == v5;
        }
        else {
          BOOL v10 = 0;
        }
        if (v10)
        {
          int v9 = 0;
          *((_DWORD *)v4 + 5) = 0;
        }
        if (!v7 && !v9)
        {
LABEL_24:
          CFTypeID v11 = *((void *)v4 + 3);
          if (v11)
          {
            if (!dispatch_source_testcancel(*((dispatch_source_t *)v4 + 3)))
            {
              dispatch_source_cancel(v11);
              uint64_t v6 = *(void **)v4;
            }
            *((void *)v4 + 3) = 0;
          }
          if (v6) {
            v6[1] = *((void *)v4 + 1);
          }
          **((void **)v4 + 1) = v6;
          free(v4);
          return;
        }
      }
      int v4 = v6;
    }
    while (v6);
  }
}

uint64_t _NEIPSecDBDeleteSA(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v21 = 0;
  CFNumberRef v22 = 0;
  unsigned int v20 = 0;
  char v19 = 0;
  int v18 = 0;
  v27[0] = 0;
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"Direction");
  if (Value) {
    int v5 = CFEqual(Value, @"In");
  }
  else {
    int v5 = 0;
  }
  if (!NEIPSecDBFilloutBasicSAInfo(theDict, &v19, &v18, &v20, &v22, &v21, v27))
  {
    uint64_t v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      uint64_t v15 = 0;
      goto LABEL_21;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    unsigned int v26 = bswap32(v20);
    CFBooleanRef v16 = "%@ NEIPSecDBFilloutBasicSAInfo error for SPI %08X";
LABEL_27:
    _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
    goto LABEL_20;
  }
  uint64_t v6 = *(NSObject **)(a1 + 64);
  dispatch_queue_t v7 = _NEIPSecDBGetQueue();
  if (v5) {
    int v9 = v21;
  }
  else {
    int v9 = v22;
  }
  if (v5) {
    BOOL v10 = v22;
  }
  else {
    BOOL v10 = v21;
  }
  if (v27[0]) {
    CFTypeID v11 = v27;
  }
  else {
    CFTypeID v11 = 0;
  }
  BOOL v12 = NEPFKeySendDelete(v6, (uint64_t)v7, v19, v8, (uint64_t)v9, (uint64_t)v10, v20, v11);
  CFStringRef v13 = ne_log_obj();
  uint64_t v14 = v13;
  if (!v12)
  {
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    unsigned int v26 = bswap32(v20);
    CFBooleanRef v16 = "%@ pfkey send delete failed for SPI %08X";
    goto LABEL_27;
  }
  uint64_t v15 = 1;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412546;
    uint64_t v24 = a1;
    __int16 v25 = 1024;
    unsigned int v26 = bswap32(v20);
    _os_log_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_INFO, "%@ deleted SA SPI %08X", buf, 0x12u);
  }
LABEL_21:
  if (v22) {
    free(v22);
  }
  if (v21) {
    free(v21);
  }
  return v15;
}

uint64_t NEIPSecDBCopySA(uint64_t a1, int a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFNumberRef v36 = 0;
    uint64_t v37 = 0;
    unsigned int v35 = 0;
    char v34 = 0;
    int v33 = 0;
    v47[0] = 0;
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = &v44;
    uint64_t v45 = 0x2000000000;
    uint64_t v46 = 0;
    uint64_t v29 = 0;
    CFNumberRef v30 = &v29;
    uint64_t v31 = 0x2000000000;
    uint64_t v32 = 0;
    uint64_t v28 = 0;
    int v4 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBCopySA_block_invoke;
    block[3] = &unk_1E59912B0;
    void block[5] = &v29;
    void block[6] = a1;
    int v27 = a2;
    block[4] = &v44;
    dispatch_sync(v4, block);
    CFDictionaryRef v5 = *(const __CFDictionary **)(*((void *)&v44 + 1) + 24);
    if (v5)
    {
      CFNumberRef Value = CFDictionaryGetValue(v5, @"Direction");
      if (Value) {
        int v7 = CFEqual(Value, @"In");
      }
      else {
        int v7 = 0;
      }
      if (!NEIPSecDBFilloutBasicSAInfo(*(CFDictionaryRef *)(*((void *)&v44 + 1) + 24), &v34, &v33, &v35, &v37, &v36, v47))goto LABEL_27; {
      BOOL v10 = *(NSObject **)(a1 + 64);
      }
      dispatch_queue_t v11 = _NEIPSecDBGetQueue();
      if (v7) {
        CFStringRef v13 = v36;
      }
      else {
        CFStringRef v13 = v37;
      }
      if (v7) {
        uint64_t v14 = v37;
      }
      else {
        uint64_t v14 = v36;
      }
      if (v47[0]) {
        uint64_t v15 = v47;
      }
      else {
        uint64_t v15 = 0;
      }
      if (NEPFKeySendGet(v10, (uint64_t)v11, v34, v12, (uint64_t)v13, (uint64_t)v14, v35, v15))
      {
        int v16 = NEIPSecDBCopyResponseForQueuedRequest(v30[3], &v28);
        int v17 = ne_log_obj();
        int v18 = v17;
        if (v16)
        {
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412802;
            uint64_t v39 = a1;
            __int16 v40 = 1024;
            int v41 = a2;
            __int16 v42 = 1024;
            unsigned int v43 = bswap32(v35);
            _os_log_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_INFO, "%@ copied SAID %u cSPI %08X", buf, 0x18u);
          }
          goto LABEL_27;
        }
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
LABEL_27:
          uint64_t v20 = *((void *)&v44 + 1);
          uint64_t v21 = *(const void **)(*((void *)&v44 + 1) + 24);
          if (v21)
          {
            CFRelease(v21);
            *(void *)(v20 + 24) = 0;
          }
          if (v37) {
            free(v37);
          }
          if (v36) {
            free(v36);
          }
          uint64_t v22 = v30[3];
          if (v22)
          {
            NEIPSecDBRemoveQueuedRequest(v22);
            free((void *)v30[3]);
          }
          uint64_t v23 = v28;
          _Block_object_dispose(&v29, 8);
          _Block_object_dispose(&v44, 8);
          return v23;
        }
        *(_DWORD *)long long buf = 138412290;
        uint64_t v39 = a1;
        int v9 = "%@ failed to receive response for pfkey get SA";
        char v19 = v18;
LABEL_25:
        _os_log_error_impl(&dword_19DDAF000, v19, OS_LOG_TYPE_ERROR, v9, buf, 0xCu);
        goto LABEL_27;
      }
      uint64_t v8 = ne_log_obj();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 138412290;
      uint64_t v39 = a1;
      int v9 = "%@ pfkey send get SA failed";
    }
    else
    {
      uint64_t v8 = ne_log_obj();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_27;
      }
      *(_DWORD *)long long buf = 138412290;
      uint64_t v39 = a1;
      int v9 = "%@ copy SA, saData is NULL";
    }
    char v19 = v8;
    goto LABEL_25;
  }
  __int16 v25 = ne_log_obj();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
  {
    LODWORD(v44) = 136315138;
    *(void *)((char *)&v44 + 4) = "NEIPSecDBCopySA";
    _os_log_fault_impl(&dword_19DDAF000, v25, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v44, 0xCu);
  }
  return 0;
}

__CFArray *NEIPSecDBCopySAIDs(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v16 = 0x2000000000;
    uint64_t v17 = 0;
    uint64_t v2 = _NEIPSecDBGetQueue();
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = __NEIPSecDBCopySAIDs_block_invoke;
    v14[3] = &unk_1E59912D8;
    v14[4] = &buf;
    v14[5] = a1;
    dispatch_sync(v2, v14);
    CFDictionaryRef v3 = *(const __CFDictionary **)(*((void *)&buf + 1) + 24);
    if (v3) {
      CFIndex Count = CFDictionaryGetCount(v3);
    }
    else {
      CFIndex Count = 0;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
    uint64_t v6 = Mutable;
    if (Count >= 1 && Mutable)
    {
      int v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
      uint64_t v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24), v7, v8);
      for (uint64_t i = 0; i != Count; ++i)
        CFArrayAppendValue(v6, v7[i]);
      free(v7);
      free(v8);
    }
    uint64_t v10 = *((void *)&buf + 1);
    dispatch_queue_t v11 = *(const void **)(*((void *)&buf + 1) + 24);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(v10 + 24) = 0;
    }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    CFStringRef v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "NEIPSecDBCopySAIDs";
      _os_log_fault_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v6;
}

CFDictionaryRef __NEIPSecDBCopySAIDs_block_invoke(CFDictionaryRef result)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)result + 5) + 80);
  if (v1)
  {
    CFDictionaryRef v2 = result;
    BOOL result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    *(void *)(*(void *)(*((void *)v2 + 4) + 8) + 24) = result;
  }
  return result;
}

uint64_t NEIPSecDBFlushSAs(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = ne_log_obj();
  CFDictionaryRef v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = a1;
      _os_log_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_INFO, "%@ flush all SAs", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v23 = 0x2000000000;
    uint64_t v24 = 0;
    uint64_t v18 = 0;
    char v19 = &v18;
    uint64_t v20 = 0x2000000000;
    uint64_t v21 = 0;
    int v4 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBFlushSAs_block_invoke;
    block[3] = &unk_1E5991300;
    void block[5] = &v18;
    void block[6] = a1;
    block[4] = &buf;
    dispatch_sync(v4, block);
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24));
    if (Count < 1) {
      goto LABEL_8;
    }
    size_t v6 = Count;
    int v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    uint64_t v8 = (const void **)malloc_type_calloc(v6, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24), v7, v8);
    for (uint64_t i = 0; i != v6; _NEIPSecDBDeleteSA(a1, (CFDictionaryRef)v8[i++]))
      ;
    free(v7);
    free(v8);
    if (NEIPSecDBCopyResponseForQueuedRequest(v19[3], 0))
    {
LABEL_8:
      uint64_t v10 = 1;
    }
    else
    {
      dispatch_queue_t v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, "failed to receive response for pfkey flush SA", v16, 2u);
      }
      uint64_t v10 = 0;
    }
    uint64_t v12 = *((void *)&buf + 1);
    CFStringRef v13 = *(const void **)(*((void *)&buf + 1) + 24);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v12 + 24) = 0;
    }
    uint64_t v14 = v19[3];
    if (v14)
    {
      NEIPSecDBRemoveQueuedRequest(v14);
      free((void *)v19[3]);
    }
    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "NEIPSecDBFlushSAs";
      _os_log_fault_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v10;
}

_OWORD *__NEIPSecDBFlushSAs_block_invoke(_OWORD *result)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)result + 6) + 80);
  if (v1)
  {
    CFDictionaryRef v2 = result;
    *(void *)(*(void *)(*((void *)result + 4) + 8) + 24) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    BOOL result = NEIPSecDBCreateQueuedRequest(*((void *)v2 + 6), 9, 0);
    *(void *)(*(void *)(*((void *)v2 + 5) + 8) + 24) = result;
  }
  return result;
}

uint64_t NEIPSecDBAddPolicy(uint64_t a1, CFTypeRef cf)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315138;
    long long v84 = "NEIPSecDBAddPolicy";
    dispatch_queue_t v11 = "%s called with null session";
LABEL_189:
    _os_log_fault_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_FAULT, v11, buf, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 88))
  {
    uint64_t v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315138;
    long long v84 = "NEIPSecDBAddPolicy";
    dispatch_queue_t v11 = "%s called with null session->policies";
    goto LABEL_189;
  }
  uint64_t v79 = 0;
  int valuePtr = 255;
  buffer[0] = 0;
  v81[0] = 0;
  v80[0] = 0;
  uint64_t v74 = 0;
  unsigned int v75 = &v74;
  uint64_t v76 = 0x2000000000;
  int v77 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = &v70;
  uint64_t v72 = 0x2000000000;
  uint64_t v73 = 0;
  if (NEInitCFTypes_onceToken == -1)
  {
    if (!cf) {
      goto LABEL_97;
    }
  }
  else
  {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
    if (!cf) {
      goto LABEL_97;
    }
  }
  uint64_t v4 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(cf) != v4) {
    goto LABEL_97;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"Mode", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3833;
    __int16 v87 = 2112;
    uint64_t v88 = @"Mode";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"IPSecProtocol", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3834;
    __int16 v87 = 2112;
    uint64_t v88 = @"IPSecProtocol";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"LocalAddress", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3835;
    __int16 v87 = 2112;
    uint64_t v88 = @"LocalAddress";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (!NEGetValueWithType((const __CFDictionary *)cf, @"RemoteAddress", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3836;
    __int16 v87 = 2112;
    uint64_t v88 = @"RemoteAddress";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalPrefix")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"LocalPrefix", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3837;
    __int16 v87 = 2112;
    uint64_t v88 = @"LocalPrefix";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemotePrefix")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"RemotePrefix", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3838;
    __int16 v87 = 2112;
    uint64_t v88 = @"RemotePrefix";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalPort")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"LocalPort", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3839;
    __int16 v87 = 2112;
    uint64_t v88 = @"LocalPort";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemotePort")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"RemotePort", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3840;
    __int16 v87 = 2112;
    uint64_t v88 = @"RemotePort";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"UpperLayerProtocol")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"UpperLayerProtocol", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3842;
    __int16 v87 = 2112;
    uint64_t v88 = @"UpperLayerProtocol";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"UniqueID")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"UniqueID", CFNUMBER_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3843;
    __int16 v87 = 2112;
    uint64_t v88 = @"UniqueID";
    __int16 v89 = 2048;
    uint64_t v90 = CFNUMBER_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"Direction")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"Direction", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3844;
    __int16 v87 = 2112;
    uint64_t v88 = @"Direction";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"Level")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"Level", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3846;
    __int16 v87 = 2112;
    uint64_t v88 = @"Level";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OuterLocalAddress")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"OuterLocalAddress", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3848;
    __int16 v87 = 2112;
    uint64_t v88 = @"OuterLocalAddress";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OuterRemoteAddress")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"OuterRemoteAddress", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3849;
    __int16 v87 = 2112;
    uint64_t v88 = @"OuterRemoteAddress";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"IPSecInterface")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"IPSecInterface", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3851;
    __int16 v87 = 2112;
    uint64_t v88 = @"IPSecInterface";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"InternalInterface")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"InternalInterface", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3852;
    __int16 v87 = 2112;
    uint64_t v88 = @"InternalInterface";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface")
    && !NEGetValueWithType((const __CFDictionary *)cf, @"OutgoingInterface", CFSTRING_TYPE))
  {
    uint64_t v8 = ne_log_obj();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_97;
    }
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3853;
    __int16 v87 = 2112;
    uint64_t v88 = @"OutgoingInterface";
    __int16 v89 = 2048;
    uint64_t v90 = CFSTRING_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_96;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"IntializeDisabled")
    || NEGetValueWithType((const __CFDictionary *)cf, @"IntializeDisabled", CFBOOLEAN_TYPE))
  {
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"Mode"))
    {
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, @"Mode");
      if (Value) {
        LODWORD(Value) = CFEqual(Value, @"Transport");
      }
      BOOL v6 = Value == 0;
      if (Value) {
        char v7 = 1;
      }
      else {
        char v7 = 2;
      }
    }
    else
    {
      char v7 = 2;
      BOOL v6 = 1;
    }
    if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"Direction"))
    {
      CFStringRef v13 = CFDictionaryGetValue((CFDictionaryRef)cf, @"Direction");
      if (!v13) {
        goto LABEL_107;
      }
      uint64_t v14 = v13;
      if (CFEqual(v13, @"In"))
      {
        char v15 = 0;
        char v16 = 1;
        goto LABEL_90;
      }
      if (!CFEqual(v14, @"Out"))
      {
LABEL_107:
        uint64_t v20 = ne_log_obj();
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v23 = "add policy, invalid direction";
        goto LABEL_103;
      }
      char v16 = 0;
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      char v16 = 0;
    }
LABEL_90:
    if (!CFDictionaryContainsKey((CFDictionaryRef)cf, @"IPSecProtocol"))
    {
      __int16 v67 = 0;
      goto LABEL_112;
    }
    uint64_t v17 = CFDictionaryGetValue((CFDictionaryRef)cf, @"IPSecProtocol");
    if (v17)
    {
      uint64_t v18 = v17;
      if (CFEqual(v17, @"ESP"))
      {
        __int16 v19 = 50;
LABEL_111:
        __int16 v67 = v19;
LABEL_112:
        if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"UpperLayerProtocol"))
        {
          CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"UpperLayerProtocol");
          CFNumberGetValue(v24, kCFNumberIntType, &valuePtr);
        }
        char v68 = v7;
        char v64 = v15;
        if (v6)
        {
          if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OuterLocalAddress"))
          {
            CFStringRef v25 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OuterLocalAddress");
            unsigned int v26 = (UInt8 *)NECreateAddressStructFromString(v25, 0, 0);
          }
          else
          {
            unsigned int v26 = 0;
          }
          if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OuterRemoteAddress"))
          {
            CFStringRef v27 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OuterRemoteAddress");
            uint64_t v28 = (UInt8 *)NECreateAddressStructFromString(v27, 0, 0);
LABEL_124:
            uint64_t v29 = CFDictionaryGetValue((CFDictionaryRef)cf, @"Level");
            if (v29 && (CFNumberRef v30 = v29, !CFEqual(v29, @"None")))
            {
              if (!CFEqual(v30, @"Unique"))
              {
                if (CFEqual(v30, @"Require"))
                {
                  uint64_t v66 = 2;
                  char v65 = 2;
                }
                else
                {
                  if (!CFEqual(v30, @"Discard"))
                  {
                    int v63 = ne_log_obj();
                    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_error_impl(&dword_19DDAF000, v63, OS_LOG_TYPE_ERROR, "add policy, invalid policy level", buf, 2u);
                    }
                    char v34 = 0;
                    uint64_t v37 = 0;
                    __int16 v42 = 0;
                    uint64_t v45 = 0;
                    if (!v26) {
                      goto LABEL_174;
                    }
                    goto LABEL_173;
                  }
                  uint64_t v66 = 0;
                  char v65 = 0;
                }
LABEL_128:
                CFStringRef v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalAddress");
                int v33 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalPort");
                char v34 = NECreateAddressStructFromString(v32, (uint64_t)v33, 0);
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalRangeEndAddress"))
                {
                  CFStringRef v35 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalRangeEndAddress");
                  CFNumberRef v36 = CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalRangeEndPort");
                  uint64_t v37 = (UInt8 *)NECreateAddressStructFromString(v35, (uint64_t)v36, 0);
                }
                else
                {
                  uint64_t v37 = 0;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"LocalPrefix"))
                {
                  CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocalPrefix");
                  CFNumberGetValue(v38, kCFNumberIntType, (char *)&v79 + 4);
                }
                else
                {
                  if (v6) {
                    int v39 = 24;
                  }
                  else {
                    int v39 = 32;
                  }
                  HIDWORD(v79) = v39;
                }
                CFStringRef v40 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RemoteAddress");
                int v41 = CFDictionaryGetValue((CFDictionaryRef)cf, @"RemotePort");
                __int16 v42 = NECreateAddressStructFromString(v40, (uint64_t)v41, 0);
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemoteRangeEndAddress"))
                {
                  CFStringRef v43 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RemoteRangeEndAddress");
                  long long v44 = CFDictionaryGetValue((CFDictionaryRef)cf, @"RemoteRangeEndPort");
                  uint64_t v45 = (UInt8 *)NECreateAddressStructFromString(v43, (uint64_t)v44, 0);
                }
                else
                {
                  uint64_t v45 = 0;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"RemotePrefix"))
                {
                  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"RemotePrefix");
                  CFNumberGetValue(v46, kCFNumberIntType, &v79);
                }
                else
                {
                  if (v6) {
                    int v47 = 24;
                  }
                  else {
                    int v47 = 32;
                  }
                  LODWORD(v79) = v47;
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"IPSecInterface"))
                {
                  CFStringRef v48 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"IPSecInterface");
                  CFStringGetCString(v48, buffer, 16, 0x600u);
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"InternalInterface"))
                {
                  CFStringRef v49 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"InternalInterface");
                  CFStringGetCString(v49, v81, 16, 0x600u);
                }
                if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"OutgoingInterface"))
                {
                  CFStringRef v50 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, @"OutgoingInterface");
                  CFStringGetCString(v50, v80, 16, 0x600u);
                }
                __int16 v51 = NEGetIntFromDictionary((const __CFDictionary *)cf, @"IntializeDisabled", 0);
                uint8_t v52 = _NEIPSecDBGetQueue();
                block[0] = MEMORY[0x1E4F143A8];
                block[1] = 0x40000000;
                block[2] = __NEIPSecDBAddPolicy_block_invoke;
                block[3] = &unk_1E5991328;
                void block[6] = a1;
                void block[7] = cf;
                block[4] = &v74;
                void block[5] = &v70;
                dispatch_sync(v52, block);
                if (v16) {
                  goto LABEL_200;
                }
                uint64_t v53 = *(NSObject **)(a1 + 64);
                dispatch_queue_t v54 = _NEIPSecDBGetQueue();
                unsigned int v55 = buffer;
                if (!buffer[0]) {
                  unsigned int v55 = 0;
                }
                uint64_t v56 = v81;
                if (!v81[0]) {
                  uint64_t v56 = 0;
                }
                int v57 = v80;
                if (!v80[0]) {
                  int v57 = 0;
                }
                if (NEPFKeySendSPDAdd(v53, (uint64_t)v54, (uint64_t)v34, v37, BYTE4(v79), (uint64_t)v42, v45, v79, valuePtr, SHIWORD(valuePtr), v66, 2, v67, v68, v65, SWORD2(v66), v26, v28, 0,
                       v55,
                       v56,
                       v57,
                       v51))
                {
LABEL_200:
                  if ((v64 & 1) != 0
                    || (int v58 = *(NSObject **)(a1 + 64),
                        dispatch_queue_t v59 = _NEIPSecDBGetQueue(),
                        NEPFKeySendSPDAdd(v58, (uint64_t)v59, (uint64_t)v42, v45, v79, (uint64_t)v34, v37, BYTE4(v79), valuePtr, SHIWORD(valuePtr), v66, 1, v67, v68, v65, SWORD2(v66), v28, v26, 0,
                          0,
                          0,
                          0,
                          v51)))
                  {
                    if (NEIPSecDBCopyResponseForQueuedRequest(v71[3], 0)) {
                      goto LABEL_172;
                    }
                    uint64_t v60 = ne_log_obj();
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      uint64_t v61 = "failed to receive response for pfkey add policy";
LABEL_197:
                      _os_log_error_impl(&dword_19DDAF000, v60, OS_LOG_TYPE_ERROR, v61, buf, 2u);
                    }
                  }
                  else
                  {
                    uint64_t v60 = ne_log_obj();
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      uint64_t v61 = "pfkey send add policy failed";
                      goto LABEL_197;
                    }
                  }
                }
                else
                {
                  uint64_t v60 = ne_log_obj();
                  if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                  {
                    *(_WORD *)long long buf = 0;
                    uint64_t v61 = "pfkey send add policy failed";
                    goto LABEL_197;
                  }
                }
                NEIPSecDBRemovePolicyIDFromSAs(a1, *((_DWORD *)v75 + 6));
                *((_DWORD *)v75 + 6) = 0;
LABEL_172:
                if (!v26)
                {
LABEL_174:
                  if (v28) {
                    free(v28);
                  }
                  if (v42) {
                    free(v42);
                  }
                  if (v34) {
                    free(v34);
                  }
                  if (v45) {
                    free(v45);
                  }
                  if (v37) {
                    free(v37);
                  }
                  goto LABEL_98;
                }
LABEL_173:
                free(v26);
                goto LABEL_174;
              }
              if (CFDictionaryContainsKey((CFDictionaryRef)cf, @"UniqueID"))
              {
                *(_DWORD *)long long buf = 0;
                CFNumberRef v62 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"UniqueID");
                CFNumberGetValue(v62, kCFNumberIntType, buf);
                WORD2(v66) = *(_WORD *)buf;
              }
              else
              {
                WORD2(v66) = 0;
              }
              char v65 = 3;
              __int16 v31 = 2;
            }
            else
            {
              char v65 = 0;
              WORD2(v66) = 0;
              __int16 v31 = 1;
            }
            LOWORD(v66) = v31;
            goto LABEL_128;
          }
        }
        else
        {
          unsigned int v26 = 0;
        }
        uint64_t v28 = 0;
        goto LABEL_124;
      }
      if (CFEqual(v18, @"AH"))
      {
        __int16 v19 = 51;
        goto LABEL_111;
      }
    }
    uint64_t v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v23 = "add policy, invalid ipsec protocol";
      goto LABEL_103;
    }
    goto LABEL_98;
  }
  uint64_t v8 = ne_log_obj();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315906;
    long long v84 = "NEIPSecDBValidatePolicyDictionary";
    __int16 v85 = 1024;
    int v86 = 3855;
    __int16 v87 = 2112;
    uint64_t v88 = @"IntializeDisabled";
    __int16 v89 = 2048;
    uint64_t v90 = CFBOOLEAN_TYPE;
    int v9 = "%s:%d: type of value for key %@ != %lu";
LABEL_96:
    _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x26u);
  }
LABEL_97:
  uint64_t v20 = ne_log_obj();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v23 = "add policy dictionary validation failed";
LABEL_103:
    _os_log_error_impl(&dword_19DDAF000, v20, OS_LOG_TYPE_ERROR, v23, buf, 2u);
  }
LABEL_98:
  uint64_t v21 = v71[3];
  if (v21)
  {
    NEIPSecDBRemoveQueuedRequest(v21);
    free((void *)v71[3]);
  }
  uint64_t v12 = *((unsigned int *)v75 + 6);
  _Block_object_dispose(&v70, 8);
  _Block_object_dispose(&v74, 8);
  return v12;
}

_OWORD *__NEIPSecDBAddPolicy_block_invoke(void *a1)
{
  uint64_t v3 = a1[6];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[7];
  int v4 = *(_DWORD *)(v3 + 76);
  if ((v4 + 1) > 1) {
    int v5 = v4 + 1;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)(v3 + 76) = v5;
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v4;
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
  if (MutableCopy)
  {
    CFMutableDictionaryRef v7 = MutableCopy;
    NEAddValueToIntKeyedDictionary(*(__CFDictionary **)(a1[6] + 88), *(_DWORD *)(*(void *)(a1[4] + 8) + 24), MutableCopy);
    CFRelease(v7);
  }
  BOOL result = NEIPSecDBCreateQueuedRequest(a1[6], 14, *(_DWORD *)(*(void *)(a1[4] + 8) + 24));
  *(void *)(*(void *)(a1[5] + 8) + 24) = result;
  return result;
}

void NEIPSecDBRemovePolicyIDFromSAs(uint64_t a1, int a2)
{
  int v4 = _NEIPSecDBGetQueue();
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __NEIPSecDBRemovePolicyIDFromSAs_block_invoke;
  v5[3] = &__block_descriptor_tmp_229;
  v5[4] = a1;
  int v6 = a2;
  dispatch_sync(v4, v5);
}

void __NEIPSecDBRemovePolicyIDFromSAs_block_invoke(uint64_t a1)
{
}

uint64_t NEIPSecDBDeletePolicy(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v24 = 0x2000000000;
    uint64_t v25 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2000000000;
    uint64_t v22 = 0;
    int v4 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBDeletePolicy_block_invoke;
    block[3] = &unk_1E5991350;
    void block[5] = &v19;
    void block[6] = a1;
    int v18 = a2;
    block[4] = &buf;
    dispatch_sync(v4, block);
    if (*(void *)(*((void *)&buf + 1) + 24))
    {
      int v5 = *(NSObject **)(a1 + 64);
      dispatch_queue_t v6 = _NEIPSecDBGetQueue();
      int v7 = NEGetIntFromDictionary(*(const __CFDictionary **)(*((void *)&buf + 1) + 24), @"PolicyID", 0);
      if (pfkey_send_x5(v5, (uint64_t)v6, 0x16u, v7))
      {
        if (NEIPSecDBCopyResponseForQueuedRequest(v20[3], 0))
        {
          uint64_t v8 = 1;
LABEL_14:
          uint64_t v11 = *((void *)&buf + 1);
          uint64_t v12 = *(const void **)(*((void *)&buf + 1) + 24);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(v11 + 24) = 0;
          }
          uint64_t v13 = v20[3];
          if (v13)
          {
            NEIPSecDBRemoveQueuedRequest(v13);
            free((void *)v20[3]);
          }
          _Block_object_dispose(&v19, 8);
          _Block_object_dispose(&buf, 8);
          return v8;
        }
        int v9 = ne_log_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)char v16 = 0;
          uint64_t v10 = "failed to receive response for pfkey delete policy";
          goto LABEL_12;
        }
LABEL_13:
        uint64_t v8 = 0;
        goto LABEL_14;
      }
      int v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      *(_WORD *)char v16 = 0;
      uint64_t v10 = "pfkey send delete policy failed";
    }
    else
    {
      int v9 = ne_log_obj();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      *(_WORD *)char v16 = 0;
      uint64_t v10 = "delete policy, policy data is NULL";
    }
LABEL_12:
    _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, v10, v16, 2u);
    goto LABEL_13;
  }
  char v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBDeletePolicy";
    _os_log_fault_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

uint64_t NEIPSecDBCopyPolicy(uint64_t a1, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v25 = 0x2000000000;
    uint64_t v26 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x2000000000;
    uint64_t v23 = 0;
    uint64_t v19 = 0;
    int v4 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBCopyPolicy_block_invoke;
    block[3] = &unk_1E5991378;
    void block[5] = &v20;
    void block[6] = a1;
    int v18 = a2;
    block[4] = &buf;
    dispatch_sync(v4, block);
    if (*(void *)(*((void *)&buf + 1) + 24))
    {
      int v5 = *(NSObject **)(a1 + 64);
      dispatch_queue_t v6 = _NEIPSecDBGetQueue();
      int v7 = NEGetIntFromDictionary(*(const __CFDictionary **)(*((void *)&buf + 1) + 24), @"PolicyID", 0);
      if (pfkey_send_x5(v5, (uint64_t)v6, 0x10u, v7))
      {
        if (NEIPSecDBCopyResponseForQueuedRequest(v21[3], &v19)) {
          goto LABEL_10;
        }
        uint64_t v8 = ne_log_obj();
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_10;
        }
        *(_WORD *)char v16 = 0;
        int v9 = "failed to receive response for pfkey spd get";
        goto LABEL_17;
      }
      uint64_t v8 = ne_log_obj();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        uint64_t v10 = *((void *)&buf + 1);
        uint64_t v11 = *(const void **)(*((void *)&buf + 1) + 24);
        if (v11)
        {
          CFRelease(v11);
          *(void *)(v10 + 24) = 0;
        }
        uint64_t v12 = v21[3];
        if (v12)
        {
          NEIPSecDBRemoveQueuedRequest(v12);
          free((void *)v21[3]);
        }
        uint64_t v13 = v19;
        _Block_object_dispose(&v20, 8);
        _Block_object_dispose(&buf, 8);
        return v13;
      }
      *(_WORD *)char v16 = 0;
      int v9 = "pfkey send spd get failed";
    }
    else
    {
      uint64_t v8 = ne_log_obj();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      *(_WORD *)char v16 = 0;
      int v9 = "copy policy, policy data is NULL";
    }
LABEL_17:
    _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, v9, v16, 2u);
    goto LABEL_10;
  }
  char v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBCopyPolicy";
    _os_log_fault_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

__CFArray *NEIPSecDBCopyPolicyIDs(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBCopyPolicyIDs";
    uint64_t v14 = "%s called with null session";
LABEL_19:
    _os_log_fault_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_FAULT, v14, (uint8_t *)&buf, 0xCu);
    return 0;
  }
  if (!*(void *)(a1 + 88))
  {
    uint64_t v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "NEIPSecDBCopyPolicyIDs";
    uint64_t v14 = "%s called with null session->policies";
    goto LABEL_19;
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v17 = 0x2000000000;
  uint64_t v18 = 0;
  CFDictionaryRef v2 = _NEIPSecDBGetQueue();
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  void v15[2] = __NEIPSecDBCopyPolicyIDs_block_invoke;
  v15[3] = &unk_1E59913A0;
  v15[4] = &buf;
  v15[5] = a1;
  dispatch_sync(v2, v15);
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24));
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  int v5 = Mutable;
  if (Count >= 1 && Mutable != 0)
  {
    int v7 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    uint64_t v8 = (const void **)malloc_type_calloc(Count, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24), v7, v8);
    uint64_t v9 = 0;
    do
      CFArrayAppendValue(v5, v7[v9++]);
    while (Count != v9);
    free(v7);
    free(v8);
  }
  uint64_t v10 = *((void *)&buf + 1);
  uint64_t v11 = *(const void **)(*((void *)&buf + 1) + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(v10 + 24) = 0;
  }
  _Block_object_dispose(&buf, 8);
  return v5;
}

CFDictionaryRef __NEIPSecDBCopyPolicyIDs_block_invoke(CFDictionaryRef result)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)result + 5) + 88);
  if (v1)
  {
    CFDictionaryRef v2 = result;
    BOOL result = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    *(void *)(*(void *)(*((void *)v2 + 4) + 8) + 24) = result;
  }
  return result;
}

uint64_t NEIPSecDBFlushPolicies(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v25 = 0x2000000000;
    uint64_t v26 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x2000000000;
    uint64_t v23 = 0;
    CFDictionaryRef v2 = _NEIPSecDBGetQueue();
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __NEIPSecDBFlushPolicies_block_invoke;
    block[3] = &unk_1E59913C8;
    void block[5] = &v20;
    void block[6] = a1;
    block[4] = &buf;
    dispatch_sync(v2, block);
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24));
    if (Count < 1) {
      goto LABEL_6;
    }
    size_t v4 = Count;
    int v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    dispatch_queue_t v6 = (const void **)malloc_type_calloc(v4, 8uLL, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(*((void *)&buf + 1) + 24), v5, v6);
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v8 = *(NSObject **)(a1 + 64);
      dispatch_queue_t v9 = _NEIPSecDBGetQueue();
      int v10 = NEGetIntFromDictionary((const __CFDictionary *)v6[i], @"PolicyID", 0);
      pfkey_send_x5(v8, (uint64_t)v9, 0x16u, v10);
    }
    free(v5);
    free(v6);
    if (NEIPSecDBCopyResponseForQueuedRequest(v21[3], 0))
    {
LABEL_6:
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v12 = ne_log_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, "failed to receive response for pfkey flush policies", v18, 2u);
      }
      uint64_t v11 = 0;
    }
    uint64_t v13 = *((void *)&buf + 1);
    uint64_t v14 = *(const void **)(*((void *)&buf + 1) + 24);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v13 + 24) = 0;
    }
    uint64_t v15 = v21[3];
    if (v15)
    {
      NEIPSecDBRemoveQueuedRequest(v15);
      free((void *)v21[3]);
    }
    _Block_object_dispose(&v20, 8);
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "NEIPSecDBFlushPolicies";
      _os_log_fault_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v11;
}

_OWORD *__NEIPSecDBFlushPolicies_block_invoke(_OWORD *result)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)result + 6) + 88);
  if (v1)
  {
    CFDictionaryRef v2 = result;
    *(void *)(*(void *)(*((void *)result + 4) + 8) + 24) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
    BOOL result = NEIPSecDBCreateQueuedRequest(*((void *)v2 + 6), 19, 0);
    *(void *)(*(void *)(*((void *)v2 + 5) + 8) + 24) = result;
  }
  return result;
}

uint64_t NEIPSecDBFlushAll(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t result = NEIPSecDBFlushSAs(a1);
    if (result) {
      return NEIPSecDBFlushPolicies(a1) != 0;
    }
  }
  else
  {
    uint64_t v3 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v3, OS_LOG_TYPE_FAULT);
    if (result)
    {
      int v4 = 136315138;
      int v5 = "NEIPSecDBFlushAll";
      _os_log_fault_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v4, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL NEIPSecDBInvalidateSession(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = ne_log_obj();
  uint64_t v3 = v2;
  if (a1)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = (const char *)a1;
      _os_log_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_DEFAULT, "%@ invalidating", buf, 0xCu);
    }
    BOOL result = 1;
    *(unsigned char *)(a1 + 56) = 1;
    if (*(void *)(a1 + 64))
    {
      int v5 = _NEIPSecDBGetQueue();
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __NEIPSecDBInvalidateSession_block_invoke;
      block[3] = &__block_descriptor_tmp_215;
      block[4] = a1;
      dispatch_sync(v5, block);
      *(void *)(a1 + 64) = 0;
      return 1;
    }
  }
  else
  {
    BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v8 = "NEIPSecDBInvalidateSession";
      _os_log_fault_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
      return 0;
    }
  }
  return result;
}

void __NEIPSecDBInvalidateSession_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    while (1)
    {
      int v4 = (void *)*v3;
      int v5 = v3[3];
      uint64_t v6 = (void *)*v3;
      if (v5)
      {
        intptr_t v7 = dispatch_source_testcancel((dispatch_source_t)v3[3]);
        uint64_t v6 = v4;
        if (!v7) {
          break;
        }
      }
      if (v6) {
        goto LABEL_5;
      }
LABEL_6:
      *(void *)v3[1] = v6;
      free(v3);
      uint64_t v3 = v4;
      if (!v4)
      {
        uint64_t v2 = *(void *)(a1 + 32);
        goto LABEL_10;
      }
    }
    dispatch_source_cancel(v5);
    uint64_t v6 = (void *)*v3;
    if (!*v3) {
      goto LABEL_6;
    }
LABEL_5:
    v6[1] = v3[1];
    goto LABEL_6;
  }
LABEL_10:
  NEPFKeyClose(*(NSObject **)(v2 + 64));
  CFArrayRef v8 = (const __CFArray *)g_IPSecDBSessions;
  v13.length = CFArrayGetCount((CFArrayRef)g_IPSecDBSessions);
  v13.location = 0;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v8, v13, *(const void **)(a1 + 32));
  if (FirstIndexOfValue != -1)
  {
    CFIndex v10 = FirstIndexOfValue;
    uint64_t v11 = (__CFArray *)g_IPSecDBSessions;
    CFArrayRemoveValueAtIndex(v11, v10);
  }
}

uint64_t NEIPSecDBStartIdleTimeout(uint64_t a1, int a2, int a3, int a4)
{
  return NEIPSecDBCreateStatsTimer(a1, 0, a2, a3, a4);
}

uint64_t NEIPSecDBCreateStatsTimer(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v6 = 0;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v20 = 0x2000000000;
    char v21 = 0;
    if (a3 && a4 && a5)
    {
      uint64_t v11 = _NEIPSecDBGetQueue();
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      void v14[2] = __NEIPSecDBCreateStatsTimer_block_invoke;
      v14[3] = &unk_1E59914B0;
      int v15 = a4;
      int v16 = a5;
      int v17 = a3;
      int v18 = a2;
      v14[4] = &buf;
      v14[5] = a1;
      dispatch_sync(v11, v14);
      uint64_t v6 = *(unsigned __int8 *)(*((void *)&buf + 1) + 24);
    }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    CFRange v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "NEIPSecDBCreateStatsTimer";
      _os_log_fault_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  return v6;
}

void __NEIPSecDBCreateStatsTimer_block_invoke(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 104);
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    int v4 = *(_DWORD *)(a1 + 52);
    while (1)
    {
      uint64_t v5 = *v2;
      if (v3)
      {
        if (*((_DWORD *)v2 + 4) == v3) {
          break;
        }
      }
      if (v4 && *((_DWORD *)v2 + 5) == v4) {
        break;
      }
      uint64_t v2 = (void *)*v2;
      if (!v5) {
        goto LABEL_8;
      }
    }
    int v8 = 0;
    intptr_t v7 = (unsigned int *)v2;
  }
  else
  {
LABEL_8:
    uint64_t v6 = (unsigned int *)malloc_type_calloc(1uLL, 0x58uLL, 0x10A0040BC06665BuLL);
    if (!v6) {
      return;
    }
    intptr_t v7 = v6;
    uint64_t v2 = 0;
    v6[4] = *(_DWORD *)(a1 + 48);
    v6[5] = *(_DWORD *)(a1 + 52);
    int v8 = 1;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 56) / 0x14u;
  if (v9 <= 2) {
    unsigned int v9 = 2;
  }
  unsigned int v10 = v7[10];
  unsigned int v11 = v10 - 1;
  if (v10 - 1 >= v9)
  {
    v7[10] = v9;
    unsigned int v10 = v9;
  }
  int v12 = *(_DWORD *)(a1 + 60);
  if (v12 == 1)
  {
    if (*(_DWORD *)(a1 + 56) > v10) {
      unsigned int v10 = *(_DWORD *)(a1 + 56);
    }
    v7[9] = v10;
  }
  else if (!v12)
  {
    if (*(_DWORD *)(a1 + 56) > v10) {
      unsigned int v10 = *(_DWORD *)(a1 + 56);
    }
    v7[8] = v10;
  }
  if (v11 < v9) {
    goto LABEL_35;
  }
  CFRange v13 = *((void *)v7 + 3);
  if (v13)
  {
    if (!dispatch_source_testcancel(*((dispatch_source_t *)v7 + 3))) {
      dispatch_source_cancel(v13);
    }
    *((void *)v7 + 3) = 0;
  }
  uint64_t v14 = ne_log_obj();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 48);
    int v16 = *(_DWORD *)(a1 + 52);
    unsigned int v17 = v7[10];
    *(_DWORD *)long long buf = 136315906;
    uint64_t v26 = "NEIPSecDBCreateStatsTimer_block_invoke";
    __int16 v27 = 1024;
    int v28 = v15;
    __int16 v29 = 1024;
    int v30 = v16;
    __int16 v31 = 1024;
    unsigned int v32 = v17;
    _os_log_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_DEFAULT, "%s: Starting stat timeout (SAs in:%d out:%d) Polling: every %d", buf, 0x1Eu);
  }
  int v18 = _NEIPSecDBGetQueue();
  uint64_t v19 = 1000 * v7[10];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 0x40000000;
  v24[2] = __NEIPSecDBCreateStatsTimer_block_invoke_232;
  v24[3] = &__block_descriptor_tmp_233;
  uint64_t v20 = *(void *)(a1 + 40);
  v24[4] = v7;
  v24[5] = v20;
  v24[6] = *(void *)(a1 + 48);
  char v21 = NERepeatingEventCreate(v18, 0, 0, v19, 0, 0, v24, 0);
  *((void *)v7 + 3) = v21;
  if (v21)
  {
    if (v8)
    {
      uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 104);
      *(void *)intptr_t v7 = v22;
      if (v22) {
        *(void *)(*(void *)(*(void *)(a1 + 40) + 104) + 8) = v7;
      }
      *(void *)(*(void *)(a1 + 40) + 104) = v7;
      *((void *)v7 + 1) = *(void *)(a1 + 40) + 104;
    }
LABEL_35:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v23 = *v2;
    if (*v2) {
      *(void *)(v23 + 8) = v2[1];
    }
    *(void *)v2[1] = v23;
  }
  free(v7);
}

void __NEIPSecDBCreateStatsTimer_block_invoke_232(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 72) = 0;
  *(void *)(v1 + 64) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    int v5 = *(_DWORD *)(a1 + 48);
    int v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)long long buf = 0;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10000400A747E1EuLL);
    if (!v6) {
      return;
    }
    intptr_t v7 = v6;
    int v8 = (UInt8 *)malloc_type_calloc(1uLL, 0x28uLL, 0x10000400A747E1EuLL);
    if (!v8)
    {
      free(v7);
      return;
    }
    unsigned int v9 = v8;
    *((void *)v7 + 4) = 0;
    *intptr_t v7 = 0u;
    v7[1] = 0u;
    *((void *)v8 + 4) = 0;
    *(_OWORD *)int v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    CFDictionaryRef v10 = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(v2 + 80), v5);
    CFDictionaryRef v11 = v10;
    if (v10)
    {
      if (!NEIPSecDBFilloutBasicSAInfo(v10, 0, 0, buf, 0, 0, 0))
      {
        int v14 = 0;
        int v15 = 0;
        int v12 = 0;
        goto LABEL_17;
      }
      *(_DWORD *)intptr_t v7 = *(_DWORD *)buf;
      int v12 = (UInt8 *)v7;
    }
    else
    {
      int v12 = 0;
    }
    CFDictionaryRef v13 = NEGetValueFromIntKeyedDictionary(*(const __CFDictionary **)(v2 + 80), v4);
    if (v13 && NEIPSecDBFilloutBasicSAInfo(v13, 0, 0, buf, 0, 0, 0))
    {
      *(_DWORD *)unsigned int v9 = *(_DWORD *)buf;
      int v14 = 1;
      int v15 = v9;
      if (!v11)
      {
LABEL_17:
        free(v7);
        int v16 = 0;
        if (v14) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
    }
    else
    {
      int v15 = 0;
      int v14 = 0;
      if (!v11) {
        goto LABEL_17;
      }
    }
    int v16 = 1;
    if (v14)
    {
LABEL_18:
      int v17 = 1;
      goto LABEL_19;
    }
LABEL_15:
    free(v9);
    int v17 = 0;
LABEL_19:
    char v18 = v16 ^ 1;
    if (!v12) {
      char v18 = 1;
    }
    if ((v18 & 1) == 0)
    {
      *(_OWORD *)long long buf = *(unsigned int *)(a1 + 48);
      uint64_t v19 = *(NSObject **)(*(void *)(a1 + 40) + 64);
      dispatch_queue_t v20 = _NEIPSecDBGetQueue();
      if (!NEPFKeySendGetStats(v19, (uint64_t)v20, 0, (unint64_t *)buf, 1, 1, v12, v16))
      {
        char v21 = ne_log_obj();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          int v26 = 136315138;
          __int16 v27 = "NEIPSecDBCreateStatsTimer_block_invoke";
          _os_log_error_impl(&dword_19DDAF000, v21, OS_LOG_TYPE_ERROR, "%s: failed to send stats request for inbound SA\n", (uint8_t *)&v26, 0xCu);
        }
      }
      free(v12);
      ++*(_DWORD *)(*(void *)(a1 + 32) + 64);
    }
    if (v14 && v15)
    {
      *(_OWORD *)long long buf = *(unsigned int *)(a1 + 52);
      uint64_t v22 = *(NSObject **)(*(void *)(a1 + 40) + 64);
      dispatch_queue_t v23 = _NEIPSecDBGetQueue();
      if (!NEPFKeySendGetStats(v22, (uint64_t)v23, 0, (unint64_t *)buf, 1, 2, v15, v17))
      {
        uint64_t v24 = ne_log_obj();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v26 = 136315138;
          __int16 v27 = "NEIPSecDBCreateStatsTimer_block_invoke";
          _os_log_error_impl(&dword_19DDAF000, v24, OS_LOG_TYPE_ERROR, "%s: failed to send stats request for outbound SA\n", (uint8_t *)&v26, 0xCu);
        }
      }
      free(v15);
      ++*(_DWORD *)(*(void *)(a1 + 32) + 64);
    }
    return;
  }
  uint64_t v25 = ne_log_obj();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "NEIPSecDBStatsCreateArrays";
    _os_log_fault_impl(&dword_19DDAF000, v25, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
  }
}

uint64_t NEIPSecDBStartBlackHoleDetection(uint64_t a1, int a2, int a3, int a4)
{
  return NEIPSecDBCreateStatsTimer(a1, 1, a2, a3, a4);
}

uint64_t NEIPSecDBScheduleWithRunLoop(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      int v3 = 136315138;
      int v4 = "NEIPSecDBScheduleWithRunLoop";
      _os_log_fault_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

uint64_t NEIPSecDBUnScheduleWithRunLoop(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      int v3 = 136315138;
      int v4 = "NEIPSecDBUnScheduleWithRunLoop";
      _os_log_fault_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_FAULT, "%s called with null session", (uint8_t *)&v3, 0xCu);
    }
  }
  return 0;
}

__CFString *NEIPSecNotifyCodeCopyString(int a1)
{
  if (a1 <= 39)
  {
    if (a1 > 23)
    {
      switch(a1)
      {
        case 24:
          return @"ServerRejectedAuth";
        case 36:
          return @"ServerInternalAddressFailure";
        case 38:
          return @"ServerRejectedTS";
      }
    }
    else
    {
      switch(a1)
      {
        case 4:
          return @"ServerRejectedSPI";
        case 7:
          return @"ServerRejectedSyntax";
        case 14:
          return @"ServerRejectedProposal";
      }
    }
    return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else
  {
    switch(a1)
    {
      case 70000:
        return @"Unknown";
      case 70001:
        return @"InternalError";
      case 70002:
        return @"CouldNotSend";
      case 70003:
        return @"InvalidArgs";
      case 70004:
        return @"UserRequested";
      case 70005:
        return @"PeerRequested";
      case 70006:
        return @"ServerDidNotRespond";
      case 70007:
        return @"ServerStoppedResponding";
      case 70008:
        return @"ReceivedInvalidSyntax";
      case 70009:
        return @"ReceivedInvalidProposal";
      case 70010:
        return @"ReceivedInvalidSPI";
      case 70011:
        return @"ReceivedInvalidTS";
      case 70012:
        return @"IKESocketFailure";
      case 70013:
        return @"IKELocalAddressMissing";
      case 70014:
        return @"IKERemoteAddressMissing";
      case 70015:
        return @"IKERemotePortMissing";
      case 70016:
        return @"PacketCreateFailed";
      case 70017:
        return @"PacketProcessingFailed";
      case 70018:
        return @"SAMigrationFailed";
      case 70019:
        return @"InvalidConfiguration";
      case 70020:
        return @"FailedToGenerateSPI";
      case 70021:
        return @"CryptoFailed";
      case 70022:
        return @"ConfigurationEstablishmentFailed";
      case 70023:
        return @"ChildInstallSAFailed";
      case 70024:
        return @"NoIKESA";
      case 70025:
        return @"NoChildSA";
      case 70026:
        return @"ChildUninstallSAFailed";
      case 70027:
        return @"AuthFailed";
      case 70028:
        return @"ReceivedInvalidVendorID";
      case 70029:
        return @"EAPIdentityDecryptionFailure";
      case 70030:
        return @"ClientCertNotYetValid";
      case 70031:
        return @"ClientCertExpired";
      case 70032:
        return @"ClientCertMissing";
      case 70033:
        return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
      case 70034:
        return @"ClientCertInvalid";
      case 70035:
        return @"ServerCertNotYetValid";
      case 70036:
        return @"ServerCertExpired";
      case 70037:
        return @"ServerCertMissing";
      case 70038:
        return @"ServerCertInvalid";
      case 70039:
        return @"ReceivedPrivateError";
      case 70040:
        return @"IKESADelete";
      default:
        if (a1 == 40)
        {
          BOOL result = @"ServerRejectedAddress";
        }
        else
        {
          if (a1 != 16407) {
            return (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
          }
          BOOL result = @"IKEStatusServerRedirect";
        }
        break;
    }
  }
  return result;
}

__CFString *NEIPSecNotifyReasonCopyString(int a1)
{
  if (a1 <= 1999)
  {
    BOOL result = @"Unknown";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        BOOL result = @"InternalError";
        break;
      case 2:
        BOOL result = @"CouldNotSend";
        break;
      case 3:
        BOOL result = @"InvalidArgs";
        break;
      default:
        if (a1 == 1000)
        {
          BOOL result = @"UserRequested";
        }
        else if (a1 == 1001)
        {
          BOOL result = @"PeerRequested";
        }
        else
        {
LABEL_12:
          BOOL result = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 3000:
        BOOL result = @"InternalIKESessionMissing";
        break;
      case 3001:
        BOOL result = @"InternalIKESocketFailure";
        break;
      case 3002:
        BOOL result = @"InternalIKELocalAddressMissing";
        break;
      case 3003:
        BOOL result = @"InternalIKERemoteAddressMissing";
        break;
      case 3004:
        BOOL result = @"InternalIKERemotePortMissing";
        break;
      case 3005:
        BOOL result = @"InternalPacketCreateFailed";
        break;
      case 3006:
        BOOL result = @"InternalPacketProcessingFailed";
        break;
      case 3007:
        BOOL result = @"InternalSAMigrationFailed";
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t NEIPSecIKENotificationTypeCopyString(unsigned int a1)
{
  uint64_t v2 = (unsigned __int16)a1 & 0xF000;
  if (v2 == 4096) {
    int v3 = @"IKE";
  }
  else {
    int v3 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%d)", v2);
  }
  if (a1 & 0xF00) < 0x900 && ((0x1BFu >> (BYTE1(a1) & 0xF))) {
    int v4 = off_1E5991790[(a1 >> 8) & 0xF];
  }
  else {
    int v4 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1 & 0xF00);
  }
  if (a1 >= 6u) {
    uint64_t v5 = (__CFString *)objc_msgSend([NSString alloc], "initWithFormat:", @"Unknown(%lld)", a1);
  }
  else {
    uint64_t v5 = off_1E59917D8[a1];
  }
  uint64_t v6 = [[NSString alloc] initWithFormat:@"mode=%@,type=%@,status=%@", v3, v4, v5];

  return v6;
}

CFStringRef NEIPSecIKECreateSessionWithInterfaceAndSocketHandlers(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, a8, a9, 0);
}

CFStringRef NEIPSecIKECreateSessionWithInterfaceAndSASession(const __CFAllocator *a1, const __CFDictionary *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), void *a9)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  dispatch_queue_t v54 = a9;
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"IKEVersion");
  if (!Value || (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr), valuePtr != 1))
  {
    uint64_t v24 = NEIPSecIKEValidateIKEDictionary(a2);
    uint64_t v25 = NEIPSecIKEValidateIKEChildDictionary(a3);
    int v26 = NEIPSecIKEValidateSessionDictionary(a2);
    __int16 v27 = v26;
    if (v24)
    {
      if (v25)
      {
        if (v26)
        {
          if (v54
            || (!a8 ? (uint64_t v28 = 0xFFFFFFFFLL) : (uint64_t v28 = a8(a6)),
                (dispatch_queue_t v54 = [[NEIPSecSAKernelSession alloc] initWithName:@"IKEv2 Session Database" delegate:0 pfkeySocket:v28]) != 0))
          {
            if (a7)
            {
              aBlock[0] = MEMORY[0x1E4F143A8];
              aBlock[1] = 3221225472;
              aBlock[2] = __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke;
              aBlock[3] = &__block_descriptor_40_e57_i40__0_v8r__sockaddr_CC_14c__16r__sockaddr_CC_14c__24r_32l;
              aBlock[4] = a7;
              CFNumberRef v38 = _Block_copy(aBlock);
            }
            else
            {
              CFNumberRef v38 = 0;
            }
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x3032000000;
            __int16 v69 = __Block_byref_object_copy__14544;
            uint64_t v70 = __Block_byref_object_dispose__14545;
            id v71 = 0;
            int v39 = NEIPSecIKECopyDefaultSessionQueue();
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 3221225472;
            block[2] = __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke_339;
            block[3] = &unk_1E5991748;
            uint64_t v61 = buf;
            uint64_t v56 = v24;
            int v57 = v25;
            uint64_t v62 = a4;
            int v58 = v27;
            id v60 = v38;
            dispatch_queue_t v54 = v54;
            dispatch_queue_t v59 = v54;
            uint64_t v63 = a5;
            uint64_t v64 = a6;
            id v40 = v38;
            dispatch_sync(v39, block);

            CFStringRef v18 = (CFStringRef)*(id *)(*(void *)&buf[8] + 40);
            _Block_object_dispose(buf, 8);

            goto LABEL_35;
          }
          __int16 v42 = ne_log_obj();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v28;
            _os_log_fault_impl(&dword_19DDAF000, v42, OS_LOG_TYPE_FAULT, "[NEIPSecSAKernelSession init pfkeySocket=%d] failed", buf, 8u);
          }

          dispatch_queue_t v54 = 0;
LABEL_40:
          CFStringRef v18 = 0;
LABEL_35:

          goto LABEL_36;
        }
        CFStringRef v50 = ne_log_obj();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
          _os_log_fault_impl(&dword_19DDAF000, v50, OS_LOG_TYPE_FAULT, "%s called with null sessionConfig", buf, 0xCu);
        }
      }
      else
      {
        CFStringRef v50 = ne_log_obj();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
          _os_log_fault_impl(&dword_19DDAF000, v50, OS_LOG_TYPE_FAULT, "%s called with null childConfig", buf, 0xCu);
        }
      }
    }
    else
    {
      CFStringRef v50 = ne_log_obj();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "NEIPSecIKECreateSessionWithInterfaceAndSASession";
        _os_log_fault_impl(&dword_19DDAF000, v50, OS_LOG_TYPE_FAULT, "%s called with null ikeConfig", buf, 0xCu);
      }
    }

    goto LABEL_40;
  }
  CFStringRef v18 = CFStringCreateWithCString(a1, "DummyIPSecObject", 0x8000100u);
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000;
  __int16 v69 = __Block_byref_object_copy__14544;
  uint64_t v70 = __Block_byref_object_dispose__14545;
  id v71 = 0;
  if (xpc_client_queue_once != -1) {
    dispatch_once(&xpc_client_queue_once, &__block_literal_global_14546);
  }
  uint64_t v19 = (id)xpc_client_queue_q;
  xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.SecureNetworking.IPSec", v19, 2uLL);
  char v21 = *(void **)(*(void *)&buf[8] + 40);
  *(void *)(*(void *)&buf[8] + 40) = mach_service;

  uint64_t v22 = *(_xpc_connection_s **)(*(void *)&buf[8] + 40);
  if (v22)
  {
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = __create_xpc_connection_block_invoke;
    handler[3] = &unk_1E5991770;
    handler[4] = buf;
    xpc_connection_set_event_handler(v22, handler);
    xpc_connection_resume(*(xpc_connection_t *)(*(void *)&buf[8] + 40));
    dispatch_queue_t v23 = (_xpc_connection_s *)*(id *)(*(void *)&buf[8] + 40);
  }
  else
  {
    uint64_t v29 = ne_log_obj();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      LOWORD(handler[0]) = 0;
      _os_log_error_impl(&dword_19DDAF000, v29, OS_LOG_TYPE_ERROR, "NEIPSec:create_xpc_connection, xpc_connection_create_mach_service fails\n", (uint8_t *)handler, 2u);
    }

    dispatch_queue_t v23 = 0;
  }

  _Block_object_dispose(buf, 8);
  if (!v23) {
    goto LABEL_64;
  }
  xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
  __int16 v31 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (a3) {
    a3 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  }
  BOOL v32 = 0;
  if (!v30 || !v31) {
    goto LABEL_61;
  }
  xpc_dictionary_set_int64(v30, "ipsecobjectref", (int64_t)v18);
  xpc_dictionary_set_int64(v30, "ipsecopcode", 1);
  xpc_dictionary_set_value(v30, "ipsecikedict", v31);
  if (a3) {
    xpc_dictionary_set_value(v30, "ipsecchilddict", a3);
  }
  xpc_object_t v33 = xpc_connection_send_message_with_reply_sync(v23, v30);
  if (!v33)
  {
    BOOL v32 = 0;
    goto LABEL_61;
  }
  char v34 = v23;
  id v35 = v33;
  uint64_t v36 = MEMORY[0x19F3B92C0]();
  if (v36 != MEMORY[0x1E4F14590])
  {
    if (v36 == MEMORY[0x1E4F145A8])
    {
      handle_connection_error(v34, (uint64_t)v35);
    }
    else
    {
      uint64_t v37 = ne_log_obj();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_19DDAF000, v37, OS_LOG_TYPE_ERROR, "NEIPSec: connection returns unknown type\n", buf, 2u);
      }
    }
    BOOL v32 = 0;
    goto LABEL_60;
  }
  xpc_object_t xdict = v35;
  int64_t int64 = xpc_dictionary_get_int64(xdict, "ipsecopcode");
  int64_t v51 = xpc_dictionary_get_int64(xdict, "ipsecobjectref");
  int64_t v52 = int64 - 4096;
  BOOL v44 = int64 <= 4096;
  uint64_t v45 = ne_log_obj();
  BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG);
  if (v44)
  {
    if (v46)
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v52;
      _os_log_debug_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_DEBUG, "process_response invalid reply, opcode = 0x%llx\n", buf, 0xCu);
    }
  }
  else
  {
    if (v46)
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v52;
      _os_log_debug_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_DEBUG, "process_response: op 0x%llx\n", buf, 0xCu);
    }

    if (v52 == 1)
    {
      BOOL v47 = xpc_dictionary_get_BOOL(xdict, "reply");
      BOOL v32 = v18 == (CFStringRef)v51 && v47;
      CFStringRef v48 = ne_log_obj();
      uint64_t v45 = v48;
      if (v32)
      {
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v51;
          _os_log_debug_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_DEBUG, "get_response_BOOLean response: ref %p", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v51;
        _os_log_error_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_ERROR, "get_response_BOOLean response ERROR: requestref %p, returned ref %p", buf, 0x16u);
      }
      goto LABEL_59;
    }
    uint64_t v45 = ne_log_obj();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v52;
      _os_log_error_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_ERROR, "process_response unknown reply, opcode = 0x%llx\n", buf, 0xCu);
    }
  }
  BOOL v32 = 0;
LABEL_59:

LABEL_60:
LABEL_61:
  CFStringRef v49 = ne_log_obj();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v32;
    _os_log_debug_impl(&dword_19DDAF000, v49, OS_LOG_TYPE_DEBUG, "send_xpc_ike_create result %d\n", buf, 8u);
  }

  if (!v32)
  {
LABEL_64:
    if (v18)
    {
      CFRelease(v18);
      CFStringRef v18 = 0;
    }
  }
LABEL_36:

  return v18;
}

void sub_19DED2580(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14544(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14545(uint64_t a1)
{
}

void __create_xpc_connection_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (MEMORY[0x19F3B92C0]() == MEMORY[0x1E4F145A8])
  {
    handle_connection_error(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), (uint64_t)v3);
  }
  else
  {
    int v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "NEIPSec: connection returns unknown type\n", v5, 2u);
    }
  }
}

void handle_connection_error(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = MEMORY[0x1E4F14520];
  uint64_t v5 = ne_log_obj();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (a2 == v4)
  {
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "NEIPSec: connection interrupted\n", buf, 2u);
    }

    xpc_connection_cancel(v3);
  }
  else
  {
    if (v6)
    {
      *(_WORD *)intptr_t v7 = 0;
      _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "NEIPSec: connection error\n", v7, 2u);
    }
  }
}

NEIKEv2IKESAConfiguration *NEIPSecIKEValidateIKEDictionary(void *a1)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (NEInitCFTypes_onceToken != -1) {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
  }
  uint64_t v2 = objc_alloc_init(NEIKEv2IKESAConfiguration);
  if (!a1 || (uint64_t v3 = CFDICTIONARY_TYPE, CFGetTypeID(a1) != v3))
  {
    __int16 v89 = ne_log_obj();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
      __int16 v154 = 1024;
      int v155 = 1112;
      int v92 = "%s:%d: IKE configuration is not a dictionary";
      CFStringRef v93 = v89;
      uint32_t v94 = 18;
      goto LABEL_169;
    }
LABEL_161:

    uint64_t v90 = 0;
    goto LABEL_162;
  }
  p_info = NEPolicyRouteRule.info;
  if (!NEGetValueWithType((const __CFDictionary *)a1, @"IKEVersion", CFNUMBER_TYPE))
  {
    __int16 v89 = ne_log_obj();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
      __int16 v154 = 1024;
      int v155 = 1116;
      __int16 v156 = 2112;
      v157 = @"IKEVersion";
      __int16 v158 = 2048;
      uint64_t v159 = CFNUMBER_TYPE;
      int v92 = "%s:%d: value for key %@ is missing or type != %lu";
      CFStringRef v93 = v89;
      uint32_t v94 = 38;
LABEL_169:
      _os_log_error_impl(&dword_19DDAF000, v93, OS_LOG_TYPE_ERROR, v92, buf, v94);
      goto LABEL_161;
    }
    goto LABEL_161;
  }
  int valuePtr = 0;
  CFNumberRef v5 = (const __CFNumber *)NEGetValueWithType((const __CFDictionary *)a1, @"IKEVersion", CFNUMBER_TYPE);
  CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
  if (valuePtr != 2)
  {
    BOOL v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
      __int16 v154 = 1024;
      int v155 = 1121;
      _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, "%s:%d: IKE version is not 2", buf, 0x12u);
    }
    uint64_t v90 = 0;
    goto LABEL_231;
  }
  BOOL v6 = a1;
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"OutgoingInterface")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"OutgoingInterface", CFSTRING_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1127;
    __int16 v156 = 2112;
    v157 = @"OutgoingInterface";
    __int16 v158 = 2048;
    uint64_t v159 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
LABEL_193:
    uint64_t v98 = v25;
    uint32_t v99 = 38;
LABEL_194:
    _os_log_error_impl(&dword_19DDAF000, v98, OS_LOG_TYPE_ERROR, v95, buf, v99);
    goto LABEL_229;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"OutgoingInterface"))
  {
    intptr_t v7 = [v6 objectForKeyedSubscript:@"OutgoingInterface"];
    [(NEIKEv2IKESAConfiguration *)v2 setOutgoingInterfaceName:v7];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"LocalAddress")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"LocalAddress", CFSTRING_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1132;
    __int16 v156 = 2112;
    v157 = @"LocalAddress";
    __int16 v158 = 2048;
    uint64_t v159 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"LocalPort")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"LocalPort", CFNUMBER_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1133;
    __int16 v156 = 2112;
    v157 = @"LocalPort";
    __int16 v158 = 2048;
    uint64_t v159 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"LocalAddress"))
  {
    int v8 = [v6 objectForKeyedSubscript:@"LocalAddress"];
    unsigned int v9 = [v6 objectForKeyedSubscript:@"LocalPort"];
    CFDictionaryRef v10 = NECreateAddressStructFromString(v8, (uint64_t)v9, 0);

    if (!v10)
    {
      uint64_t v25 = ne_log_obj();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        goto LABEL_229;
      }
      CFDictionaryRef v35 = [v6 objectForKeyedSubscript:@"LocalAddress"];
      uint64_t v96 = [v6 objectForKeyedSubscript:@"LocalPort"];
      *(_DWORD *)long long buf = 136315906;
      uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
      __int16 v154 = 1024;
      int v155 = 1140;
      __int16 v156 = 2112;
      v157 = (__CFString *)v35;
      __int16 v158 = 2112;
      uint64_t v159 = (uint64_t)v96;
      uint64_t v97 = "%s:%d: Failed to parse local address %@:%@";
      goto LABEL_182;
    }
    CFDictionaryRef v11 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v10];
    [(NEIKEv2IKESAConfiguration *)v2 setLocalEndpoint:v11];

    free(v10);
  }
  if (!NEGetValueWithType((const __CFDictionary *)v6, @"RemoteAddress", CFSTRING_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1147;
    __int16 v156 = 2112;
    v157 = @"RemoteAddress";
    __int16 v158 = 2048;
    uint64_t v159 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"RemotePort")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"RemotePort", CFNUMBER_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1148;
    __int16 v156 = 2112;
    v157 = @"RemotePort";
    __int16 v158 = 2048;
    uint64_t v159 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  int v12 = [v6 objectForKeyedSubscript:@"RemoteAddress"];
  CFDictionaryRef v13 = [v6 objectForKeyedSubscript:@"RemotePort"];
  int v14 = NECreateAddressStructFromString(v12, (uint64_t)v13, 0);

  if (!v14)
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    CFDictionaryRef v35 = [v6 objectForKeyedSubscript:@"RemoteAddress"];
    uint64_t v96 = [v6 objectForKeyedSubscript:@"RemotePort"];
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1154;
    __int16 v156 = 2112;
    v157 = (__CFString *)v35;
    __int16 v158 = 2112;
    uint64_t v159 = (uint64_t)v96;
    uint64_t v97 = "%s:%d: Failed to parse remote address %@:%@";
LABEL_182:
    _os_log_error_impl(&dword_19DDAF000, v25, OS_LOG_TYPE_ERROR, v97, buf, 0x26u);

    goto LABEL_228;
  }
  int v15 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v14];
  [(NEIKEv2IKESAConfiguration *)v2 setRemoteEndpoint:v15];

  free(v14);
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"ServerMode")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"ServerMode", CFBOOLEAN_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1160;
    __int16 v156 = 2112;
    v157 = @"ServerMode";
    __int16 v158 = 2048;
    uint64_t v159 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"ServerMode"))
  {
    int v16 = [v6 objectForKeyedSubscript:@"ServerMode"];
    -[NEIKEv2IKESAConfiguration setServerMode:](v2, "setServerMode:", [v16 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"NonceSize")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"NonceSize", CFNUMBER_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1165;
    __int16 v156 = 2112;
    v157 = @"NonceSize";
    __int16 v158 = 2048;
    uint64_t v159 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"NonceSize"))
  {
    int v17 = [v6 objectForKeyedSubscript:@"NonceSize"];
    -[NEIKEv2IKESAConfiguration setNonceSize:](v2, "setNonceSize:", [v17 unsignedIntValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"RedirectSupported")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"RedirectSupported", CFBOOLEAN_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1170;
    __int16 v156 = 2112;
    v157 = @"RedirectSupported";
    __int16 v158 = 2048;
    uint64_t v159 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"RedirectSupported"))
  {
    CFStringRef v18 = [v6 objectForKeyedSubscript:@"RedirectSupported"];
    -[NEIKEv2IKESAConfiguration setAllowRedirect:](v2, "setAllowRedirect:", [v18 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"RedirectedFromServer")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"RedirectedFromServer", CFSTRING_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1175;
    __int16 v156 = 2112;
    v157 = @"RedirectedFromServer";
    __int16 v158 = 2048;
    uint64_t v159 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"RedirectedFromServer"))
  {
    uint64_t v19 = [v6 objectForKeyedSubscript:@"RedirectedFromServer"];
    dispatch_queue_t v20 = NECreateAddressStructFromString(v19, 0, 0);

    if (!v20)
    {
      uint64_t v25 = ne_log_obj();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        CFDictionaryRef v35 = [v6 objectForKeyedSubscript:@"RedirectedFromServer"];
        *(_DWORD *)long long buf = 136315650;
        uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
        __int16 v154 = 1024;
        int v155 = 1181;
        __int16 v156 = 2112;
        v157 = (__CFString *)v35;
        uint64_t v100 = "%s:%d: Failed to parse redirect address %@";
        uint64_t v101 = v25;
        uint32_t v102 = 28;
        goto LABEL_199;
      }
      goto LABEL_229;
    }
    char v21 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v20];
    [(NEIKEv2IKESAConfiguration *)v2 setRedirectedFromServer:v21];

    free(v20);
  }
  CFArrayRef v22 = (const __CFArray *)NEGetValueWithType((const __CFDictionary *)v6, @"Proposals", CFARRAY_TYPE);
  if (!v22)
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1190;
    uint64_t v95 = "%s:%d: IKE configuration does not contain proposals array";
LABEL_202:
    uint64_t v98 = v25;
    uint32_t v99 = 18;
    goto LABEL_194;
  }
  CFArrayRef v23 = v22;
  CFIndex Count = CFArrayGetCount(v22);
  if (!Count)
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1195;
    uint64_t v95 = "%s:%d: IKE configuration proposals array is empty";
    goto LABEL_202;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"EAPProperties")
    && !NEGetValueWithType((const __CFDictionary *)v6, @"EAPProperties", CFDICTIONARY_TYPE))
  {
    uint64_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_229;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
    __int16 v154 = 1024;
    int v155 = 1199;
    __int16 v156 = 2112;
    v157 = @"EAPProperties";
    __int16 v158 = 2048;
    uint64_t v159 = CFDICTIONARY_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_193;
  }
  uint64_t v24 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v25 = v24;
  if (Count < 1)
  {
LABEL_203:
    [(NEIKEv2IKESAConfiguration *)v2 setProposals:v25];
    uint64_t v90 = v2;
    goto LABEL_230;
  }
  CFIndex v26 = 0;
  CFArrayRef v115 = v23;
  id v116 = v24;
  while (1)
  {
    CFIndex v118 = v26;
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v23, v26);
    if (!ValueAtIndex) {
      break;
    }
    uint64_t v28 = ValueAtIndex;
    uint64_t v29 = CFDICTIONARY_TYPE;
    if (CFGetTypeID(ValueAtIndex) != v29) {
      break;
    }
    CFDictionaryRef v119 = v28;
    xpc_object_t v30 = objc_alloc_init(NEIKEv2IKESAProposal);
    __int16 v31 = v30;
    if (v30) {
      v30->_proposalNumber = v118 + 1;
    }
    v120 = v30;
    if (!CFDictionaryContainsKey((CFDictionaryRef)v6, @"AuthenticationMethod"))
    {
      if (!NEGetValueWithType(v119, @"AuthenticationMethod", CFSTRING_TYPE))
      {
        BOOL v32 = ne_log_obj();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
          __int16 v154 = 1024;
          int v155 = 1216;
          __int16 v156 = 2112;
          v157 = @"AuthenticationMethod";
          __int16 v158 = 2048;
          uint64_t v159 = CFSTRING_TYPE;
          _os_log_error_impl(&dword_19DDAF000, v32, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
        }
        goto LABEL_226;
      }
      BOOL v32 = [(__CFDictionary *)v119 objectForKeyedSubscript:@"AuthenticationMethod"];
      xpc_object_t v33 = (void *)NEIPsecIKEGetAuthProcotol(v32);
      if (!v33)
      {
        p_super = ne_log_obj();
        if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
          __int16 v154 = 1024;
          int v155 = 1220;
          __int16 v156 = 2112;
          v157 = (__CFString *)v32;
          _os_log_error_impl(&dword_19DDAF000, p_super, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized authentication method", buf, 0x1Cu);
        }
LABEL_218:

        goto LABEL_226;
      }
      char v34 = v33;
      -[NEConfigurationManager setAppGroupMap:]((uint64_t)v31, v33);

      p_info = NEPolicyRouteRule.info;
    }
    CFDictionaryRef v35 = v119;
    if (!NEGetValueWithType(v119, @"Lifetime", (uint64_t)p_info[478]))
    {
      BOOL v32 = ne_log_obj();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315906;
        uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
        __int16 v154 = 1024;
        int v155 = 1226;
        __int16 v156 = 2112;
        v157 = @"Lifetime";
        __int16 v158 = 2048;
        uint64_t v159 = CFNUMBER_TYPE;
        _os_log_error_impl(&dword_19DDAF000, v32, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
      }
      goto LABEL_227;
    }
    uint64_t v36 = [(__CFDictionary *)v119 objectForKeyedSubscript:@"Lifetime"];
    -[NEIKEv2IKESAProposal setLifetimeSeconds:](v31, "setLifetimeSeconds:", [v36 unsignedLongValue]);

    if (CFDictionaryContainsKey(v119, @"EncryptionAlgorithm"))
    {
      BOOL v32 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v37 = [(__CFDictionary *)v119 objectForKeyedSubscript:@"EncryptionAlgorithm"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        CFNumberRef v38 = NEIPsecIKEGetEncryptionProtocol(v37, 0);
        if (!v38)
        {
          int v39 = v37;
          CFStringRef v104 = ne_log_obj();
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
            __int16 v154 = 1024;
            int v155 = 1235;
            __int16 v156 = 2112;
            v157 = v39;
            _os_log_error_impl(&dword_19DDAF000, v104, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
          }
LABEL_213:

LABEL_226:
          uint64_t v25 = v116;
          CFDictionaryRef v35 = v119;
          __int16 v31 = v120;
LABEL_227:

          goto LABEL_228;
        }
        int v39 = (__CFString *)v38;
        [v32 addObject:v38];
LABEL_58:

        __int16 v31 = v120;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v143 = 0u;
          long long v144 = 0u;
          long long v141 = 0u;
          long long v142 = 0u;
          int v39 = v37;
          uint64_t v40 = [(__CFString *)v39 countByEnumeratingWithState:&v141 objects:v151 count:16];
          if (v40)
          {
            uint64_t v41 = v40;
            long long v110 = v37;
            uint64_t v42 = *(void *)v142;
            while (2)
            {
              for (uint64_t i = 0; i != v41; ++i)
              {
                if (*(void *)v142 != v42) {
                  objc_enumerationMutation(v39);
                }
                BOOL v44 = *(__CFString **)(*((void *)&v141 + 1) + 8 * i);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v45 = NEIPsecIKEGetEncryptionProtocol(v44, 0);
                  if (!v45)
                  {
                    CFStringRef v103 = ne_log_obj();
                    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)long long buf = 136315650;
                      uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
                      __int16 v154 = 1024;
                      int v155 = 1245;
                      __int16 v156 = 2112;
                      v157 = v44;
                      _os_log_error_impl(&dword_19DDAF000, v103, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
                    }

                    CFStringRef v104 = v39;
                    goto LABEL_213;
                  }
                  BOOL v46 = v45;
                  [v32 addObject:v45];
                }
              }
              uint64_t v41 = [(__CFString *)v39 countByEnumeratingWithState:&v141 objects:v151 count:16];
              if (v41) {
                continue;
              }
              break;
            }
            uint64_t v25 = v116;
            CFDictionaryRef v35 = v119;
            uint64_t v37 = v110;
          }
          else
          {
            uint64_t v25 = v116;
          }
          goto LABEL_58;
        }
      }
      [(NEIKEv2IKESAProposal *)v31 setEncryptionProtocols:v32];

      p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
    }
    if (!CFDictionaryContainsKey(v35, @"IntegrityAlgorithm")) {
      goto LABEL_90;
    }
    BOOL v32 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    BOOL v47 = [(__CFDictionary *)v35 objectForKeyedSubscript:@"IntegrityAlgorithm"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      p_super = NEIPsecIKEGetIntegrityProtocol(v47);
      if (!v47)
      {
        CFStringRef v105 = ne_log_obj();
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
          __int16 v154 = 1024;
          int v155 = 1261;
          __int16 v156 = 2112;
          v157 = 0;
          _os_log_error_impl(&dword_19DDAF000, v105, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
        }
LABEL_217:

        goto LABEL_218;
      }
      [v32 addObject:p_super];
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_89;
      }
      long long v139 = 0u;
      long long v140 = 0u;
      long long v137 = 0u;
      long long v138 = 0u;
      p_super = v47;
      uint64_t v49 = [p_super countByEnumeratingWithState:&v137 objects:v150 count:16];
      if (v49)
      {
        uint64_t v50 = v49;
        time_t v111 = v47;
        uint64_t v51 = *(void *)v138;
        while (2)
        {
          for (uint64_t j = 0; j != v50; ++j)
          {
            if (*(void *)v138 != v51) {
              objc_enumerationMutation(p_super);
            }
            uint64_t v53 = *(__CFString **)(*((void *)&v137 + 1) + 8 * j);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              dispatch_queue_t v54 = NEIPsecIKEGetIntegrityProtocol(v53);
              if (!p_super)
              {
                CFStringRef v105 = ne_log_obj();
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315650;
                  uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
                  __int16 v154 = 1024;
                  int v155 = 1270;
                  __int16 v156 = 2112;
                  v157 = v53;
                  _os_log_error_impl(&dword_19DDAF000, v105, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
                }
                p_super = &v54->super;
                goto LABEL_217;
              }
              [v32 addObject:v54];
            }
          }
          uint64_t v50 = [p_super countByEnumeratingWithState:&v137 objects:v150 count:16];
          if (v50) {
            continue;
          }
          break;
        }
        uint64_t v25 = v116;
        CFDictionaryRef v35 = v119;
        __int16 v31 = v120;
        BOOL v47 = v111;
      }
      else
      {
        uint64_t v25 = v116;
      }
    }

LABEL_89:
    [(NEIKEv2IKESAProposal *)v31 setIntegrityProtocols:v32];

    p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
LABEL_90:
    if (!CFDictionaryContainsKey(v35, @"PRFAlgorithm")) {
      goto LABEL_108;
    }
    BOOL v32 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    unsigned int v55 = [(__CFDictionary *)v35 objectForKeyedSubscript:@"PRFAlgorithm"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v56 = NEIPsecIKEGetPRFProtocol(v55);
      if (!v56)
      {
        int v57 = v55;
        uint64_t v108 = ne_log_obj();
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
          __int16 v154 = 1024;
          int v155 = 1286;
          __int16 v156 = 2112;
          v157 = v57;
          long long v109 = "%s%d: \"%@\" is not a recognized PRF protocol";
          goto LABEL_244;
        }
LABEL_223:

        goto LABEL_226;
      }
      int v57 = (__CFString *)v56;
      [v32 addObject:v56];
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_107;
      }
      long long v135 = 0u;
      long long v136 = 0u;
      long long v133 = 0u;
      long long v134 = 0u;
      int v57 = v55;
      uint64_t v58 = [(__CFString *)v57 countByEnumeratingWithState:&v133 objects:v149 count:16];
      if (v58)
      {
        uint64_t v59 = v58;
        uint64_t v112 = v55;
        uint64_t v60 = *(void *)v134;
        while (2)
        {
          for (uint64_t k = 0; k != v59; ++k)
          {
            if (*(void *)v134 != v60) {
              objc_enumerationMutation(v57);
            }
            uint64_t v62 = *(__CFString **)(*((void *)&v133 + 1) + 8 * k);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v63 = NEIPsecIKEGetPRFProtocol(v62);
              if (!v63)
              {
                CFStringRef v106 = ne_log_obj();
                if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315650;
                  uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
                  __int16 v154 = 1024;
                  int v155 = 1295;
                  __int16 v156 = 2112;
                  v157 = v62;
                  CFStringRef v107 = "%s%d: \"%@\" is not a recognized PRF protocol";
                  goto LABEL_233;
                }
LABEL_222:

                uint64_t v108 = v57;
                goto LABEL_223;
              }
              uint64_t v64 = v63;
              [v32 addObject:v63];
            }
          }
          uint64_t v59 = [(__CFString *)v57 countByEnumeratingWithState:&v133 objects:v149 count:16];
          if (v59) {
            continue;
          }
          break;
        }
        uint64_t v25 = v116;
        CFDictionaryRef v35 = v119;
        __int16 v31 = v120;
        unsigned int v55 = v112;
      }
      else
      {
        uint64_t v25 = v116;
      }
    }

LABEL_107:
    [(NEIKEv2IKESAProposal *)v31 setPrfProtocols:v32];

    p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
LABEL_108:
    if (!CFDictionaryContainsKey(v35, @"DHGroup")) {
      goto LABEL_128;
    }
    id v65 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v66 = [(__CFDictionary *)v35 objectForKeyedSubscript:@"DHGroup"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      __int16 v67 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", [v66 unsignedIntValue]);
      [v65 addObject:v67];
LABEL_126:

      goto LABEL_127;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v131 = 0u;
      long long v132 = 0u;
      long long v129 = 0u;
      long long v130 = 0u;
      __int16 v67 = v66;
      uint64_t v68 = [(NEIKEv2KEMProtocol *)v67 countByEnumeratingWithState:&v129 objects:v148 count:16];
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = *(void *)v130;
        do
        {
          for (uint64_t m = 0; m != v69; ++m)
          {
            if (*(void *)v130 != v70) {
              objc_enumerationMutation(v67);
            }
            uint64_t v72 = *(void **)(*((void *)&v129 + 1) + 8 * m);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v73 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", [v72 unsignedIntValue]);
              [v65 addObject:v73];
            }
          }
          uint64_t v69 = [(NEIKEv2KEMProtocol *)v67 countByEnumeratingWithState:&v129 objects:v148 count:16];
        }
        while (v69);
        uint64_t v25 = v116;
        CFDictionaryRef v35 = v119;
      }
      else
      {
        uint64_t v25 = v116;
      }
      goto LABEL_126;
    }
LABEL_127:
    [(NEIKEv2IKESAProposal *)v120 setKemProtocols:v65];

    p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
LABEL_128:
    if (CFDictionaryContainsKey(v35, @"EAPMethod"))
    {
      BOOL v32 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v74 = [(__CFDictionary *)v35 objectForKeyedSubscript:@"EAPMethod"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unsigned int v75 = NEIPsecIKEGetEAPProtocol(v74);
        if (!v75)
        {
          int v57 = v74;
          uint64_t v108 = ne_log_obj();
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
            __int16 v154 = 1024;
            int v155 = 1328;
            __int16 v156 = 2112;
            v157 = v57;
            long long v109 = "%s%d: \"%@\" is not a recognized EAP method";
LABEL_244:
            _os_log_error_impl(&dword_19DDAF000, v108, OS_LOG_TYPE_ERROR, v109, buf, 0x1Cu);
          }
          goto LABEL_223;
        }
        int v57 = (__CFString *)v75;
        [v32 addObject:v75];
LABEL_132:
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v127 = 0u;
          long long v128 = 0u;
          long long v125 = 0u;
          long long v126 = 0u;
          int v57 = v74;
          uint64_t v76 = [(__CFString *)v57 countByEnumeratingWithState:&v125 objects:v147 count:16];
          if (v76)
          {
            uint64_t v77 = v76;
            uint64_t v113 = v74;
            uint64_t v78 = *(void *)v126;
LABEL_136:
            uint64_t v79 = 0;
            while (1)
            {
              if (*(void *)v126 != v78) {
                objc_enumerationMutation(v57);
              }
              __int16 v80 = *(__CFString **)(*((void *)&v125 + 1) + 8 * v79);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                int v81 = NEIPsecIKEGetEAPProtocol(v80);
                if (!v81)
                {
                  CFStringRef v106 = ne_log_obj();
                  if (!os_log_type_enabled(v106, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_222;
                  }
                  *(_DWORD *)long long buf = 136315650;
                  uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
                  __int16 v154 = 1024;
                  int v155 = 1337;
                  __int16 v156 = 2112;
                  v157 = v80;
                  CFStringRef v107 = "%s%d: \"%@\" is not a recognized EAP method";
LABEL_233:
                  _os_log_error_impl(&dword_19DDAF000, v106, OS_LOG_TYPE_ERROR, v107, buf, 0x1Cu);
                  goto LABEL_222;
                }
                __int16 v82 = v81;
                [v32 addObject:v81];
              }
              if (v77 == ++v79)
              {
                uint64_t v77 = [(__CFString *)v57 countByEnumeratingWithState:&v125 objects:v147 count:16];
                if (v77) {
                  goto LABEL_136;
                }
                uint64_t v25 = v116;
                CFDictionaryRef v35 = v119;
                uint64_t v74 = v113;
                goto LABEL_132;
              }
            }
          }
          uint64_t v25 = v116;
          goto LABEL_132;
        }
      }
      if (CFDictionaryContainsKey((CFDictionaryRef)v6, @"EAPProperties"))
      {
        unsigned int v83 = [v6 objectForKeyedSubscript:@"EAPProperties"];
        if (v83)
        {
          unint64_t v114 = v74;
          long long v123 = 0u;
          long long v124 = 0u;
          long long v121 = 0u;
          long long v122 = 0u;
          long long v84 = v32;
          uint64_t v85 = [v84 countByEnumeratingWithState:&v121 objects:v146 count:16];
          if (v85)
          {
            uint64_t v86 = v85;
            uint64_t v87 = *(void *)v122;
            do
            {
              for (uint64_t n = 0; n != v86; ++n)
              {
                if (*(void *)v122 != v87) {
                  objc_enumerationMutation(v84);
                }
                [*(id *)(*((void *)&v121 + 1) + 8 * n) setProperties:v83];
              }
              uint64_t v86 = [v84 countByEnumeratingWithState:&v121 objects:v146 count:16];
            }
            while (v86);
          }

          uint64_t v25 = v116;
          CFDictionaryRef v35 = v119;
          uint64_t v74 = v114;
        }
      }
      [(NEIKEv2IKESAProposal *)v120 setEapProtocols:v32];

      p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
    }
    [v25 addObject:v120];

    CFIndex v26 = v118 + 1;
    CFArrayRef v23 = v115;
    if (v118 + 1 == Count) {
      goto LABEL_203;
    }
  }
  ne_log_obj();
  CFDictionaryRef v35 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  if (!os_log_type_enabled((os_log_t)v35, OS_LOG_TYPE_ERROR)) {
    goto LABEL_228;
  }
  *(_DWORD *)long long buf = 136315394;
  uint64_t v153 = "NEIPSecIKEValidateIKEDictionary";
  __int16 v154 = 1024;
  int v155 = 1205;
  uint64_t v100 = "%s:%d: IKE configuration proposals array is invalid";
  uint64_t v101 = v35;
  uint32_t v102 = 18;
LABEL_199:
  _os_log_error_impl(&dword_19DDAF000, v101, OS_LOG_TYPE_ERROR, v100, buf, v102);
LABEL_228:

LABEL_229:
  uint64_t v90 = 0;
LABEL_230:

LABEL_231:
LABEL_162:

  return v90;
}

NEIKEv2ChildSAConfiguration *NEIPSecIKEValidateIKEChildDictionary(void *a1)
{
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    ne_log_obj();
    uint64_t v2 = (NEIKEv2ChildSAConfiguration *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v2->super, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      _os_log_fault_impl(&dword_19DDAF000, &v2->super, OS_LOG_TYPE_FAULT, "%s called with null ikeChildDict", buf, 0xCu);
    }
    goto LABEL_11;
  }
  if (NEInitCFTypes_onceToken != -1) {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
  }
  uint64_t v2 = objc_alloc_init(NEIKEv2ChildSAConfiguration);
  p_info = NEPolicyRouteRule.info;
  uint64_t v4 = CFDICTIONARY_TYPE;
  if (CFGetTypeID(a1) != v4)
  {
    int v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      __int16 v148 = 1024;
      int v149 = 2140;
      _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child configuration is not a dictionary", buf, 0x12u);
    }

LABEL_11:
    unsigned int v9 = 0;
    goto LABEL_201;
  }
  CFDictionaryRef v5 = a1;
  if (!NEGetValueWithType(v5, @"Mode", CFSTRING_TYPE))
  {
    BOOL v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      __int16 v148 = 1024;
      int v149 = 2146;
      __int16 v150 = 2112;
      uint64_t v151 = @"Mode";
      __int16 v152 = 2048;
      uint64_t v153 = CFSTRING_TYPE;
      _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
    }
    unsigned int v9 = 0;
    goto LABEL_200;
  }
  BOOL v6 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"Mode"];
  if ([v6 isEqualToString:@"Transport"])
  {
    uint64_t v7 = 1;
LABEL_17:
    [(NEIKEv2ChildSAConfiguration *)v2 setMode:v7];
    goto LABEL_18;
  }
  if ([v6 isEqualToString:@"Tunnel"])
  {
    uint64_t v7 = 2;
    goto LABEL_17;
  }
LABEL_18:
  if (CFDictionaryContainsKey(v5, @"ReplayWindowSize")
    && !NEGetValueWithType(v5, @"ReplayWindowSize", CFNUMBER_TYPE))
  {
    int v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_198;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2154;
    __int16 v150 = 2112;
    uint64_t v151 = @"ReplayWindowSize";
    __int16 v152 = 2048;
    uint64_t v153 = CFNUMBER_TYPE;
    uint64_t v100 = "%s:%d: type of value for key %@ != %lu";
LABEL_138:
    uint64_t v101 = v15;
    uint32_t v102 = 38;
LABEL_148:
    _os_log_error_impl(&dword_19DDAF000, v101, OS_LOG_TYPE_ERROR, v100, buf, v102);
    goto LABEL_198;
  }
  if (CFDictionaryContainsKey(v5, @"ReplayWindowSize"))
  {
    CFDictionaryRef v10 = [(__CFDictionary *)v5 objectForKeyedSubscript:@"ReplayWindowSize"];
    -[NEIKEv2ChildSAConfiguration setReplayWindowSize:](v2, "setReplayWindowSize:", [v10 unsignedIntValue]);
  }
  if (CFDictionaryContainsKey(v5, @"TrafficSelectorsLocal")
    && !NEGetValueWithType(v5, @"TrafficSelectorsLocal", CFARRAY_TYPE))
  {
    int v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_198;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2159;
    __int16 v150 = 2112;
    uint64_t v151 = @"TrafficSelectorsLocal";
    __int16 v152 = 2048;
    uint64_t v153 = CFARRAY_TYPE;
    uint64_t v100 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_138;
  }
  if (CFDictionaryContainsKey(v5, @"TrafficSelectorsRemote")
    && !NEGetValueWithType(v5, @"TrafficSelectorsRemote", CFARRAY_TYPE))
  {
    int v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_198;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2160;
    __int16 v150 = 2112;
    uint64_t v151 = @"TrafficSelectorsRemote";
    __int16 v152 = 2048;
    uint64_t v153 = CFARRAY_TYPE;
    uint64_t v100 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_138;
  }
  CFArrayRef v11 = (const __CFArray *)NEGetValueWithType(v5, @"TrafficSelectorsLocal", CFARRAY_TYPE);
  if (v11)
  {
    CFArrayRef v12 = v11;
    CFIndex Count = CFArrayGetCount(v11);
    if (!Count)
    {
      int v15 = ne_log_obj();
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_198;
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      __int16 v148 = 1024;
      int v149 = 2167;
      uint64_t v100 = "%s:%d: IKE Child local traffic selector array is empty";
LABEL_147:
      uint64_t v101 = v15;
      uint32_t v102 = 18;
      goto LABEL_148;
    }
    uint64_t v14 = Count;
    long long v123 = v6;
    int v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    if (v14 >= 1)
    {
      CFIndex v16 = 0;
      int v17 = @"TSProtocol";
      CFArrayRef v128 = v12;
      uint64_t v120 = v14;
      while (1)
      {
        CFStringRef v18 = v17;
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v12, v16);
        if (!ValueAtIndex) {
          break;
        }
        dispatch_queue_t v20 = ValueAtIndex;
        uint64_t v21 = CFDICTIONARY_TYPE;
        if (CFGetTypeID(ValueAtIndex) != v21) {
          break;
        }
        CFDictionaryRef v22 = v20;
        CFArrayRef v23 = objc_alloc_init(NEIKEv2TrafficSelector);
        if (!NEGetValueWithType(v22, @"TSType", CFSTRING_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          BOOL v6 = v123;
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
            __int16 v148 = 1024;
            int v149 = 2182;
            __int16 v150 = 2112;
            uint64_t v151 = @"TSType";
            __int16 v152 = 2048;
            uint64_t v153 = CFSTRING_TYPE;
            _os_log_error_impl(&dword_19DDAF000, v103, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
          }
          goto LABEL_196;
        }
        if (!NEGetValueWithType(v22, @"TSStartAddress", CFSTRING_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
            __int16 v148 = 1024;
            int v149 = 2183;
            __int16 v150 = 2112;
            uint64_t v151 = @"TSStartAddress";
            __int16 v152 = 2048;
            uint64_t v153 = CFSTRING_TYPE;
            CFStringRef v104 = "%s:%d: value for key %@ is missing or type != %lu";
            goto LABEL_176;
          }
LABEL_177:
          BOOL v6 = v123;
          goto LABEL_196;
        }
        uint64_t v24 = v15;
        uint64_t v25 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSStartAddress"];
        CFIndex v26 = NECreateAddressStructFromString(v25, 0, 0);

        __int16 v27 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v26];
        [(NEIKEv2TrafficSelector *)v23 setStartAddress:v27];

        free(v26);
        if (!NEGetValueWithType(v22, @"TSEndAddress", CFSTRING_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          int v15 = v24;
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_177;
          }
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2189;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSEndAddress";
          __int16 v152 = 2048;
          uint64_t v153 = CFSTRING_TYPE;
          CFStringRef v104 = "%s:%d: value for key %@ is missing or type != %lu";
LABEL_176:
          _os_log_error_impl(&dword_19DDAF000, v103, OS_LOG_TYPE_ERROR, v104, buf, 0x26u);
          goto LABEL_177;
        }
        uint64_t v28 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSEndAddress"];
        uint64_t v29 = NECreateAddressStructFromString(v28, 0, 0);

        xpc_object_t v30 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v29];
        [(NEIKEv2TrafficSelector *)v23 setEndAddress:v30];

        free(v29);
        if (!NEGetValueWithType(v22, @"TSStartPort", CFNUMBER_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          int v15 = v24;
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_177;
          }
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2195;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSStartPort";
          __int16 v152 = 2048;
          uint64_t v153 = CFNUMBER_TYPE;
          CFStringRef v104 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_176;
        }
        __int16 v31 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSStartPort"];
        -[NEIKEv2TrafficSelector setStartPort:](v23, "setStartPort:", [v31 unsignedShortValue]);

        int v15 = v24;
        if (!NEGetValueWithType(v22, @"TSEndPort", CFNUMBER_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_177;
          }
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2198;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSEndPort";
          __int16 v152 = 2048;
          uint64_t v153 = CFNUMBER_TYPE;
          CFStringRef v104 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_176;
        }
        BOOL v32 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSEndPort"];
        -[NEIKEv2TrafficSelector setEndPort:](v23, "setEndPort:", [v32 unsignedShortValue]);

        int v17 = v18;
        if (CFDictionaryContainsKey(v22, v18) && !NEGetValueWithType(v22, v18, CFNUMBER_TYPE))
        {
          CFStringRef v103 = ne_log_obj();
          if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
            goto LABEL_177;
          }
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2201;
          __int16 v150 = 2112;
          uint64_t v151 = v18;
          __int16 v152 = 2048;
          uint64_t v153 = CFNUMBER_TYPE;
          CFStringRef v104 = "%s:%d: type of value for key %@ != %lu";
          goto LABEL_176;
        }
        if (CFDictionaryContainsKey(v5, v18))
        {
          xpc_object_t v33 = [(__CFDictionary *)v22 objectForKeyedSubscript:v18];
          -[NEIKEv2TrafficSelector setIpProtocol:](v23, "setIpProtocol:", [v33 unsignedCharValue]);
        }
        [v15 addObject:v23];

        ++v16;
        p_info = NEPolicyRouteRule.info;
        CFArrayRef v12 = v128;
        if (v120 == v16) {
          goto LABEL_42;
        }
      }
      ne_log_obj();
      CFDictionaryRef v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
        __int16 v148 = 1024;
        int v149 = 2175;
        _os_log_error_impl(&dword_19DDAF000, (os_log_t)v22, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child local traffic selector array is invalid", buf, 0x12u);
      }
      BOOL v6 = v123;
      goto LABEL_197;
    }
LABEL_42:
    [(NEIKEv2ChildSAConfiguration *)v2 setLocalTrafficSelectors:v15];

    BOOL v6 = v123;
  }
  CFArrayRef v34 = (const __CFArray *)NEGetValueWithType(v5, @"TrafficSelectorsRemote", CFARRAY_TYPE);
  if (!v34) {
    goto LABEL_60;
  }
  CFArrayRef v35 = v34;
  CFIndex v36 = CFArrayGetCount(v34);
  if (!v36)
  {
    int v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_198;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2216;
    uint64_t v100 = "%s:%d: IKE Child remote traffic selector array is empty";
    goto LABEL_147;
  }
  uint64_t v37 = v36;
  long long v124 = v6;
  int v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v37 >= 1)
  {
    CFIndex v38 = 0;
    CFDictionaryRef theDict = v35;
    uint64_t v129 = v37;
    while (1)
    {
      int v39 = (void *)CFArrayGetValueAtIndex(v35, v38);
      if (!v39 || (uint64_t v40 = v39, v41 = p_info[477], (__objc2_class_ro *)CFGetTypeID(v39) != v41))
      {
        ne_log_obj();
        CFDictionaryRef v22 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2224;
          _os_log_error_impl(&dword_19DDAF000, (os_log_t)v22, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child remote traffic selector array is invalid", buf, 0x12u);
        }
        BOOL v6 = v124;
        goto LABEL_197;
      }
      uint64_t v42 = p_info;
      CFDictionaryRef v22 = v40;
      CFArrayRef v23 = objc_alloc_init(NEIKEv2TrafficSelector);
      if (!NEGetValueWithType(v22, @"TSType", CFSTRING_TYPE))
      {
        CFStringRef v103 = ne_log_obj();
        BOOL v6 = v124;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2231;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSType";
          __int16 v152 = 2048;
          uint64_t v153 = CFSTRING_TYPE;
          _os_log_error_impl(&dword_19DDAF000, v103, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
        }
        goto LABEL_196;
      }
      if (!NEGetValueWithType(v22, @"TSStartAddress", CFSTRING_TYPE))
      {
        CFStringRef v103 = ne_log_obj();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2232;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSStartAddress";
          __int16 v152 = 2048;
          uint64_t v153 = CFSTRING_TYPE;
          CFStringRef v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      CFStringRef v43 = v15;
      BOOL v44 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSStartAddress"];
      uint64_t v45 = NECreateAddressStructFromString(v44, 0, 0);

      BOOL v46 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v45];
      [(NEIKEv2TrafficSelector *)v23 setStartAddress:v46];

      free(v45);
      if (!NEGetValueWithType(v22, @"TSEndAddress", CFSTRING_TYPE))
      {
        CFStringRef v103 = ne_log_obj();
        int v15 = v43;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2238;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSEndAddress";
          __int16 v152 = 2048;
          uint64_t v153 = CFSTRING_TYPE;
          CFStringRef v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      BOOL v47 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSEndAddress"];
      CFStringRef v48 = NECreateAddressStructFromString(v47, 0, 0);

      uint64_t v49 = [MEMORY[0x1E4F38BC8] endpointWithAddress:v48];
      [(NEIKEv2TrafficSelector *)v23 setEndAddress:v49];

      free(v48);
      if (!NEGetValueWithType(v22, @"TSStartPort", CFNUMBER_TYPE))
      {
        CFStringRef v103 = ne_log_obj();
        int v15 = v43;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2244;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSStartPort";
          __int16 v152 = 2048;
          uint64_t v153 = CFNUMBER_TYPE;
          CFStringRef v106 = "%s:%d: value for key %@ is missing or type != %lu";
          goto LABEL_194;
        }
        goto LABEL_195;
      }
      uint64_t v50 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSStartPort"];
      -[NEIKEv2TrafficSelector setStartPort:](v23, "setStartPort:", [v50 unsignedShortValue]);

      int v15 = v43;
      if (!NEGetValueWithType(v22, @"TSEndPort", CFNUMBER_TYPE)) {
        break;
      }
      uint64_t v51 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSEndPort"];
      -[NEIKEv2TrafficSelector setEndPort:](v23, "setEndPort:", [v51 unsignedShortValue]);

      if (CFDictionaryContainsKey(v22, @"TSProtocol")
        && !NEGetValueWithType(v22, @"TSProtocol", CFNUMBER_TYPE))
      {
        CFStringRef v103 = ne_log_obj();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2250;
          __int16 v150 = 2112;
          uint64_t v151 = @"TSProtocol";
          __int16 v152 = 2048;
          uint64_t v153 = CFNUMBER_TYPE;
          CFStringRef v106 = "%s:%d: type of value for key %@ != %lu";
LABEL_194:
          _os_log_error_impl(&dword_19DDAF000, v103, OS_LOG_TYPE_ERROR, v106, buf, 0x26u);
        }
        goto LABEL_195;
      }
      if (CFDictionaryContainsKey(v5, @"TSProtocol"))
      {
        int64_t v52 = [(__CFDictionary *)v22 objectForKeyedSubscript:@"TSProtocol"];
        -[NEIKEv2TrafficSelector setIpProtocol:](v23, "setIpProtocol:", [v52 unsignedCharValue]);
      }
      [v43 addObject:v23];

      ++v38;
      p_info = v42;
      CFArrayRef v35 = theDict;
      if (v129 == v38) {
        goto LABEL_59;
      }
    }
    CFStringRef v103 = ne_log_obj();
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      __int16 v148 = 1024;
      int v149 = 2247;
      __int16 v150 = 2112;
      uint64_t v151 = @"TSEndPort";
      __int16 v152 = 2048;
      uint64_t v153 = CFNUMBER_TYPE;
      CFStringRef v106 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_194;
    }
LABEL_195:
    BOOL v6 = v124;
LABEL_196:

LABEL_197:
    goto LABEL_198;
  }
LABEL_59:
  [(NEIKEv2ChildSAConfiguration *)v2 setRemoteTrafficSelectors:v15];

  BOOL v6 = v124;
LABEL_60:
  CFArrayRef v53 = (const __CFArray *)NEGetValueWithType(v5, @"ChildProposals", CFARRAY_TYPE);
  if (!v53)
  {
    int v15 = ne_log_obj();
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_198;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2262;
    uint64_t v100 = "%s:%d: IKE Child configuration proposals array is missing";
    goto LABEL_147;
  }
  CFArrayRef v54 = v53;
  CFIndex v55 = CFArrayGetCount(v53);
  if (!v55)
  {
    int v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
      __int16 v148 = 1024;
      int v149 = 2267;
      uint64_t v100 = "%s:%d: IKE Child configuration proposals array is empty";
      goto LABEL_147;
    }
LABEL_198:
    unsigned int v9 = 0;
    goto LABEL_199;
  }
  uint64_t v56 = v55;
  CFDictionaryRef theDicta = v5;
  CFIndex v118 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (v56 < 1)
  {
LABEL_152:
    int v15 = v118;
    [(NEIKEv2ChildSAConfiguration *)v2 setProposals:v118];
    unsigned int v9 = v2;
    goto LABEL_153;
  }
  CFIndex v57 = 0;
  uint64_t v58 = @"Lifetime";
  long long v122 = v2;
  long long v125 = v6;
  uint64_t v116 = v56;
  CFArrayRef v117 = v54;
  while (1)
  {
    uint64_t v59 = v58;
    CFIndex v121 = v57;
    uint64_t v60 = (void *)CFArrayGetValueAtIndex(v54, v57);
    if (!v60 || (uint64_t v61 = v60, v62 = p_info[477], (__objc2_class_ro *)CFGetTypeID(v60) != v62))
    {
      CFStringRef v105 = ne_log_obj();
      CFDictionaryRef v5 = theDicta;
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
        __int16 v148 = 1024;
        int v149 = 2275;
        _os_log_error_impl(&dword_19DDAF000, v105, OS_LOG_TYPE_ERROR, "%s:%d: IKE Child configuration proposals array is invalid", buf, 0x12u);
      }

      unsigned int v9 = 0;
      int v15 = v118;
      goto LABEL_199;
    }
    CFDictionaryRef v63 = v61;
    uint64_t v64 = objc_alloc_init(NEIKEv2ChildSAProposal);
    if (v64) {
      v64->_proposalNumber = v121 + 1;
    }
    long long v130 = v64;
    if (!NEGetValueWithType(v63, @"ChildProtocol", CFSTRING_TYPE)) {
      break;
    }
    id v65 = [(__CFDictionary *)v63 objectForKeyedSubscript:@"ChildProtocol"];
    if ([v65 isEqualToString:@"ESP"])
    {
      uint64_t v66 = 3;
      uint64_t v58 = v59;
    }
    else
    {
      uint64_t v58 = v59;
      if (![v65 isEqualToString:@"AH"]) {
        goto LABEL_74;
      }
      uint64_t v66 = 2;
    }
    [(NEIKEv2ChildSAProposal *)v130 setProtocol:v66];
LABEL_74:
    if (!NEGetValueWithType(v63, v58, CFNUMBER_TYPE))
    {
      uint64_t v68 = ne_log_obj();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315906;
        uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
        __int16 v148 = 1024;
        int v149 = 2292;
        __int16 v150 = 2112;
        uint64_t v151 = v58;
        __int16 v152 = 2048;
        uint64_t v153 = CFNUMBER_TYPE;
        _os_log_error_impl(&dword_19DDAF000, v68, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
      }
      int v15 = v118;
      CFDictionaryRef v5 = theDicta;
LABEL_210:

      unsigned int v9 = 0;
      BOOL v6 = v125;
      goto LABEL_199;
    }
    CFDictionaryRef v119 = v65;
    __int16 v67 = [(__CFDictionary *)v63 objectForKeyedSubscript:v58];
    -[NEIKEv2ChildSAProposal setLifetimeSeconds:](v130, "setLifetimeSeconds:", [v67 unsignedLongValue]);

    if (CFDictionaryContainsKey(v63, @"EncryptionAlgorithm"))
    {
      uint64_t v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v69 = [(__CFDictionary *)v63 objectForKeyedSubscript:@"EncryptionAlgorithm"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v70 = NEIPsecIKEGetEncryptionProtocol(v69, 1);
        if (!v70)
        {
          p_super = ne_log_obj();
          if (os_log_type_enabled(p_super, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
            __int16 v148 = 1024;
            int v149 = 2301;
            __int16 v150 = 2112;
            uint64_t v151 = v69;
            _os_log_error_impl(&dword_19DDAF000, p_super, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
          }
          id v71 = (NEIKEv2EncryptionProtocol *)v69;
          int v15 = v118;
LABEL_205:
          id v65 = v119;
          CFDictionaryRef v5 = theDicta;

          goto LABEL_210;
        }
        id v71 = v70;
        [v68 addObject:v70];
LABEL_79:

        uint64_t v58 = v59;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          CFDictionaryRef v113 = v63;
          long long v141 = 0u;
          long long v142 = 0u;
          long long v139 = 0u;
          long long v140 = 0u;
          id v71 = v69;
          uint64_t v72 = [(NEIKEv2EncryptionProtocol *)v71 countByEnumeratingWithState:&v139 objects:v145 count:16];
          if (v72)
          {
            uint64_t v73 = v72;
            uint64_t v112 = v69;
            uint64_t v74 = *(void *)v140;
            while (2)
            {
              for (uint64_t i = 0; i != v73; ++i)
              {
                if (*(void *)v140 != v74) {
                  objc_enumerationMutation(v71);
                }
                uint64_t v76 = *(__CFString **)(*((void *)&v139 + 1) + 8 * i);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v77 = NEIPsecIKEGetEncryptionProtocol(v76, 1);
                  if (!v77)
                  {
                    long long v109 = ne_log_obj();
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)long long buf = 136315650;
                      uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
                      __int16 v148 = 1024;
                      int v149 = 2310;
                      __int16 v150 = 2112;
                      uint64_t v151 = v76;
                      _os_log_error_impl(&dword_19DDAF000, v109, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized encryption method", buf, 0x1Cu);
                    }

                    p_super = &v71->super;
                    uint64_t v2 = v122;
                    int v15 = v118;
                    CFDictionaryRef v63 = v113;
                    goto LABEL_205;
                  }
                  uint64_t v78 = v77;
                  [v68 addObject:v77];
                }
              }
              uint64_t v73 = [(NEIKEv2EncryptionProtocol *)v71 countByEnumeratingWithState:&v139 objects:v145 count:16];
              if (v73) {
                continue;
              }
              break;
            }
            uint64_t v2 = v122;
            p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
            uint64_t v69 = v112;
            CFDictionaryRef v63 = v113;
          }
          goto LABEL_79;
        }
      }
      [(NEIKEv2ChildSAProposal *)v130 setEncryptionProtocols:v68];

      BOOL v6 = v125;
    }
    if (!CFDictionaryContainsKey(v63, @"IntegrityAlgorithm")) {
      goto LABEL_112;
    }
    uint64_t v68 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v79 = [(__CFDictionary *)v63 objectForKeyedSubscript:@"IntegrityAlgorithm"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      __int16 v80 = NEIPsecIKEGetIntegrityProtocol(v79);
      if (!v79)
      {
        time_t v111 = ne_log_obj();
        if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315650;
          uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
          __int16 v148 = 1024;
          int v149 = 2326;
          __int16 v150 = 2112;
          uint64_t v151 = 0;
          _os_log_error_impl(&dword_19DDAF000, v111, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
        }
        int v15 = v118;
LABEL_209:
        id v65 = v119;
        CFDictionaryRef v5 = theDicta;

        uint64_t v2 = v122;
        goto LABEL_210;
      }
      [v68 addObject:v80];
      goto LABEL_110;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      CFDictionaryRef v114 = v63;
      long long v137 = 0u;
      long long v138 = 0u;
      long long v135 = 0u;
      long long v136 = 0u;
      __int16 v80 = v79;
      uint64_t v81 = [(NEIKEv2IntegrityProtocol *)v80 countByEnumeratingWithState:&v135 objects:v144 count:16];
      if (v81)
      {
        uint64_t v82 = v81;
        uint64_t v83 = *(void *)v136;
        while (2)
        {
          for (uint64_t j = 0; j != v82; ++j)
          {
            if (*(void *)v136 != v83) {
              objc_enumerationMutation(v80);
            }
            uint64_t v85 = *(__CFString **)(*((void *)&v135 + 1) + 8 * j);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v86 = NEIPsecIKEGetIntegrityProtocol(v85);
              if (!v80)
              {
                time_t v111 = ne_log_obj();
                if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 136315650;
                  uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
                  __int16 v148 = 1024;
                  int v149 = 2335;
                  __int16 v150 = 2112;
                  uint64_t v151 = v85;
                  _os_log_error_impl(&dword_19DDAF000, v111, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized integrity method", buf, 0x1Cu);
                }
                __int16 v80 = v86;
                int v15 = v118;
                CFDictionaryRef v63 = v114;
                goto LABEL_209;
              }
              [v68 addObject:v86];

              uint64_t v58 = v59;
            }
          }
          uint64_t v82 = [(NEIKEv2IntegrityProtocol *)v80 countByEnumeratingWithState:&v135 objects:v144 count:16];
          if (v82) {
            continue;
          }
          break;
        }
        uint64_t v2 = v122;
      }
      CFDictionaryRef v63 = v114;
LABEL_110:

      p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
    }
    [(NEIKEv2ChildSAProposal *)v130 setIntegrityProtocols:v68];

    BOOL v6 = v125;
LABEL_112:
    if (CFDictionaryContainsKey(v63, @"DHGroup"))
    {
      id v87 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v88 = [(__CFDictionary *)v63 objectForKeyedSubscript:@"DHGroup"];
      objc_opt_class();
      __int16 v89 = v88;
      if (objc_opt_isKindOfClass())
      {
        unsigned int v90 = [v88 unsignedIntValue];
        uint64_t v91 = [NEIKEv2KEMProtocol alloc];
        uint64_t v92 = v90;
        uint64_t v88 = v89;
        CFStringRef v93 = [(NEIKEv2KEMProtocol *)v91 initWithMethod:v92];
        [v87 addObject:v93];
        goto LABEL_127;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        CFDictionaryRef v115 = v63;
        long long v133 = 0u;
        long long v134 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        CFStringRef v93 = v88;
        uint64_t v94 = [(NEIKEv2KEMProtocol *)v93 countByEnumeratingWithState:&v131 objects:v143 count:16];
        if (v94)
        {
          uint64_t v95 = v94;
          uint64_t v96 = *(void *)v132;
          do
          {
            for (uint64_t k = 0; k != v95; ++k)
            {
              if (*(void *)v132 != v96) {
                objc_enumerationMutation(v93);
              }
              uint64_t v98 = *(void **)(*((void *)&v131 + 1) + 8 * k);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint32_t v99 = -[NEIKEv2KEMProtocol initWithMethod:]([NEIKEv2KEMProtocol alloc], "initWithMethod:", [v98 unsignedIntValue]);
                [v87 addObject:v99];

                uint64_t v88 = v89;
              }
            }
            uint64_t v95 = [(NEIKEv2KEMProtocol *)v93 countByEnumeratingWithState:&v131 objects:v143 count:16];
          }
          while (v95);
          BOOL v6 = v125;
          p_info = (__objc2_class_ro **)(NEPolicyRouteRule + 32);
        }
        CFDictionaryRef v63 = v115;
LABEL_127:

        uint64_t v2 = v122;
      }
      [(NEIKEv2ChildSAProposal *)v130 setKemProtocols:v87];

      uint64_t v58 = v59;
    }
    [v118 addObject:v130];

    CFIndex v57 = v121 + 1;
    CFArrayRef v54 = v117;
    if (v121 + 1 == v116) {
      goto LABEL_152;
    }
  }
  CFStringRef v107 = ne_log_obj();
  if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315906;
    uint64_t v147 = "NEIPSecIKEValidateIKEChildDictionary";
    __int16 v148 = 1024;
    int v149 = 2284;
    __int16 v150 = 2112;
    uint64_t v151 = @"ChildProtocol";
    __int16 v152 = 2048;
    uint64_t v153 = CFSTRING_TYPE;
    _os_log_error_impl(&dword_19DDAF000, v107, OS_LOG_TYPE_ERROR, "%s:%d: value for key %@ is missing or type != %lu", buf, 0x26u);
  }

  unsigned int v9 = 0;
  int v15 = v118;
LABEL_153:
  CFDictionaryRef v5 = theDicta;
LABEL_199:

LABEL_200:
LABEL_201:

  return v9;
}

NEIKEv2SessionConfiguration *NEIPSecIKEValidateSessionDictionary(void *a1)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  if (NEInitCFTypes_onceToken != -1) {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
  }
  uint64_t v2 = objc_alloc_init(NEIKEv2SessionConfiguration);
  if (!a1 || (uint64_t v3 = CFDICTIONARY_TYPE, CFGetTypeID(a1) != v3))
  {
    CFArrayRef v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1371;
      uint64_t v14 = "%s:%d: Session configuration is not a dictionary";
      int v15 = v11;
      uint32_t v16 = 18;
      goto LABEL_22;
    }
LABEL_14:

    CFArrayRef v12 = 0;
    goto LABEL_15;
  }
  if (!NEGetValueWithType((const __CFDictionary *)a1, @"IKEVersion", CFNUMBER_TYPE))
  {
    CFArrayRef v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1375;
      __int16 v253 = 2112;
      v254 = @"IKEVersion";
      __int16 v255 = 2048;
      uint64_t v256 = CFNUMBER_TYPE;
      uint64_t v14 = "%s:%d: value for key %@ is missing or type != %lu";
      int v15 = v11;
      uint32_t v16 = 38;
LABEL_22:
      _os_log_error_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  int valuePtr = 0;
  CFNumberRef v4 = (const __CFNumber *)NEGetValueWithType((const __CFDictionary *)a1, @"IKEVersion", CFNUMBER_TYPE);
  CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
  if (valuePtr != 2)
  {
    CFDictionaryRef v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1380;
      _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "%s:%d: Session IKE version is not 2", buf, 0x12u);
    }
    CFArrayRef v12 = 0;
    goto LABEL_569;
  }
  CFDictionaryRef v5 = a1;
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalIdentifier")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"LocalIdentifier", CFSTRING_TYPE))
  {
    int v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_567;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1387;
    __int16 v253 = 2112;
    v254 = @"LocalIdentifier";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    CFStringRef v18 = "%s:%d: type of value for key %@ != %lu";
LABEL_52:
    _os_log_error_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x26u);
    goto LABEL_567;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalIdentifier")) {
    goto LABEL_44;
  }
  if (!NEGetValueWithType((const __CFDictionary *)v5, @"LocalIdentifierType", CFSTRING_TYPE))
  {
    int v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_567;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1389;
    __int16 v253 = 2112;
    v254 = @"LocalIdentifierType";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    CFStringRef v18 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_52;
  }
  BOOL v6 = [v5 objectForKeyedSubscript:@"LocalIdentifier"];
  uint64_t v7 = [v6 dataUsingEncoding:4];

  int v8 = [v5 objectForKeyedSubscript:@"LocalIdentifierType"];
  char v9 = [v8 isEqualToString:@"IDFQDN"];

  if ((v9 & 1) == 0)
  {
    uint64_t v19 = [v5 objectForKeyedSubscript:@"LocalIdentifierType"];
    char v20 = [v19 isEqualToString:@"IDUserFQDN"];

    if (v20)
    {
      uint64_t v10 = 3;
      goto LABEL_43;
    }
    uint64_t v21 = [v5 objectForKeyedSubscript:@"LocalIdentifierType"];
    char v22 = [v21 isEqualToString:@"ADASN1DN"];

    if (v22)
    {
      uint64_t v10 = 9;
      goto LABEL_43;
    }
    CFArrayRef v23 = [v5 objectForKeyedSubscript:@"LocalIdentifierType"];
    char v24 = [v23 isEqualToString:@"KeyID"];

    if (v24)
    {
      uint64_t v10 = 11;
      goto LABEL_43;
    }
    uint64_t v25 = [v5 objectForKeyedSubscript:@"LocalIdentifierType"];
    int v26 = [v25 isEqualToString:@"IDAddress"];

    if (!v26
      || ([v5 objectForKeyedSubscript:@"LocalIdentifier"],
          __int16 v27 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          uint64_t v28 = (unsigned __int8 *)NECreateAddressStructFromString(v27, 0, 0),
          v27,
          !v28))
    {
      uint64_t v10 = 0;
      goto LABEL_43;
    }
    int v29 = v28[1];
    if (v29 == 30)
    {
      uint64_t v30 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v28 + 8 length:16];
      uint64_t v10 = 5;
    }
    else
    {
      if (v29 != 2)
      {
        uint64_t v10 = 0;
        goto LABEL_42;
      }
      uint64_t v30 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v28 + 4 length:4];
      uint64_t v10 = 1;
    }

    uint64_t v7 = (void *)v30;
LABEL_42:
    free(v28);
    goto LABEL_43;
  }
  uint64_t v10 = 2;
LABEL_43:
  id v31 = +[NEIKEv2Identifier createIdentifierWithType:v10 data:v7];
  [(NEIKEv2SessionConfiguration *)v2 setLocalIdentifier:v31];

LABEL_44:
  if (!NEGetValueWithType((const __CFDictionary *)v5, @"RemoteIdentifier", CFSTRING_TYPE))
  {
    int v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_567;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1421;
    __int16 v253 = 2112;
    v254 = @"RemoteIdentifier";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    CFStringRef v18 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_52;
  }
  if (!NEGetValueWithType((const __CFDictionary *)v5, @"RemoteIdentifierType", CFSTRING_TYPE))
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1422;
      __int16 v253 = 2112;
      v254 = @"RemoteIdentifierType";
      __int16 v255 = 2048;
      uint64_t v256 = CFSTRING_TYPE;
      CFStringRef v18 = "%s:%d: value for key %@ is missing or type != %lu";
      goto LABEL_52;
    }
LABEL_567:
    CFArrayRef v12 = 0;
    goto LABEL_568;
  }
  BOOL v32 = [v5 objectForKeyedSubscript:@"RemoteIdentifier"];
  int v17 = [v32 dataUsingEncoding:4];

  xpc_object_t v33 = [v5 objectForKeyedSubscript:@"RemoteIdentifierType"];
  char v34 = [v33 isEqualToString:@"IDFQDN"];

  if ((v34 & 1) == 0)
  {
    CFIndex v36 = [v5 objectForKeyedSubscript:@"RemoteIdentifierType"];
    char v37 = [v36 isEqualToString:@"IDUserFQDN"];

    if (v37)
    {
      uint64_t v35 = 3;
      goto LABEL_69;
    }
    CFIndex v38 = [v5 objectForKeyedSubscript:@"RemoteIdentifierType"];
    char v39 = [v38 isEqualToString:@"ADASN1DN"];

    if (v39)
    {
      uint64_t v35 = 9;
      goto LABEL_69;
    }
    uint64_t v40 = [v5 objectForKeyedSubscript:@"RemoteIdentifierType"];
    char v41 = [v40 isEqualToString:@"KeyID"];

    if (v41)
    {
      uint64_t v35 = 11;
      goto LABEL_69;
    }
    uint64_t v42 = [v5 objectForKeyedSubscript:@"RemoteIdentifierType"];
    int v43 = [v42 isEqualToString:@"IDAddress"];

    if (!v43
      || ([v5 objectForKeyedSubscript:@"RemoteIdentifier"],
          BOOL v44 = (__CFString *)objc_claimAutoreleasedReturnValue(),
          uint64_t v45 = (unsigned __int8 *)NECreateAddressStructFromString(v44, 0, 0),
          v44,
          !v45))
    {
      uint64_t v35 = 0;
      goto LABEL_69;
    }
    int v46 = v45[1];
    if (v46 == 30)
    {
      uint64_t v47 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v45 + 8 length:16];
      uint64_t v35 = 5;
    }
    else
    {
      if (v46 != 2)
      {
        uint64_t v35 = 0;
        goto LABEL_68;
      }
      uint64_t v47 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v45 + 4 length:4];
      uint64_t v35 = 1;
    }

    int v17 = v47;
LABEL_68:
    free(v45);
    goto LABEL_69;
  }
  uint64_t v35 = 2;
LABEL_69:
  id v48 = +[NEIKEv2Identifier createIdentifierWithType:v35 data:v17];
  [(NEIKEv2SessionConfiguration *)v2 setRemoteIdentifier:v48];

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalPrivateEAPIdentity")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"LocalPrivateEAPIdentity", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1453;
    __int16 v253 = 2112;
    v254 = @"LocalPrivateEAPIdentity";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
LABEL_565:
    _os_log_error_impl(&dword_19DDAF000, v90, OS_LOG_TYPE_ERROR, v95, buf, 0x26u);
    goto LABEL_566;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalPrivateEAPIdentity"))
  {
    uint64_t v49 = [v5 objectForKeyedSubscript:@"LocalPrivateEAPIdentity"];
    [(NEIKEv2SessionConfiguration *)v2 setLocalPrivateEAPIdentity:v49];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalEncryptedEAPIdentity")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"LocalEncryptedEAPIdentity", CFDATA_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1458;
    __int16 v253 = 2112;
    v254 = @"LocalEncryptedEAPIdentity";
    __int16 v255 = 2048;
    uint64_t v256 = CFDATA_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalEncryptedEAPIdentity"))
  {
    uint64_t v50 = [v5 objectForKeyedSubscript:@"LocalEncryptedEAPIdentity"];
    [(NEIKEv2SessionConfiguration *)v2 setLocalEncryptedEAPIdentity:v50];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"SharedSecretKey")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"SharedSecretKey", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1463;
    __int16 v253 = 2112;
    v254 = @"SharedSecretKey";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"SharedSecretKey"))
  {
    uint64_t v51 = [v5 objectForKeyedSubscript:@"SharedSecretKey"];
    [(NEIKEv2SessionConfiguration *)v2 setSharedSecret:v51];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"SharedSecretReference")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"SharedSecretReference", CFDATA_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1468;
    __int16 v253 = 2112;
    v254 = @"SharedSecretReference";
    __int16 v255 = 2048;
    uint64_t v256 = CFDATA_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"SharedSecretReference"))
  {
    int64_t v52 = [v5 objectForKeyedSubscript:@"SharedSecretReference"];
    [(NEIKEv2SessionConfiguration *)v2 setSharedSecretReference:v52];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalCertificate")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"LocalCertificate", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1473;
    __int16 v253 = 2112;
    v254 = @"LocalCertificate";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalCertificate"))
  {
    CFArrayRef v53 = [v5 objectForKeyedSubscript:@"LocalCertificate"];
    [(NEIKEv2SessionConfiguration *)v2 setLocalCertificateName:v53];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalCertificateReference")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"LocalCertificateReference", CFDATA_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1478;
    __int16 v253 = 2112;
    v254 = @"LocalCertificateReference";
    __int16 v255 = 2048;
    uint64_t v256 = CFDATA_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalCertificateReference"))
  {
    CFArrayRef v54 = [v5 objectForKeyedSubscript:@"LocalCertificateReference"];
    [(NEIKEv2SessionConfiguration *)v2 setLocalCertificateReference:v54];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveEnabled")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"NATTKeepAliveEnabled", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1483;
    __int16 v253 = 2112;
    v254 = @"NATTKeepAliveEnabled";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveEnabled"))
  {
    CFIndex v55 = [v5 objectForKeyedSubscript:@"NATTKeepAliveEnabled"];
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveDisabled:](v2, "setNatTraversalKeepaliveDisabled:", [v55 BOOLValue] ^ 1);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveInterval")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"NATTKeepAliveInterval", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1488;
    __int16 v253 = 2112;
    v254 = @"NATTKeepAliveInterval";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveInterval"))
  {
    uint64_t v56 = [v5 objectForKeyedSubscript:@"NATTKeepAliveInterval"];
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveInterval:](v2, "setNatTraversalKeepaliveInterval:", [v56 unsignedLongValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveOffload")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"NATTKeepAliveOffload", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1493;
    __int16 v253 = 2112;
    v254 = @"NATTKeepAliveOffload";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveOffload"))
  {
    CFIndex v57 = [v5 objectForKeyedSubscript:@"NATTKeepAliveOffload"];
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadEnabled:](v2, "setNatTraversalKeepaliveOffloadEnabled:", [v57 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveOffloadInterval")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"NATTKeepAliveOffloadInterval", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1498;
    __int16 v253 = 2112;
    v254 = @"NATTKeepAliveOffloadInterval";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"NATTKeepAliveOffloadInterval"))
  {
    uint64_t v58 = [v5 objectForKeyedSubscript:@"NATTKeepAliveOffloadInterval"];
    -[NEIKEv2SessionConfiguration setNatTraversalKeepaliveOffloadInterval:](v2, "setNatTraversalKeepaliveOffloadInterval:", [v58 unsignedLongValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityHash")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"RemoteCertificateAuthorityHash", CFDATA_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1503;
    __int16 v253 = 2112;
    v254 = @"RemoteCertificateAuthorityHash";
    __int16 v255 = 2048;
    uint64_t v256 = CFDATA_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityHash"))
  {
    uint64_t v59 = [v5 objectForKeyedSubscript:@"RemoteCertificateAuthorityHash"];
    [(NEIKEv2SessionConfiguration *)v2 setRemoteCertificateAuthorityHash:v59];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalPrivateKeyRef"))
  {
    CFTypeID TypeID = SecKeyGetTypeID();
    if (!NEGetValueWithType((const __CFDictionary *)v5, @"LocalPrivateKeyRef", TypeID))
    {
      unsigned int v90 = ne_log_obj();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
        goto LABEL_566;
      }
      CFTypeID v96 = SecKeyGetTypeID();
      *(_DWORD *)long long buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1508;
      __int16 v253 = 2112;
      v254 = @"LocalPrivateKeyRef";
      __int16 v255 = 2048;
      uint64_t v256 = v96;
      uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"LocalPrivateKeyRef"))
  {
    uint64_t v61 = [v5 objectForKeyedSubscript:@"LocalPrivateKeyRef"];
    [(NEIKEv2SessionConfiguration *)v2 setLocalPrivateKeyRef:v61];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemotePublicKeyRef"))
  {
    CFTypeID v62 = SecKeyGetTypeID();
    if (!NEGetValueWithType((const __CFDictionary *)v5, @"RemotePublicKeyRef", v62))
    {
      unsigned int v90 = ne_log_obj();
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
        goto LABEL_566;
      }
      CFTypeID v97 = SecKeyGetTypeID();
      *(_DWORD *)long long buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1513;
      __int16 v253 = 2112;
      v254 = @"RemotePublicKeyRef";
      __int16 v255 = 2048;
      uint64_t v256 = v97;
      uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemotePublicKeyRef"))
  {
    CFDictionaryRef v63 = [v5 objectForKeyedSubscript:@"RemotePublicKeyRef"];
    [(NEIKEv2SessionConfiguration *)v2 setRemotePublicKeyRef:v63];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"TLSMinimumVersion")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"TLSMinimumVersion", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1518;
    __int16 v253 = 2112;
    v254 = @"TLSMinimumVersion";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"TLSMinimumVersion"))
  {
    uint64_t v64 = [v5 objectForKeyedSubscript:@"TLSMinimumVersion"];
    [(NEIKEv2SessionConfiguration *)v2 setTlsMinimumVersion:v64];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"TLSMaximumVersion")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"TLSMaximumVersion", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1523;
    __int16 v253 = 2112;
    v254 = @"TLSMaximumVersion";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"TLSMaximumVersion"))
  {
    id v65 = [v5 objectForKeyedSubscript:@"TLSMaximumVersion"];
    [(NEIKEv2SessionConfiguration *)v2 setTlsMaximumVersion:v65];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionEnabled")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionEnabled", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1528;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionEnabled";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionEnabled")) {
    goto LABEL_146;
  }
  uint64_t v66 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionEnabled"];
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionEnabled:](v2, "setDeadPeerDetectionEnabled:", [v66 BOOLValue]);

  if (!NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionInterval", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1532;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionInterval";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  __int16 v67 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionInterval"];
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionInterval:](v2, "setDeadPeerDetectionInterval:", [v67 unsignedLongValue]);

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionRetryInterval")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionRetryInterval", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1535;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionRetryInterval";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionRetryInterval"))
  {
    uint64_t v68 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionRetryInterval"];
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionRetryIntervalMilliseconds:](v2, "setDeadPeerDetectionRetryIntervalMilliseconds:", 1000 * [v68 unsignedLongValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionRetryIntervalMilliseconds")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionRetryIntervalMilliseconds", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1540;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionRetryIntervalMilliseconds";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionRetryIntervalMilliseconds"))
  {
    uint64_t v69 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionRetryIntervalMilliseconds"];
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionRetryIntervalMilliseconds:](v2, "setDeadPeerDetectionRetryIntervalMilliseconds:", [v69 unsignedLongValue]);
  }
  if (!NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionMaxRetries", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1545;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionMaxRetries";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  uint64_t v70 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionMaxRetries"];
  -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCount:](v2, "setDeadPeerDetectionMaxRetryCount:", [v70 unsignedIntValue]);

  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionMaxRetriesBeforeReporting")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionMaxRetriesBeforeReporting", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1548;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionMaxRetriesBeforeReporting";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionMaxRetriesBeforeReporting"))
  {
    id v71 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionMaxRetriesBeforeReporting"];
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionMaxRetryCountBeforeReporting:](v2, "setDeadPeerDetectionMaxRetryCountBeforeReporting:", [v71 unsignedIntValue]);
  }
LABEL_146:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionReceiveIntervalTriggerReporting")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionReceiveIntervalTriggerReporting", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1554;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionReceiveIntervalTriggerReporting";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionReceiveIntervalTriggerReporting"))
  {
    uint64_t v72 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionReceiveIntervalTriggerReporting"];
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveIntervalTriggerReporting:](v2, "setDeadPeerDetectionReceiveIntervalTriggerReporting:", [v72 unsignedLongValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionReceiveMaxShortDPDBeforeReporting")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"DeadPeerDetectionReceiveMaxShortDPDBeforeReporting", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1559;
    __int16 v253 = 2112;
    v254 = @"DeadPeerDetectionReceiveMaxShortDPDBeforeReporting";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"DeadPeerDetectionReceiveMaxShortDPDBeforeReporting"))
  {
    uint64_t v73 = [v5 objectForKeyedSubscript:@"DeadPeerDetectionReceiveMaxShortDPDBeforeReporting"];
    -[NEIKEv2SessionConfiguration setDeadPeerDetectionReceiveMaxShortDPDBeforeReporting:](v2, "setDeadPeerDetectionReceiveMaxShortDPDBeforeReporting:", [v73 unsignedIntValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IdleTimeoutEnabled")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"IdleTimeoutEnabled", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1564;
    __int16 v253 = 2112;
    v254 = @"IdleTimeoutEnabled";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, @"IdleTimeoutEnabled")) {
    goto LABEL_160;
  }
  uint64_t v74 = [v5 objectForKeyedSubscript:@"IdleTimeoutEnabled"];
  -[NEIKEv2SessionConfiguration setIdleTimeoutEnabled:](v2, "setIdleTimeoutEnabled:", [v74 BOOLValue]);

  if (!NEGetValueWithType((const __CFDictionary *)v5, @"IdleTimeoutSeconds", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1567;
    __int16 v253 = 2112;
    v254 = @"IdleTimeoutSeconds";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: value for key %@ is missing or type != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IdleTimeoutSeconds"))
  {
    unsigned int v75 = [v5 objectForKeyedSubscript:@"IdleTimeoutSeconds"];
    -[NEIKEv2SessionConfiguration setIdleTimeoutSeconds:](v2, "setIdleTimeoutSeconds:", [v75 unsignedLongValue]);
  }
LABEL_160:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"InitialContact")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"InitialContact", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1573;
    __int16 v253 = 2112;
    v254 = @"InitialContact";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"InitialContact"))
  {
    uint64_t v76 = [v5 objectForKeyedSubscript:@"InitialContact"];
    -[NEIKEv2SessionConfiguration setInitialContactDisabled:](v2, "setInitialContactDisabled:", [v76 BOOLValue] ^ 1);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"MOBIKESupported")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"MOBIKESupported", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1578;
    __int16 v253 = 2112;
    v254 = @"MOBIKESupported";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"MOBIKESupported"))
  {
    uint64_t v77 = [v5 objectForKeyedSubscript:@"MOBIKESupported"];
    -[NEIKEv2SessionConfiguration setNegotiateMOBIKE:](v2, "setNegotiateMOBIKE:", [v77 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"CertificateRevocationCheckEnable")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"CertificateRevocationCheckEnable", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1583;
    __int16 v253 = 2112;
    v254 = @"CertificateRevocationCheckEnable";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"CertificateRevocationCheckEnable"))
  {
    uint64_t v78 = [v5 objectForKeyedSubscript:@"CertificateRevocationCheckEnable"];
    -[NEIKEv2SessionConfiguration setEnableCertificateRevocationCheck:](v2, "setEnableCertificateRevocationCheck:", [v78 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"CertificateStrictRevocationCheck")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"CertificateStrictRevocationCheck", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1588;
    __int16 v253 = 2112;
    v254 = @"CertificateStrictRevocationCheck";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"CertificateStrictRevocationCheck"))
  {
    uint64_t v79 = [v5 objectForKeyedSubscript:@"CertificateStrictRevocationCheck"];
    -[NEIKEv2SessionConfiguration setStrictCertificateRevocationCheck:](v2, "setStrictCertificateRevocationCheck:", [v79 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"ValidateRemoteCertificate")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"ValidateRemoteCertificate", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1593;
    __int16 v253 = 2112;
    v254 = @"ValidateRemoteCertificate";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"ValidateRemoteCertificate"))
  {
    __int16 v80 = [v5 objectForKeyedSubscript:@"ValidateRemoteCertificate"];
    -[NEIKEv2SessionConfiguration setDisableRemoteCertificateValidation:](v2, "setDisableRemoteCertificateValidation:", [v80 BOOLValue] ^ 1);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"BlackHoleDetectionEnabled")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"BlackHoleDetectionEnabled", CFBOOLEAN_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1598;
    __int16 v253 = 2112;
    v254 = @"BlackHoleDetectionEnabled";
    __int16 v255 = 2048;
    uint64_t v256 = CFBOOLEAN_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"BlackHoleDetectionEnabled"))
  {
    uint64_t v81 = [v5 objectForKeyedSubscript:@"BlackHoleDetectionEnabled"];
    -[NEIKEv2SessionConfiguration setBlackholeDetectionEnabled:](v2, "setBlackholeDetectionEnabled:", [v81 BOOLValue]);
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"Username")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"Username", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1603;
    __int16 v253 = 2112;
    v254 = @"Username";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"Username"))
  {
    uint64_t v82 = [v5 objectForKeyedSubscript:@"Username"];
    [(NEIKEv2SessionConfiguration *)v2 setUsername:v82];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"Password")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"Password", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1608;
    __int16 v253 = 2112;
    v254 = @"Password";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"Password"))
  {
    uint64_t v83 = [v5 objectForKeyedSubscript:@"Password"];
    [(NEIKEv2SessionConfiguration *)v2 setPassword:v83];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"PasswordReference")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"PasswordReference", CFDATA_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1613;
    __int16 v253 = 2112;
    v254 = @"PasswordReference";
    __int16 v255 = 2048;
    uint64_t v256 = CFDATA_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"PasswordReference"))
  {
    long long v84 = [v5 objectForKeyedSubscript:@"PasswordReference"];
    [(NEIKEv2SessionConfiguration *)v2 setPasswordReference:v84];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateHostname")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"RemoteCertificateHostname", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1618;
    __int16 v253 = 2112;
    v254 = @"RemoteCertificateHostname";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateHostname"))
  {
    uint64_t v85 = [v5 objectForKeyedSubscript:@"RemoteCertificateHostname"];
    [(NEIKEv2SessionConfiguration *)v2 setRemoteCertificateHostname:v85];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityName")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"RemoteCertificateAuthorityName", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1623;
    __int16 v253 = 2112;
    v254 = @"RemoteCertificateAuthorityName";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityName"))
  {
    uint64_t v86 = [v5 objectForKeyedSubscript:@"RemoteCertificateAuthorityName"];
    [(NEIKEv2SessionConfiguration *)v2 setRemoteCertificateAuthorityName:v86];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityReferences")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"RemoteCertificateAuthorityReferences", CFARRAY_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1628;
    __int16 v253 = 2112;
    v254 = @"RemoteCertificateAuthorityReferences";
    __int16 v255 = 2048;
    uint64_t v256 = CFARRAY_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteCertificateAuthorityReferences"))
  {
    id v87 = [v5 objectForKeyedSubscript:@"RemoteCertificateAuthorityReferences"];
    [(NEIKEv2SessionConfiguration *)v2 setRemoteCertificateAuthorityReferences:v87];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IMEI")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"IMEI", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1633;
    __int16 v253 = 2112;
    v254 = @"IMEI";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IMEI"))
  {
    uint64_t v88 = [v5 objectForKeyedSubscript:@"IMEI"];
    [(NEIKEv2SessionConfiguration *)v2 setIMEI:v88];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IMEISV")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"IMEISV", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1638;
    __int16 v253 = 2112;
    v254 = @"IMEISV";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"IMEISV"))
  {
    __int16 v89 = [v5 objectForKeyedSubscript:@"IMEISV"];
    [(NEIKEv2SessionConfiguration *)v2 setIMEISV:v89];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"AuthenticationMethod")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"AuthenticationMethod", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1643;
    __int16 v253 = 2112;
    v254 = @"AuthenticationMethod";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"AuthenticationMethod"))
  {
    unsigned int v90 = [v5 objectForKeyedSubscript:@"AuthenticationMethod"];
    uint64_t v91 = NEIPsecIKEGetAuthProcotol(v90);
    if (!v91)
    {
      uint64_t v94 = ne_log_obj();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        v250 = "NEIPSecIKEValidateSessionDictionary";
        __int16 v251 = 1024;
        int v252 = 1648;
        __int16 v253 = 2112;
        v254 = (__CFString *)v90;
        goto LABEL_656;
      }
LABEL_654:

      goto LABEL_566;
    }
    uint64_t v92 = (void *)v91;
    [(NEIKEv2SessionConfiguration *)v2 setAuthenticationProtocol:v91];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteAuthenticationMethod")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"RemoteAuthenticationMethod", CFSTRING_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1654;
    __int16 v253 = 2112;
    v254 = @"RemoteAuthenticationMethod";
    __int16 v255 = 2048;
    uint64_t v256 = CFSTRING_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"RemoteAuthenticationMethod"))
  {
    unsigned int v90 = [v5 objectForKeyedSubscript:@"RemoteAuthenticationMethod"];
    uint64_t v93 = NEIPsecIKEGetAuthProcotol(v90);
    if (!v93)
    {
      uint64_t v94 = ne_log_obj();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        v250 = "NEIPSecIKEValidateSessionDictionary";
        __int16 v251 = 1024;
        int v252 = 1659;
        __int16 v253 = 2112;
        v254 = (__CFString *)v90;
LABEL_656:
        _os_log_error_impl(&dword_19DDAF000, v94, OS_LOG_TYPE_ERROR, "%s%d: \"%@\" is not a recognized authentication method", buf, 0x1Cu);
        goto LABEL_654;
      }
      goto LABEL_654;
    }
    goto LABEL_309;
  }
  uint64_t v98 = [(NEIKEv2SessionConfiguration *)v2 authenticationProtocol];

  if (v98)
  {
    unsigned int v90 = [(NEIKEv2SessionConfiguration *)v2 authenticationProtocol];
    uint64_t v93 = [v90 copy];
LABEL_309:
    uint32_t v99 = (void *)v93;
    [(NEIKEv2SessionConfiguration *)v2 setRemoteAuthentication:v93];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"PDUSessionID")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"PDUSessionID", CFNUMBER_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (!os_log_type_enabled(v90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_566;
    }
    *(_DWORD *)long long buf = 136315906;
    v250 = "NEIPSecIKEValidateSessionDictionary";
    __int16 v251 = 1024;
    int v252 = 1667;
    __int16 v253 = 2112;
    v254 = @"PDUSessionID";
    __int16 v255 = 2048;
    uint64_t v256 = CFNUMBER_TYPE;
    uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
    goto LABEL_565;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"PDUSessionID"))
  {
    uint64_t v100 = [v5 objectForKeyedSubscript:@"PDUSessionID"];
    [(NEIKEv2SessionConfiguration *)v2 setPduSessionID:v100];
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"ConfigurationRequest"))
  {
    uint64_t v101 = [v5 objectForKeyedSubscript:@"ConfigurationRequest"];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      newCFNumberRef Value = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFStringRef v103 = [v5 objectForKeyedSubscript:@"ConfigurationRequest"];
      objc_opt_class();
      obuint64_t j = v103;
      if (objc_opt_isKindOfClass())
      {
        long long v239 = 0u;
        long long v240 = 0u;
        long long v241 = 0u;
        long long v242 = 0u;
        id v104 = v103;
        uint64_t v105 = [v104 countByEnumeratingWithState:&v239 objects:v248 count:16];
        if (v105)
        {
          uint64_t v106 = v105;
          uint64_t v107 = *(void *)v240;
          do
          {
            for (uint64_t i = 0; i != v106; ++i)
            {
              if (*(void *)v240 != v107) {
                objc_enumerationMutation(v104);
              }
              long long v109 = *(void **)(*((void *)&v239 + 1) + 8 * i);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                char v110 = [v109 isEqualToString:@"AssignedIPv4Address"];
                time_t v111 = off_1E598D428;
                if (v110) {
                  goto LABEL_338;
                }
                char v112 = [v109 isEqualToString:@"AssignedIPv4DNS"];
                time_t v111 = off_1E598D438;
                if (v112) {
                  goto LABEL_338;
                }
                char v113 = [v109 isEqualToString:@"AssignedIPv4DHCP"];
                time_t v111 = off_1E598D430;
                if (v113) {
                  goto LABEL_338;
                }
                char v114 = [v109 isEqualToString:@"AssignedIPv4NetMask"];
                time_t v111 = off_1E598D440;
                if (v114) {
                  goto LABEL_338;
                }
                char v115 = [v109 isEqualToString:@"AssignedIPv4Subnet"];
                time_t v111 = off_1E598D450;
                if (v115) {
                  goto LABEL_338;
                }
                char v116 = [v109 isEqualToString:@"AssignedIPv6Address"];
                time_t v111 = off_1E598D458;
                if (v116) {
                  goto LABEL_338;
                }
                char v117 = [v109 isEqualToString:@"AssignedIPv6DNS"];
                time_t v111 = off_1E598D468;
                if (v117) {
                  goto LABEL_338;
                }
                char v118 = [v109 isEqualToString:@"AssignedIPv6DHCP"];
                time_t v111 = off_1E598D460;
                if (v118) {
                  goto LABEL_338;
                }
                char v119 = [v109 isEqualToString:@"AssignedIPv6Subnet"];
                time_t v111 = off_1E598D478;
                if (v119) {
                  goto LABEL_338;
                }
                char v120 = [v109 isEqualToString:@"AssignedAppVersion"];
                time_t v111 = off_1E598D2E8;
                if (v120) {
                  goto LABEL_338;
                }
                char v121 = [v109 isEqualToString:@"AssignedIPv6PCSCF"];
                time_t v111 = off_1E598D470;
                if (v121) {
                  goto LABEL_338;
                }
                char v122 = [v109 isEqualToString:@"AssignedIPv6PCSCF_STD"];
                time_t v111 = off_1E598D470;
                if ((v122 & 1) != 0
                  || (char v123 = [v109 isEqualToString:@"AssignedIPv4PCSCF_STD"],
                      time_t v111 = off_1E598D448,
                      (v123 & 1) != 0)
                  || (char v124 = [v109 isEqualToString:@"AssignedDNSDomain"],
                      time_t v111 = off_1E598D360,
                      (v124 & 1) != 0)
                  || (int v125 = [v109 isEqualToString:@"AssignedAttributes"],
                      time_t v111 = off_1E598D5E8,
                      v125))
                {
LABEL_338:
                  long long v126 = (void *)[objc_alloc(*v111) initEmptyRequest];
                  [newValue addObject:v126];
                }
              }
            }
            uint64_t v106 = [v104 countByEnumeratingWithState:&v239 objects:v248 count:16];
          }
          while (v106);
        }
LABEL_424:

        goto LABEL_425;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_425:
        long long v140 = objc_alloc_init(NEIKEv2ConfigurationMessage);
        long long v142 = v140;
        if (v140)
        {
          v140->_configurationType = 1;
          objc_setProperty_atomic(v140, v141, newValue, 16);
        }
        [(NEIKEv2SessionConfiguration *)v2 setConfigurationRequest:v142];

        goto LABEL_428;
      }
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      long long v238 = 0u;
      id v127 = v103;
      uint64_t v128 = [v127 countByEnumeratingWithState:&v235 objects:v247 count:16];
      if (!v128) {
        goto LABEL_424;
      }
      uint64_t v129 = v128;
      uint64_t v217 = *(void *)v236;
LABEL_349:
      uint64_t v130 = 0;
      while (1)
      {
        if (*(void *)v236 != v217) {
          objc_enumerationMutation(v127);
        }
        long long v131 = *(void **)(*((void *)&v235 + 1) + 8 * v130);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          goto LABEL_394;
        }
        long long v132 = [v127 objectForKeyedSubscript:v131];
        if ([v131 isEqualToString:@"AssignedIPv4Address"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
          {
            long long v135 = NEIKEv2IPv4AddressAttribute;
            goto LABEL_390;
          }
          long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
          long long v134 = NEIKEv2IPv4AddressAttribute;
        }
        else if ([v131 isEqualToString:@"AssignedIPv4DNS"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
          {
            long long v135 = NEIKEv2IPv4DNSAttribute;
            goto LABEL_390;
          }
          long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
          long long v134 = NEIKEv2IPv4DNSAttribute;
        }
        else if ([v131 isEqualToString:@"AssignedIPv4DHCP"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
          {
            long long v135 = NEIKEv2IPv4DHCPAttribute;
            goto LABEL_390;
          }
          long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
          long long v134 = NEIKEv2IPv4DHCPAttribute;
        }
        else if ([v131 isEqualToString:@"AssignedIPv4NetMask"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
          {
            long long v135 = NEIKEv2IPv4NetmaskAttribute;
            goto LABEL_390;
          }
          long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
          long long v134 = NEIKEv2IPv4NetmaskAttribute;
        }
        else
        {
          if ([v131 isEqualToString:@"AssignedIPv4Subnet"])
          {
            long long v135 = NEIKEv2IPv4SubnetAttribute;
            goto LABEL_390;
          }
          if ([v131 isEqualToString:@"AssignedIPv6Address"])
          {
            long long v135 = NEIKEv2IPv6AddressAttribute;
            goto LABEL_390;
          }
          if ([v131 isEqualToString:@"AssignedIPv6DNS"])
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
            {
              long long v135 = NEIKEv2IPv6DNSAttribute;
              goto LABEL_390;
            }
            long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
            long long v134 = NEIKEv2IPv6DNSAttribute;
          }
          else if ([v131 isEqualToString:@"AssignedIPv6DHCP"])
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
            {
              long long v135 = NEIKEv2IPv6DHCPAttribute;
              goto LABEL_390;
            }
            long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
            long long v134 = NEIKEv2IPv6DHCPAttribute;
          }
          else
          {
            if ([v131 isEqualToString:@"AssignedIPv6Subnet"])
            {
              long long v135 = NEIKEv2IPv6SubnetAttribute;
              goto LABEL_390;
            }
            if ([v131 isEqualToString:@"AssignedAppVersion"])
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && [v132 length])
              {
                long long v138 = NEIKEv2AppVersionAttribute;
                goto LABEL_400;
              }
              long long v135 = NEIKEv2AppVersionAttribute;
LABEL_390:
              uint64_t v137 = [[v135 alloc] initEmptyRequest];
              goto LABEL_391;
            }
            if (([v131 isEqualToString:@"AssignedIPv6PCSCF"] & 1) != 0
              || [v131 isEqualToString:@"AssignedIPv6PCSCF_STD"])
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
              {
                long long v135 = NEIKEv2IPv6PCSCFAttribute;
                goto LABEL_390;
              }
              long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
              long long v134 = NEIKEv2IPv6PCSCFAttribute;
            }
            else
            {
              if (![v131 isEqualToString:@"AssignedIPv4PCSCF_STD"])
              {
                if ([v131 isEqualToString:@"AssignedDNSDomain"])
                {
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
                  {
                    long long v135 = NEIKEv2DNSDomainAttribute;
                    goto LABEL_390;
                  }
                  long long v138 = NEIKEv2DNSDomainAttribute;
                }
                else
                {
                  if (![v131 isEqualToString:@"AssignedAttributes"]) {
                    goto LABEL_393;
                  }
                  objc_opt_class();
                  if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
                  {
                    long long v135 = NEIKEv2SupportedAttribute;
                    goto LABEL_390;
                  }
                  long long v138 = NEIKEv2SupportedAttribute;
                }
LABEL_400:
                uint64_t v137 = [[v138 alloc] initWithStringValue:v132];
LABEL_391:
                long long v133 = (void *)v137;
                [newValue addObject:v137];
                goto LABEL_392;
              }
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || ![v132 length])
              {
                long long v135 = NEIKEv2IPv4PCSCFAttribute;
                goto LABEL_390;
              }
              long long v133 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v132 port:@"0"];
              long long v134 = NEIKEv2IPv4PCSCFAttribute;
            }
          }
        }
        long long v136 = (void *)[[v134 alloc] initWithAddress:v133];
        [newValue addObject:v136];

LABEL_392:
LABEL_393:

LABEL_394:
        if (v129 == ++v130)
        {
          uint64_t v139 = [v127 countByEnumeratingWithState:&v235 objects:v247 count:16];
          uint64_t v129 = v139;
          if (!v139) {
            goto LABEL_424;
          }
          goto LABEL_349;
        }
      }
    }
  }
LABEL_428:
  if (CFDictionaryContainsKey((CFDictionaryRef)v5, @"ConfigurationAttributeRequest")
    && !NEGetValueWithType((const __CFDictionary *)v5, @"ConfigurationAttributeRequest", CFARRAY_TYPE))
  {
    unsigned int v90 = ne_log_obj();
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      v250 = "NEIPSecIKEValidateSessionDictionary";
      __int16 v251 = 1024;
      int v252 = 1808;
      __int16 v253 = 2112;
      v254 = @"ConfigurationAttributeRequest";
      __int16 v255 = 2048;
      uint64_t v256 = CFARRAY_TYPE;
      uint64_t v95 = "%s:%d: type of value for key %@ != %lu";
      goto LABEL_565;
    }
LABEL_566:

    goto LABEL_567;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, @"ConfigurationAttributeRequest")) {
    goto LABEL_535;
  }
  id v214 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  [v5 objectForKeyedSubscript:@"ConfigurationAttributeRequest"];
  long long v231 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  long long v234 = 0u;
  id obja = (id)objc_claimAutoreleasedReturnValue();
  id newValuea = (id)[obja countByEnumeratingWithState:&v231 objects:v246 count:16];
  if (!newValuea) {
    goto LABEL_532;
  }
  uint64_t v218 = *(void *)v232;
  do
  {
    long long v143 = 0;
    do
    {
      if (*(void *)v232 != v218) {
        objc_enumerationMutation(obja);
      }
      long long v144 = *(void **)(*((void *)&v231 + 1) + 8 * (void)v143);
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v145 = [v144 objectForKeyedSubscript:@"Name"];
        v146 = [v144 objectForKeyedSubscript:@"Identifier"];
        uint64_t v147 = [v144 objectForKeyedSubscript:@"Type"];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            if ([v147 isEqualToString:@"String"])
            {
              __int16 v148 = [v144 objectForKeyedSubscript:@"String"];
              int v149 = -[NEIKEv2StringAttribute initCustomWithAttributeType:attributeName:stringValue:]([NEIKEv2StringAttribute alloc], "initCustomWithAttributeType:attributeName:stringValue:", [v146 integerValue], v145, v148);
              goto LABEL_477;
            }
            if ([v147 isEqualToString:@"IPv4Address"])
            {
              __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              }
              else
              {
                __int16 v150 = 0;
              }
              id v153 = -[NEIKEv2AddressAttribute initCustomWithAttributeType:attributeName:addressValue:]([NEIKEv2IPv4AddressAttribute alloc], "initCustomWithAttributeType:attributeName:addressValue:", [v146 integerValue], v145, v150);
              goto LABEL_459;
            }
            if ([v147 isEqualToString:@"IPv6Address"])
            {
              __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              }
              else
              {
                __int16 v150 = 0;
              }
              id v153 = -[NEIKEv2SubnetAttribute initCustomWithAttributeType:attributeName:addressValue:prefix:]([NEIKEv2IPv6AddressAttribute alloc], "initCustomWithAttributeType:attributeName:addressValue:prefix:", [v146 integerValue], v145, v150, 0);
LABEL_459:
              uint64_t v154 = v153;
              [v214 addObject:v153];
LABEL_460:

LABEL_478:
LABEL_479:

              goto LABEL_480;
            }
            if ([v147 isEqualToString:@"IPv4Subnet"])
            {
              __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
              __int16 v150 = [v144 objectForKeyedSubscript:@"Netmask"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v212 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              }
              else
              {
                v212 = 0;
              }
              v210 = [NEIKEv2IPv4SubnetAttribute alloc];
              uint64_t v159 = [v146 integerValue];
              unsigned __int8 v160 = NEGetPrefixForIPv4NetmaskString(v150);
            }
            else
            {
              if (![v147 isEqualToString:@"IPv6Subnet"]) {
                goto LABEL_479;
              }
              __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
              __int16 v150 = [v144 objectForKeyedSubscript:@"Netmask"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                v212 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              }
              else
              {
                v212 = 0;
              }
              v210 = [NEIKEv2IPv6SubnetAttribute alloc];
              uint64_t v159 = [v146 integerValue];
              unsigned __int8 v160 = NEGetPrefixForIPv6NetmaskString(v150);
            }
            id v161 = [(NEIKEv2SubnetAttribute *)v210 initCustomWithAttributeType:v159 attributeName:v145 addressValue:v212 prefix:v160];
            [v214 addObject:v161];

            goto LABEL_478;
          }
        }
        if ([v145 isEqualToString:@"AssignedIPv4Address"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
            uint64_t v151 = NEIKEv2IPv4AddressAttribute;
LABEL_458:
            id v153 = (id)[[v151 alloc] initWithAddress:v150];
            goto LABEL_459;
          }
          __int16 v152 = NEIKEv2IPv4AddressAttribute;
          goto LABEL_475;
        }
        if ([v145 isEqualToString:@"AssignedIPv4DNS"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
            uint64_t v151 = NEIKEv2IPv4DNSAttribute;
            goto LABEL_458;
          }
          __int16 v152 = NEIKEv2IPv4DNSAttribute;
LABEL_475:
          id v156 = [v152 alloc];
LABEL_476:
          int v149 = (__CFString *)[v156 initEmptyRequest];
          goto LABEL_477;
        }
        if ([v145 isEqualToString:@"AssignedIPv4DHCP"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
            uint64_t v151 = NEIKEv2IPv4DHCPAttribute;
            goto LABEL_458;
          }
          __int16 v152 = NEIKEv2IPv4DHCPAttribute;
          goto LABEL_475;
        }
        if ([v145 isEqualToString:@"AssignedIPv4NetMask"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
            uint64_t v151 = NEIKEv2IPv4NetmaskAttribute;
            goto LABEL_458;
          }
          __int16 v152 = NEIKEv2IPv4NetmaskAttribute;
          goto LABEL_475;
        }
        if ([v145 isEqualToString:@"AssignedIPv4Subnet"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          __int16 v150 = [v144 objectForKeyedSubscript:@"Netmask"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v154 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              v211 = [NEIKEv2IPv4SubnetAttribute alloc];
              unsigned __int8 v155 = NEGetPrefixForIPv4NetmaskString(v150);
LABEL_487:
              v213 = [(NEIKEv2SubnetAttribute *)v211 initWithAddress:v154 prefix:v155];
              [v214 addObject:v213];

              goto LABEL_460;
            }
          }
          __int16 v158 = NEIKEv2IPv4SubnetAttribute;
LABEL_498:
          id v153 = (id)[[v158 alloc] initEmptyRequest];
          goto LABEL_459;
        }
        if ([v145 isEqualToString:@"AssignedIPv6Address"])
        {
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          __int16 v150 = [v144 objectForKeyedSubscript:@"Netmask"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            __int16 v158 = NEIKEv2IPv6AddressAttribute;
            goto LABEL_498;
          }
          uint64_t v154 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
          v157 = NEIKEv2IPv6AddressAttribute;
        }
        else
        {
          if ([v145 isEqualToString:@"AssignedIPv6DNS"])
          {
            __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              uint64_t v151 = NEIKEv2IPv6DNSAttribute;
              goto LABEL_458;
            }
            __int16 v152 = NEIKEv2IPv6DNSAttribute;
            goto LABEL_475;
          }
          if ([v145 isEqualToString:@"AssignedIPv6DHCP"])
          {
            __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
              uint64_t v151 = NEIKEv2IPv6DHCPAttribute;
              goto LABEL_458;
            }
            __int16 v152 = NEIKEv2IPv6DHCPAttribute;
            goto LABEL_475;
          }
          if (![v145 isEqualToString:@"AssignedIPv6Subnet"])
          {
            if ([v145 isEqualToString:@"AssignedAppVersion"])
            {
              __int16 v148 = [v144 objectForKeyedSubscript:@"String"];
              objc_opt_class();
              char v162 = objc_opt_isKindOfClass();
              unsigned int v163 = NEIKEv2AppVersionAttribute;
            }
            else
            {
              if (([v145 isEqualToString:@"AssignedIPv6PCSCF"] & 1) != 0
                || [v145 isEqualToString:@"AssignedIPv6PCSCF_STD"])
              {
                __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
                  uint64_t v151 = NEIKEv2IPv6PCSCFAttribute;
                  goto LABEL_458;
                }
                __int16 v152 = NEIKEv2IPv6PCSCFAttribute;
                goto LABEL_475;
              }
              if ([v145 isEqualToString:@"AssignedIPv4PCSCF_STD"])
              {
                __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  __int16 v150 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
                  uint64_t v151 = NEIKEv2IPv4PCSCFAttribute;
                  goto LABEL_458;
                }
                __int16 v152 = NEIKEv2IPv4PCSCFAttribute;
                goto LABEL_475;
              }
              if ([v145 isEqualToString:@"AssignedDNSDomain"])
              {
                __int16 v148 = [v144 objectForKeyedSubscript:@"String"];
                objc_opt_class();
                char v162 = objc_opt_isKindOfClass();
                unsigned int v163 = NEIKEv2DNSDomainAttribute;
              }
              else
              {
                if (![v145 isEqualToString:@"AssignedAttributes"]) {
                  goto LABEL_479;
                }
                __int16 v148 = [v144 objectForKeyedSubscript:@"String"];
                objc_opt_class();
                char v162 = objc_opt_isKindOfClass();
                unsigned int v163 = NEIKEv2SupportedAttribute;
              }
            }
            id v156 = [v163 alloc];
            if ((v162 & 1) == 0) {
              goto LABEL_476;
            }
            int v149 = (__CFString *)[v156 initWithStringValue:v148];
LABEL_477:
            __int16 v150 = v149;
            [v214 addObject:v149];
            goto LABEL_478;
          }
          __int16 v148 = [v144 objectForKeyedSubscript:@"Address"];
          __int16 v150 = [v144 objectForKeyedSubscript:@"Netmask"];
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            __int16 v158 = NEIKEv2IPv6SubnetAttribute;
            goto LABEL_498;
          }
          uint64_t v154 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v148 port:@"0"];
          v157 = NEIKEv2IPv6SubnetAttribute;
        }
        v211 = (NEIKEv2IPv4SubnetAttribute *)[v157 alloc];
        unsigned __int8 v155 = NEGetPrefixForIPv6NetmaskString(v150);
        goto LABEL_487;
      }
LABEL_480:
      long long v143 = (char *)v143 + 1;
    }
    while (newValuea != v143);
    uint64_t v164 = [obja countByEnumeratingWithState:&v231 objects:v246 count:16];
    id newValuea = (id)v164;
  }
  while (v164);
LABEL_532:

  CFRange v165 = objc_alloc_init(NEIKEv2ConfigurationMessage);
  v167 = v165;
  if (v165)
  {
    v165->_configurationType = 1;
    objc_setProperty_atomic(v165, v166, v214, 16);
  }
  [(NEIKEv2SessionConfiguration *)v2 setConfigurationRequest:v167];

LABEL_535:
  if (!CFDictionaryContainsKey((CFDictionaryRef)v5, @"ConfigurationReply")) {
    goto LABEL_652;
  }
  v168 = [v5 objectForKeyedSubscript:@"ConfigurationReply"];
  objc_opt_class();
  char v169 = objc_opt_isKindOfClass();

  if ((v169 & 1) == 0) {
    goto LABEL_652;
  }
  id newValueb = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  v170 = [v5 objectForKeyedSubscript:@"ConfigurationReply"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_649;
    }
    long long v223 = 0u;
    long long v224 = 0u;
    long long v225 = 0u;
    long long v226 = 0u;
    id v194 = v170;
    uint64_t v195 = [v194 countByEnumeratingWithState:&v223 objects:v244 count:16];
    if (!v195) {
      goto LABEL_648;
    }
    uint64_t v196 = v195;
    uint64_t v219 = *(void *)v224;
LABEL_573:
    uint64_t v197 = 0;
    while (1)
    {
      if (*(void *)v224 != v219) {
        objc_enumerationMutation(v194);
      }
      v198 = *(void **)(*((void *)&v223 + 1) + 8 * v197);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_618;
      }
      v199 = [v194 objectForKeyedSubscript:v198];
      if ([v198 isEqualToString:@"AssignedIPv4Address"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
        {
          v202 = NEIKEv2IPv4AddressAttribute;
          goto LABEL_614;
        }
        v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
        v201 = NEIKEv2IPv4AddressAttribute;
      }
      else if ([v198 isEqualToString:@"AssignedIPv4DNS"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
        {
          v202 = NEIKEv2IPv4DNSAttribute;
          goto LABEL_614;
        }
        v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
        v201 = NEIKEv2IPv4DNSAttribute;
      }
      else if ([v198 isEqualToString:@"AssignedIPv4DHCP"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
        {
          v202 = NEIKEv2IPv4DHCPAttribute;
          goto LABEL_614;
        }
        v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
        v201 = NEIKEv2IPv4DHCPAttribute;
      }
      else if ([v198 isEqualToString:@"AssignedIPv4NetMask"])
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
        {
          v202 = NEIKEv2IPv4NetmaskAttribute;
          goto LABEL_614;
        }
        v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
        v201 = NEIKEv2IPv4NetmaskAttribute;
      }
      else
      {
        if ([v198 isEqualToString:@"AssignedIPv4Subnet"])
        {
          v202 = NEIKEv2IPv4SubnetAttribute;
          goto LABEL_614;
        }
        if ([v198 isEqualToString:@"AssignedIPv6Address"])
        {
          v202 = NEIKEv2IPv6AddressAttribute;
          goto LABEL_614;
        }
        if ([v198 isEqualToString:@"AssignedIPv6DNS"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
          {
            v202 = NEIKEv2IPv6DNSAttribute;
            goto LABEL_614;
          }
          v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
          v201 = NEIKEv2IPv6DNSAttribute;
        }
        else if ([v198 isEqualToString:@"AssignedIPv6DHCP"])
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
          {
            v202 = NEIKEv2IPv6DHCPAttribute;
            goto LABEL_614;
          }
          v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
          v201 = NEIKEv2IPv6DHCPAttribute;
        }
        else
        {
          if ([v198 isEqualToString:@"AssignedIPv6Subnet"])
          {
            v202 = NEIKEv2IPv6SubnetAttribute;
            goto LABEL_614;
          }
          if ([v198 isEqualToString:@"AssignedAppVersion"])
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v199 length])
            {
              v205 = NEIKEv2AppVersionAttribute;
              goto LABEL_624;
            }
            v202 = NEIKEv2AppVersionAttribute;
LABEL_614:
            uint64_t v204 = [[v202 alloc] initEmptyRequest];
            goto LABEL_615;
          }
          if (([v198 isEqualToString:@"AssignedIPv6PCSCF"] & 1) != 0
            || [v198 isEqualToString:@"AssignedIPv6PCSCF_STD"])
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
            {
              v202 = NEIKEv2IPv6PCSCFAttribute;
              goto LABEL_614;
            }
            v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
            v201 = NEIKEv2IPv6PCSCFAttribute;
          }
          else
          {
            if (![v198 isEqualToString:@"AssignedIPv4PCSCF_STD"])
            {
              if ([v198 isEqualToString:@"AssignedDNSDomain"])
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
                {
                  v202 = NEIKEv2DNSDomainAttribute;
                  goto LABEL_614;
                }
                v205 = NEIKEv2DNSDomainAttribute;
              }
              else
              {
                if (![v198 isEqualToString:@"AssignedAttributes"]) {
                  goto LABEL_617;
                }
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
                {
                  v202 = NEIKEv2SupportedAttribute;
                  goto LABEL_614;
                }
                v205 = NEIKEv2SupportedAttribute;
              }
LABEL_624:
              uint64_t v204 = [[v205 alloc] initWithStringValue:v199];
LABEL_615:
              v200 = (void *)v204;
              [newValueb addObject:v204];
              goto LABEL_616;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0 || ![v199 length])
            {
              v202 = NEIKEv2IPv4PCSCFAttribute;
              goto LABEL_614;
            }
            v200 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v199 port:@"0"];
            v201 = NEIKEv2IPv4PCSCFAttribute;
          }
        }
      }
      v203 = (void *)[[v201 alloc] initWithAddress:v200];
      [newValueb addObject:v203];

LABEL_616:
LABEL_617:

LABEL_618:
      if (v196 == ++v197)
      {
        uint64_t v206 = [v194 countByEnumeratingWithState:&v223 objects:v244 count:16];
        uint64_t v196 = v206;
        if (!v206) {
          goto LABEL_648;
        }
        goto LABEL_573;
      }
    }
  }
  long long v227 = 0u;
  long long v228 = 0u;
  long long v229 = 0u;
  long long v230 = 0u;
  id v171 = v170;
  uint64_t v172 = [v171 countByEnumeratingWithState:&v227 objects:v245 count:16];
  if (v172)
  {
    uint64_t v173 = v172;
    uint64_t v174 = *(void *)v228;
    do
    {
      for (uint64_t j = 0; j != v173; ++j)
      {
        if (*(void *)v228 != v174) {
          objc_enumerationMutation(v171);
        }
        v176 = *(void **)(*((void *)&v227 + 1) + 8 * j);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          char v177 = [v176 isEqualToString:@"AssignedIPv4Address"];
          v178 = off_1E598D428;
          if (v177) {
            goto LABEL_559;
          }
          char v179 = [v176 isEqualToString:@"AssignedIPv4DNS"];
          v178 = off_1E598D438;
          if (v179) {
            goto LABEL_559;
          }
          char v180 = [v176 isEqualToString:@"AssignedIPv4DHCP"];
          v178 = off_1E598D430;
          if (v180) {
            goto LABEL_559;
          }
          char v181 = [v176 isEqualToString:@"AssignedIPv4NetMask"];
          v178 = off_1E598D440;
          if (v181) {
            goto LABEL_559;
          }
          char v182 = [v176 isEqualToString:@"AssignedIPv4Subnet"];
          v178 = off_1E598D450;
          if (v182) {
            goto LABEL_559;
          }
          char v183 = [v176 isEqualToString:@"AssignedIPv6Address"];
          v178 = off_1E598D458;
          if (v183) {
            goto LABEL_559;
          }
          char v184 = [v176 isEqualToString:@"AssignedIPv6DNS"];
          v178 = off_1E598D468;
          if (v184) {
            goto LABEL_559;
          }
          char v185 = [v176 isEqualToString:@"AssignedIPv6DHCP"];
          v178 = off_1E598D460;
          if (v185) {
            goto LABEL_559;
          }
          char v186 = [v176 isEqualToString:@"AssignedIPv6Subnet"];
          v178 = off_1E598D478;
          if (v186) {
            goto LABEL_559;
          }
          char v187 = [v176 isEqualToString:@"AssignedAppVersion"];
          v178 = off_1E598D2E8;
          if (v187) {
            goto LABEL_559;
          }
          char v188 = [v176 isEqualToString:@"AssignedIPv6PCSCF"];
          v178 = off_1E598D470;
          if (v188) {
            goto LABEL_559;
          }
          char v189 = [v176 isEqualToString:@"AssignedIPv6PCSCF_STD"];
          v178 = off_1E598D470;
          if ((v189 & 1) != 0
            || (char v190 = [v176 isEqualToString:@"AssignedIPv4PCSCF_STD"],
                v178 = off_1E598D448,
                (v190 & 1) != 0)
            || (char v191 = [v176 isEqualToString:@"AssignedDNSDomain"],
                v178 = off_1E598D360,
                (v191 & 1) != 0)
            || (int v192 = [v176 isEqualToString:@"AssignedAttributes"], v178 = off_1E598D5E8, v192))
          {
LABEL_559:
            v193 = (void *)[objc_alloc(*v178) initEmptyRequest];
            [newValueb addObject:v193];
          }
        }
      }
      uint64_t v173 = [v171 countByEnumeratingWithState:&v227 objects:v245 count:16];
    }
    while (v173);
  }
LABEL_648:

LABEL_649:
  v207 = objc_alloc_init(NEIKEv2ConfigurationMessage);
  v209 = v207;
  if (v207)
  {
    v207->_configurationType = 2;
    objc_setProperty_atomic(v207, v208, newValueb, 16);
  }
  [(NEIKEv2SessionConfiguration *)v2 setConfigurationReply:v209];

LABEL_652:
  CFArrayRef v12 = v2;
LABEL_568:

LABEL_569:
LABEL_15:

  return v12;
}

uint64_t __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4, a5);
}

id NEIPSecIKECopyDefaultSessionQueue()
{
  if (NEIPSecIKECopyDefaultSessionQueue_onceToken != -1) {
    dispatch_once(&NEIPSecIKECopyDefaultSessionQueue_onceToken, &__block_literal_global_743);
  }
  dispatch_queue_t v0 = (void *)NEIPSecIKECopyDefaultSessionQueue_queue;

  return v0;
}

uint64_t __NEIPSecIKECreateSessionWithInterfaceAndSASession_block_invoke_339(void *a1)
{
  uint64_t v2 = [NEIKEv2Session alloc];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  id v6 = NEIPSecIKECopyDefaultSessionQueue();
  uint64_t v7 = [(NEIKEv2Session *)v2 initWithIKEConfig:v3 firstChildConfig:v4 sessionConfig:v5 queue:v6 ipsecInterface:a1[10] ikeSocketHandler:a1[8] saSession:a1[7] packetDelegate:0];
  uint64_t v8 = *(void *)(a1[9] + 8);
  char v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  [*(id *)(*(void *)(a1[9] + 8) + 40) setClientCallback:a1[11]];
  uint64_t v10 = a1[12];
  CFArrayRef v11 = *(void **)(*(void *)(a1[9] + 8) + 40);

  return [v11 setClientCallbackInfo:v10];
}

void __NEIPSecIKECopyDefaultSessionQueue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("IKEv2 Session Queue", v2);
  uint64_t v1 = (void *)NEIPSecIKECopyDefaultSessionQueue_queue;
  NEIPSecIKECopyDefaultSessionQueue_queue = (uint64_t)v0;
}

uint64_t NEIPsecIKEGetAuthProcotol(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"SharedSecret"])
  {
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 2;
  }
  else if ([v1 isEqualToString:@"Certificate"])
  {
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 1;
  }
  else if ([v1 isEqualToString:@"ECDSA256"])
  {
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 9;
  }
  else if ([v1 isEqualToString:@"ECDSA384"])
  {
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 10;
  }
  else if ([v1 isEqualToString:@"ECDSA521"])
  {
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 11;
  }
  else
  {
    if (![v1 isEqualToString:@"None"])
    {
      if ([v1 isEqualToString:@"Ed25519"])
      {
        uint64_t v7 = [NEIKEv2AuthenticationProtocol alloc];
        uint64_t v8 = 3;
      }
      else
      {
        if (![v1 isEqualToString:@"Ed448"])
        {
          if (![v1 isEqualToString:@"RSA-PSS"])
          {
            uint64_t v5 = 0;
            goto LABEL_15;
          }
          uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
          uint64_t v3 = 245;
          goto LABEL_13;
        }
        uint64_t v7 = [NEIKEv2AuthenticationProtocol alloc];
        uint64_t v8 = 4;
      }
      uint64_t v4 = [(NEIKEv2AuthenticationProtocol *)v7 initWithDigitalSignature:v8];
      goto LABEL_14;
    }
    uint64_t v2 = [NEIKEv2AuthenticationProtocol alloc];
    uint64_t v3 = 0;
  }
LABEL_13:
  uint64_t v4 = [(NEIKEv2AuthenticationProtocol *)v2 initWithMethod:v3];
LABEL_14:
  uint64_t v5 = v4;
LABEL_15:

  return v5;
}

NEIKEv2EncryptionProtocol *NEIPsecIKEGetEncryptionProtocol(void *a1, int a2)
{
  id v3 = a1;
  if (![v3 isEqualToString:@"DES"])
  {
    if ([v3 isEqualToString:@"3DES"])
    {
      uint64_t v4 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v5 = 3;
      goto LABEL_5;
    }
    if ([v3 isEqualToString:@"AES-128"])
    {
      uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v8 = 2;
    }
    else if ([v3 isEqualToString:@"AES-256"])
    {
      uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v8 = 3;
    }
    else if ([v3 isEqualToString:@"AES-128-GCM"])
    {
      uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v8 = 4;
    }
    else if ([v3 isEqualToString:@"AES-256-GCM"])
    {
      uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v8 = 5;
    }
    else
    {
      if (![v3 isEqualToString:@"ChaCha20-Poly1305"])
      {
        if (a2)
        {
          if ([v3 isEqualToString:@"ChaCha20-Poly1305-IIV"])
          {
            uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
            uint64_t v8 = 7;
            goto LABEL_16;
          }
          if ([v3 isEqualToString:@"AES-128-GCM-IIV"])
          {
            uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
            uint64_t v8 = 8;
            goto LABEL_16;
          }
          if ([v3 isEqualToString:@"AES-256-GCM-IIV"])
          {
            uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
            uint64_t v8 = 9;
            goto LABEL_16;
          }
        }
        char v9 = 0;
        goto LABEL_18;
      }
      uint64_t v7 = [NEIKEv2EncryptionProtocol alloc];
      uint64_t v8 = 6;
    }
LABEL_16:
    id v6 = [(NEIKEv2EncryptionProtocol *)v7 initWithEncryptionType:v8];
    goto LABEL_17;
  }
  uint64_t v4 = [NEIKEv2EncryptionProtocol alloc];
  uint64_t v5 = 2;
LABEL_5:
  id v6 = (NEIKEv2EncryptionProtocol *)-[NEIKEv2EncryptionProtocol initWithEncryptionWireType:is256Bit:](v4, v5, 0);
LABEL_17:
  char v9 = v6;
LABEL_18:

  return v9;
}

NEIKEv2IntegrityProtocol *NEIPsecIKEGetIntegrityProtocol(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"MD5-96"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"MD5-128"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"SHA1-96"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"SHA1-160"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"SHA2-256"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"SHA2-384"])
  {
    uint64_t v2 = 13;
  }
  else
  {
    if (![v1 isEqualToString:@"SHA2-512"])
    {
      id v3 = 0;
      goto LABEL_16;
    }
    uint64_t v2 = 14;
  }
  id v3 = [[NEIKEv2IntegrityProtocol alloc] initWithType:v2];
LABEL_16:

  return v3;
}

NEIKEv2PRFProtocol *NEIPsecIKEGetPRFProtocol(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"MD5-128"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"SHA1-160"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"SHA2-256"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"SHA2-384"])
  {
    uint64_t v2 = 6;
  }
  else
  {
    if (![v1 isEqualToString:@"SHA2-512"])
    {
      id v3 = 0;
      goto LABEL_12;
    }
    uint64_t v2 = 7;
  }
  id v3 = [[NEIKEv2PRFProtocol alloc] initWithType:v2];
LABEL_12:

  return v3;
}

NEIKEv2EAPProtocol *NEIPsecIKEGetEAPProtocol(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"EAP-SIM"])
  {
    uint64_t v2 = 2;
LABEL_16:
    id v3 = [[NEIKEv2EAPProtocol alloc] initWithMethod:v2];
    goto LABEL_17;
  }
  if ([v1 isEqualToString:@"EAP-AKA"])
  {
    uint64_t v2 = 3;
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"EAP-MSCHAPv2"])
  {
    uint64_t v2 = 4;
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"EAP-GTC"])
  {
    uint64_t v2 = 5;
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"EAP-TLS"])
  {
    uint64_t v2 = 6;
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"EAP-PEAP"])
  {
    uint64_t v2 = 7;
    goto LABEL_16;
  }
  if ([v1 isEqualToString:@"Any"])
  {
    uint64_t v2 = 1;
    goto LABEL_16;
  }
  uint64_t v2 = 0;
  id v3 = 0;
  if ([v1 isEqualToString:@"None"]) {
    goto LABEL_16;
  }
LABEL_17:

  return v3;
}

void __xpc_client_queue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.SecureNetworking.IPSec.xpc", v2);
  id v1 = (void *)xpc_client_queue_q;
  xpc_client_queue_q = (uint64_t)v0;
}

CFStringRef NEIPSecIKECreateSessionWithInterface(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, 0, 0, 0);
}

CFStringRef NEIPSecIKECreateUserspaceSession(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, a5, a6, a7, 0, 0, a8);
}

CFStringRef NEIPSecIKECreateSession(const __CFAllocator *a1, uint64_t a2, const __CFDictionary *a3, void *a4, uint64_t a5, uint64_t a6)
{
  return NEIPSecIKECreateSessionWithInterfaceAndSASession(a1, a3, a4, 0, a5, a6, 0, 0, 0);
}

uint64_t NEIPSecIKEUpdateIKESettings(void *a1)
{
  return 1;
}

uint64_t NEIPSecIKESetDispatchQueue(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v4 setClientQueue:v3];
  objc_initWeak(&location, v4);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = __NEIPSecIKESetDispatchQueue_block_invoke;
  v18[3] = &unk_1E5991638;
  objc_copyWeak(&v19, &location);
  [v4 setStateUpdateBlock:v18];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = __NEIPSecIKESetDispatchQueue_block_invoke_196;
  v16[3] = &unk_1E5991660;
  objc_copyWeak(&v17, &location);
  [v4 setChildStateUpdateBlock:v16];
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  void v14[2] = __NEIPSecIKESetDispatchQueue_block_invoke_198;
  v14[3] = &unk_1E5991688;
  objc_copyWeak(&v15, &location);
  [v4 setConfigurationUpdateBlock:v14];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __NEIPSecIKESetDispatchQueue_block_invoke_223;
  v12[3] = &unk_1E59916B0;
  objc_copyWeak(&v13, &location);
  [v4 setTrafficSelectorUpdateBlock:v12];
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __NEIPSecIKESetDispatchQueue_block_invoke_255;
  void v10[3] = &unk_1E5992C58;
  objc_copyWeak(&v11, &location);
  [v4 setShortDPDEventBlock:v10];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __NEIPSecIKESetDispatchQueue_block_invoke_257;
  unint64_t v8[3] = &unk_1E59916D8;
  objc_copyWeak(&v9, &location);
  [v4 setRedirectEventBlock:v8];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __NEIPSecIKESetDispatchQueue_block_invoke_276;
  v6[3] = &unk_1E5992DE0;
  objc_copyWeak(&v7, &location);
  [v4 setPrivateNotifyStatusEvent:v6];
  objc_destroyWeak(&v7);
  objc_destroyWeak(&v9);
  objc_destroyWeak(&v11);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&v17);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&location);

  return 1;
}

void sub_19DEDBE98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v7);
  objc_destroyWeak(v6);
  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v8 - 104));
  _Unwind_Resume(a1);
}

void sub_19DEDBF04()
{
}

void sub_19DEDBF0C()
{
}

void __NEIPSecIKESetDispatchQueue_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (![WeakRetained clientCallback]) {
    goto LABEL_18;
  }
  if ((unint64_t)(a2 - 1) > 3)
  {
    int v7 = 0;
    if (v5) {
      goto LABEL_4;
    }
  }
  else
  {
    int v7 = dword_19DF9BFD0[a2 - 1];
    if (v5)
    {
LABEL_4:
      uint64_t v8 = 70001;
      id v9 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      uint64_t v10 = [v5 domain];
      int v11 = [v10 isEqual:@"NEIKEv2ErrorDomain"];

      if (v11)
      {
        uint64_t v12 = [v5 code];
        if ((unint64_t)(v12 - 2) < 0xD) {
          uint64_t v8 = dword_19DF9D218[v12 - 2];
        }
      }
      else
      {
        id v13 = [v5 domain];
        int v14 = [v13 isEqual:@"NEIKEv2ProtocolErrorDomain"];

        if (v14)
        {
          if ([v5 code] < 0x2000
            || [v5 code] >= 0x4000
            || [WeakRetained peerAuthenticated])
          {
            uint64_t v8 = [v5 code];
          }
          else
          {
            uint64_t v8 = 70039;
          }
        }
      }
      id v15 = [NSNumber numberWithUnsignedInt:v8];
      [v9 setObject:v15 forKeyedSubscript:@"NotifyCode"];

      goto LABEL_15;
    }
  }
  id v9 = 0;
LABEL_15:
  uint32_t v16 = ne_log_obj();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17[0] = 67109378;
    v17[1] = v7;
    __int16 v18 = 2112;
    id v19 = v9;
    _os_log_debug_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_DEBUG, "Updating IKE status %u, %@", (uint8_t *)v17, 0x12u);
  }

  ((void (*)(id, void, void, id, uint64_t))[WeakRetained clientCallback])(WeakRetained, 0, v7 | 0x1100u, v9, objc_msgSend(WeakRetained, "clientCallbackInfo"));
LABEL_18:
}

void __NEIPSecIKESetDispatchQueue_block_invoke_196(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (![WeakRetained clientCallback]) {
    goto LABEL_16;
  }
  if ((unint64_t)(a3 - 1) > 3)
  {
    int v9 = 0;
    if (v7)
    {
LABEL_4:
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      int v11 = [v7 domain];
      int v12 = [v11 isEqual:@"NEIKEv2ErrorDomain"];

      if (v12)
      {
        uint64_t v13 = [v7 code];
        if ((unint64_t)(v13 - 2) < 0xD)
        {
          uint64_t v14 = dword_19DF9D218[v13 - 2];
LABEL_12:
          id v17 = [NSNumber numberWithUnsignedInt:v14];
          [v10 setObject:v17 forKeyedSubscript:@"NotifyCode"];

          goto LABEL_13;
        }
      }
      else
      {
        id v15 = [v7 domain];
        int v16 = [v15 isEqual:@"NEIKEv2ProtocolErrorDomain"];

        if (v16)
        {
          uint64_t v14 = [v7 code];
          goto LABEL_12;
        }
      }
      uint64_t v14 = 70001;
      goto LABEL_12;
    }
  }
  else
  {
    int v9 = dword_19DF9BFD0[a3 - 1];
    if (v7) {
      goto LABEL_4;
    }
  }
  id v10 = 0;
LABEL_13:
  __int16 v18 = ne_log_obj();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19[0] = 67109634;
    v19[1] = a2;
    __int16 v20 = 1024;
    int v21 = v9;
    __int16 v22 = 2112;
    id v23 = v10;
    _os_log_debug_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_DEBUG, "Updating Child %u status %u, %@", (uint8_t *)v19, 0x18u);
  }

  ((void (*)(id, uint64_t, void, id, uint64_t))[WeakRetained clientCallback])(WeakRetained, a2, v9 | 0x1100u, v10, objc_msgSend(WeakRetained, "clientCallbackInfo"));
LABEL_16:
}

void __NEIPSecIKESetDispatchQueue_block_invoke_198(uint64_t a1, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (![WeakRetained clientCallback]) {
    goto LABEL_30;
  }
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v25 = WeakRetained;
  id v26 = v3;
  if (v3) {
    id Property = objc_getProperty(v3, v5, 16, 1);
  }
  else {
    id Property = 0;
  }
  id v8 = Property;
  uint64_t v9 = [v8 countByEnumeratingWithState:&v27 objects:v33 count:16];
  if (!v9) {
    goto LABEL_27;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)v28;
  do
  {
    uint64_t v12 = 0;
    do
    {
      if (*(void *)v28 != v11) {
        objc_enumerationMutation(v8);
      }
      uint64_t v13 = *(void **)(*((void *)&v27 + 1) + 8 * v12);
      id v14 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v15 = [v13 attributeName];
      [v14 setObject:v15 forKeyedSubscript:@"Name"];

      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_11;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_11;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_17;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
LABEL_11:
        int v16 = objc_msgSend(v13, "address", v25);
        id v17 = [v16 hostname];
        __int16 v18 = v14;
        id v19 = v17;
        __int16 v20 = @"Address";
LABEL_12:
        [v18 setObject:v19 forKeyedSubscript:v20];

LABEL_13:
        goto LABEL_14;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
LABEL_17:
        int v21 = objc_msgSend(v13, "address", v25);
        __int16 v22 = [v21 hostname];
        [v14 setObject:v22 forKeyedSubscript:@"Address"];

        int v16 = [v13 subnetMaskAddress];
        id v17 = [v16 hostname];
        __int16 v18 = v14;
        id v19 = v17;
        __int16 v20 = @"Netmask";
        goto LABEL_12;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_11;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_11;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        int v16 = [v13 stringValue];
        [v14 setObject:v16 forKeyedSubscript:@"String"];
        goto LABEL_13;
      }
LABEL_14:
      objc_msgSend(v6, "addObject:", v14, v25);

      ++v12;
    }
    while (v10 != v12);
    uint64_t v23 = [v8 countByEnumeratingWithState:&v27 objects:v33 count:16];
    uint64_t v10 = v23;
  }
  while (v23);
LABEL_27:

  uint64_t v24 = ne_log_obj();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    id v32 = v6;
    _os_log_debug_impl(&dword_19DDAF000, v24, OS_LOG_TYPE_DEBUG, "Updating configuration with %@", buf, 0xCu);
  }

  id WeakRetained = v25;
  ((void (*)(void *, void, uint64_t, id, uint64_t))[v25 clientCallback])(v25, 0, 4608, v6, objc_msgSend(v25, "clientCallbackInfo"));

  id v3 = v26;
LABEL_30:
}

void __NEIPSecIKESetDispatchQueue_block_invoke_223(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained clientCallback])
  {
    id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    id v47 = v8;
    id v48 = v7;
    int v46 = v10;
    if (v7)
    {
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      obuint64_t j = v7;
      uint64_t v12 = [obj countByEnumeratingWithState:&v55 objects:v62 count:16];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = *(void *)v56;
        do
        {
          for (uint64_t i = 0; i != v13; ++i)
          {
            if (*(void *)v56 != v14) {
              objc_enumerationMutation(obj);
            }
            int v16 = *(void **)(*((void *)&v55 + 1) + 8 * i);
            id v17 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            uint64_t v18 = -[NEIKEv2TrafficSelector type]((uint64_t)v16);
            id v19 = @"IPv4";
            if (v18 == 7 || (v20 = -[NEIKEv2TrafficSelector type]((uint64_t)v16), id v19 = @"IPv6", v20 == 8)) {
              objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, @"TSType", v46);
            }
            int v21 = objc_msgSend(v16, "startAddress", v19, v46);
            __int16 v22 = [v21 hostname];
            [v17 setObject:v22 forKeyedSubscript:@"TSStartAddress"];

            uint64_t v23 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(v16, "startPort"));
            [v17 setObject:v23 forKeyedSubscript:@"TSStartPort"];

            uint64_t v24 = [v16 endAddress];
            uint64_t v25 = [v24 hostname];
            [v17 setObject:v25 forKeyedSubscript:@"TSEndAddress"];

            id v26 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(v16, "endPort"));
            [v17 setObject:v26 forKeyedSubscript:@"TSEndPort"];

            long long v27 = objc_msgSend(NSNumber, "numberWithUnsignedChar:", objc_msgSend(v16, "ipProtocol"));
            [v17 setObject:v27 forKeyedSubscript:@"TSProtocol"];

            [v11 addObject:v17];
          }
          uint64_t v13 = [obj countByEnumeratingWithState:&v55 objects:v62 count:16];
        }
        while (v13);
      }

      id v10 = v46;
      [v46 setObject:v11 forKeyedSubscript:@"TrafficSelectorsLocal"];

      id v8 = v47;
      id v7 = v48;
      a2 = a2;
    }
    if (v8)
    {
      id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id obja = v8;
      uint64_t v29 = [obja countByEnumeratingWithState:&v51 objects:v61 count:16];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void *)v52;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v52 != v31) {
              objc_enumerationMutation(obja);
            }
            xpc_object_t v33 = *(void **)(*((void *)&v51 + 1) + 8 * j);
            id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
            uint64_t v35 = -[NEIKEv2TrafficSelector type]((uint64_t)v33);
            CFIndex v36 = @"IPv4";
            if (v35 == 7 || (v37 = -[NEIKEv2TrafficSelector type]((uint64_t)v33), CFIndex v36 = @"IPv6", v37 == 8)) {
              objc_msgSend(v34, "setObject:forKeyedSubscript:", v36, @"TSType", v46);
            }
            CFIndex v38 = objc_msgSend(v33, "startAddress", v36, v46);
            char v39 = [v38 hostname];
            [v34 setObject:v39 forKeyedSubscript:@"TSStartAddress"];

            uint64_t v40 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(v33, "startPort"));
            [v34 setObject:v40 forKeyedSubscript:@"TSStartPort"];

            char v41 = [v33 endAddress];
            uint64_t v42 = [v41 hostname];
            [v34 setObject:v42 forKeyedSubscript:@"TSEndAddress"];

            int v43 = objc_msgSend(NSNumber, "numberWithUnsignedShort:", objc_msgSend(v33, "endPort"));
            [v34 setObject:v43 forKeyedSubscript:@"TSEndPort"];

            BOOL v44 = objc_msgSend(NSNumber, "numberWithUnsignedChar:", objc_msgSend(v33, "ipProtocol"));
            [v34 setObject:v44 forKeyedSubscript:@"TSProtocol"];

            [v28 addObject:v34];
          }
          uint64_t v30 = [obja countByEnumeratingWithState:&v51 objects:v61 count:16];
        }
        while (v30);
      }

      id v10 = v46;
      [v46 setObject:v28 forKeyedSubscript:@"TrafficSelectorsRemote"];

      id v8 = v47;
      id v7 = v48;
      a2 = a2;
    }
    uint64_t v45 = ne_log_obj();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      id v60 = v10;
      _os_log_debug_impl(&dword_19DDAF000, v45, OS_LOG_TYPE_DEBUG, "Updating traffic selectors with %@", buf, 0xCu);
    }

    ((void (*)(id, uint64_t, uint64_t, id, uint64_t))[WeakRetained clientCallback])(WeakRetained, a2, 4608, v10, objc_msgSend(WeakRetained, "clientCallbackInfo"));
  }
}

void __NEIPSecIKESetDispatchQueue_block_invoke_255(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained clientCallback])
  {
    uint64_t v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v3 = 0;
      _os_log_debug_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_DEBUG, "Firing short DPD event", v3, 2u);
    }

    ((void (*)(id, void, uint64_t, void, uint64_t))[WeakRetained clientCallback])(WeakRetained, 0, 5888, 0, objc_msgSend(WeakRetained, "clientCallbackInfo"));
  }
}

void __NEIPSecIKESetDispatchQueue_block_invoke_257(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained clientCallback])
  {
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_debug_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_DEBUG, "Firing redirect event", v9, 2u);
    }

    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([v3 addressFamily] == 2)
      {
        id v7 = @"RedirectedToServerTypeIPAddress";
      }
      else
      {
        if ([v3 addressFamily] != 30)
        {
LABEL_12:
          id v8 = [v3 hostname];
          [v6 setObject:v8 forKeyedSubscript:@"RedirectedToServer"];

          goto LABEL_13;
        }
        id v7 = @"RedirectedToServerTypeIPv6Address";
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_13:
        ((void (*)(id, void, uint64_t, id, uint64_t))[WeakRetained clientCallback])(WeakRetained, 0, 5120, v6, objc_msgSend(WeakRetained, "clientCallbackInfo"));

        goto LABEL_14;
      }
      id v7 = @"RedirectToServerTypeFQDN";
    }
    [v6 setObject:v7 forKeyedSubscript:@"RedirectedToServerType"];
    goto LABEL_12;
  }
LABEL_14:
}

void __NEIPSecIKESetDispatchQueue_block_invoke_276(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained clientCallback])
  {
    id v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_DEBUG, "Firing private notify status event", buf, 2u);
    }

    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v7 = v3;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v21 objects:v26 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      id v20 = v3;
      id v19 = WeakRetained;
      unsigned __int8 v10 = 0;
      id v11 = 0;
      uint64_t v12 = *(void *)v22;
      do
      {
        uint64_t v13 = v7;
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v22 != v12) {
            objc_enumerationMutation(v13);
          }
          id v15 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          if ([v15 notifyStatus] == 51115)
          {
            int v16 = [v15 notifyData];
            [v6 setObject:v16 forKeyedSubscript:@"N1ModeInformation"];
          }
          BOOL v17 = [v15 notifyStatus] == 10500;
          if ([v15 notifyStatus] == 41041)
          {
            uint64_t v18 = [v15 notifyData];

            id v11 = (void *)v18;
          }
          v10 |= v17;
        }
        id v7 = v13;
        uint64_t v9 = [v13 countByEnumeratingWithState:&v21 objects:v26 count:16];
      }
      while (v9);

      id WeakRetained = v19;
      if ((v10 & (v11 != 0)) == 1) {
        [v6 setObject:v11 forKeyedSubscript:@"NetworkFailureBackoffTimer"];
      }
      id v3 = v20;
    }
    else
    {

      id v11 = 0;
    }
    if ([v6 count]) {
      ((void (*)(id, void, uint64_t, id, uint64_t))[WeakRetained clientCallback])(WeakRetained, 0, 6144, v6, objc_msgSend(WeakRetained, "clientCallbackInfo"));
    }
  }
}

void NEIPSecIKESendDeadPeerDetectionPacket(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = __NEIPSecIKESendDeadPeerDetectionPacket_block_invoke;
  v11[3] = &unk_1E59922B0;
  id v12 = v9;
  id v10 = v9;
  [a1 sendKeepaliveWithRetries:a2 retryIntervalInMilliseconds:a3 callbackQueue:a4 callback:v11];
}

uint64_t __NEIPSecIKESendDeadPeerDetectionPacket_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t NEIPSecIKEForceChildSARekey(void *a1, const char *a2)
{
  return [a1 forceRekeyChild:a2];
}

uint64_t NEIPSecIKEStartConnection(void *a1)
{
  id v1 = a1;
  [v1 connect];
  id v3 = [(NEIKEv2Session *)v1 firstChildSA];

  if (v3) {
    uint64_t v4 = v3[4];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

uint64_t NEIPSecIKEConnectionIsMobile(void *a1, const char *a2)
{
  if (!a1)
  {
    uint64_t v2 = 0;
    goto LABEL_6;
  }
  uint64_t v2 = objc_getProperty(a1, a2, 336, 1);
  if (!v2)
  {
LABEL_6:
    uint64_t v3 = 0;
    goto LABEL_4;
  }
  uint64_t v3 = v2[11] & 1;
LABEL_4:

  return v3;
}

uint64_t NEIPSecIKEStartMOBIKE(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  return NEIPSecIKEStartMOBIKEReuseSocket(a1, a2, a3, a4, a5, 0, a6, a7);
}

uint64_t NEIPSecIKEStartMOBIKEReuseSocket(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, void *a7, void *a8)
{
  id v15 = a7;
  id v16 = a8;
  if (a1)
  {
    id v17 = a1;
    if (a3)
    {
      a3 = [MEMORY[0x1E4F38BF0] endpointWithHostname:a3 port:@"0"];
    }
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = __NEIPSecIKEStartMOBIKEReuseSocket_block_invoke;
    void v20[3] = &unk_1E5991700;
    id v21 = v16;
    [v17 sendMOBIKEWithRetries:a4 retryInterval:a5 interfaceName:a2 invalidateTransport:a6 == 0 resetEndpoint:a3 callbackQueue:v15 callback:v20];

    uint64_t v18 = 1000;
  }
  else
  {
    uint64_t v18 = 3;
  }

  return v18;
}

void __NEIPSecIKEStartMOBIKEReuseSocket_block_invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v17 = a2;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    if (v7)
    {
      uint64_t v9 = 70001;
      id v10 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      id v11 = [v7 domain];
      int v12 = [v11 isEqual:@"NEIKEv2ErrorDomain"];

      if (v12)
      {
        uint64_t v13 = [v7 code];
        if ((unint64_t)(v13 - 2) < 0xD) {
          uint64_t v9 = dword_19DF9D218[v13 - 2];
        }
      }
      else
      {
        uint64_t v14 = [v7 domain];
        int v15 = [v14 isEqual:@"NEIKEv2ProtocolErrorDomain"];

        if (v15) {
          uint64_t v9 = [v7 code];
        }
      }
      id v16 = [NSNumber numberWithUnsignedInt:v9];
      [v10 setObject:v16 forKeyedSubscript:@"NotifyCode"];

      uint64_t v8 = *(void *)(a1 + 32);
    }
    else
    {
      id v10 = 0;
    }
    (*(void (**)(uint64_t, id, uint64_t, id))(v8 + 16))(v8, v17, a3, v10);
  }
}

uint64_t NEIPSecIKEStopConnection(void *a1)
{
  return 1;
}

uint64_t NEIPSecIKEInvalidateSession(uint64_t result)
{
  if (result)
  {
    id v1 = (void *)result;
    CFTypeID v2 = CFGetTypeID((CFTypeRef)result);
    if (v2 != CFStringGetTypeID()) {
      [v1 invalidate];
    }
    return 1;
  }
  return result;
}

uint64_t NEIPSecIKEStartChildSA(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = NEIPSecIKEValidateIKEChildDictionary(a2);
  uint64_t v5 = [v3 addChild:v4];

  return v5;
}

uint64_t NEIPSecIKEStopChildSA(void *a1, uint64_t a2)
{
  return 1;
}

uint64_t NEIPSecIKEGetLocalAddress(void *a1, char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 336, 1);
    uint64_t v5 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v4, 64, 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
    id Property = 0;
  }
  id v6 = Property;

  id v7 = (unsigned __int8 *)[v6 address];
  if (v7)
  {
    memcpy(a2, v7, *v7);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t NEIPSecIKEGetRemoteAddress(void *a1, char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 336, 1);
    uint64_t v5 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v4, 72, 1);
    }
  }
  else
  {
    uint64_t v5 = 0;
    id Property = 0;
  }
  id v6 = Property;

  id v7 = (unsigned __int8 *)[v6 address];
  if (v7)
  {
    memcpy(a2, v7, *v7);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void NEIPSecIKESendPrivateNotifyStatus(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v5 = a1;
    id v6 = [[NEIKEv2PrivateNotify alloc] initWithNotifyStatus:a2 notifyData:a3];
    id v7 = v6;
    if (v6)
    {
      uint64_t v9 = v6;
      uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v9 count:1];
      [v5 sendPrivateNotifies:v8 maxRetries:10 retryIntervalInMilliseconds:1000 callbackQueue:0 callback:0];
    }
    else
    {
      uint64_t v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        id v11 = "NEIPSecIKESendPrivateNotifyStatus";
        _os_log_fault_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_FAULT, "%s called with null privateNotify", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v11 = "NEIPSecIKESendPrivateNotifyStatus";
      _os_log_fault_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
    }
  }
}

void NEIPSecSAKernelSessionReceiveMessage(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v8 = a5;
  id v10 = v8;
  if (v8)
  {
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v11 = objc_getProperty(v8, v9, 24, 1);
    uint64_t v12 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)v34;
      while (2)
      {
        uint64_t v15 = 0;
        do
        {
          if (*(void *)v34 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(_DWORD **)(*((void *)&v33 + 1) + 8 * v15);
          if (v16)
          {
            if (v16[12] == a2)
            {
LABEL_28:
              long long v24 = v16;

              uint64_t v25 = ne_log_large_obj();
              if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138413314;
                uint64_t v38 = a1;
                __int16 v39 = 2112;
                uint64_t v40 = v10;
                __int16 v41 = 1024;
                int v42 = a3;
                __int16 v43 = 1024;
                int v44 = a2;
                __int16 v45 = 2112;
                int v46 = v24;
                _os_log_impl(&dword_19DDAF000, v25, OS_LOG_TYPE_INFO, "%@ %@ received notification %#x for SAID %u which matches SA %@", buf, 0x2Cu);
              }

              id v26 = [v10 delegate];
              uint64_t v27 = v26;
              if (v26)
              {
                int v28 = a3 & 0xF00;
                switch(v28)
                {
                  case 2048:
                    [v26 idleTimeoutSA:v24];
                    break;
                  case 1024:
                    [v26 deleteSA:v24];
                    break;
                  case 512:
                    [v26 expireSA:v24];
                    break;
                }
                if ((a3 & 0xF0) == 0x10) {
                  [v27 blackholeDetectedSA:v24];
                }
              }

              goto LABEL_40;
            }
          }
          else if (!a2)
          {
            goto LABEL_14;
          }
          ++v15;
        }
        while (v13 != v15);
        uint64_t v17 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
        uint64_t v13 = v17;
        if (v17) {
          continue;
        }
        break;
      }
    }
LABEL_14:

    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v11 = objc_getProperty(v10, v18, 32, 1);
    uint64_t v19 = [v11 countByEnumeratingWithState:&v29 objects:v47 count:16];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)v30;
      do
      {
        uint64_t v22 = 0;
        do
        {
          if (*(void *)v30 != v21) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(_DWORD **)(*((void *)&v29 + 1) + 8 * v22);
          if (v16)
          {
            if (v16[12] == a2) {
              goto LABEL_28;
            }
          }
          else if (!a2)
          {
            goto LABEL_26;
          }
          ++v22;
        }
        while (v20 != v22);
        uint64_t v23 = [v11 countByEnumeratingWithState:&v29 objects:v47 count:16];
        uint64_t v20 = v23;
      }
      while (v23);
    }
LABEL_26:

    long long v24 = ne_log_obj();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138413058;
      uint64_t v38 = a1;
      __int16 v39 = 2112;
      uint64_t v40 = v10;
      __int16 v41 = 1024;
      int v42 = a3;
      __int16 v43 = 1024;
      int v44 = a2;
      _os_log_impl(&dword_19DDAF000, v24, OS_LOG_TYPE_INFO, "%@ %@ received notification %#x for SAID %u which matches no SA", buf, 0x22u);
    }
LABEL_40:
  }
}

void sub_19DEE7224(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEE7B64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEE7C00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEE7CE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEE7DEC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEE7FC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef NEKeychainCopyValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  CFTypeRef result = 0;
  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  CFDictionaryRef v5 = Query;
  if (Query)
  {
    CFDictionaryAddValue(Query, (const void *)*MEMORY[0x1E4F3BC70], (const void *)*MEMORY[0x1E4F1CFD0]);
    OSStatus v6 = SecItemCopyMatching(v5, &result);
    CFRelease(v5);
    CFTypeRef v7 = result;
    if (result)
    {
      if (v6)
      {
        CFDictionaryRef v5 = 0;
      }
      else
      {
        CFDictionaryRef v5 = (const __CFDictionary *)CFStringCreateFromExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDataRef)result, 0x8000100u);
        CFTypeRef v7 = result;
      }
      CFRelease(v7);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

__CFDictionary *__NEKeychainCreateQuery(CFStringRef theString, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  if (theString)
  {
    CFIndex Length = (__CFDictionary *)CFStringGetLength(theString);
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    CFIndex Length = 0;
    if (a2)
    {
LABEL_3:
      CFIndex v9 = CFStringGetLength(a2);
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  CFIndex v9 = 0;
  if (a3)
  {
LABEL_4:
    CFIndex v10 = CFStringGetLength(a3);
    if (a4) {
      goto LABEL_5;
    }
LABEL_10:
    CFIndex v11 = 0;
    if (!Length) {
      return Length;
    }
    goto LABEL_11;
  }
LABEL_9:
  CFIndex v10 = 0;
  if (!a4) {
    goto LABEL_10;
  }
LABEL_5:
  CFIndex v11 = CFStringGetLength(a4);
  if (!Length) {
    return Length;
  }
LABEL_11:
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
  CFIndex Length = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F3B978], (const void *)*MEMORY[0x1E4F3B988]);
    CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E4F3B850], theString);
    if (v9) {
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E4F3B5C0], a2);
    }
    if (v10) {
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E4F3B788], a3);
    }
    if (v11) {
      CFDictionaryAddValue(Length, (const void *)*MEMORY[0x1E4F3B678], a4);
    }
  }
  return Length;
}

__CFDictionary *NEKeychainCopyPersistentRef(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  CFTypeRef result = 0;
  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  if (Query)
  {
    CFDictionaryRef v5 = Query;
    CFDictionaryAddValue(Query, (const void *)*MEMORY[0x1E4F3BC78], (const void *)*MEMORY[0x1E4F1CFD0]);
    OSStatus v6 = SecItemCopyMatching(v5, &result);
    CFRelease(v5);
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = result == 0;
    }
    if (v7) {
      return 0;
    }
    else {
      return (__CFDictionary *)result;
    }
  }
  return Query;
}

CFDictionaryRef NEKeychainSetValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, CFStringRef theString)
{
  CFTypeRef result = 0;
  if (!theString) {
    return 0;
  }
  CFDictionaryRef Length = (const __CFDictionary *)CFStringGetLength(theString);
  if (Length)
  {
    CFDictionaryRef Length = __NEKeychainCreateQuery(a1, a2, a3, a4);
    if (Length)
    {
      CFDictionaryRef v11 = Length;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      ExternalRepresentatiouint64_t n = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, 0x8000100u, 0);
      CFStringRef v14 = (const __CFString *)NEKeychainCopyValue(a1, a2, a3, a4);
      if (v14)
      {
        CFStringRef v15 = v14;
        if (CFStringCompare(theString, v14, 0))
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v12, 0, 0, 0);
          CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F3BD38], ExternalRepresentation);
          SecItemUpdate(v11, Mutable);
          CFRelease(Mutable);
        }
        CFRelease(v11);
        CFDictionaryRef v17 = (const __CFDictionary *)v15;
      }
      else
      {
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F3B558], (const void *)*MEMORY[0x1E4F3B570]);
        CFDictionaryAddValue(v11, (const void *)*MEMORY[0x1E4F3BD38], ExternalRepresentation);
        if (SecItemAdd(v11, &result)) {
          CFTypeRef result = 0;
        }
        CFDictionaryRef v17 = v11;
      }
      CFRelease(v17);
      if (ExternalRepresentation) {
        CFRelease(ExternalRepresentation);
      }
      return (const __CFDictionary *)result;
    }
  }
  return Length;
}

void NEKeychainRemoveValue(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  Query = __NEKeychainCreateQuery(a1, a2, a3, a4);
  if (Query)
  {
    CFDictionaryRef v5 = Query;
    SecItemDelete(Query);
    CFRelease(v5);
  }
}

CFDictionaryRef NEKeychainSetPKCS12Container(const __CFData *a1, void *a2)
{
  values = a2;
  if (!a2) {
    return 0;
  }
  CFArrayRef items = 0;
  CFDictionaryRef Count = CFDictionaryCreate(0, MEMORY[0x1E4F3B9E8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Count) {
    return Count;
  }
  CFDictionaryRef v4 = Count;
  if (SecPKCS12Import(a1, Count, &items)) {
    return 0;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFMutableArrayRef v7 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  CFDictionaryRef Count = 0;
  theArray = v7;
  if (Mutable) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    CFDictionaryRef Count = (const __CFDictionary *)CFArrayGetCount(items);
    if (Count)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(items, 0);
      CFNumberRef Value = (__SecCertificate *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F3B9F0]);
      trust = (__SecTrust *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F3B9F8]);
      CertificateCFDictionaryRef Count = SecTrustGetCertificateCount(trust);
      if (CertificateCount >= 1)
      {
        CFIndex v12 = CertificateCount;
        CFIndex v13 = 0;
        CFStringRef v14 = (const void *)*MEMORY[0x1E4F3BD48];
        CFStringRef v15 = (const void *)*MEMORY[0x1E4F3BC78];
        id v16 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFDictionaryRef v17 = (const void *)*MEMORY[0x1E4F3B558];
        SEL v18 = (const void *)*MEMORY[0x1E4F3B570];
        do
        {
          CFTypeRef result = 0;
          SecCertificateRef CertificateAtIndex = Value;
          if (v13) {
            SecCertificateRef CertificateAtIndex = SecTrustGetCertificateAtIndex(trust, v13);
          }
          CFDictionarySetValue(Mutable, v14, CertificateAtIndex);
          CFDictionarySetValue(Mutable, v15, v16);
          CFDictionarySetValue(Mutable, v17, v18);
          OSStatus v20 = SecItemAdd(Mutable, &result);
          if (v20 == -25299)
          {
            CFDictionaryRemoveValue(Mutable, v17);
            OSStatus v20 = SecItemCopyMatching(Mutable, &result);
          }
          if (!v20)
          {
            CFArrayAppendValue(theArray, result);
            CFRelease(result);
          }
          ++v13;
        }
        while (v12 != v13);
      }
      CFRelease(Mutable);
      CFRelease(items);
      CFRelease(v4);
      return theArray;
    }
  }
  return Count;
}

BOOL NEKeychainRemoveWithPersistentID(void *a1)
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  id v1 = (void *)*MEMORY[0x1E4F3BD40];
  values = a1;
  keys[0] = v1;
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, 0, 0);
  if (!v2) {
    return 0;
  }
  CFDictionaryRef v3 = v2;
  BOOL v4 = SecItemDelete(v2) == 0;
  CFRelease(v3);
  return v4;
}

void sub_19DEEC25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEF26A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEF2CE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF2D80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF2E38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF2EE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF2F98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF3040(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF30E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DEF3178(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF3318(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF377C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF3ADC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF3D48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF44D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 248));
  _Unwind_Resume(a1);
}

void sub_19DEF4A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v10);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DEF4B78(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF5C54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF5E28(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEF6D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_nexus_flow_finalize_output_frames(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 96))();
  }
  return result;
}

uint64_t nw_nexus_flow_get_output_frames(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 88))();
  }
  return result;
}

uint64_t nw_nexus_flow_get_input_frames(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 80))();
  }
  return result;
}

uint64_t nw_nexus_flow_output_available(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 72))();
  }
  return result;
}

uint64_t nw_nexus_flow_input_available(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 24) + 64))();
  }
  return result;
}

BOOL nw_nexus_flow_add_input_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2)
  {
    *(void *)(a1 + 48) = a2;
    *(void *)(a2 + 32) = a1;
  }
  return v2 == 0;
}

void sub_19DEFBC70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFC1B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFC394(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFC648(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFC7EC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 40));
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFCAE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DEFCC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sendDataOnRing(void *a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL v4 = a1;
  if (!os_channel_get_next_slot())
  {
    if (os_channel_sync())
    {
      CFAllocatorRef v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        CFDictionaryRef v11 = "EGRESS";
        if (!a3) {
          CFDictionaryRef v11 = "INGRESS";
        }
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v15 = v4;
        __int16 v16 = 2080;
        CFDictionaryRef v17 = v11;
        __int16 v18 = 2112;
        uint64_t v19 = @"failed to sync channel TX";
        goto LABEL_28;
      }
LABEL_9:

      if (!*(void *)&v4[4]._os_unfair_lock_opaque) {
        goto LABEL_24;
      }
      os_channel_packet_free();
      goto LABEL_11;
    }
    if (!os_channel_get_next_slot())
    {
      CFAllocatorRef v5 = ne_log_obj();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        CFIndex v10 = "EGRESS";
        if (!a3) {
          CFIndex v10 = "INGRESS";
        }
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v15 = v4;
        __int16 v16 = 2080;
        CFDictionaryRef v17 = v10;
        __int16 v18 = 2112;
        uint64_t v19 = @"bad next slot";
        goto LABEL_28;
      }
      goto LABEL_9;
    }
  }
  if (os_channel_slot_attach_packet())
  {
    CFAllocatorRef v5 = ne_log_obj();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      OSStatus v6 = "EGRESS";
      if (!a3) {
        OSStatus v6 = "INGRESS";
      }
      *(_DWORD *)long long buf = 138412802;
      CFStringRef v15 = v4;
      __int16 v16 = 2080;
      CFDictionaryRef v17 = v6;
      __int16 v18 = 2112;
      uint64_t v19 = @"bad attach";
LABEL_28:
      _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "%@: %s - %@", buf, 0x20u);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  int v7 = os_channel_advance_slot();
  BOOL v8 = ne_log_obj();
  CFIndex v9 = v8;
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      CFIndex v12 = "EGRESS";
      if (!a3) {
        CFIndex v12 = "INGRESS";
      }
      *(_DWORD *)long long buf = 138412802;
      CFStringRef v15 = v4;
      __int16 v16 = 2080;
      CFDictionaryRef v17 = v12;
      __int16 v18 = 2112;
      uint64_t v19 = @"Failed to advance slot";
      _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, "%@: %s - %@", buf, 0x20u);
    }

    if (*(void *)&v4[4]._os_unfair_lock_opaque)
    {
LABEL_11:
      if (os_channel_is_defunct())
      {
        os_unfair_lock_lock(v4 + 2);
        -[NEFilterPacketInterpose close_nolock:]((uint64_t)v4, 1);
        os_unfair_lock_unlock(v4 + 2);
      }
    }
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      CFIndex v13 = "EGRESS";
      if (!a3) {
        CFIndex v13 = "INGRESS";
      }
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v15 = v4;
      __int16 v16 = 2080;
      CFDictionaryRef v17 = v13;
      _os_log_debug_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_DEBUG, "%@ sendDataOnRing: sent packet on %s tx ring", buf, 0x16u);
    }
  }
LABEL_24:
}

void sub_19DF005D8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

uint64_t _NE_DNSMessageExtractDomainNameString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (_NE_DNSMessageExtractDomainNameString_onceToken != -1) {
    dispatch_once(&_NE_DNSMessageExtractDomainNameString_onceToken, &__block_literal_global_18879);
  }
  CFIndex v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))_NE_DNSMessageExtractDomainNameString__mdns_DNSMessageExtractDomainNameString;
  if (!_NE_DNSMessageExtractDomainNameString__mdns_DNSMessageExtractDomainNameString) {
    return 0xFFFFFFFFLL;
  }

  return v10(a1, a2, a3, a4, a5);
}

uint64_t ipsec_check_keylen(int a1, int a2, unsigned int a3)
{
  if (a1 == 14)
  {
    int v3 = 2;
    return ipsec_check_keylen2(v3, a2, a3);
  }
  if (a1 == 15)
  {
    int v3 = 3;
    return ipsec_check_keylen2(v3, a2, a3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t ipsec_check_keylen2(int a1, int a2, unsigned int a3)
{
  uint64_t v4 = findsupportedalg(a1, a2);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = *((unsigned __int16 *)v4 + 1);
  unsigned int v6 = *((unsigned __int16 *)v4 + 2);
  if (v5 > a3 || v6 < a3)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "%d %d %d\n", a3, v5, v6);
    return 0xFFFFFFFFLL;
  }
  return 0;
}

unsigned __int8 *findsupportedalg(int a1, int a2)
{
  uint64_t v2 = 0;
  while (supported_map[v2] != a1)
  {
    if (++v2 == 3) {
      return 0;
    }
  }
  int v3 = (unsigned __int16 *)ipsec_supported[v2];
  if (!v3) {
    return 0;
  }
  unsigned int v4 = *v3;
  if (v4 < 0x10) {
    return 0;
  }
  uint64_t result = (unsigned __int8 *)(v3 + 4);
  int v6 = v4 + 8;
  while (*result != a2)
  {
    result += 8;
    v6 -= 8;
    if (v6 <= 23) {
      return 0;
    }
  }
  return result;
}

uint64_t ipsec_get_keylen(int a1, int a2, void *a3)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  if (a1 == 14)
  {
    int v4 = 2;
  }
  else
  {
    if (a1 != 15) {
      return 0xFFFFFFFFLL;
    }
    int v4 = 3;
  }
  int v6 = findsupportedalg(v4, a2);
  if (v6)
  {
    int v7 = v6;
    uint64_t result = 0;
    *a3 = *(void *)v7;
    return result;
  }
  return 0xFFFFFFFFLL;
}

BOOL NEPFKeySendGetSPI(NSObject *a1, uint64_t a2, uint8_t a3, uint8_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9, int a10, unsigned int a11, int a12, unsigned int a13, uint8_t a14, long long a15)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a5 || !a6)
  {
    id v26 = ne_log_obj();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v27 = "pfkey get spi, source/destination is NULL";
      int v28 = v26;
      uint32_t v29 = 2;
LABEL_34:
      _os_log_error_impl(&dword_19DDAF000, v28, OS_LOG_TYPE_ERROR, v27, buf, v29);
    }
    return 0;
  }
  int v17 = *(unsigned __int8 *)(a5 + 1);
  if (v17 != *(unsigned __int8 *)(a6 + 1))
  {
    long long v30 = ne_log_obj();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      int v41 = *(unsigned __int8 *)(a5 + 1);
      int v42 = *(unsigned __int8 *)(a6 + 1);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v41;
      LOWORD(v46) = 1024;
      *(_DWORD *)((char *)&v46 + 2) = v42;
      uint64_t v27 = "pfkey get spi, source IP family(%d) does not match destination IP family(%d)";
      int v28 = v30;
      uint32_t v29 = 14;
      goto LABEL_34;
    }
    return 0;
  }
  BOOL v20 = 0;
  if (a7 > a8 || a7 - 1 < 0xFF) {
    return v20;
  }
  if (v17 != 2)
  {
    if (v17 == 30)
    {
      char v25 = 0x80;
      goto LABEL_15;
    }
    __int16 v39 = ne_log_obj();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v40 = *(unsigned __int8 *)(a5 + 1);
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v40;
      uint64_t v27 = "pfkey get spi, invalid source IP family %d";
      int v28 = v39;
      uint32_t v29 = 8;
      goto LABEL_34;
    }
    return 0;
  }
  char v25 = 32;
LABEL_15:
  char v44 = v25;
  BOOL v33 = a7 < 0x100 || a8 == -1;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  CFDataRef v35 = Mutable;
  BOOL v43 = v33;
  long long v36 = ne_log_obj();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_19DDAF000, v36, OS_LOG_TYPE_INFO, "Sending PFKey get new SPI", buf, 2u);
  }
  v50.locatiouint64_t n = CFDataGetLength(v35);
  *(_DWORD *)long long buf = 1245186;
  uint8_t buf[4] = a4;
  LODWORD(v46) = 0;
  HIDWORD(v46) = a9;
  buf[5] = a14;
  *(_WORD *)&buf[6] = 1;
  v50.length = 0;
  CFDataReplaceBytes(v35, v50, buf, 16);
  v51.locatiouint64_t n = CFDataGetLength(v35);
  v51.length = 5;
  NEPFKeySetSADBAddr(v35, v51, (const UInt8 *)a5, v44, 255);
  v52.locatiouint64_t n = CFDataGetLength(v35);
  v52.length = 6;
  NEPFKeySetSADBAddr(v35, v52, (const UInt8 *)a6, v44, 255);
  if (a15 != 0)
  {
    v53.locatiouint64_t n = CFDataGetLength(v35);
    v53.length = 22;
    NEPFKeySetSADBIPSecIF(v35, v53, 0, *((char **)&a15 + 1), (char *)a15, 0);
  }
  if (a10)
  {
    v54.locatiouint64_t n = CFDataGetLength(v35);
    *(void *)long long buf = 196612;
    unint64_t v46 = 0;
    uint64_t v47 = a11;
    uint64_t v48 = 0;
    v54.length = 0;
    CFDataReplaceBytes(v35, v54, buf, 32);
  }
  if (!v43)
  {
    *(_DWORD *)long long buf = 1048578;
    *(_DWORD *)&uint8_t buf[4] = a7;
    unint64_t v46 = a8;
    v55.locatiouint64_t n = CFDataGetLength(v35);
    v55.length = 0;
    CFDataReplaceBytes(v35, v55, buf, 16);
  }
  unsigned __int16 v37 = CFDataGetLength(v35) + 16;
  pid_t v38 = getpid();
  *(_WORD *)long long buf = 258;
  buf[2] = 0;
  buf[3] = a3;
  *(_WORD *)&uint8_t buf[4] = v37 >> 3;
  *(_WORD *)&buf[6] = 0;
  unint64_t v46 = __PAIR64__(v38, a13);
  v56.locatiouint64_t n = 0;
  v56.length = 0;
  CFDataReplaceBytes(v35, v56, buf, 16);
  BOOL v20 = NEPFKeySend(a1, a2, v35);
  CFRelease(v35);
  return v20;
}

void NEPFKeySetSADBAddr(__CFData *a1, CFRange a2, const UInt8 *a3, char a4, char a5)
{
  locatiouint64_t n = a2.location;
  *(_WORD *)newBytes = (unsigned __int16)(((*a3 - 1) | 7) + 9) >> 3;
  __int16 length = a2.length;
  char v15 = a5;
  char v16 = a4;
  __int16 v17 = 0;
  a2.__int16 length = 0;
  CFDataReplaceBytes(a1, a2, newBytes, 8);
  CFIndex v8 = location + 8;
  v18.locatiouint64_t n = v8;
  v18.__int16 length = 0;
  CFDataReplaceBytes(a1, v18, a3, *a3);
  int v9 = ((*a3 - 1) | 7) - *a3;
  if (v9 >= 0)
  {
    CFIndex v10 = (const UInt8 *)malloc_type_calloc(1uLL, (v9 + 1), 0x6D1A479BuLL);
    if (v10)
    {
      CFDictionaryRef v11 = (UInt8 *)v10;
      uint64_t v12 = *a3;
      v19.locatiouint64_t n = v8 + v12;
      v19.__int16 length = 0;
      CFDataReplaceBytes(a1, v19, v10, ((v12 - 1) | 7) - v12 + 1);
      free(v11);
    }
  }
}

void NEPFKeySetSADBIPSecIF(CFMutableDataRef theData, CFRange range, char *__s, char *a4, char *a5, __int16 a6)
{
  locatiouint64_t n = range.location;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  strcpy((char *)newBytes, "\n");
  __int16 length = range.length;
  if (__s)
  {
    strlen(__s);
    __strncpy_chk();
  }
  if (a4)
  {
    strlen(a4);
    __strncpy_chk();
  }
  if (a5)
  {
    strlen(a5);
    __strncpy_chk();
  }
  LOWORD(v16[6]) = a6;
  v18.locatiouint64_t n = location;
  v18.__int16 length = 0;
  CFDataReplaceBytes(theData, v18, newBytes, 80);
}

BOOL NEPFKeySend(NSObject *a1, uint64_t a2, const __CFData *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1 || !a2 || !a3)
  {
    long long v13 = ne_log_obj();
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    LOWORD(v17.msg_name) = 0;
    int v9 = "pfkey send invalid args";
    CFIndex v10 = (uint8_t *)&v17;
    CFDictionaryRef v11 = v13;
    uint32_t v12 = 2;
    goto LABEL_12;
  }
  int handle = dispatch_source_get_handle(a1);
  BytePtr = CFDataGetBytePtr(a3);
  unint64_t Length = CFDataGetLength(a3);
  *(_OWORD *)&v17.msg_control = 0u;
  *(_OWORD *)&v17.msg_name = 0u;
  v17.msg_iov = (iovec *)&BytePtr;
  *(void *)&v17.msg_iovleuint64_t n = 1;
  unint64_t v5 = sendmsg(handle, &v17, 0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    long long v14 = ne_log_obj();
    BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    long long v15 = __error();
    char v16 = strerror(*v15);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v21 = v16;
    int v9 = "PFKey write error: %s";
    CFIndex v10 = buf;
    CFDictionaryRef v11 = v14;
    uint32_t v12 = 12;
    goto LABEL_12;
  }
  unint64_t v6 = v5;
  if (v5 < Length)
  {
    int v7 = ne_log_obj();
    BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)long long buf = 134218240;
    uint64_t v21 = (char *)v6;
    __int16 v22 = 2048;
    unint64_t v23 = Length;
    int v9 = "PFKey failed to write an entire message (%zd < %zu)";
    CFIndex v10 = buf;
    CFDictionaryRef v11 = v7;
    uint32_t v12 = 22;
LABEL_12:
    _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, v9, v10, v12);
    return 0;
  }
  return 1;
}

BOOL NEPFKeySendUpdate(NSObject *a1, uint64_t a2, int a3, char a4, const UInt8 *a5, const UInt8 *a6, unsigned int a7, int a8, unsigned __int8 a9, const UInt8 *a10, char a11, unsigned __int16 a12, char a13, unsigned __int16 a14, int a15, unsigned __int16 a16, int a17, int a18, unsigned int a19, int a20,unsigned int a21,int a22,unsigned int a23,int a24,int a25,unsigned __int16 a26,unsigned __int16 a27,unsigned __int16 a28,__int16 a29,char a30,unint64_t a31)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  long long v31 = ne_log_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v42 = bswap32(a7);
    _os_log_impl(&dword_19DDAF000, v31, OS_LOG_TYPE_INFO, "Sending PFKey update SPI %04X", buf, 8u);
  }
  return pfkey_send_x1(a1, a2, 2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19,
           a21,
           a23,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

BOOL pfkey_send_x1(NSObject *a1, uint64_t a2, int a3, int a4, char a5, const UInt8 *a6, const UInt8 *a7, int a8, int a9, unsigned __int8 a10, const UInt8 *a11, char a12, unsigned __int16 a13, char a14, unsigned __int16 a15, int a16, unsigned __int16 a17, int a18, unsigned int a19, unsigned int a20,unsigned int a21,int a22,unsigned __int16 a23,unsigned __int16 a24,unsigned __int16 a25,__int16 a26,char a27,long long a28)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  CFDataRef v61 = 0;
  if (!a6 || !a7)
  {
    pid_t v38 = ne_log_obj();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      __int16 v39 = "sadb update";
      if (a3 == 3) {
        __int16 v39 = "sadb add";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v63 = v39;
      int v40 = "pfkey %s, source/destination is NULL";
      int v41 = v38;
      uint32_t v42 = 12;
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  int v31 = a6[1];
  if (v31 != a7[1])
  {
    uint64_t v43 = ne_log_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      char v44 = "sadb update";
      int v45 = a6[1];
      int v46 = a7[1];
      if (a3 == 3) {
        char v44 = "sadb add";
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)uint64_t v63 = v44;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v45;
      *(_WORD *)&v63[14] = 1024;
      *(_DWORD *)&v63[16] = v46;
      int v40 = "pfkey %s, source IP family(%d) does not match destination IP family(%d)";
      int v41 = v43;
      uint32_t v42 = 24;
      goto LABEL_25;
    }
LABEL_26:
    CFRange v50 = 0;
    int v51 = 0;
LABEL_27:
    BOOL v52 = 0;
    goto LABEL_28;
  }
  if (v31 != 2)
  {
    if (v31 == 30)
    {
      char v37 = 0x80;
      goto LABEL_16;
    }
    uint64_t v47 = ne_log_obj();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = "sadb update";
      int v49 = a6[1];
      if (a3 == 3) {
        uint64_t v48 = "sadb add";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v63 = v48;
      *(_WORD *)&v63[8] = 1024;
      *(_DWORD *)&v63[10] = v49;
      int v40 = "pfkey %s, invalid source IP family %d";
      int v41 = v47;
      uint32_t v42 = 18;
LABEL_25:
      _os_log_error_impl(&dword_19DDAF000, v41, OS_LOG_TYPE_ERROR, v40, buf, v42);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  char v37 = 32;
LABEL_16:
  if (a4 == 2)
  {
    uint8_t v60 = a3;
    int v51 = 0;
    CFRange v50 = 0;
    if (!a12)
    {
      BOOL v52 = 0;
      if (!a14) {
        goto LABEL_28;
      }
      goto LABEL_37;
    }
    goto LABEL_46;
  }
  if (a4 == 9)
  {
    uint8_t v60 = a3;
    int v51 = 0;
    CFRange v50 = 0;
    if (a12)
    {
      BOOL v52 = 0;
      if (a14) {
        goto LABEL_28;
      }
      goto LABEL_37;
    }
LABEL_46:
    BOOL v52 = 0;
    goto LABEL_28;
  }
  if (a4 != 3) {
    goto LABEL_26;
  }
  uint8_t v60 = a3;
  if (!a12) {
    goto LABEL_26;
  }
LABEL_37:
  char v59 = v37;
  int v51 = ((*a6 - 1) | 7) + ((a13 - 1) | 7) + ((a15 - 1) | 7) + 236 + ((*a7 - 1) | 7);
  CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], ((*a6 - 1) | 7) + ((a13 - 1) | 7) + ((a15 - 1) | 7) + 236 + ((*a7 - 1) | 7));
  CFRange v50 = Mutable;
  CFDataRef v61 = Mutable;
  if (!Mutable) {
    goto LABEL_27;
  }
  v66.locatiouint64_t n = CFDataGetLength(Mutable);
  *(_DWORD *)long long buf = 65539;
  *(_DWORD *)uint64_t v63 = a8;
  *(_WORD *)&v63[4] = a10;
  v63[6] = a14;
  v63[7] = a12;
  *(_DWORD *)&v63[8] = a16;
  *(_WORD *)&v63[18] = __rev16(a23);
  *(_DWORD *)&v63[12] = __PAIR32__(a25, a24);
  *(_WORD *)&v63[16] = a26;
  v66.__int16 length = 0;
  CFDataReplaceBytes(v50, v66, buf, 24);
  v67.locatiouint64_t n = CFDataGetLength(v50);
  *(_DWORD *)long long buf = 1245186;
  v63[0] = a5;
  *(_WORD *)&v63[6] = 0;
  *(_DWORD *)&v63[8] = a9;
  v63[1] = a27;
  *(_DWORD *)&v63[2] = a17 | 1;
  v67.__int16 length = 0;
  CFDataReplaceBytes(v50, v67, buf, 16);
  v68.locatiouint64_t n = CFDataGetLength(v50);
  v68.__int16 length = 5;
  NEPFKeySetSADBAddr(v50, v68, a6, v59, 255);
  v69.locatiouint64_t n = CFDataGetLength(v50);
  v69.__int16 length = 6;
  NEPFKeySetSADBAddr(v50, v69, a7, v59, 255);
  if (a4 != 9 && a12)
  {
    v70.locatiouint64_t n = CFDataGetLength(v50);
    v70.__int16 length = 9;
    NEPFKeySetSADBKey(v50, v70, a11, a13);
  }
  if (a14)
  {
    v71.locatiouint64_t n = CFDataGetLength(v50);
    v71.__int16 length = 8;
    NEPFKeySetSADBKey(v50, v71, &a11[a13], a15);
  }
  if (a28 != 0)
  {
    v72.locatiouint64_t n = CFDataGetLength(v50);
    v72.__int16 length = 22;
    NEPFKeySetSADBIPSecIF(v50, v72, 0, *((char **)&a28 + 1), (char *)a28, 0);
  }
  v73.locatiouint64_t n = CFDataGetLength(v50);
  *(_DWORD *)long long buf = 196612;
  *(_DWORD *)uint64_t v63 = a18;
  *(void *)&v63[4] = a19;
  *(void *)&v63[12] = a20;
  unint64_t v64 = a21;
  v73.__int16 length = 0;
  CFDataReplaceBytes(v50, v73, buf, 32);
  v74.locatiouint64_t n = CFDataGetLength(v50);
  *(_DWORD *)long long buf = 262148;
  *(_DWORD *)uint64_t v63 = 80 * a18 / 0x64u;
  *(void *)&v63[4] = 80 * a19 / 0x64uLL;
  *(void *)&v63[12] = 80 * a20 / 0x64uLL;
  unint64_t v64 = 80 * a21 / 0x64uLL;
  v74.__int16 length = 0;
  CFDataReplaceBytes(v50, v74, buf, 32);
  unsigned __int16 v56 = CFDataGetLength(v50) + 16;
  pid_t v57 = getpid();
  buf[0] = 2;
  buf[1] = v60;
  buf[2] = 0;
  buf[3] = a4;
  *(_DWORD *)uint64_t v63 = v56 >> 3;
  *(_DWORD *)&v63[4] = a22;
  *(_DWORD *)&v63[8] = v57;
  v75.locatiouint64_t n = 0;
  v75.__int16 length = 0;
  CFDataReplaceBytes(v50, v75, buf, 16);
  BOOL v52 = NEPFKeySend(a1, a2, v50);
LABEL_28:
  if (CFDataGetLength(v50) > v51)
  {
    CFRange v53 = ne_log_obj();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_FAULT))
    {
      CFIndex Length = CFDataGetLength(v50);
      *(_DWORD *)long long buf = 134218240;
      *(void *)uint64_t v63 = v51;
      *(_WORD *)&v63[8] = 2048;
      *(void *)&v63[10] = Length;
      _os_log_fault_impl(&dword_19DDAF000, v53, OS_LOG_TYPE_FAULT, "pfkey_send_x1: calculated message length (%lu) is less than final message len (%lu)", buf, 0x16u);
    }
  }
  myCFDataReleaseReset(&v61);
  return v52;
}

void NEPFKeySetSADBKey(__CFData *a1, CFRange a2, const UInt8 *a3, unsigned int a4)
{
  locatiouint64_t n = a2.location;
  int v8 = (a4 - 1) | 7;
  *(_WORD *)newBytes = (unsigned __int16)(((a4 - 1) | 7) + 9) >> 3;
  __int16 length = a2.length;
  __int16 v16 = 8 * a4;
  __int16 v17 = 0;
  a2.__int16 length = 0;
  CFDataReplaceBytes(a1, a2, newBytes, 8);
  CFIndex v9 = location + 8;
  uint64_t v10 = a4;
  v18.locatiouint64_t n = v9;
  v18.__int16 length = 0;
  CFDataReplaceBytes(a1, v18, a3, a4);
  if ((int)(v8 - a4) >= 0)
  {
    size_t v11 = v8 - a4 + 1;
    uint32_t v12 = (const UInt8 *)malloc_type_calloc(1uLL, v11, 0x67F34D19uLL);
    if (v12)
    {
      long long v13 = (UInt8 *)v12;
      v19.locatiouint64_t n = v9 + v10;
      v19.__int16 length = 0;
      CFDataReplaceBytes(a1, v19, v12, v11);
      free(v13);
    }
  }
}

BOOL NEPFKeySendAdd(NSObject *a1, uint64_t a2, int a3, char a4, const UInt8 *a5, const UInt8 *a6, unsigned int a7, int a8, unsigned __int8 a9, const UInt8 *a10, char a11, unsigned __int16 a12, char a13, unsigned __int16 a14, int a15, unsigned __int16 a16, int a17, int a18, unsigned int a19, int a20,unsigned int a21,int a22,unsigned int a23,int a24,int a25,unsigned __int16 a26,unsigned __int16 a27,unsigned __int16 a28,__int16 a29,char a30,long long a31)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v31 = ne_log_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    unsigned int v42 = bswap32(a7);
    _os_log_impl(&dword_19DDAF000, v31, OS_LOG_TYPE_INFO, "Sending PFKey add SPI %04X", buf, 8u);
  }
  return pfkey_send_x1(a1, a2, 3, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a19,
           a21,
           a23,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31);
}

BOOL NEPFKeySendMigrate(NSObject *a1, uint64_t a2, uint8_t a3, unsigned int a4, pid_t a5, unsigned int a6, __int16 a7, __int16 a8, __int16 a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char *a15, char *a16)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v23 = ne_log_obj();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    int v39 = bswap32(a4);
    _os_log_impl(&dword_19DDAF000, v23, OS_LOG_TYPE_INFO, "Sending PFKey migrate SPI %04X", buf, 8u);
  }
  BOOL v24 = 0;
  if (a10 && a11 && a13 && a14)
  {
    int v25 = *(unsigned __int8 *)(a10 + 1);
    if (v25 != *(unsigned __int8 *)(a11 + 1)) {
      return 0;
    }
    int v26 = *(unsigned __int8 *)(a13 + 1);
    if (v26 != *(unsigned __int8 *)(a14 + 1)) {
      return 0;
    }
    if (v25 == 2)
    {
      char v27 = 32;
    }
    else
    {
      if (v25 != 30) {
        return 0;
      }
      char v27 = 0x80;
    }
    if (v26 == 2)
    {
      char v35 = v27;
      char v28 = 32;
LABEL_19:
      char v36 = v28;
      CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      BOOL v24 = (BOOL)Mutable;
      if (Mutable)
      {
        *(void *)&long long v34 = a16;
        *((void *)&v34 + 1) = a15;
        v47.locatiouint64_t n = CFDataGetLength(Mutable);
        *(_DWORD *)long long buf = 65539;
        int v39 = a4;
        int v40 = 0;
        pid_t v41 = a5;
        __int16 v45 = __rev16(a6);
        __int16 v42 = a7;
        __int16 v43 = a8;
        __int16 v44 = a9;
        v47.__int16 length = 0;
        CFDataReplaceBytes((CFMutableDataRef)v24, v47, buf, 24);
        v48.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
        v48.__int16 length = 5;
        NEPFKeySetSADBAddr((__CFData *)v24, v48, (const UInt8 *)a10, v35, 255);
        v49.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
        v49.__int16 length = 6;
        NEPFKeySetSADBAddr((__CFData *)v24, v49, (const UInt8 *)a11, v35, 255);
        v50.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
        v50.__int16 length = 27;
        NEPFKeySetSADBAddr((__CFData *)v24, v50, (const UInt8 *)a13, v36, 255);
        v51.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
        v51.__int16 length = 28;
        NEPFKeySetSADBAddr((__CFData *)v24, v51, (const UInt8 *)a14, v36, 255);
        int v31 = (const void *)v24;
        if (a12)
        {
          v52.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
          v52.__int16 length = 22;
          NEPFKeySetSADBIPSecIF((CFMutableDataRef)v24, v52, 0, 0, a12, 0);
        }
        if (v34 != 0)
        {
          v53.locatiouint64_t n = CFDataGetLength((CFDataRef)v24);
          v53.__int16 length = 29;
          NEPFKeySetSADBIPSecIF((CFMutableDataRef)v24, v53, 0, a16, a15, 0);
        }
        unsigned __int16 v32 = CFDataGetLength((CFDataRef)v24) + 16;
        pid_t v33 = getpid();
        *(_WORD *)long long buf = 6658;
        buf[2] = 0;
        buf[3] = a3;
        int v39 = v32 >> 3;
        int v40 = 0;
        pid_t v41 = v33;
        v54.locatiouint64_t n = 0;
        v54.__int16 length = 0;
        CFDataReplaceBytes((CFMutableDataRef)v24, v54, buf, 16);
        BOOL v24 = NEPFKeySend(a1, a2, (const __CFData *)v24);
        CFRelease(v31);
      }
      return v24;
    }
    if (v26 == 30)
    {
      char v35 = v27;
      char v28 = 0x80;
      goto LABEL_19;
    }
    return 0;
  }
  return v24;
}

BOOL NEPFKeySendDelete(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char *a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v17[0] = 67109120;
    v17[1] = bswap32(a7);
    _os_log_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_INFO, "Sending PFKey delete SPI %04X", (uint8_t *)v17, 8u);
  }
  return pfkey_send_x2(a1, a2, 4, a3, a5, a6, a7, a8);
}

BOOL pfkey_send_x2(NSObject *a1, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, char *a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a5 || !a6)
  {
    uint64_t v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      CFRange v19 = "sadb get";
      if (a3 == 4) {
        CFRange v19 = "sadb delete";
      }
      int v36 = 136315138;
      *(void *)char v37 = v19;
      BOOL v20 = "pfkey %s, source/destination is NULL";
      uint64_t v21 = v18;
      uint32_t v22 = 12;
      goto LABEL_24;
    }
    return 0;
  }
  int v11 = *(unsigned __int8 *)(a5 + 1);
  if (v11 != *(unsigned __int8 *)(a6 + 1))
  {
    unint64_t v23 = ne_log_obj();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      BOOL v24 = "sadb get";
      int v25 = *(unsigned __int8 *)(a5 + 1);
      int v26 = *(unsigned __int8 *)(a6 + 1);
      if (a3 == 4) {
        BOOL v24 = "sadb delete";
      }
      int v36 = 136315650;
      *(void *)char v37 = v24;
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = v25;
      *(_WORD *)&v37[14] = 1024;
      *(_DWORD *)&v37[16] = v26;
      BOOL v20 = "pfkey %s, source IP family(%d) does not match destination IP family(%d)";
      uint64_t v21 = v23;
      uint32_t v22 = 24;
      goto LABEL_24;
    }
    return 0;
  }
  if (v11 != 2)
  {
    if (v11 == 30)
    {
      char v17 = 0x80;
      goto LABEL_16;
    }
    unsigned __int16 v32 = ne_log_obj();
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    pid_t v33 = "sadb get";
    int v34 = *(unsigned __int8 *)(a5 + 1);
    if (a3 == 4) {
      pid_t v33 = "sadb delete";
    }
    int v36 = 136315394;
    *(void *)char v37 = v33;
    *(_WORD *)&v37[8] = 1024;
    *(_DWORD *)&v37[10] = v34;
    BOOL v20 = "pfkey %s, invalid source IP family %d";
    uint64_t v21 = v32;
    uint32_t v22 = 18;
LABEL_24:
    _os_log_error_impl(&dword_19DDAF000, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v36, v22);
    return 0;
  }
  char v17 = 32;
LABEL_16:
  CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  char v28 = Mutable;
  v39.locatiouint64_t n = CFDataGetLength(Mutable);
  int v36 = 65539;
  *(_DWORD *)char v37 = a7;
  *(void *)&v37[4] = 0;
  *(void *)&v37[12] = 0;
  v39.__int16 length = 0;
  CFDataReplaceBytes(v28, v39, (const UInt8 *)&v36, 24);
  v40.locatiouint64_t n = CFDataGetLength(v28);
  v40.__int16 length = 5;
  NEPFKeySetSADBAddr(v28, v40, (const UInt8 *)a5, v17, 255);
  v41.locatiouint64_t n = CFDataGetLength(v28);
  v41.__int16 length = 6;
  NEPFKeySetSADBAddr(v28, v41, (const UInt8 *)a6, v17, 255);
  if (a8)
  {
    v42.locatiouint64_t n = CFDataGetLength(v28);
    v42.__int16 length = 22;
    NEPFKeySetSADBIPSecIF(v28, v42, 0, 0, a8, 0);
  }
  unsigned __int16 v29 = CFDataGetLength(v28) + 16;
  pid_t v30 = getpid();
  LOBYTE(v36) = 2;
  *(_WORD *)((char *)&v36 + 1) = a3;
  HIBYTE(v36) = a4;
  *(void *)char v37 = v29 >> 3;
  *(_DWORD *)&v37[8] = v30;
  v43.locatiouint64_t n = 0;
  v43.__int16 length = 0;
  CFDataReplaceBytes(v28, v43, (const UInt8 *)&v36, 16);
  BOOL v31 = NEPFKeySend(a1, a2, v28);
  CFRelease(v28);
  return v31;
}

BOOL NEPFKeySendDeleteAll(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a5 || !a6)
  {
    long long v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v29) = 0;
      long long v14 = "pfkey delete all, source/destination is NULL";
      long long v15 = v13;
      uint32_t v16 = 2;
      goto LABEL_18;
    }
    return 0;
  }
  int v8 = *(unsigned __int8 *)(a5 + 1);
  if (v8 != *(unsigned __int8 *)(a6 + 1))
  {
    char v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(unsigned __int8 *)(a5 + 1);
      int v19 = *(unsigned __int8 *)(a6 + 1);
      int v29 = 67109376;
      int v30 = v18;
      LOWORD(v31) = 1024;
      *(_DWORD *)((char *)&v31 + 2) = v19;
      long long v14 = "pfkey delete all, source IP family(%d) does not match destination IP family(%d)";
      long long v15 = v17;
      uint32_t v16 = 14;
      goto LABEL_18;
    }
    return 0;
  }
  if (v8 != 2)
  {
    if (v8 == 30)
    {
      char v12 = 0x80;
      goto LABEL_12;
    }
    int v26 = ne_log_obj();
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v27 = *(unsigned __int8 *)(a5 + 1);
    int v29 = 67109120;
    int v30 = v27;
    long long v14 = "pfkey delete all, invalid source IP family %d";
    long long v15 = v26;
    uint32_t v16 = 8;
LABEL_18:
    _os_log_error_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v29, v16);
    return 0;
  }
  char v12 = 32;
LABEL_12:
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  CFDataRef v21 = Mutable;
  uint32_t v22 = ne_log_obj();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    LOWORD(v29) = 0;
    _os_log_impl(&dword_19DDAF000, v22, OS_LOG_TYPE_INFO, "Sending PFKey delete all", (uint8_t *)&v29, 2u);
  }
  v33.locatiouint64_t n = CFDataGetLength(v21);
  v33.__int16 length = 5;
  NEPFKeySetSADBAddr(v21, v33, (const UInt8 *)a5, v12, 255);
  v34.locatiouint64_t n = CFDataGetLength(v21);
  v34.__int16 length = 6;
  NEPFKeySetSADBAddr(v21, v34, (const UInt8 *)a6, v12, 255);
  unsigned __int16 v23 = CFDataGetLength(v21) + 16;
  pid_t v24 = getpid();
  LOWORD(v29) = 1026;
  BYTE2(v29) = 0;
  HIBYTE(v29) = a3;
  int v30 = v23 >> 3;
  LODWORD(v31) = 0;
  HIDWORD(v31) = v24;
  v35.locatiouint64_t n = 0;
  v35.__int16 length = 0;
  CFDataReplaceBytes(v21, v35, (const UInt8 *)&v29, 16);
  BOOL v25 = NEPFKeySend(a1, a2, v21);
  CFRelease(v21);
  return v25;
}

BOOL NEPFKeySendGet(NSObject *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, char *a8)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v15 = ne_log_obj();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v17[0] = 67109120;
    v17[1] = bswap32(a7);
    _os_log_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_INFO, "Sending PFKey get for SPI %04X", (uint8_t *)v17, 8u);
  }
  return pfkey_send_x2(a1, a2, 5, a3, a5, a6, a7, a8);
}

BOOL NEPFKeySendRegister(NSObject *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 0;
  if (a3)
  {
    while (supported_map[v6] != a3)
    {
      if (++v6 == 3) {
        return 0;
      }
    }
    CFIndex v9 = (void *)ipsec_supported[v6];
    if (v9)
    {
      free(v9);
      ipsec_supported[v6] = 0;
    }
  }
  else
  {
    do
    {
      int v8 = *(void **)((char *)ipsec_supported + v6);
      if (v8)
      {
        free(v8);
        *(uint64_t *)((char *)ipsec_supported + v6) = 0;
      }
      v6 += 8;
    }
    while (v6 != 24);
  }

  return pfkey_send_x3(a1, a2, 7, a3);
}

BOOL pfkey_send_x3(NSObject *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3 == 11)
  {
    if (a4 >= 2)
    {
      int v8 = ne_log_obj();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v17 = 67109120;
        int v18 = a4;
        CFIndex v9 = "pfkey sadb promisc failed, satype %u";
        uint64_t v10 = v8;
        uint32_t v11 = 8;
LABEL_13:
        _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v17, v11);
        return 0;
      }
      return 0;
    }
  }
  else if (a4 > 9 || ((1 << a4) & 0x20D) == 0)
  {
    long long v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = 67109376;
      int v18 = a3;
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = a4;
      CFIndex v9 = "pfkey %d, sa type %u";
      uint64_t v10 = v15;
      uint32_t v11 = 14;
      goto LABEL_13;
    }
    return 0;
  }
  CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  long long v13 = Mutable;
  LOBYTE(v17) = 2;
  *(_WORD *)((char *)&v17 + 1) = a3;
  HIBYTE(v17) = a4;
  int v18 = (unsigned __int16)(CFDataGetLength(Mutable) + 16) >> 3;
  LODWORD(v19) = 0;
  HIDWORD(v19) = getpid();
  v21.locatiouint64_t n = 0;
  v21.__int16 length = 0;
  CFDataReplaceBytes(v13, v21, (const UInt8 *)&v17, 16);
  BOOL v14 = NEPFKeySend(a1, a2, v13);
  CFRelease(v13);
  return v14;
}

uint64_t pfkey_recv_register(int a1)
{
  pid_t v2 = getpid();
  while (1)
  {
    int v3 = pfkey_recv(a1);
    if (!v3) {
      return 0xFFFFFFFFLL;
    }
    int v4 = v3;
    if (*((unsigned char *)v3 + 1) == 7 && *((_DWORD *)v3 + 3) == v2) {
      break;
    }
    free(v3);
  }
  unsigned __int16 v6 = 8 * v3[2];
  v3[2] = v6;
  uint64_t v7 = pfkey_set_supported((uint64_t)v3, v6 & 0xFFF8);
  free(v4);
  return v7;
}

unsigned __int16 *pfkey_recv(int a1)
{
  v7[0] = 0;
  v7[1] = 0;
  while (1)
  {
    unint64_t v2 = recv(a1, v7, 0x10uLL, 2);
    if ((v2 & 0x8000000000000000) == 0) {
      break;
    }
    if (*__error() != 4) {
      return 0;
    }
  }
  if (v2 <= 0xF)
  {
    recv(a1, v7, 0x10uLL, 0);
    return 0;
  }
  size_t v3 = 8 * WORD2(v7[0]);
  int v4 = (unsigned __int16 *)malloc_type_calloc(1uLL, v3, 0xD09F3777uLL);
  if (v4)
  {
    while (1)
    {
      ssize_t v5 = recv(a1, v4, v3, 0);
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
      if (*__error() != 4) {
        goto LABEL_13;
      }
    }
    if (v5 != v3 || v3 != 8 * v4[2])
    {
LABEL_13:
      free(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t pfkey_set_supported(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 4) != a2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v2 = a1 + a2;
  size_t v3 = (unsigned __int16 *)(a1 + 16);
  if (a2 >= 0x18)
  {
    do
    {
      uint64_t v5 = *v3;
      if (!*v3 || v2 < (unint64_t)v3 + v5) {
        break;
      }
      int v7 = v3[1];
      if ((v7 & 0xFFFE) != 0xE) {
        return 0xFFFFFFFFLL;
      }
      unsigned __int16 v8 = 8 * v5;
      *size_t v3 = v8;
      if (v7 == 14)
      {
        uint64_t v9 = 0;
      }
      else
      {
        if (v7 != 15) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v9 = 1;
      }
      uint64_t v10 = (void *)ipsec_supported[v9];
      if (v10)
      {
        free(v10);
        unsigned __int16 v8 = *v3;
      }
      uint32_t v11 = malloc_type_malloc(v8, 0x1D2A150uLL);
      ipsec_supported[v9] = (uint64_t)v11;
      if (!v11) {
        return 0xFFFFFFFFLL;
      }
      memcpy(v11, v3, *v3);
      size_t v3 = (unsigned __int16 *)((char *)v3 + *v3);
    }
    while ((unint64_t)v3 < v2 && v2 >= (unint64_t)(v3 + 4));
  }
  if (v3 == (unsigned __int16 *)v2) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

BOOL NEPFKeySendFlush(NSObject *a1, uint64_t a2, unsigned int a3)
{
  return pfkey_send_x3(a1, a2, 9, a3);
}

BOOL NEPFKeySendDump(NSObject *a1, uint64_t a2, unsigned int a3)
{
  return pfkey_send_x3(a1, a2, 10, a3);
}

BOOL NEPFKeySendPromiscToggle(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x3(a1, a2, 11, a3 != 0);
}

BOOL NEPFKeySendSPDAdd(NSObject *a1, uint64_t a2, uint64_t a3, const UInt8 *a4, unsigned int a5, uint64_t a6, const UInt8 *a7, unsigned int a8, char a9, __int16 a10, unsigned __int16 a11, char a12, __int16 a13, char a14, char a15, __int16 a16, const UInt8 *a17, const UInt8 *a18, unsigned int a19, char *a20,char *a21,char *a22,__int16 a23)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a3 || !a6)
  {
    CFRange v33 = ne_log_obj();
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    CFRange v34 = "pfkey spd add, source/destination is NULL";
    CFRange v35 = v33;
    uint32_t v36 = 2;
LABEL_27:
    _os_log_error_impl(&dword_19DDAF000, v35, OS_LOG_TYPE_ERROR, v34, buf, v36);
    return 0;
  }
  int v25 = *(unsigned __int8 *)(a3 + 1);
  if (v25 != *(unsigned __int8 *)(a6 + 1))
  {
    char v37 = ne_log_obj();
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v38 = *(unsigned __int8 *)(a3 + 1);
    int v39 = *(unsigned __int8 *)(a6 + 1);
    *(_DWORD *)long long buf = 67109376;
    LODWORD(v67) = v38;
    WORD2(v67) = 1024;
    *(_DWORD *)((char *)&v67 + 6) = v39;
    CFRange v34 = "pfkey spd add, source IP family(%d) does not match destination IP family(%d)";
    CFRange v35 = v37;
    uint32_t v36 = 14;
    goto LABEL_27;
  }
  if (v25 == 2)
  {
    unsigned int v32 = 32;
    goto LABEL_12;
  }
  if (v25 != 30)
  {
    CFRange v47 = ne_log_obj();
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v48 = *(unsigned __int8 *)(a3 + 1);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v67) = v48;
    CFRange v34 = "pfkey spd add, invalid source IP family %d";
    CFRange v35 = v47;
    uint32_t v36 = 8;
    goto LABEL_27;
  }
  unsigned int v32 = 128;
LABEL_12:
  if (v32 < a5 || v32 < a8)
  {
    CFRange v49 = ne_log_obj();
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109632;
      LODWORD(v67) = v32;
      WORD2(v67) = 1024;
      *(_DWORD *)((char *)&v67 + 6) = a5;
      WORD5(v67) = 1024;
      HIDWORD(v67) = a8;
      CFRange v34 = "pfkey spd add, plen %u prefs len %u prefd len %u";
      CFRange v35 = v49;
      uint32_t v36 = 20;
      goto LABEL_27;
    }
    return 0;
  }
  if ((unint64_t)a20 | (unint64_t)a21 | (unint64_t)a22) {
    BOOL v40 = 0;
  }
  else {
    BOOL v40 = a23 == 0;
  }
  int v41 = !v40;
  int v60 = v41;
  CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  CFRange v43 = Mutable;
  v44.locatiouint64_t n = CFDataGetLength(Mutable);
  __int16 v45 = v43;
  if (a4)
  {
    v44.__int16 length = 23;
    NEPFKeySetSADBAddr(v43, v44, (const UInt8 *)a3, a5, a9);
    v44.locatiouint64_t n = CFDataGetLength(v43);
    __int16 v45 = v43;
    v44.__int16 length = 24;
    uint64_t v46 = a4;
  }
  else
  {
    v44.__int16 length = 5;
    uint64_t v46 = (const UInt8 *)a3;
  }
  NEPFKeySetSADBAddr(v45, v44, v46, a5, a9);
  v52.locatiouint64_t n = CFDataGetLength(v43);
  CFRange v53 = v43;
  if (a7)
  {
    v52.__int16 length = 25;
    NEPFKeySetSADBAddr(v43, v52, (const UInt8 *)a6, a8, a9);
    v52.locatiouint64_t n = CFDataGetLength(v43);
    CFRange v53 = v43;
    v52.__int16 length = 26;
    CFRange v54 = a7;
  }
  else
  {
    v52.__int16 length = 6;
    CFRange v54 = (const UInt8 *)a6;
  }
  NEPFKeySetSADBAddr(v53, v52, v54, a8, a9);
  if (v60)
  {
    v71.locatiouint64_t n = CFDataGetLength(v43);
    v71.__int16 length = 22;
    NEPFKeySetSADBIPSecIF(v43, v71, a21, a22, a20, a23);
  }
  v72.locatiouint64_t n = CFDataGetLength(v43);
  *(_DWORD *)long long buf = 196612;
  long long v67 = 0uLL;
  uint64_t v68 = 0;
  int v69 = 0;
  v72.__int16 length = 0;
  CFDataReplaceBytes(v43, v72, buf, 32);
  CFIndex Length = CFDataGetLength(v43);
  int v56 = 0;
  if (a11 == 2)
  {
    int v56 = 8;
    if (a17)
    {
      if (a18) {
        int v56 = *a17 + *a18 + 8;
      }
    }
  }
  DWORD2(v67) = 0;
  *(_WORD *)long long buf = (v56 + 16) >> 3;
  *(_WORD *)&buf[2] = 18;
  *(void *)&long long v67 = a11;
  BYTE2(v67) = a12;
  v73.locatiouint64_t n = Length;
  v73.__int16 length = 0;
  CFDataReplaceBytes(v43, v73, buf, 16);
  if (a11 == 2)
  {
    *(_WORD *)newBytes = v56;
    __int16 v62 = a13;
    char v63 = a14;
    char v64 = a15;
    __int16 v65 = a16;
    v74.locatiouint64_t n = Length + 16;
    v74.__int16 length = 0;
    CFDataReplaceBytes(v43, v74, newBytes, 8);
    if (a17)
    {
      if (a18)
      {
        CFIndex v57 = Length + 24;
        v75.locatiouint64_t n = v57;
        v75.__int16 length = 0;
        CFDataReplaceBytes(v43, v75, a17, *a17);
        v76.locatiouint64_t n = v57 + *a17;
        v76.__int16 length = 0;
        CFDataReplaceBytes(v43, v76, a18, *a18);
      }
    }
  }
  unsigned __int16 v58 = CFDataGetLength(v43) + 16;
  pid_t v59 = getpid();
  *(_DWORD *)long long buf = 3586;
  LODWORD(v67) = v58 >> 3;
  *(void *)((char *)&v67 + 4) = __PAIR64__(v59, a19);
  v77.locatiouint64_t n = 0;
  v77.__int16 length = 0;
  CFDataReplaceBytes(v43, v77, buf, 16);
  BOOL v50 = NEPFKeySend(a1, a2, v43);
  CFRelease(v43);
  return v50;
}

BOOL NEPFKeySendSPDDelete(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x16u, a3);
}

BOOL pfkey_send_x5(NSObject *a1, uint64_t a2, UInt8 a3, int a4)
{
  CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable) {
    return 0;
  }
  CFDataRef v9 = Mutable;
  v14[1] = 0;
  v14[0] = 1179650;
  void v14[2] = a4;
  v14[3] = 0;
  CFDataAppendBytes(Mutable, (const UInt8 *)v14, 16);
  unsigned __int16 v10 = CFDataGetLength(v9) + 16;
  pid_t v11 = getpid();
  newBytes[0] = 2;
  newBytes[1] = a3;
  __int16 v16 = 0;
  __int16 v17 = v10 >> 3;
  __int16 v18 = 0;
  int v19 = 0;
  pid_t v20 = v11;
  v21.locatiouint64_t n = 0;
  v21.__int16 length = 0;
  CFDataReplaceBytes(v9, v21, newBytes, 16);
  BOOL v12 = NEPFKeySend(a1, a2, v9);
  CFRelease(v9);
  return v12;
}

BOOL NEPFKeySendSPDEnable(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x18u, a3);
}

BOOL NEPFKeySendSPDDisable(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x19u, a3);
}

BOOL NEPFKeySendSPDGet(NSObject *a1, uint64_t a2, int a3)
{
  return pfkey_send_x5(a1, a2, 0x10u, a3);
}

BOOL NEPFKeySendSPDFlush(NSObject *a1, uint64_t a2)
{
  return pfkey_send_x3(a1, a2, 19, 0);
}

BOOL NEPFKeySendSPDDump(NSObject *a1, uint64_t a2)
{
  return pfkey_send_x3(a1, a2, 19, 0);
}

NSObject *NEPFKeyOpen(NSObject *a1, void *a2, uint64_t a3, unsigned int a4)
{
  unsigned int PFKeySocket = a4;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  size_t v18 = 8;
  uint64_t v17 = 1769472;
  if ((a4 & 0x80000000) != 0)
  {
    unsigned int PFKeySocket = NEHelperGetPFKeySocket();
    if ((PFKeySocket & 0x80000000) != 0) {
      return 0;
    }
  }
  uint64_t v19 = 0;
  if (sysctlbyname("kern.ipc.maxsockbuf", &v19, &v18, &v17, 8uLL)) {
    int v8 = 233016;
  }
  else {
    int v8 = 1572864;
  }
  int v20 = v8;
  int v16 = 1;
  if (ioctl(PFKeySocket, 0x8004667EuLL, &v16) == -1)
  {
    unsigned __int16 v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v22 = PFKeySocket;
      _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "Failed to set socket %d to non-blocking mode", buf, 8u);
    }
    return 0;
  }
  setsockopt(PFKeySocket, 0xFFFF, 4097, &v20, 4u);
  setsockopt(PFKeySocket, 0xFFFF, 4098, &v20, 4u);
  if (v20 == 1572864) {
    sysctlbyname("kern.ipc.maxsockbuf", 0, 0, &v19, v18);
  }
  CFDataRef v9 = dispatch_source_create(MEMORY[0x1E4F14478], PFKeySocket, 0, a1);
  dispatch_set_context(v9, a2);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = __NEPFKeyOpen_block_invoke;
  handler[3] = &__block_descriptor_tmp_18953;
  unsigned int v15 = PFKeySocket;
  dispatch_source_set_cancel_handler(v9, handler);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = __NEPFKeyOpen_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_3;
  unsigned int v13 = PFKeySocket;
  void v12[4] = a2;
  v12[5] = a3;
  dispatch_source_set_event_handler(v9, v12);
  dispatch_resume(v9);
  return v9;
}

uint64_t __NEPFKeyOpen_block_invoke(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void __NEPFKeyOpen_block_invoke_2(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  v27[0] = v28;
  v27[1] = 0x2000;
  *(_OWORD *)&v11.msg_control = 0u;
  *(_OWORD *)&v11.msg_name = 0u;
  v11.msg_iov = (iovec *)v27;
  *(void *)&v11.msg_iovleuint64_t n = 1;
  while (1)
  {
    bzero(v28, 0x2000uLL);
    ssize_t v2 = recvmsg(*(_DWORD *)(a1 + 48), &v11, 0);
    ssize_t v3 = v2;
    if (v2 < 1) {
      break;
    }
    if ((unint64_t)v2 <= 0xF)
    {
      int v8 = ne_log_obj();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v3;
      uint64_t v5 = "Invalid PFKey message size: %zu";
LABEL_16:
      unsigned __int16 v6 = v8;
      uint32_t v7 = 12;
LABEL_17:
      _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, v5, buf, v7);
      return;
    }
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)long long buf = 0u;
    if (!pfkey_align((uint64_t)v28, (uint64_t)buf) && !pfkey_check((unsigned __int8 **)buf)) {
      (*(void (**)(uint8_t *, uint64_t, void))(a1 + 32))(buf, 30, *(void *)(a1 + 40));
    }
  }
  if ((v2 & 0x8000000000000000) == 0)
  {
    int v4 = ne_log_obj();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v5 = "PFKey socket received EOF";
    unsigned __int16 v6 = v4;
    uint32_t v7 = 2;
    goto LABEL_17;
  }
  int v9 = *__error();
  if (v9 != 35)
  {
    int v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned __int16 v10 = strerror(v9);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      uint64_t v5 = "PFKey socket received error: %s";
      goto LABEL_16;
    }
  }
}

uint64_t pfkey_align(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    *(void *)(a2 + 232) = 0;
    *(_OWORD *)(a2 + 216) = 0u;
    *(_OWORD *)(a2 + 200) = 0u;
    *(_OWORD *)(a2 + 184) = 0u;
    *(_OWORD *)(a2 + 168) = 0u;
    *(_OWORD *)(a2 + 152) = 0u;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 8) = 0u;
    *(void *)a2 = a1;
    unint64_t v2 = *(unsigned __int16 *)(a1 + 4);
    unint64_t v3 = a1 + 8 * v2;
    int v4 = (unsigned __int16 *)(a1 + 16);
    if (v2 >= 3)
    {
      while (1)
      {
        uint64_t v5 = &v4[4 * *v4];
        if (*v4) {
          BOOL v12 = v3 >= (unint64_t)v5;
        }
        else {
          BOOL v12 = 0;
        }
        if (!v12) {
          goto LABEL_4;
        }
        uint64_t v13 = v4[1];
        if (*(void *)(a2 + 8 * v13))
        {
          long long v16 = ne_log_obj();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            return 0xFFFFFFFFLL;
          }
          int v17 = v4[1];
          int v19 = 67109120;
          LODWORD(v20) = v17;
          uint32_t v7 = "duplicate extension type %u";
          goto LABEL_29;
        }
        if (v13 > 0x1D || ((1 << v13) & 0x3FFDFFFE) == 0) {
          break;
        }
        *(void *)(a2 + 8 * v13) = v4;
        BOOL v15 = (unint64_t)v5 < v3 && v3 >= (unint64_t)(v5 + 2);
        int v4 = v5;
        if (!v15) {
          goto LABEL_5;
        }
      }
      long long v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v18 = v4[1];
        int v19 = 67109120;
        LODWORD(v20) = v18;
        uint32_t v7 = "bad extension type %u";
LABEL_29:
        int v8 = v16;
        uint32_t v9 = 8;
        goto LABEL_31;
      }
      return 0xFFFFFFFFLL;
    }
LABEL_4:
    uint64_t v5 = v4;
LABEL_5:
    if (v5 == (unsigned __int16 *)v3) {
      return 0;
    }
    unsigned __int16 v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v19 = 134218240;
      long long v20 = v5;
      __int16 v21 = 2048;
      unint64_t v22 = v3;
      uint32_t v7 = "invalid pfkey message length p %p and ep %p";
      int v8 = v6;
      uint32_t v9 = 22;
LABEL_31:
      _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v19, v9);
    }
  }
  else
  {
    unsigned __int16 v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v19) = 0;
      uint32_t v7 = "msg/mhp is NULL";
      int v8 = v10;
      uint32_t v9 = 2;
      goto LABEL_31;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t pfkey_check(unsigned __int8 **a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (!a1 || (id v1 = *a1) == 0)
  {
    unsigned __int16 v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v28) = 0;
      uint64_t v5 = "msg/mhp is NULL";
      uint32_t v7 = v6;
      uint32_t v8 = 2;
LABEL_12:
      _os_log_error_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v28, v8);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  if (*v1 != 2)
  {
    unint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = *v1;
      int v28 = 67109120;
      int v29 = v9;
      uint64_t v5 = "invalid sadb version %u";
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  unsigned int v2 = v1[1];
  if (v2 >= 0x1B)
  {
    unint64_t v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = v1[1];
      int v28 = 67109120;
      int v29 = v4;
      uint64_t v5 = "invalid message type %u";
LABEL_11:
      uint32_t v7 = v3;
      uint32_t v8 = 8;
      goto LABEL_12;
    }
    return 0xFFFFFFFFLL;
  }
  switch(v1[3])
  {
    case 0u:
      if (v2 - 1 >= 6 && v2 != 8) {
        goto LABEL_30;
      }
      long long v14 = ne_log_obj();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      return 0xFFFFFFFFLL;
    case 1u:
      if (v2 == 11) {
        goto LABEL_30;
      }
      goto LABEL_38;
    case 2u:
    case 3u:
    case 9u:
      BOOL v11 = v2 > 0x13;
      int v12 = (1 << v2) & 0xDC000;
      if (!v11 && v12 != 0)
      {
        long long v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
LABEL_21:
        int v15 = v1[3];
        int v16 = v1[1];
        int v28 = 67109376;
        int v29 = v15;
        __int16 v30 = 1024;
        int v31 = v16;
        uint64_t v5 = "invalid sa type %u for message type %u";
LABEL_46:
        uint32_t v7 = v14;
        uint32_t v8 = 14;
        goto LABEL_12;
      }
LABEL_30:
      int v18 = a1[5];
      if (!v18) {
        return 0;
      }
      int v19 = a1[6];
      if (!v19) {
        return 0;
      }
      if (v18[4] != v19[4])
      {
        long long v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
        int v23 = v18[4];
        int v24 = v19[4];
        int v28 = 67109376;
        int v29 = v23;
        __int16 v30 = 1024;
        int v31 = v24;
        uint64_t v5 = "src address protocol %u != dst address proto %u";
        goto LABEL_46;
      }
      int v20 = v18[9];
      if (v20 != v19[9])
      {
        long long v14 = ne_log_obj();
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
        int v25 = v18[9];
        int v26 = v19[9];
        int v28 = 67109376;
        int v29 = v25;
        __int16 v30 = 1024;
        int v31 = v26;
        uint64_t v5 = "src address family %u != dst address family %u";
        goto LABEL_46;
      }
      uint64_t result = 0;
      if (v20 != 2 && v20 != 30)
      {
        unint64_t v3 = ne_log_obj();
        if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
          return 0xFFFFFFFFLL;
        }
        int v22 = v18[9];
        int v28 = 67109120;
        int v29 = v22;
        uint64_t v5 = "invalid address family %u";
        goto LABEL_11;
      }
      return result;
    case 5u:
    case 6u:
    case 7u:
    case 8u:
      unint64_t v3 = ne_log_obj();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v10 = v1[3];
      int v28 = 67109120;
      int v29 = v10;
      uint64_t v5 = "invalid sa type %u";
      goto LABEL_11;
    default:
LABEL_38:
      unint64_t v3 = ne_log_obj();
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        return 0xFFFFFFFFLL;
      }
      int v27 = v1[3];
      int v28 = 67109120;
      int v29 = v27;
      uint64_t v5 = "invalid sa type %u";
      goto LABEL_11;
  }
}

void NEPFKeyClose(NSObject *a1)
{
  if (a1)
  {
    dispatch_set_context(a1, 0);
    dispatch_source_cancel(a1);
    dispatch_release(a1);
  }
}

BOOL NEPFKeySendGetStats(NSObject *a1, uint64_t a2, unsigned int a3, unint64_t *a4, int a5, int a6, const UInt8 *a7, int a8)
{
  BOOL v8 = 0;
  if (a4 && a7 && a8)
  {
    CFDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Mutable)
    {
      int v18 = Mutable;
      CFIndex Length = CFDataGetLength(Mutable);
      if (a5)
      {
        v20.locatiouint64_t n = Length;
        unint64_t v21 = *a4;
        *(_DWORD *)&newBytes[4] = 0;
        *(_DWORD *)newBytes = 1310723;
        unint64_t v27 = v21;
        unint64_t v28 = 0;
        if (a5 != 1) {
          unint64_t v28 = a4[1];
        }
        v20.__int16 length = 0;
        CFDataReplaceBytes(v18, v20, newBytes, 24);
      }
      CFIndex v22 = CFDataGetLength(v18);
      LODWORD(v27) = 0;
      *(_WORD *)newBytes = (unsigned __int16)(40 * a8 + 16) >> 3;
      *(_WORD *)&UInt8 newBytes[2] = 21;
      *(_DWORD *)&newBytes[4] = a6;
      HIDWORD(v27) = a8;
      v29.locatiouint64_t n = v22;
      v29.__int16 length = 0;
      CFDataReplaceBytes(v18, v29, newBytes, 16);
      v30.locatiouint64_t n = v22 + 16;
      v30.__int16 length = 0;
      CFDataReplaceBytes(v18, v30, a7, 8 * ((5 * (_WORD)a8) & 0x1FFF));
      unsigned __int16 v23 = CFDataGetLength(v18) + 16;
      pid_t v24 = getpid();
      *(_DWORD *)newBytes = 5890;
      *(_WORD *)&newBytes[4] = v23 >> 3;
      *(_WORD *)&newBytes[6] = 0;
      unint64_t v27 = __PAIR64__(v24, a3);
      v31.locatiouint64_t n = 0;
      v31.__int16 length = 0;
      CFDataReplaceBytes(v18, v31, newBytes, 16);
      BOOL v8 = NEPFKeySend(a1, a2, v18);
      CFRelease(v18);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

__CFString *NEPolicyGetStringForLegacyNECPLevel(unsigned int a1)
{
  if (a1 > 0xA) {
    return @"Unknown";
  }
  else {
    return kNEPolicySessionNECPLegacyLevelsMapping[a1];
  }
}

NEPolicySession *NEPolicyCreateSession()
{
  return objc_alloc_init(NEPolicySession);
}

uint64_t NEPolicyCreateSessionWithSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = [NEPolicySession alloc];

  return (uint64_t)[(NEPolicySession *)v4 initWithSocket:a3];
}

const void **NEPolicySetSessionPriority(void *a1, const void *a2)
{
  uint64_t result = NEMapStringToInteger((const void **)&kNEPolicySessionPrioritiesMapping, a2);
  if (result)
  {
    int v4 = (int)result;
    uint64_t v5 = result;
    id v6 = a1;
    [v6 setPriority:v5];
    uint64_t v7 = [v6 priority];

    return (const void **)(v7 == v4);
  }
  return result;
}

uint64_t NEPolicySetDropPriorityLevel(CFTypeRef cf1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v18 = 0;
  if (cf1)
  {
    int v4 = &kNEPolicySessionNECPPrioritiesMapping;
    uint64_t v5 = @"Unknown";
    while (!CFEqual(cf1, v5))
    {
      id v6 = v4[2];
      v4 += 2;
      uint64_t v5 = v6;
      if (!v6)
      {
        int v18 = 0;
        goto LABEL_7;
      }
    }
    int v18 = *((_DWORD *)v4 + 2);
    if (v18) {
      goto LABEL_8;
    }
LABEL_7:
    if (!CFEqual(cf1, @"Unknown")) {
      return 0;
    }
  }
LABEL_8:
  if (sysctlbyname("net.necp.drop_all_level", 0, 0, &v18, 4uLL))
  {
    uint64_t v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v15 = v18;
      int v16 = __error();
      int v17 = strerror(*v16);
      *(_DWORD *)long long buf = 136315650;
      CFRange v20 = "net.necp.drop_all_level";
      __int16 v21 = 1024;
      int v22 = v15;
      __int16 v23 = 2080;
      pid_t v24 = v17;
      _os_log_error_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_ERROR, "Failed to set %s to %d: %s", buf, 0x1Cu);
    }
  }
  else
  {
    if (a2 != 1) {
      return 1;
    }
    uint64_t v7 = [MEMORY[0x1E4F1CB10] fileURLWithPath:@"/Library/Preferences/com.apple.networkextension.necp.plist" isDirectory:1];
    if (v18)
    {
      int v10 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfURL:v7];
      id v11 = (id)[v10 mutableCopy];
      [v11 setObject:cf1 forKeyedSubscript:@"drop_all_level"];
    }
    else
    {
      id v11 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      [v11 setObject:@"Unknown" forKeyedSubscript:@"drop_all_level"];
    }
    char v12 = [v11 writeToURL:v7 atomically:1];
    uint64_t v13 = ne_log_obj();
    long long v14 = v13;
    if (v12)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412290;
        CFRange v20 = (const char *)v7;
        _os_log_debug_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_DEBUG, "Saved NECP drop level to <%@>", buf, 0xCu);
      }

      uint64_t v8 = 1;
      goto LABEL_12;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      CFRange v20 = (const char *)v7;
      _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, "Failed to save NECP drop level to <%@>", buf, 0xCu);
    }
  }
  uint64_t v8 = 0;
LABEL_12:

  return v8;
}

uint64_t NEPolicyPersistDropAllFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = [MEMORY[0x1E4F1CB10] fileURLWithPath:@"/Library/Preferences/com.apple.networkextension.necp.plist" isDirectory:1];
  uint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfURL:v4];
  id v6 = (void *)[v5 mutableCopy];
  uint64_t v7 = v6;
  if (a2)
  {
    uint64_t v8 = [NSNumber numberWithUnsignedChar:a2];
    [v7 setObject:v8 forKeyedSubscript:a1];
  }
  else
  {
    [v6 removeObjectForKey:a1];
  }
  char v9 = [v7 writeToURL:v4 atomically:1];
  int v10 = ne_log_obj();
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 138412290;
      int v15 = v4;
      _os_log_debug_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEBUG, "Saved drop-all feature to <%@>", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v12 = 1;
  }
  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412290;
      int v15 = v4;
      _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, "Failed to save drop-all feature to <%@>", (uint8_t *)&v14, 0xCu);
    }
    uint64_t v12 = 0;
  }

  return v12;
}

BOOL NEPolicySetLayer2DefaultDrop(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  BOOL v7 = a1 != 0;
  int v1 = sysctlbyname("kern.skywalk.netif.default_drop", 0, 0, &v7, 4uLL);
  if (v1)
  {
    unsigned int v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      BOOL v4 = v7;
      uint64_t v5 = __error();
      id v6 = strerror(*v5);
      *(_DWORD *)long long buf = 136315650;
      char v9 = "kern.skywalk.netif.default_drop";
      __int16 v10 = 1024;
      BOOL v11 = v4;
      __int16 v12 = 2080;
      uint64_t v13 = v6;
      _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, "Failed to set %s to %d: %s", buf, 0x1Cu);
    }
  }
  return v1 == 0;
}

uint64_t NEPolicyLockSessionToProcess(void *a1)
{
  return [a1 lockSessionToCurrentProcess];
}

uint64_t NEPolicyRegisterService(void *a1, uint64_t a2)
{
  unint64_t v3 = (objc_class *)MEMORY[0x1E4F29128];
  id v4 = a1;
  uint64_t v5 = (void *)[[v3 alloc] initWithUUIDBytes:a2];
  uint64_t v6 = [v4 registerServiceUUID:v5];

  return v6;
}

uint64_t NEPolicyUnregisterService(void *a1, uint64_t a2)
{
  unint64_t v3 = (objc_class *)MEMORY[0x1E4F29128];
  id v4 = a1;
  uint64_t v5 = (void *)[[v3 alloc] initWithUUIDBytes:a2];
  uint64_t v6 = [v4 unregisterServiceUUID:v5];

  return v6;
}

uint64_t NEPolicyAdd(void *a1, unsigned int a2, const __CFArray *a3, const __CFDictionary *a4)
{
  uint64_t v4 = 0;
  if (a1 && a3 && a4)
  {
    BOOL v7 = a1;
    uint64_t v8 = [MEMORY[0x1E4F1CA48] array];
    CFNumberRef Value = CFDictionaryGetValue(a4, @"Result");
    uint64_t v4 = 0;
    switch(NEMapStringToInteger((const void **)&kNEPolicyResultsMapping, Value))
    {
      case 1u:
        uint64_t v10 = +[NEPolicyResult pass];
        goto LABEL_56;
      case 2u:
        HIDWORD(valuePtr) = 0;
        CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(a4, @"SkipOrder");
        if (v11)
        {
          CFNumberGetValue(v11, kCFNumberIntType, (char *)&valuePtr + 4);
          uint64_t v12 = HIDWORD(valuePtr);
        }
        else
        {
          uint64_t v12 = 0;
        }
        uint64_t v10 = +[NEPolicyResult skipWithOrder:v12];
        goto LABEL_56;
      case 3u:
        uint64_t v10 = +[NEPolicyResult drop];
        goto LABEL_56;
      case 4u:
        CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a4, @"FlowDivertControlUnit");
        if (!v13) {
          goto LABEL_201;
        }
        HIDWORD(valuePtr) = 0;
        if (!CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4)) {
          goto LABEL_49;
        }
        uint64_t v10 = +[NEPolicyResult divertSocketToControlUnit:HIDWORD(valuePtr)];
        goto LABEL_56;
      case 5u:
        uint64_t v14 = CFDictionaryGetValue(a4, @"ScopedInterface");
        if (!v14) {
          goto LABEL_201;
        }
        uint64_t v10 = +[NEPolicyResult scopeSocketToInterfaceName:v14];
        goto LABEL_56;
      case 6u:
        int v15 = CFDictionaryGetValue(a4, @"TunnelSecondaryResult");
        if (v15)
        {
          uint64_t v16 = v15;
          int v17 = &kNEPolicySecondaryResultsMapping;
          int v18 = @"Pass";
          while (!CFEqual(v16, v18))
          {
            int v19 = v17[2];
            v17 += 2;
            int v18 = v19;
            if (!v19)
            {
              uint64_t v20 = 0;
              goto LABEL_54;
            }
          }
          uint64_t v20 = *((unsigned int *)v17 + 2);
        }
        else
        {
          uint64_t v20 = 2;
        }
LABEL_54:
        CFRange v53 = CFDictionaryGetValue(a4, @"TunnelInterface");
        if (v53)
        {
          uint64_t v10 = +[NEPolicyResult tunnelIPToInterfaceName:v53 secondaryResultType:v20];
LABEL_56:
          uint64_t v4 = v10;
LABEL_57:
          if (v4)
          {
            CFAllocatorRef alloca = (CFAllocatorRef)v4;
            unsigned int v128 = a2;
            uint64_t v130 = v7;
            CFArrayRef v54 = a3;
            CFIndex Count = CFArrayGetCount(a3);
            if (Count >= 1)
            {
              CFIndex v56 = Count;
              CFIndex v57 = 0;
              CFAllocatorRef v132 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              char v124 = v8;
              do
              {
                CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v54, v57);
                if (ValueAtIndex)
                {
                  CFDictionaryRef v59 = ValueAtIndex;
                  int v60 = CFDictionaryGetValue(ValueAtIndex, @"ConditionType");
                  unsigned __int8 v61 = NEMapStringToInteger((const void **)&kNEPolicyConditionsMapping, v60);
                  __int16 v62 = 0;
                  switch(v61)
                  {
                    case 1u:
                      CFUUIDRef v75 = (const __CFUUID *)CFDictionaryGetValue(v59, @"ApplicationUUID");
                      if (v75)
                      {
                        CFRange v76 = (__CFString *)CFUUIDCreateString(v132, v75);
                        CFRange v77 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v76];

                        uint64_t v78 = +[NEPolicyCondition effectiveApplication:v77];
                        goto LABEL_78;
                      }
                      break;
                    case 2u:
                      CFUUIDRef v79 = (const __CFUUID *)CFDictionaryGetValue(v59, @"RealApplicationUUID");
                      if (v79)
                      {
                        __int16 v80 = (__CFString *)CFUUIDCreateString(v132, v79);
                        CFRange v77 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v80];

                        uint64_t v78 = +[NEPolicyCondition realApplication:v77];
LABEL_78:
                        __int16 v62 = (void *)v78;

                        if (v62) {
                          goto LABEL_192;
                        }
                      }
                      break;
                    case 3u:
                      HIDWORD(valuePtr) = 0;
                      CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(v59, @"PID");
                      if (!v81 || !CFNumberGetValue(v81, kCFNumberIntType, (char *)&valuePtr + 4)) {
                        goto LABEL_180;
                      }
                      uint64_t v82 = +[NEPolicyCondition effectivePID:HIDWORD(valuePtr)];
                      goto LABEL_191;
                    case 4u:
                      HIDWORD(valuePtr) = 0;
                      CFNumberRef v83 = (const __CFNumber *)CFDictionaryGetValue(v59, @"UID");
                      if (!v83 || !CFNumberGetValue(v83, kCFNumberIntType, (char *)&valuePtr + 4)) {
                        goto LABEL_180;
                      }
                      uint64_t v82 = +[NEPolicyCondition uid:HIDWORD(valuePtr)];
                      goto LABEL_191;
                    case 5u:
                      long long v84 = CFDictionaryGetValue(v59, @"AccountID");
                      if (!v84) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition accountIdentifier:v84];
                      goto LABEL_191;
                    case 6u:
                      uint64_t v85 = CFDictionaryGetValue(v59, @"Domain");
                      if (!v85) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition domain:v85];
                      goto LABEL_191;
                    case 7u:
                      uint64_t v82 = +[NEPolicyCondition allInterfaces];
                      goto LABEL_191;
                    case 8u:
                      uint64_t v86 = CFDictionaryGetValue(v59, @"InterfaceName");
                      if (!v86) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition scopedInterface:v86];
                      goto LABEL_191;
                    case 9u:
                      uint64_t v87 = NEGetIntFromDictionary(v59, @"StartTrafficClass", 0);
                      uint64_t v88 = NEGetIntFromDictionary(v59, @"EndTrafficClass", 0);
                      if (CFDictionaryContainsKey(v59, @"StartTrafficClass")
                        && CFDictionaryContainsKey(v59, @"EndTrafficClass"))
                      {
                        __int16 v62 = +[NEPolicyCondition trafficClassStart:v87 end:v88];
                      }
                      else
                      {
                        __int16 v62 = 0;
                      }
                      goto LABEL_161;
                    case 0xAu:
                    case 0x13u:
LABEL_161:
                      int v112 = NEGetIntFromDictionary(v59, @"ProtocolIndex", 0);
                      if (!v112) {
                        goto LABEL_181;
                      }
                      if (v61 == 10) {
                        +[NEPolicyCondition ipProtocol:(unsigned __int16)v112];
                      }
                      else {
                      uint64_t v113 = +[NEPolicyCondition flowIPProtocol:(unsigned __int16)v112];
                      }

                      __int16 v62 = (void *)v113;
                      if (!v113) {
                        break;
                      }
                      goto LABEL_192;
                    case 0xBu:
                    case 0xDu:
                    case 0x14u:
                    case 0x16u:
                      char v63 = CFDictionaryGetValue(v59, @"Address");
                      char v64 = CFDictionaryGetValue(v59, @"Port");
                      CFNumberRef v65 = (const __CFNumber *)CFDictionaryGetValue(v59, @"SubnetPrefix");
                      if (!v63) {
                        break;
                      }
                      if (v65)
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v65, kCFNumberIntType, (char *)&valuePtr + 4)) {
                          unsigned __int8 v66 = BYTE4(valuePtr);
                        }
                        else {
                          unsigned __int8 v66 = -1;
                        }
                        if (v64)
                        {
LABEL_68:
                          CFStringRef v67 = CFStringCreateWithFormat(v132, 0, @"%@", v64);
                          goto LABEL_131;
                        }
                      }
                      else
                      {
                        unsigned __int8 v66 = -1;
                        if (v64) {
                          goto LABEL_68;
                        }
                      }
                      CFStringRef v67 = @"0";
LABEL_131:
                      id v104 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v63 port:v67];
                      __int16 v62 = 0;
                      if (v61 > 0x13u)
                      {
                        if (v61 == 20)
                        {
                          uint64_t v105 = +[NEPolicyCondition flowLocalAddress:v104 prefix:v66];
                        }
                        else
                        {
                          if (v61 != 22) {
                            goto LABEL_170;
                          }
                          uint64_t v105 = +[NEPolicyCondition flowRemoteAddress:v104 prefix:v66];
                        }
                      }
                      else if (v61 == 11)
                      {
                        uint64_t v105 = +[NEPolicyCondition localAddress:v104 prefix:v66];
                      }
                      else
                      {
                        if (v61 != 13) {
                          goto LABEL_170;
                        }
                        uint64_t v105 = +[NEPolicyCondition remoteAddress:v104 prefix:v66];
                      }
                      __int16 v62 = (void *)v105;
LABEL_170:
                      if (v67) {
                        CFRelease(v67);
                      }

                      if (!v62) {
                        break;
                      }
                      goto LABEL_192;
                    case 0xCu:
                    case 0xEu:
                    case 0x15u:
                    case 0x17u:
                      uint64_t v68 = CFDictionaryGetValue(v59, @"StartAddress");
                      int v69 = CFDictionaryGetValue(v59, @"StartPort");
                      uint64_t v70 = CFDictionaryGetValue(v59, @"EndAddress");
                      CFRange v71 = CFDictionaryGetValue(v59, @"EndPort");
                      if (!v68 || !v70) {
                        break;
                      }
                      CFRange v72 = v71;
                      if (v69)
                      {
                        CFStringRef v73 = CFStringCreateWithFormat(v132, 0, @"%@", v69);
                        if (v72) {
                          goto LABEL_73;
                        }
                      }
                      else
                      {
                        CFStringRef v73 = @"0";
                        if (v71)
                        {
LABEL_73:
                          CFStringRef v74 = CFStringCreateWithFormat(v132, 0, @"%@", v72);
                          goto LABEL_140;
                        }
                      }
                      CFStringRef v74 = @"0";
LABEL_140:
                      uint64_t v106 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v68 port:v73];
                      uint64_t v107 = [MEMORY[0x1E4F38BC8] endpointWithHostname:v70 port:v74];
                      __int16 v62 = 0;
                      if (v61 > 0x14u)
                      {
                        if (v61 != 21)
                        {
                          CFArrayRef v54 = a3;
                          if (v61 == 23)
                          {
                            uint64_t v108 = +[NEPolicyCondition flowRemoteAddressStart:v106 end:v107];
LABEL_147:
                            __int16 v62 = (void *)v108;
                          }
LABEL_148:
                          if (!v73) {
                            goto LABEL_150;
                          }
LABEL_149:
                          CFRelease(v73);
                          goto LABEL_150;
                        }
                        uint64_t v114 = +[NEPolicyCondition flowLocalAddressStart:v106 end:v107];
                      }
                      else
                      {
                        if (v61 != 12)
                        {
                          CFArrayRef v54 = a3;
                          if (v61 == 14)
                          {
                            uint64_t v108 = +[NEPolicyCondition remoteAddressStart:v106 end:v107];
                            goto LABEL_147;
                          }
                          goto LABEL_148;
                        }
                        uint64_t v114 = +[NEPolicyCondition localAddressStart:v106 end:v107];
                      }
                      __int16 v62 = (void *)v114;
                      CFArrayRef v54 = a3;
                      if (v73) {
                        goto LABEL_149;
                      }
LABEL_150:
                      if (v74) {
                        CFRelease(v74);
                      }

                      uint64_t v8 = v124;
                      if (v62)
                      {
LABEL_192:
                        CFBooleanRef v119 = (const __CFBoolean *)CFDictionaryGetValue(v59, @"IsNegative");
                        if (v119 && CFBooleanGetValue(v119)) {
                          [v62 setNegative:1];
                        }
                        CFBooleanRef v120 = (const __CFBoolean *)CFDictionaryGetValue(v59, @"ExactMatch");
                        if (v120 && CFBooleanGetValue(v120)) {
                          [v62 setExactMatch:1];
                        }
                        [v8 addObject:v62];
                      }
                      break;
                    case 0xFu:
                      uint64_t v82 = +[NEPolicyCondition entitlement];
                      goto LABEL_191;
                    case 0x10u:
                      __int16 v89 = CFDictionaryGetValue(v59, @"NetAgentDomain");
                      unsigned int v90 = CFDictionaryGetValue(v59, @"NetAgentType");
                      if (!v89 || !v90) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition requiredAgentDomain:v89 agentType:v90];
                      goto LABEL_191;
                    case 0x11u:
                      uint64_t v82 = +[NEPolicyCondition usesModernNetworkAPI];
                      goto LABEL_191;
                    case 0x18u:
                      int v91 = NEGetIntFromDictionary(v59, @"ClientFlags", 0);
                      if (!v91) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition clientFlags:(unsigned __int16)v91];
                      goto LABEL_191;
                    case 0x19u:
                      uint64_t v82 = +[NEPolicyCondition flowLocalAddressEmpty];
                      goto LABEL_191;
                    case 0x1Au:
                      uint64_t v82 = +[NEPolicyCondition flowRemoteAddressEmpty];
                      goto LABEL_191;
                    case 0x1Bu:
                      uint64_t v82 = +[NEPolicyCondition platformBinary];
                      goto LABEL_191;
                    case 0x1Cu:
                      CFNumberRef v92 = (const __CFNumber *)CFDictionaryGetValue(v59, @"Platform");
                      if (v92 && (v93 = v92, uint64_t v94 = CFNUMBER_TYPE, CFGetTypeID(v92) == v94))
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v93, kCFNumberIntType, (char *)&valuePtr + 4)) {
                          uint64_t v95 = HIDWORD(valuePtr);
                        }
                        else {
                          uint64_t v95 = 0;
                        }
                      }
                      else
                      {
                        uint64_t v95 = 0;
                      }
                      CFNumberRef v109 = (const __CFNumber *)CFDictionaryGetValue(v59, @"SDKVersion");
                      CFNumberRef v110 = v109;
                      if (v109)
                      {
                        uint64_t v111 = CFNUMBER_TYPE;
                        if (CFGetTypeID(v109) == v111)
                        {
                          HIDWORD(valuePtr) = 0;
                          if (CFNumberGetValue(v110, kCFNumberIntType, (char *)&valuePtr + 4)) {
                            CFNumberRef v110 = (const __CFNumber *)HIDWORD(valuePtr);
                          }
                          else {
                            CFNumberRef v110 = 0;
                          }
                        }
                        else
                        {
                          CFNumberRef v110 = 0;
                        }
                      }
                      CFNumberRef v115 = (const __CFNumber *)CFDictionaryGetValue(v59, @"MinSDKVersion");
                      if (v115 && (CFNumberRef v116 = v115, v117 = CFNUMBER_TYPE, CFGetTypeID(v115) == v117))
                      {
                        HIDWORD(valuePtr) = 0;
                        if (CFNumberGetValue(v116, kCFNumberIntType, (char *)&valuePtr + 4)) {
                          uint64_t v118 = HIDWORD(valuePtr);
                        }
                        else {
                          uint64_t v118 = 0;
                        }
                      }
                      else
                      {
                        uint64_t v118 = 0;
                      }
                      CFArrayRef v54 = a3;
                      uint64_t v82 = +[NEPolicyCondition sdkVersion:v110 minSDKVersion:v118 platform:v95];
                      goto LABEL_191;
                    case 0x1Du:
                      CFTypeID v96 = CFDictionaryGetValue(v59, @"SigningIdentifier");
                      if (!v96) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition signingIdentifier:v96];
                      goto LABEL_191;
                    case 0x1Eu:
                      unsigned __int16 v97 = NEGetIntFromDictionary(v59, @"PacketFilterTags", 0);
                      if (!v97) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition packetFilterTags:v97];
                      goto LABEL_191;
                    case 0x25u:
                      unsigned __int16 v98 = NEGetIntFromDictionary(v59, @"Port", 0);
                      if (!v98) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition schemeUsingPort:v98];
                      goto LABEL_191;
                    case 0x27u:
                      uint64_t v82 = +[NEPolicyCondition hasSignedResult];
                      goto LABEL_191;
                    case 0x28u:
                      HIDWORD(valuePtr) = 0;
                      CFNumberRef v99 = (const __CFNumber *)CFDictionaryGetValue(v59, @"UID");
                      if (!v99 || !CFNumberGetValue(v99, kCFNumberIntType, (char *)&valuePtr + 4)) {
                        goto LABEL_180;
                      }
                      uint64_t v82 = +[NEPolicyCondition realUID:HIDWORD(valuePtr)];
                      goto LABEL_191;
                    case 0x2Au:
                      uint64_t v100 = CFDictionaryGetValue(v59, @"URL");
                      if (!v100) {
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition url:v100];
                      goto LABEL_191;
                    case 0x2Bu:
                      uint64_t valuePtr = 0;
                      unsigned int v134 = 0;
                      CFNumberRef v101 = (const __CFNumber *)CFDictionaryGetValue(v59, @"InterfaceFlags");
                      CFNumberRef v102 = (const __CFNumber *)CFDictionaryGetValue(v59, @"InterfaceEflags");
                      CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(v59, @"InterfaceXflags");
                      if (v101) {
                        CFNumberGetValue(v101, kCFNumberSInt32Type, (char *)&valuePtr + 4);
                      }
                      if (v102) {
                        CFNumberGetValue(v102, kCFNumberSInt32Type, &valuePtr);
                      }
                      if (v103)
                      {
                        CFNumberGetValue(v103, kCFNumberSInt32Type, &v134);
                      }
                      else if (!((unint64_t)v101 | (unint64_t)v102))
                      {
LABEL_180:
                        __int16 v62 = 0;
LABEL_181:
                        if (v62) {
                          goto LABEL_192;
                        }
                        break;
                      }
                      uint64_t v82 = +[NEPolicyCondition scopedInterfaceFlags:HIDWORD(valuePtr) eflags:valuePtr xflags:v134];
LABEL_191:
                      __int16 v62 = (void *)v82;
                      if (!v82) {
                        break;
                      }
                      goto LABEL_192;
                    default:
                      break;
                  }
                }
                ++v57;
              }
              while (v56 != v57);
            }
            char v121 = [[NEPolicy alloc] initWithOrder:v128 result:alloca conditions:v8];
            uint64_t v4 = [v130 addPolicy:v121 storeLocally:1];
          }
        }
        else
        {
LABEL_201:
          uint64_t v4 = 0;
        }
LABEL_202:

        break;
      case 7u:
        CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a4, @"FilterControlUnit");
        if (!v21) {
          goto LABEL_201;
        }
        HIDWORD(valuePtr) = 0;
        if (CFNumberGetValue(v21, kCFNumberIntType, (char *)&valuePtr + 4))
        {
          uint64_t v10 = +[NEPolicyResult filterWithControlUnit:HIDWORD(valuePtr)];
          goto LABEL_56;
        }
LABEL_49:
        uint64_t v4 = 0;
        goto LABEL_57;
      case 8u:
        CFUUIDRef v22 = (const __CFUUID *)CFDictionaryGetValue(a4, @"NetAgentUUID");
        if (!v22) {
          goto LABEL_201;
        }
        __int16 v23 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v22);
        pid_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v23];

        uint64_t v25 = +[NEPolicyResult netAgentUUID:v24];
        goto LABEL_48;
      case 9u:
        unsigned int v127 = a2;
        uint64_t v129 = v7;
        char v123 = v8;
        int v26 = [MEMORY[0x1E4F1CA48] array];
        CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue(a4, @"RouteRules");
        if (v27)
        {
          CFArrayRef v28 = v27;
          CFIndex v29 = CFArrayGetCount(v27);
          if (v29 >= 1)
          {
            CFIndex v30 = v29;
            CFIndex v31 = 0;
            uint64_t v32 = @"Action";
            CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFAllocatorRef v131 = v28;
            do
            {
              CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, v31);
              if (v33)
              {
                CFDictionaryRef v34 = v33;
                CFRange v35 = CFDictionaryGetValue(v33, v32);
                unsigned __int8 v36 = NEMapStringToInteger((const void **)&kNEPolicyRouteRuleActionMapping, v35);
                char v37 = CFDictionaryGetValue(v34, @"Type");
                unsigned __int8 v38 = NEMapStringToInteger((const void **)&kNEPolicyRouteRuleTypeMapping, v37);
                int v39 = CFDictionaryGetValue(v34, @"Interface");
                if (v36)
                {
                  BOOL v40 = v39;
                  if (v36 - 5 <= 1
                    && (CFUUIDRef v41 = (const __CFUUID *)CFDictionaryGetValue(a4, @"NetAgentUUID")) != 0)
                  {
                    CFIndex v42 = v30;
                    CFRange v43 = v32;
                    CFRange v44 = v26;
                    __int16 v45 = (__CFString *)CFUUIDCreateString(alloc, v41);
                    uint64_t v46 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v45];

                    int v26 = v44;
                    uint64_t v32 = v43;
                    CFIndex v30 = v42;
                    CFArrayRef v28 = v131;
                  }
                  else
                  {
                    uint64_t v46 = 0;
                  }
                  if (v40) {
                    +[NEPolicyRouteRule routeRuleWithAction:v36 forInterfaceName:v40];
                  }
                  else {
                  CFRange v47 = +[NEPolicyRouteRule routeRuleWithAction:v36 forType:v38];
                  }
                  int v48 = v47;
                  if (v47)
                  {
                    [v47 setNetworkAgentUUID:v46];
                    [v26 addObject:v48];
                  }
                }
              }
              ++v31;
            }
            while (v30 != v31);
          }
        }
        uint64_t v4 = +[NEPolicyResult routeRules:v26];

        uint64_t v8 = v123;
        BOOL v7 = v129;
        a2 = v127;
        goto LABEL_57;
      case 0xBu:
        CFUUIDRef v49 = (const __CFUUID *)CFDictionaryGetValue(a4, @"NetAgentUUID");
        if (!v49) {
          goto LABEL_201;
        }
        BOOL v50 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v49);
        pid_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v50];

        uint64_t v25 = +[NEPolicyResult scopedNetworkAgent:v24];
        goto LABEL_48;
      case 0xCu:
        uint64_t v10 = +[NEPolicyResult scopeToDirectInterface];
        goto LABEL_56;
      case 0xDu:
        uint64_t v10 = +[NEPolicyResult allowUnentitled];
        goto LABEL_56;
      case 0xEu:
        uint64_t v10 = +[NEPolicyResult prohibitFilters];
        goto LABEL_56;
      case 0xFu:
        CFUUIDRef v51 = (const __CFUUID *)CFDictionaryGetValue(a4, @"NetAgentUUID");
        if (!v51) {
          goto LABEL_201;
        }
        CFRange v52 = (__CFString *)CFUUIDCreateString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v51);
        pid_t v24 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDString:v52];

        uint64_t v25 = +[NEPolicyResult removeNetworkAgentUUID:v24];
LABEL_48:
        uint64_t v4 = v25;

        goto LABEL_57;
      default:
        goto LABEL_202;
    }
  }
  return v4;
}

uint64_t NEPolicyCopy()
{
  return 0;
}

uint64_t NEPolicyDelete(void *a1, unsigned int a2)
{
  return [a1 removePolicyWithID:a2];
}

uint64_t NEPolicyDeleteAll(void *a1)
{
  return [a1 removeAllPolicies];
}

uint64_t NEPolicyCopyIDs()
{
  return 0;
}

uint64_t NEPolicyApply(void *a1)
{
  return [a1 apply];
}

uint64_t NEPolicySetDispatchQueue()
{
  return 0;
}

void sub_19DF0BF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF0C834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF0CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF0DF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF0F358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_19DF0F7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF0FF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_19DF10354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF17B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DF1A148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20686(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20687(uint64_t a1)
{
}

__CFString *convert_error_to_string(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 domain];
  int v3 = [v2 isEqualToString:@"NEConfigurationErrorDomain"];

  if (v3)
  {
    uint64_t v4 = @"configuration is corrupted";
    switch([v1 code])
    {
      case 1:
        break;
      case 2:
        uint64_t v5 = NSString;
        uint64_t v6 = [v1 localizedDescription];
        uint64_t v4 = [v5 stringWithFormat:@"configuration is invalid: %@", v6];

        break;
      case 3:
        uint64_t v4 = @"configuration type is wrong";
        break;
      case 4:
        uint64_t v4 = @"configuration owner application is wrong";
        break;
      case 5:
        uint64_t v4 = @"configuration is stale";
        break;
      case 6:
        uint64_t v4 = @"failed to write configuration to disk";
        break;
      case 7:
        uint64_t v4 = @"configuration does not exist";
        break;
      case 8:
        uint64_t v4 = @"invalid configuration operation request";
        break;
      case 9:
        uint64_t v4 = @"configuration is unchanged";
        break;
      case 10:
        uint64_t v4 = @"permission denied";
        break;
      case 11:
        uint64_t v4 = @"IPC failed";
        break;
      case 18:
        uint64_t v4 = @"file not found";
        break;
      case 21:
        uint64_t v4 = @"MDM required";
        break;
      default:
        uint64_t v4 = @"<unknown>";
        break;
    }
  }
  else
  {
    uint64_t v4 = [v1 localizedDescription];
  }

  return v4;
}

void sub_19DF1D02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DF1F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19DF2505C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_19DF26864(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__21734(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__21735(uint64_t a1)
{
}

void sub_19DF29514(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_19DF29B18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF29BFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void NEResourcesSetPreferredLanguages(void *a1)
{
  id v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&languageLock);
  uint64_t v2 = (void *)g_preferredLanguages;
  g_preferredLanguages = (uint64_t)v1;

  os_unfair_lock_unlock((os_unfair_lock_t)&languageLock);
}

id NEResourcesCopyPreferredLanguages()
{
  os_unfair_lock_lock((os_unfair_lock_t)&languageLock);
  dispatch_queue_t v0 = (void *)[(id)g_preferredLanguages copy];
  os_unfair_lock_unlock((os_unfair_lock_t)&languageLock);

  return v0;
}

id NEResourcesCopyDevicePreferredLocalizations()
{
  dispatch_queue_t v0 = (void *)CFPreferencesCopyValue(@"AppleLanguages", (CFStringRef)*MEMORY[0x1E4F1D3B8], @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v0 || (NEResourcesCopyPreferredLanguages(), (dispatch_queue_t v0 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v1 = get_nsbundle();
    uint64_t v2 = (void *)MEMORY[0x1E4F28B50];
    uint64_t v3 = [v1 localizations];
    uint64_t v4 = [v2 preferredLocalizationsFromArray:v3 forPreferences:v0];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id get_nsbundle()
{
  if (get_nsbundle_onceToken != -1) {
    dispatch_once(&get_nsbundle_onceToken, &__block_literal_global_22346);
  }
  dispatch_queue_t v0 = (void *)get_nsbundle_bundle;

  return v0;
}

uint64_t __get_nsbundle_block_invoke()
{
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F28B50]) initWithPath:@"/System/Library/Frameworks/NetworkExtension.framework"];
  uint64_t v1 = get_nsbundle_bundle;
  get_nsbundle_bundle = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

CFTypeRef NEResourcesCopyTrustedApplicationPaths()
{
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFTypeRef result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, @"TrustedExecutables");
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void __get_bundle_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v1 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)"/System/Library/Frameworks/NetworkExtension.framework", 53, 0);
  get_bundle_bundle = (uint64_t)CFBundleCreate(v0, v1);

  CFRelease(v1);
}

CFURLRef NEResourcesCopyVPNIconURL()
{
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFAllocatorRef v0 = (__CFBundle *)get_bundle_bundle;

  return CFBundleCopyResourceURL(v0, @"NetworkConnect.icns", 0, 0);
}

CFURLRef NEResourcesCopyNetworkPrivacyIconURL()
{
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFAllocatorRef v0 = (__CFBundle *)get_bundle_bundle;

  return CFBundleCopyResourceURL(v0, @"LocalNetworkPrivacy.png", 0, 0);
}

CFTypeRef NEResourcesCopyContentFilterExclusionList()
{
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFTypeRef result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, @"ContentFilterExclusionList");
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

CFTypeRef NEResourcesCopyContentFilterDefaultDropExclusionList()
{
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFTypeRef result = CFBundleGetValueForInfoDictionaryKey((CFBundleRef)get_bundle_bundle, @"ContentFilterDefaultDropExclusionList");
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

id NEResourcesCopyLocalizedNSString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = get_nsbundle();
  uint64_t v6 = NEResourcesCopyPreferredLanguages();
  BOOL v7 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v8 = [v5 localizations];
  char v9 = [v7 preferredLocalizationsFromArray:v8 forPreferences:v6];

  [v9 firstObject];
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  uint64_t v10 = (void *)CFBundleCopyLocalizedStringForLocalization();

  return v10;
}

id NEResourcesCopyLocalizedFormatString(uint64_t a1, void *a2)
{
  return NEResourcesCopyLocalizedNSString(a2, a2);
}

id NEResourcesCopyDeviceLocalizedNSString(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = get_nsbundle();
  uint64_t v6 = (void *)CFPreferencesCopyValue(@"AppleLanguages", (CFStringRef)*MEMORY[0x1E4F1D3B8], @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  BOOL v7 = (void *)MEMORY[0x1E4F28B50];
  uint64_t v8 = [v5 localizations];
  char v9 = [v7 preferredLocalizationsFromArray:v8 forPreferences:v6];

  [v9 firstObject];
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  uint64_t v10 = (void *)CFBundleCopyLocalizedStringForLocalization();

  return v10;
}

id NEResourcesCopyDeviceLocalizedFormatString(uint64_t a1, void *a2)
{
  return NEResourcesCopyDeviceLocalizedNSString(a2, a2);
}

CFURLRef NEResourcesCopyAppTrackingDomainsPath()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFURLRef result = CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, @"apptrackingdomains.json", 0, 0);
  if (result)
  {
    CFURLRef v1 = result;
    int v2 = CFURLGetFileSystemRepresentation(result, 1u, buffer, 1024);
    CFRelease(v1);
    if (v2) {
      return (const __CFURL *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)buffer, 0x600u);
    }
    else {
      return 0;
    }
  }
  return result;
}

CFURLRef NEResourcesCopyTestAppTrackingDomainsPath()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (get_bundle_initialized != -1) {
    dispatch_once(&get_bundle_initialized, &__block_literal_global_30);
  }
  CFURLRef result = CFBundleCopyResourceURL((CFBundleRef)get_bundle_bundle, @"testapptrackingdomains.json", 0, 0);
  if (result)
  {
    CFURLRef v1 = result;
    int v2 = CFURLGetFileSystemRepresentation(result, 1u, buffer, 1024);
    CFRelease(v1);
    if (v2) {
      return (const __CFURL *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)buffer, 0x600u);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_19DF2DE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19DF2E26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t symptomReporterSuccessfullyLoaded()
{
  if (symptomReporterSuccessfullyLoaded_symbolLoadOnce != -1) {
    dispatch_once(&symptomReporterSuccessfullyLoaded_symbolLoadOnce, &__block_literal_global_22427);
  }
  return symptomReporterSuccessfullyLoaded_symbolsLoaded;
}

void __symptomReporterSuccessfullyLoaded_block_invoke()
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = dlopen("/System/Library/PrivateFrameworks/SymptomReporter.framework/SymptomReporter", 6);
  CFURLRef v1 = getenv("DYLD_IMAGE_SUFFIX");
  int v2 = v1;
  id v3 = "out";
  if (v0 || !v1) {
    goto LABEL_16;
  }
  *(void *)__path = 0;
  BOOL v4 = asprintf((char **)__path, "%s%s", "/System/Library/PrivateFrameworks/SymptomReporter.framework/SymptomReporter", v1) <= 0;
  uint64_t v5 = *(void **)__path;
  BOOL v6 = v4 || *(void *)__path == 0;
  int v7 = !v6;
  if (v6)
  {
    CFAllocatorRef v0 = 0;
    if (!*(void *)__path) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  CFAllocatorRef v0 = dlopen(*(const char **)__path, 6);
  uint64_t v5 = *(void **)__path;
  if (*(void *)__path) {
LABEL_13:
  }
    free(v5);
LABEL_14:
  if (v7) {
    id v3 = "";
  }
LABEL_16:
  if (v0)
  {
    symptomReporterSuccessfullyLoaded_symbolsLoaded = 1;
    symptom_create = (uint64_t)dlsym(v0, "symptom_create");
    if (symptom_create)
    {
      symptom_set_qualifier = (uint64_t)dlsym(v0, "symptom_set_qualifier");
      if (symptom_set_qualifier)
      {
        symptom_send = (uint64_t)dlsym(v0, "symptom_send");
        if (symptom_send)
        {
          symptom_set_additional_qualifier = (uint64_t)dlsym(v0, "symptom_set_additional_qualifier");
          if (symptom_set_additional_qualifier)
          {
            if (symptomReporterSuccessfullyLoaded_symbolsLoaded == 1)
            {
              uint64_t v8 = ne_log_obj();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              {
                char v9 = "[null]";
                if (v2) {
                  char v9 = v2;
                }
                *(_DWORD *)__path = 136315394;
                *(void *)&__path[4] = v3;
                __int16 v14 = 2080;
                uint64_t v15 = v9;
                _os_log_debug_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_DEBUG, "Successfully loaded SymptomReporter framework with%s suffix %s", __path, 0x16u);
              }
              return;
            }
LABEL_38:
            dlclose(v0);
            return;
          }
          CFNumberRef v11 = ne_log_obj();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__path = 0;
            uint64_t v12 = "Failed to load SymptomReporter symbol symptom_set_additional_qualifier";
            goto LABEL_36;
          }
LABEL_37:
          symptomReporterSuccessfullyLoaded_symbolsLoaded = 0;
          goto LABEL_38;
        }
        CFNumberRef v11 = ne_log_obj();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_37;
        }
        *(_WORD *)__path = 0;
        uint64_t v12 = "Failed to load SymptomReporter symbol symptom_send";
      }
      else
      {
        CFNumberRef v11 = ne_log_obj();
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          goto LABEL_37;
        }
        *(_WORD *)__path = 0;
        uint64_t v12 = "Failed to load SymptomReporter symbol symptom_set_qualifier";
      }
    }
    else
    {
      CFNumberRef v11 = ne_log_obj();
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_37;
      }
      *(_WORD *)__path = 0;
      uint64_t v12 = "Failed to load SymptomReporter symbol symptom_create";
    }
LABEL_36:
    _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, v12, __path, 2u);
    goto LABEL_37;
  }
  uint64_t v10 = ne_log_obj();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__path = 0;
    _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "Failed to load SymptomReporter framework", __path, 2u);
  }
}

void sub_19DF2F498(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF2FB48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF2FD58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF3015C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF310F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t __Block_byref_object_copy__22874(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22875(uint64_t a1)
{
}

void sub_19DF32DF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF330F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF33300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  objc_sync_exit(v16);
  _Unwind_Resume(a1);
}

void sub_19DF33454(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF33630(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF364C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void alertCallback(id a1, char a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&g_currentNotificationLock);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v4 = (id)g_currentNotifications;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8 * v9);
        if (v10) {
          id Property = objc_getProperty(*(id *)(*((void *)&v22 + 1) + 8 * v9), v6, 16, 1);
        }
        else {
          id Property = 0;
        }
        if (Property == a1)
        {
          uint64_t v13 = v10;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v12 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
      uint64_t v7 = v12;
    }
    while (v12);
  }
  uint64_t v13 = 0;
LABEL_15:

  os_unfair_lock_unlock((os_unfair_lock_t)&g_currentNotificationLock);
  if (v13)
  {
    uint64_t v15 = objc_getProperty(v13, v14, 32, 1);
    id v16 = v13[5];
    [v13 cancel];
    if (v15 && v16)
    {
      if ((a2 & 3) == 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = 2 * ((a2 & 3) == 3);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __alertCallback_block_invoke;
      block[3] = &unk_1E5992D18;
      id v20 = v16;
      uint64_t v21 = v17;
      dispatch_async(v15, block);
    }
  }
  else
  {
    uint64_t v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 0;
      _os_log_error_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_ERROR, "Failed to find current notification on alert callback", (uint8_t *)v18, 2u);
    }
  }
}

uint64_t __alertCallback_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(a1 + 40), 0);
}

void authCallback(__CFUserNotification *a1, char a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&g_currentNotificationLock);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = (id)g_currentNotifications;
  BOOL v6 = (id *)[v4 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v26;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v8);
        if (v9) {
          id Property = (__CFUserNotification *)objc_getProperty(*(id *)(*((void *)&v25 + 1) + 8 * (void)v8), v5, 16, 1);
        }
        else {
          id Property = 0;
        }
        if (Property == a1)
        {
          BOOL v6 = v9;
          goto LABEL_15;
        }
        uint64_t v8 = (id *)((char *)v8 + 1);
      }
      while (v6 != v8);
      uint64_t v11 = [v4 countByEnumeratingWithState:&v25 objects:v29 count:16];
      BOOL v6 = (id *)v11;
    }
    while (v11);
  }
LABEL_15:

  os_unfair_lock_unlock((os_unfair_lock_t)&g_currentNotificationLock);
  if (v6)
  {
    uint64_t v13 = a2 & 3;
    if (v13 == 1)
    {
      __int16 v14 = 0;
    }
    else if (v13 == 3)
    {
      __int16 v14 = 0;
      uint64_t v13 = 2;
    }
    else
    {
      __int16 v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      CFIndex v15 = 0;
      CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4F1DA28];
      do
      {
        ResponseCFNumberRef Value = CFUserNotificationGetResponseValue(a1, v16, v15);
        if (!ResponseValue) {
          break;
        }
        [v14 addObject:ResponseValue];
        ++v15;
      }
      while (v15 != 10);
      uint64_t v13 = 0;
    }
    int v18 = objc_getProperty(v6, v12, 32, 1);
    id v19 = v6[5];
    [v6 cancel];
    if (v18 && v19)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __authCallback_block_invoke;
      block[3] = &unk_1E5992D90;
      id v23 = v19;
      uint64_t v24 = v13;
      long long v22 = v14;
      dispatch_async(v18, block);
    }
  }
  else
  {
    __int16 v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v20 = 0;
      _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, "Failed to find current notification on auth callback", v20, 2u);
    }
  }
}

uint64_t __authCallback_block_invoke(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[6], a1[4]);
}

void sub_19DF38700(_Unwind_Exception *a1)
{
}

void sub_19DF3A7C8(_Unwind_Exception *a1)
{
}

__CFString *convert_error_to_string_23565(void *a1)
{
  id v1 = a1;
  int v2 = [v1 domain];
  int v3 = [v2 isEqualToString:@"NEConfigurationErrorDomain"];

  if (v3)
  {
    id v4 = @"configuration is corrupted";
    switch([v1 code])
    {
      case 1:
        break;
      case 2:
        uint64_t v5 = NSString;
        BOOL v6 = [v1 localizedDescription];
        id v4 = [v5 stringWithFormat:@"configuration is invalid: %@", v6];

        break;
      case 3:
        id v4 = @"configuration type is wrong";
        break;
      case 4:
        id v4 = @"configuration owner application is wrong";
        break;
      case 5:
        id v4 = @"configuration is stale";
        break;
      case 6:
        id v4 = @"failed to write configuration to disk";
        break;
      case 7:
        id v4 = @"configuration does not exist";
        break;
      case 8:
        id v4 = @"invalid configuration operation request";
        break;
      case 9:
        id v4 = @"configuration is unchanged";
        break;
      case 10:
        id v4 = @"permission denied";
        break;
      case 11:
        id v4 = @"IPC failed";
        break;
      case 12:
        id v4 = @"failed to make the change in SCPreferences";
        break;
      case 13:
        id v4 = @"failed to copy keychain items";
        break;
      case 14:
        id v4 = @"failed into import certificates into keychain";
        break;
      case 15:
        id v4 = @"unknown certificate format";
        break;
      case 16:
        id v4 = @"failed to import certificate";
        break;
      case 17:
        id v4 = @"internal failure with certificate installation";
        break;
      case 18:
        id v4 = @"file not found";
        break;
      case 21:
        id v4 = @"MDM required";
        break;
      default:
        id v4 = @"<unknown>";
        break;
    }
  }
  else
  {
    id v4 = [v1 localizedDescription];
  }

  return v4;
}

id find_config_by_name(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = v3;
    id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v5);
          }
          uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          uint64_t v10 = objc_msgSend(v9, "name", (void)v13);
          int v11 = [v10 isEqualToString:v4];

          if (v11)
          {
            id v6 = v9;
            goto LABEL_12;
          }
        }
        id v6 = (id)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t __Block_byref_object_copy__23571(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23572(uint64_t a1)
{
}

void sub_19DF45C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void myCFRelease(const void **a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
  }
}

CFTypeRef myCFRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void myCFReplace(CFTypeRef *a1, CFTypeRef cf)
{
  if (a1)
  {
    if (cf) {
      CFTypeRef v3 = CFRetain(cf);
    }
    else {
      CFTypeRef v3 = 0;
    }
    if (*a1) {
      CFRelease(*a1);
    }
    *a1 = v3;
  }
}

uint64_t myCFEqual(unint64_t cf1, unint64_t a2)
{
  if (!(cf1 | a2)) {
    return 1;
  }
  uint64_t result = 0;
  if (cf1)
  {
    if (a2) {
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2);
    }
  }
  return result;
}

void myCFDataReleaseReset(CFDataRef *a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (v2)
    {
      MutableBytePtr = CFDataGetMutableBytePtr(v2);
      if (MutableBytePtr)
      {
        id v4 = MutableBytePtr;
        rsize_t Length = CFDataGetLength(*a1);
        rsize_t v6 = CFDataGetLength(*a1);
        memset_s(v4, Length, 0, v6);
      }
      CFRelease(*a1);
      *a1 = 0;
    }
  }
}

__CFData *myCFDataCreateMutableCopy(const __CFAllocator *a1, const UInt8 *a2, CFIndex a3)
{
  CFTypeRef v3 = 0;
  if (a2)
  {
    if (a3)
    {
      CFDataRef Mutable = CFDataCreateMutable(a1, 0);
      CFTypeRef v3 = Mutable;
      if (Mutable) {
        CFDataAppendBytes(Mutable, a2, a3);
      }
    }
  }
  return v3;
}

CFDataRef myCFDataCreateMutableCopyOfData(const __CFData *theData)
{
  if (theData)
  {
    theData = CFDataCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theData);
    if (!theData)
    {
      id v1 = ne_log_obj();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int v2 = 0;
        _os_log_fault_impl(&dword_19DDAF000, v1, OS_LOG_TYPE_FAULT, "CFDataCreateMutableCopy failed", v2, 2u);
      }
      return 0;
    }
  }
  return theData;
}

void myCFDataResetReplace(CFDataRef *a1, CFDataRef theData)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFDataRef MutableCopyOfData = myCFDataCreateMutableCopyOfData(theData);
    myCFDataReleaseReset(a1);
    *a1 = MutableCopyOfData;
  }
  else
  {
    id v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136315138;
      rsize_t v6 = "myCFDataResetReplace";
      _os_log_fault_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_FAULT, "%s called with null oldP", (uint8_t *)&v5, 0xCu);
    }
  }
}

__CFData *myCFDataCreateMutableFromString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  if (!CFStringGetLength(a1)) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  id v4 = (char *)malloc_type_malloc(v3, 0xD053E110uLL);
  if (!v4) {
    return 0;
  }
  int v5 = (UInt8 *)v4;
  CFStringGetCString(a1, v4, v3, 0x8000100u);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex v7 = CFStringGetLength(a1);
  CFMutableDictionaryRef MutableCopy = myCFDataCreateMutableCopy(v6, v5, v7);
  memset_s(v5, v3, 0, v3);
  free(v5);
  return MutableCopy;
}

void myCFDataResetReplaceFromString(CFDataRef *a1, CFStringRef theString)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFStringRef MutableCopy = theString;
    if (theString)
    {
      if (CFStringGetLength(theString) >= 1)
      {
        CFIndex Length = CFStringGetLength(MutableCopy);
        CFIndex v5 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
        CFAllocatorRef v6 = (char *)malloc_type_malloc(v5, 0x4DB6B145uLL);
        if (v6)
        {
          CFIndex v7 = (UInt8 *)v6;
          CFStringGetCString(MutableCopy, v6, v5, 0x8000100u);
          CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFIndex v9 = CFStringGetLength(MutableCopy);
          CFStringRef MutableCopy = (const __CFString *)myCFDataCreateMutableCopy(v8, v7, v9);
          memset_s(v7, v5, 0, v5);
          free(v7);
          goto LABEL_9;
        }
        uint64_t v10 = ne_log_obj();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
        {
          int v12 = 67109120;
          LODWORD(v13) = v5;
          _os_log_fault_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_FAULT, "malloc(%u) failed", (uint8_t *)&v12, 8u);
        }
      }
      CFStringRef MutableCopy = 0;
    }
LABEL_9:
    myCFDataReleaseReset(a1);
    *a1 = (CFDataRef)MutableCopy;
    return;
  }
  int v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    int v12 = 136315138;
    long long v13 = "myCFDataResetReplaceFromString";
    _os_log_fault_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_FAULT, "%s called with null oldP", (uint8_t *)&v12, 0xCu);
  }
}

const void *NEIsValidCFType(const void *result, uint64_t a2)
{
  if (result) {
    return (const void *)(CFGetTypeID(result) == a2);
  }
  return result;
}

const void *NEGetValueWithType(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFIndex v3 = 0;
  if (a1)
  {
    if (a2)
    {
      CFNumberRef Value = CFDictionaryGetValue(a1, a2);
      if (!Value) {
        return 0;
      }
      CFIndex v3 = Value;
      if (CFGetTypeID(Value) != a3) {
        return 0;
      }
    }
  }
  return v3;
}

void NEInitCFTypes()
{
  if (NEInitCFTypes_onceToken != -1) {
    dispatch_once(&NEInitCFTypes_onceToken, &__block_literal_global_24415);
  }
}

CFTypeID __NEInitCFTypes_block_invoke()
{
  CFSTRING_TYPE = CFStringGetTypeID();
  CFNUMBER_TYPE = CFNumberGetTypeID();
  CFBOOLEAN_TYPE = CFBooleanGetTypeID();
  CFARRAY_TYPE = CFArrayGetTypeID();
  CFDICTIONARY_TYPE = CFDictionaryGetTypeID();
  CFTypeID result = CFDataGetTypeID();
  CFDATA_TYPE = result;
  return result;
}

void *NEMapIntegerToString(void *result, int a2)
{
  if (result)
  {
    int v2 = result;
    CFTypeID result = (void *)*result;
    if (result)
    {
      CFIndex v3 = v2 + 2;
      do
      {
        if (*((_DWORD *)v3 - 2) == a2) {
          break;
        }
        id v4 = (void *)*v3;
        v3 += 2;
        CFTypeID result = v4;
      }
      while (v4);
    }
  }
  return result;
}

const void **NEMapStringToInteger(const void **result, CFTypeRef cf1)
{
  if (result)
  {
    CFIndex v3 = result;
    id v4 = *result;
    if (*result)
    {
      while (!cf1 || !CFEqual(cf1, v4))
      {
        CFIndex v5 = v3[2];
        v3 += 2;
        id v4 = v5;
        if (!v5) {
          return 0;
        }
      }
      return (const void **)*((unsigned int *)v3 + 2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEInChecksum(unsigned __int16 *a1, int a2)
{
  if (a2 < 2)
  {
    unsigned int v2 = 0;
  }
  else
  {
    unsigned int v2 = 0;
    unsigned int v3 = a2;
    do
    {
      int v4 = *a1++;
      v2 += v4;
      a2 = v3 - 2;
      BOOL v5 = v3 > 3;
      v3 -= 2;
    }
    while (v5);
  }
  if (a2 == 1) {
    v2 += *(unsigned __int8 *)a1;
  }
  return (unsigned __int16)~(HIWORD(v2) + v2 + ((HIWORD(v2) + (unsigned __int16)v2) >> 16));
}

void *NECreateAddressStructFromString(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  long long v16 = 0;
  if (!a1) {
    return 0;
  }
  CFIndex v6 = CFStringGetLength(a1) + 1;
  CFIndex v7 = (char *)malloc_type_malloc(v6, 0xEFF596B0uLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2) {
    CFStringRef v9 = CFStringCreateWithFormat(v8, 0, @"%@", a2);
  }
  else {
    CFStringRef v9 = CFStringCreateWithFormat(v8, 0, @"%d", a3);
  }
  CFStringRef v11 = v9;
  CFIndex v12 = CFStringGetLength(v9) + 1;
  long long v13 = (char *)malloc_type_malloc(v12, 0x3A484EECuLL);
  CFStringGetCString(v11, v13, v12, 0x600u);
  CFRelease(v11);
  memset(&v17, 0, sizeof(v17));
  v17.ai_socktype = 2;
  v17.ai_flags = 4;
  if (getaddrinfo(v7, v13, &v17, &v16))
  {
    uint64_t v10 = 0;
    if (!v7) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
    long long v15 = v16;
    if (v10) {
      __memcpy_chk();
    }
    freeaddrinfo(v15);
    if (!v7) {
      goto LABEL_9;
    }
  }
  free(v7);
LABEL_9:
  if (v13) {
    free(v13);
  }
  return v10;
}

CFStringRef NEGetAddressFamilyFromString(CFStringRef theString)
{
  CFStringRef v1 = theString;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFIndex v6 = 0;
  if (theString)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v8 = 0u;
    CFIndex v2 = CFStringGetLength(theString) + 1;
    unsigned int v3 = (char *)malloc_type_malloc(v2, 0xD62D3ECEuLL);
    CFStringGetCString(v1, v3, v2, 0x600u);
    memset(&v7, 0, sizeof(v7));
    v7.ai_socktype = 2;
    v7.ai_flags = 4;
    if (!getaddrinfo(v3, 0, &v7, &v6))
    {
      BOOL v5 = v6;
      __memcpy_chk();
      freeaddrinfo(v5);
      CFStringRef v1 = (const __CFString *)BYTE1(v8);
      if (!v3) {
        return v1;
      }
      goto LABEL_4;
    }
    CFStringRef v1 = 0;
    if (v3) {
LABEL_4:
    }
      free(v3);
  }
  return v1;
}

CFDataRef NECreateAddressDataFromString(const __CFString *a1, const __CFString *a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v14 = 0;
  if (!a1) {
    return 0;
  }
  memset(v16, 0, sizeof(v16));
  CFIndex v6 = CFStringGetLength(a1) + 1;
  addrinfo v7 = (char *)malloc_type_malloc(v6, 0x3A9DCF8DuLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  if (a2)
  {
    CFIndex v8 = CFStringGetLength(a2) + 1;
    long long v9 = (char *)malloc_type_malloc(v8, 0x565B4E30uLL);
    CFStringGetCString(a2, v9, v8, 0x600u);
  }
  else
  {
    long long v9 = 0;
  }
  memset(&v15, 0, sizeof(v15));
  v15.ai_socktype = 2;
  v15.ai_flags = 4;
  if (getaddrinfo(v7, v9, &v15, &v14)) {
    goto LABEL_7;
  }
  long long v12 = v14;
  __memcpy_chk();
  freeaddrinfo(v12);
  if (BYTE1(v16[0]) == 30)
  {
    CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v16 + 8, 16);
    if (!a3) {
      goto LABEL_8;
    }
    int v13 = 30;
    goto LABEL_19;
  }
  if (BYTE1(v16[0]) == 2)
  {
    CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v16 + 4, 4);
    if (!a3) {
      goto LABEL_8;
    }
    int v13 = 2;
LABEL_19:
    *a3 = v13;
    goto LABEL_8;
  }
LABEL_7:
  CFDataRef v10 = 0;
LABEL_8:
  if (v7) {
    free(v7);
  }
  if (v9) {
    free(v9);
  }
  return v10;
}

CFDataRef NECreateAddressStructDataFromString(const __CFString *a1, const __CFString *a2, int *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v14 = 0;
  if (!a1) {
    return 0;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)bytes = 0u;
  CFIndex v6 = CFStringGetLength(a1) + 1;
  addrinfo v7 = (char *)malloc_type_malloc(v6, 0x967EDE5BuLL);
  CFStringGetCString(a1, v7, v6, 0x600u);
  if (a2)
  {
    CFIndex v8 = CFStringGetLength(a2) + 1;
    long long v9 = (char *)malloc_type_malloc(v8, 0xE155708FuLL);
    CFStringGetCString(a2, v9, v8, 0x600u);
  }
  else
  {
    long long v9 = 0;
  }
  memset(&v15, 0, sizeof(v15));
  v15.ai_socktype = 2;
  v15.ai_flags = 4;
  if (!getaddrinfo(v7, v9, &v15, &v14))
  {
    long long v11 = v14;
    __memcpy_chk();
    freeaddrinfo(v11);
    CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 128);
    int v12 = bytes[1];
    if (bytes[1] == 2)
    {
      if (!a3) {
        goto LABEL_14;
      }
      int v12 = 2;
    }
    else if (!a3 || bytes[1] != 30)
    {
      goto LABEL_14;
    }
    *a3 = v12;
    goto LABEL_14;
  }
  CFDataRef v10 = 0;
LABEL_14:
  if (v7) {
    free(v7);
  }
  if (v9) {
    free(v9);
  }
  return v10;
}

CFStringRef NECreateAddressString(CFStringRef result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v1 = BYTE1(result->isa);
    if (v1 == 30)
    {
      if (LOBYTE(result->isa) >= 0x1Cu)
      {
        p_info = &result->info;
        int v3 = 30;
        goto LABEL_8;
      }
    }
    else if (v1 == 2 && LOBYTE(result->isa) >= 0x10u)
    {
      p_info = (uint64_t *)((char *)&result->isa + 4);
      int v3 = 2;
LABEL_8:
      inet_ntop(v3, p_info, cStr, 0x40u);
      return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
    }
    return 0;
  }
  return result;
}

__CFString *NECreateAddressStringWithPort(uint64_t a1)
{
  CFStringRef v2 = NECreateAddressString((CFStringRef)a1);
  if (!v2) {
    return 0;
  }
  CFStringRef v3 = v2;
  CFStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2);
  CFRelease(v3);
  int v5 = *(unsigned __int8 *)(a1 + 1);
  if (v5 == 30)
  {
    CFStringRef v6 = @".%u";
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    CFStringRef v6 = @":%u";
LABEL_7:
    CFStringAppendFormat(MutableCopy, 0, v6, bswap32(*(unsigned __int16 *)(a1 + 2)) >> 16);
  }
  return MutableCopy;
}

uint64_t NEGetPortFromAddress(uint64_t result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 1);
    if (v1 == 30 || v1 == 2) {
      unsigned int v2 = *(unsigned __int16 *)(result + 2);
    }
    else {
      unsigned int v2 = 0;
    }
    return __rev16(v2);
  }
  return result;
}

CFStringRef NECreateAddressStringFromBuffer(CFStringRef result, unint64_t a2, int a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    CFStringRef v3 = result;
    if (a2 >= 4 && a3 == 2)
    {
      int v4 = 2;
LABEL_8:
      inet_ntop(v4, v3, cStr, 0x40u);
      return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
    }
    CFTypeID result = 0;
    if (a2 >= 0x10 && a3 == 30)
    {
      int v4 = 30;
      goto LABEL_8;
    }
  }
  return result;
}

CFStringRef NECreateIPv4AddressMaskStringFromPrefix(int a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1 > 32) {
    return 0;
  }
  int __b = 0;
  if (a1 < 8)
  {
    size_t v3 = 0;
  }
  else
  {
    size_t v3 = (a1 >> 3) - 1 + 1;
    memset(&__b, 255, v3);
  }
  if (a1 <= 0) {
    int v4 = -(-a1 & 7);
  }
  else {
    int v4 = a1 & 7;
  }
  if (v4) {
    cStr[v3 - 4] = 0xFF00u >> v4;
  }
  inet_ntop(2, &__b, cStr, 0x40u);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
}

CFStringRef NECreateIPv6AddressMaskStringFromPrefix(int a1)
{
  size_t v2 = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  __b[0] = 0;
  __b[1] = 0;
  if (a1 >= 8)
  {
    size_t v2 = (a1 >> 3) - 1 + 1;
    memset(__b, 255, v2);
  }
  if (a1 <= 0) {
    int v3 = -(-a1 & 7);
  }
  else {
    int v3 = a1 & 7;
  }
  if (v3) {
    *((unsigned char *)__b + v2) = 0xFF00u >> v3;
  }
  inet_ntop(30, __b, cStr, 0x40u);
  return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
}

CFStringRef NECreateIPv6SubnetAddressWithPrefix(const __CFString *a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = NECreateIPv6AddressMaskStringFromPrefix(a2);
  int v4 = NECreateAddressStructFromString(v3, 0, 0);
  int v5 = NECreateAddressStructFromString(a1, 0, 0);
  uint64_t v6 = v5;
  if (v4 && v5)
  {
    if (v4[1] == 30 && *((unsigned char *)v5 + 1) == 30)
    {
      uint64_t v7 = 0;
      v10[0] = 0;
      v10[1] = 0;
      do
      {
        *((unsigned char *)v10 + v7) = v4[v7 + 8] & *((unsigned char *)v5 + v7 + 8);
        ++v7;
      }
      while (v7 != 16);
      inet_ntop(30, v10, cStr, 0x40u);
      CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
    }
    else
    {
      CFStringRef v8 = 0;
    }
  }
  else
  {
    CFStringRef v8 = 0;
    if (!v4)
    {
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  free(v4);
  if (v6) {
LABEL_10:
  }
    free(v6);
LABEL_11:
  if (v3) {
    CFRelease(v3);
  }
  return v8;
}

void NESetValueIfPresent(const __CFDictionary *a1, __CFDictionary *a2, void *key)
{
  if (a1 && a2 && key && CFDictionaryContainsKey(a1, key))
  {
    CFNumberRef Value = CFDictionaryGetValue(a1, key);
    CFDictionarySetValue(a2, key, Value);
  }
}

void NEAddDateToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      CFDateRef v5 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (double)a3 - *MEMORY[0x1E4F1CF78]);
      if (v5)
      {
        CFDateRef v6 = v5;
        CFDictionaryAddValue(a1, a2, v5);
        CFRelease(v6);
      }
    }
  }
}

void NEAddIntToDictionary(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionaryAddValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void NEAddInt64ToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  if (a1 && a2)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionaryAddValue(a1, a2, v5);
      CFRelease(v6);
    }
  }
}

void NEAddIntToArray(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

uint64_t NEGetIntFromDictionary(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  if (a1)
  {
    if (a2)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        return valuePtr;
      }
    }
  }
  return v3;
}

uint64_t NEGetIntFromArray(const __CFArray *a1, CFIndex a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  if (a1)
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2);
    if (ValueAtIndex)
    {
      CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
  }
  return v3;
}

void NEAddAddressToDictionary(__CFDictionary *a1, const void *a2, unsigned __int8 *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3)
  {
    int v5 = a3[1];
    if (v5 == 30)
    {
      CFNumberRef v6 = a3 + 8;
      int v7 = 30;
    }
    else
    {
      if (v5 != 2) {
        return;
      }
      CFNumberRef v6 = a3 + 4;
      int v7 = 2;
    }
    inet_ntop(v7, v6, cStr, 0x40u);
    CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x600u);
    if (v8)
    {
      CFStringRef v9 = v8;
      CFDictionaryAddValue(a1, a2, v8);
      CFRelease(v9);
    }
  }
}

void NEAddPortToDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        int v3 = *(unsigned __int8 *)(a3 + 1);
        if (v3 == 30 || v3 == 2) {
          NEAddIntToDictionary(a1, a2, bswap32(*(unsigned __int16 *)(a3 + 2)) >> 16);
        }
      }
    }
  }
}

uint64_t NEGetPrefixForAddressRange(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (!a1 || !a2) {
    return result;
  }
  int v4 = *(unsigned __int8 *)(a1 + 1);
  if (v4 != *(unsigned __int8 *)(a2 + 1)) {
    return 0xFFFFFFFFLL;
  }
  if (v4 == 30)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (long long *)(a1 + 8);
    long long v13 = *(_OWORD *)(a1 + 8);
    long long v53 = *(_OWORD *)(a2 + 8);
    long long v54 = v13;
    uint64_t result = 32;
    while (1)
    {
      unsigned int v14 = *(_DWORD *)((char *)&v54 + v11);
      unsigned int v15 = *(_DWORD *)((char *)&v53 + v11);
      if (v14 != v15) {
        break;
      }
      v11 += 4;
      result += 32;
      if (v11 == 16)
      {
        uint64_t result = 128;
        goto LABEL_20;
      }
    }
    unsigned int v21 = bswap32(v15);
    unsigned int v22 = bswap32(v14);
    do
    {
      v22 >>= 1;
      BOOL v20 = v22 == v21 >> 1;
      v21 >>= 1;
      --result;
    }
    while (!v20);
LABEL_20:
    uint64_t v23 = 0;
    long long v24 = *v12;
    long long v53 = *(_OWORD *)(a2 + 8);
    long long v54 = v24;
    unint64_t v25 = 32 - result;
    for (unint64_t i = result; ; i -= 32)
    {
      if (!i)
      {
        if (*((_DWORD *)&v54 + v23) || *((_DWORD *)&v53 + v23) != -1) {
          return 0xFFFFFFFFLL;
        }
        return result;
      }
      if (i <= 0x1F) {
        break;
      }
      ++v23;
      v25 += 32;
      if (v23 == 4) {
        return result;
      }
    }
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    uint64_t v27 = v25 - 1;
    unint64_t v28 = (v25 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v29 = (int64x2_t)xmmword_19DF9BF70;
    int64x2_t v30 = (int64x2_t)xmmword_19DF9BF80;
    int32x4_t v31 = (int32x4_t)xmmword_19DF9BF90;
    int32x4_t v32 = 0uLL;
    v33.i64[0] = 0x100000001;
    v33.i64[1] = 0x100000001;
    int64x2_t v34 = vdupq_n_s64(4uLL);
    v35.i64[0] = 0x400000004;
    v35.i64[1] = 0x400000004;
    do
    {
      int8x16_t v36 = (int8x16_t)v32;
      uint64x2_t v37 = (uint64x2_t)v29;
      uint64x2_t v38 = (uint64x2_t)v30;
      int32x4_t v32 = vaddq_s32((int32x4_t)vshlq_u32(v33, (uint32x4_t)v31), v32);
      int64x2_t v29 = vaddq_s64(v29, v34);
      int64x2_t v30 = vaddq_s64(v30, v34);
      int32x4_t v31 = vaddq_s32(v31, v35);
      v28 -= 4;
    }
    while (v28);
    uint64x2_t v39 = (uint64x2_t)vdupq_lane_s64(v27, 0);
    int v40 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v38, v39), (int32x4_t)vcgtq_u64(v37, v39)), v36, (int8x16_t)v32));
    if ((bswap32(*((_DWORD *)&v54 + v23)) & v40) == 0
      && (v40 & ~bswap32(*((_DWORD *)&v53 + v23))) == 0)
    {
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  if (v4 != 2) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 4);
  unsigned int v6 = bswap32(v5);
  unsigned int v7 = *(_DWORD *)(a2 + 4);
  unsigned int v8 = bswap32(v7);
  if (v5 == v7)
  {
    int v9 = 0;
    unsigned int v10 = 32;
  }
  else
  {
    uint64_t v16 = -3;
    unsigned int v17 = v8;
    unsigned int v18 = v6;
    do
    {
      uint64_t v19 = v16;
      v18 >>= 1;
      BOOL v20 = v18 == v17 >> 1;
      v17 >>= 1;
      --v16;
    }
    while (!v20);
    unsigned int v10 = v19 + 34;
    if (v19 == -2)
    {
      int v9 = 0;
    }
    else
    {
      int64x2_t v41 = (int64x2_t)xmmword_19DF9BF70;
      int64x2_t v42 = (int64x2_t)xmmword_19DF9BF80;
      int32x4_t v43 = (int32x4_t)xmmword_19DF9BF90;
      unint64_t v44 = -v16 & 0xFFFFFFFFFFFFFFFCLL;
      int32x4_t v45 = 0uLL;
      v46.i64[0] = 0x100000001;
      v46.i64[1] = 0x100000001;
      int64x2_t v47 = vdupq_n_s64(4uLL);
      v48.i64[0] = 0x400000004;
      v48.i64[1] = 0x400000004;
      do
      {
        int8x16_t v49 = (int8x16_t)v45;
        uint64x2_t v50 = (uint64x2_t)v41;
        uint64x2_t v51 = (uint64x2_t)v42;
        int32x4_t v45 = vaddq_s32((int32x4_t)vshlq_u32(v46, (uint32x4_t)v43), v45);
        int64x2_t v41 = vaddq_s64(v41, v47);
        int64x2_t v42 = vaddq_s64(v42, v47);
        int32x4_t v43 = vaddq_s32(v43, v48);
        v44 -= 4;
      }
      while (v44);
      uint64x2_t v52 = (uint64x2_t)vdupq_lane_s64(-3 - v19, 0);
      int v9 = vaddvq_s32((int32x4_t)vbslq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v51, v52), (int32x4_t)vcgtq_u64(v50, v52)), v49, (int8x16_t)v45));
    }
  }
  if (((v6 | ~v8) & v9) != 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v10;
  }
}

uint64_t NEGetPrefixForAddressRangeStrings(const __CFString *a1, const __CFString *a2)
{
  int v3 = NECreateAddressStructFromString(a1, 0, 0);
  int v4 = NECreateAddressStructFromString(a2, 0, 0);
  uint64_t v5 = NEGetPrefixForAddressRange((uint64_t)v3, (uint64_t)v4);
  if (v3) {
    free(v3);
  }
  if (v4) {
    free(v4);
  }
  return v5;
}

uint64_t NEGetPrefixForIPv4NetmaskString(const __CFString *a1)
{
  int v1 = NECreateAddressStructFromString(a1, 0, 0);
  size_t v2 = NECreateAddressStructFromString(@"255.255.255.255", 0, 0);
  uint64_t v3 = NEGetPrefixForAddressRange((uint64_t)v1, (uint64_t)v2);
  if (v1) {
    free(v1);
  }
  if (v2) {
    free(v2);
  }
  return v3;
}

uint64_t NEGetPrefixForIPv6NetmaskString(const __CFString *a1)
{
  int v1 = NECreateAddressStructFromString(a1, 0, 0);
  size_t v2 = NECreateAddressStructFromString(@"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 0, 0);
  uint64_t v3 = NEGetPrefixForAddressRange((uint64_t)v1, (uint64_t)v2);
  if (v1) {
    free(v1);
  }
  if (v2) {
    free(v2);
  }
  return v3;
}

uint64_t NECompareAddresses(const __CFString *a1, const __CFString *a2)
{
  uint64_t v2 = 4294967294;
  if (a1 && a2)
  {
    uint64_t v13 = 0;
    CFDataRef v4 = NECreateAddressDataFromString(a1, 0, (int *)&v13 + 1);
    CFDataRef v5 = v4;
    if (v4 && HIDWORD(v13))
    {
      CFDataRef v6 = NECreateAddressDataFromString(a2, 0, (int *)&v13);
      if (v6)
      {
        CFDataRef v7 = v6;
        if (v13 == HIDWORD(v13))
        {
          BytePtr = CFDataGetBytePtr(v5);
          int v9 = CFDataGetBytePtr(v7);
          CFIndex Length = CFDataGetLength(v5);
          int v11 = memcmp(BytePtr, v9, Length);
          if (v11 >= 0) {
            uint64_t v2 = v11 != 0;
          }
          else {
            uint64_t v2 = 0xFFFFFFFFLL;
          }
        }
        CFRelease(v5);
        CFDataRef v5 = v7;
      }
      goto LABEL_12;
    }
    if (v4) {
LABEL_12:
    }
      CFRelease(v5);
  }
  return v2;
}

BOOL NEAddressRangeIsContainedInAddressRange(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4)
{
  int v6 = NECompareAddresses(a1, a3);
  unsigned int v7 = NECompareAddresses(a2, a4);
  return (v6 + 1) < 2 && v7 < 2;
}

void NEAddDataToDictionary(__CFDictionary *a1, const void *a2, UInt8 *bytes, int a4)
{
  if (a1)
  {
    if (a2)
    {
      if (bytes)
      {
        CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, a4);
        if (v6)
        {
          CFDataRef v7 = v6;
          CFDictionaryAddValue(a1, a2, v6);
          CFRelease(v7);
        }
      }
    }
  }
}

void NEAppendIntToArray(__CFArray *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFArrayAppendValue(a1, v3);
      CFRelease(v4);
    }
  }
}

CFNumberRef NEGetValueFromIntArray(const __CFNumber *result, CFIndex a2)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFArrayRef v3 = result;
    if (CFArrayGetCount(result) <= a2)
    {
      return 0;
    }
    else
    {
      uint64_t result = (const __CFNumber *)CFArrayGetValueAtIndex(v3, a2);
      if (result)
      {
        CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
        return (const __CFNumber *)valuePtr;
      }
    }
  }
  return result;
}

CFDataRef NECreateDataFromString(const __CFString *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  if (!Length) {
    return 0;
  }
  CFIndex v5 = Length;
  CFIndex v6 = Length + 1;
  CFDataRef v7 = (char *)malloc_type_malloc(Length + 1, 0x970EF794uLL);
  if (!v7) {
    return 0;
  }
  unsigned int v8 = (UInt8 *)v7;
  if (CFStringGetCString(a1, v7, v6, 0x600u))
  {
    if (a2) {
      CFIndex v9 = v5 + 1;
    }
    else {
      CFIndex v9 = v5;
    }
    CFDataRef v10 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v9);
  }
  else
  {
    CFDataRef v10 = 0;
  }
  free(v8);
  return v10;
}

CFStringRef NECreateStringFromData(CFStringRef result)
{
  if (result)
  {
    CFDataRef v1 = (const __CFData *)result;
    CFIndex Length = CFDataGetLength((CFDataRef)result);
    BytePtr = CFDataGetBytePtr(v1);
    UInt8 bytes = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDataRef v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &bytes, 1);
    if (!v5
      || (CFDataRef v6 = v5,
          v10.locatiouint64_t n = 0,
          v10.__int16 length = Length,
          locatiouint64_t n = CFDataFind(v1, v5, v10, 0).location,
          CFRelease(v6),
          location == -1))
    {
      CFIndex v8 = CFDataGetLength(v1);
      return CFStringCreateWithBytes(v4, BytePtr, v8, 0x600u, 0);
    }
    else
    {
      return CFStringCreateWithCString(v4, (const char *)BytePtr, 0x600u);
    }
  }
  return result;
}

void *NECreateCStringFromCFString(const __CFString *a1)
{
  if (!a1) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  if (!Length) {
    return 0;
  }
  CFIndex v3 = Length + 1;
  CFAllocatorRef v4 = malloc_type_calloc(1uLL, Length + 1, 0x85813EFEuLL);
  if (v4 && !CFStringGetCString(a1, (char *)v4, v3, 0x600u))
  {
    free(v4);
    return 0;
  }
  return v4;
}

void NEAddValueToIntKeyedDictionary(__CFDictionary *a1, int a2, const void *a3)
{
  int valuePtr = a2;
  if (a1 && a3)
  {
    CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v5)
    {
      CFNumberRef v6 = v5;
      CFDictionaryAddValue(a1, v5, a3);
      CFRelease(v6);
    }
  }
}

CFDictionaryRef NEGetValueFromIntKeyedDictionary(const __CFDictionary *a1, int a2)
{
  CFDictionaryRef Value = a1;
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v3);
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  return Value;
}

void NERemoveValueFromIntKeyedDictionary(__CFDictionary *a1, int a2)
{
  int valuePtr = a2;
  if (a1)
  {
    CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (v3)
    {
      CFNumberRef v4 = v3;
      CFDictionaryRemoveValue(a1, v3);
      CFRelease(v4);
    }
  }
}

NSObject *NERepeatingEventCreate(NSObject *a1, dispatch_time_t a2, uintptr_t a3, uint64_t a4, uint64_t a5, int a6, const void *a7, const void *a8)
{
  uint64_t v16 = malloc_type_calloc(1uLL, 0x20uLL, 0x1080040AA036A7FuLL);
  *(void *)uint64_t v16 = a4;
  void v16[2] = a6;
  if (a7) {
    *((void *)v16 + 2) = _Block_copy(a7);
  }
  if (a8) {
    *((void *)v16 + 3) = _Block_copy(a8);
  }
  v16[3] = 0;
  unsigned int v17 = dispatch_source_create(MEMORY[0x1E4F14490], 0, a3, a1);
  unsigned int v18 = v17;
  if (v17)
  {
    dispatch_set_context(v17, v16);
    dispatch_set_finalizer_f(v18, (dispatch_function_t)repeatingEventFinalizer);
    dispatch_source_set_timer(v18, a2, 1000000 * a4, 1000000 * a5);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __NERepeatingEventCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_17;
    void handler[4] = v18;
    dispatch_source_set_event_handler(v18, handler);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = __NERepeatingEventCreate_block_invoke_2;
    void v20[3] = &__block_descriptor_tmp_18_24481;
    void v20[4] = v18;
    dispatch_source_set_cancel_handler(v18, v20);
    dispatch_resume(v18);
  }
  else
  {
    free(v16);
  }
  return v18;
}

uint64_t __NERepeatingEventCreate_block_invoke(uint64_t a1)
{
  CFDataRef v1 = *(NSObject **)(a1 + 32);
  context = (uint64_t *)dispatch_get_context(v1);
  CFNumberRef v3 = context;
  int v5 = *((_DWORD *)context + 2);
  int v4 = *((_DWORD *)context + 3);
  *((_DWORD *)context + 3) = v4 + 1;
  if (v5) {
    BOOL v6 = v4 < v5;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t result = context[2];
    if (!result) {
      return result;
    }
  }
  else
  {
    dispatch_source_cancel(v1);
    uint64_t result = v3[3];
    if (!result) {
      return result;
    }
  }
  CFIndex v8 = *(uint64_t (**)(void))(result + 16);

  return v8();
}

void __NERepeatingEventCreate_block_invoke_2(uint64_t a1)
{
  CFDataRef v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

void repeatingEventFinalizer(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[2];
    if (v2) {
      _Block_release(v2);
    }
    CFNumberRef v3 = (const void *)a1[3];
    if (v3) {
      _Block_release(v3);
    }
    free(a1);
  }
}

uint64_t NERepeatingEventGetTimesFired(NSObject *a1)
{
  if (a1) {
    return *((unsigned int *)dispatch_get_context(a1) + 3);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

NSObject *NERepeatingEventGetIntervalInMilliseconds(NSObject *result)
{
  if (result) {
    return *(NSObject **)dispatch_get_context(result);
  }
  return result;
}

void NERepeatingEventRelease(NSObject *a1)
{
  if (a1 && !dispatch_source_testcancel(a1))
  {
    dispatch_source_cancel(a1);
  }
}

NSObject *NECreateTimerSource(dispatch_queue_t queue, uint64_t a2, void *a3)
{
  int v5 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, queue);
  if (v5)
  {
    dispatch_time_t v6 = dispatch_time(0, 1000000000 * a2);
    dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(v5, a3);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __NECreateTimerSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_19;
    void handler[4] = v5;
    dispatch_source_set_cancel_handler(v5, handler);
    dispatch_resume(v5);
  }
  return v5;
}

void __NECreateTimerSource_block_invoke(uint64_t a1)
{
  CFDataRef v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

CFDataRef NECreateDataWithEncodedCString(unsigned char *a1, int a2)
{
  LOBYTE(v2) = *a1;
  if (!*a1) {
    return 0;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 1;
  uint64_t v7 = MEMORY[0x1E4F14390];
  do
  {
    if ((v2 & 0x80) != 0)
    {
      if (!__maskrune((char)v2, 0x4000uLL)) {
        return 0;
      }
    }
    else
    {
      int v8 = *(_DWORD *)(v7 + 4 * (char)v2 + 60);
      if ((v8 & 0x10000) != 0)
      {
        ++v5;
      }
      else if ((v8 & 0x4000) == 0)
      {
        return 0;
      }
    }
    int v2 = a1[v6++];
  }
  while (v2);
  if (!v5) {
    return 0;
  }
  if (v5) {
    return 0;
  }
  CFIndex v9 = (UInt8 *)malloc_type_malloc(v5 >> 1, 0xFF0D70EEuLL);
  if (!v9) {
    return 0;
  }
  CFRange v10 = v9;
  unsigned int v11 = *a1;
  if (*a1)
  {
    CFIndex v12 = 0;
    int v13 = 0;
    unsigned int v14 = a1 + 1;
    unsigned int v15 = v9;
    do
    {
      if ((v11 & 0x80) == 0 && (*(_DWORD *)(v7 + 4 * v11 + 60) & 0x10000) != 0)
      {
        if (v13)
        {
          __str[1] = v11;
          __str[2] = 0;
          UInt8 v16 = strtol(__str, 0, a2);
          int v13 = 0;
          *v15++ = v16;
          ++v12;
        }
        else
        {
          __str[0] = v11;
          int v13 = 1;
        }
      }
      unsigned int v17 = *v14++;
      unsigned int v11 = v17;
    }
    while (v17);
  }
  else
  {
    CFIndex v12 = 0;
  }
  CFDataRef v19 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v10, v12);
  free(v10);
  return v19;
}

const char *NECertificateStatusToString(int a1)
{
  if ((a1 - 1) > 4) {
    return "Unknown";
  }
  else {
    return off_1E5992FC8[a1 - 1];
  }
}

uint64_t NECertificateDateIsValid(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 4;
  }
  SecCertificateNotValidBefore();
  CFAbsoluteTime v2 = v1;
  if (v1 == 0.0) {
    CFDateRef v3 = 0;
  }
  else {
    CFDateRef v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1);
  }
  SecCertificateNotValidAfter();
  CFAbsoluteTime v6 = v5;
  if (v5 == 0.0) {
    CFDateRef v7 = 0;
  }
  else {
    CFDateRef v7 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current == 0.0)
  {
    CFDateRef v10 = 0;
    goto LABEL_19;
  }
  CFDateRef v9 = CFDateCreate(0, Current);
  CFDateRef v10 = v9;
  if (!v3 || !v9)
  {
LABEL_19:
    uint64_t v4 = 1;
    if (!v3)
    {
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    goto LABEL_35;
  }
  if (CFDateCompare(v9, v3, 0) == kCFCompareLessThan)
  {
    int v13 = ne_log_obj();
    uint64_t v4 = 2;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_DEBUG, "Current time before valid time", buf, 2u);
    }
  }
  else
  {
    if (!v7 || CFDateCompare(v10, v7, 0) != kCFCompareGreaterThan)
    {
      uint64_t v4 = 1;
      goto LABEL_35;
    }
    unsigned int v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_debug_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEBUG, "Current time after valid time", buf, 2u);
    }
    uint64_t v4 = 3;
  }
  if (nelog_is_info_logging_enabled())
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v18 = 0;
    unsigned int v14 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
    if (v14)
    {
      unsigned int v15 = v14;
      CFCalendarDecomposeAbsoluteTime(v14, v2, "yMdHm", (char *)&v20 + 4, &v20, (char *)&v19 + 4, &v19, &v18);
      UInt8 v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67110144;
        int v22 = HIDWORD(v20);
        __int16 v23 = 1024;
        int v24 = v20;
        __int16 v25 = 1024;
        int v26 = HIDWORD(v19);
        __int16 v27 = 1024;
        int v28 = v19;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_INFO, "Certificate not valid before yr %d, mon %d, days %d, hours %d, min %d\n", buf, 0x20u);
      }
      CFCalendarDecomposeAbsoluteTime(v15, v6, "yMdHm", (char *)&v20 + 4, &v20, (char *)&v19 + 4, &v19, &v18);
      unsigned int v17 = ne_log_obj();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67110144;
        int v22 = HIDWORD(v20);
        __int16 v23 = 1024;
        int v24 = v20;
        __int16 v25 = 1024;
        int v26 = HIDWORD(v19);
        __int16 v27 = 1024;
        int v28 = v19;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_INFO, "Certificate not valid after yr %d, mon %d, days %d, hours %d, min %d\n", buf, 0x20u);
      }
      CFRelease(v15);
    }
  }
LABEL_35:
  CFRelease(v3);
  if (v7) {
LABEL_21:
  }
    CFRelease(v7);
LABEL_22:
  if (v10) {
    CFRelease(v10);
  }
  return v4;
}

BOOL NEIsInterfaceWIFI()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v0 = socket(2, 2, 0);
  if (v0 < 0)
  {
    CFAbsoluteTime v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    LODWORD(v7[0]) = 136315138;
    *(void *)((char *)v7 + 4) = "NEIsInterfaceWIFI";
    CFDateRef v3 = "%s: Failed to open socket";
    uint64_t v4 = (uint8_t *)v7;
LABEL_10:
    _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, v3, v4, 0xCu);
    goto LABEL_7;
  }
  memset(v7, 0, 44);
  __strlcpy_chk();
  if (ioctl(v0, 0xC02C6938uLL, v7) != -1)
  {
    close(v0);
    return (v7[1] & 0xE0) == 128;
  }
  CFAbsoluteTime v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315138;
    CFAbsoluteTime v6 = "NEIsInterfaceWIFI";
    CFDateRef v3 = "%s: Failed to get media";
    uint64_t v4 = buf;
    goto LABEL_10;
  }
LABEL_7:
  close(v0);
  return 0;
}

ifaddrs *NEGetInterfaceType(const char *a1, unsigned char *a2, BOOL *a3)
{
  CFDateRef v10 = 0;
  *a2 = 0;
  *a3 = 0;
  CFAbsoluteTime v6 = 0;
  if (!getifaddrs(&v10))
  {
    CFDateRef v7 = v10;
    if (v10)
    {
      CFAbsoluteTime v6 = v10;
      while (1)
      {
        ifa_name = v6->ifa_name;
        if (ifa_name)
        {
          if (!strcmp(ifa_name, a1)) {
            break;
          }
        }
        CFAbsoluteTime v6 = v6->ifa_next;
        if (!v6) {
          goto LABEL_13;
        }
      }
      CFAbsoluteTime v6 = (ifaddrs *)v6->ifa_addr->sa_data[2];
      if (v6 == 255)
      {
        *a2 = 0;
      }
      else if (v6 == 6)
      {
        *a2 = 1;
        *a3 = NEIsInterfaceWIFI();
        CFDateRef v7 = v10;
      }
    }
    else
    {
      CFAbsoluteTime v6 = 0;
    }
LABEL_13:
    MEMORY[0x19F3B76F0](v7);
  }
  return v6;
}

BOOL NEIsInterfaceCellular(const char *a1)
{
  return NEGetInterfaceType(a1, &v3, &v2) == 255;
}

void *NECopyInterfaceAddress(const char *a1, int a2)
{
  int v13 = 0;
  p_ifa_next = 0;
  if (!getifaddrs(&v13))
  {
    p_ifa_next = &v13->ifa_next;
    if (v13)
    {
      while (1)
      {
        CFAbsoluteTime v5 = (const char *)p_ifa_next[1];
        if (v5)
        {
          if (!strcmp(v5, a1))
          {
            CFAbsoluteTime v6 = (unsigned __int8 *)p_ifa_next[3];
            if (v6[1] == a2)
            {
              if (a2 == 30)
              {
                unsigned int v10 = *v6;
                CFStringRef v8 = (const __CFString *)(v6 + 8);
                unint64_t v9 = v10;
                int v11 = 30;
                goto LABEL_13;
              }
              if (a2 == 2) {
                break;
              }
            }
          }
        }
        p_ifa_next = (void *)*p_ifa_next;
        if (!p_ifa_next) {
          goto LABEL_9;
        }
      }
      unsigned int v12 = *v6;
      CFStringRef v8 = (const __CFString *)(v6 + 4);
      unint64_t v9 = v12;
      int v11 = 2;
LABEL_13:
      p_ifa_next = NECreateAddressStringFromBuffer(v8, v9, v11);
    }
LABEL_9:
    MEMORY[0x19F3B76F0](v13);
  }
  return p_ifa_next;
}

uint64_t NEGetInterfaceForAddress(unsigned __int8 *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v2 = a1[1];
  if (v2 == 30)
  {
    if (*a1 > 0x1Bu) {
      goto LABEL_4;
    }
LABEL_21:
    unsigned int v10 = ne_log_obj();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "Address passed to NEGetInterfaceForAddress is too short", buf, 2u);
    }
    return 0;
  }
  if (v2 == 2 && *a1 < 0x10u) {
    goto LABEL_21;
  }
LABEL_4:
  unsigned int v17 = 0;
  if (getifaddrs(&v17) < 0)
  {
    int v11 = *__error();
    if (strerror_r(v11, (char *)buf, 0x80uLL)) {
      buf[0] = 0;
    }
    unsigned int v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int v18 = 67109378;
      *(_DWORD *)uint64_t v19 = v11;
      *(_WORD *)&v19[4] = 2080;
      *(void *)&v19[6] = buf;
      _os_log_fault_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_FAULT, "getifaddrs failed: [%d] %s", v18, 0x12u);
    }
    return 0;
  }
  char v3 = v17;
  if (!v17) {
    return 0;
  }
  int v4 = a1[1];
  while (1)
  {
    ifa_addr = v3->ifa_addr;
    if (v4 != ifa_addr->sa_family) {
      goto LABEL_16;
    }
    if (v4 == 30) {
      break;
    }
    if (v4 == 2 && *((_DWORD *)a1 + 1) == *(_DWORD *)&ifa_addr->sa_data[2]) {
      goto LABEL_29;
    }
LABEL_16:
    char v3 = v3->ifa_next;
    if (!v3) {
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(void *)&ifa_addr->sa_data[6];
  uint64_t v6 = *(void *)&ifa_addr[1].sa_len;
  if (*((void *)a1 + 1) != v7 || *((void *)a1 + 2) != v6) {
    goto LABEL_16;
  }
LABEL_29:
  uint64_t v9 = if_nametoindex(v3->ifa_name);
  if (!v9)
  {
    int v14 = *__error();
    if (strerror_r(v14, (char *)buf, 0x80uLL)) {
      buf[0] = 0;
    }
    unsigned int v15 = ne_log_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      ifa_name = v3->ifa_name;
      *(_DWORD *)int v18 = 136315650;
      *(void *)uint64_t v19 = ifa_name;
      *(_WORD *)&v19[8] = 1024;
      *(_DWORD *)&v19[10] = v14;
      __int16 v20 = 2080;
      unsigned int v21 = buf;
      _os_log_fault_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_FAULT, "Failed to get an interface index for interface %s: [%d] %s", v18, 0x1Cu);
    }
LABEL_17:
    uint64_t v9 = 0;
  }
  if (v17) {
    MEMORY[0x19F3B76F0]();
  }
  return v9;
}

uint64_t NEIsValidInterface(const char *a1)
{
  uint64_t v7 = 0;
  if (getifaddrs(&v7)) {
    return 0;
  }
  char v3 = v7;
  if (v7)
  {
    int v4 = v7;
    while (1)
    {
      ifa_name = v4->ifa_name;
      if (ifa_name)
      {
        if (!strcmp(ifa_name, a1)) {
          break;
        }
      }
      int v4 = v4->ifa_next;
      if (!v4) {
        goto LABEL_8;
      }
    }
    uint64_t v2 = 1;
  }
  else
  {
LABEL_8:
    uint64_t v2 = 0;
  }
  MEMORY[0x19F3B76F0](v3);
  return v2;
}

BOOL NEIsWildcardAddress(unsigned __int8 *a1)
{
  int v1 = a1[1];
  if (v1 == 30)
  {
    if (*a1 >= 0x1Cu && !*((_DWORD *)a1 + 2) && !*((_DWORD *)a1 + 3) && !*((_DWORD *)a1 + 4))
    {
      uint64_t v2 = a1 + 20;
      return *v2 == 0;
    }
  }
  else if (v1 == 2 && *a1 >= 0x10u)
  {
    uint64_t v2 = a1 + 4;
    return *v2 == 0;
  }
  return 0;
}

BOOL NEIsLoopbackAddress(unsigned __int8 *a1)
{
  int v1 = a1[1];
  if (v1 == 30)
  {
    if (*a1 >= 0x1Cu && !*((_DWORD *)a1 + 2) && !*((_DWORD *)a1 + 3) && !*((_DWORD *)a1 + 4))
    {
      uint64_t v2 = a1 + 20;
      int v3 = 0x1000000;
      return *v2 == v3;
    }
  }
  else if (v1 == 2 && *a1 >= 0x10u)
  {
    uint64_t v2 = a1 + 4;
    int v3 = 16777343;
    return *v2 == v3;
  }
  return 0;
}

uint64_t NEGetEntitlement(void *a1)
{
  if (a1)
  {
    if (MEMORY[0x19F3B92C0]() == MEMORY[0x1E4F14568])
    {
      size_t count = xpc_array_get_count(a1);
      if (count)
      {
        size_t v5 = count;
        size_t v6 = 0;
        uint64_t v2 = 0;
        while (1)
        {
          string = xpc_array_get_string(a1, v6);
          if (string)
          {
            CFStringRef v8 = string;
            size_t v9 = strlen(string);
            if (strncmp(v8, "packet-tunnel-provider", v9))
            {
              if (!strncmp(v8, "app-proxy-provider", v9)) {
                goto LABEL_22;
              }
              if (!strncmp(v8, "content-filter-provider", v9)) {
                goto LABEL_23;
              }
              if (!strncmp(v8, "dns-proxy", v9)) {
                goto LABEL_24;
              }
              if (!strncmp(v8, "dns-settings", v9))
              {
                uint64_t v2 = v2 | 0x40;
                goto LABEL_27;
              }
              if (!strncmp(v8, "relay", v9))
              {
                uint64_t v2 = v2 | 0x80;
                goto LABEL_27;
              }
              if (strncmp(v8, "packet-tunnel-provider-systemextension", v9))
              {
                if (strncmp(v8, "app-proxy-provider-systemextension", v9))
                {
                  if (strncmp(v8, "content-filter-provider-systemextension", v9))
                  {
                    if (strncmp(v8, "dns-proxy-systemextension", v9))
                    {
                      if (!strncmp(v8, "app-push-provider", v9)) {
                        uint64_t v2 = v2 | 0x20;
                      }
                      else {
                        uint64_t v2 = v2;
                      }
                      goto LABEL_27;
                    }
LABEL_24:
                    uint64_t v2 = v2 | 0x10;
                    goto LABEL_27;
                  }
LABEL_23:
                  uint64_t v2 = v2 | 4;
                  goto LABEL_27;
                }
LABEL_22:
                uint64_t v2 = v2 | 2;
                goto LABEL_27;
              }
            }
            uint64_t v2 = v2 | 1;
          }
LABEL_27:
          if (v5 == ++v6) {
            return v2;
          }
        }
      }
    }
  }
  return 0;
}

CFStringRef NECopySynthesizedIPv6Address(const __CFString *a1, int a2)
{
  int v13 = 0;
  CFStringRef v4 = 0;
  if (NEGetAddressFamilyFromString(a1) != 30)
  {
    int v12 = a2;
    int v5 = nw_nat64_copy_prefixes();
    if (v5 < 1)
    {
      CFStringRef v4 = 0;
      uint64_t v7 = 0;
    }
    else
    {
      unsigned int v6 = v5;
      uint64_t v7 = NECreateAddressStructFromString(a1, 0, 0);
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 16 * v6;
        while (1)
        {
          *(_OWORD *)&v11.Class isa = xmmword_19DF9D338;
          *(_OWORD *)((char *)&v11.info + 4) = *(long long *)((char *)&xmmword_19DF9D338 + 12);
          if (nw_nat64_synthesize_v6()) {
            break;
          }
          v8 += 16;
          if (v9 == v8) {
            goto LABEL_7;
          }
        }
        CFStringRef v4 = NECreateAddressString(&v11);
      }
      else
      {
LABEL_7:
        CFStringRef v4 = 0;
      }
    }
    if (v13)
    {
      free(v13);
      int v13 = 0;
    }
    if (v7) {
      free(v7);
    }
  }
  return v4;
}

const char *inputNotification2String(int a1)
{
  if ((a1 - 1) > 5) {
    return "network changed";
  }
  else {
    return off_1E5992FF0[a1 - 1];
  }
}

uint64_t isa_nsset(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsdictionary(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsdata(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsnumber(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsnull(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_nsurl(void *a1)
{
  id v1 = a1;
  objc_opt_class();
  if (v1) {
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

uint64_t isa_neclass()
{
  int v0 = (objc_class *)objc_opt_class();
  id v1 = NSStringFromClass(v0);
  uint64_t v2 = [v1 hasPrefix:@"NE"];

  return v2;
}

id NECopyUserUUIDFromEUID()
{
  uid_t v0 = geteuid();

  return NECopyUserUUIDSimple(v0);
}

id NECopyUserUUIDSimple(uid_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(uu, 0, sizeof(uu));
  mbr_uid_to_uuid(a1, uu);
  id v1 = (void *)[objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:uu];

  return v1;
}

id NECopyUserUUIDFromXPCEUID(_xpc_connection_s *a1)
{
  uid_t euid = xpc_connection_get_euid(a1);

  return NECopyUserUUIDSimple(euid);
}

uint64_t NEGetConsoleUserUID()
{
  uid_t v0 = getpwnam("mobile");
  if (v0) {
    return v0->pw_uid;
  }
  else {
    return 501;
  }
}

id NECopyConsoleUserUUID()
{
  uid_t v0 = getpwnam("mobile");
  if (v0) {
    uid_t pw_uid = v0->pw_uid;
  }
  else {
    uid_t pw_uid = 501;
  }

  return NECopyUserUUIDSimple(pw_uid);
}

BOOL NEUserUUIDIsSynthesized(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v1 = [a1 UUIDString];
  BOOL v2 = [v1 compare:@"FFFFEEEE-DDDD-CCCC-BBBB-AAAA", 1, 0, objc_msgSend(@"FFFFEEEE-DDDD-CCCC-BBBB-AAAA", "length") options range] == 0;

  return v2;
}

uint64_t NECheckConfigurationUserUUID(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = NECopyConsoleUserUUID();
  int v3 = NEGetRootUUID();
  if (v1)
  {
    uint64_t v4 = 0;
    if ([v1 count] && v2 && v3)
    {
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      id v5 = v1;
      uint64_t v6 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void *)v13;
        while (2)
        {
          for (uint64_t i = 0; i != v7; ++i)
          {
            if (*(void *)v13 != v8) {
              objc_enumerationMutation(v5);
            }
            unsigned int v10 = *(void **)(*((void *)&v12 + 1) + 8 * i);
            if ((objc_msgSend(v10, "isEqual:", v2, (void)v12) & 1) == 0
              && ([v10 isEqual:v3] & 1) == 0)
            {
              *(void *)uuid_t uu = 0;
              uint64_t v17 = 0;
              [v10 getUUIDBytes:uu];
              if (!uuid_is_null(uu)) {
                continue;
              }
            }
            uint64_t v4 = 1;
            goto LABEL_19;
          }
          uint64_t v7 = [v5 countByEnumeratingWithState:&v12 objects:v18 count:16];
          uint64_t v4 = 0;
          if (v7) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v4 = 0;
      }
LABEL_19:
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id NEGetRootUUID()
{
  if (NEGetRootUUID_onceToken != -1) {
    dispatch_once(&NEGetRootUUID_onceToken, &__block_literal_global_15);
  }
  uid_t v0 = (void *)NEGetRootUUID_rootUUID;

  return v0;
}

uint64_t __NEGetRootUUID_block_invoke()
{
  uint64_t v0 = NECopyUserUUIDSimple(0);
  uint64_t v1 = NEGetRootUUID_rootUUID;
  NEGetRootUUID_rootUUID = v0;

  return MEMORY[0x1F41817F8](v0, v1);
}

id NEGetNullUUID()
{
  if (NEGetNullUUID_onceToken != -1) {
    dispatch_once(&NEGetNullUUID_onceToken, &__block_literal_global_24647);
  }
  uint64_t v0 = (void *)NEGetNullUUID_nullUUID;

  return v0;
}

void __NEGetNullUUID_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v0 = [objc_alloc(MEMORY[0x1E4F29128]) initWithUUIDBytes:uu];
  uint64_t v1 = (void *)NEGetNullUUID_nullUUID;
  NEGetNullUUID_nullUUID = v0;
}

id NEGetBundleIdentifierFromAppID(void *a1)
{
  id v1 = a1;
  if ((unint64_t)[v1 length] < 0xC)
  {
    BOOL v2 = 0;
  }
  else
  {
    BOOL v2 = objc_msgSend(v1, "substringWithRange:", 11, objc_msgSend(v1, "length") - 11);
  }

  return v2;
}

uint64_t NEGetSystemWakeTime()
{
  return objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9C8]), "initWithTimeIntervalSinceReferenceDate:", 0.0, 0);
}

void neZeroOutNSData(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v3 = v1;
    rsize_t v2 = [v1 length];
    id v1 = v3;
    if (v2)
    {
      memset_s((void *)[v3 bytes], v2, 0, v2);
      id v1 = v3;
    }
  }
}

id trimURL(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    rsize_t v2 = v1;
    id v3 = [v1 port];

    if (v3)
    {
      uint64_t v4 = NSString;
      id v5 = [v2 port];
      uint64_t v6 = [v4 stringWithFormat:@":%@", v5];
    }
    else
    {
      uint64_t v6 = &stru_1EF054CB8;
    }
    uint64_t v8 = [v2 host];
    uint64_t v9 = [MEMORY[0x1E4F38BF0] endpointWithHostname:v8 port:@"0"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 addressFamily] == 30)
    {
      uint64_t v10 = [[NSString alloc] initWithFormat:@"[%@]", v8];

      uint64_t v8 = (void *)v10;
    }
    __CFString v11 = (void *)MEMORY[0x1E4F1CB10];
    long long v12 = NSString;
    long long v13 = [v2 scheme];
    long long v14 = [v2 path];
    if (v14)
    {
      long long v15 = [v2 path];
    }
    else
    {
      long long v15 = &stru_1EF054CB8;
    }
    UInt8 v16 = [v12 stringWithFormat:@"%@://%@%@%@", v13, v8, v6, v15];
    uint64_t v7 = [v11 URLWithString:v16];

    if (v14) {
  }
    }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id createEthernetAddressFromString(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  rsize_t v2 = [v1 componentsSeparatedByString:@":"];
  if ([v2 count] == 6)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4F1CA58]);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = v2;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v17 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          if (![v9 length])
          {
            long long v12 = ne_log_obj();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
LABEL_19:

              goto LABEL_20;
            }
            *(_DWORD *)long long buf = 138412290;
            id v22 = v1;
            long long v13 = "Ethernet address string %@ is missing a byte";
LABEL_25:
            _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0xCu);
            goto LABEL_19;
          }
          __endptr = 0;
          uint64_t v10 = strtol((const char *)[v9 UTF8String], &__endptr, 16);
          if (*__endptr || v10 > 255 || v10 < 0)
          {
            long long v12 = ne_log_obj();
            if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
              goto LABEL_19;
            }
            *(_DWORD *)long long buf = 138412290;
            id v22 = v1;
            long long v13 = "Ethernet address string %@ has an invalid byte";
            goto LABEL_25;
          }
          buf[0] = v10;
          [v3 appendBytes:buf length:1];
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

    __CFString v11 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithData:v3];
  }
  else
  {
    id v3 = ne_log_obj();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412546;
      id v22 = v1;
      __int16 v23 = 1024;
      int v24 = 6;
      _os_log_error_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_ERROR, "Ethernet address string %@ does not have %d bytes", buf, 0x12u);
    }
LABEL_20:
    __CFString v11 = 0;
  }

  return v11;
}

id NECopyETLDPlusOne(void *a1)
{
  id v1 = (void *)MEMORY[0x1E4F28B88];
  id v2 = a1;
  id v3 = [v1 characterSetWithCharactersInString:@"."];
  id v4 = [v2 stringByTrimmingCharactersInSet:v3];

  uint64_t v5 = [v4 componentsSeparatedByString:@"."];
  if ((unint64_t)[v5 count] >= 2)
  {
    uint64_t v7 = objc_msgSend(v5, "subarrayWithRange:", objc_msgSend(v5, "count") - 2, 2);
    uint64_t v6 = [v7 componentsJoinedByString:@"."];
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t NEPIDByName(const char *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(void *)long long v19 = 0x600000001;
  int v14 = 0;
  size_t v13 = 4;
  if (sysctl(v19, 2u, &v14, &v13, 0, 0) < 0)
  {
    uint64_t v9 = ne_log_obj();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      __CFString v11 = __error();
      long long v12 = strerror(*v11);
      int buffer = 136315394;
      long long v16 = "NEKernMaxProc";
      __int16 v17 = 2080;
      long long v18 = v12;
      _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, "%s: Failed to get max proc count (%s)", (uint8_t *)&buffer, 0x16u);
    }
    return 0;
  }
  if (!v14) {
    return 0;
  }
  int v2 = 4 * v14;
  id v3 = malloc_type_malloc(4 * v14, 0xF88153BEuLL);
  if (!v3) {
    return 0;
  }
  id v4 = v3;
  int v5 = proc_listallpids(v3, v2);
  if (v5 < 1)
  {
LABEL_9:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5;
    while (!proc_name(v4[v6], &buffer, 0x64u) || strcmp((const char *)&buffer, a1))
    {
      if (v7 == ++v6) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = v4[v6];
  }
  free(v4);
  return v8;
}

uint64_t NECopySigningIdentifierForPIDwithAuditToken()
{
  uint64_t result = ne_copy_signing_identifier_for_pid_with_audit_token();
  if (result)
  {
    id v1 = (void *)result;
    uint64_t v2 = _CFXPCCreateCFObjectFromXPCObject();
    xpc_release(v1);
    return v2;
  }
  return result;
}

uint64_t NECopySigningIdentifierForPID()
{
  return NECopySigningIdentifierForPIDwithAuditToken();
}

CFStringRef NECopySigningIdentifierForXPCMessage(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1 || MEMORY[0x19F3B92C0]() != MEMORY[0x1E4F14590])
  {
    uint64_t v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "NECopySigningIdentifierForXPCMessage";
    uint64_t v10 = "XPC object passed to %s is NULL or is not a dictionary";
    p_audit_token_t cf = buf;
    long long v12 = v2;
    uint32_t v13 = 12;
LABEL_15:
    _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, v10, p_cf, v13);
    return 0;
  }
  *(_OWORD *)long long buf = 0u;
  long long v20 = 0u;
  xpc_dictionary_get_audit_token();
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  memset(&cf, 0, sizeof(cf));
  uint64_t v6 = SecTaskCreateWithAuditToken(v5, &cf);
  if (!v6)
  {
    uint64_t v9 = ne_log_obj();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    LOWORD(cf.val[0]) = 0;
    uint64_t v10 = "Failed to create a task from audit token";
    p_audit_token_t cf = (uint8_t *)&cf;
    long long v12 = v9;
    uint32_t v13 = 2;
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  *(void *)cf.val = 0;
  CFStringRef v3 = SecTaskCopySigningIdentifier(v6, (CFErrorRef *)&cf);
  if (*(void *)cf.val)
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(a1);
      pid_t pid = xpc_connection_get_pid(remote_connection);
      *(_DWORD *)__int16 v17 = 67109120;
      pid_t v18 = pid;
      _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, "Failed to get the signing identifier of process %d", v17, 8u);
    }
    CFRelease(*(CFTypeRef *)cf.val);
  }
  CFRelease(v7);
  return v3;
}

BOOL NEAuditTokenForPID(int pid, integer_t *a2)
{
  kern_return_t v4;
  mach_error_t v5;
  NSObject *v6;
  BOOL result;
  char *v8;
  const char *v9;
  kern_return_t v10;
  mach_error_t v11;
  char *v12;
  mach_msg_type_number_t task_info_outCnt;
  mach_port_name_t target_task;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  mach_error_t v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  task_info_outCnt = 8;
  target_tasuint64_t k = 0;
  id v4 = task_for_pid(*MEMORY[0x1E4F14960], pid, &target_task);
  if (v4)
  {
    CFAllocatorRef v5 = v4;
    uint64_t v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    uint64_t v8 = mach_error_string(v5);
    *(_DWORD *)long long buf = 67109634;
    long long v16 = pid;
    __int16 v17 = 1024;
    pid_t v18 = v5;
    long long v19 = 2080;
    long long v20 = v8;
    uint64_t v9 = "task_for_pid(mach_task_self(), %d, &task) => %d (%s)\n";
LABEL_7:
    _os_log_debug_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_DEBUG, v9, buf, 0x18u);
    return 0;
  }
  uint64_t v10 = task_info(target_task, 0xFu, a2, &task_info_outCnt);
  if (v10)
  {
    __CFString v11 = v10;
    uint64_t v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    long long v12 = mach_error_string(v11);
    *(_DWORD *)long long buf = 67109634;
    long long v16 = pid;
    __int16 v17 = 1024;
    pid_t v18 = v11;
    long long v19 = 2080;
    long long v20 = v12;
    uint64_t v9 = "task_info(mach_task_self(), %d, TASK_AUDIT_TOKEN) => %d (%s)\n";
    goto LABEL_7;
  }
  return 1;
}

uint64_t NEGIDForAuditToken()
{
  return 0;
}

uint64_t NECopyBootstrapPortForPID()
{
  return 0;
}

uint64_t NECopyAuditPortForAuditToken()
{
  return 0;
}

__CFDictionary *NEVirtualInterfaceCopyIPStateDictionary(uint64_t a1, int a2, int a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(a1 + 265), 0x600u);
    if (a2 != 30)
    {
      if (a2 == 2)
      {
        if (*(unsigned char *)(a1 + 312)) {
          goto LABEL_8;
        }
        uint64_t v8 = *(__CFDictionary **)(a1 + 320);
        CFTypeID TypeID = CFArrayGetTypeID();
        if (!v8) {
          goto LABEL_26;
        }
        if (CFGetTypeID(v8) == TypeID && CFArrayGetCount(*(CFArrayRef *)(a1 + 320)) >= 1)
        {
LABEL_8:
          CFDataRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          uint64_t v8 = Mutable;
          if (Mutable)
          {
            CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41BA0], v7);
            __CFString v11 = *(const void **)(a1 + 320);
            CFTypeID v12 = CFArrayGetTypeID();
            uint32_t v13 = (const void **)MEMORY[0x1E4F41CA8];
            if (v11 && CFGetTypeID(v11) == v12 && CFArrayGetCount(*(CFArrayRef *)(a1 + 320)))
            {
              int v14 = (const void *)*MEMORY[0x1E4F41C60];
              long long v15 = *(__CFString **)(a1 + 320);
            }
            else
            {
              int v26 = CFArrayCreateMutable(v6, 1, MEMORY[0x1E4F1D510]);
              if (v26)
              {
                __int16 v27 = v26;
                CFArrayAppendValue(v26, @"127.0.0.1");
                CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41C60], v27);
                CFRelease(v27);
              }
              CFDictionarySetValue(v8, @"IsNULL", (const void *)*MEMORY[0x1E4F1CFD0]);
              int v14 = *v13;
              long long v15 = @"127.0.0.1";
            }
            CFDictionarySetValue(v8, v14, v15);
            int v28 = *(const void **)(a1 + 344);
            CFTypeID v29 = CFArrayGetTypeID();
            if (v28 && CFGetTypeID(v28) == v29 && CFArrayGetCount(*(CFArrayRef *)(a1 + 344)) >= 1) {
              CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41C58], *(const void **)(a1 + 344));
            }
            if (a3)
            {
              CFStringRef v30 = *(const __CFString **)(a1 + 472);
              if (v30) {
                NEVirtualInterfaceAddIPv4Route(a1, v30, @"255.255.255.255", 0, 1);
              }
            }
            uint64_t v31 = *(const void **)(a1 + 352);
            CFTypeID v32 = CFArrayGetTypeID();
            if (v31 && CFGetTypeID(v31) == v32 && CFArrayGetCount(*(CFArrayRef *)(a1 + 352)) >= 1) {
              CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41C78], *(const void **)(a1 + 352));
            }
            uint32x4_t v33 = *(const void **)(a1 + 456);
            CFTypeID v34 = CFStringGetTypeID();
            if (v33 && CFGetTypeID(v33) == v34)
            {
              int32x4_t v35 = *v13;
              CFNumberRef ValueAtIndex = *(const void **)(a1 + 456);
              uint64x2_t v37 = v8;
            }
            else
            {
              uint64x2_t v50 = *(const void **)(a1 + 320);
              CFTypeID v51 = CFArrayGetTypeID();
              if (!v50 || CFGetTypeID(v50) != v51 || CFArrayGetCount(*(CFArrayRef *)(a1 + 320)) < 1)
              {
LABEL_69:
                long long v53 = *(const void **)(a1 + 472);
                CFTypeID v54 = CFStringGetTypeID();
                if (v53 && CFGetTypeID(v53) == v54) {
                  CFDictionarySetValue(v8, @"ServerAddress", *(const void **)(a1 + 472));
                }
                goto LABEL_26;
              }
              uint64x2_t v52 = *v13;
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 320), 0);
              uint64x2_t v37 = v8;
              int32x4_t v35 = v52;
            }
            CFDictionarySetValue(v37, v35, ValueAtIndex);
            goto LABEL_69;
          }
LABEL_26:
          if (v7) {
            CFRelease(v7);
          }
          return v8;
        }
      }
LABEL_25:
      uint64_t v8 = 0;
      goto LABEL_26;
    }
    if ((*(unsigned char *)(a1 + 312) & 1) == 0)
    {
      uint64_t v8 = *(__CFDictionary **)(a1 + 328);
      CFTypeID v16 = CFArrayGetTypeID();
      if (!v8) {
        goto LABEL_26;
      }
      if (CFGetTypeID(v8) != v16 || CFArrayGetCount(*(CFArrayRef *)(a1 + 328)) < 1) {
        goto LABEL_25;
      }
    }
    *(_DWORD *)long long buf = 128;
    __int16 v17 = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v8 = v17;
    if (!v17) {
      goto LABEL_26;
    }
    CFDictionarySetValue(v17, (const void *)*MEMORY[0x1E4F41BA0], v7);
    pid_t v18 = *(const void **)(a1 + 328);
    CFTypeID v19 = CFArrayGetTypeID();
    long long v20 = (const void **)MEMORY[0x1E4F41D10];
    if (v18 && CFGetTypeID(v18) == v19 && CFArrayGetCount(*(CFArrayRef *)(a1 + 328)))
    {
      CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41CC0], *(const void **)(a1 + 328));
      CFStringRef v21 = *(CFStringRef *)(a1 + 336);
      CFTypeID v22 = CFArrayGetTypeID();
      if (!v21)
      {
LABEL_50:
        int v40 = *(const void **)(a1 + 360);
        CFTypeID v41 = CFArrayGetTypeID();
        if (v40 && CFGetTypeID(v40) == v41 && CFArrayGetCount(*(CFArrayRef *)(a1 + 360)) >= 1) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41CB8], *(const void **)(a1 + 360));
        }
        if (a3 && *(void *)(a1 + 472))
        {
          CFNumberRef v42 = CFNumberCreate(v6, kCFNumberIntType, buf);
          NEVirtualInterfaceAddIPv6Route(a1, *(const __CFString **)(a1 + 472), v42, 0, 1);
          CFRelease(v42);
        }
        int32x4_t v43 = *(const void **)(a1 + 368);
        CFTypeID v44 = CFArrayGetTypeID();
        if (v43 && CFGetTypeID(v43) == v44 && CFArrayGetCount(*(CFArrayRef *)(a1 + 368)) >= 1) {
          CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41CD0], *(const void **)(a1 + 368));
        }
        int32x4_t v45 = *(const void **)(a1 + 464);
        CFTypeID v46 = CFStringGetTypeID();
        if (v45 && CFGetTypeID(v45) == v46)
        {
          int64x2_t v47 = *v20;
          CFStringRef v48 = *(CFStringRef *)(a1 + 464);
          int8x16_t v49 = v8;
        }
        else
        {
          CFTypeID v55 = CFStringGetTypeID();
          if (!v21 || CFGetTypeID(v21) != v55) {
            goto LABEL_76;
          }
          int64x2_t v47 = *v20;
          int8x16_t v49 = v8;
          CFStringRef v48 = v21;
        }
        CFDictionarySetValue(v49, v47, v48);
LABEL_76:
        CFIndex v56 = *(const void **)(a1 + 472);
        CFTypeID v57 = CFStringGetTypeID();
        if (v56 && CFGetTypeID(v56) == v57) {
          CFDictionarySetValue(v8, @"ServerAddress", *(const void **)(a1 + 472));
        }
        if (v21) {
          CFRelease(v21);
        }
        goto LABEL_26;
      }
      if (CFGetTypeID(v21) == v22 && CFArrayGetCount(*(CFArrayRef *)(a1 + 336)) >= 1)
      {
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41CE8], *(const void **)(a1 + 336));
        int valuePtr = 0;
        CFNumberRef v23 = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 336), 0);
        CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
        CFStringRef v24 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 328), 0);
        CFStringRef v21 = NECreateIPv6SubnetAddressWithPrefix(v24, valuePtr);
        goto LABEL_50;
      }
    }
    else
    {
      uint64x2_t v38 = CFArrayCreateMutable(v6, 1, MEMORY[0x1E4F1D510]);
      if (v38)
      {
        uint64x2_t v39 = v38;
        CFArrayAppendValue(v38, @"::1");
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F41CC0], v39);
        CFRelease(v39);
      }
      CFDictionarySetValue(v8, @"IsNULL", (const void *)*MEMORY[0x1E4F1CFD0]);
      CFDictionarySetValue(v8, *v20, @"::1");
    }
    CFStringRef v21 = 0;
    goto LABEL_50;
  }
  unsigned __int16 v58 = ne_log_obj();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    unsigned __int8 v61 = "NEVirtualInterfaceCopyIPStateDictionary";
    _os_log_fault_impl(&dword_19DDAF000, v58, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
  }
  return 0;
}

uint64_t NEVirtualInterfaceAddIPv4Route(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v25 = 0;
  if (!a1)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "interface is NULL";
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 264))
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "interface created from socket";
LABEL_16:
    _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "address is not a CFString";
    goto LABEL_16;
  }
  CFDataRef v14 = NECreateAddressDataFromString(a2, 0, &v25);
  if (!v14)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "NECreateAddressDataFromString failed";
    goto LABEL_16;
  }
  CFDataRef v15 = v14;
  if (v25 != 2)
  {
    CFRelease(v14);
    return 0;
  }
  int v16 = *CFDataGetBytePtr(v14);
  CFRelease(v15);
  if (v16 == 127)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "address is loopback";
    goto LABEL_16;
  }
  uint64_t v17 = 352;
  if (!a5) {
    uint64_t v17 = 344;
  }
  pid_t v18 = *(void **)(a1 + v17);
  CFTypeID v19 = CFArrayGetTypeID();
  if (!v18) {
    return 0;
  }
  if (CFGetTypeID(v18) != v19) {
    return 0;
  }
  if (isA_CFString(a3))
  {
    int v20 = v25;
    if (v20 != NEGetAddressFamilyFromString(a3)) {
      return 0;
    }
  }
  if (isA_CFString(a4))
  {
    int v21 = v25;
    if (v21 != NEGetAddressFamilyFromString(a4)) {
      return 0;
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t result = (uint64_t)isA_CFDictionary(Mutable);
  if (result)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41C88], a2);
    if (isA_CFString(a3)) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41CA0], a3);
    }
    if (isA_CFString(a4)) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41C90], a4);
    }
    if (a5 && isA_CFString(*(const void **)(a1 + 480))) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41C98], *(const void **)(a1 + 480));
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      CFNumberRef v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136316162;
        uint64_t v27 = a1 + 265;
        CFStringRef v24 = "";
        __int16 v28 = 2080;
        if (a5) {
          CFStringRef v24 = "excluded ";
        }
        CFTypeID v29 = v24;
        __int16 v30 = 2112;
        CFStringRef v31 = a2;
        __int16 v32 = 2112;
        CFStringRef v33 = a3;
        __int16 v34 = 2112;
        CFStringRef v35 = a4;
        _os_log_debug_impl(&dword_19DDAF000, v23, OS_LOG_TYPE_DEBUG, "%s: added %sIPv4 route to %@ netmask %@ gateway %@", buf, 0x34u);
      }
    }
    CFArrayAppendValue((CFMutableArrayRef)v18, Mutable);
    if (Mutable) {
      CFRelease(Mutable);
    }
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceAddIPv6Route(uint64_t a1, const __CFString *a2, const void *a3, const __CFString *a4, int a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v23 = 0;
  if (!a1)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "interface is NULL";
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 264))
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "interface created from socket";
    goto LABEL_16;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "address is not a CFString";
    goto LABEL_16;
  }
  CFDataRef v14 = NECreateAddressDataFromString(a2, 0, &v23);
  if (!v14)
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "NECreateAddressDataFromString failed";
    goto LABEL_16;
  }
  CFDataRef v15 = v14;
  if (v23 != 30)
  {
    CFRelease(v14);
    return 0;
  }
  int32x4_t v22 = 0uLL;
  if (CFDataGetLength(v14) <= 15)
  {
    CFRelease(v15);
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "NECreateAddressDataFromString result too short";
    goto LABEL_16;
  }
  v35.locatiouint64_t n = 0;
  v35.__int16 length = 16;
  CFDataGetBytes(v15, v35, (UInt8 *)&v22);
  CFRelease(v15);
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v22, (int32x4_t)xmmword_19DF9BF40)))))
  {
    uint64_t v16 = 368;
    if (!a5) {
      uint64_t v16 = 360;
    }
    uint64_t v17 = *(void **)(a1 + v16);
    uint64_t result = (uint64_t)isA_CFArray(v17);
    if (result)
    {
      if (isA_CFString(a4))
      {
        int v18 = v23;
        if (v18 != NEGetAddressFamilyFromString(a4)) {
          return 0;
        }
      }
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t result = (uint64_t)isA_CFDictionary(Mutable);
      if (result)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41CF0], a2);
        if (isA_CFNumber(a3)) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41D08], a3);
        }
        if (isA_CFString(a4)) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41CF8], a4);
        }
        if (a5 && isA_CFString(*(const void **)(a1 + 480))) {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F41D00], *(const void **)(a1 + 480));
        }
        if (nelog_is_extra_vpn_logging_enabled())
        {
          int v20 = ne_log_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 136316162;
            uint64_t v25 = a1 + 265;
            int v21 = "";
            __int16 v26 = 2080;
            if (a5) {
              int v21 = "excluded ";
            }
            uint64_t v27 = v21;
            __int16 v28 = 2112;
            CFStringRef v29 = a2;
            __int16 v30 = 2112;
            CFStringRef v31 = a3;
            __int16 v32 = 2112;
            CFStringRef v33 = a4;
            _os_log_debug_impl(&dword_19DDAF000, v20, OS_LOG_TYPE_DEBUG, "%s: added %sIPv6 route to %@ plen %@ gateway %@", buf, 0x34u);
          }
        }
        CFArrayAppendValue((CFMutableArrayRef)v17, Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        return 1;
      }
    }
  }
  else
  {
    CFAllocatorRef v6 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)long long buf = 0;
      uint64_t v8 = "address is loopback";
LABEL_16:
      _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, v8, buf, 2u);
      return 0;
    }
  }
  return result;
}

const void *isA_CFArray(const void *a1)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

const void *isA_CFString(const void *a1)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

const void *isA_CFDictionary(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

const void *isA_CFNumber(const void *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) == TypeID) {
    return a1;
  }
  return 0;
}

CFStringRef NEVirtualInterfaceCopyName(CFStringRef result)
{
  if (result) {
    return CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)&result[8].info + 1, 0x600u);
  }
  return result;
}

__CFDictionary *NEVirtualInterfaceCopyRouteCacheFromRoutes(const __CFArray *a1, int a2)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    return 0;
  }
  uint64_t v5 = Count;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFStringRef v7 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]);
  uint64_t v9 = CFArrayCreateMutable(v6, 0, v7);
  if (v5 >= 1)
  {
    CFIndex v10 = 0;
    CFRange v35 = (const void *)*MEMORY[0x1E4F41D08];
    key = (void *)*MEMORY[0x1E4F41CF0];
    CFStringRef v33 = (void *)*MEMORY[0x1E4F41CA0];
    uint64_t v34 = (void *)*MEMORY[0x1E4F41C88];
    CFStringRef v31 = Mutable;
    uint64_t v32 = v5;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
      if (!ValueAtIndex) {
        goto LABEL_35;
      }
      CFDictionaryRef v12 = ValueAtIndex;
      if (a2) {
        break;
      }
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v34);
      CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(v12, v33);
      *(_DWORD *)UInt8 bytes = 2;
      int v40 = 2;
      CFDataRef v21 = NECreateAddressDataFromString(Value, 0, (int *)bytes);
      CFDataRef v22 = NECreateAddressDataFromString(v20, 0, &v40);
      CFDataRef v23 = v22;
      if (*(_DWORD *)bytes == 2 && v21)
      {
        CFArrayAppendValue(Mutable, v21);
        if (v40 == 2 && v23)
        {
          CFArrayAppendValue(v9, v23);
        }
        else
        {
          *(_DWORD *)uint64x2_t v39 = -1;
          CFDataRef v27 = CFDataCreate(v6, v39, 4);
          CFArrayAppendValue(v9, v27);
          if (v27) {
            CFRelease(v27);
          }
        }
      }
      else if (!v21)
      {
        if (!v22) {
          goto LABEL_35;
        }
LABEL_33:
        CFStringRef v24 = (const __CFString *)v23;
LABEL_34:
        CFRelease(v24);
        goto LABEL_35;
      }
      CFRelease(v21);
      if (v23) {
        goto LABEL_33;
      }
LABEL_35:
      if (v5 == ++v10) {
        goto LABEL_36;
      }
    }
    CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, key);
    int v14 = NEGetIntFromDictionary(v12, v35, 0);
    CFStringRef v15 = NECreateIPv6AddressMaskStringFromPrefix(v14);
    *(_DWORD *)uint64x2_t v39 = 30;
    int v40 = 30;
    CFDataRef v16 = NECreateAddressDataFromString(v13, 0, &v40);
    CFDataRef v17 = NECreateAddressDataFromString(v15, 0, (int *)v39);
    CFDataRef v18 = v17;
    if (v40 == 30 && v16)
    {
      CFArrayAppendValue(Mutable, v16);
      if (*(_DWORD *)v39 == 30 && v18)
      {
        CFArrayAppendValue(v9, v18);
      }
      else
      {
        *(void *)UInt8 bytes = -1;
        uint64_t v38 = -1;
        CFAllocatorRef v25 = v6;
        CFDataRef v26 = CFDataCreate(v6, bytes, 16);
        CFArrayAppendValue(v9, v26);
        if (v26) {
          CFRelease(v26);
        }
        CFAllocatorRef v6 = v25;
        CFMutableDictionaryRef Mutable = v31;
        uint64_t v5 = v32;
      }
    }
    else if (!v16)
    {
      if (!v17) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    CFRelease(v16);
    if (!v18)
    {
LABEL_20:
      if (v15)
      {
        CFStringRef v24 = v15;
        goto LABEL_34;
      }
      goto LABEL_35;
    }
LABEL_19:
    CFRelease(v18);
    goto LABEL_20;
  }
LABEL_36:
  __int16 v28 = theDict;
  CFDictionarySetValue(theDict, @"subnet-addresses", Mutable);
  CFDictionarySetValue(theDict, @"subnet-masks", v9);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v28;
}

unint64_t NEVirtualInterfaceUpdateAdHocService(uint64_t a1)
{
  return NEVirtualInterfaceUpdateAdHocServiceReturnChanges(a1, 0, 1);
}

unint64_t NEVirtualInterfaceUpdateAdHocServiceReturnChanges(uint64_t a1, uint64_t *a2, int a3)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v88 = a1 + 265;
    CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)(a1 + 265), 0x600u);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v8 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
    CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F41AC8];
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, (CFStringRef)*MEMORY[0x1E4F41AC8], *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E4F41B10]);
    CFStringRef v11 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E4F41B18]);
    CFStringRef value = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E4F41B08]);
    CFStringRef key = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E4F41B40]);
    CFStringRef v89 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), (CFStringRef)*MEMORY[0x1E4F41B48]);
    CFStringRef v90 = SCDynamicStoreKeyCreateNetworkServiceEntity(v5, v9, *(CFStringRef *)(a1 + 488), 0);
    if (a2) {
      *a2 = 0;
    }
    unint64_t v12 = 0;
    if (!v6 || !Mutable || !v8 || !NetworkServiceEntity || !v11)
    {
LABEL_177:
      if (!v6)
      {
LABEL_179:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (NetworkServiceEntity) {
          CFRelease(NetworkServiceEntity);
        }
        if (v11) {
          CFRelease(v11);
        }
        if (value) {
          CFRelease(value);
        }
        if (key) {
          CFRelease(key);
        }
        if (v90) {
          CFRelease(v90);
        }
        if (v89) {
          CFRelease(v89);
        }
        return v12;
      }
LABEL_178:
      CFRelease(v6);
      goto LABEL_179;
    }
    if (*(void *)(a1 + 416))
    {
      CFStringRef v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v12 = (unint64_t)v13;
      if (!v13) {
        goto LABEL_178;
      }
      int v14 = *(const void **)(a1 + 416);
      if (v14) {
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F41BC0], v14);
      }
      CFStringRef v15 = *(const void **)(a1 + 432);
      if (v15) {
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BB0], v15);
      }
      CFDataRef v16 = *(const void **)(a1 + 424);
      if (v16) {
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BB8], v16);
      }
      CFDataRef v17 = *(const void **)(a1 + 392);
      if (v17) {
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BD8], v17);
      }
      CFDataRef v18 = *(const void **)(a1 + 400);
      if (v18) {
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BE8], v18);
      }
      if (*(_DWORD *)(a1 + 408))
      {
        CFNumberRef v19 = CFNumberCreate(v5, kCFNumberIntType, (const void *)(a1 + 408));
        if (v19)
        {
          CFNumberRef v20 = v19;
          CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BE0], v19);
          CFRelease(v20);
        }
      }
      int v21 = *(_DWORD *)(a1 + 444);
      if (v21 >= 1) {
        NEAddIntToDictionary((__CFDictionary *)v12, (const void *)*MEMORY[0x1E4F41BC8], v21);
      }
      int v22 = *(_DWORD *)(a1 + 440);
      if (v22)
      {
        NEAddIntToDictionary((__CFDictionary *)v12, (const void *)*MEMORY[0x1E4F41BD0], v22);
        CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BA0], v6);
      }
      if (*(unsigned char *)(a1 + 312)) {
        goto LABEL_85;
      }
      CFArrayRef v23 = *(const __CFArray **)(a1 + 416);
      if (v23
        && CFArrayGetCount(v23) >= 1
        && ((CFArrayRef v24 = *(const __CFArray **)(a1 + 344)) != 0 && CFArrayGetCount(v24) > 0
         || (CFArrayRef v25 = *(const __CFArray **)(a1 + 360)) != 0 && CFArrayGetCount(v25) >= 1))
      {
        CFDataRef v26 = NEVirtualInterfaceCopyRouteCacheFromRoutes(*(const __CFArray **)(a1 + 344), 0);
        uint64_t v27 = (uint64_t)NEVirtualInterfaceCopyRouteCacheFromRoutes(*(const __CFArray **)(a1 + 360), 1);
        CFTypeRef cf = v26;
        CFTypeRef v80 = (CFTypeRef)v27;
        if (v26)
        {
          CFDataRef v26 = (void *)_CFXPCCreateXPCObjectFromCFObject();
          uint64_t v27 = (uint64_t)v80;
        }
        if (v27) {
          uint64_t v27 = _CFXPCCreateXPCObjectFromCFObject();
        }
        xpc_object_t v83 = (xpc_object_t)v27;
        if (v26)
        {
          xpc_object_t v28 = xpc_dictionary_create(0, 0, 0);
          if (v28)
          {
            xpc_object_t v82 = v28;
            xpc_dictionary_set_value(v28, "ipv4-subnets", v26);
          }
          else
          {
            xpc_object_t v82 = 0;
          }
          uint64_t v27 = (uint64_t)v83;
        }
        else
        {
          xpc_object_t v82 = 0;
        }
        CFStringRef v85 = NetworkServiceEntity;
        if (v27 && (xpc_object_t v31 = xpc_dictionary_create(0, 0, 0)) != 0)
        {
          xpc_object_t v81 = v31;
          xpc_dictionary_set_value(v31, "ipv6-subnets", v83);
        }
        else
        {
          xpc_object_t v81 = 0;
        }
        xpc_object_t object = v26;
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 416));
        if (Count < 1)
        {
          char v41 = 0;
          goto LABEL_72;
        }
        CFIndex v33 = Count;
        CFStringRef v77 = v11;
        CFStringRef v78 = v6;
        CFIndex v34 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 416), v34);
          if (ValueAtIndex)
          {
            uint64_t v36 = (unsigned __int8 *)NECreateAddressStructFromString(ValueAtIndex, 0, 0);
            if (v36)
            {
              uint64x2_t v37 = v36;
              int v38 = v36[1];
              if (object && v38 == 2)
              {
                char v39 = ne_session_address_matches_subnets();
                free(v37);
                if ((v39 & 1) == 0) {
                  goto LABEL_70;
                }
              }
              else
              {
                if (!v83 || v38 != 30)
                {
                  free(v36);
LABEL_70:
                  char v41 = 1;
LABEL_71:
                  CFStringRef v11 = v77;
                  CFStringRef v6 = v78;
LABEL_72:
                  CFStringRef NetworkServiceEntity = v85;
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v80) {
                    CFRelease(v80);
                  }
                  if (object) {
                    xpc_release(object);
                  }
                  if (v83) {
                    xpc_release(v83);
                  }
                  if (v82) {
                    xpc_release(v82);
                  }
                  if (v81) {
                    xpc_release(v81);
                  }
                  if ((v41 & 1) == 0) {
LABEL_85:
                  }
                    CFDictionarySetValue((CFMutableDictionaryRef)v12, (const void *)*MEMORY[0x1E4F41BA8], *(const void **)(a1 + 488));
                  break;
                }
                int v40 = ne_session_address_matches_subnets();
                free(v37);
                if (!v40) {
                  goto LABEL_70;
                }
              }
            }
          }
          if (v33 == ++v34)
          {
            char v41 = 0;
            goto LABEL_71;
          }
        }
      }
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), v12, value))
      {
        *a2 |= 2uLL;
      }
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting DNS to dictionary with keys", (CFDictionaryRef)v12);
      CFDictionarySetValue(Mutable, value, (const void *)v12);
      CFRelease((CFTypeRef)v12);
      int v30 = a3;
    }
    else
    {
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), 0, value))
      {
        *a2 |= 2uLL;
      }
      CFStringRef v29 = ne_log_obj();
      int v30 = a3;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v88;
        _os_log_impl(&dword_19DDAF000, v29, OS_LOG_TYPE_DEFAULT, "%s: removing DNS", buf, 0xCu);
      }
      CFArrayAppendValue(v8, value);
    }
    CFNumberRef v42 = NEVirtualInterfaceCopyIPStateDictionary(a1, 2, v30);
    if (a2
      && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)v42, NetworkServiceEntity))
    {
      *a2 |= 1uLL;
      if (v42) {
        goto LABEL_93;
      }
    }
    else if (v42)
    {
LABEL_93:
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting IPv4 to dictionary with keys", v42);
      CFDictionarySetValue(Mutable, NetworkServiceEntity, v42);
      CFRelease(v42);
      goto LABEL_98;
    }
    int32x4_t v43 = ne_log_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_19DDAF000, v43, OS_LOG_TYPE_DEFAULT, "%s: removing IPv4", buf, 0xCu);
    }
    CFArrayAppendValue(v8, NetworkServiceEntity);
LABEL_98:
    CFTypeID v44 = NEVirtualInterfaceCopyIPStateDictionary(a1, 30, v30);
    if (a2
      && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)v44, v11))
    {
      *a2 |= 1uLL;
      if (v44) {
        goto LABEL_101;
      }
    }
    else if (v44)
    {
LABEL_101:
      NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting IPv6 to dictionary with keys", v44);
      CFStringRef v45 = v11;
      CFDictionarySetValue(Mutable, v11, v44);
      CFRelease(v44);
      goto LABEL_106;
    }
    CFTypeID v46 = ne_log_obj();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v88;
      _os_log_impl(&dword_19DDAF000, v46, OS_LOG_TYPE_DEFAULT, "%s: removing IPv6", buf, 0xCu);
    }
    CFStringRef v45 = v11;
    CFArrayAppendValue(v8, v11);
LABEL_106:
    int64x2_t v47 = *(const void **)(a1 + 448);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFStringRef v86 = NetworkServiceEntity;
    if ((!v47 || CFGetTypeID(v47) != TypeID) && (*(unsigned char *)(a1 + 312) & 1) == 0 && !*(void *)(a1 + 392))
    {
      if (a2
        && !NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), 0, key))
      {
        *a2 |= 4uLL;
      }
      CFIndex v56 = ne_log_obj();
      CFStringRef v11 = v45;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v88;
        _os_log_impl(&dword_19DDAF000, v56, OS_LOG_TYPE_DEFAULT, "%s: removing proxies", buf, 0xCu);
      }
      CFArrayAppendValue(v8, key);
      if (a2) {
        goto LABEL_124;
      }
      goto LABEL_134;
    }
    int8x16_t v49 = *(const void **)(a1 + 448);
    CFTypeID v50 = CFDictionaryGetTypeID();
    if (v49 && CFGetTypeID(v49) == v50)
    {
      CFTypeID v51 = *(const void **)(a1 + 448);
      if (v51) {
        CFDictionaryRef Copy = (const __CFDictionary *)CFRetain(v51);
      }
      else {
        CFDictionaryRef Copy = 0;
      }
      if (*(void *)(a1 + 392))
      {
        uint64_t v62 = (const void *)*MEMORY[0x1E4F41EE8];
        if (!CFDictionaryContainsKey(Copy, (const void *)*MEMORY[0x1E4F41EE8]))
        {
          CFStringRef MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, Copy);
          CFDictionarySetValue(MutableCopy, v62, *(const void **)(a1 + 392));
          char v64 = *(const void **)(a1 + 400);
          if (v64) {
            CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F41EF0], v64);
          }
          if (Copy) {
            CFRelease(Copy);
          }
          CFDictionaryRef Copy = CFDictionaryCreateCopy(v5, MutableCopy);
          CFStringRef v11 = v45;
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
LABEL_116:
          if (a2)
          {
            if (!NEVirtualInterfaceIsStateEqualToDynamicStoreState(*(const __SCDynamicStore **)(a1 + 496), (unint64_t)Copy, key))
            {
              int v53 = CFDictionaryContainsKey(Copy, (const void *)*MEMORY[0x1E4F41EE8]);
              uint64_t v54 = *a2;
              if (v53 || (v54 & 1) != 0) {
                *a2 = v54 | 4;
              }
            }
          }
          NEVirtualInterfaceLogStateDictionaryKeys(a1, (uint64_t)"setting proxies to dictionary with keys", Copy);
          CFDictionarySetValue(Mutable, key, Copy);
          if (Copy) {
            CFRelease(Copy);
          }
          if (a2)
          {
LABEL_124:
            uint64_t v55 = *a2;
            if ((*a2 & 2) != 0 && (v55 & 1) == 0 && !*(void *)(a1 + 392)) {
              *a2 = v55 & 0xFFFFFFFFFFFFFFFDLL;
            }
          }
LABEL_134:
          char v57 = *(unsigned char *)(a1 + 312);
          unsigned __int16 v58 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionaryRef v59 = v58;
          if (v57)
          {
            if (v58)
            {
              CFDictionarySetValue(v58, (const void *)*MEMORY[0x1E4F41F00], (const void *)*MEMORY[0x1E4F420F0]);
              unsigned __int8 v61 = ne_log_obj();
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = v88;
                __int16 v95 = 2112;
                CFMutableDictionaryRef v96 = v59;
                _os_log_impl(&dword_19DDAF000, v61, OS_LOG_TYPE_DEFAULT, "%s: setting primary service dictionary to %@", buf, 0x16u);
              }
              CFDictionarySetValue(Mutable, v90, v59);
              goto LABEL_167;
            }
          }
          else if (v58)
          {
            if ((*(unsigned char *)(a1 + 312) & 8) != 0)
            {
              int v60 = (const void **)MEMORY[0x1E4F42108];
            }
            else if ((*(unsigned char *)(a1 + 312) & 4) != 0)
            {
              int v60 = (const void **)MEMORY[0x1E4F42100];
            }
            else
            {
              if ((*(unsigned char *)(a1 + 312) & 2) == 0)
              {
LABEL_157:
                CFStringRef v65 = v11;
                CFStringRef v66 = v6;
                int v67 = *(_DWORD *)(a1 + 316);
                if (v67) {
                  NEAddIntToDictionary(v59, (const void *)*MEMORY[0x1E4F41F08], v67);
                }
                CFIndex v68 = CFDictionaryGetCount(v59);
                int v69 = ne_log_obj();
                BOOL v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT);
                if (v68 < 1)
                {
                  CFStringRef v6 = v66;
                  if (v70)
                  {
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v88;
                    _os_log_impl(&dword_19DDAF000, v69, OS_LOG_TYPE_DEFAULT, "%s: removing service dictionary", buf, 0xCu);
                  }
                  CFArrayAppendValue(v8, v90);
                }
                else
                {
                  CFStringRef v6 = v66;
                  if (v70)
                  {
                    *(_DWORD *)long long buf = 136315394;
                    *(void *)&uint8_t buf[4] = v88;
                    __int16 v95 = 2112;
                    CFMutableDictionaryRef v96 = v59;
                    _os_log_impl(&dword_19DDAF000, v69, OS_LOG_TYPE_DEFAULT, "%s: setting non-primary service dictionary to %@", buf, 0x16u);
                  }
                  CFDictionarySetValue(Mutable, v90, v59);
                }
                CFStringRef v11 = v65;
LABEL_167:
                CFRelease(v59);
                if (*(void *)(a1 + 472))
                {
                  CFRange v71 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFStringRef NetworkServiceEntity = v86;
                  if (!v71)
                  {
                    unint64_t v12 = 0;
                    goto LABEL_178;
                  }
                  CFRange v72 = v71;
                  NEAddIntToDictionary(v71, (const void *)*MEMORY[0x1E4F42040], 7);
                  CFDictionarySetValue(Mutable, v89, v72);
                  CFRelease(v72);
                }
                else
                {
                  CFArrayAppendValue(v8, v89);
                  CFStringRef NetworkServiceEntity = v86;
                }
                CFStringRef v73 = ne_log_large_obj();
                if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 136315394;
                  *(void *)&uint8_t buf[4] = v88;
                  __int16 v95 = 2112;
                  CFMutableDictionaryRef v96 = Mutable;
                  _os_log_debug_impl(&dword_19DDAF000, v73, OS_LOG_TYPE_DEBUG, "%s: Setting keys: %@", buf, 0x16u);
                }
                CFStringRef v74 = ne_log_large_obj();
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 136315394;
                  *(void *)&uint8_t buf[4] = v88;
                  __int16 v95 = 2112;
                  CFMutableDictionaryRef v96 = v8;
                  _os_log_debug_impl(&dword_19DDAF000, v74, OS_LOG_TYPE_DEBUG, "%s: Removing keys: %@", buf, 0x16u);
                }
                unint64_t v12 = SCDynamicStoreSetMultiple(*(SCDynamicStoreRef *)(a1 + 496), Mutable, v8, 0);
                if (v12) {
                  *(unsigned char *)(a1 + 312) |= 0x40u;
                }
                goto LABEL_177;
              }
              int v60 = (const void **)MEMORY[0x1E4F420F8];
            }
            CFDictionarySetValue(v58, (const void *)*MEMORY[0x1E4F41F00], *v60);
            goto LABEL_157;
          }
          unint64_t v12 = 0;
          CFStringRef NetworkServiceEntity = v86;
          goto LABEL_178;
        }
      }
    }
    else
    {
      *(void *)long long buf = *MEMORY[0x1E4F41E00];
      values[0] = 0;
      int valuePtr = 1;
      values[0] = CFNumberCreate(v5, kCFNumberIntType, &valuePtr);
      CFDictionaryRef Copy = CFDictionaryCreate(v5, (const void **)buf, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFRelease(values[0]);
    }
    CFStringRef v11 = v45;
    goto LABEL_116;
  }
  CFRange v76 = ne_log_obj();
  if (os_log_type_enabled(v76, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "NEVirtualInterfaceUpdateAdHocServiceReturnChanges";
    _os_log_fault_impl(&dword_19DDAF000, v76, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
  }
  return 0;
}

uint64_t NEVirtualInterfaceIsStateEqualToDynamicStoreState(const __SCDynamicStore *a1, unint64_t a2, CFStringRef key)
{
  unint64_t v4 = (unint64_t)SCDynamicStoreCopyValue(a1, key);
  if (!(v4 | a2)) {
    return 1;
  }
  CFStringRef v6 = (const void *)v4;
  if (v4 && a2)
  {
    uint64_t v7 = CFEqual((CFTypeRef)v4, (CFTypeRef)a2);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  CFRelease(v6);
  return v7;
}

void NEVirtualInterfaceLogStateDictionaryKeys(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!theDict)
  {
    unint64_t v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v14 = 136315394;
    uint64_t v15 = a1 + 265;
    __int16 v16 = 2080;
    uint64_t v17 = a2;
    CFStringRef v13 = "%s: %s: NULL";
LABEL_10:
    _os_log_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v14, 0x16u);
    return;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  if (!Count)
  {
    unint64_t v12 = ne_log_obj();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v14 = 136315394;
    uint64_t v15 = a1 + 265;
    __int16 v16 = 2080;
    uint64_t v17 = a2;
    CFStringRef v13 = "%s: %s: empty";
    goto LABEL_10;
  }
  CFIndex v7 = Count;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v9 = (const void **)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8 * Count, 0);
  CFDictionaryGetKeysAndValues(theDict, v9, 0);
  CFArrayRef v10 = CFArrayCreate(v8, v9, v7, MEMORY[0x1E4F1D510]);
  CFAllocatorDeallocate(v8, v9);
  CFStringRef v11 = ne_log_large_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315650;
    uint64_t v15 = a1 + 265;
    __int16 v16 = 2080;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    CFArrayRef v19 = v10;
    _os_log_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEFAULT, "%s: %s: %@", (uint8_t *)&v14, 0x20u);
  }
  CFRelease(v10);
}

_OWORD *NEVirtualInterfaceCreateNexusExtendedWithOptions(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned __int8 *uu, const void *a13)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  Base = NEVirtualInterfaceCreateBase(a1, a2, a3, a4);
  __int16 v18 = Base;
  if (!Base) {
    return v18;
  }
  int v51 = a9;
  int bytes = a8;
  int v49 = a11;
  int v50 = a10;
  uint64_t v19 = *((void *)Base + 32);
  if (v19 != 2)
  {
    if (v19 != 1)
    {
LABEL_63:
      CFTypeID v46 = ne_log_obj();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)applier = 0;
        _os_log_error_impl(&dword_19DDAF000, v46, OS_LOG_TYPE_ERROR, "Failed to open interface control socket\n", applier, 2u);
      }
      CFRelease(v18);
      return 0;
    }
    if (a5)
    {
      xpc_object_t v20 = xpc_array_create(0, 0);
      *(_DWORD *)CFStringRef v48 = 1;
      xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v21, "interface-option", 0x14uLL);
      xpc_dictionary_set_data(v21, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v20, v21);
      xpc_release(v21);
      if (a6)
      {
LABEL_6:
        *(_DWORD *)CFStringRef v48 = 4;
        xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uint64(v22, "interface-option", 1uLL);
        xpc_dictionary_set_data(v22, "interface-option-data", v48, 4uLL);
        xpc_array_append_value(v20, v22);
        xpc_release(v22);
      }
    }
    else
    {
      if (a8 | a7 | a9 | a10 | a11) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = a13 == 0;
      }
      if (v28 && a6 == 0)
      {
        xpc_object_t v20 = 0;
        goto LABEL_42;
      }
      xpc_object_t v20 = xpc_array_create(0, 0);
      if (a6) {
        goto LABEL_6;
      }
    }
    if (a7 >= 2)
    {
      CFArrayRef v23 = ne_log_obj();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)CFStringRef v48 = 0;
        _os_log_error_impl(&dword_19DDAF000, v23, OS_LOG_TYPE_ERROR, "Multiple channels unsupported on UserTunnel interfaces", v48, 2u);
      }
      goto LABEL_63;
    }
    if (bytes)
    {
      xpc_object_t v30 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v30, "interface-option", 0x15uLL);
      xpc_dictionary_set_data(v30, "interface-option-data", &bytes, 4uLL);
      xpc_array_append_value(v20, v30);
      xpc_release(v30);
    }
    if (v51)
    {
      xpc_object_t v31 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v31, "interface-option", 0x16uLL);
      xpc_dictionary_set_data(v31, "interface-option-data", &v51, 4uLL);
      xpc_array_append_value(v20, v31);
      xpc_release(v31);
    }
    if (v50)
    {
      xpc_object_t v32 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v32, "interface-option", 0x19uLL);
      xpc_dictionary_set_data(v32, "interface-option-data", &v50, 4uLL);
      xpc_array_append_value(v20, v32);
      xpc_release(v32);
    }
    if (v49)
    {
      xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v33, "interface-option", 0x1AuLL);
      xpc_dictionary_set_data(v33, "interface-option-data", &v49, 4uLL);
      xpc_array_append_value(v20, v33);
      xpc_release(v33);
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a13 && CFGetTypeID(a13) == TypeID)
    {
      CFRange v35 = (void *)_CFXPCCreateXPCObjectFromCFObject();
      *(void *)applier = MEMORY[0x1E4F143A8];
      *(void *)&applier[8] = 0x40000000;
      *(void *)&applier[16] = __NEVirtualInterfaceConnectSocket_block_invoke;
      uint64_t v54 = &__block_descriptor_tmp_57;
      xpc_object_t v55 = v20;
      xpc_dictionary_apply(v35, applier);
      xpc_release(v35);
    }
LABEL_42:
    if (a6) {
      int v36 = 4;
    }
    else {
      int v36 = 0;
    }
    int v37 = NEVirtualInterfaceConnectSocketInner((uint64_t)"com.apple.net.utun_control", (uint64_t)v20, (unsigned char *)v18 + 265, (unsigned int *)v18 + 73, v36);
    *((_DWORD *)v18 + 74) = v37;
    *((unsigned char *)v18 + 72) = a6;
    if (v20)
    {
      int v38 = v20;
LABEL_59:
      xpc_release(v38);
      int v37 = *((_DWORD *)v18 + 74);
      goto LABEL_60;
    }
    goto LABEL_60;
  }
  if (a8 | a7 | a9 | a10 | a11) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = a5 == 0;
  }
  if (v24)
  {
    xpc_object_t v25 = 0;
  }
  else
  {
    xpc_object_t v25 = xpc_array_create(0, 0);
    if (a5)
    {
      *(_DWORD *)CFStringRef v48 = 1;
      xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v26, "interface-option", 0xCuLL);
      xpc_dictionary_set_data(v26, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v25, v26);
      xpc_release(v26);
    }
    if (a7)
    {
      if (uu && !uuid_is_null(uu))
      {
        xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uuid(v27, "interface-bind-channel-exec-uuid", uu);
      }
      else
      {
        xpc_object_t v27 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v27, "interface-bind-channel-pid", 1);
      }
      xpc_dictionary_set_uint64(v27, "interface-type", *((void *)v18 + 32));
      xpc_array_append_value(v25, v27);
      xpc_release(v27);
      *(_DWORD *)CFStringRef v48 = a7;
      xpc_object_t v39 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v39, "interface-option", 8uLL);
      xpc_dictionary_set_data(v39, "interface-option-data", v48, 4uLL);
      xpc_array_append_value(v25, v39);
      xpc_release(v39);
    }
    if (bytes)
    {
      xpc_object_t v40 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v40, "interface-option", 0xDuLL);
      xpc_dictionary_set_data(v40, "interface-option-data", &bytes, 4uLL);
      xpc_array_append_value(v25, v40);
      xpc_release(v40);
    }
    if (v51)
    {
      xpc_object_t v41 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v41, "interface-option", 0xEuLL);
      xpc_dictionary_set_data(v41, "interface-option-data", &v51, 4uLL);
      xpc_array_append_value(v25, v41);
      xpc_release(v41);
    }
    if (v50)
    {
      xpc_object_t v42 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v42, "interface-option", 0x12uLL);
      xpc_dictionary_set_data(v42, "interface-option-data", &v50, 4uLL);
      xpc_array_append_value(v25, v42);
      xpc_release(v42);
    }
    if (v49)
    {
      xpc_object_t v43 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_uint64(v43, "interface-option", 0x13uLL);
      xpc_dictionary_set_data(v43, "interface-option-data", &v49, 4uLL);
      xpc_array_append_value(v25, v43);
      xpc_release(v43);
    }
  }
  int v37 = NEVirtualInterfaceConnectSocketInner((uint64_t)"com.apple.net.ipsec_control", (uint64_t)v25, (unsigned char *)v18 + 265, (unsigned int *)v18 + 73, 0);
  *((_DWORD *)v18 + 74) = v37;
  if (v25)
  {
    int v38 = v25;
    goto LABEL_59;
  }
LABEL_60:
  if (v37 == -1) {
    goto LABEL_63;
  }
  CFTypeID v44 = ne_log_obj();
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = *((void *)v18 + 61);
    *(_DWORD *)applier = 136315394;
    *(void *)&applier[4] = (char *)v18 + 265;
    *(_WORD *)&applier[12] = 2112;
    *(void *)&applier[14] = v45;
    _os_log_impl(&dword_19DDAF000, v44, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", applier, 0x16u);
  }
  return v18;
}

_OWORD *NEVirtualInterfaceCreateBase(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (__NEVirtualInterfaceInitialize_onceToken != -1) {
    dispatch_once(&__NEVirtualInterfaceInitialize_onceToken, &__block_literal_global_65);
  }
  uint64_t Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      BOOL v28 = "NEVirtualInterfaceCreateBase";
      __int16 v29 = 1024;
      int v30 = 1234;
      _os_log_error_impl(&dword_19DDAF000, v19, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v27, 0x12u);
    }
    return 0;
  }
  CFStringRef v9 = Instance;
  Instance[1] = 0u;
  CFArrayRef v10 = (NSObject **)(Instance + 1);
  Instance[30] = 0u;
  Instance[31] = 0u;
  Instance[28] = 0u;
  Instance[29] = 0u;
  Instance[26] = 0u;
  Instance[27] = 0u;
  Instance[24] = 0u;
  Instance[25] = 0u;
  Instance[22] = 0u;
  Instance[23] = 0u;
  Instance[20] = 0u;
  Instance[21] = 0u;
  Instance[18] = 0u;
  Instance[19] = 0u;
  Instance[16] = 0u;
  Instance[17] = 0u;
  Instance[14] = 0u;
  Instance[15] = 0u;
  Instance[12] = 0u;
  Instance[13] = 0u;
  Instance[10] = 0u;
  Instance[11] = 0u;
  Instance[8] = 0u;
  Instance[9] = 0u;
  Instance[6] = 0u;
  Instance[7] = 0u;
  Instance[4] = 0u;
  Instance[5] = 0u;
  Instance[2] = 0u;
  Instance[3] = 0u;
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v12 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v12)
  {
    xpc_object_t v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      BOOL v28 = "NEVirtualInterfaceCreateBase";
      __int16 v29 = 1024;
      int v30 = 1242;
      xpc_object_t v21 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_18:
      xpc_object_t v22 = v20;
      uint32_t v23 = 18;
LABEL_19:
      _os_log_error_impl(&dword_19DDAF000, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v27, v23);
    }
LABEL_22:
    CFRelease(v9);
    return 0;
  }
  CFUUIDRef v13 = v12;
  *((void *)v9 + 61) = CFUUIDCreateString(v11, v12);
  CFRelease(v13);
  if (!*((void *)v9 + 61))
  {
    xpc_object_t v20 = ne_log_obj();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      BOOL v28 = "NEVirtualInterfaceCreateBase";
      __int16 v29 = 1024;
      int v30 = 1248;
      xpc_object_t v21 = "NEVirtualInterface Failure in %s at line %d.";
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  if (a3)
  {
    const char *v10 = a3;
    dispatch_retain(a3);
  }
  *((_DWORD *)v9 + 77) = -1;
  *((unsigned char *)v9 + 73) = 1;
  *((void *)v9 + 3) = a4;
  *((void *)v9 + 32) = a2;
  int v14 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  *((void *)v9 + 40) = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  *((void *)v9 + 41) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 42) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 43) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 44) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 45) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 46) = CFArrayCreateMutable(v11, 0, v14);
  *((void *)v9 + 47) = 1;
  *((void *)v9 + 4_Block_object_dispose(&STACK[0x2A0], 8) = 1;
  *((_DWORD *)v9 + 76) = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFDictionaryRef v16 = Mutable;
    CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E4F41AE8], (const void *)*MEMORY[0x1E4F1CFD0]);
    *((void *)v9 + 62) = SCDynamicStoreCreateWithOptions(a1, @"NEVirtualInterface Helper Session", v16, 0, 0);
    CFRelease(v16);
    if (*((void *)v9 + 62)) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  SCDynamicStoreRef v24 = SCDynamicStoreCreateWithOptions(a1, @"NEVirtualInterface Helper Session", 0, 0, 0);
  *((void *)v9 + 62) = v24;
  if (!v24)
  {
LABEL_21:
    xpc_object_t v25 = ne_log_obj();
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    LOWORD(v27) = 0;
    xpc_object_t v21 = "Failed to open dynamic store session\n";
    xpc_object_t v22 = v25;
    uint32_t v23 = 2;
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v17 = _SCNetworkServiceCopyActive();
  if (v17)
  {
    __int16 v18 = (const void *)v17;
    SCNetworkServiceSetPrimaryRank();
    CFRelease(v18);
  }
  return v9;
}

uint64_t __NEVirtualInterfaceConnectSocket_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_value(v6, a2, a3);
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v6);
  xpc_release(v6);
  return 1;
}

uint64_t NEVirtualInterfaceConnectSocketInner(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned int *a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  socklen_t v19 = 0;
  int v20 = 1;
  uint64_t KernelControlSocketExtended = NEHelperGetKernelControlSocketExtended();
  uint64_t v9 = KernelControlSocketExtended;
  if ((KernelControlSocketExtended & 0x80000000) != 0)
  {
    CFUUIDRef v13 = ne_log_obj();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_ERROR, "Cannot get kernel control socket from NEHelper\n", buf, 2u);
    }
    if (v9 == -1)
    {
      if (!a4) {
        return 0xFFFFFFFFLL;
      }
LABEL_12:
      *a4 = 0;
      return 0xFFFFFFFFLL;
    }
LABEL_16:
    close(v9);
    if (!a4) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_12;
  }
  if (ioctl(KernelControlSocketExtended, 0x8004667EuLL, &v20) == -1)
  {
    CFArrayRef v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    int v17 = *__error();
    *(_DWORD *)long long buf = 67109120;
    int v22 = v17;
    CFUUIDRef v12 = "FIONBIO failed: %d\n";
    goto LABEL_23;
  }
  if (!virtual_interface_get_properties(v9, a3, a4, 0, 0)) {
    goto LABEL_16;
  }
  if (a5)
  {
    int v18 = 0;
    socklen_t v19 = 4;
    if (getsockopt(v9, 2, 1, &v18, &v19))
    {
      CFArrayRef v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_16;
      }
      int v11 = *__error();
      *(_DWORD *)long long buf = 67109120;
      int v22 = v11;
      CFUUIDRef v12 = "getsockopt flags failed on kernel control socket (errno = %d)\n";
LABEL_23:
      _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, v12, buf, 8u);
      goto LABEL_16;
    }
    if ((a5 & ~v18) != 0)
    {
      v18 |= a5;
      socklen_t v19 = 4;
      if (setsockopt(v9, 2, 1, &v18, 4u))
      {
        uint64_t v15 = ne_log_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          int v16 = *__error();
          *(_DWORD *)long long buf = 67109120;
          int v22 = v16;
          _os_log_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_INFO, "setsockopt flags failed on kernel control socket (errno = %d)\n", buf, 8u);
        }
        goto LABEL_16;
      }
    }
  }
  return v9;
}

uint64_t virtual_interface_get_properties(int a1, unsigned char *a2, unsigned int *a3, uint64_t *a4, void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  socklen_t v22 = 24;
  if (a2)
  {
    if (*a2)
    {
      CFArrayRef v10 = ne_log_obj();
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_8;
      }
      *(_DWORD *)long long buf = 136315138;
      SCDynamicStoreRef v24 = a2;
      int v11 = "Using interface name %s";
      goto LABEL_5;
    }
    int v15 = getsockopt(a1, 2, 2, a2, &v22);
    int v16 = ne_log_obj();
    CFArrayRef v10 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v20 = *__error();
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v24) = v20;
        _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "getsockopt ifname failed on kernel control socket (errno = %d)\n", buf, 8u);
        if (!a3)
        {
LABEL_20:
          if (a4)
          {
            uint64_t result = 0;
            *a4 = 0;
            return result;
          }
          return 0;
        }
      }
      else if (!a3)
      {
        goto LABEL_20;
      }
      *a3 = 0;
      goto LABEL_20;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      SCDynamicStoreRef v24 = a2;
      int v11 = "getsockopt(UTUN_OPT_IFNAME) returned virtual interface name %s";
LABEL_5:
      _os_log_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0xCu);
    }
  }
  else
  {
    CFUUIDRef v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134218240;
      SCDynamicStoreRef v24 = 0;
      __int16 v25 = 1024;
      int v26 = 24;
      _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, "Provider name buffer is invalid (%p, %u)", buf, 0x12u);
    }
  }
LABEL_8:
  if (a3) {
    *a3 = if_nametoindex(a2);
  }
  if (a4)
  {
    if (!strncmp(a2, "utun", 4uLL))
    {
      uint64_t v14 = 1;
    }
    else if (!strncmp(a2, "ipsec", 5uLL))
    {
      uint64_t v14 = 2;
    }
    else
    {
      int v13 = strncmp(a2, "utap", 4uLL);
      uint64_t v14 = 3;
      if (v13) {
        uint64_t v14 = 0;
      }
    }
    *a4 = v14;
  }
  if (a5)
  {
    socklen_t v21 = 4;
    if (getsockopt(a1, 2, 1, a5, &v21))
    {
      int v18 = ne_log_obj();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v19 = *__error();
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v24) = v19;
        _os_log_error_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_ERROR, "getsockopt flags failed on kernel control socket (errno = %d)\n", buf, 8u);
      }
      return 0;
    }
  }
  return 1;
}

__CFString *__NEVirtualInterfaceCopyDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<NEVirtualInterface, %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

void NEVirtualInterfaceTearDown(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = ne_log_obj();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = 136315138;
    uint64_t v30 = a1 + 265;
    _os_log_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_DEFAULT, "Tearing down %s", (uint8_t *)&v29, 0xCu);
  }
  if (a1)
  {
    CFStringRef v3 = *(const void **)(a1 + 488);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 48_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    unint64_t v4 = *(const void **)(a1 + 496);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 496) = 0;
    }
    CFAllocatorRef v5 = *(const void **)(a1 + 320);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 320) = 0;
    }
    xpc_object_t v6 = *(const void **)(a1 + 328);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 32_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    CFIndex v7 = *(const void **)(a1 + 336);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 336) = 0;
    }
    CFAllocatorRef v8 = *(const void **)(a1 + 344);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 344) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 352);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 352) = 0;
    }
    CFArrayRef v10 = *(const void **)(a1 + 360);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 360) = 0;
    }
    int v11 = *(const void **)(a1 + 368);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 36_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    CFUUIDRef v12 = *(const void **)(a1 + 416);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 416) = 0;
    }
    int v13 = *(const void **)(a1 + 432);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 432) = 0;
    }
    uint64_t v14 = *(const void **)(a1 + 424);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 424) = 0;
    }
    int v15 = *(const void **)(a1 + 392);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 392) = 0;
    }
    int v16 = *(const void **)(a1 + 400);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 400) = 0;
    }
    int v17 = *(const void **)(a1 + 448);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 44_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    int v18 = *(const void **)(a1 + 456);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a1 + 456) = 0;
    }
    int v19 = *(const void **)(a1 + 464);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 464) = 0;
    }
    int v20 = *(const void **)(a1 + 472);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 472) = 0;
    }
    socklen_t v21 = *(const void **)(a1 + 480);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 480) = 0;
    }
    NEVirtualInterfaceDisableChannel(a1);
    if (*(void *)(a1 + 256) != 2)
    {
      NEVirtualInterfaceAdjustReadBufferSize(a1, 0);
      NEVirtualInterfaceAdjustSendCount(a1, 0);
    }
    int v22 = *(_DWORD *)(a1 + 308);
    if (v22 != -1)
    {
      close(v22);
      *(_DWORD *)(a1 + 30_Block_object_dispose(&STACK[0x2A0], 8) = -1;
    }
    uint64_t v23 = *(const void **)(a1 + 32);
    if (v23)
    {
      _Block_release(v23);
      *(void *)(a1 + 32) = 0;
    }
    SCDynamicStoreRef v24 = *(const void **)(a1 + 48);
    if (v24)
    {
      _Block_release(v24);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    __int16 v25 = *(const void **)(a1 + 40);
    if (v25)
    {
      _Block_release(v25);
      *(void *)(a1 + 40) = 0;
    }
    int v26 = *(NSObject **)(a1 + 16);
    if (v26)
    {
      dispatch_release(v26);
      *(void *)(a1 + 16) = 0;
    }
    int v27 = *(_DWORD *)(a1 + 296);
    if (v27 != -1)
    {
      close(v27);
      *(_DWORD *)(a1 + 296) = -1;
    }
    BOOL v28 = *(const void **)(a1 + 504);
    if (v28)
    {
      CFRelease(v28);
      *(void *)(a1 + 504) = 0;
    }
    if (*(void *)(a1 + 256) == 4) {
      NEHelperInterfaceDestroy();
    }
  }
}

BOOL NEVirtualInterfaceDisableChannel(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 312) & 0x10) != 0)
    {
      *(unsigned char *)(a1 + 312) &= ~0x10u;
      uint64_t v1 = *(void *)(a1 + 256);
      if (v1 != 2)
      {
        int v2 = *(_DWORD *)(a1 + 296);
        int v13 = 0;
        if (v1 == 1)
        {
          int v3 = 17;
        }
        else
        {
          unint64_t v4 = ne_log_obj();
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__strerrlong long buf = 136315394;
            uint64_t v23 = "NEVirtualInterfaceGetEnableChannelOption";
            __int16 v24 = 1024;
            int v25 = 1639;
            _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)__strerrbuf, 0x12u);
          }
          int v3 = 0;
        }
        if (setsockopt(v2, 2, v3, &v13, 4u))
        {
          int v5 = *__error();
          if (strerror_r(v5, __strerrbuf, 0x80uLL)) {
            __strerrbuf[0] = 0;
          }
          xpc_object_t v6 = ne_log_obj();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
            return 0;
          }
          *(_DWORD *)long long buf = 67109890;
          int v15 = v2;
          __int16 v16 = 1024;
          int v17 = v3;
          __int16 v18 = 1024;
          int v19 = v5;
          __int16 v20 = 2080;
          socklen_t v21 = __strerrbuf;
          CFAllocatorRef v8 = "setsockopt(%d, SYSPROTO_CONTROL, %d, disable): [%d] %s";
          uint64_t v9 = buf;
          CFArrayRef v10 = v6;
          uint32_t v11 = 30;
LABEL_17:
          _os_log_fault_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_FAULT, v8, v9, v11);
          return 0;
        }
      }
    }
    return 1;
  }
  else
  {
    CFUUIDRef v12 = ne_log_obj();
    BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_FAULT);
    if (result)
    {
      *(_DWORD *)__strerrlong long buf = 136315138;
      uint64_t v23 = "NEVirtualInterfaceDisableChannel";
      CFAllocatorRef v8 = "%s called with null interface";
      uint64_t v9 = (uint8_t *)__strerrbuf;
      CFArrayRef v10 = v12;
      uint32_t v11 = 12;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL NEVirtualInterfaceAdjustReadBufferSize(uint64_t a1, unsigned int a2)
{
  *(void *)&v35[5] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 256) != 2)
  {
    int v31 = 16000;
    if (interface_get_mtu(a1 + 265, &v31, (int *)(a1 + 308)))
    {
      xpc_object_t v6 = ne_log_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v24 = *__error();
        *(_DWORD *)long long buf = 136315394;
        xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
        __int16 v34 = 1024;
        *(_DWORD *)CFRange v35 = v24;
        _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, "%s: interface_get_mtu failed (%d), defaulting to max mtu", buf, 0x12u);
      }
      int v7 = 16000;
    }
    else
    {
      int v7 = v31;
    }
    uint64_t v8 = v7 + 20;
    LODWORD(v9) = *(_DWORD *)(a1 + 96);
    uint64_t v10 = *(void *)(a1 + 88);
    if (v9 == a2 && v8 == v10) {
      return 1;
    }
    *(void *)(a1 + 8_Block_object_dispose(&STACK[0x2A0], 8) = v8;
    if (v8 != v10 && v9)
    {
      unint64_t v11 = 0;
      while (1)
      {
        CFUUIDRef v12 = malloc_type_realloc(*(void **)(*(void *)(a1 + 80) + 8 * v11), *(void *)(a1 + 88), 0xE0A8BCC5uLL);
        if (!v12) {
          break;
        }
        *(void *)(*(void *)(a1 + 80) + 8 * v11++) = v12;
        unint64_t v9 = *(unsigned int *)(a1 + 96);
        if (v11 >= v9) {
          goto LABEL_16;
        }
      }
      __int16 v16 = ne_log_obj();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)(a1 + 88);
        *(_DWORD *)long long buf = 136315394;
        xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
        __int16 v34 = 2048;
        *(void *)CFRange v35 = v30;
        _os_log_error_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_ERROR, "%s: failed to change read buffer size (length=%zu)", buf, 0x16u);
      }
      unsigned int v17 = *(_DWORD *)(a1 + 96);
      uint64_t v18 = a1;
      goto LABEL_51;
    }
LABEL_16:
    *(_DWORD *)(a1 + 96) = a2;
    if (v9 == a2) {
      return 1;
    }
    if (NEVirtualInterfaceAdjustMetadataBufferSize(a1, v9, a2))
    {
      uint64_t v13 = *(unsigned int *)(a1 + 96);
      if (v9 >= v13)
      {
        if (v13 < v9)
        {
          do
            free(*(void **)(*(void *)(a1 + 80) + 8 * v13++));
          while (v9 != v13);
          LODWORD(v13) = *(_DWORD *)(a1 + 96);
        }
        int v22 = *(void **)(a1 + 80);
        if (!v13)
        {
          free(v22);
          *(void *)(a1 + 80) = 0;
          return 1;
        }
        uint64_t v23 = malloc_type_realloc(v22, 8 * v13, 0x10040436913F5uLL);
        if (v23)
        {
          *(void *)(a1 + 80) = v23;
          return 1;
        }
        int v27 = ne_log_obj();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
          __int16 v34 = 1024;
          *(_DWORD *)CFRange v35 = a2;
          uint64_t v26 = "%s: failed to reduce read buffer (cnt=%d)";
          BOOL v28 = v27;
          uint32_t v29 = 18;
LABEL_49:
          _os_log_error_impl(&dword_19DDAF000, v28, OS_LOG_TYPE_ERROR, v26, buf, v29);
        }
      }
      else
      {
        uint64_t v14 = (char *)malloc_type_realloc(*(void **)(a1 + 80), 8 * v13, 0x10040436913F5uLL);
        if (v14)
        {
          *(void *)(a1 + 80) = v14;
          bzero(&v14[8 * v9], 8 * (*(_DWORD *)(a1 + 96) - v9));
          if (v9 >= *(_DWORD *)(a1 + 96)) {
            return 1;
          }
          unint64_t v15 = v9;
          while (1)
          {
            *(void *)(*(void *)(a1 + 80) + 8 * v15) = malloc_type_malloc(*(void *)(a1 + 88), 0x19B7BC8uLL);
            if (!*(void *)(*(void *)(a1 + 80) + 8 * v15)) {
              break;
            }
            ++v15;
            BOOL result = 1;
            if (v15 >= *(unsigned int *)(a1 + 96)) {
              return result;
            }
          }
          int v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
            __int16 v34 = 1024;
            *(_DWORD *)CFRange v35 = a2;
            v35[2] = 1024;
            *(_DWORD *)&v35[3] = v9;
            uint64_t v26 = "%s: failed to allocate read buffers (cnt=%d, prev=%d)";
            goto LABEL_48;
          }
        }
        else
        {
          int v25 = ne_log_obj();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
            __int16 v34 = 1024;
            *(_DWORD *)CFRange v35 = a2;
            v35[2] = 1024;
            *(_DWORD *)&v35[3] = v9;
            uint64_t v26 = "%s: failed to allocate read buffer (cnt=%d, prev=%d)";
LABEL_48:
            BOOL v28 = v25;
            uint32_t v29 = 24;
            goto LABEL_49;
          }
        }
      }
      uint64_t v18 = a1;
      unsigned int v17 = v9;
LABEL_51:
      NEVirtualInterfaceCleanupBuffersOnFailure(v18, v17);
      return 0;
    }
    int v19 = ne_log_obj();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
      __int16 v34 = 1024;
      *(_DWORD *)CFRange v35 = a2;
      v35[2] = 1024;
      *(_DWORD *)&v35[3] = v9;
      _os_log_error_impl(&dword_19DDAF000, v19, OS_LOG_TYPE_ERROR, "%s: failed to alloc metadata buffer (cnt=%d, prev=%d)", buf, 0x18u);
      if (v9)
      {
LABEL_32:
        uint64_t v20 = 0;
        uint64_t v21 = 8 * v9;
        do
        {
          free(*(void **)(*(void *)(a1 + 80) + v20));
          v20 += 8;
        }
        while (v21 != v20);
      }
    }
    else if (v9)
    {
      goto LABEL_32;
    }
    free(*(void **)(a1 + 80));
    BOOL result = 0;
    *(void *)(a1 + 80) = 0;
    return result;
  }
  int v2 = ne_log_obj();
  BOOL result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)long long buf = 136315394;
    xpc_object_t v33 = "NEVirtualInterfaceAdjustReadBufferSize";
    __int16 v34 = 1024;
    *(_DWORD *)CFRange v35 = 2047;
    _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

void NEVirtualInterfaceAdjustSendCount(uint64_t a1, unsigned int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 256);
  if (v2 == 2)
  {
    int v3 = ne_log_obj();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v12 = 136315394;
    uint64_t v13 = "NEVirtualInterfaceAdjustSendCount";
    __int16 v14 = 1024;
    int v15 = 1173;
    unint64_t v4 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_19;
  }
  if (*(_DWORD *)(a1 + 212) == a2) {
    return;
  }
  *(_DWORD *)(a1 + 212) = a2;
  if (a2)
  {
    BOOL v7 = v2 == 1;
    uint64_t v8 = 1;
    if (v7) {
      uint64_t v8 = 2;
    }
    if (*(unsigned char *)(a1 + 72)) {
      ++v8;
    }
    *(void *)(a1 + 216) = reallocf(*(void **)(a1 + 216), 16 * a2 * v8);
    *(void *)(a1 + 224) = reallocf(*(void **)(a1 + 224), 56 * a2);
    unsigned int v9 = 60;
    if (!*(unsigned char *)(a1 + 72)) {
      unsigned int v9 = 44;
    }
    *(void *)(a1 + 232) = reallocf(*(void **)(a1 + 232), v9 * (unint64_t)a2);
    *(void *)(a1 + 240) = reallocf(*(void **)(a1 + 240), 8 * a2);
    uint64_t v10 = reallocf(*(void **)(a1 + 248), 8 * a2);
    *(void *)(a1 + 24_Block_object_dispose(&STACK[0x2A0], 8) = v10;
    unint64_t v11 = *(void **)(a1 + 216);
    if (!v11 || !*(void *)(a1 + 224) || !*(void *)(a1 + 232) || !v10 || !*(void *)(a1 + 240))
    {
      free(v11);
      *(void *)(a1 + 216) = 0;
      free(*(void **)(a1 + 224));
      *(void *)(a1 + 224) = 0;
      free(*(void **)(a1 + 232));
      *(void *)(a1 + 232) = 0;
      free(*(void **)(a1 + 240));
      *(void *)(a1 + 240) = 0;
      free(*(void **)(a1 + 248));
      *(void *)(a1 + 24_Block_object_dispose(&STACK[0x2A0], 8) = 0;
      *(_DWORD *)(a1 + 212) = 0;
      int v3 = ne_log_obj();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        uint64_t v13 = "NEVirtualInterfaceAdjustSendCount";
        __int16 v14 = 1024;
        int v15 = a2;
        unint64_t v4 = "%s: failed to allocate send buffers (cnt=%d)";
LABEL_19:
        _os_log_error_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_ERROR, v4, (uint8_t *)&v12, 0x12u);
      }
    }
  }
  else
  {
    free(*(void **)(a1 + 216));
    *(void *)(a1 + 216) = 0;
    free(*(void **)(a1 + 224));
    *(void *)(a1 + 224) = 0;
    free(*(void **)(a1 + 232));
    *(void *)(a1 + 232) = 0;
    free(*(void **)(a1 + 240));
    *(void *)(a1 + 240) = 0;
    free(*(void **)(a1 + 248));
    *(void *)(a1 + 24_Block_object_dispose(&STACK[0x2A0], 8) = 0;
  }
}

uint64_t interface_get_mtu(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  if (*a3 == -1 && (int v5 = socket(2, 2, 0), *a3 = v5, v5 < 0))
  {
    uint64_t v8 = ne_log_obj();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v11 = __error();
      int v12 = strerror(*v11);
      *(_DWORD *)long long buf = 136315138;
      __int16 v14 = v12;
      _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, "Failed to create ioctl socket to get MTU: %s", buf, 0xCu);
    }
  }
  else
  {
    __strlcpy_chk();
    LODWORD(v16) = 0;
    if ((ioctl(*a3, 0xC0206933uLL, &v15) & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *a2 = v16;
      return result;
    }
    BOOL v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = __error();
      uint64_t v10 = strerror(*v9);
      *(_DWORD *)long long buf = 136315138;
      __int16 v14 = v10;
      _os_log_error_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_ERROR, "SIOCGIFMTU failed: %s", buf, 0xCu);
    }
    close(*a3);
    *a3 = -1;
  }
  return *__error();
}

uint64_t NEVirtualInterfaceCleanupBuffersOnFailure(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * a2;
    do
    {
      free(*(void **)(*(void *)(a1 + 80) + v4));
      v4 += 8;
    }
    while (v5 != v4);
  }
  free(*(void **)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = 0;

  return NEVirtualInterfaceAdjustMetadataBufferSize(a1, a2, 0);
}

uint64_t NEVirtualInterfaceAdjustMetadataBufferSize(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return 1;
  }
  uint64_t v5 = *(void **)(a1 + 104);
  if (!a3)
  {
    free(v5);
    *(void *)(a1 + 104) = 0;
    free(*(void **)(a1 + 112));
    *(void *)(a1 + 112) = 0;
    free(*(void **)(a1 + 120));
    *(void *)(a1 + 120) = 0;
    free(*(void **)(a1 + 128));
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    free(*(void **)(a1 + 136));
    *(void *)(a1 + 136) = 0;
    free(*(void **)(a1 + 144));
    *(void *)(a1 + 144) = 0;
    free(*(void **)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    free(*(void **)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    free(*(void **)(a1 + 184));
    *(void *)(a1 + 184) = 0;
    free(*(void **)(a1 + 192));
    *(void *)(a1 + 192) = 0;
    free(*(void **)(a1 + 200));
    uint64_t result = 1;
    uint64_t v10 = (void *)(a1 + 200);
LABEL_30:
    void *v10 = 0;
    return result;
  }
  size_t v6 = a3;
  *(void *)(a1 + 104) = reallocf(v5, 4 * a3);
  BOOL v7 = *(void **)(a1 + 112);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v8 = 16 * v6;
    unsigned int v9 = reallocf(v7, 16 * v6);
  }
  else
  {
    free(v7);
    unsigned int v9 = 0;
    uint64_t v8 = 16 * v6;
  }
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = reallocf(*(void **)(a1 + 120), 8 * v6);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x2A0], 8) = reallocf(*(void **)(a1 + 128), 8 * v6);
  *(void *)(a1 + 136) = reallocf(*(void **)(a1 + 136), 8 * v6);
  *(void *)(a1 + 144) = reallocf(*(void **)(a1 + 144), 8 * v6);
  *(void *)(a1 + 152) = reallocf(*(void **)(a1 + 152), 8 * v6);
  *(void *)(a1 + 160) = reallocf(*(void **)(a1 + 160), 8 * v6);
  *(void *)(a1 + 16_Block_object_dispose(&STACK[0x2A0], 8) = reallocf(*(void **)(a1 + 168), 28 * v6);
  *(void *)(a1 + 176) = reallocf(*(void **)(a1 + 176), 28 * v6);
  *(void *)(a1 + 184) = reallocf(*(void **)(a1 + 184), v6);
  uint64_t v11 = 1;
  if (*(void *)(a1 + 256) == 1) {
    uint64_t v11 = 2;
  }
  if (*(unsigned char *)(a1 + 72)) {
    ++v11;
  }
  *(void *)(a1 + 192) = reallocf(*(void **)(a1 + 192), v8 * v11);
  uint64_t v10 = (void *)(a1 + 200);
  *(void *)(a1 + 200) = reallocf(*(void **)(a1 + 200), 56 * v6);
  if (!*(void *)(a1 + 104)
    || !*(void *)(a1 + 120)
    || *(unsigned char *)(a1 + 72) && !*(void *)(a1 + 112)
    || !*(void *)(a1 + 128)
    || !*(void *)(a1 + 136)
    || !*(void *)(a1 + 144)
    || !*(void *)(a1 + 152)
    || !*(void *)(a1 + 160)
    || !*(void *)(a1 + 168)
    || !*(void *)(a1 + 176)
    || !*(void *)(a1 + 184))
  {
    __int16 v14 = ne_log_obj();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      long long v16 = "NEVirtualInterfaceAdjustMetadataBufferSize";
      __int16 v17 = 1024;
      int v18 = 2010;
      _os_log_error_impl(&dword_19DDAF000, v14, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v15, 0x12u);
    }
    free(*(void **)(a1 + 104));
    *(void *)(a1 + 104) = 0;
    free(*(void **)(a1 + 112));
    *(void *)(a1 + 112) = 0;
    free(*(void **)(a1 + 120));
    *(void *)(a1 + 120) = 0;
    free(*(void **)(a1 + 128));
    *(void *)(a1 + 12_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    free(*(void **)(a1 + 136));
    *(void *)(a1 + 136) = 0;
    free(*(void **)(a1 + 144));
    *(void *)(a1 + 144) = 0;
    free(*(void **)(a1 + 152));
    *(void *)(a1 + 152) = 0;
    free(*(void **)(a1 + 160));
    *(void *)(a1 + 160) = 0;
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 16_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    free(*(void **)(a1 + 176));
    *(void *)(a1 + 176) = 0;
    free(*(void **)(a1 + 184));
    *(void *)(a1 + 184) = 0;
    free(*(void **)(a1 + 192));
    *(void *)(a1 + 192) = 0;
    free(*(void **)(a1 + 200));
    uint64_t result = 0;
    goto LABEL_30;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t result = 1;
  do
  {
    *(void *)(*(void *)(a1 + 152) + 8 * v13) = *(void *)(a1 + 168) + v12;
    *(void *)(*(void *)(a1 + 160) + 8 * v13++) = *(void *)(a1 + 176) + v12;
    v12 += 28;
  }
  while (v6 != v13);
  return result;
}

_OWORD *NEVirtualInterfaceCreateNexusExtended(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, int a6, unsigned int a7, int a8, int a9, int a10, int a11, unsigned __int8 *uu)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, uu, 0);
}

_OWORD *NEVirtualInterfaceCreateNexus(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4, int a5, unsigned int a6, int a7, int a8, int a9, int a10)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, a5, 0, a6, a7, a8, a9, a10, 0, 0);
}

_OWORD *NEVirtualInterfaceCreate(const __CFAllocator *a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a3, a4, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

_OWORD *NEVirtualInterfaceCreateWithOptions(const __CFAllocator *a1, uint64_t a2, const void *a3, NSObject *a4, uint64_t a5)
{
  return NEVirtualInterfaceCreateNexusExtendedWithOptions(a1, a2, a4, a5, 0, 0, 0, 0, 0, 0, 0, 0, a3);
}

_OWORD *NEVirtualInterfaceCreateUserEthernet(const __CFAllocator *a1, NSObject *a2, uint64_t a3, int a4, const char *a5, const void *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  Base = NEVirtualInterfaceCreateBase(a1, 3, a2, a3);
  if (Base)
  {
    int v10 = dup(a4);
    *((_DWORD *)Base + 74) = v10;
    if (v10 < 0)
    {
      uint64_t v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v15 = __error();
        long long v16 = strerror(*v15);
        int v17 = 136315138;
        int v18 = v16;
        _os_log_error_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_ERROR, "Failed to dup the user ethernet control socket: %s", (uint8_t *)&v17, 0xCu);
      }
      CFRelease(Base);
      return 0;
    }
    else
    {
      __strlcpy_chk();
      *((_DWORD *)Base + 73) = if_nametoindex(a5);
      *((unsigned char *)Base + 72) = 0;
      *((unsigned char *)Base + 264) = 0;
      if (a6)
      {
        CFRetain(a6);
        *((void *)Base + 63) = a6;
      }
      uint64_t v11 = ne_log_obj();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *((void *)Base + 61);
        int v17 = 136315394;
        int v18 = (char *)Base + 265;
        __int16 v19 = 2112;
        uint64_t v20 = v12;
        _os_log_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v17, 0x16u);
      }
    }
  }
  return Base;
}

char *NEVirtualInterfaceCreateRedirect(const __CFAllocator *a1, NSObject *a2, int a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateRedirectInner(a1, a2, @"rd", a3, a4);
}

char *NEVirtualInterfaceCreateRedirectInner(const __CFAllocator *a1, NSObject *a2, const __CFString *a3, int a4, uint64_t a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    uint64_t v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)int buffer = 0;
    __int16 v14 = "interface name is NULL";
    int v15 = v13;
    uint32_t v16 = 2;
LABEL_14:
    _os_log_error_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buffer, v16);
    return 0;
  }
  if ((a4 - 1) >= 3)
  {
    int v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)int buffer = 67109120;
    *(_DWORD *)&buffer[4] = a4;
    __int16 v14 = "invalid interface type %u";
    int v15 = v17;
    uint32_t v16 = 8;
    goto LABEL_14;
  }
  Base = (char *)NEVirtualInterfaceCreateBase(a1, 4, a2, a5);
  if (!Base) {
    return Base;
  }
  *(void *)int buffer = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  CFStringGetCString(a3, buffer, 24, 0x8000100u);
  uint64_t v8 = (void *)NEHelperInterfaceCreate();
  if (!v8)
  {
    CFRelease(Base);
    return 0;
  }
  unsigned int v9 = v8;
  string_ptr = xpc_string_get_string_ptr(v8);
  __strlcpy_chk();
  *((_DWORD *)Base + 73) = if_nametoindex(string_ptr);
  Base[72] = 0;
  Base[264] = 0;
  *((_DWORD *)Base + 74) = -1;
  xpc_release(v9);
  uint64_t v11 = ne_log_obj();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *((void *)Base + 61);
    int v19 = 136315394;
    uint64_t v20 = Base + 265;
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    _os_log_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v19, 0x16u);
  }
  return Base;
}

char *NEVirtualInterfaceCreateRedirectFromName(const __CFAllocator *a1, CFStringRef theString, NSObject *a3, int a4, NSObject *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((a4 - 1) >= 3)
  {
    uint64_t v13 = ne_log_obj();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)int buffer = 67109120;
    *(_DWORD *)&buffer[4] = a4;
    __int16 v14 = "invalid interface type %u";
    int v15 = v13;
    uint32_t v16 = 8;
LABEL_15:
    _os_log_error_impl(&dword_19DDAF000, v15, OS_LOG_TYPE_ERROR, v14, (uint8_t *)buffer, v16);
    return 0;
  }
  if (!theString || !CFStringHasPrefix(theString, @"rd"))
  {
    int v17 = ne_log_obj();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_WORD *)int buffer = 0;
    __int16 v14 = "invalid interface name";
    int v15 = v17;
    uint32_t v16 = 2;
    goto LABEL_15;
  }
  *(void *)int buffer = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  CFStringGetCString(theString, buffer, 24, 0x8000100u);
  if (!NEIsValidInterface(buffer)) {
    return NEVirtualInterfaceCreateRedirectInner(a1, a5, theString, a4, (uint64_t)a5);
  }
  Base = NEVirtualInterfaceCreateBase(a1, 4, a3, (uint64_t)a5);
  if (Base)
  {
    __strlcpy_chk();
    *((_DWORD *)Base + 73) = if_nametoindex((const char *)Base + 265);
    *((unsigned char *)Base + 72) = 0;
    *((unsigned char *)Base + 264) = 0;
    *((_DWORD *)Base + 74) = -1;
    uint64_t v11 = ne_log_obj();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *((void *)Base + 61);
      int v19 = 136315394;
      uint64_t v20 = (char *)Base + 265;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      _os_log_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" (%@)", (uint8_t *)&v19, 0x16u);
    }
  }
  return (char *)Base;
}

uint64_t NEVirtualInterfaceCreateFromSocket(uint64_t a1, int a2, NSObject *a3, uint64_t a4)
{
  return NEVirtualInterfaceCreateFromSocketAndName(a1, a2, 0, 0, a3, a4);
}

uint64_t NEVirtualInterfaceCreateFromSocketAndName(uint64_t a1, int a2, uint64_t a3, unint64_t a4, NSObject *a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2 < 0)
  {
    int v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1551;
LABEL_21:
      _os_log_error_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    return 0;
  }
  if (__NEVirtualInterfaceInitialize_onceToken != -1) {
    dispatch_once(&__NEVirtualInterfaceInitialize_onceToken, &__block_literal_global_65);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    int v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1559;
      goto LABEL_21;
    }
    return 0;
  }
  uint64_t v12 = Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  uint64_t v13 = (NSObject **)(Instance + 16);
  *(_OWORD *)(Instance + 480) = 0u;
  *(_OWORD *)(Instance + 496) = 0u;
  *(_OWORD *)(Instance + 44_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(Instance + 464) = 0u;
  *(_OWORD *)(Instance + 416) = 0u;
  *(_OWORD *)(Instance + 432) = 0u;
  *(_OWORD *)(Instance + 384) = 0u;
  *(_OWORD *)(Instance + 400) = 0u;
  *(_OWORD *)(Instance + 352) = 0u;
  *(_OWORD *)(Instance + 36_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(Instance + 320) = 0u;
  *(_OWORD *)(Instance + 336) = 0u;
  *(_OWORD *)(Instance + 28_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(Instance + 304) = 0u;
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 272) = 0u;
  *(_OWORD *)(Instance + 224) = 0u;
  *(_OWORD *)(Instance + 240) = 0u;
  *(_OWORD *)(Instance + 192) = 0u;
  *(_OWORD *)(Instance + 20_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(Instance + 160) = 0u;
  *(_OWORD *)(Instance + 176) = 0u;
  *(_OWORD *)(Instance + 12_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_OWORD *)(Instance + 144) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  *(_OWORD *)(Instance + 112) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_OWORD *)(Instance + 4_Block_object_dispose(&STACK[0x2A0], 8) = 0u;
  *(_DWORD *)(Instance + 30_Block_object_dispose(&STACK[0x2A0], 8) = -1;
  *(unsigned char *)(Instance + 264) = 1;
  *(unsigned char *)(Instance + 73) = 1;
  *(_DWORD *)(Instance + 296) = a2;
  int v24 = 0;
  if (a3) {
    __strlcpy_chk();
  }
  __int16 v14 = (unint64_t *)(v12 + 256);
  int v15 = (uint64_t *)(v12 + 256);
  if (a4)
  {
    int v15 = 0;
    *__int16 v14 = a4;
  }
  if (a4 >= 2) {
    uint32_t v16 = 0;
  }
  else {
    uint32_t v16 = &v24;
  }
  if (!virtual_interface_get_properties(*(_DWORD *)(v12 + 296), (unsigned char *)(v12 + 265), (unsigned int *)(v12 + 292), v15, v16))
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1588;
      goto LABEL_36;
    }
LABEL_37:
    CFRelease((CFTypeRef)v12);
    return 0;
  }
  if (*v14 == 1)
  {
    if ((v24 & 4) != 0) {
      *(unsigned char *)(v12 + 72) = 1;
    }
  }
  else if (!*v14)
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1593;
LABEL_36:
      _os_log_error_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_37;
    }
    goto LABEL_37;
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFUUIDRef v20 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!v20)
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1604;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  CFUUIDRef v21 = v20;
  *(void *)(v12 + 48_Block_object_dispose(&STACK[0x2A0], 8) = CFUUIDCreateString(v19, v20);
  CFRelease(v21);
  if (!*(void *)(v12 + 488))
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v26 = "NEVirtualInterfaceCreateFromSocketAndName";
      __int16 v27 = 1024;
      int v28 = 1610;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (a5)
  {
    *uint64_t v13 = a5;
    dispatch_retain(a5);
  }
  *(void *)(v12 + 24) = a6;
  uint64_t v22 = ne_log_obj();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v26 = (const char *)(v12 + 265);
    _os_log_impl(&dword_19DDAF000, v22, OS_LOG_TYPE_DEFAULT, "Created a new NEVirtualInterface \"%s\" from socket", buf, 0xCu);
  }
  return v12;
}

CFArrayRef NEVirtualInterfaceGetNexusInstance(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    unsigned int v9 = ne_log_obj();
    CFArrayRef result = (const __CFArray *)os_log_type_enabled(v9, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    *(_DWORD *)int v10 = 136315138;
    *(void *)&void v10[4] = "NEVirtualInterfaceGetNexusInstance";
    _os_log_fault_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_FAULT, "%s called with null interface", v10, 0xCu);
    return 0;
  }
  CFArrayRef result = NEVirtualInterfaceCopyNexusInstances(a1, 1u);
  if (result)
  {
    CFArrayRef v4 = result;
    CFIndex Count = CFArrayGetCount(result);
    if (Count == 1)
    {
      CFUUIDRef ValueAtIndex = (const __CFUUID *)CFArrayGetValueAtIndex(v4, 0);
      *(CFUUIDBytes *)int v10 = CFUUIDGetUUIDBytes(ValueAtIndex);
      uuid_copy(a2, v10);
      CFRelease(v4);
      return (const __CFArray *)1;
    }
    CFIndex v7 = Count;
    uint64_t v8 = ne_log_obj();
    CFArrayRef result = (const __CFArray *)os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(void *)int v10 = 0x104000200;
      *(_WORD *)&v10[8] = 2048;
      *(void *)&v10[10] = v7;
      _os_log_error_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_ERROR, "Received unexpected number of channels (%d != %ld)", v10, 0x12u);
      return 0;
    }
  }
  return result;
}

__CFArray *NEVirtualInterfaceCopyNexusInstances(uint64_t a1, socklen_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v28 = ne_log_obj();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v31 = "NEVirtualInterfaceCopyNexusInstances";
      _os_log_fault_impl(&dword_19DDAF000, v28, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
    }
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 256);
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      int v5 = *(_DWORD *)(a1 + 296);
      int v6 = 9;
      goto LABEL_17;
    }
    uint64_t v12 = ne_log_obj();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      int v31 = "NEVirtualInterfaceGetEnableChannelOption";
      __int16 v32 = 1024;
      int v33 = 1639;
      _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    if ((unint64_t)(*(void *)(a1 + 256) - 1) >= 2)
    {
      uint64_t v13 = ne_log_obj();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        int v31 = "NEVirtualInterfaceGetChannelOption";
        __int16 v32 = 1024;
        int v33 = 1655;
        _os_log_error_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      }
    }
    __int16 v14 = ne_log_obj();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    int v31 = "NEVirtualInterfaceCopyNexusInstances";
    __int16 v32 = 1024;
    int v33 = 1704;
    unsigned int v9 = "NEVirtualInterface Failure in %s at line %d.";
    int v10 = v14;
    uint32_t v11 = 18;
    goto LABEL_15;
  }
  int v5 = *(_DWORD *)(a1 + 296);
  socklen_t v29 = a2;
  if (setsockopt(v5, 2, 17, &v29, 4u))
  {
    CFIndex v7 = ne_log_obj();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v8 = *__error();
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v31) = v8;
    unsigned int v9 = "setsockopt ENABLE_CHANNEL failed (errno = %d)\n";
    int v10 = v7;
    uint32_t v11 = 8;
LABEL_15:
    _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    return 0;
  }
  int v6 = 18;
LABEL_17:
  socklen_t v29 = 16 * a2;
  int v15 = (char *)malloc_type_calloc(1uLL, 16 * a2, 0xBAEA5D18uLL);
  if (!v15)
  {
    int v18 = ne_log_obj();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_19DDAF000, v18, OS_LOG_TYPE_FAULT, "calloc failed", buf, 2u);
    }
    NEVirtualInterfaceDisableChannel(a1);
    return 0;
  }
  uint32_t v16 = v15;
  if (getsockopt(v5, 2, v6, v15, &v29))
  {
    int v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v27 = *__error();
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v31) = v27;
      _os_log_error_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_ERROR, "getsockopt GET_CHANNEL_UUID failed (errno %d)\n", buf, 8u);
    }
    NEVirtualInterfaceDisableChannel(a1);
    free(v16);
    return 0;
  }
  *(unsigned char *)(a1 + 312) |= 0x10u;
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2)
  {
    uint64_t v22 = a2;
    uint64_t v23 = v16 + 8;
    do
    {
      CFUUIDRef v24 = CFUUIDCreateFromUUIDBytes(v21, *(CFUUIDBytes *)(v23 - 8));
      if (v24)
      {
        CFUUIDRef v25 = v24;
        CFArrayAppendValue(Mutable, v24);
        CFRelease(v25);
      }
      v23 += 16;
      --v22;
    }
    while (v22);
  }
  uint64_t v26 = ne_log_obj();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    int v31 = (const char *)Mutable;
    _os_log_impl(&dword_19DDAF000, v26, OS_LOG_TYPE_INFO, "nexus instances created: %@", buf, 0xCu);
  }
  free(v16);
  return Mutable;
}

uint64_t NEVirtualInterfaceCreateChannel(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v10 = ne_log_obj();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = "NEVirtualInterfaceCreateChannel";
    int v5 = "%s called with null interface";
    int v6 = (uint8_t *)&v12;
    CFIndex v7 = v10;
    uint32_t v8 = 12;
    goto LABEL_11;
  }
  long long v12 = 0uLL;
  if (!NEVirtualInterfaceGetNexusInstance(a1, (unsigned __int8 *)&v12))
  {
    uint64_t v4 = ne_log_obj();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      return 0;
    }
    LOWORD(v11[0]) = 0;
    int v5 = "NEVirtualInterfaceGetNexusInstance failed";
    int v6 = (uint8_t *)v11;
    CFIndex v7 = v4;
    uint32_t v8 = 2;
LABEL_11:
    _os_log_fault_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_FAULT, v5, v6, v8);
    return 0;
  }
  uint64_t result = nw_channel_create_with_nexus();
  if (result) {
    return result;
  }
  int v3 = ne_log_obj();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v9 = *__error();
    v11[0] = 67109120;
    v11[1] = v9;
    _os_log_error_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_ERROR, "nw_channel_create_with_nexus failed (errno %d)", (uint8_t *)v11, 8u);
  }
  NEVirtualInterfaceDisableChannel(a1);
  return 0;
}

BOOL NEVirtualInterfaceEnableFlowswitch(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v13 = ne_log_obj();
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    *(_DWORD *)long long buf = 136315138;
    uint32_t v16 = "NEVirtualInterfaceEnableFlowswitch";
    _os_log_fault_impl(&dword_19DDAF000, v13, OS_LOG_TYPE_FAULT, "%s called with null interface", buf, 0xCu);
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 296);
  BOOL v14 = a2 != 0;
  uint64_t v4 = *(void *)(a1 + 256);
  if (v4 == 1)
  {
    int v5 = 19;
  }
  else
  {
    if (v4 != 2)
    {
      CFIndex v7 = ne_log_obj();
      BOOL result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)long long buf = 136315394;
      uint32_t v16 = "NEVirtualInterfaceEnableFlowswitch";
      __int16 v17 = 1024;
      int v18 = 1909;
      uint32_t v8 = "NEVirtualInterface Failure in %s at line %d.";
      int v9 = v7;
      uint32_t v10 = 18;
      goto LABEL_13;
    }
    int v5 = 10;
  }
  if (setsockopt(v3, 2, v5, &v14, 4u) != -1) {
    return 1;
  }
  uint32_t v11 = ne_log_obj();
  BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v12 = *__error();
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v16) = v12;
    uint32_t v8 = "setsockopt ENABLE_FLOWSWITCH failed (errno = %d)\n";
    int v9 = v11;
    uint32_t v10 = 8;
LABEL_13:
    _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, v8, buf, v10);
    return 0;
  }
  return result;
}

BOOL NEVirtualInterfaceNameIsVPN(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint32_t v8 = ne_log_obj();
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_FAULT);
    if (!result) {
      return result;
    }
    *(_DWORD *)uint32_t v11 = 136315138;
    *(void *)&_DWORD v11[4] = "NEVirtualInterfaceNameIsVPN";
    _os_log_fault_impl(&dword_19DDAF000, v8, OS_LOG_TYPE_FAULT, "%s called with null interfaceName", v11, 0xCu);
    return 0;
  }
  int v4 = socket(30, 2, 0);
  if (v4 < 0) {
    return 0;
  }
  int v5 = v4;
  *(_OWORD *)uint32_t v11 = 0u;
  long long v12 = 0u;
  __strlcpy_chk();
  LOBYTE(v12) = a2 != 0;
  if (ioctl(v5, 0xC02069DFuLL, v11) < 0)
  {
    int v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v10 = a1;
      _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, "Failed to set is VPN flag for interface %s", buf, 0xCu);
    }
  }
  close(v5);
  return 1;
}

BOOL NEVirtualInterfaceIsVPN(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = a1 + 265;
    return NEVirtualInterfaceNameIsVPN(v2, a2);
  }
  else
  {
    int v4 = ne_log_obj();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      int v5 = 136315138;
      int v6 = "NEVirtualInterfaceIsVPN";
      _os_log_fault_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_FAULT, "%s called with null interface", (uint8_t *)&v5, 0xCu);
    }
    return 0;
  }
}

void NEVirtualInterfaceInvalidate(uint64_t a1)
{
  if (a1 && (*(unsigned char *)(a1 + 312) & 0x20) == 0)
  {
    *(unsigned char *)(a1 + 312) |= 0x20u;
    uint64_t v1 = *(NSObject **)(a1 + 64);
    if (v1)
    {
      *(void *)(a1 + 64) = 0;
      if (*(unsigned char *)(a1 + 74))
      {
        *(unsigned char *)(a1 + 74) = 0;
        dispatch_resume(v1);
      }
      dispatch_source_cancel(v1);
    }
    else
    {
      NEVirtualInterfaceTearDown(a1);
    }
  }
}

uint64_t NEVirtualInterfaceSetReadIPPacketHandler(void *a1, const void *a2)
{
  return NEVirtualInterfaceSetBothReadIPPacketHandlers(a1, a2, 0, 1u);
}

uint64_t NEVirtualInterfaceSetBothReadIPPacketHandlers(void *a1, const void *a2, const void *a3, unsigned int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    uint32_t v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    __int16 v17 = 1024;
    int v18 = 2398;
    uint64_t v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  if (a1[32] == 2)
  {
    int v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    uint32_t v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    __int16 v17 = 1024;
    int v18 = 2402;
    uint64_t v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_29:
    uint32_t v11 = v5;
    uint32_t v12 = 18;
LABEL_30:
    _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v15, v12);
    return 0;
  }
  if (!a4)
  {
    int v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    uint32_t v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    __int16 v17 = 1024;
    int v18 = 2406;
    uint64_t v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  if (a2 && a3)
  {
    uint64_t v10 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315138;
    uint32_t v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    uint64_t v7 = "%s: Error: cannot set both single and mutliple packet handlers";
    uint32_t v11 = v10;
    uint32_t v12 = 12;
    goto LABEL_30;
  }
  if (!NEVirtualInterfaceAdjustReadBufferSize((uint64_t)a1, a4))
  {
    int v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    uint32_t v16 = "NEVirtualInterfaceSetBothReadIPPacketHandlers";
    __int16 v17 = 1024;
    int v18 = 2415;
    uint64_t v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  uint64_t v13 = (const void *)a1[4];
  if (v13)
  {
    _Block_release(v13);
    a1[4] = 0;
  }
  BOOL v14 = (const void *)a1[6];
  if (v14)
  {
    _Block_release(v14);
    a1[6] = 0;
  }
  if (a2) {
    a1[4] = _Block_copy(a2);
  }
  if (a3) {
    a1[6] = _Block_copy(a3);
  }
  if (!a1[2]) {
    return 1;
  }

  return NEVirtualInterfaceCreateReadSource((uint64_t)a1);
}

BOOL NEVirtualInterfaceCreateReadSource(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 256) == 2)
  {
    uint64_t v1 = ne_log_obj();
    BOOL result = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    int v3 = "Invalid interface type for creating read source\n";
LABEL_4:
    int v4 = v1;
    uint32_t v5 = 2;
    goto LABEL_5;
  }
  uint64_t v7 = *(NSObject **)(a1 + 64);
  if (v7)
  {
    int v8 = *(unsigned __int8 *)(a1 + 74);
    *(_DWORD *)(a1 + 20_Block_object_dispose(&STACK[0x2A0], 8) = *(_DWORD *)(a1 + 96);
    if (!v8) {
      return 1;
    }
    goto LABEL_12;
  }
  int v14 = 1;
  if (ioctl(*(_DWORD *)(a1 + 296), 0x8004667EuLL, &v14) != -1)
  {
    dispatch_source_t v9 = dispatch_source_create(MEMORY[0x1E4F14478], *(int *)(a1 + 296), 0, *(dispatch_queue_t *)(a1 + 16));
    if (!v9)
    {
      uint64_t v1 = ne_log_obj();
      if (!os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      *(_WORD *)long long buf = 0;
      int v3 = "NEVirtualInterface could not create read source\n";
      goto LABEL_4;
    }
    uint64_t v7 = v9;
    CFRetain((CFTypeRef)a1);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __NEVirtualInterfaceCreateReadSource_block_invoke;
    handler[3] = &__block_descriptor_tmp_73;
    void handler[4] = a1;
    void handler[5] = v7;
    dispatch_source_set_cancel_handler(v7, handler);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __NEVirtualInterfaceCreateReadSource_block_invoke_2;
    v12[3] = &__block_descriptor_tmp_74;
    void v12[4] = a1;
    dispatch_source_set_event_handler(v7, v12);
    *(void *)(a1 + 64) = v7;
    *(_DWORD *)(a1 + 20_Block_object_dispose(&STACK[0x2A0], 8) = *(_DWORD *)(a1 + 96);
LABEL_12:
    *(unsigned char *)(a1 + 74) = 0;
    dispatch_resume(v7);
    return 1;
  }
  uint64_t v10 = ne_log_obj();
  if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  int v11 = *__error();
  *(_DWORD *)long long buf = 67109120;
  int v16 = v11;
  int v3 = "FIONBIO failed: %d\n";
  int v4 = v10;
  uint32_t v5 = 8;
LABEL_5:
  _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, v3, buf, v5);
  return 0;
}

void __NEVirtualInterfaceCreateReadSource_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(unsigned char *)(v2 + 74))
  {
    *(unsigned char *)(v2 + 74) = 0;
    dispatch_resume(*(dispatch_object_t *)(a1 + 40));
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    NEVirtualInterfaceTearDown(v3);
    int v4 = *(const void **)(a1 + 32);
    CFRelease(v4);
  }
}

uint64_t __NEVirtualInterfaceCreateReadSource_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (*(void *)(result + 64))
  {
    unsigned int v3 = *(_DWORD *)(result + 208);
    int v4 = *(unsigned __int8 *)(result + 73);
    if (!*(unsigned char *)(result + 73))
    {
      dispatch_suspend(*(dispatch_object_t *)(result + 64));
      uint64_t result = *(void *)(a1 + 32);
      *(unsigned char *)(result + 74) = 1;
      int v4 = *(unsigned __int8 *)(result + 73);
    }
    do
    {
      if (v4) {
        unsigned int v3 = *(_DWORD *)(result + 96);
      }
      uint64_t result = NEVirtualInterfaceReadMultiplePackets(result, v3);
      if (!result) {
        break;
      }
      uint64_t result = *(void *)(a1 + 32);
      int v4 = *(unsigned __int8 *)(result + 73);
    }
    while (*(unsigned char *)(result + 73));
  }
  return result;
}

BOOL NEVirtualInterfaceReadMultiplePackets(uint64_t a1, unsigned int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 96);
  if (v3 >= a2) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 256);
  bzero(*(void **)(a1 + 200), 56 * v4);
  if (v6 == 1)
  {
    bzero(*(void **)(a1 + 104), 4 * v4);
    int v7 = 1;
    unint64_t v8 = 4;
    if (v5)
    {
LABEL_6:
      v8 |= 0x10uLL;
      bzero(*(void **)(a1 + 112), 16 * v4);
      int v9 = v7++;
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v8 = 0;
    int v7 = 0;
    if (v5) {
      goto LABEL_6;
    }
  }
  int v9 = -1;
LABEL_9:
  if (v4)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = v7 + 1;
    uint64_t v14 = *(void *)(a1 + 192);
    int v15 = (int *)(*(void *)(a1 + 200) + 24);
    int v16 = *(uint64_t **)(a1 + 80);
    uint64_t v17 = *(void *)(a1 + 88);
    do
    {
      uint64_t v18 = v10;
      uint64_t v19 = (void *)(v14 + 16 * v10);
      *((void *)v15 - 1) = v19;
      int *v15 = v13;
      if (v6 == 1)
      {
        *uint64_t v19 = *(void *)(a1 + 104) + v12;
        *(void *)(v14 + 16 * v18 + _Block_object_dispose(&STACK[0x2A0], 8) = 4;
      }
      if ((v9 & 0x80000000) == 0)
      {
        CFUUIDRef v20 = (void *)(v14 + 16 * (v9 + v18));
        void *v20 = *(void *)(a1 + 112) + v11;
        v20[1] = 16;
      }
      uint64_t v21 = *v16++;
      uint64_t v22 = (void *)(v14 + 16 * (v7 + v18));
      v12 += 4;
      void *v22 = v21;
      v22[1] = v17;
      v11 += 16;
      v15 += 14;
      unsigned int v10 = v18 + v13;
    }
    while (4 * v4 != v12);
  }
  uint64_t v23 = recvmsg_x();
  uint64_t v24 = v23;
  if (*(void *)(a1 + 32)) {
    BOOL v25 = 1;
  }
  else {
    BOOL v25 = *(void *)(a1 + 48) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    BOOL v26 = 1;
    if (v23 < 0) {
      return v24 >= 0;
    }
  }
  else
  {
    BOOL v26 = *(void *)(a1 + 56) != 0;
    if (v23 < 0) {
      return v24 >= 0;
    }
  }
  if (v25 || v26)
  {
    uint64_t v27 = v23;
    bzero(*(void **)(a1 + 168), 28 * v23);
    bzero(*(void **)(a1 + 176), 28 * v24);
    bzero(*(void **)(a1 + 184), v24);
    if (v24)
    {
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 48;
      while (1)
      {
        unint64_t v31 = *(void *)(*(void *)(a1 + 200) + v30);
        if (v31 && v31 >= v8) {
          break;
        }
        *(_DWORD *)(*(void *)(a1 + 104) + 4 * v29) = 0;
        *(void *)(*(void *)(a1 + 128) + 8 * v29) = 0;
        *(void *)(*(void *)(a1 + 144) + 8 * v29) = 0;
LABEL_43:
        ++v28;
        v30 += 56;
        if (v27 == v28) {
          goto LABEL_49;
        }
      }
      unint64_t v33 = v31 - v8;
      uint64_t v34 = *(void *)(a1 + 136);
      *(void *)(*(void *)(a1 + 144) + 8 * v29) = v33;
      *(_DWORD *)(*(void *)(a1 + 104) + 4 * v29) = bswap32(*(_DWORD *)(*(void *)(a1 + 104) + 4 * v28));
      *(void *)(v34 + 8 * v29) = *(void *)(*(void *)(a1 + 80) + 8 * v28);
      if (!v26)
      {
LABEL_40:
        uint64_t v47 = *(void *)(a1 + 32);
        if (v47) {
          (*(void (**)(uint64_t, uint64_t, void, void, void, void))(v47 + 16))(v47, a1, *(unsigned int *)(*(void *)(a1 + 104) + 4 * v28), *(void *)(*(void *)(a1 + 136) + 8 * v28), *(void *)(*(void *)(a1 + 144) + 8 * v28), *(void *)(a1 + 24));
        }
        uint64_t v29 = (v29 + 1);
        goto LABEL_43;
      }
      int v35 = *(_DWORD *)(*(void *)(a1 + 104) + 4 * v29);
      if (v35 == 30)
      {
        uint64_t v41 = *(void *)(*(void *)(a1 + 152) + 8 * v29);
        uint64_t v42 = *(void *)(*(void *)(a1 + 160) + 8 * v29);
        uint64_t v43 = *(void *)(*(void *)(a1 + 136) + 8 * v29);
        *(_WORD *)uint64_t v42 = 7708;
        *(_WORD *)uint64_t v41 = 7708;
        *(_OWORD *)(v41 + _Block_object_dispose(&STACK[0x2A0], 8) = *(_OWORD *)(v43 + 8);
        *(_OWORD *)(v42 + _Block_object_dispose(&STACK[0x2A0], 8) = *(_OWORD *)(v43 + 24);
        xpc_object_t v39 = (unsigned char *)(v43 + 6);
        uint64_t v40 = 40;
      }
      else
      {
        if (v35 != 2)
        {
          uint64_t v40 = 0;
LABEL_38:
          *(void *)(*(void *)(a1 + 120) + 8 * v29) = *(void *)(*(void *)(a1 + 136)
                                                                                   + 8 * v29)
                                                                       + v40;
          unint64_t v44 = v33 - v40;
          uint64_t v45 = *(void *)(a1 + 128);
          *(void *)(v45 + 8 * v29) = v44;
          uint64_t v46 = *(void *)(a1 + 40);
          if (v46) {
            (*(void (**)(uint64_t, uint64_t, void, void, void, void, void, void))(v46 + 16))(v46, a1, *(void *)(*(void *)(a1 + 152) + 8 * v28), *(void *)(*(void *)(a1 + 160) + 8 * v28), *(unsigned __int8 *)(*(void *)(a1 + 184) + v28), *(void *)(*(void *)(a1 + 120) + 8 * v28), *(void *)(v45 + 8 * v28), *(void *)(a1 + 24));
          }
          goto LABEL_40;
        }
        uint64_t v36 = *(void *)(*(void *)(a1 + 152) + 8 * v29);
        uint64_t v37 = *(void *)(*(void *)(a1 + 160) + 8 * v29);
        uint64_t v38 = *(void *)(*(void *)(a1 + 136) + 8 * v29);
        *(_WORD *)uint64_t v37 = 528;
        *(_WORD *)uint64_t v36 = 528;
        *(_DWORD *)(v36 + 4) = *(_DWORD *)(v38 + 12);
        *(_DWORD *)(v37 + 4) = *(_DWORD *)(v38 + 16);
        xpc_object_t v39 = (unsigned char *)(v38 + 9);
        uint64_t v40 = 20;
      }
      *(unsigned char *)(*(void *)(a1 + 184) + v29) = *v39;
      goto LABEL_38;
    }
    uint64_t v29 = 0;
LABEL_49:
    uint64_t v49 = *(void *)(a1 + 56);
    if (v49) {
      (*(void (**)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void))(v49 + 16))(v49, a1, *(void *)(a1 + 152), *(void *)(a1 + 160), *(void *)(a1 + 184), *(void *)(a1 + 120), *(void *)(a1 + 128), v29, *(void *)(a1 + 24));
    }
    uint64_t v50 = *(void *)(a1 + 48);
    if (v50) {
      (*(void (**)(uint64_t, uint64_t, void, void, void, void, uint64_t, void))(v50 + 16))(v50, a1, *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 136), *(void *)(a1 + 144), v29, *(void *)(a1 + 24));
    }
  }
  else if (*(unsigned char *)(a1 + 74))
  {
    CFStringRef v48 = *(NSObject **)(a1 + 64);
    if (v48)
    {
      *(_DWORD *)(a1 + 20_Block_object_dispose(&STACK[0x2A0], 8) = *(_DWORD *)(a1 + 96);
      dispatch_resume(v48);
      *(unsigned char *)(a1 + 74) = 0;
    }
  }
  return v24 >= 0;
}

uint64_t NEVirtualInterfaceSetReadMultipleIPPacketsHandler(void *a1, const void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = 0;
  if (NEVirtualInterfaceGetMaxPendingPackets((uint64_t)a1, (int *)&v6)) {
    return NEVirtualInterfaceSetBothReadIPPacketHandlers(a1, 0, a2, v6);
  }
  uint64_t v5 = ne_log_obj();
  uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)long long buf = 136315394;
    unint64_t v8 = "NEVirtualInterfaceSetReadMultipleIPPacketsHandler";
    __int16 v9 = 1024;
    int v10 = 2453;
    _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

BOOL NEVirtualInterfaceGetMaxPendingPackets(uint64_t a1, int *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    unsigned int v6 = ne_log_obj();
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    __int16 v19 = 1024;
    LODWORD(v20) = 3139;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_21:
    uint64_t v12 = v6;
    uint32_t v13 = 18;
    goto LABEL_22;
  }
  uint64_t v3 = *(void *)(a1 + 256);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      if (!a2) {
        return 1;
      }
      int v4 = 64;
LABEL_6:
      *a2 = v4;
      return 1;
    }
    unsigned int v6 = ne_log_obj();
    BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    __int16 v19 = 1024;
    LODWORD(v20) = 3151;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_21;
  }
  socklen_t v15 = 4;
  int v16 = 0;
  int v8 = getsockopt(*(_DWORD *)(a1 + 296), 2, 16, &v16, &v15);
  if (v8)
  {
    int v9 = v8;
    int v10 = ne_log_obj();
    BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v11 = strerror(v9);
    *(_DWORD *)long long buf = 136315394;
    uint64_t v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    __int16 v19 = 2080;
    CFUUIDRef v20 = v11;
    int v7 = "%s failed to get max pending packets: %s\n";
    uint64_t v12 = v10;
    uint32_t v13 = 22;
LABEL_22:
    _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, v7, buf, v13);
    return 0;
  }
  if (v15 == 4)
  {
    if (!a2) {
      return 1;
    }
    int v4 = v16;
    goto LABEL_6;
  }
  uint64_t v14 = ne_log_obj();
  BOOL result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v18 = "NEVirtualInterfaceGetMaxPendingPackets";
    int v7 = "%s failed to get correct output length when getting max pending packets\n";
    uint64_t v12 = v14;
    uint32_t v13 = 12;
    goto LABEL_22;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetReadIPPayloadHandler(void *a1, const void *a2)
{
  return NEVirtualInterfaceSetBothReadIPPayloadHandler(a1, a2, 0, 1u);
}

uint64_t NEVirtualInterfaceSetBothReadIPPayloadHandler(void *a1, const void *a2, const void *a3, unsigned int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    int v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    __int16 v17 = 1024;
    int v18 = 2466;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  if (a1[32] == 2)
  {
    uint64_t v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    int v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    __int16 v17 = 1024;
    int v18 = 2470;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_29:
    uint64_t v11 = v5;
    uint32_t v12 = 18;
LABEL_30:
    _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v15, v12);
    return 0;
  }
  if (!a4)
  {
    uint64_t v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    int v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    __int16 v17 = 1024;
    int v18 = 2474;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  if (a2 && a3)
  {
    int v10 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315138;
    int v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    int v7 = "%s: Error: cannot set both single and mutliple payload handlers";
    uint64_t v11 = v10;
    uint32_t v12 = 12;
    goto LABEL_30;
  }
  if (!NEVirtualInterfaceAdjustReadBufferSize((uint64_t)a1, a4))
  {
    uint64_t v5 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v15 = 136315394;
    int v16 = "NEVirtualInterfaceSetBothReadIPPayloadHandler";
    __int16 v17 = 1024;
    int v18 = 2483;
    int v7 = "NEVirtualInterface Failure in %s at line %d.";
    goto LABEL_29;
  }
  uint32_t v13 = (const void *)a1[5];
  if (v13)
  {
    _Block_release(v13);
    a1[5] = 0;
  }
  uint64_t v14 = (const void *)a1[7];
  if (v14)
  {
    _Block_release(v14);
    a1[7] = 0;
  }
  if (a2) {
    a1[5] = _Block_copy(a2);
  }
  if (a3) {
    a1[7] = _Block_copy(a3);
  }
  if (!a1[2]) {
    return 1;
  }

  return NEVirtualInterfaceCreateReadSource((uint64_t)a1);
}

uint64_t NEVirtualInterfaceSetReadMultipleIPPayloadsHandler(void *a1, const void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = 0;
  if (NEVirtualInterfaceGetMaxPendingPackets((uint64_t)a1, (int *)&v6)) {
    return NEVirtualInterfaceSetBothReadIPPayloadHandler(a1, 0, a2, v6);
  }
  uint64_t v5 = ne_log_obj();
  uint64_t result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)long long buf = 136315394;
    int v8 = "NEVirtualInterfaceSetReadMultipleIPPayloadsHandler";
    __int16 v9 = 1024;
    int v10 = 2521;
    _os_log_error_impl(&dword_19DDAF000, v5, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetReadAutomatically(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 73) = a2;
  }
  return result;
}

uint64_t NEVirtualInterfaceGetReadAutomatically(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned __int8 *)(a1 + 73);
  }
  uint64_t v2 = ne_log_obj();
  uint64_t result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v3 = 136315394;
    int v4 = "NEVirtualInterfaceGetReadAutomatically";
    __int16 v5 = 1024;
    int v6 = 2537;
    _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", (uint8_t *)&v3, 0x12u);
    return 0;
  }
  return result;
}

void NEVirtualInterfaceReadyToReadMultiple(uint64_t a1, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    uint64_t v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v7 = "NEVirtualInterfaceReadyToReadMultiple";
    __int16 v8 = 1024;
    int v9 = 2546;
    goto LABEL_14;
  }
  if (*(void *)(a1 + 256) == 2)
  {
    uint64_t v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v7 = "NEVirtualInterfaceReadyToReadMultiple";
    __int16 v8 = 1024;
    int v9 = 2550;
LABEL_14:
    _os_log_error_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return;
  }
  if (!a2)
  {
    uint64_t v2 = ne_log_obj();
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v7 = "NEVirtualInterfaceReadyToReadMultiple";
    __int16 v8 = 1024;
    int v9 = 2554;
    goto LABEL_14;
  }
  int v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    if (*(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 74))
      {
        v4[0] = MEMORY[0x1E4F143A8];
        v4[1] = 0x40000000;
        unint64_t v4[2] = __NEVirtualInterfaceReadyToReadMultiple_block_invoke;
        v4[3] = &__block_descriptor_tmp_25012;
        unint64_t v4[4] = a1;
        unsigned int v5 = a2;
        dispatch_async(v3, v4);
      }
    }
  }
  else
  {
    NEVirtualInterfaceReadMultiplePackets(a1, a2);
  }
}

void __NEVirtualInterfaceReadyToReadMultiple_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2
    && *(void *)(v2 + 64)
    && *(unsigned char *)(v2 + 74)
    && !NEVirtualInterfaceReadMultiplePackets(v2, *(_DWORD *)(a1 + 40)))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(unsigned char *)(v3 + 74) = 0;
    *(_DWORD *)(v3 + 20_Block_object_dispose(&STACK[0x2A0], 8) = *(_DWORD *)(a1 + 40);
    int v4 = *(NSObject **)(v3 + 64);
    dispatch_resume(v4);
  }
}

void NEVirtualInterfaceReadyToRead(uint64_t a1)
{
}

uint64_t NEVirtualInterfaceWriteIPPacket(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = a2;
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  return NEVirtualInterfaceWriteMultipleIPPackets(a1, (uint64_t)&v7, (uint64_t)&v6, (uint64_t)&v5, 1u);
}

uint64_t NEVirtualInterfaceWriteMultipleIPPackets(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2592;
      goto LABEL_58;
    }
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 256);
  if (v6 == 2)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2596;
LABEL_58:
      _os_log_error_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      return 0;
    }
    return 0;
  }
  if (!a2 && v6 == 1)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2600;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a3)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2604;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a4)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2608;
      goto LABEL_58;
    }
    return 0;
  }
  if ((*(_DWORD *)(a1 + 296) & 0x80000000) != 0)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2612;
      goto LABEL_58;
    }
    return 0;
  }
  if (!a5)
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2616;
      goto LABEL_58;
    }
    return 0;
  }
  unsigned int v12 = *(_DWORD *)(a1 + 212);
  if (!v12)
  {
    NEVirtualInterfaceAdjustSendCount(a1, 0x10u);
    unsigned int v12 = *(_DWORD *)(a1 + 212);
  }
  if (a2) {
    BOOL v13 = *(void *)(a1 + 256) == 1;
  }
  else {
    BOOL v13 = 0;
  }
  int v14 = *(unsigned __int8 *)(a1 + 72);
  BOOL v41 = v13;
  if (*(unsigned char *)(a1 + 72)) {
    int v15 = v13 + 1;
  }
  else {
    int v15 = v13;
  }
  int v16 = v15 + 1;
  if (v12 <= a5)
  {
    uint64_t v19 = (char *)malloc_type_malloc(16 * v16 * a5, 0x1080040FC6463CFuLL);
    if (!v19)
    {
      int v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
        __int16 v45 = 1024;
        int v46 = 2648;
        goto LABEL_58;
      }
      return 0;
    }
    __int16 v17 = v19;
    unsigned int v40 = v12;
    uint64_t v18 = a5;
    CFUUIDRef v20 = (int *)malloc_type_calloc(a5, 0x38uLL, 0x10A004053D910A2uLL);
    if (!v20)
    {
      int v35 = ne_log_obj();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
        __int16 v45 = 1024;
        int v46 = 2653;
        _os_log_error_impl(&dword_19DDAF000, v35, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      }
      free(v17);
      return 0;
    }
    xpc_object_t v39 = v20;
  }
  else
  {
    unsigned int v40 = v12;
    __int16 v17 = *(char **)(a1 + 216);
    uint64_t v18 = a5;
    xpc_object_t v39 = *(int **)(a1 + 224);
    bzero(v39, 56 * a5);
  }
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  int v21 = 0;
  uint64_t v22 = 0;
  if (a2) {
    BOOL v23 = v41;
  }
  else {
    BOOL v23 = 0;
  }
  uint64_t v24 = v39 + 6;
  uint64_t v25 = a2;
  do
  {
    if (!*(void *)(a3 + 8 * v22))
    {
      uint64_t v30 = v39;
      __int16 v32 = ne_log_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
LABEL_52:
        uint64_t v31 = 0;
        goto LABEL_53;
      }
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2667;
LABEL_68:
      _os_log_error_impl(&dword_19DDAF000, v32, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_52;
    }
    if (!*(void *)(a4 + 8 * v22))
    {
      uint64_t v30 = v39;
      __int16 v32 = ne_log_obj();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136315394;
      unint64_t v44 = "NEVirtualInterfaceWriteMultipleIPPackets";
      __int16 v45 = 1024;
      int v46 = 2672;
      goto LABEL_68;
    }
    BOOL v26 = &v17[16 * v21];
    *((void *)v24 - 1) = v26;
    int *v24 = v16;
    if (v23)
    {
      *(_DWORD *)(a2 + 4 * v22) = bswap32(*(_DWORD *)(a2 + 4 * v22));
      *(void *)BOOL v26 = v25;
      *(void *)&v17[16 * v21 + 8] = 4;
    }
    if (v14)
    {
      uint64_t v27 = (unsigned __int8 **)&v17[16 * v41 + 16 * v21];
      *uint64_t v27 = uu;
      v27[1] = (unsigned __int8 *)16;
    }
    uint64_t v28 = &v17[16 * v15 + 16 * v21];
    *(void *)uint64_t v28 = *(void *)(a3 + 8 * v22);
    uint64_t v29 = *(void *)(a4 + 8 * v22++);
    *((void *)v28 + 1) = v29;
    v25 += 4;
    v24 += 14;
    v21 += v16;
  }
  while (v18 != v22);
  uint64_t v30 = v39;
  if (sendmsg_x() > 0)
  {
    uint64_t v31 = 1;
LABEL_53:
    unsigned int v33 = v40;
    goto LABEL_54;
  }
  uint64_t v36 = ne_log_obj();
  unsigned int v33 = v40;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    uint64_t v37 = __error();
    uint64_t v38 = strerror(*v37);
    *(_DWORD *)long long buf = 136315138;
    unint64_t v44 = v38;
    _os_log_error_impl(&dword_19DDAF000, v36, OS_LOG_TYPE_ERROR, "User Tunnel write error: %s", buf, 0xCu);
  }
  uint64_t v31 = 0;
LABEL_54:
  if (v33 <= a5)
  {
    free(v17);
    free(v30);
  }
  return v31;
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloads(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  return NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, a2, a3, a4, a5, a6, a7, 0);
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloadsInner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, int a8)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2716;
    goto LABEL_68;
  }
  if (*(void *)(a1 + 256) != 1)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2720;
    goto LABEL_68;
  }
  if (!a2)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2724;
    goto LABEL_68;
  }
  if (!a3)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2728;
    goto LABEL_68;
  }
  if (!a4)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2732;
    goto LABEL_68;
  }
  if (!a5)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2736;
    goto LABEL_68;
  }
  if (!a6)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2740;
    goto LABEL_68;
  }
  if ((*(_DWORD *)(a1 + 296) & 0x80000000) != 0)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2744;
    goto LABEL_68;
  }
  if (!a7)
  {
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2748;
    goto LABEL_68;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 212);
  if (!v16)
  {
    NEVirtualInterfaceAdjustSendCount(a1, 0x10u);
    unsigned int v16 = *(_DWORD *)(a1 + 212);
  }
  if (*(unsigned char *)(a1 + 72)) {
    size_t v17 = 60;
  }
  else {
    size_t v17 = 44;
  }
  if (v16 <= a7)
  {
    uint64_t v47 = (char *)malloc_type_malloc(32 * a7, 0x1080040FC6463CFuLL);
    if (v47)
    {
      unsigned int v60 = v16;
      uint64_t v62 = v47;
      uint64_t v19 = a7;
      CFStringRef v48 = (char *)malloc_type_calloc(a7, 0x38uLL, 0x10A004053D910A2uLL);
      if (v48)
      {
        unsigned __int8 v61 = v48;
        uint64_t v49 = (char *)malloc_type_calloc(a7, v17, 0xE61603CuLL);
        if (v49)
        {
          uint64_t v18 = v49;
          goto LABEL_17;
        }
        xpc_object_t v55 = ne_log_obj();
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
          __int16 v65 = 1024;
          int v66 = 2777;
          _os_log_error_impl(&dword_19DDAF000, v55, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
        }
        free(v62);
        uint64x2_t v52 = v61;
      }
      else
      {
        int v51 = ne_log_obj();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
          __int16 v65 = 1024;
          int v66 = 2771;
          _os_log_error_impl(&dword_19DDAF000, v51, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
        }
        uint64x2_t v52 = v62;
      }
      free(v52);
      return 0;
    }
    int v46 = ne_log_obj();
    if (!os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    *(_DWORD *)long long buf = 136315394;
    char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
    __int16 v65 = 1024;
    int v66 = 2766;
LABEL_68:
    _os_log_error_impl(&dword_19DDAF000, v46, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    return 0;
  }
  unsigned int v60 = v16;
  unsigned __int8 v61 = *(char **)(a1 + 224);
  uint64_t v62 = *(char **)(a1 + 216);
  unsigned int v59 = v17;
  uint64_t v18 = *(char **)(a1 + 232);
  uint64_t v19 = a7;
  bzero(v61, 56 * a7);
  bzero(v18, v59 * (unint64_t)a7);
LABEL_17:
  uint64_t v20 = 0;
  LODWORD(v21) = 0;
  do
  {
    if (a8) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = v20;
    }
    if (!*(void *)(a5 + 8 * v20))
    {
      int v53 = v18;
      uint64_t v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      *(_DWORD *)long long buf = 136315394;
      char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      __int16 v65 = 1024;
      int v66 = 2796;
LABEL_84:
      _os_log_error_impl(&dword_19DDAF000, v54, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
      goto LABEL_85;
    }
    uint64_t v22 = *(void *)(a6 + 8 * v20);
    if (!v22)
    {
      int v53 = v18;
      uint64_t v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      *(_DWORD *)long long buf = 136315394;
      char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      __int16 v65 = 1024;
      int v66 = 2801;
      goto LABEL_84;
    }
    uint64_t v23 = *(void *)(a2 + 8 * v21);
    if (!v23)
    {
      int v53 = v18;
      uint64_t v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      *(_DWORD *)long long buf = 136315394;
      char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      __int16 v65 = 1024;
      int v66 = 2806;
      goto LABEL_84;
    }
    uint64_t v24 = *(void *)(a3 + 8 * v21);
    if (!v24)
    {
      int v53 = v18;
      uint64_t v54 = ne_log_obj();
      if (!os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
        goto LABEL_85;
      }
      *(_DWORD *)long long buf = 136315394;
      char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
      __int16 v65 = 1024;
      int v66 = 2811;
      goto LABEL_84;
    }
    if (*(unsigned __int8 *)(v23 + 1) != *(unsigned __int8 *)(v24 + 1))
    {
      int v53 = v18;
      uint64_t v54 = ne_log_obj();
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        char v64 = "NEVirtualInterfaceWriteMultipleIPPayloadsInner";
        __int16 v65 = 1024;
        int v66 = 2816;
        goto LABEL_84;
      }
LABEL_85:
      uint64_t v43 = 0;
      unint64_t v44 = v62;
      unsigned int v45 = v60;
      goto LABEL_86;
    }
    uint64_t v25 = (2 * v20);
    BOOL v26 = &v62[16 * v25];
    uint64_t v27 = &v61[56 * v20];
    *((void *)v27 + 2) = v26;
    *((_DWORD *)v27 + 6) = 2;
    uint64_t v28 = &v18[v20];
    *(void *)BOOL v26 = &v18[v20];
    uint64_t v29 = &v62[16 * ((2 * v20) | 1)];
    *(void *)uint64_t v29 = *(void *)(a5 + 8 * v20);
    *((void *)v29 + 1) = v22;
    uint64_t v30 = *(void *)(a2 + 8 * v21);
    int v31 = *(unsigned __int8 *)(v30 + 1);
    *(_DWORD *)&v18[v20] = v31 << 24;
    if (v31 == 30)
    {
      int v39 = *(unsigned __int8 *)(a1 + 72);
      unsigned int v40 = v28 + 4;
      if (*(unsigned char *)(a1 + 72)) {
        unsigned int v40 = v28 + 20;
      }
      *(void *)&v62[16 * v25 + 8] = 44;
      uint64_t v41 = *(void *)(a3 + 8 * v21);
      *(_OWORD *)(v40 + _Block_object_dispose(&STACK[0x2A0], 8) = *(_OWORD *)(v30 + 8);
      *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 8);
      if (v39) {
        uint64_t v42 = 20;
      }
      else {
        uint64_t v42 = 4;
      }
      *((_WORD *)v40 + 2) = bswap32(*(unsigned __int16 *)(a6 + 8 * v20)) >> 16;
      v40[6] = *(unsigned char *)(a4 + v21);
      v28[v42] |= 0x60u;
    }
    else if (v31 == 2)
    {
      unsigned int v32 = 0;
      unsigned int v33 = (unsigned __int16 *)(v28 + 4);
      if (*(unsigned char *)(a1 + 72))
      {
        unsigned int v33 = (unsigned __int16 *)(v28 + 20);
        uint64_t v34 = 20;
      }
      else
      {
        uint64_t v34 = 4;
      }
      *(void *)&v62[16 * v25 + 8] = 24;
      uint64_t v35 = *(void *)(a3 + 8 * v21);
      *((_DWORD *)v33 + 3) = *(_DWORD *)(v30 + 4);
      *((_DWORD *)v33 + 4) = *(_DWORD *)(v35 + 4);
      v33[1] = bswap32(*(unsigned __int16 *)(a6 + 8 * v20) + 20) >> 16;
      *((unsigned char *)v33 + 9) = *(unsigned char *)(a4 + v21);
      *((unsigned char *)v33 + _Block_object_dispose(&STACK[0x2A0], 8) = 64;
      v28[v34] = 69;
      v33[5] = 0;
      unsigned int v36 = 22;
      uint64_t v37 = v33;
      do
      {
        int v38 = *v37++;
        v32 += v38;
        v36 -= 2;
      }
      while (v36 > 3);
      v33[5] = ~(HIWORD(v32) + v32 + ((HIWORD(v32) + (unsigned __int16)v32) >> 16));
    }
    else
    {
      *(void *)&v62[16 * v25 + 8] = 4;
    }
    ++v20;
  }
  while (v20 != v19);
  if (sendmsg_x() > 0)
  {
    uint64_t v43 = 1;
    unint64_t v44 = v62;
    unsigned int v45 = v60;
    goto LABEL_87;
  }
  int v53 = v18;
  uint64_t v56 = ne_log_obj();
  unsigned int v45 = v60;
  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
  {
    char v57 = __error();
    unsigned __int16 v58 = strerror(*v57);
    *(_DWORD *)long long buf = 136315138;
    char v64 = v58;
    _os_log_error_impl(&dword_19DDAF000, v56, OS_LOG_TYPE_ERROR, "User Tunnel write error: %s", buf, 0xCu);
  }
  uint64_t v43 = 0;
  unint64_t v44 = v62;
LABEL_86:
  uint64_t v18 = v53;
LABEL_87:
  if (v45 <= a7)
  {
    free(v44);
    free(v61);
    free(v18);
  }
  return v43;
}

uint64_t NEVirtualInterfaceWriteMultipleIPPayloadsFromArray(uint64_t a1, uint64_t a2, uint64_t a3, char a4, CFArrayRef theArray)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = a3;
  uint64_t v21 = a2;
  char v19 = a4;
  unsigned int Count = CFArrayGetCount(theArray);
  size_t v8 = 8 * Count;
  int v9 = malloc_type_malloc(v8, 0x10040436913F5uLL);
  if (!v9)
  {
    unsigned int v16 = ne_log_obj();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v23 = "NEVirtualInterfaceWriteMultipleIPPayloadsFromArray";
      __int16 v24 = 1024;
      int v25 = 2901;
      _os_log_error_impl(&dword_19DDAF000, v16, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t v11 = malloc_type_malloc(v8, 0x100004000313F17uLL);
  if (!v11)
  {
    size_t v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      uint64_t v23 = "NEVirtualInterfaceWriteMultipleIPPayloadsFromArray";
      __int16 v24 = 1024;
      int v25 = 2906;
      _os_log_error_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_ERROR, "NEVirtualInterface Failure in %s at line %d.", buf, 0x12u);
    }
    free(v10);
    return 0;
  }
  unsigned int v12 = v11;
  if (Count)
  {
    for (CFIndex i = 0; i != Count; v12[i++] = CFDataGetLength(ValueAtIndex))
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, i);
      *((void *)v10 + i) = CFDataGetBytePtr(ValueAtIndex);
    }
  }
  uint64_t v15 = NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, (uint64_t)&v21, (uint64_t)&v20, (uint64_t)&v19, (uint64_t)v10, (uint64_t)v12, Count, 1);
  free(v10);
  free(v12);
  return v15;
}

uint64_t NEVirtualInterfaceWriteIPPayload(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = a3;
  uint64_t v11 = a2;
  char v9 = a4;
  uint64_t v7 = a6;
  uint64_t v8 = a5;
  return NEVirtualInterfaceWriteMultipleIPPayloadsInner(a1, (uint64_t)&v11, (uint64_t)&v10, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)&v7, 1u, 1);
}

uint64_t NEVirtualInterfaceSetDelegateInterface(uint64_t result, const __CFString *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 264)) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (a2 && CFGetTypeID(a2) == TypeID && CFStringGetLength(a2) >= 1)
  {
    CFIndex Length = CFStringGetLength(a2);
    uint64_t result = (uint64_t)malloc_type_malloc(Length + 1, 0x69E6CA00uLL);
    if (!result) {
      return result;
    }
    uint64_t v6 = (char *)result;
    CFIndex v7 = CFStringGetLength(a2);
    CFStringGetCString(a2, v6, v7 + 1, 0x600u);
    strlen(v6);
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(void *)(v2 + 256);
  if (v8 == 4)
  {
    int v9 = NEHelperInterfaceSetDelegate();
    goto LABEL_16;
  }
  if (v8 == 2 || v8 == 1)
  {
    int v9 = NEHelperInterfaceSetOption();
LABEL_16:
    int v10 = v9;
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  int v10 = 0;
  if (v6) {
LABEL_17:
  }
    free(v6);
LABEL_18:
  if (v10)
  {
    uint64_t v11 = ne_log_obj();
    uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v14 = 136315138;
      uint64_t v15 = strerror(v10);
      _os_log_error_impl(&dword_19DDAF000, v11, OS_LOG_TYPE_ERROR, "Could not set delegate interface: %s", (uint8_t *)&v14, 0xCu);
      return 0;
    }
  }
  else
  {
    unsigned int v12 = *(const void **)(v2 + 480);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(v2 + 480) = 0;
    }
    CFTypeID v13 = CFStringGetTypeID();
    if (a2)
    {
      if (CFGetTypeID(a2) == v13) {
        *(void *)(v2 + 480) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
      }
    }
    NEVirtualInterfaceUpdateMTUWithDelegate(v2);
    return 1;
  }
  return result;
}

void NEVirtualInterfaceUpdateMTUWithDelegate(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 300))
  {
    uint64_t v2 = *(const void **)(a1 + 480);
    CFTypeID TypeID = CFStringGetTypeID();
    if (v2)
    {
      if (CFGetTypeID(v2) == TypeID && CFStringGetLength(*(CFStringRef *)(a1 + 480)) >= 1)
      {
        CFIndex Length = CFStringGetLength(*(CFStringRef *)(a1 + 480));
        uint64_t v5 = (char *)malloc_type_malloc(Length + 1, 0xC887A8E2uLL);
        if (v5)
        {
          uint64_t v6 = v5;
          CFStringRef v7 = *(const __CFString **)(a1 + 480);
          CFIndex v8 = CFStringGetLength(v7);
          CFStringGetCString(v7, v6, v8 + 1, 0x600u);
          int v9 = 0;
          LODWORD(v7) = interface_get_mtu((uint64_t)v6, &v9, (int *)(a1 + 308));
          free(v6);
          if (!v7) {
            NEVirtualInterfaceSetMTU(a1, v9 - *(_DWORD *)(a1 + 300));
          }
        }
      }
    }
  }
}

uint64_t NEVirtualInterfaceSetMTU(uint64_t result, int a2)
{
  *(void *)&v15[5] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    uint64_t v3 = *(void *)(result + 256);
    if (v3 == 3) {
      return 0;
    }
    if (v3 != 1 || a2 < 16001)
    {
      int v6 = NEHelperInterfaceSetMTU();
      if (v6)
      {
        int v7 = v6;
        CFIndex v8 = ne_log_obj();
        uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
        if (result)
        {
          int v14 = 136315138;
          *(void *)uint64_t v15 = strerror(v7);
          int v9 = "Failed to set MTU with NEHelper: %s\n";
          int v10 = v8;
          uint32_t v11 = 12;
LABEL_20:
          _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v14, v11);
          return 0;
        }
      }
      else
      {
        if (*(void *)(v2 + 256) == 1)
        {
          unsigned int v12 = *(_DWORD *)(v2 + 96);
          if (v12) {
            NEVirtualInterfaceAdjustReadBufferSize(v2, v12);
          }
        }
        return 1;
      }
    }
    else
    {
      CFTypeID v13 = ne_log_obj();
      uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v14 = 67109376;
        v15[0] = a2;
        LOWORD(v15[1]) = 1024;
        *(_DWORD *)((char *)&v15[1] + 2) = 16000;
        int v9 = "Requested MTU (%d) is larger than maximum allowed (%d)\n";
        int v10 = v13;
        uint32_t v11 = 14;
        goto LABEL_20;
      }
    }
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyDelegateInterfaceName(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFStringRef v2 = *(const __CFString **)(a1 + 480)) != 0) {
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

BOOL NEVirtualInterfaceSetDescription(uint64_t a1, CFStringRef theString)
{
  BOOL result = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1 && theString)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    *(_OWORD *)int buffer = 0u;
    long long v10 = 0u;
    CFStringGetCString(theString, buffer, 128, 0x8000100u);
    if (*(void *)(a1 + 256) == 4 && (int v4 = NEHelperInterfaceSetDescription()) != 0)
    {
      int v5 = v4;
      int v6 = ne_log_obj();
      BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        int v7 = 136315138;
        CFIndex v8 = strerror(v5);
        _os_log_error_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_ERROR, "Could not set description on redirect interface: %s", (uint8_t *)&v7, 0xCu);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetMTUOverhead(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 300) = a2;
      NEVirtualInterfaceUpdateMTUWithDelegate(result);
      return 1;
    }
  }
  return result;
}

BOOL NEVirtualInterfaceSetMaxPendingPackets(uint64_t a1, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (*(void *)(a1 + 256) == 1)
    {
      if (*(unsigned char *)(a1 + 264))
      {
        uint64_t v3 = ne_log_obj();
        BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)long long v11 = "NEVirtualInterfaceSetMaxPendingPackets";
          *(_WORD *)&v11[8] = 1024;
          *(_DWORD *)&v11[10] = 3110;
          int v5 = "NEVirtualInterface Failure in %s at line %d.";
LABEL_24:
          _os_log_error_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
          return 0;
        }
      }
      else if (a2)
      {
        if (a2 >= 0x400) {
          unsigned int v6 = 1024;
        }
        else {
          unsigned int v6 = a2;
        }
        int v7 = NEHelperInterfaceSetOption();
        if (v7)
        {
          int v8 = v7;
          uint64_t v3 = ne_log_obj();
          BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
          if (result)
          {
            *(_DWORD *)long long buf = 67109378;
            *(_DWORD *)long long v11 = a2;
            *(_WORD *)&_DWORD v11[4] = 2080;
            *(void *)&v11[6] = strerror(v8);
            int v5 = "Failed to set max pending packets to %u with NEHelper: %s\n";
            goto LABEL_24;
          }
        }
        else
        {
          if (!*(void *)(a1 + 48) && !*(void *)(a1 + 56)) {
            unsigned int v6 = 1;
          }
          return NEVirtualInterfaceAdjustReadBufferSize(a1, v6);
        }
      }
      else
      {
        uint64_t v3 = ne_log_obj();
        BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)long long v11 = "NEVirtualInterfaceSetMaxPendingPackets";
          *(_WORD *)&v11[8] = 1024;
          *(_DWORD *)&v11[10] = 3114;
          int v5 = "NEVirtualInterface Failure in %s at line %d.";
          goto LABEL_24;
        }
      }
    }
    else
    {
      uint64_t v3 = ne_log_obj();
      BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)long long v11 = "NEVirtualInterfaceSetMaxPendingPackets";
        *(_WORD *)&v11[8] = 1024;
        *(_DWORD *)&v11[10] = 3106;
        int v5 = "NEVirtualInterface Failure in %s at line %d.";
        goto LABEL_24;
      }
    }
  }
  else
  {
    uint64_t v3 = ne_log_obj();
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)long long v11 = "NEVirtualInterfaceSetMaxPendingPackets";
      *(_WORD *)&v11[8] = 1024;
      *(_DWORD *)&v11[10] = 3102;
      int v5 = "NEVirtualInterface Failure in %s at line %d.";
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetOutputTrafficClass(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (*(unsigned char *)(result + 264) || *(void *)(result + 256) != 2) {
      return 0;
    }
    int v2 = NEHelperInterfaceSetOption();
    if (!v2) {
      return 1;
    }
    int v3 = v2;
    int v4 = ne_log_obj();
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)long long buf = 67109378;
      int v7 = a2;
      __int16 v8 = 2080;
      int v9 = strerror(v3);
      _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "Failed to set output traffic class to %d with NEHelper: %s\n", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDSCPMapping(uint64_t result, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (*(unsigned char *)(result + 264) || *(void *)(result + 256) != 2) {
      return 0;
    }
    int v2 = NEHelperInterfaceSetOption();
    if (!v2) {
      return 1;
    }
    int v3 = v2;
    int v4 = ne_log_obj();
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)long long buf = 67109378;
      int v7 = a2;
      __int16 v8 = 2080;
      int v9 = strerror(v3);
      _os_log_error_impl(&dword_19DDAF000, v4, OS_LOG_TYPE_ERROR, "Failed to set output DSCP mapping to %d with NEHelper: %s\n", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetVPNServerAddress(uint64_t result, const __CFString *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (!a2)
    {
      int v7 = *(const void **)(v2 + 472);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(v2 + 472) = 0;
      }
      return 1;
    }
    if (CFGetTypeID(a2) != TypeID || (BOOL result = (uint64_t)NEGetAddressFamilyFromString(a2), result))
    {
      CFTypeID v5 = CFStringGetTypeID();
      if (CFGetTypeID(a2) != v5) {
        return 0;
      }
      unsigned int v6 = *(const void **)(v2 + 472);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 472) = 0;
      }
      *(void *)(v2 + 472) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
      return 1;
    }
  }
  return result;
}

CFTypeRef NEVirtualInterfaceCopyVPNServerAddress(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (uint64_t v2 = *(const void **)(a1 + 472)) != 0) {
    return CFRetain(v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetAsPrimary(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      char v2 = *(unsigned char *)(result + 312);
      if ((v2 & 1) != a2) {
        *(unsigned char *)(result + 312) = v2 & 0xFE | a2 & 1;
      }
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceIsPrimary(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    else {
      return *(unsigned char *)(result + 312) & 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetServiceID(uint64_t a1, CFStringRef theString)
{
  uint64_t result = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1 && theString)
  {
    CFTypeID v5 = *(const void **)(a1 + 488);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 48_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    }
    *(void *)(a1 + 48_Block_object_dispose(&STACK[0x2A0], 8) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
    unsigned int v6 = ne_log_obj();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 488);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_debug_impl(&dword_19DDAF000, v6, OS_LOG_TYPE_DEBUG, "Reset serviceID for NEVirtualInterface (%@)\n", (uint8_t *)&v8, 0xCu);
    }
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankPrimaryEligible(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 1) & 1) != a2) {
        *(unsigned char *)(result + 312) = v2 & 0xFD | (2 * (a2 & 1));
      }
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankLast(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 2) & 1) != a2) {
        *(unsigned char *)(result + 312) = v2 & 0xFB | (4 * (a2 & 1));
      }
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetRankNever(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      unsigned int v2 = *(unsigned __int8 *)(result + 312);
      if (((v2 >> 3) & 1) != a2) {
        *(unsigned char *)(result + 312) = v2 & 0xF7 | (8 * (a2 & 1));
      }
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetServiceIndex(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 316) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetIPv4Router(uint64_t result, const __CFString *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFTypeID v5 = *(const void **)(v2 + 456);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 456) = 0;
      }
      *(void *)(v2 + 456) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    }
    else
    {
      unsigned int v6 = *(const void **)(result + 456);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 456) = 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t NEVirtualInterfaceSetIPv6Router(uint64_t result, const __CFString *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFTypeID v5 = *(const void **)(v2 + 464);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 464) = 0;
      }
      *(void *)(v2 + 464) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    }
    else
    {
      unsigned int v6 = *(const void **)(result + 464);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 464) = 0;
      }
    }
    return 1;
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyIPv4Router(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFStringRef v2 = *(const __CFString **)(a1 + 456)) != 0) {
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

CFStringRef NEVirtualInterfaceCopyIPv6Router(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFStringRef v2 = *(const __CFString **)(a1 + 464)) != 0) {
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetIPv4ConfigurationMethod(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 256) == 3)
    {
      *(void *)(result + 376) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetIPv4ConfigurationMethod(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 376);
  }
  else {
    return 1;
  }
}

uint64_t NEVirtualInterfaceSetIPv6ConfigurationMethod(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(void *)(result + 256) == 3)
    {
      *(void *)(result + 384) = a2;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetIPv6ConfigurationMethod(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 384);
  }
  else {
    return 1;
  }
}

uint64_t NEVirtualInterfaceAddAddressInternal(uint64_t a1, const __CFString *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a2 && !*(unsigned char *)(a1 + 264))
  {
    int v21 = 0;
    CFDataRef v9 = NECreateAddressStructDataFromString(a2, 0, &v21);
    CFDataRef v10 = v9;
    if (a3)
    {
      CFDataRef v11 = NECreateAddressStructDataFromString(a3, 0, 0);
      if (v10) {
        goto LABEL_6;
      }
    }
    else
    {
      CFDataRef v11 = 0;
      if (v9)
      {
LABEL_6:
        if (a4)
        {
          if (v21 != 30)
          {
            uint64_t v12 = ne_log_obj();
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              LOWORD(valuePtr) = 0;
              _os_log_error_impl(&dword_19DDAF000, v12, OS_LOG_TYPE_ERROR, "Error: trying to add lifetime with a non-IPv6 address\n", (uint8_t *)&valuePtr, 2u);
            }
          }
          BytePtr = CFDataGetBytePtr(v10);
          if (v11) {
            long long v14 = CFDataGetBytePtr(v11);
          }
          else {
            long long v14 = 0;
          }
          int v15 = MEMORY[0x19F3B69D0](a1 + 265, BytePtr, v14, a4);
        }
        else
        {
          CFDataGetBytePtr(v10);
          if (v11) {
            CFDataGetBytePtr(v11);
          }
          int v15 = NEHelperInterfaceSetAddress();
        }
        int v16 = v15;
        if (v15)
        {
          uint64_t v17 = ne_log_obj();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = strerror(v16);
            int valuePtr = 136315138;
            uint64_t v23 = v20;
            _os_log_error_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_ERROR, "Failed to set address with NEHelper: %s\n", (uint8_t *)&valuePtr, 0xCu);
          }
          uint64_t v5 = 0;
        }
        else
        {
          if (v21 == 30)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 328), a2);
            int valuePtr = 64;
            if (a3) {
              int valuePtr = NEGetPrefixForIPv6NetmaskString(a3);
            }
            CFNumberRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 336), v18);
            if (v18) {
              CFRelease(v18);
            }
          }
          else if (v21 == 2)
          {
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 320), a2);
          }
          uint64_t v5 = 1;
        }
        CFRelease(v10);
        if (v11)
        {
LABEL_34:
          CFRelease(v11);
          return v5;
        }
        return v5;
      }
    }
    uint64_t v5 = 0;
    if (!v11) {
      return v5;
    }
    goto LABEL_34;
  }
  return v5;
}

uint64_t NEVirtualInterfaceAddAddress(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  return NEVirtualInterfaceAddAddressInternal(a1, a2, a3, 0);
}

uint64_t NEVirtualInterfaceRemoveAddress(uint64_t a1, const __CFString *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v3 = 0;
  if (a2 && !*(unsigned char *)(a1 + 264))
  {
    int v21 = 0;
    CFDataRef v5 = NECreateAddressStructDataFromString(a2, 0, &v21);
    CFTypeID TypeID = CFDataGetTypeID();
    if (v5)
    {
      if (CFGetTypeID(v5) == TypeID && v21 == 2)
      {
        uint64_t v3 = *(void *)(a1 + 320);
        if (!v3)
        {
LABEL_27:
          CFRelease(v5);
          return v3;
        }
        v25.__int16 length = CFArrayGetCount(*(CFArrayRef *)(a1 + 320));
        v25.locatiouint64_t n = 0;
        if (!CFArrayContainsValue((CFArrayRef)v3, v25, a2)) {
          goto LABEL_20;
        }
        CFDataGetBytePtr(v5);
        int v7 = NEHelperInterfaceRemoveAddress();
        if (v7)
        {
          int v8 = v7;
          CFDataRef v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            goto LABEL_29;
          }
          goto LABEL_20;
        }
        CFArrayRef v12 = *(const __CFArray **)(a1 + 320);
        v27.__int16 length = CFArrayGetCount(v12);
        v27.locatiouint64_t n = 0;
        FirstIndexOfCFStringRef Value = CFArrayGetFirstIndexOfValue(v12, v27, a2);
        if (FirstIndexOfValue != -1)
        {
          CFIndex v14 = FirstIndexOfValue;
          int v15 = *(__CFArray **)(a1 + 320);
LABEL_25:
          CFArrayRemoveValueAtIndex(v15, v14);
        }
      }
      else
      {
        CFTypeID v10 = CFDataGetTypeID();
        uint64_t v3 = 0;
        if (CFGetTypeID(v5) != v10) {
          goto LABEL_27;
        }
        if (v21 != 30) {
          goto LABEL_27;
        }
        uint64_t v3 = *(void *)(a1 + 328);
        if (!v3) {
          goto LABEL_27;
        }
        v26.__int16 length = CFArrayGetCount(*(CFArrayRef *)(a1 + 328));
        v26.locatiouint64_t n = 0;
        if (!CFArrayContainsValue((CFArrayRef)v3, v26, a2)) {
          goto LABEL_20;
        }
        CFDataGetBytePtr(v5);
        int v11 = NEHelperInterfaceRemoveAddress();
        if (v11)
        {
          int v8 = v11;
          CFDataRef v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
LABEL_29:
            uint64_t v20 = strerror(v8);
            *(_DWORD *)long long buf = 136315138;
            uint64_t v23 = v20;
            _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, "Failed to remove address with NEHelper: %s\n", buf, 0xCu);
          }
LABEL_20:
          uint64_t v3 = 0;
          goto LABEL_27;
        }
        CFArrayRef v16 = *(const __CFArray **)(a1 + 328);
        v28.__int16 length = CFArrayGetCount(v16);
        v28.locatiouint64_t n = 0;
        CFIndex v17 = CFArrayGetFirstIndexOfValue(v16, v28, a2);
        if (v17 != -1)
        {
          CFIndex v18 = v17;
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 328), v17);
          int v15 = *(__CFArray **)(a1 + 336);
          CFIndex v14 = v18;
          goto LABEL_25;
        }
      }
      uint64_t v3 = 1;
      goto LABEL_27;
    }
    CFDataGetTypeID();
    return 0;
  }
  return v3;
}

uint64_t NEVirtualInterfaceRemoveAllAddresses(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = (__CFArray **)result;
  if (*(unsigned char *)(result + 264)) {
    return 0;
  }
  CFArrayRef v2 = *(const __CFArray **)(result + 320);
  if (!v2)
  {
LABEL_15:
    CFArrayRef v10 = v1[41];
    if (v10)
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex Count = CFArrayGetCount(v10);
        CFArrayRef v13 = v1[41];
        if (i >= Count) {
          break;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, i);
        CFTypeID TypeID = CFStringGetTypeID();
        if (ValueAtIndex)
        {
          if (CFGetTypeID(ValueAtIndex) == TypeID)
          {
            CFDataRef v8 = NECreateAddressStructDataFromString(ValueAtIndex, 0, 0);
            CFTypeID v16 = CFDataGetTypeID();
            if (v8)
            {
              if (CFGetTypeID(v8) == v16)
              {
                CFDataGetBytePtr(v8);
                if (NEHelperInterfaceRemoveAddress()) {
                  goto LABEL_28;
                }
              }
              CFRelease(v8);
            }
          }
        }
        CFArrayRef v10 = v1[41];
      }
      CFArrayRemoveAllValues(v13);
      CFArrayRemoveAllValues(v1[42]);
    }
    return 1;
  }
  for (CFIndex j = 0; ; ++j)
  {
    CFIndex v4 = CFArrayGetCount(v2);
    CFDataRef v5 = v1[40];
    if (j >= v4)
    {
      CFArrayRemoveAllValues(v5);
      goto LABEL_15;
    }
    CFStringRef v6 = (const __CFString *)CFArrayGetValueAtIndex(v5, j);
    CFTypeID v7 = CFStringGetTypeID();
    if (v6)
    {
      if (CFGetTypeID(v6) == v7)
      {
        CFDataRef v8 = NECreateAddressStructDataFromString(v6, 0, 0);
        CFTypeID v9 = CFDataGetTypeID();
        if (v8) {
          break;
        }
      }
    }
LABEL_13:
    CFArrayRef v2 = v1[40];
  }
  if (CFGetTypeID(v8) != v9 || (CFDataGetBytePtr(v8), !NEHelperInterfaceRemoveAddress()))
  {
    CFRelease(v8);
    goto LABEL_13;
  }
LABEL_28:
  CFRelease(v8);
  return 0;
}

__CFArray *NEVirtualInterfaceCopyAddresses(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = *(const void **)(a1 + 320);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFArrayRef v5 = *(const __CFArray **)(a1 + 320);
    v10.__int16 length = CFArrayGetCount(v5);
    v10.locatiouint64_t n = 0;
    CFArrayAppendArray(Mutable, v5, v10);
  }
  CFStringRef v6 = *(const void **)(a1 + 328);
  CFTypeID v7 = CFArrayGetTypeID();
  if (v6 && CFGetTypeID(v6) == v7)
  {
    CFArrayRef v8 = *(const __CFArray **)(a1 + 328);
    v11.__int16 length = CFArrayGetCount(v8);
    v11.locatiouint64_t n = 0;
    CFArrayAppendArray(Mutable, v8, v11);
  }
  return Mutable;
}

uint64_t NEVirtualInterfaceRemoveRoute(uint64_t result, const __CFString *a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 264)) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2 || CFGetTypeID(a2) != TypeID) {
    return 0;
  }
  int v7 = NEGetAddressFamilyFromString(a2);
  if (v7 != 30)
  {
    if (v7 == 2)
    {
      CFArrayRef v8 = (void **)(v3 + 352);
      CFTypeID v9 = (void **)(v3 + 344);
      goto LABEL_11;
    }
    return 0;
  }
  CFArrayRef v8 = (void **)(v3 + 368);
  CFTypeID v9 = (void **)(v3 + 360);
LABEL_11:
  if (!a3) {
    CFArrayRef v8 = v9;
  }
  CFRange v10 = *v8;
  CFTypeID v11 = CFArrayGetTypeID();
  if (!v10 || CFGetTypeID(v10) != v11) {
    return 0;
  }
  CFIndex v12 = 0;
  CFArrayRef v13 = (const void *)*MEMORY[0x1E4F41C88];
  while (v12 < CFArrayGetCount((CFArrayRef)v10))
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v10, v12);
    CFTypeID v15 = CFDictionaryGetTypeID();
    if (ValueAtIndex)
    {
      if (CFGetTypeID(ValueAtIndex) == v15)
      {
        CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, v13);
        if (Value)
        {
          if (CFEqual(a2, Value))
          {
            CFArrayRemoveValueAtIndex((CFMutableArrayRef)v10, v12);
            break;
          }
        }
      }
    }
    ++v12;
  }
  if (nelog_is_extra_vpn_logging_enabled())
  {
    CFIndex v17 = ne_log_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315650;
      uint64_t v20 = v3 + 265;
      if (a3) {
        CFIndex v18 = "excluded ";
      }
      else {
        CFIndex v18 = "";
      }
      __int16 v21 = 2080;
      uint64_t v22 = v18;
      __int16 v23 = 2112;
      CFStringRef v24 = a2;
      _os_log_debug_impl(&dword_19DDAF000, v17, OS_LOG_TYPE_DEBUG, "%s: removed %s route to %@", (uint8_t *)&v19, 0x20u);
    }
  }
  return 1;
}

uint64_t NEVirtualInterfaceRemoveAllRoutes(uint64_t result, int a2, int a3)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      if (a2)
      {
        CFArrayRef v5 = *(__CFArray **)(result + 344);
        if (v5) {
          CFArrayRemoveAllValues(v5);
        }
        CFStringRef v6 = (__CFArray *)v3[45];
        if (v6) {
          CFArrayRemoveAllValues(v6);
        }
      }
      if (a3)
      {
        int v7 = (__CFArray *)v3[44];
        if (v7) {
          CFArrayRemoveAllValues(v7);
        }
        CFArrayRef v8 = (__CFArray *)v3[46];
        if (v8) {
          CFArrayRemoveAllValues(v8);
        }
      }
      return 1;
    }
  }
  return result;
}

__CFArray *NEVirtualInterfaceCopyRoutes(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 352;
  if (!a2) {
    uint64_t v2 = 344;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + v2);
  uint64_t v4 = 368;
  if (!a2) {
    uint64_t v4 = 360;
  }
  CFArrayRef v5 = *(const __CFArray **)(a1 + v4);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    v10.__int16 length = CFArrayGetCount(v3);
    v10.locatiouint64_t n = 0;
    CFArrayAppendArray(Mutable, v3, v10);
  }
  CFTypeID v8 = CFArrayGetTypeID();
  if (v5 && CFGetTypeID(v5) == v8)
  {
    v11.__int16 length = CFArrayGetCount(v5);
    v11.locatiouint64_t n = 0;
    CFArrayAppendArray(Mutable, v5, v11);
  }
  return Mutable;
}

CFArrayRef NEVirtualInterfaceCopyIPv4Routes(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 352;
  if (!a2) {
    uint64_t v2 = 344;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + v2);
  if (v3) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  }
  else {
    return 0;
  }
}

CFArrayRef NEVirtualInterfaceCopyIPv6Routes(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = 368;
  if (!a2) {
    uint64_t v2 = 360;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + v2);
  if (v3) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSDomain(uint64_t result, const __CFString *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 432);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 432) = 0;
      }
      *(void *)(v2 + 432) = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 432);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 432) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      int v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = v2 + 265;
        __int16 v10 = 2112;
        CFStringRef v11 = a2;
        _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS domain to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFStringRef NEVirtualInterfaceCopyDNSDomain(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFStringRef v2 = *(const __CFString **)(a1 + 432)) != 0) {
    return CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSServers(uint64_t result, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 416);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 416) = 0;
      }
      *(void *)(v2 + 416) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 416);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 416) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      int v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = v2 + 265;
        __int16 v10 = 2112;
        CFStringRef v11 = a2;
        _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS servers to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSServers(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFArrayRef v2 = *(const __CFArray **)(a1 + 416)) != 0) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSSearchDomains(uint64_t result, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 424);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 424) = 0;
      }
      *(void *)(v2 + 424) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 424);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 424) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      int v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = v2 + 265;
        __int16 v10 = 2112;
        CFStringRef v11 = a2;
        _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS search domains to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSearchDomains(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFArrayRef v2 = *(const __CFArray **)(a1 + 424)) != 0) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomains(uint64_t result, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 392);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 392) = 0;
      }
      *(void *)(v2 + 392) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 392);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 392) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      int v7 = ne_log_large_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = v2 + 265;
        __int16 v10 = 2112;
        CFStringRef v11 = a2;
        _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS supplemental match domains to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSupplementalMatchDomains(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFArrayRef v2 = *(const __CFArray **)(a1 + 392)) != 0) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchOrders(uint64_t result, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFArrayGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 400);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 400) = 0;
      }
      *(void *)(v2 + 400) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFArrayRef)a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 400);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 400) = 0;
      }
    }
    if (nelog_is_extra_vpn_logging_enabled())
    {
      int v7 = ne_log_obj();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = v2 + 265;
        __int16 v10 = 2112;
        CFStringRef v11 = a2;
        _os_log_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_DEFAULT, "%s: set DNS supplemental match orders to %@", (uint8_t *)&v8, 0x16u);
      }
    }
    return 1;
  }
  return result;
}

CFArrayRef NEVirtualInterfaceCopyDNSSupplementalMatchOrders(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 264) && (CFArrayRef v2 = *(const __CFArray **)(a1 + 400)) != 0) {
    return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
  }
  else {
    return 0;
  }
}

uint64_t NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 40_Block_object_dispose(&STACK[0x2A0], 8) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceGetDNSSupplementalMatchDomainsNoSearch(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    else {
      return *(unsigned int *)(result + 408);
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDNSServiceIdentifier(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 440) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetDNSPort(uint64_t result, int a2)
{
  if (result)
  {
    if (*(unsigned char *)(result + 264))
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(result + 444) = a2;
      return 1;
    }
  }
  return result;
}

uint64_t NEVirtualInterfaceSetProxies(uint64_t result, const void *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 264)) {
      return 0;
    }
    if (a2)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (CFGetTypeID(a2) != TypeID) {
        return 0;
      }
      CFArrayRef v5 = *(const void **)(v2 + 448);
      if (v5)
      {
        CFRelease(v5);
        *(void *)(v2 + 44_Block_object_dispose(&STACK[0x2A0], 8) = 0;
      }
      *(void *)(v2 + 44_Block_object_dispose(&STACK[0x2A0], 8) = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)a2);
    }
    else
    {
      CFStringRef v6 = *(const void **)(result + 448);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(v2 + 44_Block_object_dispose(&STACK[0x2A0], 8) = 0;
      }
    }
    return 1;
  }
  return result;
}

CFDictionaryRef NEVirtualInterfaceCopyProxies(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 264) || *(void *)(a1 + 448)) {
    return 0;
  }
  else {
    return CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  }
}

uint64_t NEVirtualInterfaceGetType(uint64_t result)
{
  if (result) {
    return *(void *)(result + 256);
  }
  return result;
}

uint64_t NEVirtualInterfaceDupSocket(uint64_t a1)
{
  if (a1) {
    return dup(*(_DWORD *)(a1 + 296));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t NEVirtualInterfaceGetIndex(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return *(unsigned int *)(a1 + 292);
  }
  uint64_t v2 = ne_log_obj();
  uint64_t result = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
  if (result)
  {
    int v3 = 136315138;
    uint64_t v4 = "NEVirtualInterfaceGetIndex";
    _os_log_fault_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_FAULT, "%s called with null interface", (uint8_t *)&v3, 0xCu);
    return 0;
  }
  return result;
}

__CFDictionary *NEVirtualInterfaceCopyStatistics(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int v19 = 0;
      long long v17 = 0u;
      long long v18 = 0u;
      *(_OWORD *)CFTypeID v16 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)CFArrayRef v13 = xmmword_19DF9BFA0;
      int v14 = *(_DWORD *)(a1 + 292);
      int v15 = 1;
      size_t v8 = 180;
      if (sysctl(v13, 6u, v16, &v8, 0, 0) == -1)
      {
        int v3 = ne_log_obj();
        if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        {
          uint64_t v5 = __error();
          CFStringRef v6 = strerror(*v5);
          *(_DWORD *)long long buf = 136315394;
          uint64_t v10 = a1 + 265;
          __int16 v11 = 2080;
          uint64_t v12 = v6;
          _os_log_error_impl(&dword_19DDAF000, v3, OS_LOG_TYPE_ERROR, "Failed to get statistics from interface %s: %s", buf, 0x16u);
        }
      }
      NEAddInt64ToDictionary(Mutable, @"BytesIn", v24);
      NEAddInt64ToDictionary(Mutable, @"BytesOut", *((uint64_t *)&v24 + 1));
      NEAddInt64ToDictionary(Mutable, @"PacketsIn", *((uint64_t *)&v21 + 1));
      NEAddInt64ToDictionary(Mutable, @"PacketsOut", *((uint64_t *)&v22 + 1));
      NEAddInt64ToDictionary(Mutable, @"ErrorsIn", v22);
      NEAddInt64ToDictionary(Mutable, @"ErrorsOut", v23);
    }
  }
  else
  {
    int v7 = ne_log_obj();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)CFTypeID v16 = 136315138;
      *(void *)&void v16[4] = "NEVirtualInterfaceCopyStatistics";
      _os_log_fault_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_FAULT, "%s called with null interface", v16, 0xCu);
    }
    return 0;
  }
  return Mutable;
}

uint64_t NEVirtualInterfaceGetDelegateInterfaceFunctionalType(uint64_t result)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    CFStringRef v2 = *(const __CFString **)(result + 480);
    if (v2)
    {
      uint64_t result = *(unsigned int *)(result + 304);
      if (result) {
        return result;
      }
      *(void *)int buffer = 0;
      uint64_t v17 = 0;
      if (CFStringGetCString(v2, buffer, 16, 0x8000100u))
      {
        *(_OWORD *)long long buf = 0u;
        long long v21 = 0u;
        if (*(_DWORD *)(v1 + 308) == -1 && (int v3 = socket(2, 2, 0), *(_DWORD *)(v1 + 308) = v3, v3 < 0))
        {
          uint64_t v10 = ne_log_obj();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v14 = __error();
            int v15 = strerror(*v14);
            *(_DWORD *)long long v18 = 136315138;
            int v19 = v15;
            _os_log_error_impl(&dword_19DDAF000, v10, OS_LOG_TYPE_ERROR, "Failed to create ioctl socket to get functional type: %s", v18, 0xCu);
          }
        }
        else
        {
          __strlcpy_chk();
          LODWORD(v21) = 0;
          if ((ioctl(*(_DWORD *)(v1 + 308), 0xC02069ADuLL, buf) & 0x80000000) == 0)
          {
            uint64_t result = v21;
LABEL_22:
            *(_DWORD *)(v1 + 304) = result;
            return result;
          }
          uint64_t v9 = ne_log_obj();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            uint64_t v12 = __error();
            CFArrayRef v13 = strerror(*v12);
            *(_DWORD *)long long v18 = 136315138;
            int v19 = v13;
            _os_log_error_impl(&dword_19DDAF000, v9, OS_LOG_TYPE_ERROR, "SIOCGIFFUNCTIONALTYPE failed: %s", v18, 0xCu);
          }
          close(*(_DWORD *)(v1 + 308));
          *(_DWORD *)(v1 + 30_Block_object_dispose(&STACK[0x2A0], 8) = -1;
        }
        if (!*__error())
        {
          uint64_t result = 0;
          goto LABEL_22;
        }
        __int16 v11 = ne_log_obj();
        uint64_t result = os_log_type_enabled(v11, OS_LOG_TYPE_FAULT);
        if (!result) {
          return result;
        }
        *(_WORD *)long long buf = 0;
        CFStringRef v6 = "interface_get_functional_type failed";
        int v7 = v11;
        uint32_t v8 = 2;
      }
      else
      {
        uint64_t v4 = ne_log_obj();
        uint64_t result = os_log_type_enabled(v4, OS_LOG_TYPE_FAULT);
        if (!result) {
          return result;
        }
        uint64_t v5 = *(void *)(v1 + 480);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v5;
        CFStringRef v6 = "CFStringGetCString(%@) failed";
        int v7 = v4;
        uint32_t v8 = 12;
      }
      _os_log_fault_impl(&dword_19DDAF000, v7, OS_LOG_TYPE_FAULT, v6, buf, v8);
    }
    return 0;
  }
  return result;
}

long long *nw_utun_protocol_identifier()
{
  if (nw_utun_protocol_identifier_packetProtocolOnceToken != -1) {
    dispatch_once(&nw_utun_protocol_identifier_packetProtocolOnceToken, &__block_literal_global_25118);
  }
  return &g_nw_utun_protocol_identifier;
}

uint64_t __nw_utun_protocol_identifier_block_invoke()
{
  qword_1E94564B8 = 0;
  g_nw_utun_protocol_identifier = 0u;
  unk_1E94564A8 = 0u;
  g_nw_utun_protocol_callbacks = 0u;
  *(_OWORD *)algn_1E94564D0 = 0u;
  xmmword_1E94564E0 = 0u;
  unk_1E94564F0 = 0u;
  xmmword_1E9456500 = 0u;
  *(_OWORD *)&qword_1E9456510 = 0u;
  xmmword_1E9456520 = 0u;
  unk_1E9456530 = 0u;
  xmmword_1E9456540 = 0u;
  unk_1E9456550 = 0u;
  xmmword_1E9456560 = 0u;
  unk_1E9456570 = 0u;
  xmmword_1E9456580 = 0u;
  unk_1E9456590 = 0u;
  xmmword_1E94565A0 = 0u;
  unk_1E94565B0 = 0u;
  xmmword_1E94565C0 = 0u;
  __strlcpy_chk();
  qword_1E94564B8 = 0x100000002;
  nw_protocol_set_default_one_to_one_callbacks();
  *(void *)&g_nw_utun_protocol_callbacks = nw_utun_protocol_add_input_handler;
  *((void *)&g_nw_utun_protocol_callbacks + 1) = nw_utun_protocol_remove_input_handler;
  qword_1E9456510 = (uint64_t)nw_utun_protocol_get_input_frames;
  qword_1E9456518 = (uint64_t)nw_utun_protocol_get_output_frames;
  *(void *)&xmmword_1E9456520 = nw_utun_protocol_finalize_output_frames;

  return MEMORY[0x1F40F3B18](&g_nw_utun_protocol_identifier, nw_utun_protocol_create);
}

void *nw_utun_protocol_create()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = malloc_type_calloc(1uLL, 0x40uLL, 0x10A0040C9AB51B7uLL);
  uint64_t v1 = v0;
  if (v0)
  {
    v0[2] = &g_nw_utun_protocol_identifier;
    v0[3] = &g_nw_utun_protocol_callbacks;
    v0[5] = 0;
  }
  else
  {
    CFStringRef v2 = ne_log_obj();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      int v4 = 134217984;
      uint64_t v5 = 64;
      _os_log_fault_impl(&dword_19DDAF000, v2, OS_LOG_TYPE_FAULT, "calloc(%zu) failed", (uint8_t *)&v4, 0xCu);
    }
  }
  return v1;
}

uint64_t nw_utun_protocol_finalize_output_frames(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 96))();
}

uint64_t __nw_utun_protocol_finalize_output_frames_block_invoke()
{
  char v0 = *(unsigned char *)nw_frame_unclaimed_bytes();
  nw_frame_unclaim();
  uint64_t v1 = (_DWORD *)nw_frame_unclaimed_bytes();
  if ((v0 & 0xF0) == 0x60) {
    int v2 = 503316480;
  }
  else {
    int v2 = 0;
  }
  if ((v0 & 0xF0) == 0x40) {
    int v3 = 0x2000000;
  }
  else {
    int v3 = v2;
  }
  *uint64_t v1 = v3;
  return 1;
}

uint64_t nw_utun_protocol_get_output_frames(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 88))();
  nw_frame_array_foreach();
  return v1;
}

uint64_t __nw_utun_protocol_get_output_frames_block_invoke()
{
  return 1;
}

uint64_t nw_utun_protocol_get_input_frames(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 24) + 80))();
  nw_frame_array_foreach();
  return v1;
}

uint64_t __nw_utun_protocol_get_input_frames_block_invoke()
{
  return 1;
}

BOOL nw_utun_protocol_remove_input_handler(void *a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = a1[6];
  if (v4 == a2)
  {
    uint64_t v7 = a1[4];
    if (v7) {
      (*(void (**)(void))(*(void *)(v7 + 24) + 8))();
    }
    a1[6] = 0;
    if (a3) {
      free(a1);
    }
  }
  return v4 == a2;
}

uint64_t nw_utun_protocol_add_input_handler(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x2A0], 8) = a2;
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(void *)(a2 + 32) = a1;
  return 1;
}

uint64_t NEVirtualInterfaceDidPublish(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 312) >> 6) & 1;
  }
  return result;
}

void sub_19DF58758(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5A044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5A3A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5A5C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t NEVPNConfigurationCreate()
{
  return 0;
}

uint64_t NEVPNConfigurationGetTunnelType()
{
  return 1;
}

uint64_t NEVPNConfigurationCopyAll()
{
  return 0;
}

uint64_t NEVPNConfigurationCopy()
{
  return 0;
}

uint64_t NEVPNConfigurationSet()
{
  return 0;
}

uint64_t NEVPNConfigurationRemove()
{
  return 0;
}

uint64_t NEVPNConfigurationSetName()
{
  return 0;
}

uint64_t NEVPNConfigurationGetName()
{
  return 0;
}

uint64_t NEVPNConfigurationSetEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationGetEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationEnableVPNType()
{
  return 0;
}

uint64_t NEVPNConfigurationIsVPNTypeEnabled()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyVendorData()
{
  return 0;
}

uint64_t NEVPNConfigurationSetVendorData()
{
  return 0;
}

uint64_t NEVPNCopyLastError()
{
  return 0;
}

uint64_t NEVPNConfigurationSetCallback()
{
  return 0;
}

uint64_t NEVPNConfigurationSetMessageCallback()
{
  return 0;
}

uint64_t NEVPNConfigurationScheduleWithRunLoop()
{
  return 0;
}

uint64_t NEVPNConfigurationUnscheduleFromRunLoop()
{
  return 0;
}

uint64_t NEVPNConfigurationConnectionStart()
{
  return 0;
}

uint64_t NEVPNConfigurationConnectionStop()
{
  return 0;
}

uint64_t NEVPNConfigurationGetStatus()
{
  return 0xFFFFFFFFLL;
}

uint64_t NEVPNConfigurationSendMessage()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyIdentities()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyCertificate()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyLastConnectionError()
{
  return 0;
}

uint64_t NEVPNConfigurationSetPersistentData()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyPersistentData()
{
  return 0;
}

uint64_t NEVPNConfigurationValidateCertificate()
{
  return 3;
}

uint64_t NEVPNConfigurationCopyAppRuleIDs()
{
  return 0;
}

uint64_t NEVPNConfigurationCopyAppRule()
{
  return 0;
}

uint64_t NEVPNConfigurationRemoveAppRule()
{
  return 0;
}

uint64_t NEVPNConfigurationSetAppRule()
{
  return 0;
}

void sub_19DF5B660(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5BB70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5BDF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5C8C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5C9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DF5CF00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DF5D4D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5D558(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5D640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DF5D70C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5D7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DF5D8C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5D9B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5DA98(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5DB94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5DC78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5E88C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5EBE8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF5FD1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF60198(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF60D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t __Block_byref_object_copy__25970(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25971(uint64_t a1)
{
}

void sub_19DF61CDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF61E20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68308(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF683A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68458(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68500(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF685B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68660(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68718(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF687C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68878(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68920(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF689C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_19DF68A58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF68C08(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF695BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF69AF0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF69DC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6A044(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27118(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27119(uint64_t a1)
{
}

void sub_19DF6B77C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6F2B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6F404(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6F4A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_19DF6F5B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19DF729F0()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t sub_19DF72A00()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_19DF72A10()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_19DF72A20()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_19DF72A30()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_19DF72A40()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_19DF72A50()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_19DF72A60()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_19DF72A70()
{
  return MEMORY[0x1F4116F68]();
}

uint64_t sub_19DF72A80()
{
  return MEMORY[0x1F4116F70]();
}

uint64_t sub_19DF72A90()
{
  return MEMORY[0x1F4116F78]();
}

uint64_t sub_19DF72AA0()
{
  return MEMORY[0x1F4116F80]();
}

uint64_t sub_19DF72AB0()
{
  return MEMORY[0x1F4116F88]();
}

uint64_t sub_19DF72AC0()
{
  return MEMORY[0x1F4116F90]();
}

uint64_t sub_19DF72AD0()
{
  return MEMORY[0x1F4116F98]();
}

uint64_t sub_19DF72AE0()
{
  return MEMORY[0x1F4116FA0]();
}

uint64_t sub_19DF72AF0()
{
  return MEMORY[0x1F4116FA8]();
}

uint64_t sub_19DF72B00()
{
  return MEMORY[0x1F4116FB0]();
}

uint64_t sub_19DF72B10()
{
  return MEMORY[0x1F4116FB8]();
}

uint64_t sub_19DF72B20()
{
  return MEMORY[0x1F4116FC0]();
}

uint64_t sub_19DF72B30()
{
  return MEMORY[0x1F4116FC8]();
}

uint64_t sub_19DF72B40()
{
  return MEMORY[0x1F40F1EF0]();
}

uint64_t sub_19DF72B50()
{
  return MEMORY[0x1F40F1F58]();
}

uint64_t sub_19DF72B60()
{
  return MEMORY[0x1F40F1F68]();
}

uint64_t sub_19DF72B70()
{
  return MEMORY[0x1F40F2000]();
}

uint64_t sub_19DF72B80()
{
  return MEMORY[0x1F40F2038]();
}

uint64_t sub_19DF72B90()
{
  return MEMORY[0x1F40F2040]();
}

uint64_t sub_19DF72BA0()
{
  return MEMORY[0x1F40F2330]();
}

uint64_t sub_19DF72BB0()
{
  return MEMORY[0x1F40DFEA8]();
}

uint64_t sub_19DF72BC0()
{
  return MEMORY[0x1F40DFEB0]();
}

uint64_t sub_19DF72BD0()
{
  return MEMORY[0x1F40DFEB8]();
}

uint64_t sub_19DF72BE0()
{
  return MEMORY[0x1F40DFEC8]();
}

uint64_t sub_19DF72BF0()
{
  return MEMORY[0x1F40DFED0]();
}

uint64_t sub_19DF72C00()
{
  return MEMORY[0x1F40DFED8]();
}

uint64_t sub_19DF72C10()
{
  return MEMORY[0x1F40DFEE0]();
}

uint64_t sub_19DF72C20()
{
  return MEMORY[0x1F40DFF98]();
}

uint64_t sub_19DF72C30()
{
  return MEMORY[0x1F40DFFA8]();
}

uint64_t sub_19DF72C40()
{
  return MEMORY[0x1F40DFFB0]();
}

uint64_t sub_19DF72C50()
{
  return MEMORY[0x1F40DFFC0]();
}

uint64_t sub_19DF72C60()
{
  return MEMORY[0x1F40DFFD8]();
}

uint64_t sub_19DF72C70()
{
  return MEMORY[0x1F4116FD0]();
}

uint64_t sub_19DF72C80()
{
  return MEMORY[0x1F40DFFE0]();
}

uint64_t sub_19DF72C90()
{
  return MEMORY[0x1F40E00C0]();
}

uint64_t sub_19DF72CA0()
{
  return MEMORY[0x1F40E00D0]();
}

uint64_t sub_19DF72CB0()
{
  return MEMORY[0x1F40E00D8]();
}

uint64_t sub_19DF72CC0()
{
  return MEMORY[0x1F40E0130]();
}

uint64_t sub_19DF72CD0()
{
  return MEMORY[0x1F40E0138]();
}

uint64_t sub_19DF72CE0()
{
  return MEMORY[0x1F40E0140]();
}

uint64_t sub_19DF72CF0()
{
  return MEMORY[0x1F40E0148]();
}

uint64_t sub_19DF72D00()
{
  return MEMORY[0x1F40E0150]();
}

uint64_t sub_19DF72D10()
{
  return MEMORY[0x1F40E0158]();
}

uint64_t sub_19DF72D20()
{
  return MEMORY[0x1F40E0168]();
}

uint64_t sub_19DF72D30()
{
  return MEMORY[0x1F40E0170]();
}

uint64_t sub_19DF72D40()
{
  return MEMORY[0x1F40E0178]();
}

uint64_t sub_19DF72D50()
{
  return MEMORY[0x1F40E0180]();
}

uint64_t sub_19DF72D60()
{
  return MEMORY[0x1F40E0190]();
}

uint64_t sub_19DF72D70()
{
  return MEMORY[0x1F40E0198]();
}

uint64_t sub_19DF72D80()
{
  return MEMORY[0x1F40E01A0]();
}

uint64_t sub_19DF72D90()
{
  return MEMORY[0x1F40E01C0]();
}

uint64_t sub_19DF72DA0()
{
  return MEMORY[0x1F40E01D0]();
}

uint64_t sub_19DF72DB0()
{
  return MEMORY[0x1F40E01E8]();
}

uint64_t sub_19DF72DC0()
{
  return MEMORY[0x1F40E01F8]();
}

uint64_t sub_19DF72DD0()
{
  return MEMORY[0x1F40E02A8]();
}

uint64_t sub_19DF72DE0()
{
  return MEMORY[0x1F40E02C8]();
}

uint64_t sub_19DF72DF0()
{
  return MEMORY[0x1F40E02D8]();
}

uint64_t sub_19DF72E00()
{
  return MEMORY[0x1F40E02E8]();
}

uint64_t sub_19DF72E10()
{
  return MEMORY[0x1F40E02F8]();
}

uint64_t sub_19DF72E20()
{
  return MEMORY[0x1F40E03A8]();
}

uint64_t sub_19DF72E30()
{
  return MEMORY[0x1F40E03B8]();
}

uint64_t sub_19DF72E40()
{
  return MEMORY[0x1F40E03C8]();
}

uint64_t sub_19DF72E50()
{
  return MEMORY[0x1F40E03D8]();
}

uint64_t sub_19DF72E60()
{
  return MEMORY[0x1F40E03E8]();
}

uint64_t sub_19DF72E70()
{
  return MEMORY[0x1F40E04D8]();
}

uint64_t sub_19DF72E80()
{
  return MEMORY[0x1F40E04E8]();
}

uint64_t sub_19DF72E90()
{
  return MEMORY[0x1F40E04F8]();
}

uint64_t sub_19DF72EA0()
{
  return MEMORY[0x1F40E0508]();
}

uint64_t sub_19DF72EB0()
{
  return MEMORY[0x1F40E0510]();
}

uint64_t sub_19DF72EC0()
{
  return MEMORY[0x1F40E0558]();
}

uint64_t sub_19DF72ED0()
{
  return MEMORY[0x1F40E0560]();
}

uint64_t sub_19DF72EE0()
{
  return MEMORY[0x1F40E0568]();
}

uint64_t sub_19DF72EF0()
{
  return MEMORY[0x1F40E0570]();
}

uint64_t sub_19DF72F00()
{
  return MEMORY[0x1F40E0578]();
}

uint64_t sub_19DF72F10()
{
  return MEMORY[0x1F40E0580]();
}

uint64_t sub_19DF72F20()
{
  return MEMORY[0x1F40E0588]();
}

uint64_t sub_19DF72F30()
{
  return MEMORY[0x1F40E0590]();
}

uint64_t sub_19DF72F40()
{
  return MEMORY[0x1F40E0598]();
}

uint64_t sub_19DF72F50()
{
  return MEMORY[0x1F40E05A0]();
}

uint64_t sub_19DF72F60()
{
  return MEMORY[0x1F40E05A8]();
}

uint64_t sub_19DF72F70()
{
  return MEMORY[0x1F40E05B0]();
}

uint64_t sub_19DF72F80()
{
  return MEMORY[0x1F40E05B8]();
}

uint64_t sub_19DF72F90()
{
  return MEMORY[0x1F40E05C0]();
}

uint64_t sub_19DF72FA0()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_19DF72FB0()
{
  return MEMORY[0x1F40E6278]();
}

uint64_t sub_19DF72FC0()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_19DF72FD0()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_19DF72FE0()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_19DF72FF0()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_19DF73000()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_19DF73010()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_19DF73020()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_19DF73030()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_19DF73040()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_19DF73050()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_19DF73060()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_19DF73070()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_19DF73080()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_19DF73090()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_19DF730A0()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_19DF730B0()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_19DF730C0()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_19DF730D0()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C94A8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, dataIn, dataInLength);
}

CCCryptorStatus CCCryptorCreate(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1F40C94B8](*(void *)&op, *(void *)&alg, *(void *)&options, key, keyLength, iv, cryptorRef);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1F40C9528](cryptorRef);
}

CCCryptorStatus CCCryptorReset(CCCryptorRef cryptorRef, const void *iv)
{
  return MEMORY[0x1F40C9530](cryptorRef, iv);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1F40C9538](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1F40C9540]();
}

uint64_t CCHKDFExpand()
{
  return MEMORY[0x1F40C95D8]();
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

uint64_t CCHmacClone()
{
  return MEMORY[0x1F40C95E8]();
}

uint64_t CCHmacCreate()
{
  return MEMORY[0x1F40C95F0]();
}

uint64_t CCHmacDestroy()
{
  return MEMORY[0x1F40C95F8]();
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
}

uint64_t CCHmacOutputSizeFromRef()
{
  return MEMORY[0x1F40C9618]();
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
}

uint64_t CCKDFParametersCreateHkdf()
{
  return MEMORY[0x1F40C9630]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1F40C9638]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1F40D74B0]();
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1F40D74D0](bundle, resourceName, resourceType, subDirName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7810](allocator, capacity, theData);
}

CFRange CFDataFind(CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions)
{
  CFIndex v4 = MEMORY[0x1F40D7828](theData, dataToFind, searchRange.location, searchRange.length, compareOptions);
  result.__int16 length = v5;
  result.locatiouint64_t n = v4;
  return result;
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7888](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8400](alloc, data, *(void *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8908](url, resolveAgainstBase, buffer, maxBufLen);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return MEMORY[0x1F40D8A20](userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1F40D8A28](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D8A40](allocator, userNotification, callout, order);
}

CFStringRef CFUserNotificationGetResponseValue(CFUserNotificationRef userNotification, CFStringRef key, CFIndex idx)
{
  return (CFStringRef)MEMORY[0x1F40D8A60](userNotification, key, idx);
}

uint64_t CNNetworkCreateWithSSIDAndBSSID()
{
  return MEMORY[0x1F410FAC0]();
}

uint64_t CNNetworkIsChosenPlugin()
{
  return MEMORY[0x1F410FAE0]();
}

uint64_t CNNetworkIsProtected()
{
  return MEMORY[0x1F410FAE8]();
}

uint64_t CNNetworkSetConfidence()
{
  return MEMORY[0x1F410FAF8]();
}

uint64_t CNNetworkWasAutoJoined()
{
  return MEMORY[0x1F410FB08]();
}

uint64_t CNNetworkWasJustJoined()
{
  return MEMORY[0x1F410FB10]();
}

uint64_t CNPluginCommandCopyCurrentNetwork()
{
  return MEMORY[0x1F410FB18]();
}

uint64_t CNPluginCommandCopyNetworkList()
{
  return MEMORY[0x1F410FB20]();
}

uint64_t CNPluginCommandGetInterfaceName()
{
  return MEMORY[0x1F410FB28]();
}

uint64_t CNPluginCommandGetType()
{
  return MEMORY[0x1F410FB30]();
}

uint64_t CNPluginCopySupportedInterfaces()
{
  return MEMORY[0x1F410FB38]();
}

uint64_t CNPluginLogoffNetwork()
{
  return MEMORY[0x1F410FB40]();
}

uint64_t CNPluginRegister()
{
  return MEMORY[0x1F410FB48]();
}

uint64_t CNPluginResponseCreate()
{
  return MEMORY[0x1F410FB50]();
}

uint64_t CNPluginResponseSetNetwork()
{
  return MEMORY[0x1F410FB60]();
}

uint64_t CNPluginResponseSetNetworkList()
{
  return MEMORY[0x1F410FB68]();
}

uint64_t EAPClientModuleAddBuiltinModule()
{
  return MEMORY[0x1F4117760]();
}

uint64_t EAPClientModuleLookup()
{
  return MEMORY[0x1F4117768]();
}

uint64_t EAPClientModulePluginFree()
{
  return MEMORY[0x1F4117770]();
}

uint64_t EAPClientModulePluginFreePacket()
{
  return MEMORY[0x1F4117778]();
}

uint64_t EAPClientModulePluginInit()
{
  return MEMORY[0x1F4117780]();
}

uint64_t EAPClientModulePluginMasterSessionKeyCopyBytes()
{
  return MEMORY[0x1F4117788]();
}

uint64_t EAPClientModulePluginProcess()
{
  return MEMORY[0x1F4117790]();
}

uint64_t EAPPacketIsValid()
{
  return MEMORY[0x1F4117798]();
}

uint64_t IOPMGetLastWakeTime()
{
  return MEMORY[0x1F40E9028]();
}

uint64_t NEFlowAsyncDatagramsCopyNext()
{
  return MEMORY[0x1F4181158]();
}

uint64_t NEFlowAsyncRead()
{
  return MEMORY[0x1F4181160]();
}

uint64_t NEFlowCopyError()
{
  return MEMORY[0x1F4181168]();
}

uint64_t NEFlowCopyProperty()
{
  return MEMORY[0x1F4181170]();
}

uint64_t NEFlowDirectorCreate()
{
  return MEMORY[0x1F4181178]();
}

uint64_t NEFlowDirectorDestroy()
{
  return MEMORY[0x1F4181188]();
}

uint64_t NEFlowDirectorFetchFlowStates()
{
  return MEMORY[0x1F4181190]();
}

uint64_t NEFlowDirectorGetMaxSendSize()
{
  return MEMORY[0x1F4181198]();
}

uint64_t NEFlowDirectorHandleMatchRulesResult()
{
  return MEMORY[0x1F41811A0]();
}

uint64_t NEFlowDirectorHandleNewControlSocket()
{
  return MEMORY[0x1F41811A8]();
}

uint64_t NEFlowDirectorSetDelegateInterface()
{
  return MEMORY[0x1F41811B0]();
}

uint64_t NEFlowDirectorSetMatchRulesCallback()
{
  return MEMORY[0x1F41811B8]();
}

uint64_t NEFlowDirectorSetMaxSendSize()
{
  return MEMORY[0x1F41811C0]();
}

uint64_t NEFlowDirectorSetNewFlowCallback()
{
  return MEMORY[0x1F41811C8]();
}

uint64_t NEFlowDirectorSetOpenControlSocketCallback()
{
  return MEMORY[0x1F41811D0]();
}

uint64_t NEFlowDirectorStart()
{
  return MEMORY[0x1F41811D8]();
}

uint64_t NEFlowGetFlowType()
{
  return MEMORY[0x1F41811E0]();
}

uint64_t NEFlowOpen()
{
  return MEMORY[0x1F41811E8]();
}

uint64_t NEFlowReadClose()
{
  return MEMORY[0x1F41811F0]();
}

uint64_t NEFlowSetDispatchQueue()
{
  return MEMORY[0x1F41811F8]();
}

uint64_t NEFlowSetEventHandler()
{
  return MEMORY[0x1F4181200]();
}

uint64_t NEFlowSetProperty()
{
  return MEMORY[0x1F4181208]();
}

uint64_t NEFlowTLVAdd()
{
  return MEMORY[0x1F4181210]();
}

uint64_t NEFlowTLVMsgCreate()
{
  return MEMORY[0x1F4181218]();
}

uint64_t NEFlowWrite()
{
  return MEMORY[0x1F4181220]();
}

uint64_t NEFlowWriteClose()
{
  return MEMORY[0x1F4181228]();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1F40C98D8]();
}

uint64_t NEHelperCacheCopyAppUUIDMappingForUIDExtended()
{
  return MEMORY[0x1F40C98E8]();
}

uint64_t NEHelperCacheCopySigningIdentifierMapping()
{
  return MEMORY[0x1F40C98F0]();
}

uint64_t NEHelperCopyAggregatePathRules()
{
  return MEMORY[0x1F40C98F8]();
}

uint64_t NEHelperCopyAppInfo()
{
  return MEMORY[0x1F40C9900]();
}

uint64_t NEHelperCopyCurrentNetworkAsync()
{
  return MEMORY[0x1F40C9908]();
}

uint64_t NEHelperGetIKESocket()
{
  return MEMORY[0x1F40C9930]();
}

uint64_t NEHelperGetKernelControlSocket()
{
  return MEMORY[0x1F40C9938]();
}

uint64_t NEHelperGetKernelControlSocketExtended()
{
  return MEMORY[0x1F40C9940]();
}

uint64_t NEHelperGetNECPSessionFD()
{
  return MEMORY[0x1F40C9948]();
}

uint64_t NEHelperGetPFKeySocket()
{
  return MEMORY[0x1F40C9950]();
}

uint64_t NEHelperInterfaceCreate()
{
  return MEMORY[0x1F40C9958]();
}

uint64_t NEHelperInterfaceDestroy()
{
  return MEMORY[0x1F40C9960]();
}

uint64_t NEHelperInterfaceRemoveAddress()
{
  return MEMORY[0x1F40C9968]();
}

uint64_t NEHelperInterfaceSetAddress()
{
  return MEMORY[0x1F40C9970]();
}

uint64_t NEHelperInterfaceSetAddressWithLifetime()
{
  return MEMORY[0x1F40C9978]();
}

uint64_t NEHelperInterfaceSetDelegate()
{
  return MEMORY[0x1F40C9980]();
}

uint64_t NEHelperInterfaceSetDescription()
{
  return MEMORY[0x1F40C9988]();
}

uint64_t NEHelperInterfaceSetMTU()
{
  return MEMORY[0x1F40C9990]();
}

uint64_t NEHelperInterfaceSetOption()
{
  return MEMORY[0x1F40C9998]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

CFErrorRef SCCopyLastError(void)
{
  return (CFErrorRef)MEMORY[0x1F4101D60]();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1F4101DA8](store, key);
}

SCDynamicStoreRef SCDynamicStoreCreateWithOptions(CFAllocatorRef allocator, CFStringRef name, CFDictionaryRef storeOptions, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1F4101DC0](allocator, name, storeOptions, callout, context);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return (CFStringRef)MEMORY[0x1F4101DF0](allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return MEMORY[0x1F4101E10](store, keysToSet, keysToRemove, keysToNotify);
}

int SCError(void)
{
  return MEMORY[0x1F4101E20]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1F4101E28](*(void *)&status);
}

uint64_t SCNetworkConnectionCopyAllUserPreferences()
{
  return MEMORY[0x1F4101E38]();
}

uint64_t SCNetworkConnectionCopyCurrentUserPreferences()
{
  return MEMORY[0x1F4101E40]();
}

uint64_t SCNetworkConnectionCreateUserPreferences()
{
  return MEMORY[0x1F4101E48]();
}

SCNetworkConnectionRef SCNetworkConnectionCreateWithServiceID(CFAllocatorRef allocator, CFStringRef serviceID, SCNetworkConnectionCallBack callout, SCNetworkConnectionContext *context)
{
  return (SCNetworkConnectionRef)MEMORY[0x1F4101E50](allocator, serviceID, callout, context);
}

SCNetworkInterfaceRef SCNetworkInterfaceCreateWithInterface(SCNetworkInterfaceRef interface, CFStringRef interfaceType)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1F4101E70](interface, interfaceType);
}

CFDictionaryRef SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef interface)
{
  return (CFDictionaryRef)MEMORY[0x1F4101E80](interface);
}

CFDictionaryRef SCNetworkInterfaceGetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType)
{
  return (CFDictionaryRef)MEMORY[0x1F4101E88](interface, extendedType);
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1F4101E98](interface);
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  return (CFStringRef)MEMORY[0x1F4101EA0](interface);
}

Boolean SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef interface, CFDictionaryRef config)
{
  return MEMORY[0x1F4101EA8](interface, config);
}

Boolean SCNetworkInterfaceSetExtendedConfiguration(SCNetworkInterfaceRef interface, CFStringRef extendedType, CFDictionaryRef config)
{
  return MEMORY[0x1F4101EB0](interface, extendedType, config);
}

CFDictionaryRef SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef protocol)
{
  return (CFDictionaryRef)MEMORY[0x1F4101EB8](protocol);
}

Boolean SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef protocol, CFDictionaryRef config)
{
  return MEMORY[0x1F4101EC8](protocol, config);
}

Boolean SCNetworkProtocolSetEnabled(SCNetworkProtocolRef protocol, Boolean enabled)
{
  return MEMORY[0x1F4101ED0](protocol, enabled);
}

uint64_t SCNetworkProxiesCreateProxyAgentData()
{
  return MEMORY[0x1F4101EE0]();
}

Boolean SCNetworkServiceAddProtocolType(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return MEMORY[0x1F4101F38](service, protocolType);
}

SCNetworkServiceRef SCNetworkServiceCopy(SCPreferencesRef prefs, CFStringRef serviceID)
{
  return (SCNetworkServiceRef)MEMORY[0x1F4101F40](prefs, serviceID);
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  return (CFArrayRef)MEMORY[0x1F4101F48](prefs);
}

uint64_t SCNetworkServiceCopyExternalID()
{
  return MEMORY[0x1F4101F50]();
}

SCNetworkProtocolRef SCNetworkServiceCopyProtocol(SCNetworkServiceRef service, CFStringRef protocolType)
{
  return (SCNetworkProtocolRef)MEMORY[0x1F4101F58](service, protocolType);
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  return (SCNetworkServiceRef)MEMORY[0x1F4101F60](prefs, interface);
}

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  return MEMORY[0x1F4101F68](service);
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  return MEMORY[0x1F4101F70](service);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return (SCNetworkInterfaceRef)MEMORY[0x1F4101F78](service);
}

CFStringRef SCNetworkServiceGetName(SCNetworkServiceRef service)
{
  return (CFStringRef)MEMORY[0x1F4101F80](service);
}

CFStringRef SCNetworkServiceGetServiceID(SCNetworkServiceRef service)
{
  return (CFStringRef)MEMORY[0x1F4101F88](service);
}

CFTypeID SCNetworkServiceGetTypeID(void)
{
  return MEMORY[0x1F4101F90]();
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  return MEMORY[0x1F4101F98](service);
}

Boolean SCNetworkServiceSetEnabled(SCNetworkServiceRef service, Boolean enabled)
{
  return MEMORY[0x1F4101FA0](service, enabled);
}

Boolean SCNetworkServiceSetName(SCNetworkServiceRef service, CFStringRef name)
{
  return MEMORY[0x1F4101FA8](service, name);
}

uint64_t SCNetworkServiceSetPrimaryRank()
{
  return MEMORY[0x1F4101FB0]();
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return MEMORY[0x1F4101FB8](set, service);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  return (SCNetworkSetRef)MEMORY[0x1F4101FC0](prefs);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4101FE8](prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4101FF0](prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1F4101FF8](allocator, name, prefsID);
}

SCPreferencesRef SCPreferencesCreateWithAuthorization(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID, AuthorizationRef authorization)
{
  return (SCPreferencesRef)MEMORY[0x1F4102000](allocator, name, prefsID, authorization);
}

CFDataRef SCPreferencesGetSignature(SCPreferencesRef prefs)
{
  return (CFDataRef)MEMORY[0x1F4102008](prefs);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1F4102010](prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return MEMORY[0x1F4102018](prefs, wait);
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return MEMORY[0x1F4102068](prefs);
}

uint64_t SCUserPreferencesCopyInterfaceTypeConfiguration()
{
  return MEMORY[0x1F4102080]();
}

uint64_t SCUserPreferencesCopyName()
{
  return MEMORY[0x1F4102088]();
}

uint64_t SCUserPreferencesCopyStartOptions()
{
  return MEMORY[0x1F4102090]();
}

uint64_t SCUserPreferencesGetUniqueID()
{
  return MEMORY[0x1F4102098]();
}

uint64_t SCUserPreferencesIsForced()
{
  return MEMORY[0x1F41020A0]();
}

uint64_t SCUserPreferencesRemove()
{
  return MEMORY[0x1F41020A8]();
}

uint64_t SCUserPreferencesSetCurrent()
{
  return MEMORY[0x1F41020B0]();
}

uint64_t SCUserPreferencesSetInterfaceTypeConfiguration()
{
  return MEMORY[0x1F41020B8]();
}

uint64_t SCUserPreferencesSetName()
{
  return MEMORY[0x1F41020C0]();
}

uint64_t SecCFAllocatorZeroize()
{
  return MEMORY[0x1F40F6A70]();
}

uint64_t SecCertificateCopyCommonNames()
{
  return MEMORY[0x1F40F6AC0]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1F40F6AD0](certificate);
}

uint64_t SecCertificateCopySHA256Digest()
{
  return MEMORY[0x1F40F6B40]();
}

uint64_t SecCertificateCopySubjectPublicKeyInfoSHA1Digest()
{
  return MEMORY[0x1F40F6B58]();
}

CFStringRef SecCertificateCopySubjectSummary(SecCertificateRef certificate)
{
  return (CFStringRef)MEMORY[0x1F40F6B68](certificate);
}

uint64_t SecCertificateCopySummaryProperties()
{
  return MEMORY[0x1F40F6B70]();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1F40F6B80](allocator, data);
}

CFTypeID SecCertificateGetTypeID(void)
{
  return MEMORY[0x1F40F6BB8]();
}

uint64_t SecCertificateNotValidAfter()
{
  return MEMORY[0x1F40F6BD0]();
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1F40F6BD8]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1F40F6D68](*(void *)&status, reserved);
}

uint64_t SecDHComputeKey()
{
  return MEMORY[0x1F40F6D78]();
}

uint64_t SecDHCreate()
{
  return MEMORY[0x1F40F6D80]();
}

uint64_t SecDHDestroy()
{
  return MEMORY[0x1F40F6D88]();
}

uint64_t SecDHGenerateKeypair()
{
  return MEMORY[0x1F40F6D90]();
}

uint64_t SecDHGetMaxKeyLength()
{
  return MEMORY[0x1F40F6D98]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1F40F6DB8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1F40F6DC0](identityRef, privateKeyRef);
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1F40F6DC8]();
}

CFTypeID SecIdentityGetTypeID(void)
{
  return MEMORY[0x1F40F6DD0]();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DD8](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1F40F6DE8](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1F40F6E20](query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E40](key, error);
}

uint64_t SecKeyCopyPublicKeyHash()
{
  return MEMORY[0x1F40F6E78]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

size_t SecKeyGetBlockSize(SecKeyRef key)
{
  return MEMORY[0x1F40F6F40](key);
}

CFTypeID SecKeyGetTypeID(void)
{
  return MEMORY[0x1F40F6F58]();
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1F40F6F80](key, algorithm, signedData, signature, error);
}

OSStatus SecPKCS12Import(CFDataRef pkcs12_data, CFDictionaryRef options, CFArrayRef *items)
{
  return MEMORY[0x1F40F6F90](pkcs12_data, options, items);
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1F40F7048]();
}

SecPolicyRef SecPolicyCreateRevocation(CFOptionFlags revocationFlags)
{
  return (SecPolicyRef)MEMORY[0x1F40F7078](revocationFlags);
}

SecPolicyRef SecPolicyCreateWithProperties(CFTypeRef policyIdentifier, CFDictionaryRef properties)
{
  return (SecPolicyRef)MEMORY[0x1F40F70A0](policyIdentifier, properties);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return (CFStringRef)MEMORY[0x1F40F7128](task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1F40F7168](allocator, token);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1F40F71B8](trust);
}

CFArrayRef SecTrustCopyProperties(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F71C8](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1F40F71E0](certificates, policies, trust);
}

OSStatus SecTrustEvaluate(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1F40F71F0](trust, result);
}

SecCertificateRef SecTrustGetCertificateAtIndex(SecTrustRef trust, CFIndex ix)
{
  return (SecCertificateRef)MEMORY[0x1F40F7220](trust, ix);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x1F40F7228](trust);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1F40F7258](trust, anchorCertificates);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

uint64_t _SCNetworkServiceCopyActive()
{
  return MEMORY[0x1F4102108]();
}

uint64_t _SCNetworkServiceIsVPN()
{
  return MEMORY[0x1F4102110]();
}

uint64_t _SCNetworkServiceSetServiceID()
{
  return MEMORY[0x1F4102118]();
}

uint64_t _SCPreferencesSystemKeychainPasswordItemCopy()
{
  return MEMORY[0x1F4102120]();
}

uint64_t _SCPreferencesSystemKeychainPasswordItemRemove()
{
  return MEMORY[0x1F4102128]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1F40C9C38]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1F40C9CE8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void abort(void)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1F40CA6A8]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1F40CA6E8]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1F40CA6F0]();
}

uint64_t ccchacha20poly1305_aad()
{
  return MEMORY[0x1F40CA770]();
}

uint64_t ccchacha20poly1305_decrypt()
{
  return MEMORY[0x1F40CA778]();
}

uint64_t ccchacha20poly1305_encrypt()
{
  return MEMORY[0x1F40CA780]();
}

uint64_t ccchacha20poly1305_finalize()
{
  return MEMORY[0x1F40CA788]();
}

uint64_t ccchacha20poly1305_info()
{
  return MEMORY[0x1F40CA790]();
}

uint64_t ccchacha20poly1305_init()
{
  return MEMORY[0x1F40CA798]();
}

uint64_t ccchacha20poly1305_reset()
{
  return MEMORY[0x1F40CA7A0]();
}

uint64_t ccchacha20poly1305_setnonce()
{
  return MEMORY[0x1F40CA7A8]();
}

uint64_t ccchacha20poly1305_verify()
{
  return MEMORY[0x1F40CA7B0]();
}

uint64_t ccgcm_aad()
{
  return MEMORY[0x1F40CAC78]();
}

uint64_t ccgcm_context_size()
{
  return MEMORY[0x1F40CAC80]();
}

uint64_t ccgcm_finalize()
{
  return MEMORY[0x1F40CAC88]();
}

uint64_t ccgcm_inc_iv()
{
  return MEMORY[0x1F40CAC90]();
}

uint64_t ccgcm_init()
{
  return MEMORY[0x1F40CAC98]();
}

uint64_t ccgcm_init_with_iv()
{
  return MEMORY[0x1F40CACA0]();
}

uint64_t ccgcm_reset()
{
  return MEMORY[0x1F40CACB0]();
}

uint64_t ccgcm_set_iv()
{
  return MEMORY[0x1F40CACB8]();
}

uint64_t ccgcm_update()
{
  return MEMORY[0x1F40CACC0]();
}

Class class_getSuperclass(Class cls)
{
  return (Class)MEMORY[0x1F4181558](cls);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

uint64_t csr_check()
{
  return MEMORY[0x1F40CB8D8]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_with_transform()
{
  return MEMORY[0x1F40CBA40]();
}

void *__cdecl dispatch_get_context(dispatch_object_t object)
{
  return (void *)MEMORY[0x1F40CBA50](object);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_handle(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA8](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCF8](source);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1F40CBE28]();
}

void exit(int a1)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1F40CC348](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC488](*(void *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1F40CC4D8](a1);
}

passwd *__cdecl getpwuid(uid_t a1)
{
  return (passwd *)MEMORY[0x1F40CC4E8](*(void *)&a1);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1F40CC560](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1F40CC608](*(void *)&host, *(void *)&flavor, host_info_out, host_info_outCnt);
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1F40CC648](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int mbr_uid_to_uuid(uid_t uid, uuid_t uu)
{
  return MEMORY[0x1F40CCC88](*(void *)&uid, uu);
}

int mbr_uuid_to_id(const uuid_t uu, id_t *uid_or_gid, int *id_type)
{
  return MEMORY[0x1F40CCC90](uu, uid_or_gid, id_type);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1F40CCD40](__s, __smax, *(void *)&__c, __n);
}

uint64_t ne_copy_signing_identifier_for_pid_with_audit_token()
{
  return MEMORY[0x1F4181258]();
}

uint64_t ne_filter_copy_connection()
{
  return MEMORY[0x1F4181260]();
}

uint64_t ne_filter_crypto_generate_client_key()
{
  return MEMORY[0x1F4181268]();
}

uint64_t ne_filter_crypto_init_master()
{
  return MEMORY[0x1F4181270]();
}

uint64_t ne_filter_crypto_validate_data()
{
  return MEMORY[0x1F4181278]();
}

uint64_t ne_filter_get_definition()
{
  return MEMORY[0x1F4181280]();
}

uint64_t ne_filter_request_connection()
{
  return MEMORY[0x1F4181290]();
}

uint64_t ne_filter_send_message()
{
  return MEMORY[0x1F4181298]();
}

uint64_t ne_filter_sign_data()
{
  return MEMORY[0x1F41812A0]();
}

uint64_t ne_get_configuration_generation()
{
  return MEMORY[0x1F41812A8]();
}

uint64_t ne_log_large_obj()
{
  return MEMORY[0x1F40CCEA8]();
}

uint64_t ne_log_obj()
{
  return MEMORY[0x1F40CCEB0]();
}

uint64_t ne_session_address_matches_subnets()
{
  return MEMORY[0x1F41812B0]();
}

uint64_t ne_session_cancel()
{
  return MEMORY[0x1F41812B8]();
}

uint64_t ne_session_create()
{
  return MEMORY[0x1F41812C0]();
}

uint64_t ne_session_disable_restrictions()
{
  return MEMORY[0x1F41812C8]();
}

uint64_t ne_session_establish_ipc()
{
  return MEMORY[0x1F41812D0]();
}

uint64_t ne_session_get_configuration_id()
{
  return MEMORY[0x1F41812D8]();
}

uint64_t ne_session_get_info()
{
  return MEMORY[0x1F41812E0]();
}

uint64_t ne_session_get_info2()
{
  return MEMORY[0x1F41812E8]();
}

uint64_t ne_session_get_status()
{
  return MEMORY[0x1F41812F0]();
}

uint64_t ne_session_release()
{
  return MEMORY[0x1F41812F8]();
}

uint64_t ne_session_set_event_handler()
{
  return MEMORY[0x1F4181300]();
}

uint64_t ne_session_start()
{
  return MEMORY[0x1F4181308]();
}

uint64_t ne_session_start_with_options()
{
  return MEMORY[0x1F4181310]();
}

uint64_t ne_session_status_to_string()
{
  return MEMORY[0x1F4181318]();
}

uint64_t ne_session_stop()
{
  return MEMORY[0x1F4181320]();
}

uint64_t ne_session_stop_reason_to_string()
{
  return MEMORY[0x1F4181328]();
}

uint64_t ne_session_type_to_string()
{
  return MEMORY[0x1F4181330]();
}

uint64_t necp_session_action()
{
  return MEMORY[0x1F40CCFB8]();
}

uint64_t necp_session_open()
{
  return MEMORY[0x1F40CCFC0]();
}

uint64_t nelog_is_debug_logging_enabled()
{
  return MEMORY[0x1F40CCFC8]();
}

uint64_t nelog_is_extra_vpn_logging_enabled()
{
  return MEMORY[0x1F40CCFD0]();
}

uint64_t nelog_is_info_logging_enabled()
{
  return MEMORY[0x1F40CCFD8]();
}

uint64_t network_config_cellular_blocked_observer_cancel()
{
  return MEMORY[0x1F40F27F0]();
}

uint64_t network_config_cellular_blocked_observer_create()
{
  return MEMORY[0x1F40F27F8]();
}

uint64_t network_config_cellular_failed_observer_create()
{
  return MEMORY[0x1F40F2800]();
}

uint64_t network_config_wifi_blocked_observer_create()
{
  return MEMORY[0x1F40F2838]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_check(int token, int *check)
{
  return MEMORY[0x1F40CD038](*(void *)&token, check);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

uint64_t nw_array_append()
{
  return MEMORY[0x1F40F2928]();
}

uint64_t nw_array_create()
{
  return MEMORY[0x1F40F2938]();
}

uint64_t nw_channel_close()
{
  return MEMORY[0x1F40F2A08]();
}

uint64_t nw_channel_create_with_nexus()
{
  return MEMORY[0x1F40F2A18]();
}

uint64_t nw_channel_get_key()
{
  return MEMORY[0x1F40F2A20]();
}

uint64_t nw_channel_get_nexus_instance()
{
  return MEMORY[0x1F40F2A28]();
}

uint64_t nw_channel_get_protocol_handler()
{
  return MEMORY[0x1F40F2A30]();
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_copy_connected_path()
{
  return MEMORY[0x1F40F2A80]();
}

nw_path_t nw_connection_copy_current_path(nw_connection_t connection)
{
  return (nw_path_t)MEMORY[0x1F40F2A90](connection);
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2AA0](connection);
}

nw_parameters_t nw_connection_copy_parameters(nw_connection_t connection)
{
  return (nw_parameters_t)MEMORY[0x1F40F2AC0](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x1F40F2AD0](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x1F40F2AE0](endpoint, parameters);
}

uint64_t nw_connection_create_with_connected_socket_and_parameters()
{
  return MEMORY[0x1F40F2B08]();
}

uint64_t nw_connection_get_connected_socket()
{
  return MEMORY[0x1F40F2B40]();
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

uint64_t nw_connection_set_event_handler()
{
  return MEMORY[0x1F40F2C60]();
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_connection_state_to_string()
{
  return MEMORY[0x1F40F2CB8]();
}

uint64_t nw_context_copy_implicit_context()
{
  return MEMORY[0x1F40F2D60]();
}

uint64_t nw_context_get_globals_for_protocol()
{
  return MEMORY[0x1F40F2D80]();
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2E80](address);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x1F40F2EA8](hostname, port);
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return MEMORY[0x1F40F2EB0]();
}

const sockaddr *__cdecl nw_endpoint_get_address(nw_endpoint_t endpoint)
{
  return (const sockaddr *)MEMORY[0x1F40F2ED0](endpoint);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  return (const char *)MEMORY[0x1F40F2F08](endpoint);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

nw_endpoint_type_t nw_endpoint_get_type(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F38](endpoint);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1F40F2F60](error);
}

nw_error_domain_t nw_error_get_error_domain(nw_error_t error)
{
  return MEMORY[0x1F40F2F68](error);
}

uint64_t nw_frame_array_append()
{
  return MEMORY[0x1F40F2FD0]();
}

uint64_t nw_frame_array_first()
{
  return MEMORY[0x1F40F2FE0]();
}

uint64_t nw_frame_array_foreach()
{
  return MEMORY[0x1F40F2FE8]();
}

uint64_t nw_frame_array_init()
{
  return MEMORY[0x1F40F3000]();
}

uint64_t nw_frame_array_is_empty()
{
  return MEMORY[0x1F40F3010]();
}

uint64_t nw_frame_array_next()
{
  return MEMORY[0x1F40F3020]();
}

uint64_t nw_frame_array_remove()
{
  return MEMORY[0x1F40F3030]();
}

uint64_t nw_frame_array_unclaimed_length()
{
  return MEMORY[0x1F40F3038]();
}

uint64_t nw_frame_claim()
{
  return MEMORY[0x1F40F3050]();
}

uint64_t nw_frame_create()
{
  return MEMORY[0x1F40F3068]();
}

uint64_t nw_frame_finalize()
{
  return MEMORY[0x1F40F3078]();
}

uint64_t nw_frame_get_buffer()
{
  return MEMORY[0x1F40F3088]();
}

uint64_t nw_frame_reset()
{
  return MEMORY[0x1F40F30A8]();
}

uint64_t nw_frame_unclaim()
{
  return MEMORY[0x1F40F30D8]();
}

uint64_t nw_frame_unclaimed_bytes()
{
  return MEMORY[0x1F40F30F0]();
}

uint64_t nw_frame_unclaimed_length()
{
  return MEMORY[0x1F40F30F8]();
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  return (nw_protocol_definition_t)MEMORY[0x1F40F3120](identifier, *(void *)&flags, start_handler);
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3128](framer_definition);
}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  return MEMORY[0x1F40F3130](framer, input_length, message, is_complete);
}

void nw_framer_mark_failed_with_error(nw_framer_t framer, int error_code)
{
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  return (nw_framer_message_t)MEMORY[0x1F40F3150](framer);
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  return MEMORY[0x1F40F3160](framer, minimum_incomplete_length, maximum_length, temp_buffer, parse);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  return MEMORY[0x1F40F31B0](framer, output_length);
}

uint64_t nw_interface_create_with_index()
{
  return MEMORY[0x1F40F3230]();
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1F40F3238]();
}

uint32_t nw_interface_get_index(nw_interface_t interface)
{
  return MEMORY[0x1F40F3240](interface);
}

const char *__cdecl nw_interface_get_name(nw_interface_t interface)
{
  return (const char *)MEMORY[0x1F40F3248](interface);
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  return MEMORY[0x1F40F3268](interface);
}

uint64_t nw_interpose_cancel()
{
  return MEMORY[0x1F40F3298]();
}

uint64_t nw_interpose_client_claim()
{
  return MEMORY[0x1F40F32A0]();
}

uint64_t nw_interpose_set_flow_event_handler()
{
  return MEMORY[0x1F40F32A8]();
}

uint64_t nw_interpose_start()
{
  return MEMORY[0x1F40F32B0]();
}

void nw_ip_options_set_local_address_preference(nw_protocol_options_t options, nw_ip_local_address_preference_t preference)
{
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3320](parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

uint64_t nw_nat64_copy_prefixes()
{
  return MEMORY[0x1F40F3390]();
}

uint64_t nw_nat64_extract_v4()
{
  return MEMORY[0x1F40F33A8]();
}

uint64_t nw_nat64_synthesize_v6()
{
  return MEMORY[0x1F40F33B0]();
}

uint64_t nw_nexus_bind_client_port()
{
  return MEMORY[0x1F40F33B8]();
}

uint64_t nw_nexus_close()
{
  return MEMORY[0x1F40F33C0]();
}

uint64_t nw_nexus_close_channel_and_instance()
{
  return MEMORY[0x1F40F33C8]();
}

uint64_t nw_nexus_create()
{
  return MEMORY[0x1F40F33D0]();
}

uint64_t nw_nexus_create_channel_to_new_instance()
{
  return MEMORY[0x1F40F33D8]();
}

uint64_t nw_parameters_copy_context()
{
  return MEMORY[0x1F40F3410]();
}

nw_protocol_stack_t nw_parameters_copy_default_protocol_stack(nw_parameters_t parameters)
{
  return (nw_protocol_stack_t)MEMORY[0x1F40F3418](parameters);
}

uint64_t nw_parameters_copy_local_address()
{
  return MEMORY[0x1F40F3430]();
}

uint64_t nw_parameters_create_legacy_tcp_socket()
{
  return MEMORY[0x1F40F34A0]();
}

nw_parameters_t nw_parameters_create_secure_tcp(nw_parameters_configure_protocol_block_t configure_tls, nw_parameters_configure_protocol_block_t configure_tcp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34D0](configure_tls, configure_tcp);
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

uint64_t nw_parameters_get_ip_protocol()
{
  return MEMORY[0x1F40F3510]();
}

uint64_t nw_parameters_get_tls()
{
  return MEMORY[0x1F40F3568]();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_data_mode()
{
  return MEMORY[0x1F40F35E8]();
}

uint64_t nw_parameters_set_effective_bundle_id()
{
  return MEMORY[0x1F40F3620]();
}

uint64_t nw_parameters_set_indefinite()
{
  return MEMORY[0x1F40F3660]();
}

uint64_t nw_parameters_set_local_address()
{
  return MEMORY[0x1F40F3680]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
}

uint64_t nw_parameters_set_metadata()
{
  return MEMORY[0x1F40F3690]();
}

uint64_t nw_parameters_set_required_interface_subtype()
{
  return MEMORY[0x1F40F3740]();
}

void nw_parameters_set_reuse_local_address(nw_parameters_t parameters, BOOL reuse_local_address)
{
}

uint64_t nw_parameters_set_use_awdl()
{
  return MEMORY[0x1F40F37D0]();
}

nw_endpoint_t nw_path_copy_effective_local_endpoint(nw_path_t path)
{
  return (nw_endpoint_t)MEMORY[0x1F40F3800](path);
}

uint64_t nw_path_copy_interface()
{
  return MEMORY[0x1F40F3828]();
}

uint64_t nw_path_create_assign_message()
{
  return MEMORY[0x1F40F3840]();
}

uint64_t nw_path_create_browse_result()
{
  return MEMORY[0x1F40F3848]();
}

uint64_t nw_path_get_ipv4_network_signature()
{
  return MEMORY[0x1F40F38E8]();
}

uint64_t nw_path_get_ipv6_network_signature()
{
  return MEMORY[0x1F40F38F0]();
}

BOOL nw_path_uses_interface_type(nw_path_t path, nw_interface_type_t interface_type)
{
  return MEMORY[0x1F40F3A00](path, *(void *)&interface_type);
}

uint64_t nw_protocol_create()
{
  return MEMORY[0x1F40F3A68]();
}

uint64_t nw_protocol_register_extended()
{
  return MEMORY[0x1F40F3B20]();
}

uint64_t nw_protocol_set_default_one_to_one_callbacks()
{
  return MEMORY[0x1F40F3B40]();
}

nw_protocol_options_t nw_protocol_stack_copy_internet_protocol(nw_protocol_stack_t stack)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3B58](stack);
}

uint64_t nw_protocol_stack_includes_protocol()
{
  return MEMORY[0x1F40F3B70]();
}

void nw_protocol_stack_prepend_application_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
}

uint64_t nw_protocols_are_equal()
{
  return MEMORY[0x1F40F3BE8]();
}

uint64_t nw_proxy_config_copy_agent_data()
{
  return MEMORY[0x1F40F3BF0]();
}

uint64_t nw_proxy_config_get_agent_domain()
{
  return MEMORY[0x1F40F3BF8]();
}

uint64_t nw_proxy_config_get_agent_type()
{
  return MEMORY[0x1F40F3C00]();
}

uint64_t nw_proxy_config_set_identifier()
{
  return MEMORY[0x1F40F3C18]();
}

uint64_t nw_proxy_copy_shoes_definition()
{
  return MEMORY[0x1F40F3C30]();
}

uint64_t nw_queue_activate_source()
{
  return MEMORY[0x1F40F3C70]();
}

uint64_t nw_queue_cancel_source()
{
  return MEMORY[0x1F40F3C78]();
}

uint64_t nw_queue_context_async()
{
  return MEMORY[0x1F40F3C80]();
}

uint64_t nw_queue_context_async_if_needed()
{
  return MEMORY[0x1F40F3C88]();
}

uint64_t nw_queue_context_create_source()
{
  return MEMORY[0x1F40F3C98]();
}

uint64_t nw_queue_resume_source()
{
  return MEMORY[0x1F40F3CA8]();
}

uint64_t nw_queue_suspend_source()
{
  return MEMORY[0x1F40F3CB8]();
}

uint64_t nw_resolver_config_add_match_domain()
{
  return MEMORY[0x1F40F3E28]();
}

uint64_t nw_resolver_config_add_name_server()
{
  return MEMORY[0x1F40F3E30]();
}

uint64_t nw_resolver_config_add_search_domain()
{
  return MEMORY[0x1F40F3E38]();
}

uint64_t nw_resolver_config_copy_plist_data()
{
  return MEMORY[0x1F40F3E40]();
}

uint64_t nw_resolver_config_create()
{
  return MEMORY[0x1F40F3E48]();
}

uint64_t nw_resolver_config_set_class()
{
  return MEMORY[0x1F40F3E50]();
}

uint64_t nw_resolver_config_set_identifier()
{
  return MEMORY[0x1F40F3E58]();
}

uint64_t nw_resolver_config_set_identity_reference()
{
  return MEMORY[0x1F40F3E60]();
}

uint64_t nw_resolver_config_set_protocol()
{
  return MEMORY[0x1F40F3E68]();
}

uint64_t nw_resolver_config_set_provider_name()
{
  return MEMORY[0x1F40F3E70]();
}

uint64_t nw_resolver_config_set_provider_path()
{
  return MEMORY[0x1F40F3E78]();
}

uint64_t nw_resolver_config_set_proxy_agent()
{
  return MEMORY[0x1F40F3E80]();
}

uint64_t nw_shoes_metadata_copy_remote_endpoint()
{
  return MEMORY[0x1F40F3EE8]();
}

uint64_t nw_shoes_metadata_enumerate_resolved_endpoints()
{
  return MEMORY[0x1F40F3EF0]();
}

nw_protocol_options_t nw_udp_create_options(void)
{
  return (nw_protocol_options_t)MEMORY[0x1F40F3F98]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

uint64_t os_buflet_get_data_offset()
{
  return MEMORY[0x1F40CD168]();
}

uint64_t os_buflet_get_object_address()
{
  return MEMORY[0x1F40CD170]();
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1F40CD180]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1F40CD188]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1F40CD190]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1F40CD198]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1F40CD1A0]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1F40CD1A8]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1F40CD1B0]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1F40CD1C0]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1F40CD1C8]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1F40CD200]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1F40CD218]();
}

uint64_t os_channel_is_defunct()
{
  return MEMORY[0x1F40CD228]();
}

uint64_t os_channel_packet_free()
{
  return MEMORY[0x1F40CD240]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1F40CD250]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1F40CD270]();
}

uint64_t os_channel_slot_attach_packet()
{
  return MEMORY[0x1F40CD280]();
}

uint64_t os_channel_slot_detach_packet()
{
  return MEMORY[0x1F40CD288]();
}

uint64_t os_channel_slot_get_packet()
{
  return MEMORY[0x1F40CD290]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1F40CD298]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1F40CD2A0]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_packet_get_data_length()
{
  return MEMORY[0x1F40CD460]();
}

uint64_t os_packet_get_next_buflet()
{
  return MEMORY[0x1F40CD478]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

int proc_listallpids(void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD870](buffer, *(void *)&buffersize);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD888](*(void *)&pid, buffer, *(void *)&buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int proc_pidpath(int pid, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8B8](*(void *)&pid, buffer, *(void *)&buffersize);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDCB8](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDCC8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t recvmsg_x()
{
  return MEMORY[0x1F40CDCD0]();
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDF30](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDF38](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t sendmsg_x()
{
  return MEMORY[0x1F40CDF40]();
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1F40CE018](*(void *)&a1, a2, a3);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return MEMORY[0x1F41864F8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

kern_return_t task_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *t)
{
  return MEMORY[0x1F40CE448](*(void *)&target_tport, *(void *)&pid, t);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA18](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB18](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1F40CEB90]();
}

xpc_connection_t xpc_connection_create(const char *name, dispatch_queue_t targetq)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBA8](name, targetq);
}

xpc_connection_t xpc_connection_create_from_endpoint(xpc_endpoint_t endpoint)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBC0](endpoint);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1F40CEBE8]();
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC08](connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE50](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEE68](xdict, key);
}

uint64_t xpc_dictionary_get_audit_token()
{
  return MEMORY[0x1F40CEE78]();
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

double xpc_dictionary_get_double(xpc_object_t xdict, const char *key)
{
  MEMORY[0x1F40CEEB8](xdict, key);
  return result;
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1F40CEF00](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return MEMORY[0x1F40CEF20]();
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_endpoint_t xpc_endpoint_create(xpc_connection_t connection)
{
  return (xpc_endpoint_t)MEMORY[0x1F40CF018](connection);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

void xpc_release(xpc_object_t object)
{
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1F40CF250]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF330](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1F40CF360](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1F40CF368](xuuid);
}