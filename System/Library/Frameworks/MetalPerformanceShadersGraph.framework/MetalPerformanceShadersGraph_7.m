uint64_t anonymous namespace'::BuiltinDialectBytecodeInterface::readType(mlir::DialectInterface *a1, void *a2)
{
  mlir::IndexType *Context;
  mlir::MLIRContext *v4;
  uint64_t v5;
  size_t *v6;
  char *v7;
  char *v8;
  long long v9;
  uint64_t v10;
  size_t *v11;
  char *v12;
  char *v13;
  long long v14;
  void **v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  int v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  size_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  void *v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  char v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  size_t v54;
  void *v55;
  unint64_t v57;
  unint64_t v58;
  BOOL v59;
  int64_t v60;
  int64_t v61;
  char v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  size_t v67[2];
  void *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned char v71[96];
  void *v72;
  void *v73;
  void *__p;
  void **v75;
  char v76;
  unint64_t v77[2];
  void *v78;
  uint64_t v79;
  _WORD v80[24];
  size_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E4F143B8];
  Context = (mlir::IndexType *)mlir::DialectInterface::getContext(a1);
  v63 = 0;
  if (!(*(unsigned __int8 (**)(void *, const char **))(*a2 + 72))(a2, &v63)) {
    return 0;
  }
  switch((unint64_t)v63)
  {
    case 0uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 72))(a2, &v66)) {
        return 0;
      }
      return mlir::IntegerType::get((uint64_t)Context, (unint64_t)v66 >> 2, v66 & 3);
    case 1uLL:
      return mlir::IndexType::get(Context, v4);
    case 2uLL:
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = v80;
      v79 = 0x600000000;
      v81 = (size_t)a2;
      if (mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v66, &v81)&& (v81 = (size_t)a2, mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v78, &v81)))
      {
        mlir::ValueRange::ValueRange(&v81, (uint64_t)v66, LODWORD(v67[0]));
        mlir::ValueRange::ValueRange(v77, (uint64_t)v78, v79);
        v5 = mlir::FunctionType::get(Context, v81, (uint64_t)v82, v77[0], v77[1]);
      }
      else
      {
        v5 = 0;
      }
      if (v78 != (void *)v80) {
        free(v78);
      }
      goto LABEL_145;
    case 3uLL:
      return mlir::BFloat16Type::get(Context, v4);
    case 4uLL:
      return mlir::Float16Type::get(Context, v4);
    case 5uLL:
      return mlir::Float32Type::get(Context, v4);
    case 6uLL:
      return mlir::Float64Type::get(Context, v4);
    case 7uLL:
      return mlir::Float80Type::get(Context, v4);
    case 8uLL:
      return mlir::Float128Type::get(Context, v4);
    case 9uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 64))(a2, &v66)) {
        return 0;
      }
      return mlir::ComplexType::get((uint64_t)v66);
    case 0xAuLL:
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = 0;
      v79 = 0;
      v77[0] = 0;
      if (!(*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 72))(a2, v77)) {
        goto LABEL_123;
      }
      v24 = v77[0];
      if (v77[0] > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v77[0], 8);
        v24 = v77[0];
      }
      if (!v24) {
        goto LABEL_45;
      }
      v25 = 0;
      while (1)
      {
        v81 = 0;
        if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 80))(a2, &v81)) {
          goto LABEL_123;
        }
        v26 = v81;
        v27 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((void *)v66 + LODWORD(v67[0])) = v26;
          ++LODWORD(v67[0]);
          if (++v25 >= v77[0])
          {
LABEL_45:
            if ((*(unsigned __int8 (**)(void *, uint64_t *))(*a2 + 64))(a2, &v65)
              && mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>((uint64_t)a2, &v78))
            {
              v5 = mlir::MemRefType::get(v66, (mlir::AffineMap *)LODWORD(v67[0]), v65, v78, v79, 0);
              goto LABEL_124;
            }
            goto LABEL_123;
          }
        }
        else
        {
          *((void *)v66 + LODWORD(v67[0])) = v81;
          LODWORD(v67[0]) = v27 + 1;
          if (++v25 >= v77[0]) {
            goto LABEL_45;
          }
        }
      }
    case 0xBuLL:
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v64 = 0;
      v78 = 0;
      v79 = 0;
      if (!(*(unsigned __int8 (**)(void *, uint64_t *))(*a2 + 48))(a2, &v65)) {
        goto LABEL_123;
      }
      v77[0] = 0;
      if (!(*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 72))(a2, v77)) {
        goto LABEL_123;
      }
      v28 = v77[0];
      if (v77[0] > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v77[0], 8);
        v28 = v77[0];
      }
      if (!v28) {
        goto LABEL_59;
      }
      v29 = 0;
      while (1)
      {
        v81 = 0;
        if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 80))(a2, &v81)) {
          goto LABEL_123;
        }
        v30 = v81;
        v31 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((void *)v66 + LODWORD(v67[0])) = v30;
          ++LODWORD(v67[0]);
          if (++v29 >= v77[0])
          {
LABEL_59:
            if ((*(unsigned __int8 (**)(void *, uint64_t *))(*a2 + 64))(a2, &v64)
              && mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>((uint64_t)a2, &v78))
            {
              v5 = mlir::MemRefType::get(v66, (mlir::AffineMap *)LODWORD(v67[0]), v64, v78, v79, v65);
              goto LABEL_124;
            }
            goto LABEL_123;
          }
        }
        else
        {
          *((void *)v66 + LODWORD(v67[0])) = v81;
          LODWORD(v67[0]) = v31 + 1;
          if (++v29 >= v77[0]) {
            goto LABEL_59;
          }
        }
      }
    case 0xCuLL:
      return mlir::NoneType::get(Context, v4);
    case 0xDuLL:
      v23 = (void **)&v67[1];
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v77[0] = 0;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 72))(a2, &v81)) {
        goto LABEL_123;
      }
      v32 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v32 = v81;
      }
      if (!v32) {
        goto LABEL_73;
      }
      v33 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 80))(a2, &v78)) {
          goto LABEL_123;
        }
        v34 = v78;
        v35 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((void *)v66 + LODWORD(v67[0])) = v34;
          ++LODWORD(v67[0]);
          if (++v33 >= v81)
          {
LABEL_73:
            if (!(*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 64))(a2, v77)) {
              goto LABEL_123;
            }
            v5 = mlir::RankedTensorType::get((uint64_t)v66, LODWORD(v67[0]), v77[0], 0);
            goto LABEL_124;
          }
        }
        else
        {
          *((void *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v35 + 1;
          if (++v33 >= v81) {
            goto LABEL_73;
          }
        }
      }
    case 0xEuLL:
      v77[0] = 0;
      v23 = (void **)&v67[1];
      v65 = 0;
      v66 = &v67[1];
      v67[0] = 0x600000000;
      if (!(*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 48))(a2, v77)) {
        goto LABEL_123;
      }
      v81 = 0;
      if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 72))(a2, &v81)) {
        goto LABEL_123;
      }
      v36 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v36 = v81;
      }
      if (!v36) {
        goto LABEL_86;
      }
      v37 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 80))(a2, &v78)) {
          goto LABEL_123;
        }
        v38 = v78;
        v39 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((void *)v66 + LODWORD(v67[0])) = v38;
          ++LODWORD(v67[0]);
          if (++v37 >= v81)
          {
LABEL_86:
            if (!(*(unsigned __int8 (**)(void *, uint64_t *))(*a2 + 64))(a2, &v65)) {
              goto LABEL_123;
            }
            v5 = mlir::RankedTensorType::get((uint64_t)v66, LODWORD(v67[0]), v65, v77[0]);
            goto LABEL_124;
          }
        }
        else
        {
          *((void *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v39 + 1;
          if (++v37 >= v81) {
            goto LABEL_86;
          }
        }
      }
    case 0xFuLL:
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v78 = a2;
      if (mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>((uint64_t)a2, (uint64_t)&v66, &v78))
      {
        mlir::ValueRange::ValueRange((unint64_t *)&v78, (uint64_t)v66, LODWORD(v67[0]));
        v5 = mlir::TupleType::get(Context, (uint64_t)v78, v79);
      }
      else
      {
        v5 = 0;
      }
LABEL_145:
      v50 = v66;
      if (v66 != &v67[1]) {
        goto LABEL_146;
      }
      return v5;
    case 0x10uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 64))(a2, &v66)) {
        return 0;
      }
      v40 = v66;
      v41 = 0;
      return mlir::UnrankedMemRefType::get((uint64_t)v40, (uint64_t)v41);
    case 0x11uLL:
      v66 = 0;
      v78 = 0;
      if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 48))(a2, &v66)
        || !(*(unsigned __int8 (**)(void *, void **))(*a2 + 64))(a2, &v78))
      {
        return 0;
      }
      v40 = v78;
      v41 = v66;
      return mlir::UnrankedMemRefType::get((uint64_t)v40, (uint64_t)v41);
    case 0x12uLL:
      v66 = 0;
      if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 64))(a2, &v66)) {
        return 0;
      }
      return mlir::UnrankedTensorType::get((uint64_t)v66);
    case 0x13uLL:
      v23 = (void **)&v67[1];
      v66 = &v67[1];
      v67[0] = 0x600000000;
      v77[0] = 0;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 72))(a2, &v81)) {
        goto LABEL_123;
      }
      v46 = v81;
      if (v81 > HIDWORD(v67[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], v81, 8);
        v46 = v81;
      }
      if (!v46) {
        goto LABEL_121;
      }
      v47 = 0;
      while (1)
      {
        v78 = 0;
        if (!(*(unsigned __int8 (**)(void *, void **))(*a2 + 80))(a2, &v78)) {
          break;
        }
        v48 = v78;
        v49 = v67[0];
        if (LODWORD(v67[0]) >= HIDWORD(v67[0]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, &v67[1], LODWORD(v67[0]) + 1, 8);
          *((void *)v66 + LODWORD(v67[0])) = v48;
          ++LODWORD(v67[0]);
          if (++v47 >= v81)
          {
LABEL_121:
            if ((*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 64))(a2, v77))
            {
              v5 = mlir::VectorType::get((uint64_t)v66, LODWORD(v67[0]), v77[0], 0, 0);
              goto LABEL_124;
            }
            break;
          }
        }
        else
        {
          *((void *)v66 + LODWORD(v67[0])) = v78;
          LODWORD(v67[0]) = v49 + 1;
          if (++v47 >= v81) {
            goto LABEL_121;
          }
        }
      }
LABEL_123:
      v5 = 0;
      goto LABEL_124;
    case 0x14uLL:
      v23 = &v68;
      v65 = 0;
      v66 = &v68;
      *(_OWORD *)v67 = xmmword_1810FE310;
      v78 = v80;
      v79 = 0x600000000;
      v81 = 0;
      if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 72))(a2, &v81)) {
        goto LABEL_142;
      }
      v42 = v81;
      if (v67[1] < v81)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v66, &v68, v81, 1);
        v42 = v81;
      }
      if (!v42) {
        goto LABEL_129;
      }
      v43 = 0;
      break;
    default:
      v80[8] = 257;
      (*(void (**)(void **__return_ptr, void *, void **))(*a2 + 16))(&v66, a2, &v78);
      if (v66)
      {
        LODWORD(v81) = 3;
        v82 = "unknown attribute code: ";
        v83 = 24;
        v6 = &v81;
        v7 = (char *)v68;
        if (v69 >= v70)
        {
          v57 = v69 + 1;
          if (v68 <= &v81 && (char *)v68 + 24 * v69 > (char *)&v81)
          {
            v60 = (char *)&v81 - (unsigned char *)v68;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
            v7 = (char *)v68;
            v6 = (size_t *)((char *)v68 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v57, 24);
            v6 = &v81;
            v7 = (char *)v68;
          }
        }
        v8 = &v7[24 * v69];
        v9 = *(_OWORD *)v6;
        *((void *)v8 + 2) = v6[2];
        *(_OWORD *)v8 = v9;
        v10 = ++v69;
        if (v66)
        {
          LODWORD(v81) = 5;
          v82 = v63;
          v11 = &v81;
          v12 = (char *)v68;
          if (v10 >= v70)
          {
            v58 = v10 + 1;
            v59 = (char *)v68 + 24 * v10 > (char *)&v81;
            if (v68 <= &v81 && v59)
            {
              v61 = (char *)&v81 - (unsigned char *)v68;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v58, 24);
              v12 = (char *)v68;
              v11 = (size_t *)((char *)v68 + v61);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, v71, v58, 24);
              v11 = &v81;
              v12 = (char *)v68;
            }
          }
          v13 = &v12[24 * v69];
          v14 = *(_OWORD *)v11;
          *((void *)v13 + 2) = v11[2];
          *(_OWORD *)v13 = v14;
          ++v69;
          if (v66) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v66);
          }
        }
      }
      if (v76)
      {
        v15 = (void **)__p;
        if (__p)
        {
          v16 = v75;
          v17 = __p;
          if (v75 != __p)
          {
            do
              v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
            while (v16 != v15);
            v17 = __p;
          }
          v75 = v15;
          operator delete(v17);
        }
        v18 = v72;
        if (v72)
        {
          v19 = v73;
          v20 = v72;
          if (v73 != v72)
          {
            do
            {
              v22 = (void *)*--v19;
              v21 = v22;
              *v19 = 0;
              if (v22) {
                operator delete[](v21);
              }
            }
            while (v19 != v18);
            v20 = v72;
          }
          v73 = v18;
          operator delete(v20);
        }
        if (v68 != v71) {
          free(v68);
        }
      }
      return 0;
  }
  while (1)
  {
    LOBYTE(v77[0]) = 0;
    if (!(*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 120))(a2, v77)) {
      break;
    }
    v44 = v77[0];
    v45 = v67[0];
    if (v67[0] >= v67[1])
    {
      if (v67[0] + 1 > v67[1])
      {
        v62 = v77[0];
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v66, &v68, v67[0] + 1, 1);
        v44 = v62;
        v45 = v67[0];
      }
      *((unsigned char *)v66 + v45) = v44;
      ++v67[0];
      if (++v43 >= v81)
      {
LABEL_129:
        v77[0] = 0;
        if ((*(unsigned __int8 (**)(void *, unint64_t *))(*a2 + 72))(a2, v77))
        {
          v51 = v77[0];
          if (v77[0] > HIDWORD(v79))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v77[0], 8);
            v51 = v77[0];
          }
          if (v51)
          {
            v52 = 0;
            while (1)
            {
              v81 = 0;
              if (!(*(unsigned __int8 (**)(void *, size_t *))(*a2 + 80))(a2, &v81)) {
                break;
              }
              v53 = v79;
              if (v79 >= HIDWORD(v79))
              {
                v54 = v81;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, v80, v79 + 1, 8);
                v78[v79] = v54;
                LODWORD(v79) = v79 + 1;
                if (++v52 >= v77[0]) {
                  goto LABEL_139;
                }
              }
              else
              {
                v78[v79] = v81;
                LODWORD(v79) = v53 + 1;
                if (++v52 >= v77[0]) {
                  goto LABEL_139;
                }
              }
            }
          }
          else
          {
LABEL_139:
            if ((*(unsigned __int8 (**)(void *, uint64_t *))(*a2 + 64))(a2, &v65))
            {
              v5 = mlir::VectorType::get((uint64_t)v78, v79, v65, v66, v67[0]);
              v55 = v78;
              if (v78 == (void *)v80) {
                goto LABEL_124;
              }
              goto LABEL_143;
            }
          }
        }
        break;
      }
    }
    else
    {
      *((unsigned char *)v66 + v67[0]) = v77[0];
      v67[0] = v45 + 1;
      if (++v43 >= v81) {
        goto LABEL_129;
      }
    }
  }
LABEL_142:
  v5 = 0;
  v55 = v78;
  if (v78 == (void *)v80) {
    goto LABEL_124;
  }
LABEL_143:
  free(v55);
LABEL_124:
  v50 = v66;
  if (v66 != v23) {
LABEL_146:
  }
    free(v50);
  return v5;
}

uint64_t anonymous namespace'::BuiltinDialectBytecodeInterface::writeAttribute(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  v5 = *(void **)(*(void *)a2 + 136);
  if (v5 == &mlir::detail::TypeIDResolver<mlir::ArrayAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
    Value = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    uint64_t v13 = v12;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v13)
    {
      uint64_t v14 = 8 * v13;
      do
      {
        uint64_t v15 = *Value++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v15);
        v14 -= 8;
      }
      while (v14);
    }
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 10);
    uint64_t v16 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v16);
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseArrayAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 17);
    uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v18);
    uint64_t v19 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v19);
    uint64_t RawData = mlir::DenseArrayAttr::getRawData((mlir::DenseArrayAttr *)__p);
LABEL_36:
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 88))(a3, RawData, v21);
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseIntOrFPElementsAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 18);
    uint64_t v22 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v22);
    uint64_t RawData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__p);
    goto LABEL_36;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseResourceElementsAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 16);
    uint64_t v23 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v23);
    __n128 RawHandle = mlir::DenseResourceElementsAttr::getRawHandle((mlir::DenseResourceElementsAttr *)&v79, (__n128 *)__p);
    (*(void (**)(uint64_t, void **, __n128))(*(void *)a3 + 40))(a3, __p, RawHandle);
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DenseStringElementsAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 19);
    uint64_t v25 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v25);
    unsigned int isSplat = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)&v79);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, isSplat);
    __p[0] = v79;
    int v27 = mlir::DenseElementsAttr::isSplat((mlir::DenseElementsAttr *)__p);
    RawStringData = (uint64_t *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)__p);
    v30 = RawStringData;
    if (v27)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 80))(a3, *RawStringData, RawStringData[1]);
    }
    else if (v29)
    {
      v37 = &RawStringData[2 * v29];
      do
      {
        uint64_t v38 = *v30;
        uint64_t v39 = v30[1];
        v30 += 2;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v38, v39);
      }
      while (v30 != v37);
    }
    return 1;
  }
  if (v5 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 1);
    v31 = (long long *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v79);
    uint64_t v33 = v32;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v33)
    {
      uint64_t v34 = 16 * v33;
      do
      {
        long long v35 = *v31++;
        *(_OWORD *)__p = v35;
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)__p);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, CallableRegion);
        (*(void (**)(uint64_t, void *))(*(void *)a3 + 16))(a3, __p[1]);
        v34 -= 16;
      }
      while (v34);
    }
    return 1;
  }
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    unint64_t v6 = 0x1E8EB8000;
    if (v71)
    {
      __p[0] = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DistinctAttr]";
      __p[1] = (void *)68;
      v72 = (void *)llvm::StringRef::find((uint64_t *)__p, "DesiredTypeName = ", 0x12uLL, 0);
      if (__p[1] >= v72) {
        v73 = v72;
      }
      else {
        v73 = __p[1];
      }
      v74 = (char *)__p[0] + (unint64_t)v73;
      v75 = (char *)((char *)__p[1] - (char *)v73);
      if ((void *)((char *)__p[1] - (char *)v73) >= (void *)0x12) {
        uint64_t v76 = 18;
      }
      else {
        uint64_t v76 = (char *)__p[1] - (char *)v73;
      }
      unint64_t v77 = (unint64_t)&v75[-v76];
      if (v77 >= v77 - 1) {
        uint64_t v78 = v77 - 1;
      }
      else {
        uint64_t v78 = v77;
      }
      mlir::detail::TypeIDResolver<mlir::DistinctAttr,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v74[v76], v78);
      unint64_t v6 = 0x1E8EB8000;
    }
  }
  if (v5 == *(void **)(v6 + 1888))
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 21);
    uint64_t LHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    goto LABEL_33;
  }
  v7 = *(void **)(*(void *)a2 + 136);
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 11);
    uint64_t v40 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v40);
    unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)__p);
    (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, Position);
    uint64_t Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, Column);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    v8 = a2;
  }
  else {
    v8 = 0;
  }
  __p[0] = v8;
  if (v8)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    if (v9)
    {
      v7 = *(void **)(*(void *)a2 + 136);
      goto LABEL_17;
    }
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 4);
    uint64_t LHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
LABEL_33:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, LHS);
    return 1;
  }
LABEL_17:
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FloatAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 9);
    uint64_t v43 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v43);
    mlir::FloatAttr::getValue((mlir::FloatAttr *)&v79, (uint64_t)__p);
    v44 = (llvm::APFloatBase *)(*(uint64_t (**)(uint64_t, void **))(*(void *)a3 + 72))(a3, __p);
    v45 = __p[1];
    if (llvm::APFloatBase::PPCDoubleDouble(v44) == v45) {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__p[1]);
    }
    else {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)&__p[1]);
    }
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
  {
    __p[0] = a2;
    if (!mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 12);
      v46 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
      uint64_t v48 = v47;
      (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
      if (v48)
      {
        uint64_t v49 = 8 * v48;
        do
        {
          uint64_t v50 = *v46++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v50);
          v49 -= 8;
        }
        while (v49);
      }
    }
    if (!mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p)) {
      return 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 13);
    v51 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    uint64_t v53 = v52;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v53)
    {
      uint64_t v54 = 8 * v53;
      do
      {
        uint64_t v55 = *v51++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v55);
        v54 -= 8;
      }
      while (v54);
    }
    uint64_t LHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id)
  {
    v79 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 8);
    uint64_t v56 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v79);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v56);
    mlir::IntegerAttr::getValue(&v79, (llvm::APInt *)__p);
    (*(void (**)(uint64_t, void **))(*(void *)a3 + 64))(a3, __p);
    if (LODWORD(__p[1]) >= 0x41 && __p[0]) {
      operator delete[](__p[0]);
    }
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 14);
    uint64_t v57 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v57);
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)__p);
    goto LABEL_33;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::SparseElementsAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 20);
    uint64_t v58 = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v58);
    uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, RHS);
    uint64_t LHS = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)__p);
    goto LABEL_33;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id)
  {
    __p[0] = a2;
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p) + 136) == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 2);
      uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 80))(a3, AttrData, v61);
    }
    if (*(_UNKNOWN **)(*(void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p) + 136) == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id) {
      return 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 3);
    uint64_t v62 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 80))(a3, v62, v63);
    uint64_t v64 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    goto LABEL_78;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 5);
    uint64_t v65 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v65);
    v66 = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)__p);
    uint64_t v68 = v67;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v68)
    {
      uint64_t v69 = 8 * v68;
      do
      {
        uint64_t v70 = *v66++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v70);
        v69 -= 8;
      }
      while (v69);
    }
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::TypeAttr,void>::id)
  {
    __p[0] = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 6);
    uint64_t v64 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)__p);
LABEL_78:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v64);
    return 1;
  }
  if (v7 == &mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 7);
  }
  else
  {
    if (v7 != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
      return 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 15);
  }
  return 1;
}

uint64_t anonymous namespace'::BuiltinDialectBytecodeInterface::writeType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4 = *(void **)(*(void *)a2 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 3);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
  {
    uint64_t v80 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 9);
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
    goto LABEL_21;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 8);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 4);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 5);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 6);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 7);
    return 1;
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id)
  {
    uint64_t v80 = a2;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 2);
    Inputs = (uint64_t *)mlir::FunctionType::getInputs((mlir::FunctionType *)&v80);
    uint64_t v9 = v8;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v9)
    {
      uint64_t v10 = 8 * v9;
      do
      {
        uint64_t v11 = *Inputs++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v11);
        v10 -= 8;
      }
      while (v10);
    }
    Results = (uint64_t *)mlir::FunctionType::getResults((mlir::FunctionType *)&v80);
    uint64_t v14 = v13;
    (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
    if (v14)
    {
      uint64_t v15 = 8 * v14;
      do
      {
        uint64_t v16 = *Results++;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v16);
        v15 -= 8;
      }
      while (v15);
    }
    return 1;
  }
  if (v4 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    if (v4 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id)
    {
      uint64_t v80 = a2;
      (*(void (**)(uint64_t, void))(*(void *)a3 + 48))(a3, 0);
      int Width = mlir::IntegerType::getWidth((mlir::IntegerType *)&v80);
      uint64_t v18 = mlir::IntegerType::getSignedness((mlir::IntegerType *)&v80) | (4 * Width);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, v18);
      return 1;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
    {
      uint64_t v80 = a2;
      if (!mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v80))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 10);
        uint64_t v19 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
        uint64_t v21 = v20;
        (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
        if (v21)
        {
          uint64_t v22 = 8 * v21;
          do
          {
            uint64_t v23 = *v19++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v23);
            v22 -= 8;
          }
          while (v22);
        }
        uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, RHS);
        uint64_t RawStringData = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, RawStringData);
      }
      if (mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v80))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 11);
        uint64_t MemorySpace = mlir::MemRefType::getMemorySpace((mlir::MemRefType *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, MemorySpace);
        int v27 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
        uint64_t v29 = v28;
        (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
        if (v29)
        {
          uint64_t v30 = 8 * v29;
          do
          {
            uint64_t v31 = *v27++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v31);
            v30 -= 8;
          }
          while (v30);
        }
        uint64_t v32 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v32);
        uint64_t v33 = mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v33);
      }
      return 1;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 12);
      return 1;
    }
    if (v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id)
    {
      uint64_t v80 = a2;
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v80))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 13);
        uint64_t v34 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
        uint64_t v36 = v35;
        (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
        if (v36)
        {
          uint64_t v37 = 8 * v36;
          do
          {
            uint64_t v38 = *v34++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v38);
            v37 -= 8;
          }
          while (v37);
        }
        uint64_t v39 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v39);
      }
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v80)) {
        return 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 14);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v80);
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, Values);
      v41 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
      uint64_t v43 = v42;
      (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
      if (v43)
      {
        uint64_t v44 = 8 * v43;
        do
        {
          uint64_t v45 = *v41++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v45);
          v44 -= 8;
        }
        while (v44);
      }
    }
    else
    {
      if (v4 == &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id)
      {
        uint64_t v80 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 15);
        Types = (uint64_t *)mlir::TupleType::getTypes((mlir::TupleType *)&v80);
        uint64_t v48 = v47;
        (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
        if (v48)
        {
          uint64_t v49 = 8 * v48;
          do
          {
            uint64_t v50 = *Types++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v50);
            v49 -= 8;
          }
          while (v49);
        }
        return 1;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
      {
        uint64_t v80 = a2;
        if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80))
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 16);
          uint64_t v51 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v51);
        }
        if (!mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80)) {
          return 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 17);
        uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, LHS);
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
        goto LABEL_21;
      }
      if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
      {
        uint64_t v80 = a2;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 18);
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v80);
        goto LABEL_21;
      }
      if (v4 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
        return 0;
      }
      uint64_t v80 = a2;
      uint64_t v53 = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v80);
      size_t v55 = v54;
      uint64_t v56 = &v53[v54];
      uint64_t v57 = (char *)memchr(v53, 1, v54);
      if (v57) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = v56;
      }
      if (v58 - v53 == v55)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 19);
        v59 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
        uint64_t v61 = v60;
        (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
        if (v61)
        {
          uint64_t v62 = 8 * v61;
          do
          {
            uint64_t v63 = *v59++;
            (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v63);
            v62 -= 8;
          }
          while (v62);
        }
        uint64_t v64 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, v64);
      }
      uint64_t v65 = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v80);
      size_t v67 = v66;
      uint64_t v68 = &v65[v66];
      uint64_t v69 = (char *)memchr(v65, 1, v66);
      if (v69) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = v68;
      }
      if (v70 - v65 == v67) {
        return 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 20);
      int v71 = (unsigned __int8 *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v80);
      uint64_t v73 = v72;
      (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
      for (; v73; --v73)
      {
        unsigned int v74 = *v71++;
        (*(void (**)(uint64_t, void))(*(void *)a3 + 96))(a3, v74);
      }
      v75 = (uint64_t *)mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v80);
      uint64_t v77 = v76;
      (*(void (**)(uint64_t))(*(void *)a3 + 48))(a3);
      if (v77)
      {
        uint64_t v78 = 8 * v77;
        do
        {
          uint64_t v79 = *v75++;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 56))(a3, v79);
          v78 -= 8;
        }
        while (v78);
      }
    }
    uint64_t Value = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v80);
LABEL_21:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, Value);
    return 1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 48))(a3, 1);
  return 1;
}

void mlir::BytecodeDialectInterface::readVersion(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = "Dialect does not support versioning";
  __int16 v12 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, const char **))(*(void *)a1 + 16))(v13, a1, &v11);
  if (v13[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v13);
  }
  if (v20)
  {
    v3 = (void **)__p;
    if (__p)
    {
      v4 = v19;
      v5 = __p;
      if (v19 != __p)
      {
        do
          v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
        while (v4 != v3);
        v5 = __p;
      }
      uint64_t v19 = v3;
      operator delete(v5);
    }
    unint64_t v6 = v16;
    if (v16)
    {
      v7 = v17;
      uint64_t v8 = v16;
      if (v17 != v16)
      {
        do
        {
          uint64_t v10 = (void *)*--v7;
          uint64_t v9 = v10;
          void *v7 = 0;
          if (v10) {
            operator delete[](v9);
          }
        }
        while (v7 != v6);
        uint64_t v8 = v16;
      }
      v17 = v6;
      operator delete(v8);
    }
    if (v14 != &v15) {
      free(v14);
    }
  }
  *a2 = 0;
}

uint64_t mlir::BytecodeDialectInterface::upgradeFromVersion()
{
  return 1;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::Attribute,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::Attribute>(llvm::SmallVectorImpl<mlir::Attribute> &)::{lambda(mlir::Attribute&)#1}>(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v11 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v11))
  {
    unint64_t v5 = v11;
    if (v11 > *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
      unint64_t v5 = v11;
    }
    if (!v5) {
      return 1;
    }
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v10 = 0;
      if (!(*(unsigned __int8 (**)(void, uint64_t *))(*(void *)*a3 + 48))(*a3, &v10)) {
        break;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        uint64_t v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
        if (++v6 >= v11) {
          return 1;
        }
      }
      else
      {
        *(void *)(*(void *)a2 + 8 * v7) = v10;
        *(_DWORD *)(a2 + 8) = v7 + 1;
        if (++v6 >= v11) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::FlatSymbolRefAttr,mlir::LogicalResult mlir::DialectBytecodeReader::readAttributes<mlir::FlatSymbolRefAttr>(llvm::SmallVectorImpl<mlir::FlatSymbolRefAttr> &)::{lambda(mlir::FlatSymbolRefAttr&)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v11 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v11)) {
    return 0;
  }
  unint64_t v5 = v11;
  if (v11 > *(unsigned int *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
    unint64_t v5 = v11;
  }
  if (v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v10 = 0;
      if (!mlir::DialectBytecodeReader::readAttribute<mlir::FlatSymbolRefAttr>(*a3, &v10)) {
        break;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        uint64_t v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(void *)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v8;
      }
      else
      {
        *(void *)(*(void *)a2 + 8 * v7) = v10;
      }
      ++*(_DWORD *)(a2 + 8);
      if (++v6 >= v11) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

void std::__optional_storage_base<llvm::APFloat,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<llvm::APFloat,false>>(unsigned char *a1, uint64_t a2)
{
  if (a1[32] == *(unsigned char *)(a2 + 32))
  {
    if (a1[32])
    {
      v3 = (llvm::APFloatBase *)(a1 + 8);
      v4 = (llvm::APFloatBase *)(a2 + 8);
      llvm::APFloat::Storage::operator=(v3, v4);
    }
  }
  else if (a1[32])
  {
    unint64_t v5 = (void *)*((void *)a1 + 1);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v5)
    {
      llvm::detail::DoubleAPFloat::~DoubleAPFloat((llvm::detail::DoubleAPFloat *)(a1 + 8));
      a1[32] = 0;
    }
    else
    {
      llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(a1 + 8));
      a1[32] = 0;
    }
  }
  else
  {
    uint64_t v6 = (void *)(a2 + 8);
    uint64_t v7 = *(void **)(a2 + 8);
    if (llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v7) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)a1 + 1, v6);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)(a1 + 8), (uint64_t)v6);
    }
    a1[32] = 1;
  }
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::LocationAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::LocationAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::LocationAttr]";
  unint64_t v41 = 68;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        char v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            char v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            char v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    int v27 = v50;
    if (v50)
    {
      uint64_t v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *uint64_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readType<mlir::ShapedType>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 64))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v39 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4) {
      return 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    uint64_t v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        uint64_t v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
  unint64_t v41 = 66;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        char v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        uint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            uint64_t v21 = (char *)v46;
            char v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            char v20 = &v40;
            uint64_t v21 = (char *)v46;
          }
        }
        uint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)uint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    int v27 = v50;
    if (v50)
    {
      uint64_t v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          uint64_t v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *uint64_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

void mlir::DialectBytecodeReader::readResourceHandle<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 128))(&v32);
  if (!v34)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  uint64_t v4 = *((void *)&v32 + 1);
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v29 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v29;
    if (v20)
    {
      uint64_t v38 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>]";
      unint64_t v39 = 103;
      unint64_t v21 = llvm::StringRef::find((uint64_t *)&v38, "DesiredTypeName = ", 0x12uLL, 0);
      if (v39 >= v21) {
        unint64_t v22 = v21;
      }
      else {
        unint64_t v22 = v39;
      }
      long long v23 = &v38[v22];
      unint64_t v24 = v39 - v22;
      if (v39 - v22 >= 0x12) {
        uint64_t v25 = 18;
      }
      else {
        uint64_t v25 = v39 - v22;
      }
      unint64_t v26 = v24 - v25;
      if (v26 >= v26 - 1) {
        uint64_t v27 = v26 - 1;
      }
      else {
        uint64_t v27 = v26;
      }
      mlir::detail::TypeIDResolver<mlir::DialectResourceBlobHandle<mlir::BuiltinDialect>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v23[v25], v27);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v29;
    }
  }
  if (v4 == v5[414])
  {
    *(_OWORD *)a2 = v32;
    *(void *)(a2 + 16) = v33;
    *(unsigned char *)(a2 + 24) = 1;
    return;
  }
  __int16 v31 = 257;
  (*(void (**)(const char **__return_ptr, uint64_t, char *))(*(void *)a1 + 16))(&v38, a1, v30);
  if (!v38)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (!v48) {
      return;
    }
    goto LABEL_13;
  }
  int v35 = 3;
  int64_t v36 = "provided resource handle differs from the expected resource type";
  uint64_t v37 = 64;
  uint64_t v6 = &v35;
  uint64_t v7 = (char *)v40;
  if (v41 >= v42)
  {
    unint64_t v19 = v41 + 1;
    if (v40 <= &v35 && (char *)v40 + 24 * v41 > (char *)&v35)
    {
      int64_t v28 = (char *)&v35 - (unsigned char *)v40;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v19, 24);
      uint64_t v7 = (char *)v40;
      uint64_t v6 = (int *)((char *)v40 + v28);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, v43, v19, 24);
      uint64_t v6 = &v35;
      uint64_t v7 = (char *)v40;
    }
  }
  uint64_t v8 = &v7[24 * v41];
  long long v9 = *(_OWORD *)v6;
  *((void *)v8 + 2) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  ++v41;
  uint64_t v10 = v38;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  if (v10) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v38);
  }
  if (v48)
  {
LABEL_13:
    long long v11 = (void **)__p;
    if (__p)
    {
      unint64_t v12 = v47;
      unint64_t v13 = __p;
      if (v47 != __p)
      {
        do
          unint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        unint64_t v13 = __p;
      }
      unsigned int v47 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v44;
    if (v44)
    {
      unint64_t v15 = v45;
      uint64_t v16 = v44;
      if (v45 != v44)
      {
        do
        {
          uint64_t v18 = (void *)*--v15;
          v17 = v18;
          *unint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v44;
      }
      uint64_t v45 = v14;
      operator delete(v16);
    }
    if (v40 != v43) {
      free(v40);
    }
  }
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::DenseIntElementsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::DenseIntElementsAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    long long v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        long long v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        long long v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DenseIntElementsAttr]";
  unint64_t v41 = 76;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        int v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v21 = (char *)v46;
            int v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            int v20 = &v40;
            unint64_t v21 = (char *)v46;
          }
        }
        unint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      unint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unint64_t v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v50;
    if (v50)
    {
      int64_t v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          __int16 v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *int64_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::DenseElementsAttr>(uint64_t a1, uint64_t *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::DenseElementsAttr::classof(v39)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v5;
  if (v5) {
    return 1;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    long long v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        long long v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        long long v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::DenseElementsAttr]";
  unint64_t v41 = 73;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        int v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, v39);
        unint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v21 = (char *)v46;
            int v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            int v20 = &v40;
            unint64_t v21 = (char *)v46;
          }
        }
        unint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      unint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unint64_t v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v50;
    if (v50)
    {
      int64_t v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          __int16 v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *int64_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::DialectBytecodeReader::readList<mlir::Type,mlir::LogicalResult mlir::DialectBytecodeReader::readTypes<mlir::Type>(llvm::SmallVectorImpl<mlir::Type> &)::{lambda(mlir::Type&)#1}>(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v11 = 0;
  if ((*(unsigned __int8 (**)(uint64_t, unint64_t *))(*(void *)a1 + 72))(a1, &v11))
  {
    unint64_t v5 = v11;
    if (v11 > *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v11, 8);
      unint64_t v5 = v11;
    }
    if (!v5) {
      return 1;
    }
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v10 = 0;
      if (!(*(unsigned __int8 (**)(void, uint64_t *))(*(void *)*a3 + 64))(*a3, &v10)) {
        break;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(_DWORD *)(a2 + 12))
      {
        uint64_t v8 = v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v7 + 1, 8);
        *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8))++) = v8;
        if (++v6 >= v11) {
          return 1;
        }
      }
      else
      {
        *(void *)(*(void *)a2 + 8 * v7) = v10;
        *(_DWORD *)(a2 + 8) = v7 + 1;
        if (++v6 >= v11) {
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t mlir::DialectBytecodeReader::readAttribute<mlir::MemRefLayoutAttrInterface>(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  if (!(*(unsigned __int8 (**)(uint64_t, void **))(*(void *)a1 + 48))(a1, &v39)) {
    return 0;
  }
  uint64_t v4 = v39;
  if (mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v39 + 8))
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v4 + 8);
    *a2 = v4;
    a2[1] = v5;
    if (v4) {
      return 1;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v38[16] = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(void *)a1 + 16))(&v44, a1, v38);
  if (v44)
  {
    LODWORD(v40) = 3;
    unint64_t v41 = (unint64_t)"expected ";
    uint64_t v42 = 9;
    uint64_t v8 = &v40;
    long long v9 = (char *)v46;
    if (v47 >= v48)
    {
      unint64_t v32 = v47 + 1;
      if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
      {
        int64_t v35 = (char *)&v40 - (unsigned char *)v46;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        long long v9 = (char *)v46;
        uint64_t v8 = (const void ***)((char *)v46 + v35);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v32, 24);
        uint64_t v8 = &v40;
        long long v9 = (char *)v46;
      }
    }
    uint64_t v10 = &v9[24 * v47];
    long long v11 = *(_OWORD *)v8;
    *((void *)v10 + 2) = v8[2];
    *(_OWORD *)uint64_t v10 = v11;
    ++v47;
  }
  uint64_t v40 = (const void **)"StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemRefLayoutAttrInterface]";
  unint64_t v41 = 81;
  unint64_t v12 = llvm::StringRef::find((uint64_t *)&v40, "DesiredTypeName = ", 0x12uLL, 0);
  if (v44)
  {
    if (v41 >= v12) {
      unint64_t v13 = v12;
    }
    else {
      unint64_t v13 = v41;
    }
    uint64_t v14 = 18;
    if (v41 - v13 < 0x12) {
      uint64_t v14 = v41 - v13;
    }
    unint64_t v15 = v41 - v13 - v14;
    if (v15 >= v15 - 1) {
      --v15;
    }
    __int16 v43 = 261;
    uint64_t v40 = (const void **)((char *)v40 + v13 + v14);
    unint64_t v41 = v15;
    mlir::Diagnostic::operator<<((uint64_t)&v45, &v40);
    if (v44)
    {
      LODWORD(v40) = 3;
      unint64_t v41 = (unint64_t)", but got: ";
      uint64_t v42 = 11;
      uint64_t v16 = &v40;
      v17 = (char *)v46;
      if (v47 >= v48)
      {
        unint64_t v33 = v47 + 1;
        if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v46;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          v17 = (char *)v46;
          uint64_t v16 = (const void ***)((char *)v46 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v33, 24);
          uint64_t v16 = &v40;
          v17 = (char *)v46;
        }
      }
      uint64_t v18 = &v17[24 * v47];
      long long v19 = *(_OWORD *)v16;
      *((void *)v18 + 2) = v16[2];
      *(_OWORD *)uint64_t v18 = v19;
      ++v47;
      if (v44)
      {
        int v20 = &v40;
        mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v40, (uint64_t)v39);
        unint64_t v21 = (char *)v46;
        if (v47 >= v48)
        {
          unint64_t v34 = v47 + 1;
          if (v46 <= &v40 && (char *)v46 + 24 * v47 > (char *)&v40)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v46;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            unint64_t v21 = (char *)v46;
            int v20 = (const void ***)((char *)v46 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, v49, v34, 24);
            int v20 = &v40;
            unint64_t v21 = (char *)v46;
          }
        }
        unint64_t v22 = &v21[24 * v47];
        long long v23 = *(_OWORD *)v20;
        *((void *)v22 + 2) = v20[2];
        *(_OWORD *)unint64_t v22 = v23;
        ++v47;
      }
    }
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v54)
  {
    unint64_t v24 = (void **)__p;
    if (__p)
    {
      uint64_t v25 = v53;
      unint64_t v26 = __p;
      if (v53 != __p)
      {
        do
          uint64_t v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unint64_t v26 = __p;
      }
      uint64_t v53 = v24;
      operator delete(v26);
    }
    uint64_t v27 = v50;
    if (v50)
    {
      int64_t v28 = v51;
      uint64_t v29 = v50;
      if (v51 != v50)
      {
        do
        {
          __int16 v31 = (void *)*--v28;
          uint64_t v30 = v31;
          *int64_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        uint64_t v29 = v50;
      }
      uint64_t v51 = v27;
      operator delete(v29);
    }
    if (v46 != v49) {
      free(v46);
    }
  }
  return v6;
}

uint64_t mlir::ComplexType::get(uint64_t a1)
{
  uint64_t v3 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v3);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v4[0] = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  v4[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, &v3);
}

uint64_t mlir::FunctionType::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v9 = a4;
  *((void *)&v9 + 1) = a5;
  uint64_t v8 = a1;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a1);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  v7[1] = &v8;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v10, &v9);
}

uint64_t mlir::MemRefType::getMemorySpace(mlir::MemRefType *this)
{
  return *(void *)(*(void *)this + 48);
}

uint64_t mlir::OpaqueType::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v9[1] = &Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v15[1] = v9;
  uint64_t v13 = v8;
  v14[0] = a2;
  v14[1] = a3;
  unsigned int v6 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v13, (uint64_t)v14);
  v11[0] = &v13;
  v11[1] = v15;
  unint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::OpaqueType::getChecked(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5)
{
  uint64_t v14 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  uint64_t v10 = v14;
  if (!mlir::OpaqueType::verify(a1, a2, v14, a4, a5)) {
    return 0;
  }
  uint64_t v16 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v15[1] = &v16;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v21[1] = v15;
  uint64_t v19 = v10;
  v20[0] = a4;
  v20[1] = a5;
  unsigned int v12 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v19, (uint64_t)v20);
  v17[0] = &v19;
  v17[1] = v21;
  uint64_t v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

uint64_t mlir::RankedTensorType::get(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v11[1] = &Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v18[1] = v11;
  v15[0] = a1;
  v15[1] = a2;
  uint64_t v16 = v10;
  uint64_t v17 = a4;
  unsigned int v8 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)v15, &v16, &v17);
  v13[0] = v15;
  v13[1] = v18;
  uint64_t v14 = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::TupleType::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3)
{
  void v13[2] = *MEMORY[0x1E4F143B8];
  long long v9 = a1;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a1);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v8[1] = &v9;
  v12[0] = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v12[1] = v8;
  v13[0] = a2;
  v13[1] = a3;
  unsigned int v6 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(a2, 0, a2, a3);
  v10[0] = v13;
  v10[1] = v12;
  uint64_t v11 = v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::TupleType::get(mlir::TupleType *this, mlir::MLIRContext *a2)
{
  void v13[2] = *MEMORY[0x1E4F143B8];
  mlir::ValueRange::ValueRange((unint64_t *)&v11, 0, 0);
  uint64_t v7 = this;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(this);
  v6[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v6[1] = &v7;
  v10[0] = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_;
  v10[1] = v6;
  v13[0] = v11;
  v13[1] = v12;
  unsigned int v4 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v11, 0, v11, v12);
  v8[0] = v13;
  v8[1] = v10;
  long long v9 = v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v4, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v8);
}

uint64_t mlir::UnrankedMemRefType::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v11 = a1;
  if (a2)
  {
    uint64_t v3 = *(void **)(*(void *)a2 + 136);
    BOOL v4 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    uint64_t v5 = v3 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a2 : 0;
    uint64_t v16 = v5;
    if (v4)
    {
      mlir::IntegerAttr::getValue(&v16, (llvm::APInt *)&v18);
      int v9 = (int)v19;
      if (v19 >= 0x41)
      {
        if (v9 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v18) >= 0x41)
        {
          if (v18) {
            operator delete[](v18);
          }
          goto LABEL_6;
        }
        uint64_t v10 = *(void *)v18;
        operator delete[](v18);
        if (v10) {
          goto LABEL_6;
        }
      }
      else if (v18)
      {
        goto LABEL_6;
      }
      uint64_t v2 = 0;
    }
  }
LABEL_6:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  v12[1] = &Context;
  uint64_t v18 = _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  uint64_t v19 = v12;
  uint64_t v16 = v11;
  uint64_t v17 = v2;
  unsigned int v7 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v16, &v17);
  v14[0] = &v16;
  v14[1] = &v18;
  unint64_t v15 = &v16;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v15, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v14);
}

uint64_t mlir::UnrankedMemRefType::getChecked(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v17 = a3;
  if (!a4) {
    goto LABEL_6;
  }
  unsigned int v7 = *(void **)(*(void *)a4 + 136);
  BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  uint64_t v9 = v7 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a4 : 0;
  uint64_t v22 = v9;
  if (!v8) {
    goto LABEL_6;
  }
  mlir::IntegerAttr::getValue(&v22, (llvm::APInt *)&v24);
  int v15 = (int)v25;
  if (v25 < 0x41)
  {
    if (v24) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (v15 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v24) < 0x41)
  {
    uint64_t v16 = *(void *)v24;
    operator delete[](v24);
    if (v16) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
  if (v24) {
    operator delete[](v24);
  }
LABEL_6:
  Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
  uint64_t v11 = v17;
  if (!mlir::UnrankedMemRefType::verify(a1, a2, v17, v4)) {
    return 0;
  }
  uint64_t v19 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  v18[1] = &v19;
  unint64_t v24 = _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  uint64_t v25 = v18;
  uint64_t v22 = v11;
  uint64_t v23 = v4;
  unsigned int v13 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v22, &v23);
  v20[0] = &v22;
  v20[1] = &v24;
  unint64_t v21 = &v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, v13, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

uint64_t mlir::UnrankedMemRefType::get(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = a1;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v7);
  if (!a2) {
    return mlir::UnrankedMemRefType::get(v7, 0);
  }
  uint64_t v4 = mlir::IntegerType::get(Context, 0x40u, 0);
  uint64_t v5 = mlir::IntegerAttr::get(v4, a2);
  return mlir::UnrankedMemRefType::get(v7, v5);
}

uint64_t mlir::UnrankedTensorType::get(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v3);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v4[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v4[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v4, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, &v3);
}

uint64_t mlir::VectorType::get(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v25[5] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = a3;
  uint64_t v23 = v25;
  long long v24 = xmmword_1810FE310;
  if (a5)
  {
    uint64_t v7 = a5;
  }
  else if (a2)
  {
    if (a2 >= 0x29)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v23, v25, a2, 1);
      a4 = v23;
      uint64_t v9 = v24;
    }
    else
    {
      uint64_t v9 = 0;
      a4 = v25;
    }
    bzero((char *)a4 + v9, a2);
    uint64_t v7 = v9 + a2;
    *(void *)&long long v24 = v7;
  }
  else
  {
    uint64_t v7 = 0;
    a4 = v25;
  }
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v14);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v15[0] = &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
  v15[1] = &Context;
  v22[0] = _ZN4llvm12function_refIFvPN4mlir6detail17VectorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10VectorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNSB_IbEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v22[1] = v15;
  v19[0] = a1;
  v19[1] = a2;
  uint64_t v20 = v14;
  v21[0] = a4;
  v21[1] = v7;
  unsigned int v11 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>((uint64_t)v19, &v20, (uint64_t)v21);
  v17[0] = v19;
  v17[1] = v22;
  uint64_t v18 = v19;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
  if (v23 != v25) {
    free(v23);
  }
  return ParametricStorageTypeImpl;
}

uint64_t *mlir::Dialect::addTypes<mlir::ComplexType,mlir::Float8E5M2Type,mlir::Float8E4M3FNType,mlir::Float8E5M2FNUZType,mlir::Float8E4M3FNUZType,mlir::Float8E4M3B11FNUZType,mlir::BFloat16Type,mlir::Float16Type,mlir::FloatTF32Type,mlir::Float32Type,mlir::Float64Type,mlir::Float80Type,mlir::Float128Type,mlir::FunctionType,mlir::IndexType,mlir::IntegerType,mlir::MemRefType,mlir::NoneType,mlir::OpaqueType,mlir::RankedTensorType,mlir::TupleType,mlir::UnrankedMemRefType,mlir::UnrankedTensorType,mlir::VectorType>(uint64_t a1)
{
  mlir::Dialect::addType<mlir::ComplexType>(a1);
  mlir::Dialect::addType<mlir::Float8E5M2Type>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3FNType>(a1);
  mlir::Dialect::addType<mlir::Float8E5M2FNUZType>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3FNUZType>(a1);
  mlir::Dialect::addType<mlir::Float8E4M3B11FNUZType>(a1);
  mlir::Dialect::addType<mlir::BFloat16Type>(a1);
  mlir::Dialect::addType<mlir::Float16Type>(a1);
  mlir::Dialect::addType<mlir::FloatTF32Type>(a1);
  mlir::Dialect::addType<mlir::Float32Type>(a1);
  mlir::Dialect::addType<mlir::Float64Type>(a1);
  mlir::Dialect::addType<mlir::Float80Type>(a1);
  mlir::Dialect::addType<mlir::Float128Type>(a1);
  mlir::Dialect::addType<mlir::FunctionType>(a1);
  mlir::Dialect::addType<mlir::IndexType>(a1);
  mlir::Dialect::addType<mlir::IntegerType>(a1);
  mlir::Dialect::addType<mlir::MemRefType>(a1);
  mlir::Dialect::addType<mlir::NoneType>(a1);
  mlir::Dialect::addType<mlir::OpaqueType>(a1);
  mlir::Dialect::addType<mlir::RankedTensorType>(a1);
  mlir::Dialect::addType<mlir::TupleType>(a1);
  mlir::Dialect::addType<mlir::UnrankedMemRefType>(a1);
  mlir::Dialect::addType<mlir::UnrankedTensorType>(a1);

  return mlir::Dialect::addType<mlir::VectorType>(a1);
}

uint64_t mlir::IntegerType::getWidth(mlir::IntegerType *this)
{
  return *(_DWORD *)(*(void *)this + 8) & 0x3FFFFFFF;
}

uint64_t mlir::IntegerType::getSignedness(mlir::IntegerType *this)
{
  return *(_DWORD *)(*(void *)this + 8) >> 30;
}

uint64_t mlir::FloatType::getWidth(mlir::FloatType *this)
{
  v1 = *(void **)(**(void **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id) {
    return 8;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id)
  {
    return 8;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id)
  {
    return 8;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 16;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 32;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    return 64;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id) {
    return 80;
  }
  return 128;
}

void *mlir::FloatType::getFloatSemantics(llvm::APFloatBase *this)
{
  v1 = *(void **)(**(void **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id) {
    return llvm::APFloatBase::Float8E5M2(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id) {
    return llvm::APFloatBase::Float8E4M3FN(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id) {
    return llvm::APFloatBase::Float8E5M2FNUZ(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id) {
    return llvm::APFloatBase::Float8E4M3FNUZ(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id) {
    return llvm::APFloatBase::Float8E4M3B11FNUZ(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id) {
    return llvm::APFloatBase::BFloat(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id) {
    return llvm::APFloatBase::IEEEhalf(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id) {
    return llvm::APFloatBase::FloatTF32(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id) {
    return llvm::APFloatBase::IEEEsingle(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id) {
    return llvm::APFloatBase::IEEEdouble(this);
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id) {
    return llvm::APFloatBase::x87DoubleExtended(this);
  }
  return llvm::APFloatBase::IEEEquad(this);
}

uint64_t mlir::FloatType::getFPMantissaWidth(mlir::FloatType *this)
{
  FloatSemantics = mlir::FloatType::getFloatSemantics(this);

  return llvm::APFloatBase::semanticsPrecision((uint64_t)FloatSemantics);
}

uint64_t mlir::FunctionType::getInputs(mlir::FunctionType *this)
{
  return *(void *)(*(void *)this + 16);
}

uint64_t mlir::FunctionType::getNumResults(mlir::FunctionType *this)
{
  return *(unsigned int *)(*(void *)this + 12);
}

uint64_t mlir::FunctionType::getResults(mlir::FunctionType *this)
{
  return *(void *)(*(void *)this + 16) + 8 * *(unsigned int *)(*(void *)this + 8);
}

uint64_t mlir::FunctionType::clone(mlir::Attribute *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  *(void *)&long long v9 = a4;
  *((void *)&v9 + 1) = a5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext(a1);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v7[0] = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  v7[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v10, &v9);
}

uint64_t mlir::OpaqueType::verify(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, const void **a4, const char *a5)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  uint64_t v68 = a3;
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v68);
  if (mlir::Dialect::isValidNamespace(AttrData, v10))
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v68);
    if (mlir::MLIRContext::allowsUnregisteredDialects(Context)) {
      return 1;
    }
    uint64_t v12 = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v68);
    if (mlir::MLIRContext::getLoadedDialect((uint64_t *)Context, v12, v13)) {
      return 1;
    }
    a1(&v73, a2);
    if (v73)
    {
      LODWORD(v69) = 3;
      uint64_t v71 = 2;
      __int16 v31 = &v69;
      unint64_t v32 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v57 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v64 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v57, 24);
          unint64_t v32 = (char *)v75;
          __int16 v31 = (const void ***)((char *)v75 + v64);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v57, 24);
          __int16 v31 = &v69;
          unint64_t v32 = (char *)v75;
        }
      }
      unint64_t v33 = &v32[24 * v76];
      long long v34 = *(_OWORD *)v31;
      *((void *)v33 + 2) = v31[2];
      *(_OWORD *)unint64_t v33 = v34;
      ++v76;
      if (v73)
      {
        mlir::Diagnostic::operator<<((uint64_t)v74, v68);
        if (v73)
        {
          LODWORD(v69) = 3;
          uint64_t v70 = "<\"";
          uint64_t v71 = 2;
          int64_t v35 = &v69;
          int64_t v36 = (char *)v75;
          if (v76 >= v77)
          {
            unint64_t v58 = v76 + 1;
            if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
            {
              int64_t v65 = (char *)&v69 - (unsigned char *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
              int64_t v36 = (char *)v75;
              int64_t v35 = (const void ***)((char *)v75 + v65);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v58, 24);
              int64_t v35 = &v69;
              int64_t v36 = (char *)v75;
            }
          }
          int64_t v37 = &v36[24 * v76];
          long long v38 = *(_OWORD *)v35;
          *((void *)v37 + 2) = v35[2];
          *(_OWORD *)int64_t v37 = v38;
          ++v76;
          if (v73)
          {
            __int16 v72 = 261;
            uint64_t v69 = a4;
            uint64_t v70 = a5;
            mlir::Diagnostic::operator<<((uint64_t)v74, &v69);
            if (v73)
            {
              LODWORD(v69) = 3;
              uint64_t v70 = "\">";
              uint64_t v71 = 2;
              uint64_t v39 = &v69;
              uint64_t v40 = (char *)v75;
              if (v76 >= v77)
              {
                unint64_t v59 = v76 + 1;
                if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
                {
                  int64_t v66 = (char *)&v69 - (unsigned char *)v75;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v59, 24);
                  uint64_t v40 = (char *)v75;
                  uint64_t v39 = (const void ***)((char *)v75 + v66);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v59, 24);
                  uint64_t v39 = &v69;
                  uint64_t v40 = (char *)v75;
                }
              }
              unint64_t v41 = &v40[24 * v76];
              long long v42 = *(_OWORD *)v39;
              *((void *)v41 + 2) = v39[2];
              *(_OWORD *)unint64_t v41 = v42;
              uint64_t v43 = ++v76;
              if (v73)
              {
                LODWORD(v69) = 3;
                      "ts() on the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
                uint64_t v71 = 185;
                uint64_t v44 = &v69;
                uint64_t v45 = (char *)v75;
                if (v43 >= v77)
                {
                  unint64_t v60 = v43 + 1;
                  BOOL v61 = (char *)v75 + 24 * v43 > (char *)&v69;
                  if (v75 <= &v69 && v61)
                  {
                    int64_t v67 = (char *)&v69 - (unsigned char *)v75;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v60, 24);
                    uint64_t v45 = (char *)v75;
                    uint64_t v44 = (const void ***)((char *)v75 + v67);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v60, 24);
                    uint64_t v44 = &v69;
                    uint64_t v45 = (char *)v75;
                  }
                }
                v46 = &v45[24 * v76];
                long long v47 = *(_OWORD *)v44;
                *((void *)v46 + 2) = v44[2];
                *(_OWORD *)v46 = v47;
                ++v76;
              }
            }
          }
        }
      }
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    if (v83)
    {
      unsigned int v48 = (void **)__p;
      if (__p)
      {
        uint64_t v49 = v82;
        uint64_t v50 = __p;
        if (v82 != __p)
        {
          do
            uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
          while (v49 != v48);
          uint64_t v50 = __p;
        }
        v82 = v48;
        operator delete(v50);
      }
      unint64_t v26 = v79;
      if (!v79) {
        goto LABEL_52;
      }
      uint64_t v51 = v80;
      int64_t v28 = v79;
      if (v80 == v79)
      {
LABEL_51:
        uint64_t v80 = v26;
        operator delete(v28);
LABEL_52:
        if (v75 != v78) {
          free(v75);
        }
        return v14;
      }
      do
      {
        uint64_t v53 = (void *)*--v51;
        uint64_t v52 = v53;
        void *v51 = 0;
        if (v53) {
          operator delete[](v52);
        }
      }
      while (v51 != v26);
LABEL_50:
      int64_t v28 = v79;
      goto LABEL_51;
    }
  }
  else
  {
    a1(&v73, a2);
    if (v73)
    {
      LODWORD(v69) = 3;
      uint64_t v70 = "invalid dialect namespace '";
      uint64_t v71 = 27;
      int v15 = &v69;
      uint64_t v16 = (char *)v75;
      if (v76 >= v77)
      {
        unint64_t v55 = v76 + 1;
        if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
        {
          int64_t v62 = (char *)&v69 - (unsigned char *)v75;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
          uint64_t v16 = (char *)v75;
          int v15 = (const void ***)((char *)v75 + v62);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v55, 24);
          int v15 = &v69;
          uint64_t v16 = (char *)v75;
        }
      }
      uint64_t v17 = &v16[24 * v76];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = v15[2];
      *(_OWORD *)uint64_t v17 = v18;
      ++v76;
      if (v73)
      {
        mlir::Diagnostic::operator<<((uint64_t)v74, v68);
        if (v73)
        {
          LODWORD(v69) = 3;
          uint64_t v70 = "'";
          uint64_t v71 = 1;
          uint64_t v19 = &v69;
          uint64_t v20 = (char *)v75;
          if (v76 >= v77)
          {
            unint64_t v56 = v76 + 1;
            if (v75 <= &v69 && (char *)v75 + 24 * v76 > (char *)&v69)
            {
              int64_t v63 = (char *)&v69 - (unsigned char *)v75;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              uint64_t v20 = (char *)v75;
              uint64_t v19 = (const void ***)((char *)v75 + v63);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, v78, v56, 24);
              uint64_t v19 = &v69;
              uint64_t v20 = (char *)v75;
            }
          }
          unint64_t v21 = &v20[24 * v76];
          long long v22 = *(_OWORD *)v19;
          *((void *)v21 + 2) = v19[2];
          *(_OWORD *)unint64_t v21 = v22;
          ++v76;
        }
      }
    }
    uint64_t v14 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v73);
    if (v73) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v73);
    }
    if (v83)
    {
      uint64_t v23 = (void **)__p;
      if (__p)
      {
        long long v24 = v82;
        uint64_t v25 = __p;
        if (v82 != __p)
        {
          do
            long long v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          uint64_t v25 = __p;
        }
        v82 = v23;
        operator delete(v25);
      }
      unint64_t v26 = v79;
      if (!v79) {
        goto LABEL_52;
      }
      uint64_t v27 = v80;
      int64_t v28 = v79;
      if (v80 == v79) {
        goto LABEL_51;
      }
      do
      {
        uint64_t v30 = (void *)*--v27;
        uint64_t v29 = v30;
        *uint64_t v27 = 0;
        if (v30) {
          operator delete[](v29);
        }
      }
      while (v27 != v26);
      goto LABEL_50;
    }
  }
  return v14;
}

uint64_t mlir::TensorType::getElementType(mlir::TensorType *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    return *(void *)(v1 + 24);
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return *(void *)(v1 + 8);
  }
  return 0;
}

BOOL mlir::TensorType::hasRank(mlir::TensorType *this)
{
  return *(void *)(**(void **)this + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::TensorType::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a1;
  if (*(_UNKNOWN **)(**(void **)a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
  {
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v5 = *(void **)a2;
      uint64_t v4 = *(mlir::MLIRContext ***)(a2 + 8);
      uint64_t v6 = v3[4];
      uint64_t v15 = a3;
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
      TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
      uint64_t v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      p_uint64_t Context = &Context;
      uint64_t v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
      unint64_t v26 = &v16;
      unint64_t v21 = v5;
      long long v22 = v4;
    }
    else
    {
      uint64_t v10 = (void *)v3[1];
      uint64_t v11 = (mlir::MLIRContext **)v3[2];
      uint64_t v6 = v3[4];
      uint64_t v15 = a3;
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
      TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
      uint64_t v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      p_uint64_t Context = &Context;
      uint64_t v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
      unint64_t v26 = &v16;
      unint64_t v21 = v10;
      long long v22 = v11;
    }
    uint64_t v23 = v15;
    uint64_t v24 = v6;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    BOOL v8 = *(void **)a2;
    long long v9 = *(mlir::MLIRContext ***)(a2 + 8);
    uint64_t v15 = a3;
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v15);
    TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
    uint64_t v16 = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
    p_uint64_t Context = &Context;
    uint64_t v25 = (mlir::MLIRContext *)_ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
    unint64_t v26 = &v16;
    unint64_t v21 = v8;
    long long v22 = v9;
    uint64_t v23 = v15;
    uint64_t v24 = 0;
LABEL_8:
    unsigned int v12 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)&v21, &v23, &v24);
    v19[0] = (uint64_t)&v21;
    v19[1] = (uint64_t)&v25;
    uint64_t v20 = &v21;
    return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v20, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v19);
  }
  v19[0] = a3;
  uint64_t v25 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)v19);
  uint64_t v14 = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v25);
  unint64_t v21 = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  long long v22 = &v25;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(v14, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)&v21, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, v19);
}

uint64_t mlir::TensorType::clone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = a2;
  v6[1] = a3;
  char v7 = 1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void **)(**(void **)a1 + 136);
  if (v4 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    return mlir::TensorType::cloneWith(a1, (uint64_t)v6, *(void *)(v3 + 24));
  }
  if (v4 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
    return mlir::TensorType::cloneWith(a1, (uint64_t)v6, *(void *)(v3 + 8));
  }
  return mlir::TensorType::cloneWith(a1, (uint64_t)v6, 0);
}

BOOL mlir::TensorType::isValidElementType(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(void **)(*a1 + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id) {
    return 1;
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v2 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  BOOL result = 1;
  if (v2 != &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
    && v2 != &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id)
  {
    return *(void *)(*(void *)v1 + 24) != (void)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id;
  }
  return result;
}

uint64_t mlir::BaseMemRefType::getElementType(mlir::BaseMemRefType *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    return *(void *)(v1 + 24);
  }
  if (v2 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) {
    return *(void *)(v1 + 8);
  }
  return 0;
}

BOOL mlir::BaseMemRefType::hasRank(mlir::BaseMemRefType *this)
{
  return *(void *)(**(void **)this + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::BaseMemRefType::cloneWith(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  if (*(_UNKNOWN **)(**a1 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    uint64_t v4 = (void **)(v3 + 1);
    uint64_t v5 = (void *)v3[4];
    uint64_t v6 = v3[5];
    uint64_t v7 = v3[6];
    if (*(unsigned char *)(a2 + 16)) {
      BOOL v8 = (mlir::AffineMap **)(a2 + 8);
    }
    else {
      BOOL v8 = (mlir::AffineMap **)(v3 + 2);
    }
    if (*(unsigned char *)(a2 + 16)) {
      uint64_t v4 = (void **)a2;
    }
    long long v9 = *v4;
    uint64_t v10 = *v8;
    return mlir::MemRefType::get(v9, v10, a3, v5, v6, v7);
  }
  if (*(unsigned char *)(a2 + 16))
  {
    long long v9 = *(void **)a2;
    uint64_t v10 = *(mlir::AffineMap **)(a2 + 8);
    uint64_t v7 = v3[2];
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    return mlir::MemRefType::get(v9, v10, a3, v5, v6, v7);
  }
  return mlir::UnrankedMemRefType::get(a3, v3[2]);
}

uint64_t mlir::BaseMemRefType::getMemorySpace(mlir::BaseMemRefType *this)
{
  uint64_t v1 = 16;
  if (*(_UNKNOWN **)(**(void **)this + 136) == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id) {
    uint64_t v1 = 48;
  }
  return *(void *)(*(void *)this + v1);
}

char *mlir::computeRankReductionMask@<X0>(char *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v30[2] = *(llvm **)MEMORY[0x1E4F143B8];
  uint64_t __b = 1;
  v30[0] = (llvm *)-1;
  v30[1] = (llvm *)-1;
  int v28 = 0;
  if (a2)
  {
    long long v9 = result;
    uint64_t v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    while (1)
    {
      if (a4 > v11 && *(void *)&v9[8 * v10] == *(void *)(a3 + 8 * v11))
      {
        ++v11;
        goto LABEL_4;
      }
      if (__b)
      {
        int v13 = 4;
        uint64_t v14 = v30;
      }
      else
      {
        int v13 = (int)v30[1];
        if (!LODWORD(v30[1]))
        {
          uint64_t v19 = 0;
          goto LABEL_15;
        }
        uint64_t v14 = (llvm **)v30[0];
      }
      int v15 = v13 - 1;
      unsigned int v16 = v15 & (37 * v12);
      uint64_t v17 = (char *)v14 + 4 * v16;
      int v18 = *(_DWORD *)v17;
      if (v12 == *(_DWORD *)v17) {
        goto LABEL_12;
      }
      uint64_t v20 = 0;
      int v21 = 1;
      while (v18 != -1)
      {
        if (v20) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v18 == -2;
        }
        if (v22) {
          uint64_t v20 = v17;
        }
        unsigned int v23 = v16 + v21++;
        unsigned int v16 = v23 & v15;
        uint64_t v17 = (char *)v14 + 4 * v16;
        int v18 = *(_DWORD *)v17;
        if (v12 == *(_DWORD *)v17) {
          goto LABEL_12;
        }
      }
      if (v20) {
        uint64_t v19 = v20;
      }
      else {
        uint64_t v19 = v17;
      }
LABEL_15:
      BOOL result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(&__b, v19, &v28);
      unsigned int v12 = v28;
LABEL_12:
      if (*(void *)&v9[8 * v12] != 1) {
        goto LABEL_32;
      }
LABEL_4:
      int v28 = ++v12;
      uint64_t v10 = v12;
      if (a2 <= v12) {
        goto LABEL_29;
      }
    }
  }
  unsigned int v11 = 0;
LABEL_29:
  if (a4 != v11)
  {
LABEL_32:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 24) = 0;
    if (__b) {
      return result;
    }
LABEL_33:
    llvm::deallocate_buffer(v30[0], (void *)(4 * LODWORD(v30[1])));
  }
  *(void *)(a5 + 16) = -1;
  int v24 = __b;
  int v25 = HIDWORD(__b);
  unsigned int v26 = __b & 1;
  *(_DWORD *)a5 = __b | 1;
  *(_DWORD *)(a5 + 4) = v25;
  uint64_t __b = v26;
  if (v24)
  {
    *(llvm **)(a5 + 8) = v30[0];
    v30[0] = (llvm *)-1;
    int v27 = HIDWORD(v30[1]);
    *(_DWORD *)(a5 + 16) = v30[1];
    LODWORD(v30[1]) = -1;
    if (v27 != -1) {
      *(_DWORD *)(a5 + 20) = v27;
    }
    HIDWORD(v30[1]) = -1;
  }
  else
  {
    *(_OWORD *)(a5 + 8) = *(_OWORD *)v30;
    LODWORD(__b) = 1;
    v30[0] = (llvm *)-1;
    v30[1] = (llvm *)-1;
    *(_DWORD *)a5 = v24 & 0xFFFFFFFE;
  }
  *(unsigned char *)(a5 + 24) = 1;
  if ((__b & 1) == 0) {
    goto LABEL_33;
  }
  return result;
}

uint64_t mlir::isRankReducedType(void *a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 == a3) {
    return 0;
  }
  if (a1)
  {
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8);
    unsigned int v16 = a1;
    uint64_t v17 = v5;
    if (a3)
    {
LABEL_4:
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a3 + 8);
      goto LABEL_8;
    }
  }
  else
  {
    unsigned int v16 = 0;
    uint64_t v17 = 0;
    if (a3) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = 0;
LABEL_8:
  v15[0] = a3;
  v15[1] = v6;
  ArgAttrsAttr = (char *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v16);
  unint64_t v10 = v9;
  uint64_t v11 = mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v15);
  if (v12 > v10) {
    return 1;
  }
  mlir::computeRankReductionMask(ArgAttrsAttr, v10, v11, v12, (uint64_t)v18);
  if (!v21) {
    return 2;
  }
  uint64_t OperandRange = mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v16);
  if (OperandRange == mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)v15)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 3;
  }
  if ((v18[0] & 1) == 0) {
    llvm::deallocate_buffer(v19, (void *)(4 * v20));
  }
  return v7;
}

uint64_t mlir::MemRefType::get(void *a1, mlir::AffineMap *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v23 = a3;
  if (a4)
  {
    unint64_t v10 = a4;
    if (!a6) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
    unint64_t MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a2, Context, v12);
    uint64_t v14 = (void *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
    unint64_t v10 = v14;
    if (v14)
    {
      a5 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v14 + 8);
      if (!v6) {
        goto LABEL_12;
      }
    }
    else
    {
      a5 = 0;
      if (!v6) {
        goto LABEL_12;
      }
    }
  }
  int v15 = *(void **)(*(void *)v6 + 136);
  BOOL v16 = v15 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v15 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v17 = v6;
  }
  else {
    uint64_t v17 = 0;
  }
  v33[0] = v17;
  if (v16)
  {
    mlir::IntegerAttr::getValue(v33, (llvm::APInt *)&__p);
    int v21 = (int)v29;
    if (v29 >= 0x41)
    {
      if (v21 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
      {
        if (__p) {
          operator delete[](__p);
        }
        goto LABEL_12;
      }
      uint64_t v22 = *(void *)__p;
      operator delete[](__p);
      if (v22) {
        goto LABEL_12;
      }
    }
    else if (__p)
    {
      goto LABEL_12;
    }
    uint64_t v6 = 0;
  }
LABEL_12:
  int v25 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v25);
  v24[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v24[1] = &v25;
  v33[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v33[1] = v24;
  __p = a1;
  uint64_t v29 = a2;
  uint64_t v30 = v23;
  v31[0] = v10;
  v31[1] = a5;
  uint64_t v32 = v6;
  unsigned int v19 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)&__p, &v30, v31, &v32);
  v26[0] = &__p;
  v26[1] = v33;
  p_p = &__p;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v19, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&p_p, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v26);
}

uint64_t mlir::MemRefType::getChecked(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, mlir::AffineMap *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a8;
  uint64_t v26 = a5;
  if (a6)
  {
    uint64_t v14 = a6;
    if (!a8) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
    unint64_t MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a4, Context, v16);
    int v18 = (void *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
    uint64_t v14 = (uint64_t)v18;
    if (v18)
    {
      a7 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
      if (!v8) {
        goto LABEL_12;
      }
    }
    else
    {
      a7 = 0;
      if (!v8) {
        goto LABEL_12;
      }
    }
  }
  unsigned int v19 = *(void **)(*(void *)v8 + 136);
  BOOL v20 = v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
  if (v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
    uint64_t v21 = v8;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v29 = v21;
  if (v20)
  {
    mlir::IntegerAttr::getValue(&v29, (llvm::APInt *)&__p);
    unsigned int v24 = v28;
    if (v28 >= 0x41)
    {
      if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
      {
        if (__p) {
          operator delete[](__p);
        }
        goto LABEL_12;
      }
      uint64_t v25 = *(void *)__p;
      operator delete[](__p);
      if (v25) {
        goto LABEL_12;
      }
    }
    else if (__p)
    {
      goto LABEL_12;
    }
    uint64_t v8 = 0;
  }
LABEL_12:
  uint64_t v22 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v26);
  return mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getChecked<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(a1, a2, v22, a3, (uint64_t)a4, v26, v14, a7, v8);
}

uint64_t mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getChecked<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, mlir::MLIRContext *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!mlir::MemRefType::verify(a1, a2, a4, a5, a6, a7, a8, a9)) {
    return 0;
  }
  unsigned int v19 = a3;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(a3);
  v18[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v18[1] = &v19;
  v26[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v26[1] = v18;
  v22[0] = a4;
  v22[1] = a5;
  uint64_t v23 = a6;
  v24[0] = a7;
  v24[1] = a8;
  uint64_t v25 = a9;
  unsigned int v16 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)v22, &v23, v24, &v25);
  v20[0] = v22;
  v20[1] = v26;
  uint64_t v21 = v22;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v21, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v20);
}

uint64_t mlir::MemRefType::get(void *a1, mlir::AffineMap *a2, uint64_t a3, unint64_t MultiDimIdentityMap, uint64_t a5)
{
  uint64_t v20 = a3;
  if (!MultiDimIdentityMap)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
    unint64_t MultiDimIdentityMap = mlir::AffineMap::getMultiDimIdentityMap(a2, Context, v9);
  }
  unint64_t v10 = (void *)mlir::AffineMapAttr::get(MultiDimIdentityMap);
  if (a5)
  {
    uint64_t v11 = *(void **)(*(void *)a5 + 136);
    BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id;
    uint64_t v13 = v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id ? a5 : 0;
    v30[0] = v13;
    if (v12)
    {
      mlir::IntegerAttr::getValue(v30, (llvm::APInt *)&__p);
      int v18 = (int)v26;
      if (v26 >= 0x41)
      {
        if (v18 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__p) >= 0x41)
        {
          if (__p) {
            operator delete[](__p);
          }
          goto LABEL_8;
        }
        uint64_t v19 = *(void *)__p;
        operator delete[](__p);
        if (v19) {
          goto LABEL_8;
        }
      }
      else if (__p)
      {
        goto LABEL_8;
      }
      a5 = 0;
    }
  }
LABEL_8:
  uint64_t v22 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v20);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(v22);
  v21[0] = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  v21[1] = &v22;
  v30[0] = _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_13AffineMapAttrERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_;
  v30[1] = v21;
  __p = a1;
  uint64_t v26 = a2;
  uint64_t v27 = v20;
  v28[0] = v10;
  if (v10) {
    uint64_t v15 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v10 + 8);
  }
  else {
    uint64_t v15 = 0;
  }
  v28[1] = v15;
  uint64_t v29 = a5;
  unsigned int v16 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>((uint64_t)&__p, &v27, v28, &v29);
  v23[0] = &__p;
  v23[1] = v30;
  p_p = &__p;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&p_p, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

uint64_t mlir::MemRefType::verify(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  v61[0] = a6;
  v61[1] = a7;
  v65[0] = a5;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)v65)
    || ((uint64_t v13 = *(void **)(*(void *)v65[0] + 136), v13 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (BOOL v14 = v13 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (BOOL v14 = 1),
        !v14 ? (BOOL v15 = v13 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v15 = 1),
        !v15 ? (BOOL v16 = v13 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (BOOL v16 = 1),
        v16 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(void *)v65[0] + 8)))
  {
    if (a4)
    {
      uint64_t v17 = 8 * a4;
      int v18 = (void *)a3;
      while (*v18 < 0x8000000000000001)
      {
        ++v18;
        v17 -= 8;
        if (!v17) {
          goto LABEL_17;
        }
      }
      a1(v65, a2);
      if (v65[0])
      {
        int v62 = 3;
        int64_t v63 = "invalid memref size";
        uint64_t v64 = 19;
        uint64_t v22 = &v62;
        uint64_t v23 = (char *)v66;
        if (v67 >= v68)
        {
          unint64_t v55 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            int64_t v58 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
            uint64_t v23 = (char *)v66;
            uint64_t v22 = (int *)((char *)v66 + v58);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v55, 24);
            uint64_t v22 = &v62;
            uint64_t v23 = (char *)v66;
          }
        }
        unsigned int v24 = &v23[24 * v67];
        long long v25 = *(_OWORD *)v22;
        *((void *)v24 + 2) = *((void *)v22 + 2);
        *(_OWORD *)unsigned int v24 = v25;
        ++v67;
      }
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      }
      if (v74)
      {
        uint64_t v26 = (void **)__p;
        if (__p)
        {
          uint64_t v27 = v73;
          unsigned int v28 = __p;
          if (v73 != __p)
          {
            do
              uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
            while (v27 != v26);
            unsigned int v28 = __p;
          }
          uint64_t v73 = v26;
          operator delete(v28);
        }
        uint64_t v29 = v70;
        if (!v70) {
          goto LABEL_81;
        }
        uint64_t v30 = v71;
        __int16 v31 = v70;
        if (v71 == v70) {
          goto LABEL_80;
        }
        do
        {
          unint64_t v33 = (void *)*--v30;
          uint64_t v32 = v33;
          void *v30 = 0;
          if (v33) {
            operator delete[](v32);
          }
        }
        while (v30 != v29);
        goto LABEL_79;
      }
    }
    else
    {
LABEL_17:
      if (!mlir::MemRefLayoutAttrInterface::verifyLayout(v61, a3, a4, (uint64_t)a1, a2)) {
        return 0;
      }
      if (!a8) {
        return 1;
      }
      uint64_t v19 = *(void **)(*(void *)a8 + 136);
      if (v19 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
        return 1;
      }
      BOOL v20 = v19 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
         || v19 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
      if (v20 || *(_UNKNOWN **)(**(void **)a8 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id) {
        return 1;
      }
      a1(v65, a2);
      if (v65[0])
      {
        int v62 = 3;
        int64_t v63 = "unsupported memory space Attribute";
        uint64_t v64 = 34;
        uint64_t v44 = &v62;
        uint64_t v45 = (char *)v66;
        if (v67 >= v68)
        {
          unint64_t v57 = v67 + 1;
          if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
          {
            int64_t v60 = (char *)&v62 - (unsigned char *)v66;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v57, 24);
            uint64_t v45 = (char *)v66;
            uint64_t v44 = (int *)((char *)v66 + v60);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v57, 24);
            uint64_t v44 = &v62;
            uint64_t v45 = (char *)v66;
          }
        }
        v46 = &v45[24 * v67];
        long long v47 = *(_OWORD *)v44;
        *((void *)v46 + 2) = *((void *)v44 + 2);
        *(_OWORD *)v46 = v47;
        ++v67;
      }
      uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
      if (v65[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
      }
      if (v74)
      {
        unsigned int v48 = (void **)__p;
        if (__p)
        {
          uint64_t v49 = v73;
          uint64_t v50 = __p;
          if (v73 != __p)
          {
            do
              uint64_t v49 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v49 - 1);
            while (v49 != v48);
            uint64_t v50 = __p;
          }
          uint64_t v73 = v48;
          operator delete(v50);
        }
        uint64_t v29 = v70;
        if (!v70) {
          goto LABEL_81;
        }
        uint64_t v51 = v71;
        __int16 v31 = v70;
        if (v71 == v70) {
          goto LABEL_80;
        }
        do
        {
          uint64_t v53 = (void *)*--v51;
          uint64_t v52 = v53;
          void *v51 = 0;
          if (v53) {
            operator delete[](v52);
          }
        }
        while (v51 != v29);
        goto LABEL_79;
      }
    }
  }
  else
  {
    a1(v65, a2);
    if (v65[0])
    {
      int v62 = 3;
      int64_t v63 = "invalid memref element type";
      uint64_t v64 = 27;
      long long v34 = &v62;
      int64_t v35 = (char *)v66;
      if (v67 >= v68)
      {
        unint64_t v56 = v67 + 1;
        if (v66 <= &v62 && (char *)v66 + 24 * v67 > (char *)&v62)
        {
          int64_t v59 = (char *)&v62 - (unsigned char *)v66;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v56, 24);
          int64_t v35 = (char *)v66;
          long long v34 = (int *)((char *)v66 + v59);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v69, v56, 24);
          long long v34 = &v62;
          int64_t v35 = (char *)v66;
        }
      }
      int64_t v36 = &v35[24 * v67];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = *((void *)v34 + 2);
      *(_OWORD *)int64_t v36 = v37;
      ++v67;
    }
    uint64_t v21 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v65);
    if (v65[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v65);
    }
    if (v74)
    {
      long long v38 = (void **)__p;
      if (__p)
      {
        uint64_t v39 = v73;
        uint64_t v40 = __p;
        if (v73 != __p)
        {
          do
            uint64_t v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
          while (v39 != v38);
          uint64_t v40 = __p;
        }
        uint64_t v73 = v38;
        operator delete(v40);
      }
      uint64_t v29 = v70;
      if (!v70) {
        goto LABEL_81;
      }
      unint64_t v41 = v71;
      __int16 v31 = v70;
      if (v71 == v70)
      {
LABEL_80:
        uint64_t v71 = v29;
        operator delete(v31);
LABEL_81:
        if (v66 != v69) {
          free(v66);
        }
        return v21;
      }
      do
      {
        uint64_t v43 = (void *)*--v41;
        long long v42 = v43;
        void *v41 = 0;
        if (v43) {
          operator delete[](v42);
        }
      }
      while (v41 != v29);
LABEL_79:
      __int16 v31 = v70;
      goto LABEL_80;
    }
  }
  return v21;
}

uint64_t mlir::UnrankedMemRefType::verify(void (*a1)(void *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  v44[0] = a3;
  if (mlir::Type::isIntOrIndexOrFloat((mlir::Type *)v44)
    || ((uint64_t v7 = *(void **)(*(void *)v44[0] + 136), v7 != &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id)
      ? (BOOL v8 = v7 == &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id)
      : (BOOL v8 = 1),
        !v8 ? (BOOL v9 = v7 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) : (BOOL v9 = 1),
        !v9 ? (BOOL v10 = v7 == &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id) : (BOOL v10 = 1),
        v10 || mlir::detail::InterfaceMap::lookup<mlir::MemRefElementTypeInterface>(*(void *)v44[0] + 8)))
  {
    if (!a4) {
      return 1;
    }
    uint64_t v11 = *(void **)(*(void *)a4 + 136);
    if (v11 == &mlir::detail::TypeIDResolver<mlir::IntegerAttr,void>::id) {
      return 1;
    }
    BOOL v12 = v11 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
       || v11 == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id;
    if (v12 || *(_UNKNOWN **)(**(void **)a4 + 24) != &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id) {
      return 1;
    }
    a1(v44, a2);
    if (v44[0])
    {
      int v41 = 3;
      long long v42 = "unsupported memory space Attribute";
      uint64_t v43 = 34;
      uint64_t v27 = &v41;
      unsigned int v28 = (char *)v45;
      if (v46 >= v47)
      {
        unint64_t v37 = v46 + 1;
        if (v45 <= &v41 && (char *)v45 + 24 * v46 > (char *)&v41)
        {
          int64_t v39 = (char *)&v41 - (unsigned char *)v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v37, 24);
          unsigned int v28 = (char *)v45;
          uint64_t v27 = (int *)((char *)v45 + v39);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v37, 24);
          uint64_t v27 = &v41;
          unsigned int v28 = (char *)v45;
        }
      }
      uint64_t v29 = &v28[24 * v46];
      long long v30 = *(_OWORD *)v27;
      *((void *)v29 + 2) = *((void *)v27 + 2);
      *(_OWORD *)uint64_t v29 = v30;
      ++v46;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v44);
    if (v44[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    }
    if (v53)
    {
      __int16 v31 = (void **)__p;
      if (__p)
      {
        uint64_t v32 = v52;
        unint64_t v33 = __p;
        if (v52 != __p)
        {
          do
            uint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
          while (v32 != v31);
          unint64_t v33 = __p;
        }
        uint64_t v52 = v31;
        operator delete(v33);
      }
      uint64_t v22 = v49;
      if (!v49) {
        goto LABEL_59;
      }
      long long v34 = v50;
      unsigned int v24 = v49;
      if (v50 == v49) {
        goto LABEL_58;
      }
      do
      {
        int64_t v36 = (void *)*--v34;
        int64_t v35 = v36;
        *long long v34 = 0;
        if (v36) {
          operator delete[](v35);
        }
      }
      while (v34 != v22);
      goto LABEL_57;
    }
  }
  else
  {
    a1(v44, a2);
    if (v44[0])
    {
      int v41 = 3;
      long long v42 = "invalid memref element type";
      uint64_t v43 = 27;
      BOOL v15 = &v41;
      BOOL v16 = (char *)v45;
      if (v46 >= v47)
      {
        unint64_t v38 = v46 + 1;
        if (v45 <= &v41 && (char *)v45 + 24 * v46 > (char *)&v41)
        {
          int64_t v40 = (char *)&v41 - (unsigned char *)v45;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v38, 24);
          BOOL v16 = (char *)v45;
          BOOL v15 = (int *)((char *)v45 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, v48, v38, 24);
          BOOL v15 = &v41;
          BOOL v16 = (char *)v45;
        }
      }
      uint64_t v17 = &v16[24 * v46];
      long long v18 = *(_OWORD *)v15;
      *((void *)v17 + 2) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v17 = v18;
      ++v46;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v44);
    if (v44[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v44);
    }
    if (v53)
    {
      uint64_t v19 = (void **)__p;
      if (__p)
      {
        BOOL v20 = v52;
        uint64_t v21 = __p;
        if (v52 != __p)
        {
          do
            BOOL v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
          while (v20 != v19);
          uint64_t v21 = __p;
        }
        uint64_t v52 = v19;
        operator delete(v21);
      }
      uint64_t v22 = v49;
      if (!v49) {
        goto LABEL_59;
      }
      uint64_t v23 = v50;
      unsigned int v24 = v49;
      if (v50 == v49)
      {
LABEL_58:
        uint64_t v50 = v22;
        operator delete(v24);
LABEL_59:
        if (v45 != v48) {
          free(v45);
        }
        return v13;
      }
      do
      {
        uint64_t v26 = (void *)*--v23;
        long long v25 = v26;
        *uint64_t v23 = 0;
        if (v26) {
          operator delete[](v25);
        }
      }
      while (v23 != v22);
LABEL_57:
      unsigned int v24 = v49;
      goto LABEL_58;
    }
  }
  return v13;
}

uint64_t mlir::getStridesAndOffset(uint64_t a1, uint64_t a2, void *a3)
{
  v68[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(_UNKNOWN **)(*(void *)v5 + 136) == &mlir::detail::TypeIDResolver<mlir::StridedLayoutAttr,void>::id) {
    uint64_t v6 = *(void **)(a1 + 32);
  }
  else {
    uint64_t v6 = 0;
  }
  int64_t v66 = v6;
  if (!v6)
  {
    int v62 = 0;
    v63[0] = v5;
    uint64_t v65 = a1;
    int64_t v66 = v68;
    uint64_t v67 = 0x400000000;
    v63[1] = *(void *)(a1 + 40);
    uint64_t canMapOperands = mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)v63);
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&canMapOperands) != 1
      && !mlir::AffineMap::isIdentity((mlir::AffineMap *)&canMapOperands))
    {
LABEL_62:
      uint64_t v9 = 0;
      int64_t v60 = v66;
      if (v66 == v68) {
        return v9;
      }
      goto LABEL_59;
    }
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65);
    AffineConstantExpr = (mlir::MLIRContext **)mlir::getAffineConstantExpr(0, Context, v11);
    uint64_t v13 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65);
    uint64_t v15 = mlir::getAffineConstantExpr((mlir *)1, v13, v14);
    int v62 = AffineConstantExpr;
    unint64_t v16 = *(void *)(v65 + 16);
    if (v16 > HIDWORD(v67))
    {
      LODWORD(v67) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v16, 8);
      uint64_t v17 = (mlir::MLIRContext ***)v66;
      unint64_t v18 = v16;
      if (v16 < 4) {
        goto LABEL_66;
      }
      uint64_t v17 = (mlir::MLIRContext ***)((char *)v66 + 8 * (v16 & 0xFFFFFFFFFFFFFFFCLL));
      unint64_t v18 = v16 & 3;
      int64x2_t v19 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      BOOL v20 = (int64x2_t *)((char *)v66 + 16);
      unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v20[-1] = v19;
        *BOOL v20 = v19;
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_66:
        do
        {
          *v17++ = AffineConstantExpr;
          --v18;
        }
        while (v18);
      }
LABEL_32:
      LODWORD(v67) = v16;
      if (!mlir::AffineMap::isIdentity((mlir::AffineMap *)&canMapOperands)
        || (unint64_t v36 = *(void *)(v65 + 16)) != 0
        && (uint64_t v37 = *(void *)(v65 + 8),
            unint64_t v38 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v65),
            CanonicalStridedLayoutExpr = mlir::makeCanonicalStridedLayoutExpr(v37, v36, v38),
            !extractStrides((uint64_t)CanonicalStridedLayoutExpr, v15, (uint64_t)v66, v67, (unint64_t *)&v62)))
      {
        int64_t v40 = (mlir::MLIRContext **)mlir::AffineMap::getResult((mlir::AffineMap *)&canMapOperands, 0);
        uint64_t NumDims = mlir::AffineMap::getNumDims((mlir::AffineMap *)&canMapOperands);
        uint64_t NumSymbols = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&canMapOperands);
        uint64_t v43 = mlir::simplifyAffineExpr(v40, NumDims, NumSymbols);
        if (!extractStrides((uint64_t)v43, v15, (uint64_t)v66, v67, (unint64_t *)&v62))
        {
LABEL_61:
          int v62 = 0;
          LODWORD(v67) = 0;
          goto LABEL_62;
        }
        uint64_t v44 = mlir::AffineMap::getNumDims((mlir::AffineMap *)&canMapOperands);
        uint64_t v45 = mlir::AffineMap::getNumSymbols((mlir::AffineMap *)&canMapOperands);
        int v62 = mlir::simplifyAffineExpr(v62, v44, v45);
        if (v67)
        {
          unsigned int v46 = (mlir::MLIRContext ***)v66;
          uint64_t v47 = 8 * v67;
          do
          {
            char *v46 = mlir::simplifyAffineExpr(*v46, v44, v45);
            ++v46;
            v47 -= 8;
          }
          while (v47);
          if (v67)
          {
            unsigned int v48 = v66;
            uint64_t v49 = 8 * v67;
            do
            {
              v63[0] = *v48;
              DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)v63);
              uint64_t v52 = mlir::getAffineConstantExpr(0, DesiredBytecodeVersion, v51);
              if (v63[0] == v52) {
                goto LABEL_61;
              }
              ++v48;
              v49 -= 8;
            }
            while (v49);
          }
        }
      }
      char v53 = v62;
      v63[0] = v62;
      if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v63) == 5)
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, (uint64_t)v53);
        if (v63[0]) {
          goto LABEL_45;
        }
      }
      else
      {
        mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, 0);
        if (v63[0])
        {
LABEL_45:
          *a3 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v63);
          uint64_t v54 = v67;
          if (!v67)
          {
LABEL_58:
            uint64_t v9 = 1;
            int64_t v60 = v66;
            if (v66 == v68) {
              return v9;
            }
LABEL_59:
            free(v60);
            return v9;
          }
          goto LABEL_49;
        }
      }
      *a3 = 0x8000000000000000;
      uint64_t v54 = v67;
      if (!v67) {
        goto LABEL_58;
      }
LABEL_49:
      unint64_t v55 = (uint64_t *)v66;
      uint64_t v56 = 8 * v54;
      while (1)
      {
        uint64_t v57 = *v55;
        v63[0] = *v55;
        if (mlir::AffineExpr::getKind((mlir::AffineExpr *)v63) == 5)
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, v57);
          if (v63[0]) {
            goto LABEL_52;
          }
        }
        else
        {
          mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(v63, 0);
          if (v63[0])
          {
LABEL_52:
            uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)v63);
            unint64_t v59 = *(unsigned int *)(a2 + 8);
            if (v59 >= *(unsigned int *)(a2 + 12)) {
              goto LABEL_57;
            }
            goto LABEL_53;
          }
        }
        unint64_t v59 = *(unsigned int *)(a2 + 8);
        uint64_t LHS = 0x8000000000000000;
        if (v59 >= *(unsigned int *)(a2 + 12))
        {
LABEL_57:
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v59 + 1, 8);
          unint64_t v59 = *(unsigned int *)(a2 + 8);
        }
LABEL_53:
        *(void *)(*(void *)a2 + 8 * v59) = LHS;
        ++*(_DWORD *)(a2 + 8);
        ++v55;
        v56 -= 8;
        if (!v56) {
          goto LABEL_58;
        }
      }
    }
    unint64_t v22 = v67;
    if (v67 >= v16) {
      unint64_t v23 = *(void *)(v65 + 16);
    }
    else {
      unint64_t v23 = v67;
    }
    if (v23)
    {
      if (v23 < 4)
      {
        unsigned int v24 = (mlir::MLIRContext ***)v66;
        unint64_t v25 = v23;
        do
        {
LABEL_24:
          *v24++ = AffineConstantExpr;
          --v25;
        }
        while (v25);
        goto LABEL_25;
      }
      unsigned int v24 = (mlir::MLIRContext ***)((char *)v66 + 8 * (v23 & 0xFFFFFFFC));
      unint64_t v25 = v23 & 3;
      int64x2_t v26 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      uint64_t v27 = (int64x2_t *)((char *)v66 + 16);
      uint64_t v28 = v23 & 0xFFFFFFFC;
      do
      {
        v27[-1] = v26;
        *uint64_t v27 = v26;
        v27 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v23 != (v23 & 0xFFFFFFFC)) {
        goto LABEL_24;
      }
    }
LABEL_25:
    unint64_t v29 = v16 - v22;
    if (v16 <= v22) {
      goto LABEL_32;
    }
    long long v30 = (int64x2_t *)((char *)v66 + 8 * v22);
    if (v29 >= 4)
    {
      __int16 v31 = (mlir::MLIRContext ***)v30 + (v29 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v32 = v29 & 3;
      int64x2_t v33 = vdupq_n_s64((unint64_t)AffineConstantExpr);
      long long v34 = v30 + 1;
      unint64_t v35 = v29 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v34[-1] = v33;
        *long long v34 = v33;
        v34 += 2;
        v35 -= 4;
      }
      while (v35);
      if (v29 == (v29 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_32;
      }
    }
    else
    {
      __int16 v31 = (mlir::MLIRContext ***)((char *)v66 + 8 * v22);
      unint64_t v32 = v29;
    }
    do
    {
      *v31++ = AffineConstantExpr;
      --v32;
    }
    while (v32);
    goto LABEL_32;
  }
  uint64_t AttrData = (char *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v66);
  llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>(a2, *(void *)a2 + 8 * *(unsigned int *)(a2 + 8), AttrData, &AttrData[8 * v8]);
  *a3 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v66);
  return 1;
}

void mlir::getStridesAndOffset(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v10[6] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = 0;
  __src = v10;
  uint64_t v9 = 0x600000000;
  mlir::getStridesAndOffset(a1, (uint64_t)&__src, &v7);
  uint64_t v3 = (void *)(a2 + 16);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  if (&__src == (void **)a2) {
    goto LABEL_9;
  }
  int v4 = v9;
  if (!v9) {
    goto LABEL_9;
  }
  if (v9 < 7)
  {
    unsigned int v5 = v9;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a2, (void *)(a2 + 16), v9, 8);
  unsigned int v5 = v9;
  if (v9)
  {
    uint64_t v3 = *(void **)a2;
LABEL_7:
    memcpy(v3, __src, 8 * v5);
  }
  *(_DWORD *)(a2 + 8) = v4;
LABEL_9:
  uint64_t v6 = __src;
  *(void *)(a2 + 64) = v7;
  if (v6 != v10) {
    free(v6);
  }
}

uint64_t mlir::TupleType::getTypes(mlir::TupleType *this)
{
  return *(void *)this + 16;
}

mlir::MLIRContext **mlir::makeCanonicalStridedLayoutExpr(uint64_t a1, unint64_t a2, mlir::MLIRContext *a3)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  BOOL v12 = v14;
  uint64_t v13 = 0x400000000;
  if (a2 >= 5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, a2, 8);
  }
  if (a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t AffineDimExpr = mlir::getAffineDimExpr(v6, a3, a3);
      uint64_t v8 = v13;
      if (v13 >= (unint64_t)HIDWORD(v13))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v12, v14, v13 + 1, 8);
        uint64_t v8 = v13;
      }
      *((void *)v12 + v8) = AffineDimExpr;
      unsigned int v9 = v13 + 1;
      LODWORD(v13) = v13 + 1;
      uint64_t v6 = (mlir *)((char *)v6 + 1);
    }
    while ((mlir *)a2 != v6);
  }
  else
  {
    unsigned int v9 = v13;
  }
  CanonicalStridedLayoutExpr = mlir::makeCanonicalStridedLayoutExpr(a1, a2, (mlir::BytecodeWriterConfig *)v12, v9, a3);
  if (v12 != v14) {
    free(v12);
  }
  return CanonicalStridedLayoutExpr;
}

mlir::MLIRContext **mlir::makeCanonicalStridedLayoutExpr(uint64_t a1, uint64_t a2, mlir::BytecodeWriterConfig *a3, uint64_t a4, mlir::MLIRContext *a5)
{
  v31[4] = *MEMORY[0x1E4F143B8];
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  if (a2)
  {
    mlir::AffineMap::inferFromExprList(&v28, 1uLL, (uint64_t)&v30);
    unsigned int NumDims = mlir::AffineMap::getNumDims(v30);
    uint64_t NumSymbols = mlir::AffineMap::getNumSymbols(v30);
    uint64_t v27 = 0;
    if (v29)
    {
      char v10 = 0;
      uint64_t v11 = v28;
      uint64_t v12 = 8 * a2 - 8;
      uint64_t v13 = 8 * v29 - 8;
      uint64_t v14 = 1;
      while (1)
      {
        uint64_t v15 = *(void *)(a1 + v12);
        unint64_t v26 = *(void *)((char *)v11 + v13);
        if (v10) {
          break;
        }
        uint64_t AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)v14, a5, v8);
        unint64_t v20 = (unint64_t)v27;
        unint64_t v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator*(&v26, AffineConstantExpr);
        if (v20) {
          goto LABEL_8;
        }
LABEL_9:
        uint64_t v27 = v18;
        if (v15 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v15;
        }
        if (v13)
        {
          v14 *= v21;
          v10 |= v15 < 1;
          uint64_t v22 = v12;
          v12 -= 8;
          v13 -= 8;
          if (v22) {
            continue;
          }
        }
        goto LABEL_19;
      }
      uint64_t AffineSymbolExpr = mlir::getAffineSymbolExpr((mlir *)NumSymbols, a5, v8);
      uint64_t NumSymbols = (NumSymbols + 1);
      unint64_t v17 = (unint64_t)v27;
      unint64_t v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator*(&v26, AffineSymbolExpr);
      if (!v17) {
        goto LABEL_9;
      }
LABEL_8:
      unint64_t v18 = (mlir::MLIRContext **)mlir::AffineExpr::operator+((unint64_t *)&v27, (uint64_t)v18);
      goto LABEL_9;
    }
    unint64_t v18 = 0;
LABEL_19:
    unsigned int v24 = mlir::simplifyAffineExpr(v18, NumDims, NumSymbols);
    if (v30 != (mlir::AffineMap *)v31) {
      free(v30);
    }
    return v24;
  }
  else
  {
    return (mlir::MLIRContext **)mlir::getAffineConstantExpr(0, a5, a3);
  }
}

BOOL mlir::isStrided(uint64_t a1)
{
  v5[4] = *MEMORY[0x1E4F143B8];
  v4[0] = v5;
  v4[1] = (void *)0x400000000;
  char StridesAndOffset = mlir::getStridesAndOffset(a1, (uint64_t)v4, &v3);
  if (v4[0] != v5) {
    free(v4[0]);
  }
  return StridesAndOffset != 0;
}

uint64_t extractStrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v26 = a2;
  uint64_t RHS = a1;
  if ((int)mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) >= 5)
  {
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, 0);
    unint64_t v25 = RHS;
    if (RHS) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v27 = a1;
    uint64_t RHS = a1;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) == 6)
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, a1);
      if (RHS)
      {
LABEL_10:
        unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&RHS);
        uint64_t v12 = mlir::AffineExpr::operator+((unint64_t *)(a3 + 8 * Position), a2);
        uint64_t v13 = &RHS;
LABEL_11:
        *(void *)(a3 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)v13)) = v12;
        return 1;
      }
    }
    else
    {
      mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, 0);
      if (RHS) {
        goto LABEL_10;
      }
    }
    uint64_t v14 = mlir::AffineExpr::operator*((unint64_t *)&v27, a2);
    *a5 = mlir::AffineExpr::operator+(a5, v14);
    return 1;
  }
  mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, a1);
  unint64_t v25 = RHS;
  if (!RHS) {
    goto LABEL_8;
  }
LABEL_3:
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v25) == 4
    || mlir::AffineExpr::getKind((mlir::AffineExpr *)&v25) == 3
    || mlir::AffineExpr::getKind((mlir::AffineExpr *)&v25) == 2)
  {
    return 0;
  }
  if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&v25) == 1)
  {
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v25);
    uint64_t RHS = LHS;
    if (mlir::AffineExpr::getKind((mlir::AffineExpr *)&RHS) == 6) {
      uint64_t v16 = LHS;
    }
    else {
      uint64_t v16 = 0;
    }
    mlir::AffineBinaryOpExpr::AffineBinaryOpExpr(&RHS, v16);
    uint64_t v27 = RHS;
    if (RHS)
    {
      unint64_t v20 = (unint64_t *)(a3 + 8 * mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v27));
      uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
      uint64_t v21 = mlir::AffineExpr::operator*((unint64_t *)&RHS, a2);
      uint64_t v12 = mlir::AffineExpr::operator+(v20, v21);
      uint64_t v13 = &v27;
      goto LABEL_11;
    }
    uint64_t RHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v25);
    if (mlir::AffineExpr::isSymbolicOrConstant((mlir::AffineExpr *)&RHS))
    {
      uint64_t v22 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
      uint64_t v23 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v25);
    }
    else
    {
      uint64_t v22 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v25);
      uint64_t v23 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
    }
    uint64_t v24 = mlir::AffineExpr::operator*((unint64_t *)&v26, v23);
    return extractStrides(v22, v24, a3, a4, a5);
  }
  else
  {
    mlir::AffineExpr::getKind((mlir::AffineExpr *)&v25);
    uint64_t v17 = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v25);
    char Strides = extractStrides(v17, a2, a3, a4, a5);
    uint64_t v19 = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v25);
    return extractStrides(v19, a2, a3, a4, a5) && Strides != 0;
  }
}

uint64_t mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v17 = *a5;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a1;
    unint64_t v6 = 0x1E8EB8000uLL;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  uint64_t v7 = *(void *)(v6 + 3024);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (8 * ((v17 >> 4) ^ (v17 >> 9)) + 8));
  v15[0] = &v17;
  v15[1] = v18;
  uint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::ComplexTypeStorage * mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::ComplexTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    unint64_t v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *unint64_t v12 = 0;
    v12[1] = v4;
    uint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *unint64_t v12 = 0;
    v12[1] = v4;
    uint64_t v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v20[0] = a2;
  v20[1] = a3;
  long long v8 = *a6;
  long long v21 = *a5;
  long long v22 = v8;
  unint64_t v9 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v21, 0, v21, *((uint64_t *)&v21 + 1));
  unint64_t v10 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v22, 0, v22, *((uint64_t *)&v22 + 1));
  unint64_t v11 = ((v10 << 32) - 1) ^ (((v10 << 32) - 1) >> 22);
  unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  unint64_t v14 = ((v13 >> 31) ^ v13 | (v9 << 32))
      + ~((unint64_t)((v13 >> 31) ^ v13) << 32);
  unint64_t v15 = 9
      * (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) ^ (((v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13)) >> 8));
  unint64_t v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v18[0] = &v21;
  v18[1] = v20;
  uint64_t v19 = &v21;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, (v16 >> 31) ^ v16, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v123 = a4;
  {
    uint64_t v117 = a3;
    a4 = v123;
    a3 = v117;
    if (v118)
    {
      unint64_t v119 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v119 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v119;
      a4 = v123;
      a3 = v117;
    }
  }
  unint64_t v6 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 != a3 || a2 != a4)
  {
    BOOL v128 = a1 == a3;
    unsigned int v9 = mlir::TypeRange::dereference_iterator(a1, a2);
    uint64_t v10 = (v9 >> 4) ^ (v9 >> 9);
    uint64_t v129 = v10;
    uint64_t v11 = a2 + 1;
    if (v128)
    {
      if (v11 == v123)
      {
        unint64_t v7 = 8;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v108 = mlir::TypeRange::dereference_iterator(a1, v11);
      uint64_t v13 = (v108 >> 4) ^ (v108 >> 9);
      uint64_t v130 = v13;
      if (a2 + 2 == v123)
      {
        unint64_t v7 = 16;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v109 = mlir::TypeRange::dereference_iterator(a1, a2 + 2);
      uint64_t v110 = (v109 >> 4) ^ (v109 >> 9);
      uint64_t v131 = v110;
      if (a2 + 3 == v123)
      {
        unint64_t v7 = 24;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v111 = mlir::TypeRange::dereference_iterator(a1, a2 + 3);
      uint64_t v112 = (v111 >> 4) ^ (v111 >> 9);
      uint64_t v132 = v112;
      if (a2 + 4 == v123)
      {
        unint64_t v7 = 32;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v113 = mlir::TypeRange::dereference_iterator(a1, a2 + 4);
      uint64_t v17 = (v113 >> 4) ^ (v113 >> 9);
      uint64_t v133 = v17;
      if (a2 + 5 == v123)
      {
        unint64_t v7 = 40;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v114 = mlir::TypeRange::dereference_iterator(a1, a2 + 5);
      uint64_t v19 = (v114 >> 4) ^ (v114 >> 9);
      uint64_t v134 = v19;
      if (a2 + 6 == v123)
      {
        unint64_t v7 = 48;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      unsigned int v115 = mlir::TypeRange::dereference_iterator(a1, a2 + 6);
      uint64_t v21 = (v115 >> 4) ^ (v115 >> 9);
      uint64_t v135 = v21;
      if (a2 + 7 == v123)
      {
        unint64_t v7 = 56;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
      uint64_t v126 = v110;
      unsigned int v116 = mlir::TypeRange::dereference_iterator(a1, a2 + 7);
      uint64_t v124 = v112;
      uint64_t v23 = (v116 >> 4) ^ (v116 >> 9);
      uint64_t v136 = v23;
      uint64_t v24 = a2 + 8;
      if (v24 == v123)
      {
        unint64_t v7 = 64;
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
      }
    }
    else
    {
      unsigned int v12 = mlir::TypeRange::dereference_iterator(a1, v11);
      uint64_t v13 = (v12 >> 4) ^ (v12 >> 9);
      uint64_t v130 = v13;
      unsigned int v14 = mlir::TypeRange::dereference_iterator(a1, a2 + 2);
      uint64_t v126 = (v14 >> 4) ^ (v14 >> 9);
      uint64_t v131 = v126;
      unsigned int v15 = mlir::TypeRange::dereference_iterator(a1, a2 + 3);
      uint64_t v124 = (v15 >> 4) ^ (v15 >> 9);
      uint64_t v132 = v124;
      unsigned int v16 = mlir::TypeRange::dereference_iterator(a1, a2 + 4);
      uint64_t v17 = (v16 >> 4) ^ (v16 >> 9);
      uint64_t v133 = v17;
      unsigned int v18 = mlir::TypeRange::dereference_iterator(a1, a2 + 5);
      uint64_t v19 = (v18 >> 4) ^ (v18 >> 9);
      uint64_t v134 = v19;
      unsigned int v20 = mlir::TypeRange::dereference_iterator(a1, a2 + 6);
      uint64_t v21 = (v20 >> 4) ^ (v20 >> 9);
      uint64_t v135 = v21;
      unsigned int v22 = mlir::TypeRange::dereference_iterator(a1, a2 + 7);
      uint64_t v23 = (v22 >> 4) ^ (v22 >> 9);
      uint64_t v136 = v23;
      uint64_t v24 = a2 + 8;
    }
    uint64_t v120 = v10;
    unint64_t v25 = v6;
    uint64_t v122 = a1;
    mlir::TypeRange::dereference_iterator(a1, v24);
    unint64_t v26 = v25 ^ (v25 >> 47);
    unint64_t v27 = 0x9DDFEA08EB382D69
        * (v25 ^ (((0x9DDFEA08EB382D69 * (v26 ^ (0xB492B66FBE98F273 * v25))) ^ v25) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                * (v26 ^ (0xB492B66FBE98F273 * v25))));
    unint64_t v28 = 0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47));
    unint64_t v29 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v25 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v25 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v30 = __ROR8__(v26 - 0x622015F714C7D297 * (v29 ^ (v29 >> 47)), 33);
    unint64_t v31 = 0xB492B66FBE98F273 * v30;
    uint64_t v32 = v28 + v17 - 0x4B6D499041670D8DLL * v30;
    uint64_t v33 = v19 + v21 + v32 + v23;
    uint64_t v34 = __ROR8__(v6 ^ 0xB492B66FBE98F273, 49);
    unint64_t v35 = v19 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v25 - 0x4B6D499041670D8DLL * v25, 42);
    uint64_t v36 = __ROR8__(v19 + v21 + v32, 44) + v32 + __ROR8__(v35 + v126 + v23 + v32, 21);
    uint64_t v37 = v120 - 0x6D8ED9027DD26057 * v6;
    uint64_t v38 = v123;
    uint64_t v39 = v37 + v13 + v126 + v124;
    unint64_t v40 = (0xB492B66FBE98F273 * __ROR8__(v34 + v6 + v13, 37)) ^ v28;
    uint64_t v41 = __ROR8__(v37 + v13 + v126, 44) + v37 + __ROR8__(v40 + v26 + v37 + v124, 21);
    unint64_t v121 = ~(unint64_t)&v129;
    unint64_t v42 = 64;
    BOOL v43 = v128;
    while (1)
    {
      if (v43 && v24 == v38)
      {
        uint64_t v44 = 0;
      }
      else
      {
        unint64_t v125 = v40;
        uint64_t v127 = v36;
        uint64_t v49 = v122;
        unsigned int v50 = mlir::TypeRange::dereference_iterator(v122, v24);
        BOOL v43 = v128;
        uint64_t v129 = (v50 >> 4) ^ (v50 >> 9);
        uint64_t v51 = v24 + 1;
        if (!v128)
        {
          unsigned int v53 = mlir::TypeRange::dereference_iterator(v122, v51);
          uint64_t v130 = (v53 >> 4) ^ (v53 >> 9);
          unsigned int v54 = mlir::TypeRange::dereference_iterator(v122, v24 + 2);
          uint64_t v131 = (v54 >> 4) ^ (v54 >> 9);
          unsigned int v55 = mlir::TypeRange::dereference_iterator(v122, v24 + 3);
          uint64_t v132 = (v55 >> 4) ^ (v55 >> 9);
          unsigned int v56 = mlir::TypeRange::dereference_iterator(v122, v24 + 4);
          uint64_t v133 = (v56 >> 4) ^ (v56 >> 9);
          unsigned int v57 = mlir::TypeRange::dereference_iterator(v122, v24 + 5);
          uint64_t v134 = (v57 >> 4) ^ (v57 >> 9);
          unsigned int v58 = mlir::TypeRange::dereference_iterator(v122, v24 + 6);
          uint64_t v135 = (v58 >> 4) ^ (v58 >> 9);
          unsigned int v59 = mlir::TypeRange::dereference_iterator(v122, v24 + 7);
          uint64_t v136 = (v59 >> 4) ^ (v59 >> 9);
          v24 += 8;
          goto LABEL_20;
        }
        uint64_t v38 = v123;
        if (v51 == v123)
        {
          uint64_t v44 = 8;
          uint64_t v52 = (char *)&v130;
        }
        else
        {
          uint64_t v49 = v122;
          unsigned int v60 = mlir::TypeRange::dereference_iterator(v122, v51);
          uint64_t v38 = v123;
          uint64_t v130 = (v60 >> 4) ^ (v60 >> 9);
          if (v24 + 2 == v123)
          {
            uint64_t v44 = 16;
            uint64_t v52 = (char *)&v131;
          }
          else
          {
            unsigned int v61 = mlir::TypeRange::dereference_iterator(v122, v24 + 2);
            uint64_t v38 = v123;
            uint64_t v131 = (v61 >> 4) ^ (v61 >> 9);
            if (v24 + 3 == v123)
            {
              uint64_t v44 = 24;
              uint64_t v52 = (char *)&v132;
            }
            else
            {
              unsigned int v62 = mlir::TypeRange::dereference_iterator(v122, v24 + 3);
              uint64_t v38 = v123;
              uint64_t v132 = (v62 >> 4) ^ (v62 >> 9);
              if (v24 + 4 == v123)
              {
                uint64_t v44 = 32;
                uint64_t v52 = (char *)&v133;
              }
              else
              {
                unsigned int v63 = mlir::TypeRange::dereference_iterator(v122, v24 + 4);
                uint64_t v38 = v123;
                uint64_t v133 = (v63 >> 4) ^ (v63 >> 9);
                if (v24 + 5 == v123)
                {
                  uint64_t v44 = 40;
                  uint64_t v52 = (char *)&v134;
                }
                else
                {
                  unsigned int v64 = mlir::TypeRange::dereference_iterator(v122, v24 + 5);
                  uint64_t v38 = v123;
                  uint64_t v134 = (v64 >> 4) ^ (v64 >> 9);
                  if (v24 + 6 == v123)
                  {
                    uint64_t v44 = 48;
                    uint64_t v52 = (char *)&v135;
                  }
                  else
                  {
                    unsigned int v65 = mlir::TypeRange::dereference_iterator(v122, v24 + 6);
                    uint64_t v38 = v123;
                    uint64_t v135 = (v65 >> 4) ^ (v65 >> 9);
                    if (v24 + 7 != v123)
                    {
                      unsigned int v103 = mlir::TypeRange::dereference_iterator(v122, v24 + 7);
                      uint64_t v136 = (v103 >> 4) ^ (v103 >> 9);
                      v24 += 8;
                      if (v24 == v123)
                      {
                        uint64_t v38 = v123;
                        uint64_t v24 = v123;
                        uint64_t v44 = 64;
                        goto LABEL_21;
                      }
LABEL_20:
                      mlir::TypeRange::dereference_iterator(v49, v24);
                      uint64_t v44 = 64;
                      uint64_t v38 = v123;
LABEL_21:
                      BOOL v43 = v128;
                      unint64_t v40 = v125;
                      uint64_t v36 = v127;
                      goto LABEL_14;
                    }
                    uint64_t v44 = 56;
                    uint64_t v52 = (char *)&v136;
                  }
                }
              }
            }
          }
          BOOL v43 = v128;
        }
        unint64_t v66 = 64 - v44;
        uint64_t v67 = v44;
        unint64_t v40 = v125;
        uint64_t v36 = v127;
        if (v44 != 64 - v44)
        {
          do
          {
            unint64_t v92 = v67;
            uint64_t v67 = v66;
            unint64_t v66 = v92 % v66;
          }
          while (v66);
          v93 = (uint64_t *)((char *)&v129 + v67);
          do
          {
            char v95 = *((unsigned char *)v93 - 1);
            v93 = (uint64_t *)((char *)v93 - 1);
            char v94 = v95;
            v96 = &v93[(unint64_t)v44 / 8];
            v97 = v93;
            do
            {
              v98 = v97;
              v97 = v96;
              *(unsigned char *)v98 = *(unsigned char *)v96;
              v99 = (char *)((char *)&v137 - (char *)v96);
              BOOL v100 = __OFSUB__(v44, v99);
              uint64_t v102 = v44 - (void)v99;
              char v101 = (v102 < 0) ^ v100;
              v96 = (uint64_t *)((char *)&v129 + v102);
              if (v101) {
                v96 = &v97[(unint64_t)v44 / 8];
              }
            }
            while (v96 != v93);
            *(unsigned char *)v97 = v94;
          }
          while (v93 != &v129);
          goto LABEL_13;
        }
        if ((unint64_t)&v52[v121] >= (v44 ^ 0x3FuLL)) {
          unint64_t v68 = v44 ^ 0x3F;
        }
        else {
          unint64_t v68 = (unint64_t)&v52[v121];
        }
        uint64_t v69 = (char *)&v129;
        uint64_t v70 = v44;
        if (v68 >= 0xF)
        {
          if (&v129 >= (uint64_t *)((char *)&v129 + v44 + v68 + 1)
            || (uint64_t v70 = v44, (char *)&v129 + v44 >= (char *)&v129 + v68 + 1))
          {
            unint64_t v71 = v68 + 1;
            uint64_t v72 = (v68 + 1) & 0x70;
            uint64_t v73 = (uint64_t *)((char *)&v129 + v44);
            uint64_t v74 = v129;
            uint64_t v75 = v130;
            uint64_t v76 = *(uint64_t *)((char *)&v129 + v44 + 8);
            uint64_t v129 = *(uint64_t *)((char *)&v129 + v44);
            uint64_t v130 = v76;
            void *v73 = v74;
            v73[1] = v75;
            if (v72 != 16)
            {
              unsigned int v77 = (uint64_t *)((char *)&v131 + v44);
              uint64_t v78 = v131;
              uint64_t v79 = v132;
              uint64_t v80 = *(uint64_t *)((char *)&v131 + v44 + 8);
              uint64_t v131 = *(uint64_t *)((char *)&v131 + v44);
              uint64_t v132 = v80;
              *unsigned int v77 = v78;
              v77[1] = v79;
              if (v72 != 32)
              {
                uint64_t v81 = (uint64_t *)((char *)&v133 + v44);
                uint64_t v82 = v133;
                uint64_t v83 = v134;
                uint64_t v84 = *(uint64_t *)((char *)&v133 + v44 + 8);
                uint64_t v133 = *(uint64_t *)((char *)&v133 + v44);
                uint64_t v134 = v84;
                *uint64_t v81 = v82;
                v81[1] = v83;
                if (v72 != 48)
                {
                  v85 = (uint64_t *)((char *)&v135 + v44);
                  uint64_t v86 = v135;
                  uint64_t v87 = v136;
                  uint64_t v88 = *(uint64_t *)((char *)&v135 + v44 + 8);
                  uint64_t v135 = *(uint64_t *)((char *)&v135 + v44);
                  uint64_t v136 = v88;
                  void *v85 = v86;
                  v85[1] = v87;
                }
              }
            }
            if (v71 == v72) {
              goto LABEL_13;
            }
            uint64_t v70 = v44 + v72;
            uint64_t v69 = (char *)&v129 + v72;
          }
        }
        v89 = v69 + 1;
        do
        {
          char v90 = *(v89 - 1);
          *(v89 - 1) = *((unsigned char *)&v129 + v70);
          *((unsigned char *)&v129 + v70) = v90;
          if (v89 == v52) {
            break;
          }
          ++v89;
        }
        while (v70++ != 63);
      }
LABEL_13:
      uint64_t v24 = v38;
LABEL_14:
      unint64_t v45 = (0xB492B66FBE98F273 * __ROR8__(v35 + v39 + v31 + v130, 37)) ^ v36;
      unint64_t v35 = v134 + v39 - 0x4B6D499041670D8DLL * __ROR8__(v35 + v41 + v135, 42);
      uint64_t v46 = __ROR8__(v40 + v33, 33);
      uint64_t v47 = v129 - 0x4B6D499041670D8DLL * v41;
      uint64_t v41 = __ROR8__(v47 + v130 + v131, 44) + v47 + __ROR8__(v45 + v33 + v47 + v132, 21);
      unint64_t v31 = 0xB492B66FBE98F273 * v46;
      uint64_t v39 = v47 + v130 + v131 + v132;
      unint64_t v48 = 0xB492B66FBE98F273 * v46 + v36 + v133;
      uint64_t v36 = __ROR8__(v35 + v131 + v48 + v136, 21) + v48 + __ROR8__(v134 + v135 + v48, 44);
      uint64_t v33 = v134 + v135 + v48 + v136;
      v42 += v44;
      unint64_t v40 = v45;
      if (v43 && v24 == v38)
      {
        unint64_t v104 = 0x9DDFEA08EB382D69
             * (v33 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v33)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v33)));
        uint64_t v105 = v45 - 0x4B6D499041670D8DLL * (v35 ^ (v35 >> 47)) - 0x622015F714C7D297 * (v104 ^ (v104 >> 47));
        unint64_t v106 = 0x9DDFEA08EB382D69
             * (v36 ^ ((0x9DDFEA08EB382D69 * (v41 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v41 ^ v36)));
        unint64_t v107 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (v106 ^ (v106 >> 47)) - 0x4B6D499041670D8DLL * ((v42 ^ (v42 >> 47)) + v46)) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v106 ^ (v106 >> 47)) - 0x4B6D499041670D8DLL * ((v42 ^ (v42 >> 47)) + v46)) ^ v105)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v106 ^ (v106 >> 47)) - 0x4B6D499041670D8DLL * ((v42 ^ (v42 >> 47)) + v46)) ^ v105)));
        return 0x9DDFEA08EB382D69 * (v107 ^ (v107 >> 47));
      }
    }
  }
  unint64_t v7 = 0;
  return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v129, v7, v6);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = 0;
  if (v3)
  {
    uint64_t v7 = *v2;
    uint64_t v8 = 8 * v3 - 8;
    unsigned int v9 = *(void **)(a2 + 16);
    while (*v9 == mlir::TypeRange::dereference_iterator(v7, v6))
    {
      ++v6;
      ++v9;
      if (!v8) {
        goto LABEL_10;
      }
      v8 -= 8;
    }
    return 0;
  }
  unsigned int v9 = *(void **)(a2 + 16);
LABEL_10:
  BOOL result = 0;
  if (v6 == v3 && v9 == (void *)(v5 + 8 * v3))
  {
    uint64_t v11 = *(unsigned int *)(a2 + 12);
    if (v2[3] != v11) {
      return 0;
    }
    uint64_t v12 = *(void *)(a2 + 16);
    uint64_t v13 = *(unsigned int *)(a2 + 8);
    uint64_t v14 = v12 + 8 * v13;
    uint64_t v15 = 0;
    if (v11)
    {
      uint64_t v16 = v2[2];
      uint64_t v17 = 8 * v11 - 8;
      unsigned int v18 = (void *)(v12 + 8 * v13);
      while (*v18 == mlir::TypeRange::dereference_iterator(v16, v15))
      {
        ++v15;
        ++v18;
        if (!v17) {
          return v15 == v11 && v18 == (void *)(v14 + 8 * v11);
        }
        v17 -= 8;
      }
      return 0;
    }
    unsigned int v18 = (void *)(v12 + 8 * v13);
    return v15 == v11 && v18 == (void *)(v14 + 8 * v11);
  }
  return result;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FunctionTypeStorage * mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::FunctionTypeStorage *)>,mlir::TypeID,mlir::TypeRange &,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::FunctionTypeStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::FunctionTypeStorage::construct(uint64_t a1, uint64_t *a2)
{
  v37[16] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v35 = v37;
  uint64_t v36 = 0x1000000000;
  if (v6 + v4 < 0x11)
  {
    unsigned int v7 = 0;
    unint64_t v8 = v4;
    if (v4 <= 0x10) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v6 + v4, 8);
  unsigned int v7 = v36;
  unint64_t v8 = v4 + v36;
  if (v8 > HIDWORD(v36))
  {
LABEL_5:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v8, 8);
    unsigned int v7 = v36;
  }
LABEL_6:
  if (v4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (char *)v35 + 8 * v7;
    do
    {
      *(void *)&v10[8 * v9] = mlir::TypeRange::dereference_iterator(v3, v9);
      ++v9;
    }
    while (v4 != v9);
    unsigned int v7 = v36;
  }
  uint64_t v11 = v7 + v4;
  LODWORD(v36) = v11;
  if (v6 + v11 > (unint64_t)HIDWORD(v36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, v37, v6 + v11, 8);
    LODWORD(v11) = v36;
  }
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = (char *)v35 + 8 * v11;
    do
    {
      *(void *)&v13[8 * v12] = mlir::TypeRange::dereference_iterator(v5, v12);
      ++v12;
    }
    while (v6 != v12);
    LODWORD(v11) = v36;
  }
  uint64_t v14 = (v11 + v6);
  LODWORD(v36) = v11 + v6;
  if (v11 + v6)
  {
    uint64_t v15 = (uint64_t *)v35;
    uint64_t v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, 8 * (v11 + v6), 3);
    uint64_t v17 = v16;
    unint64_t v18 = (v14 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v18 < 3)
    {
      uint64_t v19 = (void *)v16;
      unsigned int v20 = v15;
    }
    else
    {
      uint64_t v19 = (void *)v16;
      unsigned int v20 = v15;
      if ((unint64_t)(v16 - (void)v15) >= 0x20)
      {
        uint64_t v21 = 0;
        unint64_t v22 = v18 + 1;
        uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v19 = (void *)(v16 + v23 * 8);
        unsigned int v20 = &v15[v23];
        uint64_t v24 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v25 = (_OWORD *)(v16 + v21 * 8);
          long long v26 = *(_OWORD *)&v15[v21 + 2];
          *unint64_t v25 = *(_OWORD *)&v15[v21];
          v25[1] = v26;
          v21 += 4;
          v24 -= 4;
        }
        while (v24);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_26;
        }
      }
    }
    do
    {
      uint64_t v27 = *v20++;
      *v19++ = v27;
    }
    while (v20 != &v15[v14]);
  }
  else
  {
    uint64_t v17 = 0;
  }
LABEL_26:
  *(void *)(a1 + 80) += 24;
  if (*(void *)a1) {
    BOOL v28 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 24 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28)
  {
    unsigned int v29 = *(_DWORD *)(a1 + 24) >> 7;
    if (v29 >= 0x1E) {
      LOBYTE(v29) = 30;
    }
    uint64_t v30 = 4096 << v29;
    buffer = (char *)llvm::allocate_buffer(4096 << v29, (std::align_val_t)8uLL);
    uint64_t v32 = *(unsigned int *)(a1 + 24);
    if (v32 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v32 + 1, 8);
      LODWORD(v32) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v32) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v30];
    unint64_t v33 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v33 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v33 + 24;
  *(void *)unint64_t v33 = 0;
  *(_DWORD *)(v33 + 8) = v4;
  *(_DWORD *)(v33 + 12) = v6;
  *(void *)(v33 + 16) = v17;
  if (v35 != v37) {
    free(v35);
  }
  return v33;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(_DWORD *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  memset(v12, 0, sizeof(v12));
  {
    uint64_t v10 = a1;
    uint64_t v6 = a2;
    a2 = v6;
    int v8 = v7;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
      a2 = v6;
    }
  }
  uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v15 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v11 = 0;
  *(void *)&v12[0] = v2;
  unint64_t v3 = llvm::hash_value(*(void **)a2, *(void *)(a2 + 8));
  unint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v12, (uint64_t *)&v11, (void *)v12 + 1, (unint64_t)v13, v3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v12, v11, v4, (char *)v13);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(void *)(a2 + 8) != *(void *)*a1) {
    return 0;
  }
  size_t v3 = *(void *)(a2 + 24);
  if (v3 != v2[2]) {
    return 0;
  }
  if (v3) {
    return memcmp(*(const void **)(a2 + 16), (const void *)v2[1], v3) == 0;
  }
  return 1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  size_t v3 = mlir::detail::OpaqueTypeStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::OpaqueTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[2];
  if (!v4)
  {
    uint64_t v7 = 0;
    goto LABEL_19;
  }
  uint64_t v5 = a2[1];
  uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v4 + 1, 0);
  uint64_t v7 = v6;
  if (v4 < 8)
  {
    int v8 = (unsigned char *)v6;
    unint64_t v9 = (char *)v5;
  }
  else
  {
    int v8 = (unsigned char *)v6;
    unint64_t v9 = (char *)v5;
    if ((unint64_t)(v6 - v5) >= 0x20)
    {
      if (v4 < 0x20)
      {
        unint64_t v10 = 0;
        goto LABEL_12;
      }
      unint64_t v10 = v4 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v11 = (long long *)(v5 + 16);
      uint64_t v12 = (_OWORD *)(v6 + 16);
      unint64_t v13 = v4 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *uint64_t v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 32;
      }
      while (v13);
      if (v4 == v10) {
        goto LABEL_18;
      }
      if ((v4 & 0x18) != 0)
      {
LABEL_12:
        int v8 = (unsigned char *)(v6 + (v4 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v9 = (char *)(v5 + (v4 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v15 = (uint64_t *)(v5 + v10);
        uint64_t v16 = (void *)(v6 + v10);
        unint64_t v17 = v10 - (v4 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v18 = *v15++;
          *v16++ = v18;
          v17 += 8;
        }
        while (v17);
        if (v4 == (v4 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      unint64_t v9 = (char *)(v5 + v10);
      int v8 = (unsigned char *)(v6 + v10);
    }
  }
  do
  {
LABEL_17:
    char v19 = *v9++;
    *v8++ = v19;
  }
  while (v9 != (char *)(v5 + v4));
LABEL_18:
  *(unsigned char *)(v6 + v4) = 0;
LABEL_19:
  *(void *)(__sz + 80) += 32;
  if (*(void *)__sz) {
    BOOL v20 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 32 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v20 = 1;
  }
  if (v20)
  {
    unsigned int v21 = *(_DWORD *)(__sz + 24) >> 7;
    if (v21 >= 0x1E) {
      LOBYTE(v21) = 30;
    }
    uint64_t v22 = 4096 << v21;
    buffer = (char *)llvm::allocate_buffer(4096 << v21, (std::align_val_t)8uLL);
    uint64_t v24 = *(unsigned int *)(__sz + 24);
    if (v24 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v24 + 1, 8);
      LODWORD(v24) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v24) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v22];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 4;
  *uint64_t result = 0;
  result[1] = v3;
  result[2] = v7;
  result[3] = v4;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  {
    uint64_t v10 = a1;
    a1 = v10;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a1 = v10;
    }
  }
  uint64_t v16 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v13[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a1, *(void *)a1 + 8 * *(void *)(a1 + 8));
  unint64_t v11 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v11, (void *)v13 + 1, (unint64_t)v14, (*a2 >> 4) ^ (*a2 >> 9));
  unint64_t v12 = v11;
  uint64_t v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v13, (uint64_t *)&v12, v5, (unint64_t)v14, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v13, v12, v6, (char *)v14);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 16);
  return v3 == *(void *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(void *)(a2 + 24) == *(void *)(v2 + 16)
      && *(void *)(a2 + 32) == *(void *)(v2 + 24);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  __n128 v4 = mlir::detail::RankedTensorTypeStorage::construct(a2, (__n128 *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::detail::RankedTensorTypeStorage::construct(size_t __sz, __n128 *a2)
{
  unint64_t v3 = a2->n128_u64[1];
  __n128 v24 = a2[1];
  if (v3)
  {
    unint64_t v4 = a2->n128_u64[0];
    uint64_t v5 = 8 * v3;
    uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    uint64_t v7 = v6;
    if (8 * v3 - 8 < 0x18)
    {
      int v8 = (void *)v6;
      unint64_t v9 = (uint64_t *)v4;
    }
    else
    {
      int v8 = (void *)v6;
      unint64_t v9 = (uint64_t *)v4;
      if (v6 - v4 >= 0x20)
      {
        unint64_t v10 = ((unint64_t)(v5 - 8) >> 3) + 1;
        uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
        int v8 = (void *)(v6 + v11);
        unint64_t v9 = (uint64_t *)(v4 + v11);
        unint64_t v12 = (long long *)(v4 + 16);
        unint64_t v13 = (_OWORD *)(v6 + 16);
        uint64_t v14 = v10 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v15 = *v12;
          *(v13 - 1) = *(v12 - 1);
          *unint64_t v13 = v15;
          v12 += 2;
          v13 += 2;
          v14 -= 4;
        }
        while (v14);
        if (v10 == (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    do
    {
      uint64_t v16 = *v9++;
      *v8++ = v16;
    }
    while (v9 != (uint64_t *)(v4 + v5));
  }
  else
  {
    uint64_t v7 = 0;
  }
LABEL_11:
  *(void *)(__sz + 80) += 40;
  if (*(void *)__sz) {
    BOOL v17 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 40 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    unsigned int v18 = *(_DWORD *)(__sz + 24) >> 7;
    if (v18 >= 0x1E) {
      LOBYTE(v18) = 30;
    }
    uint64_t v19 = 4096 << v18;
    buffer = (char *)llvm::allocate_buffer(4096 << v18, (std::align_val_t)8uLL);
    uint64_t v21 = *(unsigned int *)(__sz + 24);
    if (v21 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v21 + 1, 8);
      LODWORD(v21) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v21) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v19];
    unint64_t v22 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v22 = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)__sz = v22 + 40;
  *(void *)unint64_t v22 = 0;
  *(void *)(v22 + 8) = v7;
  *(void *)(v22 + 16) = v3;
  __n128 result = v24;
  *(__n128 *)(v22 + 24) = v24;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v2) {
    return 0;
  }
  uint64_t v3 = a2 + 16;
  uint64_t v4 = 0;
  if (v2)
  {
    uint64_t v5 = **a1;
    uint64_t v6 = 8 * v2 - 8;
    uint64_t v7 = (void *)(a2 + 16);
    while (*v7 == mlir::TypeRange::dereference_iterator(v5, v4))
    {
      ++v4;
      ++v7;
      if (!v6) {
        return v4 == v2 && v7 == (void *)(v3 + 8 * v2);
      }
      v6 -= 8;
    }
    return 0;
  }
  uint64_t v7 = (void *)(a2 + 16);
  return v4 == v2 && v7 == (void *)(v3 + 8 * v2);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *__sz)
{
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 8);
  uint64_t v5 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v4 + 16, 3);
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = v4;
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(v5 + 16 + 8 * i) = mlir::TypeRange::dereference_iterator(v3, i);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)v7) {
    (*(void (**)(void, uint64_t))v7)(*(void *)(v7 + 8), v5);
  }
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if ((*a1)[1] != v2) {
    return 0;
  }
  uint64_t v3 = a2 + 16;
  uint64_t v4 = 0;
  if (v2)
  {
    uint64_t v5 = **a1;
    uint64_t v6 = 8 * v2 - 8;
    uint64_t v7 = (void *)(a2 + 16);
    while (*v7 == mlir::TypeRange::dereference_iterator(v5, v4))
    {
      ++v4;
      ++v7;
      if (!v6) {
        return v4 == v2 && v7 == (void *)(v3 + 8 * v2);
      }
      v6 -= 8;
    }
    return 0;
  }
  uint64_t v7 = (void *)(a2 + 16);
  return v4 == v2 && v7 == (void *)(v3 + 8 * v2);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t *__sz)
{
  uint64_t v3 = **(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 8);
  uint64_t v5 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v4 + 16, 3);
  *(void *)uint64_t v5 = 0;
  *(_DWORD *)(v5 + 8) = v4;
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(v5 + 16 + 8 * i) = mlir::TypeRange::dereference_iterator(v3, i);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(void *)v7) {
    (*(void (**)(void, uint64_t))v7)(*(void *)(v7 + 8), v5);
  }
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<mlir::Type,mlir::Attribute>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  {
    uint64_t v7 = a2;
    int v8 = a1;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v6;
      a2 = v7;
      a1 = v8;
    }
  }
  uint64_t v2 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v13 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v9 = 0;
  *(void *)&v10[0] = v2;
  uint64_t v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v10, (uint64_t *)&v9, (void *)v10 + 1, (unint64_t)v11, (*a2 >> 4) ^ (*a2 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v10, v9, v3, (char *)v11);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **(void **)a1 && *(void *)(a2 + 16) == *(void *)(*(void *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedMemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedMemRefTypeStorage,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::UnrankedMemRefTypeStorage *)>,mlir::TypeID,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, uint64_t a2)
{
  long long v4 = **a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v13 = v4;
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v13;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  *(void *)unint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  uint64_t v11 = a1[1];
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*((void *)v11 + 1), v10);
  }
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedMemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedMemRefTypeEJRNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v17 = *a5;
  unint64_t v6 = 0x1E8EB8000uLL;
  {
    uint64_t v14 = a1;
    unint64_t v6 = 0x1E8EB8000uLL;
    int v11 = v10;
    uint64_t v5 = a4;
    a1 = v14;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      unint64_t v6 = 0x1E8EB8000;
      uint64_t v5 = a4;
      a1 = v14;
    }
  }
  uint64_t v7 = *(void *)(v6 + 3024);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (8 * ((v17 >> 4) ^ (v17 >> 9)) + 8));
  v15[0] = &v17;
  v15[1] = v18;
  uint64_t v16 = &v17;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v5, -348639895* ((((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 32) >> 15) ^ (-348639895* (v7 ^ (v8 >> 47) ^ v8))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v16, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void **a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **a1;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::UnrankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(llvm::function_ref<void ()(mlir::detail::UnrankedTensorTypeStorage *)>,mlir::TypeID,mlir::Type &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = **a1;
  a2[10] += 16;
  uint64_t v5 = *a2;
  unint64_t v6 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v7 = v6 + 16 > a2[1] - *a2;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)a2 + 6) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (v11 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v11) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v9];
    unint64_t v12 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *a2 = (uint64_t)(v12 + 2);
    *unint64_t v12 = 0;
    v12[1] = v4;
    long long v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v12 = (void *)(v5 + v6);
    *a2 = v5 + v6 + 16;
    *unint64_t v12 = 0;
    v12[1] = v4;
    long long v13 = a1[1];
    uint64_t v14 = (void (*)(uint64_t, void *))*v13;
    if (*v13) {
LABEL_13:
    }
      v14(v13[1], v12);
  }
  return v12;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    uint64_t v11 = a1;
    a1 = v11;
    if (v9)
    {
      unint64_t v10 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v10 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v10;
      a1 = v11;
    }
  }
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a1, *(void *)a1 + 8 * *(void *)(a1 + 8));
  unint64_t v12 = 0;
  uint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, (*a2 >> 4) ^ (*a2 >> 9));
  unint64_t v13 = v12;
  unint64_t v6 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a3, *(void *)a3 + *(void *)(a3 + 8));
  BOOL v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, v6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v7, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 == *(void *)(*a1 + 8)
    && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
    && *(void *)(a2 + 24) == *(void *)(v2 + 16)
    && (size_t v5 = *(void *)(a2 + 40), v5 == *(void *)(v2 + 32)))
  {
    return memcmp(*(const void **)(a2 + 32), *(const void **)(v2 + 24), v5) == 0;
  }
  else
  {
    return 0;
  }
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::VectorTypeStorage * mlir::StorageUniquer::get<mlir::detail::VectorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::VectorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3 = mlir::detail::VectorTypeStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::VectorTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v5 = a2[4];
  if (!v3)
  {
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v7 = *a2;
  uint64_t v8 = 8 * v3;
  uint64_t v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
  uint64_t v10 = v9;
  if ((unint64_t)(8 * v3 - 8) < 0x18)
  {
    uint64_t v11 = (void *)v9;
    unint64_t v12 = (uint64_t *)v7;
    do
    {
LABEL_10:
      uint64_t v19 = *v12++;
      *v11++ = v19;
    }
    while (v12 != (uint64_t *)(v7 + v8));
    goto LABEL_11;
  }
  uint64_t v11 = (void *)v9;
  unint64_t v12 = (uint64_t *)v7;
  if ((unint64_t)(v9 - v7) < 0x20) {
    goto LABEL_10;
  }
  unint64_t v13 = ((unint64_t)(v8 - 8) >> 3) + 1;
  uint64_t v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v11 = (void *)(v9 + v14);
  unint64_t v12 = (uint64_t *)(v7 + v14);
  long long v15 = (long long *)(v7 + 16);
  uint64_t v16 = (_OWORD *)(v9 + 16);
  uint64_t v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v18 = *v15;
    *(v16 - 1) = *(v15 - 1);
    *uint64_t v16 = v18;
    v15 += 2;
    v16 += 2;
    v17 -= 4;
  }
  while (v17);
  if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (v5)
  {
    BOOL v20 = (char *)v6;
    uint64_t v21 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, v5, 0);
    uint64_t v22 = v21;
    if (v5 < 8)
    {
      uint64_t v23 = (unsigned char *)v21;
    }
    else
    {
      uint64_t v23 = (unsigned char *)v21;
      if ((unint64_t)(v21 - v6) >= 0x20)
      {
        if (v5 < 0x20)
        {
          unint64_t v24 = 0;
          goto LABEL_22;
        }
        unint64_t v24 = v5 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v25 = (long long *)(v6 + 16);
        long long v26 = (_OWORD *)(v21 + 16);
        unint64_t v27 = v5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v28 = *v25;
          *(v26 - 1) = *(v25 - 1);
          _OWORD *v26 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 32;
        }
        while (v27);
        if (v5 == v24) {
          goto LABEL_28;
        }
        if ((v5 & 0x18) != 0)
        {
LABEL_22:
          uint64_t v23 = (unsigned char *)(v21 + (v5 & 0xFFFFFFFFFFFFFFF8));
          BOOL v20 = (char *)(v6 + (v5 & 0xFFFFFFFFFFFFFFF8));
          unsigned int v29 = (uint64_t *)(v6 + v24);
          uint64_t v30 = (void *)(v21 + v24);
          unint64_t v31 = v24 - (v5 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            uint64_t v32 = *v29++;
            *v30++ = v32;
            v31 += 8;
          }
          while (v31);
          if (v5 == (v5 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_28;
          }
          goto LABEL_27;
        }
        BOOL v20 = (char *)(v6 + v24);
        uint64_t v23 = (unsigned char *)(v21 + v24);
      }
    }
    do
    {
LABEL_27:
      char v33 = *v20++;
      *v23++ = v33;
    }
    while (v20 != (char *)(v6 + v5));
    goto LABEL_28;
  }
  uint64_t v22 = 0;
LABEL_28:
  *(void *)(__sz + 80) += 48;
  if (*(void *)__sz) {
    BOOL v34 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 48 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v34 = 1;
  }
  if (v34)
  {
    unsigned int v35 = *(_DWORD *)(__sz + 24) >> 7;
    if (v35 >= 0x1E) {
      LOBYTE(v35) = 30;
    }
    uint64_t v36 = 4096 << v35;
    buffer = (char *)llvm::allocate_buffer(4096 << v35, (std::align_val_t)8uLL);
    uint64_t v38 = *(unsigned int *)(__sz + 24);
    if (v38 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v38 + 1, 8);
      LODWORD(v38) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v38) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v36];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 6;
  *uint64_t result = 0;
  result[1] = v10;
  result[2] = v3;
  result[3] = v4;
  result[4] = v22;
  result[5] = v5;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17VectorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10VectorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNSB_IbEEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t *mlir::Dialect::addType<mlir::ComplexType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  unint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  long long v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::ComplexType,mlir::Type,mlir::detail::ComplexTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  BOOL v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSB_18ComplexTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSA_18ComplexTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v23 = &v12;
  unint64_t v24 = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  unint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, 0, v10);
}

void *mlir::Dialect::addType<mlir::Float8E5M2Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E5M2Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_14Float8E5M2TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float8E4M3FNType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3FNType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_16Float8E4M3FNTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float8E5M2FNUZType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E5M2FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E5M2FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float8E4M3FNUZType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E4M3FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float8E4M3B11FNUZType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float8E4M3B11FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_21Float8E4M3B11FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::BFloat16Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::BFloat16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12BFloat16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float16Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::FloatTF32Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FloatTF32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_13FloatTF32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float32Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float64Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float64Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float64TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float80Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float80Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float80TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

void *mlir::Dialect::addType<mlir::Float128Type>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::Float128Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12Float128TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::FunctionType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  unint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FunctionType,mlir::Type,mlir::detail::FunctionTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  BOOL v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSB_19FunctionTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSA_19FunctionTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v23 = &v12;
  unint64_t v24 = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  unint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, 0, v10);
}

void *mlir::Dialect::addType<mlir::IndexType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  char v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IndexType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  unint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  char v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_9IndexTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::IntegerType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  unint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::IntegerType,mlir::Type,mlir::detail::IntegerTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  BOOL v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSB_18IntegerTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSA_18IntegerTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v23 = &v12;
  unint64_t v24 = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  unint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    unint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::MemRefType>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractType::get<mlir::MemRefType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id, 0, v9);
}

void *mlir::Dialect::addType<mlir::NoneType>(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  memset(v26, 0, sizeof(v26));
  unint64_t v24 = (mlir::MLIRContext **)v26;
  LODWORD(v25) = 0;
  unsigned int v13 = (uint64_t (*)(uint64_t, uint64_t *))a1;
  uint64_t v14 = v16;
  uint64_t v15 = 0x300000000;
  unint64_t v18 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v17[0] = (llvm *)mlir::detail::StorageUserBase<mlir::NoneType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  unint64_t v19 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  BOOL v20 = &v12;
  uint64_t v21 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v22 = &v11;
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id, (uint64_t)&v13);
  char v3 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v4 = v17;
      }
      else {
        uint64_t v4 = (llvm **)v17[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v17[0], v17[1]);
    }
  }
  uint64_t v5 = v14;
  if (v15)
  {
    uint64_t v6 = 16 * v15;
    uint64_t v7 = (void **)((char *)v14 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v14;
  }
  if (v5 != v16) {
    free(v5);
  }
  uint64_t v11 = *(mlir::MLIRContext **)(a1 + 32);
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(v11);
  unint64_t v24 = &v11;
  unint64_t v25 = &mlir::detail::TypeIDResolver<mlir::NoneType,void>::id;
  unsigned int v13 = _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_8NoneTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v14 = &v24;
  char v12 = &v13;
  return mlir::StorageUniquer::registerSingletonImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v12);
}

uint64_t *mlir::Dialect::addType<mlir::OpaqueType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  unint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::OpaqueType,mlir::Type,mlir::detail::OpaqueTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  BOOL v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSB_17OpaqueTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSA_17OpaqueTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v23 = &v12;
  unint64_t v24 = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::RankedTensorType>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractType::get<mlir::RankedTensorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::TupleType>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  unint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::TupleType,mlir::Type,mlir::detail::TupleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  BOOL v20 = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSB_16TupleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSA_16TupleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  uint64_t v23 = &v12;
  unint64_t v24 = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        uint64_t v4 = v18;
      }
      else {
        uint64_t v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  uint64_t v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      uint64_t v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addType<mlir::UnrankedMemRefType>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractType::get<mlir::UnrankedMemRefType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::UnrankedTensorType>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractType::get<mlir::UnrankedTensorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, 0, v9);
}

uint64_t *mlir::Dialect::addType<mlir::VectorType>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  mlir::AbstractType::get<mlir::VectorType>(a1, (uint64_t)v11);
  mlir::Dialect::addType(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, (uint64_t)v11);
  char v2 = v16;
  if (v16 >= 8)
  {
    if ((v16 & 4) != 0)
    {
      if ((v16 & 2) != 0) {
        char v3 = v15;
      }
      else {
        char v3 = (llvm **)v15[0];
      }
      (*(void (**)(llvm **))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v3);
    }
    if ((v2 & 2) == 0) {
      llvm::deallocate_buffer(v15[0], v15[1]);
    }
  }
  uint64_t v4 = (uint64_t *)v12;
  if (v13)
  {
    uint64_t v5 = 16 * v13;
    uint64_t v6 = (void **)((char *)v12 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = (uint64_t *)v12;
  }
  if (v4 != &v14) {
    free(v4);
  }
  TypeUniquer = (uint64_t *)mlir::MLIRContext::getTypeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::VectorType,void>::id, 0, v9);
}

uint64_t mlir::detail::StorageUserBase<mlir::ComplexType,mlir::Type,mlir::detail::ComplexTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSB_18ComplexTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11ComplexTypeES2_NSA_18ComplexTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v5 = *a5;
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v9 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id;
  v10[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::ComplexTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18ComplexTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11ComplexTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::ComplexType,void>::id, &v9);
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E5M2Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14Float8E5M2TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::TypeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::TypeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void (***a1)(void, void *), uint64_t *a2)
{
  a2[10] += 8;
  uint64_t v4 = *a2;
  unint64_t v5 = ((*a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (*a2) {
    BOOL v6 = v5 + 8 > a2[1] - *a2;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unsigned int v7 = *((_DWORD *)a2 + 6) >> 7;
    if (v7 >= 0x1E) {
      LOBYTE(v7) = 30;
    }
    uint64_t v8 = 4096 << v7;
    buffer = (char *)llvm::allocate_buffer(4096 << v7, (std::align_val_t)8uLL);
    uint64_t v10 = *((unsigned int *)a2 + 6);
    if (v10 >= *((_DWORD *)a2 + 7))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a2 + 2), a2 + 4, v10 + 1, 8);
      LODWORD(v10) = *((_DWORD *)a2 + 6);
    }
    *(void *)(a2[2] + 8 * v10) = buffer;
    ++*((_DWORD *)a2 + 6);
    a2[1] = (uint64_t)&buffer[v8];
    uint64_t v11 = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v11 = 0;
    *a2 = (uint64_t)(v11 + 1);
    char v12 = *a1;
    unsigned int v13 = **a1;
    if (v13) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v11 = (void *)(v4 + v5);
    uint64_t v14 = (void *)(v4 + v5);
    *uint64_t v14 = 0;
    *a2 = (uint64_t)(v14 + 1);
    char v12 = *a1;
    unsigned int v13 = **a1;
    if (v13) {
LABEL_13:
    }
      v13(v12[1], v11);
  }
  return v11;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_14Float8E5M2TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3FNType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16Float8E4M3FNTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_16Float8E4M3FNTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E5M2FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E5M2FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E5M2FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18Float8E4M3FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_18Float8E4M3FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float8E4M3B11FNUZType,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_21Float8E4M3B11FNUZTypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_21Float8E4M3B11FNUZTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::BFloat16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12BFloat16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12BFloat16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float16Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float16TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float16TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::FloatTF32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_13FloatTF32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_13FloatTF32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float32Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float32TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float32TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float64Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float64TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float64TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float80Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11Float80TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_11Float80TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::Float128Type,mlir::FloatType,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12Float128TypeENS1_9FloatTypeENS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_12Float128TypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::FunctionType,mlir::Type,mlir::detail::FunctionTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSB_19FunctionTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return mlir::detail::walkImmediateSubElementsImpl<mlir::FunctionType>(a2, a3, a4, a5, a6);
}

uint64_t mlir::detail::walkImmediateSubElementsImpl<mlir::FunctionType>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(unsigned int *)(a1 + 8);
  unint64_t v11 = *(unsigned int *)(a1 + 12);
  uint64_t v12 = v9 + 8 * v10;
  mlir::ValueRange::ValueRange((unint64_t *)&v23, v9, v10);
  uint64_t result = (uint64_t)mlir::ValueRange::ValueRange((unint64_t *)&v25, v12, v11);
  v22[0] = a2;
  v22[1] = a3;
  void v22[2] = a4;
  v22[3] = a5;
  uint64_t v14 = v24;
  if (v24)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v23;
    do
    {
      unint64_t v17 = mlir::TypeRange::dereference_iterator(v16, v15);
      uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v22, v17);
      ++v15;
    }
    while (v14 != v15);
  }
  uint64_t v18 = v26;
  if (v26)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v25;
    do
    {
      unint64_t v21 = mlir::TypeRange::dereference_iterator(v20, v19);
      uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v22, v21);
      ++v19;
    }
    while (v18 != v19);
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_12FunctionTypeES2_NSA_19FunctionTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FunctionType>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FunctionType>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = *(unsigned int *)(a1 + 12);
  uint64_t v7 = v4 + 8 * v5;
  mlir::ValueRange::ValueRange(&v24, v4, v5);
  mlir::ValueRange::ValueRange(&v26, v7, v6);
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  unint64_t v10 = v9 - v25;
  if (v9 >= v25) {
    unint64_t v11 = v25;
  }
  else {
    unint64_t v11 = a3[1];
  }
  uint64_t v12 = v8 + 8 * v25;
  unsigned int v13 = mlir::ValueRange::ValueRange((unint64_t *)&v30, v8, v11);
  uint64_t v14 = v30;
  uint64_t v15 = v31;
  if (v10 >= v27) {
    unint64_t v16 = v27;
  }
  else {
    unint64_t v16 = v10;
  }
  mlir::ValueRange::ValueRange(v13, v12, v16);
  unint64_t v17 = v30;
  uint64_t v18 = v31;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v22);
  *(void *)&long long v29 = v14;
  *((void *)&v29 + 1) = v15;
  *(void *)&long long v28 = v17;
  *((void *)&v28 + 1) = v18;
  uint64_t v23 = Context;
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  uint64_t v30 = &mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id;
  unint64_t v31 = &v23;
  return mlir::StorageUniquer::get<mlir::detail::FunctionTypeStorage,mlir::TypeRange &,mlir::TypeRange &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail19FunctionTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_12FunctionTypeEJRNS1_9TypeRangeESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)&v30, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FunctionType,void>::id, &v29, &v28);
}

uint64_t mlir::detail::StorageUserBase<mlir::IndexType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9IndexTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_9IndexTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::IntegerType,mlir::Type,mlir::detail::IntegerTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11IntegerTypeES2_NSA_18IntegerTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  unsigned int v3 = v2 & 0x3FFFFFFF;
  unsigned int v4 = v2 >> 30;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v7);
  return mlir::IntegerType::get(Context, v3, v4);
}

void mlir::AbstractType::get<mlir::MemRefType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  unint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSB_17MemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSA_17MemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::MemRefType,void>::id;
  unsigned int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    unint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    unsigned int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>>(uint64_t a1)
{
  unsigned int v2 = malloc(0x20uLL);
  *unsigned int v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getShape;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    unsigned int v2 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v14 = 66;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      unsigned int v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3720), v2);
}

void *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)a3;
  unint64_t v6 = *(mlir::AffineMap **)(a3 + 8);
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    if (!*(unsigned char *)(a3 + 16))
    {
      unint64_t v5 = *(void **)(a2 + 8);
      unint64_t v6 = *(mlir::AffineMap **)(a2 + 16);
    }
    uint64_t v7 = (void *)mlir::MemRefType::get(v5, v6, a4, *(void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
    if (!v7) {
      return v7;
    }
LABEL_8:
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    return v7;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v7 = (void *)mlir::MemRefType::get(v5, v6, a4, 0, 0, *(void *)(a2 + 16));
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v7 = (void *)mlir::UnrankedMemRefType::get(a4, *(void *)(a2 + 16));
    if (v7) {
      goto LABEL_8;
    }
  }
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::MemRefType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::MemRefType,mlir::BaseMemRefType,mlir::detail::MemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      unsigned int v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[123] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSB_17MemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[6];
  v10[0] = a3;
  v10[1] = a4;
  void v10[2] = a5;
  v10[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v6);
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v7);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v10, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10MemRefTypeENS1_14BaseMemRefTypeENSA_17MemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v8 = a3;
  *((void *)&v8 + 1) = a4;
  *(void *)&long long v7 = a5;
  *((void *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::MemRefType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::MemRefType>(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = a1;
  long long v11 = *a2;
  long long v12 = v3;
  long long v10 = *a3;
  v17[0] = (uint64_t **)&v11;
  v17[1] = (uint64_t **)&v10;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::MemRefLayoutAttrInterface const&,mlir::Attribute const&)#1}::operator()(v17, (uint64_t)&v12, &v13, &v14, &v15, (uint64_t)&v23);
  mlir::Attribute::getContext((mlir::Attribute *)&v16);
  uint64_t v18 = v20;
  uint64_t v19 = 0x600000000;
  int v4 = (mlir::AffineMap *)v24;
  if (!v24)
  {
    int v4 = 0;
    long long v7 = v20;
    goto LABEL_9;
  }
  if (v24 < 7)
  {
    uint64_t v6 = v20;
    unsigned int v5 = v24;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v24, 8);
  unsigned int v5 = v24;
  if (v24)
  {
    uint64_t v6 = v18;
LABEL_7:
    memcpy(v6, v23, 8 * v5);
  }
  LODWORD(v19) = v4;
  long long v7 = v18;
LABEL_9:
  long long v21 = v27;
  v20[6] = v26;
  uint64_t v22 = v28;
  uint64_t v8 = mlir::MemRefType::get(v7, v4, v26, (void *)v27, *((uint64_t *)&v27 + 1), v28);
  if (v18 != v20) {
    free(v18);
  }
  if (v23 != &v25) {
    free(v23);
  }
  return v8;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::MemRefLayoutAttrInterface const&,mlir::Attribute const&)#1}::operator()(uint64_t ***a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  v31[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(void *)(a2 + 8), (uint64_t)&__src);
  if (*a3)
  {
    long long v11 = a1[1];
    long long v12 = *v11;
    uint64_t v13 = (uint64_t)v11[1] - 1;
    ++*v11;
    v11[1] = (uint64_t *)v13;
    uint64_t v14 = *v12;
    if (*a4) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    if (*a5) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v23 = 0;
    goto LABEL_11;
  }
  uint64_t v14 = 0;
  if (!*a4) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v15 = *a1;
  uint64_t v16 = **a1;
  uint64_t v17 = (uint64_t)(*a1)[1] - 1;
  *uint64_t v15 = v16 + 1;
  v15[1] = (uint64_t *)v17;
  uint64_t v18 = (void *)*v16;
  if (!*v16)
  {
    uint64_t v19 = 0;
    if (*a5) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  uint64_t v19 = mlir::detail::InterfaceMap::lookup<mlir::MemRefLayoutAttrInterface>(*v18 + 8);
  if (!*a5) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v20 = *a1;
  long long v21 = **a1;
  uint64_t v22 = (uint64_t)(*a1)[1] - 1;
  *uint64_t v20 = v21 + 1;
  v20[1] = (uint64_t *)v22;
  uint64_t v23 = *v21;
LABEL_11:
  *(void *)a6 = a6 + 16;
  *(void *)(a6 + 8) = 0x600000000;
  unsigned int v24 = v29;
  uint64_t v25 = __src;
  if (v29 && &__src != (void **)a6)
  {
    if (__src == v31)
    {
      unsigned int v27 = v29;
      if (v29 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a6, (void *)(a6 + 16), v29, 8), v27 = v29, uint64_t v25 = __src, v29))
      {
        memcpy(*(void **)a6, v25, 8 * v27);
        uint64_t v25 = __src;
      }
      *(_DWORD *)(a6 + 8) = v24;
    }
    else
    {
      *(void *)a6 = __src;
      int v26 = v30;
      *(_DWORD *)(a6 + 8) = v24;
      *(_DWORD *)(a6 + 12) = v26;
      __src = v31;
      int v30 = 0;
      uint64_t v25 = v31;
    }
    unsigned int v29 = 0;
  }
  *(void *)(a6 + 64) = v14;
  *(void *)(a6 + 72) = v18;
  *(void *)(a6 + 80) = v19;
  *(void *)(a6 + 88) = v23;
  if (v25 != v31) {
    free(v25);
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::NoneType,mlir::Type,mlir::TypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8NoneTypeES2_NS1_11TypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir11TypeStorageEEE11callback_fnIZNS1_6detail11TypeUniquer12registerTypeINS1_8NoneTypeEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)(a1 + 8), **(void **)a1);
  *a2 = result;
  return result;
}

uint64_t mlir::detail::StorageUserBase<mlir::OpaqueType,mlir::Type,mlir::detail::OpaqueTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSB_17OpaqueTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10OpaqueTypeES2_NSA_17OpaqueTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueType>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::OpaqueType>(void *a1, uint64_t **a2)
{
  uint64_t v8 = a1;
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  if (a1[1]) {
    uint64_t v4 = **a2;
  }
  else {
    uint64_t v4 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v9 = v4;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id;
  v10[1] = &Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail17OpaqueTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10OpaqueTypeEJRNS1_10StringAttrERNS_9StringRefEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v16[1] = v10;
  uint64_t v14 = v9;
  v15[0] = v2;
  v15[1] = v3;
  unsigned int v6 = llvm::hash_combine<mlir::StringAttr,llvm::StringRef>(&v14, (uint64_t)v15);
  v12[0] = &v14;
  v12[1] = v16;
  uint64_t v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueType,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueTypeStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueTypeStorage,mlir::StringAttr &,llvm::StringRef &>(llvm::function_ref<void ()(mlir::detail::OpaqueTypeStorage *)>,mlir::TypeID,mlir::StringAttr &,llvm::StringRef &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

void mlir::AbstractType::get<mlir::RankedTensorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  long long v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::RankedTensorType,mlir::TensorType,mlir::detail::RankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSB_23RankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSA_23RankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  uint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    unsigned int v6 = (void **)((char *)v11 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getShape;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v14 = 66;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3720), v2);
}

void *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::cloneWith(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v9 = a2;
  int v4 = (void *)mlir::TensorType::cloneWith((uint64_t)&v9, (uint64_t)&v7, a4);
  unint64_t v5 = v4;
  if (!v4) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  return v5;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::RankedTensorType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::RankedTensorType,mlir::TensorType,mlir::detail::RankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[123] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSB_23RankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_16RankedTensorTypeENS1_10TensorTypeENSA_23RankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v8 = a3;
  *((void *)&v8 + 1) = a4;
  *(void *)&long long v7 = a5;
  *((void *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::RankedTensorType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::RankedTensorType>(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a1;
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v16 = *(_OWORD *)(a1 + 8);
  long long v17 = v3;
  long long v4 = *a2;
  long long v14 = *a3;
  long long v15 = v4;
  unsigned int v24 = &v15;
  uint64_t v25 = &v14;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::Attribute const&)#1}::operator()((uint64_t)&v24, (uint64_t)&v16, &v17, (void *)&v17 + 1, (uint64_t)&v32);
  mlir::Attribute::getContext((mlir::Attribute *)&v18);
  unsigned int v29 = v31;
  uint64_t v30 = 0x600000000;
  unint64_t v5 = (long long *)v33;
  if (!v33)
  {
    unint64_t v5 = 0;
    long long v8 = (long long *)v31;
    goto LABEL_9;
  }
  if (v33 < 7)
  {
    long long v7 = v31;
    unsigned int v6 = v33;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, v31, v33, 8);
  unsigned int v6 = v33;
  if (v33)
  {
    long long v7 = v29;
LABEL_7:
    memcpy(v7, v32, 8 * v6);
  }
  LODWORD(v30) = v5;
  long long v8 = (long long *)v29;
LABEL_9:
  uint64_t v9 = v36;
  v31[6] = v35;
  void v31[7] = v36;
  uint64_t v19 = v35;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v19);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v20[0] = &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
  v20[1] = &Context;
  v28[0] = _ZN4llvm12function_refIFvPN4mlir6detail23RankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_16RankedTensorTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESK_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSM_E_EEvlS4_;
  v28[1] = v20;
  unsigned int v24 = v8;
  uint64_t v25 = v5;
  uint64_t v26 = v19;
  uint64_t v27 = v9;
  unsigned int v11 = llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>((uint64_t)&v24, &v26, &v27);
  v22[0] = &v24;
  v22[1] = v28;
  uint64_t v23 = &v24;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id, v11, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v23, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::RankedTensorTypeStorage * mlir::StorageUniquer::get<mlir::detail::RankedTensorTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::RankedTensorTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v22);
  if (v29 != v31) {
    free(v29);
  }
  if (v32 != &v34) {
    free(v32);
  }
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,mlir::Attribute> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,mlir::Attribute const&)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  v24[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(void *)(a2 + 8), (uint64_t)&__src);
  if (!*a3)
  {
    uint64_t v12 = 0;
    if (*a4) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v16 = 0;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(uint64_t **)v9;
  uint64_t v11 = *(void *)(v9 + 8) - 1;
  *(void *)v9 += 8;
  *(void *)(v9 + 8) = v11;
  uint64_t v12 = *v10;
  if (!*a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = *(uint64_t ***)a1;
  long long v14 = **(uint64_t ***)a1;
  uint64_t v15 = *(void *)(*(void *)a1 + 8) - 1;
  *uint64_t v13 = v14 + 1;
  v13[1] = (uint64_t *)v15;
  uint64_t v16 = *v14;
LABEL_6:
  *(void *)a5 = a5 + 16;
  *(void *)(a5 + 8) = 0x600000000;
  unsigned int v17 = v22;
  uint64_t v18 = __src;
  if (v22 && &__src != (void **)a5)
  {
    if (__src == v24)
    {
      unsigned int v20 = v22;
      if (v22 < 7
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v22, 8), v20 = v22, uint64_t v18 = __src, v22))
      {
        memcpy(*(void **)a5, v18, 8 * v20);
        uint64_t v18 = __src;
      }
      *(_DWORD *)(a5 + 8) = v17;
    }
    else
    {
      *(void *)a5 = __src;
      int v19 = v23;
      *(_DWORD *)(a5 + 8) = v17;
      *(_DWORD *)(a5 + 12) = v19;
      __src = v24;
      int v23 = 0;
      uint64_t v18 = v24;
    }
    unsigned int v22 = 0;
  }
  *(void *)(a5 + 64) = v12;
  *(void *)(a5 + 72) = v16;
  if (v18 != v24) {
    free(v18);
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::TupleType,mlir::Type,mlir::detail::TupleTypeStorage,mlir::detail::TypeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSB_16TupleTypeStorageENSB_11TypeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)mlir::ValueRange::ValueRange(&v15, a2 + 16, *(unsigned int *)(a2 + 8));
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  unint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  if (v12)
  {
    for (uint64_t i = 0; i != v12; ++i)
    {
      unint64_t v14 = mlir::TypeRange::dereference_iterator(v11, i);
      uint64_t result = mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)&v15, v14);
    }
  }
  return result;
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9TupleTypeES2_NSA_16TupleTypeStorageENSA_11TypeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = a3;
  v8[1] = a4;
  v7[0] = a5;
  v7[1] = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::TupleType>(a2, (uint64_t)v8, v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::TupleType>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = a1;
  mlir::ValueRange::ValueRange((unint64_t *)&v16, a1 + 16, *(unsigned int *)(a1 + 8));
  if (a3[1] >= (unint64_t)v17) {
    unint64_t v4 = v17;
  }
  else {
    unint64_t v4 = a3[1];
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v16, *a3, v4);
  uint64_t v5 = (uint64_t)v16;
  uint64_t v6 = (uint64_t)v17;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::TupleType,void>::id;
  v11[1] = &Context;
  uint64_t v16 = _ZN4llvm12function_refIFvPN4mlir6detail16TupleTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_9TupleTypeEJRNS1_9TypeRangeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  uint64_t v17 = v11;
  v15[0] = v5;
  v15[1] = v6;
  unsigned int v8 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v5, 0, v5, v6);
  v13[1] = &v16;
  unint64_t v14 = v15;
  v13[0] = v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(TypeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::TupleType,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::TupleTypeStorage * mlir::StorageUniquer::get<mlir::detail::TupleTypeStorage,mlir::TypeRange &>(llvm::function_ref<void ()(mlir::detail::TupleTypeStorage *)>,mlir::TypeID,mlir::TypeRange &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

void mlir::AbstractType::get<mlir::UnrankedMemRefType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::UnrankedMemRefType,mlir::BaseMemRefType,mlir::detail::UnrankedMemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSB_25UnrankedMemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSA_25UnrankedMemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
  unint64_t v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    unint64_t v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getShape;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v14 = 66;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3720), v2);
}

void *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)a3;
  unint64_t v6 = *(mlir::AffineMap **)(a3 + 8);
  if (*(_UNKNOWN **)(*(void *)a2 + 136) != &mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id)
  {
    if (!*(unsigned char *)(a3 + 16))
    {
      unint64_t v5 = *(void **)(a2 + 8);
      unint64_t v6 = *(mlir::AffineMap **)(a2 + 16);
    }
    long long v7 = (void *)mlir::MemRefType::get(v5, v6, a4, *(void **)(a2 + 32), *(void *)(a2 + 40), *(void *)(a2 + 48));
    if (!v7) {
      return v7;
    }
LABEL_8:
    mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v7 + 8);
    return v7;
  }
  if (*(unsigned char *)(a3 + 16))
  {
    long long v7 = (void *)mlir::MemRefType::get(v5, v6, a4, 0, 0, *(void *)(a2 + 16));
    if (v7) {
      goto LABEL_8;
    }
  }
  else
  {
    long long v7 = (void *)mlir::UnrankedMemRefType::get(a4, *(void *)(a2 + 16));
    if (v7) {
      goto LABEL_8;
    }
  }
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedMemRefType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedMemRefType>::getShape()
{
  return 0;
}

BOOL mlir::detail::StorageUserBase<mlir::UnrankedMemRefType,mlir::BaseMemRefType,mlir::detail::UnrankedMemRefTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[123] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSB_25UnrankedMemRefTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedMemRefTypeENS1_14BaseMemRefTypeENSA_25UnrankedMemRefTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a2 + 8))
  {
    uint64_t v6 = 0;
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  uint64_t v6 = *a5;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v7 = *a3;
LABEL_6:
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  return mlir::UnrankedMemRefType::get(v6, v7);
}

void mlir::AbstractType::get<mlir::UnrankedTensorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::UnrankedTensorType,mlir::TensorType,mlir::detail::UnrankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSB_25UnrankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSA_25UnrankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getShape;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v14 = 66;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3720), v2);
}

void *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::cloneWith(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  long long v7 = *a3;
  uint64_t v8 = *((void *)a3 + 2);
  uint64_t v9 = a2;
  int v4 = (void *)mlir::TensorType::cloneWith((uint64_t)&v9, (uint64_t)&v7, a4);
  unint64_t v5 = v4;
  if (!v4) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v4 + 8);
  return v5;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::hasRank(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a2 + 136) != (void)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::UnrankedTensorType>::getShape()
{
  return 0;
}

BOOL mlir::detail::StorageUserBase<mlir::UnrankedTensorType,mlir::TensorType,mlir::detail::UnrankedTensorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[123] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSB_25UnrankedTensorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_18UnrankedTensorTypeENS1_10TensorTypeENSA_25UnrankedTensorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a2;
  if (*(void *)(a2 + 8)) {
    uint64_t v5 = *a5;
  }
  else {
    uint64_t v5 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v9 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  TypeUniquer = (unsigned __int8 **)mlir::MLIRContext::getTypeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id;
  v10[1] = &Context;
  return mlir::StorageUniquer::get<mlir::detail::UnrankedTensorTypeStorage,mlir::Type &>(TypeUniquer, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail25UnrankedTensorTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_18UnrankedTensorTypeEJRNS1_4TypeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_, (uint64_t)v10, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id, &v9);
}

void mlir::AbstractType::get<mlir::VectorType>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[6] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>>((uint64_t)&v11);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = a2 + 24;
  *(void *)(a2 + 16) = 0x300000000;
  if (v12) {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=(a2 + 8, (uint64_t)&v11);
  }
  *(void *)(a2 + 96) = (char *)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
                       + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
  {
    *(void *)(a2 + 72) = mlir::detail::StorageUserBase<mlir::VectorType,mlir::Type,mlir::detail::VectorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(void *)(a2 + 104) = _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSB_17VectorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_;
  *(void *)(a2 + 112) = &v9;
  *(void *)(a2 + 120) = _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSA_17VectorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_;
  *(void *)(a2 + 128) = &v8;
  *(void *)(a2 + 136) = &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
  int v4 = v11;
  if (v12)
  {
    uint64_t v5 = 16 * v12;
    uint64_t v6 = (void **)((char *)v11 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    int v4 = v11;
  }
  if (v4 != v13) {
    free(v4);
  }
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::cloneWith;
  v2[1] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getElementType;
  v2[2] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::hasRank;
  v2[3] = mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getShape;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType]";
      unint64_t v14 = 66;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3720), v2);
}

void *mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::cloneWith(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v4 = *(void *)a3;
    unint64_t v5 = (unint64_t *)(a3 + 8);
  }
  else
  {
    unint64_t v5 = (unint64_t *)(a2 + 16);
    uint64_t v4 = *(void *)(a2 + 8);
  }
  unint64_t v6 = (void *)mlir::VectorType::get(v4, *v5, a4, *(void **)(a2 + 32), *(void *)(a2 + 40));
  long long v7 = v6;
  if (!v6) {
    return 0;
  }
  mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v6 + 8);
  return v7;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getElementType(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::hasRank()
{
  return 1;
}

uint64_t mlir::detail::ShapedTypeInterfaceTraits::Model<mlir::VectorType>::getShape(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8);
}

BOOL mlir::detail::StorageUserBase<mlir::VectorType,mlir::Type,mlir::detail::VectorTypeStorage,mlir::detail::TypeUniquer,mlir::ShapedType::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke(uint64_t a1)
{
  uint64_t v1 = &unk_1E8EBA000;
  {
    uint64_t v12 = a1;
    uint64_t v1 = (void *)&unk_1E8EBA000;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ShapedType::Trait<Empty>]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      long long v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ShapedType::Trait<mlir::TypeID mlir::TypeID::get<mlir::ShapedType::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v1 = (void *)&unk_1E8EBA000;
      a1 = v12;
    }
  }
  return v1[123] == a1;
}

uint64_t _ZN4llvm12function_refIFvN4mlir4TypeENS0_IFvNS1_9AttributeEEEENS0_IFvS2_EEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSB_17VectorTypeStorageENSB_11TypeUniquerEJNS1_10ShapedType5TraitEEE29getWalkImmediateSubElementsFnEvEUlT_S5_S7_E_EEvlS2_S5_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 24);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir4TypeES2_NS_8ArrayRefINS1_9AttributeEEENS3_IS2_EEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10VectorTypeES2_NSA_17VectorTypeStorageENSA_11TypeUniquerEJNS1_10ShapedType5TraitEEE32getReplaceImmediateSubElementsFnEvEUlT_S5_S6_E_EES2_lS2_S5_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v8 = a3;
  *((void *)&v8 + 1) = a4;
  *(void *)&long long v7 = a5;
  *((void *)&v7 + 1) = a6;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::VectorType>(a2, &v8, &v7);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::VectorType>(uint64_t a1, long long *a2, long long *a3)
{
  v34[5] = *MEMORY[0x1E4F143B8];
  long long v3 = *(_OWORD *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 24);
  long long v18 = *(_OWORD *)(a1 + 32);
  long long v15 = *a2;
  long long v16 = v3;
  long long v14 = *a3;
  uint64_t v19 = a1;
  v20[0] = &v15;
  v20[1] = &v14;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,llvm::ArrayRef<BOOL> const&)#1}::operator()((uint64_t)v20, (uint64_t)&v16, &v17, (uint64_t)&v18, (uint64_t)&v28);
  mlir::Attribute::getContext((mlir::Attribute *)&v19);
  long long v21 = v23;
  uint64_t v22 = 0x600000000;
  unsigned int v4 = v29;
  if (v29)
  {
    if (v29 < 7)
    {
      uint64_t v6 = v23;
      unsigned int v5 = v29;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, v23, v29, 8);
      unsigned int v5 = v29;
      if (!v29)
      {
LABEL_7:
        LODWORD(v22) = v4;
        goto LABEL_8;
      }
      uint64_t v6 = v21;
    }
    memcpy(v6, v28, 8 * v5);
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v7 = v31;
  uint64_t v8 = v33;
  uint64_t v24 = v31;
  uint64_t v25 = v27;
  long long v26 = xmmword_1810FE310;
  if (!v33)
  {
    uint64_t v11 = v27;
    goto LABEL_16;
  }
  if (v33 < 0x29)
  {
    unint64_t v10 = v27;
    size_t v9 = v33;
    goto LABEL_14;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v25, v27, v33, 1);
  size_t v9 = v33;
  if (v33)
  {
    unint64_t v10 = v25;
LABEL_14:
    memcpy(v10, v32, v9);
  }
  *(void *)&long long v26 = v8;
  unsigned int v4 = v22;
  uint64_t v7 = v24;
  uint64_t v11 = v25;
LABEL_16:
  uint64_t v12 = mlir::VectorType::get((uint64_t)v21, v4, v7, v11, v8);
  if (v25 != v27) {
    free(v25);
  }
  if (v21 != v23) {
    free(v21);
  }
  if (v32 != v34) {
    free(v32);
  }
  if (v28 != &v30) {
    free(v28);
  }
  return v12;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>>,void>::replace(std::tuple<llvm::ArrayRef<long long>,mlir::Type,llvm::ArrayRef<BOOL>> const&,mlir::AttrTypeSubElementReplacements<mlir::Attribute> &,mlir::AttrTypeSubElementReplacements<mlir::Type> &)::{lambda(llvm::ArrayRef<long long> const&,mlir::Type const&,llvm::ArrayRef<BOOL> const&)#1}::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v26[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<long long>,void>::replace(*(uint64_t **)a2, *(void *)(a2 + 8), (uint64_t)&__src);
  if (*a3)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    unint64_t v10 = *(uint64_t **)v9;
    uint64_t v11 = *(void *)(v9 + 8) - 1;
    *(void *)v9 += 8;
    *(void *)(v9 + 8) = v11;
    uint64_t v12 = *v10;
  }
  else
  {
    uint64_t v12 = 0;
  }
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<BOOL>,void>::replace(*(char **)a4, *(void *)(a4 + 8), (uint64_t)&v19);
  *(void *)a5 = a5 + 16;
  *(void *)(a5 + 8) = 0x600000000;
  unsigned int v13 = v24;
  if (v24 && &__src != (void **)a5)
  {
    if (__src == v26)
    {
      unsigned int v15 = v24;
      if (v24 < 7 || (llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v24, 8), (unsigned int v15 = v24) != 0)) {
        memcpy(*(void **)a5, __src, 8 * v15);
      }
      *(_DWORD *)(a5 + 8) = v13;
    }
    else
    {
      *(void *)a5 = __src;
      int v14 = v25;
      *(_DWORD *)(a5 + 8) = v13;
      *(_DWORD *)(a5 + 12) = v14;
      __src = v26;
      int v25 = 0;
    }
    unsigned int v24 = 0;
  }
  *(void *)(a5 + 72) = a5 + 96;
  *(void *)(a5 + 64) = v12;
  *(_OWORD *)(a5 + 80) = xmmword_1810FE310;
  long long v16 = v19;
  if ((void **)(a5 + 72) != &v19)
  {
    unint64_t v17 = v20;
    if (v20)
    {
      if (v19 != v22)
      {
        *(void *)(a5 + 72) = v19;
        *(void *)(a5 + 80) = v17;
        *(void *)(a5 + 88) = v21;
        goto LABEL_23;
      }
      size_t v18 = v20;
      if (v20 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a5 + 72, (void *)(a5 + 96), v20, 1),
            long long v16 = v19,
            (size_t v18 = v20) != 0))
      {
        memcpy(*(void **)(a5 + 72), v16, v18);
        long long v16 = v19;
      }
      *(void *)(a5 + 80) = v17;
      unint64_t v20 = 0;
    }
  }
  if (v16 != v22) {
    free(v16);
  }
LABEL_23:
  if (__src != v26) {
    free(__src);
  }
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<BOOL>,void>::replace(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v20[5] = *MEMORY[0x1E4F143B8];
  size_t v18 = v20;
  long long v4 = xmmword_1810FE310;
  long long v19 = xmmword_1810FE310;
  if (a2)
  {
    uint64_t v5 = a2;
    unint64_t v6 = 0;
    uint64_t v7 = v20;
    do
    {
      while (v6 < *((void *)&v19 + 1))
      {
        char v8 = *a1++;
        *((unsigned char *)v18 + v6++) = v8;
        *(void *)&long long v19 = v6;
        if (!--v5) {
          goto LABEL_9;
        }
      }
      char v9 = *a1;
      unint64_t v10 = v6 + 1;
      if (v6 + 1 > *((void *)&v19 + 1))
      {
        uint64_t v16 = v5;
        unint64_t v17 = a1;
        uint64_t v11 = v7;
        char v15 = *a1;
        long long v14 = v4;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v18, v7, v10, 1);
        long long v4 = v14;
        char v9 = v15;
        uint64_t v5 = v16;
        a1 = v17;
        uint64_t v7 = v11;
        unint64_t v6 = v19;
      }
      *((unsigned char *)v18 + v6) = v9;
      unint64_t v6 = v19 + 1;
      *(void *)&long long v19 = v19 + 1;
      ++a1;
      --v5;
    }
    while (v5);
LABEL_9:
    uint64_t v12 = v18;
    *(void *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = v4;
    if (v6 && &v18 != (void **)a3)
    {
      if (v12 != v20)
      {
        *(void *)a3 = v12;
        *(void *)(a3 + 8) = v6;
        *(void *)(a3 + 16) = *((void *)&v19 + 1);
        return;
      }
      size_t v13 = v6;
      if (v6 < 0x29
        || (llvm::SmallVectorBase<unsigned long long>::grow_pod(a3, (void *)(a3 + 24), v6, 1),
            uint64_t v7 = v18,
            (size_t v13 = v19) != 0))
      {
        memcpy(*(void **)a3, v7, v13);
        uint64_t v7 = v18;
      }
      *(void *)(a3 + 8) = v6;
      *(void *)&long long v19 = 0;
      uint64_t v12 = v7;
    }
    if (v12 != v20) {
      free(v12);
    }
  }
  else
  {
    *(void *)a3 = a3 + 24;
    *(_OWORD *)(a3 + 8) = xmmword_1810FE310;
  }
}

char *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>,unsigned int,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::InsertIntoBucket<unsigned int const&,llvm::detail::DenseSetEmpty&>(_DWORD *__b, char *a2, _DWORD *a3)
{
  int v6 = *__b;
  int v7 = *__b >> 1;
  if (*__b) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = __b[4];
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - __b[1] > v8 >> 3)
  {
    int v9 = *__b & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow((uint64_t)__b, v8);
  uint64_t v11 = (char *)(__b + 2);
  int v6 = *__b;
  if (*__b)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = __b[4];
    if (!v12)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v11 = (char *)*((void *)__b + 1);
  }
  int v9 = *__b & 1;
  int v13 = v12 - 1;
  unsigned int v14 = (37 * *a3) & (v12 - 1);
  a2 = &v11[4 * v14];
  int v15 = *(_DWORD *)a2;
  if (*a3 != *(_DWORD *)a2)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -1)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = a2;
      }
      unsigned int v19 = v14 + v17++;
      unsigned int v14 = v19 & v13;
      a2 = &v11[4 * (v19 & v13)];
      int v15 = *(_DWORD *)a2;
      if (*a3 == *(_DWORD *)a2) {
        goto LABEL_7;
      }
    }
    if (v16) {
      a2 = v16;
    }
  }
LABEL_7:
  *uint64_t __b = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*(_DWORD *)a2 != -1) {
    --__b[1];
  }
  *(_DWORD *)a2 = *a3;
  return a2;
}

uint64_t llvm::SmallDenseMap<unsigned int,llvm::detail::DenseSetEmpty,4u,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseSetPair<unsigned int>>::grow(uint64_t __b, unsigned int a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = __b;
  *(void *)&v44[12] = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(unsigned char *)__b & 1) == 0)
  {
    int v7 = *(llvm **)(__b + 8);
    uint64_t v8 = *(unsigned int *)(__b + 16);
    if (v2 > 4)
    {
      buffer = llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
      *(void *)(v3 + 8) = buffer;
      *(void *)(v3 + 16) = v2;
      BOOL v17 = (*(_DWORD *)v3 & 1) == 0;
      *(void *)uint64_t v3 = *(_DWORD *)v3 & 1;
      if (v17) {
        unsigned int v18 = v2;
      }
      else {
        unsigned int v18 = 4;
      }
      if (!v17) {
        buffer = (void *)(v3 + 8);
      }
      memset(buffer, 255, 4 * v18);
      if (!v8) {
        goto LABEL_43;
      }
    }
    else
    {
      *(void *)uint64_t __b = 1;
      memset((void *)(__b + 8), 255, 0x10uLL);
      if (!v8) {
        goto LABEL_43;
      }
    }
    unsigned int v19 = v7;
    do
    {
      int v26 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)v3)
        {
          int v21 = 4;
          uint64_t v20 = v3 + 8;
        }
        else
        {
          uint64_t v20 = *(void *)(v3 + 8);
          int v21 = *(_DWORD *)(v3 + 16);
        }
        int v22 = v21 - 1;
        unsigned int v23 = (v21 - 1) & (37 * v26);
        unsigned int v24 = (_DWORD *)(v20 + 4 * v23);
        int v25 = *v24;
        if (v26 != *v24)
        {
          uint64_t v27 = 0;
          int v28 = 1;
          while (v25 != -1)
          {
            if (v27) {
              BOOL v29 = 0;
            }
            else {
              BOOL v29 = v25 == -2;
            }
            if (v29) {
              uint64_t v27 = v24;
            }
            unsigned int v30 = v23 + v28++;
            unsigned int v23 = v30 & v22;
            unsigned int v24 = (_DWORD *)(v20 + 4 * (v30 & v22));
            int v25 = *v24;
            if (v26 == *v24) {
              goto LABEL_26;
            }
          }
          if (v27) {
            unsigned int v24 = v27;
          }
        }
LABEL_26:
        *unsigned int v24 = v26;
        *(_DWORD *)v3 += 2;
      }
      unsigned int v19 = (llvm *)((char *)v19 + 4);
    }
    while (v19 != (llvm *)((char *)v7 + 4 * v8));
LABEL_43:
    llvm::deallocate_buffer(v7, (void *)(4 * v8));
  }
  int v9 = (unsigned int *)&v43;
  if (*(_DWORD *)(__b + 8) <= 0xFFFFFFFD)
  {
    int v43 = *(_DWORD *)(__b + 8);
    int v9 = (unsigned int *)v44;
    unsigned int v10 = *(_DWORD *)(__b + 12);
    if (v10 > 0xFFFFFFFD)
    {
LABEL_11:
      unsigned int v11 = *(_DWORD *)(__b + 16);
      if (v11 > 0xFFFFFFFD) {
        goto LABEL_12;
      }
      goto LABEL_48;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(__b + 12);
    if (v10 > 0xFFFFFFFD) {
      goto LABEL_11;
    }
  }
  *v9++ = v10;
  unsigned int v11 = *(_DWORD *)(__b + 16);
  if (v11 > 0xFFFFFFFD)
  {
LABEL_12:
    unsigned int v12 = *(_DWORD *)(__b + 20);
    if (v12 > 0xFFFFFFFD) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  *v9++ = v11;
  unsigned int v12 = *(_DWORD *)(__b + 20);
  if (v12 > 0xFFFFFFFD)
  {
LABEL_13:
    int v13 = *(_DWORD *)__b;
    if (v2 < 5) {
      goto LABEL_14;
    }
LABEL_50:
    *(_DWORD *)uint64_t __b = v13 & 0xFFFFFFFE;
    uint64_t __b = (uint64_t)llvm::allocate_buffer(4 * v2, (std::align_val_t)4uLL);
    *(void *)(v3 + 8) = __b;
    *(void *)(v3 + 16) = v2;
    int v31 = *(_DWORD *)v3;
    *(void *)uint64_t v3 = *(_DWORD *)v3 & 1;
    if ((v31 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_51:
    uint64_t v14 = 4;
    int v15 = (void *)(v3 + 8);
    goto LABEL_52;
  }
LABEL_49:
  *v9++ = v12;
  int v13 = *(_DWORD *)__b;
  if (v2 >= 5) {
    goto LABEL_50;
  }
LABEL_14:
  *(void *)uint64_t __b = v13 & 1;
  if (v13) {
    goto LABEL_51;
  }
LABEL_15:
  uint64_t v14 = *(unsigned int *)(v3 + 16);
  if (!v14) {
    goto LABEL_53;
  }
  int v15 = *(void **)(v3 + 8);
LABEL_52:
  uint64_t __b = (uint64_t)memset(v15, 255, 4 * v14);
LABEL_53:
  if (&v43 != (int *)v9)
  {
    uint64_t v32 = (unsigned int *)&v43;
    do
    {
      unsigned int v39 = *v32;
      if (*v32 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)v3)
        {
          int v34 = 4;
          uint64_t v33 = v3 + 8;
        }
        else
        {
          uint64_t v33 = *(void *)(v3 + 8);
          int v34 = *(_DWORD *)(v3 + 16);
        }
        int v35 = v34 - 1;
        unsigned int v36 = (v34 - 1) & (37 * v39);
        uint64_t v37 = (unsigned int *)(v33 + 4 * v36);
        unsigned int v38 = *v37;
        if (v39 != *v37)
        {
          unint64_t v40 = 0;
          uint64_t __b = 1;
          while (v38 != -1)
          {
            if (v40) {
              BOOL v41 = 0;
            }
            else {
              BOOL v41 = v38 == -2;
            }
            if (v41) {
              unint64_t v40 = v37;
            }
            int v42 = v36 + __b;
            uint64_t __b = (__b + 1);
            unsigned int v36 = v42 & v35;
            uint64_t v37 = (unsigned int *)(v33 + 4 * (v42 & v35));
            unsigned int v38 = *v37;
            if (v39 == *v37) {
              goto LABEL_57;
            }
          }
          if (v40) {
            uint64_t v37 = v40;
          }
        }
LABEL_57:
        unsigned int *v37 = v39;
        *(_DWORD *)v3 += 2;
      }
      ++v32;
    }
    while (v32 != v9);
  }
  return __b;
}

unint64_t llvm::hash_combine<llvm::ArrayRef<long long>,mlir::Type,mlir::MemRefLayoutAttrInterface,mlir::Attribute>(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  memset(v17, 0, sizeof(v17));
  {
    uint64_t v13 = a1;
    a1 = v13;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      a1 = v13;
    }
  }
  uint64_t v20 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v17[0] = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)a1, *(void *)a1 + 8 * *(void *)(a1 + 8));
  unint64_t v14 = 0;
  int v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v14, (void *)v17 + 1, (unint64_t)v18, (*a2 >> 4) ^ (*a2 >> 9));
  unint64_t v15 = v14;
  uint64_t v8 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v15, v7, (unint64_t)v18, (*a3 >> 4) ^ (*a3 >> 9));
  unint64_t v16 = v15;
  int v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v17, (uint64_t *)&v16, v8, (unint64_t)v18, (*a4 >> 4) ^ (*a4 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v17, v16, v9, (char *)v18);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 16);
  return v3 == *(void *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(void *)(a2 + 24) == *(void *)(v2 + 16)
      && *(void *)(a2 + 32) == *(void *)(v2 + 24)
      && *(void *)(a2 + 48) == *(void *)(v2 + 40);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::MemRefLayoutAttrInterface &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  __n128 v4 = mlir::detail::MemRefTypeStorage::construct(a2, (uint64_t *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

__n128 mlir::detail::MemRefTypeStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  __n128 v26 = *(__n128 *)(a2 + 3);
  uint64_t v5 = a2[5];
  if (v3)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = 8 * v3;
    uint64_t v8 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    uint64_t v9 = v8;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      unsigned int v10 = (void *)v8;
      int v11 = (uint64_t *)v6;
    }
    else
    {
      unsigned int v10 = (void *)v8;
      int v11 = (uint64_t *)v6;
      if ((unint64_t)(v8 - v6) >= 0x20)
      {
        unint64_t v12 = ((unint64_t)(v7 - 8) >> 3) + 1;
        uint64_t v13 = 8 * (v12 & 0x3FFFFFFFFFFFFFFCLL);
        unsigned int v10 = (void *)(v8 + v13);
        int v11 = (uint64_t *)(v6 + v13);
        unint64_t v14 = (long long *)(v6 + 16);
        unint64_t v15 = (_OWORD *)(v8 + 16);
        uint64_t v16 = v12 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v17 = *v14;
          *(v15 - 1) = *(v14 - 1);
          *unint64_t v15 = v17;
          v14 += 2;
          v15 += 2;
          v16 -= 4;
        }
        while (v16);
        if (v12 == (v12 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    do
    {
      uint64_t v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != (uint64_t *)(v6 + v7));
  }
  else
  {
    uint64_t v9 = 0;
  }
LABEL_11:
  *(void *)(__sz + 80) += 56;
  if (*(void *)__sz) {
    BOOL v19 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 56 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    unsigned int v20 = *(_DWORD *)(__sz + 24) >> 7;
    if (v20 >= 0x1E) {
      LOBYTE(v20) = 30;
    }
    uint64_t v21 = 4096 << v20;
    buffer = (char *)llvm::allocate_buffer(4096 << v20, (std::align_val_t)8uLL);
    uint64_t v23 = *(unsigned int *)(__sz + 24);
    if (v23 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v23 + 1, 8);
      LODWORD(v23) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v23) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v21];
    unint64_t v24 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v24 = (*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)__sz = v24 + 56;
  *(void *)unint64_t v24 = 0;
  *(void *)(v24 + 8) = v9;
  *(void *)(v24 + 16) = v3;
  *(void *)(v24 + 24) = v4;
  __n128 result = v26;
  *(__n128 *)(v24 + 32) = v26;
  *(void *)(v24 + 48) = v5;
  return result;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_25MemRefLayoutAttrInterfaceERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 16);
  return v3 == *(void *)(*a1 + 8)
      && !memcmp(*(const void **)(a2 + 8), *(const void **)v2, 8 * v3)
      && *(void *)(a2 + 24) == *(void *)(v2 + 16)
      && *(void *)(a2 + 32) == *(void *)(v2 + 24)
      && *(void *)(a2 + 48) == *(void *)(v2 + 40);
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::MemRefTypeStorage * mlir::StorageUniquer::get<mlir::detail::MemRefTypeStorage,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::MemRefTypeStorage *)>,mlir::TypeID,llvm::ArrayRef<long long> &,mlir::Type &,mlir::AffineMapAttr &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  __n128 v4 = mlir::detail::MemRefTypeStorage::construct(__sz, (uint64_t *)*(void *)a1);
  uint64_t v5 = v3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(void *)v6) {
    (*(void (**)(void, uint64_t, __n128))v6)(*(void *)(v6 + 8), v3, v4);
  }
  return v5;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail17MemRefTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_10MemRefTypeEJRNS_8ArrayRefIxEERNS1_4TypeERNS1_13AffineMapAttrERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESM_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSO_E_EEvlS4_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = mlir::AbstractType::lookup(*(void *)a1, **(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t mlir::ShapedType::cloneWith(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (uint64_t (**)(void, uint64_t, long long *, uint64_t))a1[1];
  uint64_t v5 = *v3;
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  return v5(v3, v4, &v7, a3);
}

uint64_t mlir::ShapedType::getNumElements(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v2)
    {
      uint64_t v3 = v2 + 1;
      uint64_t v4 = (v2 + 1) & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v5 = &a1[v4];
      uint64_t v6 = a1 + 1;
      uint64_t v7 = 1;
      uint64_t v8 = v4;
      uint64_t v9 = 1;
      do
      {
        v7 *= *(v6 - 1);
        v9 *= *v6;
        v6 += 2;
        v8 -= 2;
      }
      while (v8);
      uint64_t v10 = v9 * v7;
      if (v3 == v4) {
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 1;
      uint64_t v5 = a1;
    }
    do
    {
      uint64_t v12 = *v5++;
      v10 *= v12;
    }
    while (v5 != &a1[a2]);
    return v10;
  }
  return 1;
}

uint64_t mlir::DiagnosticArgument::DiagnosticArgument(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = 0;
  *(void *)(result + 8) = a2;
  return result;
}

{
  *(_DWORD *)uint64_t result = 4;
  *(void *)(result + 8) = a2;
  return result;
}

void mlir::DiagnosticArgument::print(mlir::DiagnosticArgument *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = a2;
  switch(*(_DWORD *)this)
  {
    case 0:
      uint64_t v12 = *((void *)this + 1);
      mlir::Attribute::print((mlir::Attribute *)&v12, a2, 0);
      break;
    case 1:
      double v4 = *((double *)this + 1);
      llvm::raw_ostream::operator<<(a2, v4);
      break;
    case 2:
      unint64_t v5 = *((void *)this + 1);
      llvm::raw_ostream::operator<<(v2, v5);
      break;
    case 3:
      uint64_t v6 = (const void *)*((void *)this + 1);
      size_t v7 = *((void *)this + 2);
      uint64_t v8 = (void *)*((void *)v2 + 4);
      if (v7 <= *((void *)v2 + 3) - (void)v8)
      {
        if (v7)
        {
          memcpy(v8, v6, v7);
          *((void *)v2 + 4) += v7;
        }
      }
      else
      {
        llvm::raw_ostream::write(v2, (const char *)v6, v7);
      }
      break;
    case 4:
      uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v9 >= *((void *)a2 + 3))
      {
        uint64_t v2 = llvm::raw_ostream::write(a2, 39);
      }
      else
      {
        *((void *)a2 + 4) = v9 + 1;
        *uint64_t v9 = 39;
      }
      uint64_t v12 = *((void *)this + 1);
      mlir::Type::print((llvm::raw_ostream *)&v12, v2);
      int v11 = (unsigned char *)*((void *)v2 + 4);
      if ((unint64_t)v11 >= *((void *)v2 + 3))
      {
        llvm::raw_ostream::write(v2, 39);
      }
      else
      {
        *((void *)v2 + 4) = v11 + 1;
        *int v11 = 39;
      }
      break;
    case 5:
      unint64_t v10 = *((void *)this + 1);
      llvm::raw_ostream::operator<<(v2, v10);
      break;
    default:
      return;
  }
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, char a2)
{
  __int16 v16 = 264;
  LOBYTE(v15) = a2;
  uint64_t v3 = twineToStrRef(&v15, (void *)(a1 + 128));
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v17 = 3;
  uint64_t v18 = v3;
  uint64_t v19 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = &v17;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v17;
    if (v5 <= (unint64_t)&v17 && v13)
    {
      unint64_t v14 = (char *)&v17 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = &v17;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, const void ***a2)
{
  uint64_t v3 = twineToStrRef(a2, (void *)(a1 + 128));
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  int v15 = 3;
  __int16 v16 = v3;
  uint64_t v17 = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = &v15;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)&v15;
    if (v5 <= (unint64_t)&v15 && v13)
    {
      unint64_t v14 = (char *)&v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = (int *)&v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = &v15;
    }
  }
  uint64_t v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

const void **twineToStrRef(const void ***a1, void *a2)
{
  v15[8] = *MEMORY[0x1E4F143B8];
  BOOL v13 = v15;
  long long v14 = xmmword_181101A40;
  if (*((unsigned char *)a1 + 33) == 1)
  {
    uint64_t v3 = 0;
    switch(*((unsigned char *)a1 + 32))
    {
      case 1:
        return v3;
      case 3:
        uint64_t v3 = *a1;
        if (!*a1) {
          return v3;
        }
        size_t v4 = strlen((const char *)*a1);
        unint64_t v5 = v15;
        break;
      case 4:
        int v11 = *((char *)*a1 + 23);
        if (v11 >= 0) {
          uint64_t v3 = *a1;
        }
        else {
          uint64_t v3 = (const void **)**a1;
        }
        if (v11 >= 0) {
          size_t v4 = *((unsigned __int8 *)*a1 + 23);
        }
        else {
          size_t v4 = (size_t)(*a1)[1];
        }
        unint64_t v5 = v15;
        break;
      case 5:
      case 6:
        uint64_t v3 = *a1;
        size_t v4 = (size_t)a1[1];
        unint64_t v5 = v15;
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    llvm::Twine::toVector((uint64_t)a1, (uint64_t)&v13);
    unint64_t v5 = v13;
    size_t v4 = v14;
    uint64_t v3 = (const void **)v13;
  }
  if (v4)
  {
    uint64_t v6 = operator new[](v4);
    __p = v6;
    uint64_t v7 = (void *)a2[1];
    if ((unint64_t)v7 >= a2[2])
    {
      uint64_t v8 = std::vector<std::unique_ptr<char []>>::__push_back_slow_path<std::unique_ptr<char []>>(a2, (uint64_t *)&__p);
      uint64_t v9 = __p;
      a2[1] = v8;
      __p = 0;
      if (v9)
      {
        operator delete[](v9);
        uint64_t v8 = (void *)a2[1];
      }
    }
    else
    {
      void *v7 = v6;
      uint64_t v8 = v7 + 1;
      a2[1] = v8;
    }
    memcpy((void *)*(v8 - 1), v3, v4);
    uint64_t v3 = *(const void ***)(a2[1] - 8);
    unint64_t v5 = v13;
  }
  if (v5 != v15) {
    free(v5);
  }
  return v3;
}

uint64_t mlir::Diagnostic::operator<<(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v3 = a1 + 16;
  unint64_t v4 = v5;
  int v14 = 0;
  uint64_t v15 = a2;
  uint64_t v6 = *(unsigned int *)(v3 + 8);
  uint64_t v7 = (char *)&v14;
  if (v6 >= *(_DWORD *)(v3 + 12))
  {
    unint64_t v11 = v6 + 1;
    BOOL v12 = v4 + 24 * v6 > (unint64_t)&v14;
    if (v4 <= (unint64_t)&v14 && v12)
    {
      BOOL v13 = (char *)&v14 - v4;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 32), v11, 24);
      unint64_t v4 = *(void *)(a1 + 16);
      uint64_t v7 = &v13[v4];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v3, (void *)(a1 + 32), v11, 24);
      unint64_t v4 = *(void *)(a1 + 16);
      uint64_t v7 = (char *)&v14;
    }
  }
  uint64_t v8 = v4 + 24 * *(unsigned int *)(a1 + 24);
  long long v9 = *(_OWORD *)v7;
  *(void *)(v8 + 16) = *((void *)v7 + 2);
  *(_OWORD *)uint64_t v8 = v9;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

{
  uint64_t AttrData;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  long long v10;
  unint64_t v12;
  BOOL v13;
  char *v14;
  void v15[3];

  v15[0] = *(void *)(a2 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v15);
  unint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  LODWORD(v15[0]) = 3;
  v15[1] = AttrData;
  void v15[2] = v6;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = (char *)v15;
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    BOOL v12 = v7 + 1;
    BOOL v13 = v5 + 24 * v7 > (unint64_t)v15;
    if (v5 <= (unint64_t)v15 && v13)
    {
      int v14 = (char *)v15 - v5;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = &v14[v5];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 32), v12, 24);
      unint64_t v5 = *(void *)(a1 + 16);
      uint64_t v8 = (char *)v15;
    }
  }
  long long v9 = v5 + 24 * *(unsigned int *)(a1 + 24);
  long long v10 = *(_OWORD *)v8;
  *(void *)(v9 + 16) = *((void *)v8 + 2);
  *(_OWORD *)long long v9 = v10;
  ++*(_DWORD *)(a1 + 24);
  return a1;
}

{
  int v3;
  const void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  long long v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _OWORD v16[2];
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  int v32;
  const void **v33;
  uint64_t v34;

  unsigned int v30 = 0;
  int v31 = a2;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v21 = 0;
  int v25 = 0;
  __n128 v26 = 0;
  uint64_t v27 = 1;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  int v22 = 0;
  unsigned int v20 = &unk_1EC9A38B8;
  int v28 = v29;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v20, 0, 0, 0);
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v16);
  uint64_t v3 = *(_DWORD *)(a1 + 8);
  mlir::OpPrintingFlags::useLocalScope((uint64_t)v16);
  mlir::OpPrintingFlags::elideLargeElementsAttrs((uint64_t)v16, 16);
  if (v3 == 2) {
    mlir::OpPrintingFlags::printGenericOpForm((uint64_t)v16, 1);
  }
  v18[0] = v16[0];
  v18[1] = v16[1];
  uint64_t v19 = v17;
  mlir::Value::print((mlir::Value *)&v31, (llvm::raw_ostream *)&v20, (const mlir::OpPrintingFlags *)v18);
  LOWORD(v19) = 260;
  *(void *)&v18[0] = v28;
  unint64_t v4 = twineToStrRef((const void ***)v18, (void *)(a1 + 128));
  unint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v32 = 3;
  uint64_t v33 = v4;
  int v34 = v7;
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  long long v9 = &v32;
  if (v8 >= *(_DWORD *)(a1 + 28))
  {
    BOOL v13 = v8 + 1;
    int v14 = v6 + 24 * v8 > (unint64_t)&v32;
    if (v6 <= (unint64_t)&v32 && v14)
    {
      uint64_t v15 = (char *)&v32 - v6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      uint64_t v6 = *(void *)(a1 + 16);
      long long v9 = (int *)&v15[v6];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(a1 + 32), v13, 24);
      uint64_t v6 = *(void *)(a1 + 16);
      long long v9 = &v32;
    }
  }
  long long v10 = v6 + 24 * *(unsigned int *)(a1 + 24);
  unint64_t v11 = *(_OWORD *)v9;
  *(void *)(v10 + 16) = *((void *)v9 + 2);
  *(_OWORD *)long long v10 = v11;
  ++*(_DWORD *)(a1 + 24);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v20);
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  return a1;
}

mlir::Diagnostic *mlir::Diagnostic::operator<<(mlir::Diagnostic *a1, mlir::Operation *a2)
{
  mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v5);
  return mlir::Diagnostic::appendOp(a1, a2, (const mlir::OpPrintingFlags *)v5);
}

mlir::Diagnostic *mlir::Diagnostic::appendOp(mlir::Diagnostic *this, mlir::Operation *a2, const mlir::OpPrintingFlags *a3)
{
  memset(&v33, 0, sizeof(v33));
  int v25 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  int v31 = 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  unint64_t v24 = &unk_1EC9A38B8;
  uint64_t v32 = &v33;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v24, 0, 0, 0);
  long long v6 = *((_OWORD *)a3 + 1);
  long long v19 = *(_OWORD *)a3;
  long long v20 = v6;
  uint64_t v21 = *((void *)a3 + 4);
  LODWORD(a3) = *((_DWORD *)this + 2);
  mlir::OpPrintingFlags::useLocalScope((uint64_t)&v19);
  mlir::OpPrintingFlags::elideLargeElementsAttrs((uint64_t)&v19, 16);
  if (a3 == 2) {
    mlir::OpPrintingFlags::printGenericOpForm((uint64_t)&v19, 1);
  }
  v22[0] = v19;
  v22[1] = v20;
  uint64_t v23 = v21;
  mlir::Operation::print(a2, (llvm::raw_ostream *)&v24, (const mlir::OpPrintingFlags *)v22);
  if (std::string::find(&v33, 10, 0) != -1) {
    mlir::Diagnostic::operator<<((uint64_t)this, 10);
  }
  LOWORD(v23) = 260;
  *(void *)&v22[0] = v32;
  uint64_t v7 = twineToStrRef((const void ***)v22, (void *)this + 16);
  uint64_t v8 = (char *)this + 16;
  unint64_t v9 = *((void *)this + 2);
  int v34 = 3;
  int v35 = v7;
  uint64_t v36 = v10;
  uint64_t v11 = *((unsigned int *)this + 6);
  BOOL v12 = &v34;
  if (v11 >= *((_DWORD *)this + 7))
  {
    unint64_t v16 = v11 + 1;
    BOOL v17 = v9 + 24 * v11 > (unint64_t)&v34;
    if (v9 <= (unint64_t)&v34 && v17)
    {
      uint64_t v18 = (char *)&v34 - v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, (char *)this + 32, v16, 24);
      unint64_t v9 = *((void *)this + 2);
      BOOL v12 = (int *)&v18[v9];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v8, (char *)this + 32, v16, 24);
      unint64_t v9 = *((void *)this + 2);
      BOOL v12 = &v34;
    }
  }
  uint64_t v13 = v9 + 24 * *((unsigned int *)this + 6);
  long long v14 = *(_OWORD *)v12;
  *(void *)(v13 + 16) = *((void *)v12 + 2);
  *(_OWORD *)uint64_t v13 = v14;
  ++*((_DWORD *)this + 6);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v24);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return this;
}

void mlir::Diagnostic::print(mlir::Diagnostic *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    unint64_t v4 = (mlir::DiagnosticArgument *)*((void *)this + 2);
    uint64_t v5 = 24 * v2;
    do
    {
      mlir::DiagnosticArgument::print(v4, a2);
      unint64_t v4 = (mlir::DiagnosticArgument *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
}

void mlir::Diagnostic::str(mlir::Diagnostic *this@<X0>, std::string *a2@<X8>)
{
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  int v9 = 0;
  char v13 = 0;
  uint64_t v14 = 0;
  int v15 = 1;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = &unk_1EC9A38B8;
  unint64_t v16 = v17;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v8, 0, 0, 0);
  uint64_t v4 = *((unsigned int *)this + 6);
  if (v4)
  {
    uint64_t v5 = (mlir::DiagnosticArgument *)*((void *)this + 2);
    uint64_t v6 = 24 * v4;
    do
    {
      mlir::DiagnosticArgument::print(v5, (llvm::raw_ostream *)&v8);
      uint64_t v5 = (mlir::DiagnosticArgument *)((char *)v5 + 24);
      v6 -= 24;
    }
    while (v6);
  }
  if ((*((char *)v16 + 23) & 0x80000000) == 0)
  {
    long long v7 = *(_OWORD *)v16;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v16[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
    if ((SHIBYTE(v18) & 0x80000000) == 0) {
      return;
    }
LABEL_8:
    operator delete(v17[0]);
    return;
  }
  std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v16, (std::string::size_type)v16[1]);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  if (SHIBYTE(v18) < 0) {
    goto LABEL_8;
  }
}

uint64_t mlir::Diagnostic::attachNote(uint64_t *a1, uint64_t a2, char a3)
{
  if (!a3) {
    a2 = *a1;
  }
  uint64_t v5 = operator new(0xB0uLL);
  *(void *)uint64_t v5 = a2;
  v5[2] = 0;
  *((void *)v5 + 2) = v5 + 8;
  *((void *)v5 + 3) = 0x400000000;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  int v9 = v5;
  uint64_t v6 = (void *)a1[20];
  if ((unint64_t)v6 >= a1[21])
  {
    long long v7 = std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>(a1 + 19, (uint64_t *)&v9);
  }
  else
  {
    int v9 = 0;
    *uint64_t v6 = v5;
    long long v7 = v6 + 1;
  }
  a1[20] = (uint64_t)v7;
  std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](&v9);
  return *(void *)(a1[20] - 8);
}

uint64_t mlir::Diagnostic::operator mlir::LogicalResult()
{
  return 0;
}

uint64_t mlir::InFlightDiagnostic::operator mlir::LogicalResult(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 184) ^ 1u;
}

void mlir::InFlightDiagnostic::report(mlir::InFlightDiagnostic *this)
{
  if (*(void *)this)
  {
    mlir::detail::DiagnosticEngineImpl::emit(**(void **)this, (uint64_t *)this + 1);
    *(void *)this = 0;
  }

  std::__optional_destruct_base<mlir::Diagnostic,false>::reset[abi:nn180100]((uint64_t)this + 8);
}

void *mlir::InFlightDiagnostic::abandon(void *this)
{
  *this = 0;
  return this;
}

void mlir::detail::DiagnosticEngineImpl::emit(uint64_t a1, uint64_t *a2)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  uint64_t v5 = 40 * *(unsigned int *)(a1 + 120);
  uint64_t v6 = *(void *)(a1 + 112) + v5;
  while (v5)
  {
    uint64_t v7 = *(void *)(v6 - 8);
    v6 -= 40;
    uint64_t v4 = (llvm *)(*(uint64_t (**)(void))(v7 & 0xFFFFFFFFFFFFFFF8))();
    v5 -= 40;
    if ((_BYTE)v4) {
      goto LABEL_21;
    }
  }
  if (*((_DWORD *)a2 + 2) != 2) {
    goto LABEL_21;
  }
  uint64_t v8 = (llvm::raw_ostream *)llvm::errs(v4);
  if (*(_UNKNOWN **)(*(void *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
LABEL_9:
    uint64_t v10 = (_DWORD *)*((void *)v8 + 4);
    if (*((void *)v8 + 3) - (void)v10 <= 6uLL) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v15 = *a2;
  mlir::Attribute::print((mlir::Attribute *)&v15, v8, 0);
  int v9 = (_WORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v9 <= 1uLL)
  {
    llvm::raw_ostream::write(v8, ": ", 2uLL);
    goto LABEL_9;
  }
  *int v9 = 8250;
  *((void *)v8 + 4) += 2;
  uint64_t v10 = (_DWORD *)*((void *)v8 + 4);
  if (*((void *)v8 + 3) - (void)v10 <= 6uLL)
  {
LABEL_10:
    llvm::raw_ostream::write(v8, "error: ", 7uLL);
    uint64_t v11 = *((unsigned int *)a2 + 6);
    if (!v11) {
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v12 = (mlir::DiagnosticArgument *)a2[2];
    uint64_t v13 = 24 * v11;
    do
    {
      mlir::DiagnosticArgument::print(v12, v8);
      uint64_t v12 = (mlir::DiagnosticArgument *)((char *)v12 + 24);
      v13 -= 24;
    }
    while (v13);
    goto LABEL_16;
  }
LABEL_13:
  *(_DWORD *)((char *)v10 + 3) = 540701295;
  *uint64_t v10 = 1869771365;
  *((void *)v8 + 4) += 7;
  uint64_t v11 = *((unsigned int *)a2 + 6);
  if (v11) {
    goto LABEL_14;
  }
LABEL_16:
  uint64_t v14 = (unsigned char *)*((void *)v8 + 4);
  if ((unint64_t)v14 < *((void *)v8 + 3))
  {
    *((void *)v8 + 4) = v14 + 1;
    *uint64_t v14 = 10;
    if (*((void *)v8 + 4) == *((void *)v8 + 2)) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  llvm::raw_ostream::write(v8, 10);
  if (*((void *)v8 + 4) != *((void *)v8 + 2)) {
LABEL_20:
  }
    llvm::raw_ostream::flush_nonempty(v8);
LABEL_21:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

mlir::DiagnosticEngine *mlir::DiagnosticEngine::DiagnosticEngine(mlir::DiagnosticEngine *this)
{
  uint64_t v2 = operator new(0xD8uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  *((void *)v2 + 26) = 0;
  v2[8] = 0u;
  uint64_t v3 = (char *)(v2 + 8);
  uint64_t v4 = MEMORY[0x1852FDB50]();
  *(_DWORD *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 1;
  *(void *)(v4 + 80) = -1;
  *(void *)(v4 + 96) = -1;
  *(void *)(v4 + 112) = v3;
  *(void *)(v4 + 120) = 0x200000000;
  *(void *)(v4 + 208) = 1;
  *(void *)this = v4;
  return this;
}

void mlir::DiagnosticEngine::~DiagnosticEngine(std::recursive_mutex **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<mlir::detail::DiagnosticEngineImpl>::operator()[abi:nn180100]((int)this, v1);
  }
}

uint64_t mlir::DiagnosticEngine::registerHandler(std::recursive_mutex **a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  std::recursive_mutex::lock(*a1);
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)&(*a1)[3].__m_.__opaque[8];
  *(void *)&v5[3].__m_.__opaque[8] = v6 + 1;
  uint64_t opaque = (uint64_t)v5[1].__m_.__opaque;
  unint64_t v8 = *((void *)a2 + 3);
  uint64_t v12 = v6;
  unint64_t v15 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 2) != 0 && (v8 & 4) != 0)
    {
      (*(void (**)(long long *, long long *))((v8 & 0xFFFFFFFFFFFFFFF8) + 8))(&v13, a2);
    }
    else
    {
      long long v13 = *a2;
      unint64_t v14 = *((void *)a2 + 2);
    }
    *((void *)a2 + 3) = 0;
  }
  llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::try_emplace<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>(opaque, &v12, (uint64_t)&v13);
  char v9 = v15;
  if (v15 >= 8)
  {
    if ((v15 & 4) != 0)
    {
      if ((v15 & 2) != 0) {
        uint64_t v10 = &v13;
      }
      else {
        uint64_t v10 = (long long *)v13;
      }
      (*(void (**)(long long *))((v15 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v13, *((void **)&v13 + 1));
    }
  }
  std::recursive_mutex::unlock(v4);
  return v6;
}

void mlir::DiagnosticEngine::eraseHandler(std::recursive_mutex **this, uint64_t a2)
{
  uint64_t v4 = *this;
  std::recursive_mutex::lock(*this);
  uint64_t v5 = *this;
  int v6 = *(_DWORD *)(*this)[1].__m_.__opaque;
  if (v6)
  {
    uint64_t v7 = &v5[1].__m_.__opaque[8];
    int v8 = 2;
  }
  else
  {
    uint64_t v7 = *(char **)&v5[1].__m_.__opaque[8];
    int v8 = *(_DWORD *)&v5[1].__m_.__opaque[16];
    if (!v8)
    {
      unsigned int v9 = 0;
      uint64_t v10 = 0;
LABEL_4:
      uint64_t v11 = &v7[16 * v10];
      uint64_t v12 = (uint64_t)&v7[16 * v9];
      goto LABEL_18;
    }
  }
  int v13 = v8 - 1;
  LODWORD(v14) = (v8 - 1) & (37 * a2);
  uint64_t v11 = &v7[16 * v14];
  uint64_t v15 = *(void *)v11;
  if (*(void *)v11 == a2)
  {
    if ((v6 & 1) == 0)
    {
LABEL_8:
      uint64_t v12 = *(void *)&v5[1].__m_.__opaque[8] + 16 * *(unsigned int *)&v5[1].__m_.__opaque[16];
      goto LABEL_18;
    }
  }
  else
  {
    int v16 = 1;
    while (v15 != -1)
    {
      int v17 = v14 + v16++;
      uint64_t v14 = v17 & v13;
      uint64_t v15 = *(void *)&v7[16 * v14];
      if (v15 == a2)
      {
        uint64_t v11 = &v7[16 * v14];
        if ((v6 & 1) == 0) {
          goto LABEL_8;
        }
        goto LABEL_17;
      }
    }
    if ((v6 & 1) == 0)
    {
      uint64_t v7 = *(char **)&v5[1].__m_.__opaque[8];
      unsigned int v9 = *(_DWORD *)&v5[1].__m_.__opaque[16];
      uint64_t v10 = v9;
      goto LABEL_4;
    }
    uint64_t v11 = &v5[1].__m_.__opaque[40];
  }
LABEL_17:
  uint64_t v12 = (uint64_t)&v5[1].__m_.__opaque[40];
LABEL_18:
  BOOL v18 = v11 == (char *)v12;
  long long v19 = &v5[1].__m_.__opaque[48];
  if (!v18) {
    long long v19 = v11 + 8;
  }
  unsigned int v20 = *(_DWORD *)v19;
  if (v20 != *(_DWORD *)&v5[1].__m_.__opaque[48]) {
    llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::erase((int *)(*this)[1].__m_.__opaque, (void *)(*(void *)&v5[1].__m_.__opaque[40] + 40 * v20));
  }

  std::recursive_mutex::unlock(v4);
}

void mlir::emitError(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = 257;
  emitDiag(a2, a1, 2, (uint64_t)v2);
}

void mlir::emitError(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void emitDiag(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v57 = a2;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v57);
  uint64_t DiagEngine = mlir::MLIRContext::getDiagEngine(Context);
  uint64_t v9 = v57;
  *(void *)a1 = DiagEngine;
  *(void *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a1 + 40;
  uint64_t v10 = (unint64_t *)(a1 + 24);
  *(void *)(a1 + 32) = 0x400000000;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 1;
  if (*(unsigned __int8 *)(a4 + 32) >= 2u)
  {
    LODWORD(v45) = 3;
    uint64_t v46 = twineToStrRef((const void ***)a4, (void *)(a1 + 136));
    uint64_t v47 = v11;
    uint64_t v12 = *(unsigned int *)(a1 + 32);
    unint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = &v45;
    if (v12 >= *(_DWORD *)(a1 + 36))
    {
      unint64_t v36 = v12 + 1;
      BOOL v37 = v13 + 24 * v12 > (unint64_t)&v45;
      if (v13 <= (unint64_t)&v45 && v37)
      {
        int v42 = (char *)&v45 - v13;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v36, 24);
        unint64_t v13 = *v10;
        uint64_t v14 = (void ***)&v42[*v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v36, 24);
        unint64_t v13 = *v10;
        uint64_t v14 = &v45;
      }
    }
    uint64_t v15 = v13 + 24 * *(unsigned int *)(a1 + 32);
    long long v16 = *(_OWORD *)v14;
    *(void *)(v15 + 16) = v14[2];
    *(_OWORD *)uint64_t v15 = v16;
    ++*(_DWORD *)(a1 + 32);
  }
  if (mlir::MLIRContext::shouldPrintStackTraceOnDiagnostic(Context))
  {
    __p = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    LODWORD(v46) = 0;
    char v50 = 0;
    uint64_t v51 = 0;
    int v52 = 1;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v47 = 0;
    unint64_t v45 = (void **)&unk_1EC9A38B8;
    p_p = &__p;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&v45, 0, 0, 0);
    llvm::sys::PrintStackTrace((llvm::sys *)&v45, 0);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v45);
    uint64_t v17 = HIBYTE(v56);
    char v18 = HIBYTE(v56);
    if (v56 < 0) {
      uint64_t v17 = v55;
    }
    if (v17)
    {
      uint64_t v19 = *(void *)(a1 + 8);
      unsigned int v20 = operator new(0xB0uLL);
      *(void *)unsigned int v20 = v19;
      void v20[2] = 0;
      *((void *)v20 + 2) = v20 + 8;
      *((void *)v20 + 3) = 0x400000000;
      *((_OWORD *)v20 + 8) = 0u;
      *((_OWORD *)v20 + 9) = 0u;
      *((_OWORD *)v20 + 10) = 0u;
      unint64_t v45 = (void **)v20;
      uint64_t v21 = *(void **)(a1 + 168);
      if ((unint64_t)v21 >= *(void *)(a1 + 176))
      {
        int v22 = std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>((void *)(a1 + 160), (uint64_t *)&v45);
      }
      else
      {
        unint64_t v45 = 0;
        *uint64_t v21 = v20;
        int v22 = v21 + 1;
      }
      *(void *)(a1 + 168) = v22;
      std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](&v45);
      uint64_t v23 = *(void *)(*(void *)(a1 + 168) - 8);
      unint64_t v24 = *(void *)(v23 + 16);
      LODWORD(v45) = 3;
      uint64_t v46 = (const void **)"diagnostic emitted with trace:\n";
      uint64_t v47 = 31;
      uint64_t v25 = *(unsigned int *)(v23 + 24);
      uint64_t v26 = &v45;
      if (v25 >= *(_DWORD *)(v23 + 28))
      {
        unint64_t v38 = v25 + 1;
        BOOL v39 = v24 + 24 * v25 > (unint64_t)&v45;
        if (v24 <= (unint64_t)&v45 && v39)
        {
          int v43 = (char *)&v45 - v24;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v38, 24);
          unint64_t v24 = *(void *)(v23 + 16);
          uint64_t v26 = (void ***)&v43[v24];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v38, 24);
          unint64_t v24 = *(void *)(v23 + 16);
          uint64_t v26 = &v45;
        }
      }
      uint64_t v27 = v24 + 24 * *(unsigned int *)(v23 + 24);
      long long v28 = *(_OWORD *)v26;
      *(void *)(v27 + 16) = v26[2];
      *(_OWORD *)uint64_t v27 = v28;
      ++*(_DWORD *)(v23 + 24);
      LOWORD(v49) = 260;
      unint64_t v45 = &__p;
      char v29 = twineToStrRef((const void ***)&v45, (void *)(v23 + 128));
      int v58 = 3;
      unsigned int v59 = v29;
      uint64_t v60 = v30;
      uint64_t v31 = *(unsigned int *)(v23 + 24);
      unint64_t v32 = *(void *)(v23 + 16);
      std::string v33 = &v58;
      if (v31 >= *(_DWORD *)(v23 + 28))
      {
        unint64_t v40 = v31 + 1;
        BOOL v41 = v32 + 24 * v31 > (unint64_t)&v58;
        if (v32 <= (unint64_t)&v58 && v41)
        {
          uint64_t v44 = (char *)&v58 - v32;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v40, 24);
          unint64_t v32 = *(void *)(v23 + 16);
          std::string v33 = (int *)&v44[v32];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v23 + 16, (void *)(v23 + 32), v40, 24);
          unint64_t v32 = *(void *)(v23 + 16);
          std::string v33 = &v58;
        }
      }
      uint64_t v34 = v32 + 24 * *(unsigned int *)(v23 + 24);
      long long v35 = *(_OWORD *)v33;
      *(void *)(v34 + 16) = *((void *)v33 + 2);
      *(_OWORD *)uint64_t v34 = v35;
      ++*(_DWORD *)(v23 + 24);
      char v18 = HIBYTE(v56);
    }
    if (v18 < 0) {
      operator delete(__p);
    }
  }
}

void mlir::emitWarning(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = 257;
  emitDiag(a2, a1, 1, (uint64_t)v2);
}

void mlir::ScopedDiagnosticHandler::~ScopedDiagnosticHandler(mlir::MLIRContext **this)
{
  if (*this)
  {
    uint64_t DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(this[1]);
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, (uint64_t)*this);
  }
}

uint64_t mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = *((void *)a5 + 3);
  *(void *)(a1 + 56) = v6;
  if (*((void *)a5 + 3) >= 8uLL)
  {
    int v8 = (_OWORD *)(a1 + 32);
    if ((v6 & 2) != 0 && (v6 & 4) != 0)
    {
      (*(void (**)(_OWORD *, long long *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(v8, a5);
    }
    else
    {
      long long v9 = *a5;
      *(void *)(a1 + 48) = *((void *)a5 + 2);
      _OWORD *v8 = v9;
    }
    *((void *)a5 + 3) = 0;
  }
  *(_DWORD *)(a1 + 64) = 10;
  uint64_t v10 = operator new(0x18uLL);
  v10[1] = 0;
  void v10[2] = 0;
  *uint64_t v10 = 0;
  *((_DWORD *)v10 + 5) = 16;
  *(void *)(a1 + 72) = v10;
  uint64_t DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*(mlir::MLIRContext **)(a1 + 8));
  uint64_t v12 = DiagEngine;
  if (*(void *)a1) {
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, *(void *)a1);
  }
  *(void *)&long long v17 = a1;
  unint64_t v18 = (unint64_t)_ZN4llvm6detail18UniqueFunctionBaseIN4mlir13LogicalResultEJRNS2_10DiagnosticEEE15CallbacksHolderIZNS2_16DiagnosticEngine15registerHandlerIZNS2_26SourceMgrDiagnosticHandlerC1ERNS_9SourceMgrEPNS2_11MLIRContextERNS_11raw_ostreamEONS_15unique_functionIFbNS2_8LocationEEEEE3__0vEENSt3__19enable_ifIXsr3std7is_sameIT0_vEE5valueEyE4typeEOT_EUlS5_E_SU_vE9CallbacksE
      + 2;
  uint64_t v13 = mlir::DiagnosticEngine::registerHandler(v12, &v17);
  char v14 = v18;
  if (v18 >= 8)
  {
    if ((v18 & 4) != 0)
    {
      if ((v18 & 2) != 0) {
        uint64_t v15 = &v17;
      }
      else {
        uint64_t v15 = (long long *)v17;
      }
      (*(void (**)(uint64_t@<X0>, uint64_t@<X8>))((v18 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v15, *(void *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16));
    }
    if ((v14 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v17, *((void **)&v17 + 1));
    }
  }
  *(void *)a1 = v13;
  return a1;
}

uint64_t mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler(llvm *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  int v8 = llvm::errs(a1);

  return mlir::SourceMgrDiagnosticHandler::SourceMgrDiagnosticHandler((uint64_t)a1, a2, a3, (uint64_t)v8, a4);
}

void mlir::SourceMgrDiagnosticHandler::~SourceMgrDiagnosticHandler(mlir::SourceMgrDiagnosticHandler *this)
{
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = 0;
        do
        {
          uint64_t v5 = *(llvm **)(*(void *)v2 + v4);
          if (v5 != (llvm *)-8 && v5 != 0) {
            llvm::deallocate_buffer(v5, (void *)(*(void *)v5 + 17));
          }
          v4 += 8;
        }
        while (8 * v3 != v4);
      }
    }
    free(*(void **)v2);
    operator delete((void *)v2);
  }
  unint64_t v7 = *((void *)this + 7);
  if (v7 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      int v8 = (void *)((char *)this + 32);
      if ((v7 & 2) == 0) {
        int v8 = (void *)*v8;
      }
      (*(void (**)(void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
    }
    if ((v7 & 2) == 0) {
      llvm::deallocate_buffer(*((llvm **)this + 4), *((void **)this + 5));
    }
  }
  if (*(void *)this)
  {
    uint64_t DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*((mlir::MLIRContext **)this + 1));
    mlir::DiagnosticEngine::eraseHandler(DiagEngine, *(void *)this);
  }
}

void mlir::SourceMgrDiagnosticHandler::emitDiagnostic(uint64_t a1, uint64_t a2, llvm::Twine *a3, int a4, int a5)
{
  v70[20] = *MEMORY[0x1E4F143B8];
  uint64_t v54 = a2;
  uint64_t Value = 0;
  BOOL v41 = &Value;
  mlir::LocationAttr::walk(&v54, (uint64_t (*)(uint64_t, void))llvm::function_ref<mlir::WalkResult ()(mlir::Location)>::callback_fn<mlir::FileLineColLoc mlir::LocationAttr::findInstanceOf<mlir::FileLineColLoc>(void)::{lambda(mlir::FileLineColLoc)#1}>, (uint64_t)&v41);
  unsigned int v53 = Value;
  if (!Value)
  {
    char v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    LODWORD(v56) = 0;
    LOBYTE(v60) = 0;
    uint64_t v61 = 0;
    LODWORD(v62) = 1;
    size_t v58 = 0;
    unsigned int v59 = 0;
    uint64_t v57 = 0;
    uint64_t Value = &unk_1EC9A38B8;
    unsigned int v63 = &v50;
    llvm::raw_ostream::SetBufferAndMode((uint64_t)&Value, 0, 0, 0);
    if (*(_UNKNOWN **)(*(void *)v54 + 136) != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
    {
      mlir::Attribute::print((mlir::Attribute *)&v54, (llvm::raw_ostream *)&Value, 0);
      if (v58 - (unint64_t)v59 > 1) {
        *v59++ = 8250;
      }
      else {
        llvm::raw_ostream::write((llvm::raw_ostream *)&Value, ": ", 2uLL);
      }
    }
    llvm::Twine::print(a3, (llvm::raw_ostream *)&Value);
    unint64_t v36 = *(uint64_t **)(a1 + 16);
    BOOL v37 = *(llvm::raw_ostream **)(a1 + 24);
    int v38 = dword_181109660[a4];
    LOWORD(v45) = 260;
    BOOL v41 = v63;
    llvm::SourceMgr::PrintMessage(v36, v37, 0, v38, (llvm::Twine *)&v41, 0, 0, v39, 0, 0, 1);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&Value);
    if (SHIBYTE(v52) < 0) {
      goto LABEL_59;
    }
    return;
  }
  if (a5)
  {
    long long v9 = (const char *)mlir::SourceMgrDiagnosticHandler::convertLocToSMLoc(a1, (uint64_t)Value);
    if (v9)
    {
      llvm::SourceMgr::PrintMessage(*(uint64_t **)(a1 + 16), *(llvm::raw_ostream **)(a1 + 24), v9, dword_181109660[a4], a3, 0, 0, v10, 0, 0, 1);
      return;
    }
  }
  char v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  int v42 = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  int v48 = 1;
  uint64_t v44 = 0;
  unint64_t v45 = 0;
  uint64_t v43 = 0;
  BOOL v41 = (void **)&unk_1EC9A38B8;
  uint64_t v49 = &v50;
  llvm::raw_ostream::SetBufferAndMode((uint64_t)&v41, 0, 0, 0);
  uint64_t Value = (void *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v53);
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  size_t v13 = v11;
  char v14 = v45;
  if (v11 <= v44 - v45)
  {
    long long v16 = &v45;
    if (v11)
    {
      memcpy(v45, AttrData, v11);
      char v14 = &v45[v13];
      v45 += v13;
    }
    uint64_t v15 = (llvm::raw_ostream *)&v41;
    if (v44 != v14) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v15 = llvm::raw_ostream::write((llvm::raw_ostream *)&v41, (const char *)AttrData, v11);
    long long v16 = (char **)((char *)v15 + 32);
    char v14 = (char *)*((void *)v15 + 4);
    if (*((char **)v15 + 3) != v14)
    {
LABEL_7:
      *char v14 = 58;
      ++*v16;
      goto LABEL_15;
    }
  }
  uint64_t v15 = llvm::raw_ostream::write(v15, ":", 1uLL);
LABEL_15:
  unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v53);
  unint64_t v18 = llvm::raw_ostream::operator<<(v15, Position);
  uint64_t v19 = v18;
  unsigned int v20 = (unsigned char *)*((void *)v18 + 4);
  if (*((unsigned char **)v18 + 3) == v20)
  {
    uint64_t v19 = llvm::raw_ostream::write(v18, ":", 1uLL);
  }
  else
  {
    *unsigned int v20 = 58;
    ++*((void *)v18 + 4);
  }
  unsigned int Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v53);
  llvm::raw_ostream::operator<<(v19, Column);
  int v22 = *((char *)v49 + 23);
  if (v22 >= 0) {
    uint64_t v23 = v49;
  }
  else {
    uint64_t v23 = *v49;
  }
  if (v22 >= 0) {
    size_t v24 = *((unsigned __int8 *)v49 + 23);
  }
  else {
    size_t v24 = (size_t)v49[1];
  }
  int v25 = dword_181109660[a4];
  p_p = &__p;
  llvm::Twine::str(a3, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else
  {
    size_t size = __p.__r_.__value_.__l.__size_;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t Value = 0;
  uint64_t v56 = 0;
  if (v24 > 0x7FFFFFFFFFFFFFF7) {
LABEL_68:
  }
    abort();
  if (v24 >= 0x17)
  {
    uint64_t v29 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17) {
      uint64_t v29 = v24 | 7;
    }
    uint64_t v30 = v29 + 1;
    long long v28 = operator new(v29 + 1);
    size_t v58 = v24;
    unsigned int v59 = (_WORD *)(v30 | 0x8000000000000000);
    uint64_t v57 = v28;
    goto LABEL_34;
  }
  long long v28 = &v57;
  HIBYTE(v59) = v24;
  if (v24) {
LABEL_34:
  }
    memmove(v28, v23, v24);
  *((unsigned char *)v28 + v24) = 0;
  uint64_t v60 = -1;
  LODWORD(v61) = v25;
  if (size > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_68;
  }
  if (size >= 0x17)
  {
    uint64_t v32 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17) {
      uint64_t v32 = size | 7;
    }
    uint64_t v33 = v32 + 1;
    uint64_t v31 = operator new(v32 + 1);
    unsigned int v63 = (void **)size;
    unint64_t v64 = v33 | 0x8000000000000000;
    unsigned int v62 = v31;
    goto LABEL_42;
  }
  uint64_t v31 = &v62;
  HIBYTE(v64) = size;
  if (size) {
LABEL_42:
  }
    memmove(v31, p_p, size);
  *((unsigned char *)v31 + size) = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v65 = 0u;
  unint64_t v68 = v70;
  uint64_t v69 = 0x400000000;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)&Value, 0, *(llvm::raw_ostream **)(a1 + 24), 1, 1);
  uint64_t v34 = (char *)v68;
  if (v69)
  {
    uint64_t v35 = 40 * v69;
    do
    {
      if (v34[v35 - 1] < 0) {
        operator delete(*(void **)&v34[v35 - 24]);
      }
      v35 -= 40;
    }
    while (v35);
    uint64_t v34 = (char *)v68;
  }
  if (v34 != (char *)v70) {
    free(v34);
  }
  if (*((void *)&v66 + 1))
  {
    *(void *)&long long v67 = *((void *)&v66 + 1);
    operator delete(*((void **)&v66 + 1));
  }
  if (SBYTE7(v66) < 0)
  {
    operator delete((void *)v65);
    if ((SHIBYTE(v64) & 0x80000000) == 0)
    {
LABEL_57:
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      goto LABEL_63;
    }
  }
  else if ((SHIBYTE(v64) & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v62);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_58:
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v41);
    if ((SHIBYTE(v52) & 0x80000000) == 0) {
      return;
    }
    goto LABEL_59;
  }
LABEL_63:
  operator delete(v57);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v41);
  if (SHIBYTE(v52) < 0) {
LABEL_59:
  }
    operator delete(v50);
}

unint64_t mlir::SourceMgrDiagnosticHandler::convertLocToSMLoc(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = a2;
  if (!mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14)) {
    return 0;
  }
  if (!mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v14)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v14);
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&Value);
  int SourceMgrBufferIDForFile = mlir::detail::SourceMgrDiagnosticHandlerImpl::getSourceMgrBufferIDForFile(v3, v4, AttrData, v6);
  if (!SourceMgrBufferIDForFile) {
    return 0;
  }
  int v8 = SourceMgrBufferIDForFile;
  long long v9 = *(llvm::SourceMgr **)(a1 + 16);
  unsigned int Position = mlir::AffineDimExpr::getPosition((mlir::AffineDimExpr *)&v14);
  unsigned int Column = mlir::FileLineColLoc::getColumn((mlir::FileLineColLoc *)&v14);
  return llvm::SourceMgr::FindLocForLineAndColumn(v9, v8, Position, Column);
}

void mlir::SourceMgrDiagnosticHandler::emitDiagnostic(mlir::SourceMgrDiagnosticHandler *this, mlir::Diagnostic *a2)
{
  v43[6] = *MEMORY[0x1E4F143B8];
  BOOL v41 = (std::string *)v43;
  uint64_t v42 = 0x200000000;
  uint64_t LHS = *(void *)a2;
  unint64_t LocToShow = mlir::SourceMgrDiagnosticHandler::findLocToShow((uint64_t)this, *(void *)a2);
  if (v6)
  {
    unint64_t v7 = (std::string::__raw *)&v41[v42];
    v7->__words[1] = 0;
    v7->__words[2] = 0;
    v7->__words[0] = LocToShow;
    LODWORD(v42) = v42 + 1;
  }
  unint64_t v38 = getCallSiteLoc(LHS);
  uint64_t v39 = v8;
  if ((_BYTE)v8)
  {
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v38);
    if (*((_DWORD *)this + 16))
    {
      unsigned int v9 = 0;
      do
      {
        unint64_t v10 = mlir::SourceMgrDiagnosticHandler::findLocToShow((uint64_t)this, LHS);
        if (v11)
        {
          if (v42 >= HIDWORD(v42))
          {
            __p.__r_.__value_.__r.__words[0] = v10;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"called from";
            __p.__r_.__value_.__r.__words[2] = 11;
            unint64_t v14 = v42 + 1;
            if (v41 <= &__p && &v41[v42] > &__p)
            {
              int64_t v19 = (char *)&__p - (char *)v41;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v14, 24);
              long long v16 = v41;
              p_p = (std::string *)((char *)v41 + v19);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v43, v14, 24);
              p_p = &__p;
              long long v16 = v41;
            }
            long long v17 = &v16[v42];
            long long v18 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = p_p->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          else
          {
            uint64_t v12 = (std::string::__raw *)&v41[v42];
            v12->__words[0] = v10;
            v12->__words[1] = (std::string::size_type)"called from";
            v12->__words[2] = 11;
          }
          LODWORD(v42) = v42 + 1;
        }
        unint64_t v38 = getCallSiteLoc(LHS);
        LOBYTE(v39) = v13;
        if (!v13) {
          break;
        }
        uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v38);
        ++v9;
      }
      while (v9 < *((_DWORD *)this + 16));
    }
  }
  if (v42)
  {
    uint64_t v20 = v41->__r_.__value_.__r.__words[0];
    mlir::Diagnostic::str(a2, &__p);
    __int16 v35 = 260;
    uint64_t v34 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v20, (llvm::Twine *)&v34, *((_DWORD *)a2 + 2), 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      int v21 = v42;
      if (v42 == 1) {
        goto LABEL_27;
      }
    }
    else
    {
      int v21 = v42;
      if (v42 == 1) {
        goto LABEL_27;
      }
    }
    uint64_t v23 = &v41[v21];
    size_t v24 = (uint64_t *)&v41[1];
    do
    {
      uint64_t v25 = *v24;
      __int16 v33 = 261;
      v32[0] = v24[1];
      v32[1] = v24[2];
      mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v25, (llvm::Twine *)v32, 0, 1);
      v24 += 3;
    }
    while (v24 != (uint64_t *)v23);
  }
  else
  {
    uint64_t v22 = *(void *)a2;
    mlir::Diagnostic::str(a2, &__p);
    __int16 v37 = 260;
    unint64_t v36 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v22, (llvm::Twine *)&v36, *((_DWORD *)a2 + 2), 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_27:
  uint64_t v26 = (uint64_t **)*((void *)a2 + 19);
  for (uint64_t i = (uint64_t **)*((void *)a2 + 20); v26 != i; ++v26)
  {
    long long v28 = *v26;
    uint64_t v29 = **v26;
    mlir::Diagnostic::str((mlir::Diagnostic *)*v26, &__p);
    __int16 v31 = 260;
    uint64_t v30 = &__p;
    mlir::SourceMgrDiagnosticHandler::emitDiagnostic((uint64_t)this, v29, (llvm::Twine *)&v30, *((_DWORD *)v28 + 2), LHS != *v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t LHS = *v28;
  }
  if (v41 != (std::string *)v43) {
    free(v41);
  }
}

unint64_t getCallSiteLoc(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 136);
  if (a1 && v2 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    uint64_t v12 = a1;
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v12);
    a1 = getCallSiteLoc(LHS);
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFFF00;
  }
  else if (a1 && v2 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id)
  {
    unint64_t v4 = a1 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(a1) = 0;
    if (v1)
    {
      unint64_t v4 = 0;
      if (v2 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id)
      {
        uint64_t v12 = v1;
        uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v12);
        if (v6)
        {
          unint64_t v7 = (void *)Value;
          uint64_t v8 = 8 * v6;
          while (1)
          {
            a1 = getCallSiteLoc(*v7);
            uint64_t v9 = a1;
            if (v10) {
              break;
            }
            ++v7;
            v8 -= 8;
            if (!v8)
            {
              LOBYTE(a1) = 0;
              break;
            }
          }
          unint64_t v4 = v9 & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          LOBYTE(a1) = 0;
          unint64_t v4 = 0;
        }
      }
    }
    else
    {
      unint64_t v4 = 0;
    }
  }
  return v4 | a1;
}

uint64_t mlir::detail::SourceMgrDiagnosticHandlerImpl::getSourceMgrBufferIDForFile(uint64_t a1, void *a2, int8x16_t *a3, size_t a4)
{
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a3, (const unsigned __int8 *)a4);
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a1 + 8)) {
    return *(unsigned int *)(*(void *)(*(void *)a1 + 8 * Key) + 8);
  }
  uint64_t v9 = -1431655765 * ((a2[1] - *a2) >> 3);
  if (!v9)
  {
LABEL_10:
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v22 = 0;
    if (a4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (a4 >= 0x17)
    {
      uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17) {
        uint64_t v16 = a4 | 7;
      }
      uint64_t v17 = v16 + 1;
      uint64_t v15 = operator new(v16 + 1);
      __p[1] = (void *)a4;
      unint64_t v20 = v17 | 0x8000000000000000;
      __p[0] = v15;
    }
    else
    {
      HIBYTE(v20) = a4;
      uint64_t v15 = __p;
      if (!a4) {
        goto LABEL_19;
      }
    }
    memmove(v15, a3, a4);
LABEL_19:
    *((unsigned char *)v15 + a4) = 0;
    uint64_t v12 = llvm::SourceMgr::AddIncludeFile(a2, (uint64_t)__p, 0, (uint64_t)v21);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
    *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1, a3, (const unsigned __int8 *)a4)
              + 8) = v12;
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    return v12;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 24 * v9;
  uint64_t v12 = 1;
  while (1)
  {
    char v13 = (const void *)(*(uint64_t (**)(void))(**(void **)(*a2 + v10) + 16))(*(void *)(*a2 + v10));
    if (v14 == a4 && (!a4 || !memcmp(v13, a3, a4))) {
      break;
    }
    uint64_t v12 = (v12 + 1);
    v10 += 24;
    if (v11 == v10) {
      goto LABEL_10;
    }
  }
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(a1, a3, (const unsigned __int8 *)a4)
            + 8) = v12;
  return v12;
}

unint64_t mlir::SourceMgrDiagnosticHandler::findLocToShow(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 <= 7)
  {
    unint64_t v11 = a2 & 0xFFFFFFFFFFFFFF00;
    uint64_t v12 = a2;
  }
  else
  {
    uint64_t v5 = (void *)(a1 + 32);
    if ((v3 & 2) == 0) {
      uint64_t v5 = (void *)*v5;
    }
    if ((*(unsigned int (**)(void *, unint64_t))(v3 & 0xFFFFFFFFFFFFFFF8))(v5, a2))
    {
      uint64_t v6 = *(void **)(*(void *)v2 + 136);
      if (v6 != &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id || v2 == 0)
      {
        if (v6 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
        {
          unint64_t v11 = v2 & 0xFFFFFFFFFFFFFF00;
          goto LABEL_38;
        }
        if (v6 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id && v2 != 0)
        {
          unint64_t v22 = v2;
          uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v22);
          if (v16)
          {
            uint64_t v17 = (void *)Value;
            uint64_t v18 = 8 * v16;
            while (1)
            {
              uint64_t LocToShow = mlir::SourceMgrDiagnosticHandler::findLocToShow(a1, *v17);
              unint64_t v2 = LocToShow;
              if (v20) {
                break;
              }
              ++v17;
              v18 -= 8;
              if (!v18)
              {
                unint64_t v2 = LocToShow & 0xFFFFFFFFFFFFFF00;
                break;
              }
            }
            unint64_t v11 = v2 & 0xFFFFFFFFFFFFFF00;
          }
          else
          {
            LOBYTE(v2) = 0;
            unint64_t v11 = 0;
          }
          goto LABEL_38;
        }
        if (v6 != &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id || v2 == 0)
        {
          if (v6 != &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id || v2 == 0)
          {
            unint64_t v11 = 0;
            LOBYTE(v2) = 0;
LABEL_38:
            uint64_t v12 = v2;
            return v11 | v12;
          }
          unint64_t v22 = v2;
          uint64_t RHS = mlir::AffineBinaryOpExpr::getRHS((mlir::AffineBinaryOpExpr *)&v22);
        }
        else
        {
          unint64_t v22 = v2;
          uint64_t RHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v22);
        }
      }
      else
      {
        unint64_t v22 = v2;
        uint64_t RHS = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v22);
      }
      uint64_t v14 = mlir::SourceMgrDiagnosticHandler::findLocToShow(a1, RHS);
      LOBYTE(v2) = v14;
      unint64_t v11 = v14 & 0xFFFFFFFFFFFFFF00;
      goto LABEL_38;
    }
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  return v11 | v12;
}

mlir::ParallelDiagnosticHandler *mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler(mlir::ParallelDiagnosticHandler *this, mlir::MLIRContext *a2)
{
  unint64_t v4 = (mlir::detail::ParallelDiagnosticHandlerImpl *)operator new(0x98uLL);
  *(void *)this = mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(v4, a2);
  return this;
}

void mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler(mlir::ParallelDiagnosticHandler *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void mlir::ParallelDiagnosticHandler::setOrderIDForThread(mlir::ParallelDiagnosticHandler *this, uint64_t a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t threadid = llvm::get_threadid(this);
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 16));
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(v3 + 88, &threadid)[1] = a2;
  std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 16));
}

void mlir::ParallelDiagnosticHandler::eraseOrderIDForThread(mlir::ParallelDiagnosticHandler *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t threadid = llvm::get_threadid(this);
  std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 16));
  int v3 = *(_DWORD *)(v1 + 104);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 88);
    unsigned int v5 = v3 - 1;
    LODWORD(v6) = (v3 - 1) & (37 * threadid);
    unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (threadid == *v7)
    {
LABEL_3:
      uint64_t *v7 = -2;
      *(int32x2_t *)(v1 + 96) = vadd_s32(*(int32x2_t *)(v1 + 96), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v9 = 1;
      while (v8 != -1)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & v5;
        uint64_t v8 = *(void *)(v4 + 16 * v6);
        if (threadid == v8)
        {
          unint64_t v7 = (uint64_t *)(v4 + 16 * v6);
          goto LABEL_3;
        }
      }
    }
  }

  std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 16));
}

void *std::vector<std::unique_ptr<char []>>::__push_back_slow_path<std::unique_ptr<char []>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v9 = (char *)operator new(8 * v8);
  }
  else
  {
    int v9 = 0;
  }
  int v10 = &v9[8 * v3];
  unint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)int v10 = v12;
  char v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    int64_t v19 = &v15[-v18];
    v10 -= v18;
    char v20 = &v9[8 * v3 - 16];
    int v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)int v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)char v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      long long v28 = (void *)*((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28) {
        operator delete[](v27);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

mlir::detail::ParallelDiagnosticHandlerImpl *mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::detail::ParallelDiagnosticHandlerImpl *this, mlir::MLIRContext *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = llvm::PrettyStackTraceEntry::PrettyStackTraceEntry(this);
  *(void *)unint64_t v4 = &unk_1EC9CD7F8;
  MEMORY[0x1852FDB50]((char *)v4 + 16);
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((void *)this + 18) = a2;
  uint64_t DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(a2);
  *(void *)&long long v11 = this;
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Diagnostic &>::CallbacksHolder<mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1},mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1},void>::Callbacks
      + 2;
  *((void *)this + 17) = mlir::DiagnosticEngine::registerHandler(DiagEngine, &v11);
  char v8 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        int v9 = (uint64_t *)&v11;
      }
      else {
        int v9 = (uint64_t *)v11;
      }
      (*(void (**)(uint64_t *, unint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))(v9, v6, v7);
    }
    if ((v8 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v11, *((void **)&v11 + 1));
    }
  }
  return this;
}

void mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl(mlir::detail::ParallelDiagnosticHandlerImpl *this)
{
}

{
  std::recursive_mutex **DiagEngine;
  void *v3;
  void *v4;
  void *v5;
  mlir::detail::ParallelDiagnosticHandlerImpl *v6;

  *(void *)this = &unk_1EC9CD7F8;
  uint64_t DiagEngine = (std::recursive_mutex **)mlir::MLIRContext::getDiagEngine(*((mlir::MLIRContext **)this + 18));
  mlir::DiagnosticEngine::eraseHandler(DiagEngine, *((void *)this + 17));
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3 != *((void **)this + 15))
  {
    unint64_t v6 = this;
    mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics((uint64_t)this, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl()::{lambda(mlir::Diagnostic &)#1}>, (uint64_t)&v6);
    uint64_t v3 = (void *)*((void *)this + 14);
  }
  if (v3)
  {
    unint64_t v4 = (void *)*((void *)this + 15);
    unsigned int v5 = v3;
    if (v4 != v3)
    {
      do
      {
        v4 -= 23;
        std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100]((uint64_t)this + 128, v4);
      }
      while (v4 != v3);
      unsigned int v5 = (void *)*((void *)this + 14);
    }
    *((void *)this + 15) = v3;
    operator delete(v5);
  }
  llvm::deallocate_buffer(*((llvm **)this + 11), (void *)(16 * *((unsigned int *)this + 26)));
}

void sub_180482924(void *__p)
{
  operator delete(__p);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::print(mlir::detail::ParallelDiagnosticHandlerImpl *this, llvm::raw_ostream *a2)
{
  if (*((void *)this + 14) != *((void *)this + 15))
  {
    unint64_t v4 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v4 > 0x16uLL)
    {
      qmemcpy(v4, "In-Flight Diagnostics:\n", 23);
      *((void *)a2 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(a2, "In-Flight Diagnostics:\n", 0x17uLL);
    }
    unsigned int v5 = a2;
    mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics((uint64_t)this, (void (*)(uint64_t, uint64_t))llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::print(llvm::raw_ostream &)::{lambda(mlir::Diagnostic const&)#1}>, (uint64_t)&v5);
  }
}

uint64_t mlir::detail::ParallelDiagnosticHandlerImpl::ParallelDiagnosticHandlerImpl(mlir::MLIRContext *)::{lambda(mlir::Diagnostic &)#1}::operator()(llvm *a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t threadid = llvm::get_threadid(a1);
  uint64_t v17 = threadid;
  std::recursive_mutex::lock((std::recursive_mutex *)(v3 + 16));
  int v5 = *(_DWORD *)(v3 + 104);
  if (!v5)
  {
LABEL_11:
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v3 + 88);
  int v7 = v5 - 1;
  unsigned int v8 = (37 * threadid) & v7;
  uint64_t v9 = *(void *)(v6 + 16 * v8);
  if (threadid != v9)
  {
    int v14 = 1;
    while (v9 != -1)
    {
      unsigned int v15 = v8 + v14++;
      unsigned int v8 = v15 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * (v15 & v7));
      if (threadid == v9) {
        goto LABEL_3;
      }
    }
    goto LABEL_11;
  }
LABEL_3:
  int v10 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(v3 + 88, &v17)+ 1;
  unint64_t v11 = *(void *)(v3 + 120);
  if (v11 >= *(void *)(v3 + 128))
  {
    uint64_t v12 = std::vector<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::__emplace_back_slow_path<unsigned long &,mlir::Diagnostic>((uint64_t *)(v3 + 112), v10, a2);
  }
  else
  {
    std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(v3 + 128, *(void *)(v3 + 120), v10, a2);
    uint64_t v12 = v11 + 184;
  }
  *(void *)(v3 + 120) = v12;
  uint64_t v13 = 1;
LABEL_12:
  std::recursive_mutex::unlock((std::recursive_mutex *)(v3 + 16));
  return v13;
}

uint64_t std::vector<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::__emplace_back_slow_path<unsigned long &,mlir::Diagnostic>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    abort();
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v9 = 0x1642C8590B21642;
  }
  else {
    unint64_t v9 = v4;
  }
  if (v9)
  {
    if (v9 > 0x1642C8590B21642) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v10 = (char *)operator new(184 * v9);
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v11 = (uint64_t)&v10[184 * v3];
  uint64_t v12 = &v10[184 * v9];
  std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(v8, v11, a2, a3);
  uint64_t v13 = v11 + 184;
  unsigned int v15 = (char *)*a1;
  int v14 = (char *)a1[1];
  if (v14 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (!v14) {
      return v11 + 184;
    }
    goto LABEL_19;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = v11 + v16;
    uint64_t v18 = &v14[v16];
    *(void *)(v11 + v16 - 184) = *(void *)&v14[v16 - 184];
    uint64_t v19 = *(void *)&v14[v16 - 176];
    int v20 = *(_DWORD *)&v14[v16 - 168];
    *(void *)(v11 + v16 - 160) = v11 + v16 - 144;
    uint64_t v21 = v11 + v16 - 160;
    *(_DWORD *)(v21 - 8) = v20;
    *(void *)(v21 - 16) = v19;
    *(void *)(v21 + 8) = 0x400000000;
    if (*(_DWORD *)&v14[v16 - 152]) {
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v21, (uint64_t)(v18 - 160));
    }
    *(void *)(v17 - 48) = 0;
    *(void *)(v17 - 40) = 0;
    *(void *)(v17 - 32) = 0;
    *(_OWORD *)(v17 - 48) = *((_OWORD *)v18 - 3);
    *(void *)(v17 - 32) = *((void *)v18 - 4);
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    *((void *)v18 - 4) = 0;
    *(void *)(v17 - 24) = 0;
    *(void *)(v17 - 16) = 0;
    *(void *)(v17 - 8) = 0;
    *(_OWORD *)(v17 - 24) = *(_OWORD *)(v18 - 24);
    *(void *)(v17 - 8) = *((void *)v18 - 1);
    *((void *)v18 - 3) = 0;
    *((void *)v18 - 2) = 0;
    *((void *)v18 - 1) = 0;
    v16 -= 184;
  }
  while (&v14[v16] != v15);
  int v14 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  *a1 = v11 + v16;
  a1[1] = v13;
  a1[2] = (uint64_t)v12;
  while (v22 != v14)
  {
    v22 -= 184;
    std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100](v8, v22);
  }
  if (v14) {
LABEL_19:
  }
    operator delete(v14);
  return v11 + 184;
}

void std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::construct[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic,unsigned long &,mlir::Diagnostic>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a3;
  uint64_t v16 = *a4;
  int v17 = *((_DWORD *)a4 + 2);
  __src = v20;
  uint64_t v19 = 0x400000000;
  if (*((_DWORD *)a4 + 6))
  {
    llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)&__src, (uint64_t)(a4 + 2));
    unsigned int v7 = v19;
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = a4[16];
  uint64_t v9 = a4[17];
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  a4[16] = 0;
  a4[17] = 0;
  uint64_t v10 = a4[18];
  uint64_t v11 = a4[19];
  a4[18] = 0;
  a4[19] = 0;
  uint64_t v23 = v10;
  uint64_t v24 = v11;
  uint64_t v12 = a4[20];
  uint64_t v13 = a4[21];
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  a4[20] = 0;
  a4[21] = 0;
  *(_DWORD *)(a2 + 16) = v17;
  *(void *)a2 = v6;
  *(void *)(a2 + 8) = v16;
  *(void *)(a2 + 24) = a2 + 40;
  *(void *)(a2 + 32) = 0x400000000;
  if ((void **)(a2 + 24) != &__src && v7)
  {
    if (__src == v20)
    {
      uint64_t v15 = v7;
      if (v7 < 5
        || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 24, (void *)(a2 + 40), v7, 24),
            uint64_t v15 = v19,
            v19))
      {
        memcpy(*(void **)(a2 + 24), __src, 24 * v15);
      }
      *(_DWORD *)(a2 + 32) = v7;
      uint64_t v8 = v21;
      uint64_t v9 = v22;
      uint64_t v10 = v23;
      uint64_t v11 = v24;
      uint64_t v12 = v25;
      uint64_t v13 = v26;
    }
    else
    {
      *(void *)(a2 + 24) = __src;
      int v14 = HIDWORD(v19);
      *(_DWORD *)(a2 + 32) = v7;
      *(_DWORD *)(a2 + 36) = v14;
      __src = v20;
      HIDWORD(v19) = 0;
    }
    LODWORD(v19) = 0;
  }
  *(void *)(a2 + 136) = v8;
  *(void *)(a2 + 144) = v9;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  *(void *)(a2 + 152) = v10;
  *(void *)(a2 + 160) = v11;
  *(void *)(a2 + 168) = v12;
  *(void *)(a2 + 176) = v13;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0;
  if (__src != v20) {
    free(__src);
  }
}

void std::allocator<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  unint64_t v3 = (void **)a2[20];
  if (v3)
  {
    unint64_t v4 = (void **)a2[21];
    int v5 = (void *)a2[20];
    if (v4 != v3)
    {
      do
        unint64_t v4 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v4 - 1);
      while (v4 != v3);
      int v5 = (void *)a2[20];
    }
    a2[21] = v3;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a2[17];
  if (v6)
  {
    unsigned int v7 = (void *)a2[18];
    uint64_t v8 = (void *)a2[17];
    if (v7 != v6)
    {
      do
      {
        uint64_t v10 = (void *)*--v7;
        uint64_t v9 = v10;
        void *v7 = 0;
        if (v10) {
          operator delete[](v9);
        }
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a2[17];
    }
    a2[18] = v6;
    operator delete(v8);
  }
  uint64_t v11 = (void *)a2[3];
  if (v11 != a2 + 5)
  {
    free(v11);
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>,unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (!v4) {
    goto LABEL_22;
  }
  unsigned int v5 = (37 * *a2) & (v4 - 1);
  uint64_t result = (uint64_t *)(*(void *)a1 + 16 * v5);
  uint64_t v7 = *result;
  if (*a2 == *result) {
    return result;
  }
  uint64_t v9 = 0;
  int v10 = 1;
  while (v7 != -1)
  {
    if (v9) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = v7 == -2;
    }
    if (v11) {
      uint64_t v9 = result;
    }
    unsigned int v12 = v5 + v10++;
    unsigned int v5 = v12 & (v4 - 1);
    uint64_t result = (uint64_t *)(*(void *)a1 + 16 * v5);
    uint64_t v7 = *result;
    if (*a2 == *result) {
      return result;
    }
  }
  if (v9) {
    uint64_t result = v9;
  }
  int v13 = *(_DWORD *)(a1 + 8);
  if (4 * v13 + 4 < 3 * v4)
  {
    if (v4 + ~v13 - *(_DWORD *)(a1 + 12) > v4 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_22:
    v4 *= 2;
  }
  llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::grow(a1, v4);
  uint64_t v8 = *a2;
  int v14 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v15 = (37 * *a2) & v14;
  uint64_t result = (uint64_t *)(*(void *)a1 + 16 * v15);
  uint64_t v16 = *result;
  if (*a2 == *result) {
    goto LABEL_7;
  }
  int v17 = 0;
  int v18 = 1;
  while (v16 != -1)
  {
    if (v17) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v16 == -2;
    }
    if (v19) {
      int v17 = result;
    }
    unsigned int v20 = v15 + v18++;
    unsigned int v15 = v20 & v14;
    uint64_t result = (uint64_t *)(*(void *)a1 + 16 * v15);
    uint64_t v16 = *result;
    if (v8 == *result) {
      goto LABEL_7;
    }
  }
  if (v17) {
    uint64_t result = v17;
  }
LABEL_6:
  uint64_t v8 = *result;
LABEL_7:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

void *llvm::DenseMap<unsigned long long,unsigned long,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  unsigned int v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(16 * v8, (std::align_val_t)8uLL);
  int v10 = result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      if (((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
        goto LABEL_41;
      }
      uint64_t v12 = ((v11 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
      int v10 = &result[2 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
      int v13 = result + 2;
      uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v13 - 2) = -1;
        *int v13 = -1;
        v13 += 4;
        v14 -= 2;
      }
      while (v14);
      if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_41:
        do
        {
          *int v10 = -1;
          v10 += 2;
        }
        while (v10 != &result[2 * v11]);
      }
    }
    if (v3)
    {
      int v15 = 0;
      int v16 = v11 - 1;
      int v17 = v4;
      do
      {
        uint64_t v25 = *(void *)v17;
        if (*(void *)v17 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          unsigned int v26 = (37 * v25) & v16;
          uint64_t v23 = &result[2 * v26];
          uint64_t v27 = *v23;
          if (v25 != *v23)
          {
            long long v28 = 0;
            int v29 = 1;
            while (v27 != -1)
            {
              if (v28) {
                BOOL v30 = 0;
              }
              else {
                BOOL v30 = v27 == -2;
              }
              if (v30) {
                long long v28 = v23;
              }
              unsigned int v31 = v26 + v29++;
              unsigned int v26 = v31 & v16;
              uint64_t v23 = &result[2 * (v31 & v16)];
              uint64_t v27 = *v23;
              if (v25 == *v23) {
                goto LABEL_23;
              }
            }
            if (v28) {
              uint64_t v23 = v28;
            }
          }
LABEL_23:
          uint64_t v24 = *((void *)v17 + 1);
          *uint64_t v23 = v25;
          v23[1] = v24;
          *(_DWORD *)(a1 + 8) = ++v15;
        }
        int v17 = (llvm *)((char *)v17 + 16);
      }
      while (v17 != (llvm *)((char *)v4 + 16 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(16 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    if (((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
      goto LABEL_18;
    }
    uint64_t v19 = ((v18 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    int v10 = &result[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
    unsigned int v20 = result + 2;
    uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *(v20 - 2) = -1;
      *unsigned int v20 = -1;
      v20 += 4;
      v21 -= 2;
    }
    while (v21);
    if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_18:
      uint64_t v22 = &result[2 * v18];
      do
      {
        *int v10 = -1;
        v10 += 2;
      }
      while (v10 != v22);
    }
  }
  return result;
}

void sub_1804833FC()
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(v0 + 16));
  llvm::PrettyStackTraceEntry::~PrettyStackTraceEntry((llvm::PrettyStackTraceEntry *)v0);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::emitDiagnostics(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  unint64_t v6 = *(uint64_t **)(a1 + 112);
  int v7 = *(unint64_t **)(a1 + 120);
  if ((char *)v7 - (char *)v6 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v6, v7, (uint64_t)&v15, 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3), 0, 0);
    uint64_t v13 = *(void *)(a1 + 112);
    uint64_t i = *(void *)(a1 + 120);
    if (v13 == i) {
      return;
    }
    goto LABEL_8;
  }
  unsigned int v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  unint64_t v9 = 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3);
  while (1)
  {
    int v10 = (uint64_t *)operator new(184 * v9, v8);
    if (v10) {
      break;
    }
    BOOL v11 = v9 > 1;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_5;
    }
  }
  uint64_t v14 = v10;
  std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v6, v7, (uint64_t)&v15, 0xD37A6F4DE9BD37A7 * (((char *)v7 - (char *)v6) >> 3), v10, v9);
  operator delete(v14);
  uint64_t v13 = *(void *)(a1 + 112);
  for (uint64_t i = *(void *)(a1 + 120); v13 != i; v13 += 184)
LABEL_8:
    a2(a3, v13 + 8);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t *a1, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    int v7 = a1;
    if (a4 == 2)
    {
      if (*(a2 - 23) < *a1)
      {
        std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(a1, (uint64_t *)a2 - 23);
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((unint64_t *)a1, a2);
    }
    else
    {
      uint64_t v12 = a4 >> 1;
      uint64_t v13 = (unint64_t *)&a1[23 * (a4 >> 1)];
      unint64_t v14 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((uint64_t)a1, v13, a3, v14, (uint64_t)a5);
        uint64_t v16 = (uint64_t)&a5[23 * v12];
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>((uint64_t)&v7[23 * (a4 >> 1)], a2, a3, a4 - v12, v16);
        unint64_t v25 = a4;
        int v17 = &a5[23 * a4];
        uint64_t v18 = (uint64_t *)v16;
        uint64_t v19 = a5;
        while (v18 != v17)
        {
          uint64_t v20 = (uint64_t)(v7 + 1);
          if (*v18 >= (unint64_t)*v19)
          {
            uint64_t *v7 = *v19;
            v7 += 23;
            mlir::Diagnostic::operator=(v20, v19 + 1);
            v19 += 23;
            if (v19 == (uint64_t *)v16) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t *v7 = *v18;
            v7 += 23;
            mlir::Diagnostic::operator=(v20, v18 + 1);
            v18 += 23;
            if (v19 == (uint64_t *)v16)
            {
LABEL_21:
              if (v18 != v17)
              {
                uint64_t v21 = 0;
                do
                {
                  uint64_t v22 = (uint64_t)&v18[v21 + 23];
                  v7[v21] = v18[v21];
                  mlir::Diagnostic::operator=((uint64_t)&v7[v21 + 1], &v18[v21 + 1]);
                  v21 += 23;
                }
                while ((uint64_t *)v22 != v17);
              }
              goto LABEL_28;
            }
          }
        }
        if (v19 != (uint64_t *)v16)
        {
          uint64_t v23 = 0;
          do
          {
            uint64_t v24 = (uint64_t)&v19[v23 + 23];
            v7[v23] = v19[v23];
            mlir::Diagnostic::operator=((uint64_t)&v7[v23 + 1], &v19[v23 + 1]);
            v23 += 23;
          }
          while (v24 != v16);
        }
LABEL_28:
        if (a5) {
          std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&v25, a5);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(a1, v13, a3, v14, a5, a6);
        uint64_t v15 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v13, a2, a3, v15, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v7, (uint64_t *)v13, (uint64_t *)a2, a3, v12, v15, a5, a6);
      }
    }
  }
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return;
  }
  unsigned int v4 = a1 + 23;
  if (a1 + 23 == a2) {
    return;
  }
  unint64_t v5 = a1;
  while (2)
  {
    unint64_t v6 = v4;
    unint64_t v7 = *v4;
    if (v7 >= *v5) {
      goto LABEL_4;
    }
    unint64_t v39 = v5[24];
    int v40 = *((_DWORD *)v5 + 50);
    unint64_t v38 = v7;
    v41[0] = v42;
    v41[1] = (void *)0x400000000;
    if (*((_DWORD *)v5 + 54)) {
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)v41, (uint64_t)(v5 + 26));
    }
    *(_OWORD *)uint64_t v43 = *((_OWORD *)v5 + 20);
    unint64_t v44 = v5[42];
    unsigned char v5[40] = 0;
    v5[41] = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 43);
    unint64_t v46 = v5[45];
    v5[42] = 0;
    v5[43] = 0;
    v5[44] = 0;
    v5[45] = 0;
    unsigned int v8 = v6;
    unint64_t v9 = *v5;
    while (1)
    {
      int v10 = v5;
      unint64_t *v8 = v9;
      uint64_t v12 = (uint64_t)(v5 + 1);
      unint64_t v11 = v5[1];
      *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
      v8[1] = v11;
      uint64_t v13 = (const void *)v5[3];
      unint64_t v14 = v5 + 5;
      if (v13 == v14)
      {
        int v17 = (void **)(v8 + 3);
        unint64_t v18 = *((unsigned int *)v10 + 8);
        uint64_t v19 = *((unsigned int *)v8 + 8);
        if (v19 >= v18)
        {
          if (v18) {
            memmove(*v17, v13, 24 * v18);
          }
        }
        else
        {
          if (*((_DWORD *)v8 + 9) < v18)
          {
            *((_DWORD *)v8 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 3), v8 + 5, v18, 24);
            uint64_t v19 = 0;
            LODWORD(v20) = *((_DWORD *)v10 + 8);
            if (!v20) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
          if (v19)
          {
            memmove(*v17, v13, 24 * v19);
            uint64_t v20 = *((unsigned int *)v10 + 8);
            if (v19 == v20) {
              goto LABEL_23;
            }
            goto LABEL_22;
          }
          uint64_t v19 = 0;
          LODWORD(v20) = *((_DWORD *)v10 + 8);
          if (v20) {
LABEL_22:
          }
            memcpy((char *)*v17 + 24 * v19, (const void *)(v10[3] + 24 * v19), 24 * v20 - 24 * v19);
        }
LABEL_23:
        *((_DWORD *)v8 + 8) = v18;
        *((_DWORD *)v10 + 8) = 0;
        uint64_t v16 = (void *)v8[17];
        if (!v16) {
          goto LABEL_31;
        }
LABEL_24:
        uint64_t v21 = v8 + 18;
        uint64_t v22 = (void *)v8[18];
        uint64_t v23 = v16;
        if (v22 != v16)
        {
          do
          {
            unint64_t v25 = (void *)*--v22;
            uint64_t v24 = v25;
            *uint64_t v22 = 0;
            if (v25) {
              operator delete[](v24);
            }
          }
          while (v22 != v16);
          uint64_t v23 = (void *)v8[17];
        }
        *uint64_t v21 = v16;
        operator delete(v23);
        *uint64_t v21 = 0;
        v8[19] = 0;
        goto LABEL_31;
      }
      uint64_t v15 = (unint64_t *)v8[3];
      if (v15 != v8 + 5)
      {
        free(v15);
        uint64_t v13 = (const void *)v10[3];
      }
      v8[3] = (unint64_t)v13;
      void v8[4] = v10[4];
      v10[3] = (unint64_t)v14;
      void v10[4] = 0;
      uint64_t v16 = (void *)v8[17];
      if (v16) {
        goto LABEL_24;
      }
LABEL_31:
      *(_OWORD *)(v8 + 17) = *(_OWORD *)(v10 + 17);
      v8[19] = v10[19];
      v10[17] = 0;
      v10[18] = 0;
      v10[19] = 0;
      unsigned int v26 = (void **)v8[20];
      if (v26)
      {
        long long v28 = v8 + 21;
        uint64_t v27 = (void **)v8[21];
        int v29 = (void *)v8[20];
        if (v27 != v26)
        {
          do
            uint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
          while (v27 != v26);
          int v29 = (void *)v8[20];
        }
        *long long v28 = v26;
        operator delete(v29);
        *long long v28 = 0;
        v8[22] = 0;
      }
      *((_OWORD *)v8 + 10) = *((_OWORD *)v10 + 10);
      v8[22] = v10[22];
      v10[20] = 0;
      v10[21] = 0;
      v10[22] = 0;
      if (v10 == a1) {
        break;
      }
      unint64_t v5 = v10 - 23;
      unint64_t v9 = *(v10 - 23);
      unsigned int v8 = v10;
      if (v38 >= v9) {
        goto LABEL_42;
      }
    }
    int v10 = a1;
LABEL_42:
    *int v10 = v38;
    mlir::Diagnostic::operator=(v12, (uint64_t *)&v39);
    BOOL v30 = (void **)__p[0];
    if (__p[0])
    {
      unsigned int v31 = (void **)__p[1];
      uint64_t v32 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          unsigned int v31 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v31 - 1);
        while (v31 != v30);
        uint64_t v32 = __p[0];
      }
      __p[1] = v30;
      operator delete(v32);
    }
    __int16 v33 = v43[0];
    if (v43[0])
    {
      uint64_t v34 = v43[1];
      __int16 v35 = v43[0];
      if (v43[1] != v43[0])
      {
        do
        {
          __int16 v37 = (void *)*--v34;
          unint64_t v36 = v37;
          *uint64_t v34 = 0;
          if (v37) {
            operator delete[](v36);
          }
        }
        while (v34 != v33);
        __int16 v35 = v43[0];
      }
      v43[1] = v33;
      operator delete(v35);
    }
    if (v41[0] != v42) {
      free(v41[0]);
    }
LABEL_4:
    unsigned int v4 = v6 + 23;
    unint64_t v5 = v6;
    if (v6 + 23 != a2) {
      continue;
    }
    break;
  }
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, unint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v8 = result;
    if (a4 == 2)
    {
      unint64_t v11 = *(a2 - 23);
      uint64_t v12 = (void *)(a5 + 8);
      uint64_t v13 = a5 + 24;
      uint64_t v14 = a5 + 40;
      if (v11 < *(void *)v8)
      {
        *(void *)a5 = v11;
        uint64_t v15 = *(a2 - 22);
        *(_DWORD *)(a5 + 16) = *((_DWORD *)a2 - 42);
        *uint64_t v12 = v15;
        *(void *)(a5 + 24) = v14;
        *(void *)(a5 + 32) = 0x400000000;
        if (*((_DWORD *)a2 - 38)) {
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v13, (uint64_t)(a2 - 20));
        }
        *(void *)(a5 + 136) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(_OWORD *)(a5 + 136) = *((_OWORD *)a2 - 3);
        *(void *)(a5 + 152) = *(a2 - 4);
        *(a2 - 6) = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        *(void *)(a5 + 160) = 0;
        *(void *)(a5 + 168) = 0;
        *(void *)(a5 + 176) = 0;
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(a2 - 3);
        *(void *)(a5 + 176) = *(a2 - 1);
        *(a2 - 3) = 0;
        *(a2 - 2) = 0;
        *(a2 - 1) = 0;
        *(void *)(a5 + 184) = *(void *)v8;
        uint64_t v16 = *(void *)(v8 + 8);
        int v17 = *(_DWORD *)(v8 + 16);
        *(void *)(a5 + 208) = a5 + 224;
        uint64_t result = a5 + 208;
        *(_DWORD *)(a5 + 200) = v17;
        *(void *)(a5 + 192) = v16;
        *(void *)(a5 + 216) = 0x400000000;
        if (*(_DWORD *)(v8 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v8 + 24);
        }
        *(void *)(a5 + 320) = 0;
        *(void *)(a5 + 328) = 0;
        *(void *)(a5 + 336) = 0;
        *(_OWORD *)(a5 + 320) = *(_OWORD *)(v8 + 136);
        *(void *)(a5 + 336) = *(void *)(v8 + 152);
        *(void *)(v8 + 136) = 0;
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        *(void *)(a5 + 344) = 0;
        *(void *)(a5 + 352) = 0;
        *(void *)(a5 + 360) = 0;
        *(_OWORD *)(a5 + 344) = *(_OWORD *)(v8 + 160);
        *(void *)(a5 + 360) = *(void *)(v8 + 176);
        goto LABEL_13;
      }
      *(void *)a5 = *(void *)v8;
      uint64_t v19 = *(void *)(v8 + 8);
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(v8 + 16);
      *uint64_t v12 = v19;
      *(void *)(a5 + 24) = v14;
      *(void *)(a5 + 32) = 0x400000000;
      if (*(_DWORD *)(v8 + 32)) {
        llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v13, v8 + 24);
      }
      *(void *)(a5 + 136) = 0;
      *(void *)(a5 + 144) = 0;
      *(void *)(a5 + 152) = 0;
      *(_OWORD *)(a5 + 136) = *(_OWORD *)(v8 + 136);
      *(void *)(a5 + 152) = *(void *)(v8 + 152);
      *(void *)(v8 + 136) = 0;
      *(void *)(v8 + 144) = 0;
      *(void *)(v8 + 152) = 0;
      *(void *)(a5 + 160) = 0;
      *(void *)(a5 + 168) = 0;
      *(void *)(a5 + 176) = 0;
      *(_OWORD *)(a5 + 160) = *(_OWORD *)(v8 + 160);
      *(void *)(a5 + 176) = *(void *)(v8 + 176);
      *(void *)(v8 + 160) = 0;
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      *(void *)(a5 + 184) = *(a2 - 23);
      uint64_t v20 = *(a2 - 22);
      int v21 = *((_DWORD *)a2 - 42);
      *(void *)(a5 + 208) = a5 + 224;
      uint64_t result = a5 + 208;
      *(_DWORD *)(a5 + 200) = v21;
      *(void *)(a5 + 192) = v20;
      *(void *)(a5 + 216) = 0x400000000;
      if (*((_DWORD *)a2 - 38)) {
        uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(a2 - 20));
      }
      *(void *)(a5 + 320) = 0;
      *(void *)(a5 + 328) = 0;
      *(void *)(a5 + 336) = 0;
      *(_OWORD *)(a5 + 320) = *((_OWORD *)a2 - 3);
      *(void *)(a5 + 336) = *(a2 - 4);
      *(a2 - 6) = 0;
      *(a2 - 5) = 0;
      *(a2 - 4) = 0;
      *(void *)(a5 + 344) = 0;
      *(void *)(a5 + 352) = 0;
      *(void *)(a5 + 360) = 0;
      *(_OWORD *)(a5 + 344) = *(_OWORD *)(a2 - 3);
      *(void *)(a5 + 360) = *(a2 - 1);
      *(a2 - 3) = 0;
      *(a2 - 2) = 0;
      *(a2 - 1) = 0;
    }
    else
    {
      if (a4 == 1)
      {
        *(void *)a5 = *(void *)result;
        uint64_t v9 = *(void *)(result + 8);
        int v10 = *(_DWORD *)(result + 16);
        *(void *)(a5 + 24) = a5 + 40;
        uint64_t result = a5 + 24;
        *(_DWORD *)(a5 + 16) = v10;
        *(void *)(a5 + 8) = v9;
        *(void *)(a5 + 32) = 0x400000000;
        if (*(_DWORD *)(v8 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v8 + 24);
        }
        *(void *)(a5 + 136) = 0;
        *(void *)(a5 + 144) = 0;
        *(void *)(a5 + 152) = 0;
        *(_OWORD *)(a5 + 136) = *(_OWORD *)(v8 + 136);
        *(void *)(a5 + 152) = *(void *)(v8 + 152);
        *(void *)(v8 + 136) = 0;
        *(void *)(v8 + 144) = 0;
        *(void *)(v8 + 152) = 0;
        *(void *)(a5 + 160) = 0;
        *(void *)(a5 + 168) = 0;
        *(void *)(a5 + 176) = 0;
        *(_OWORD *)(a5 + 160) = *(_OWORD *)(v8 + 160);
        *(void *)(a5 + 176) = *(void *)(v8 + 176);
LABEL_13:
        *(void *)(v8 + 160) = 0;
        *(void *)(v8 + 168) = 0;
        *(void *)(v8 + 176) = 0;
        return result;
      }
      if ((uint64_t)a4 > 8)
      {
        unint64_t v22 = a4 >> 1;
        uint64_t v23 = 184 * (a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(result, result + v23, a3, a4 >> 1, a5, a4 >> 1);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v8 + v23, a2, a3, a4 - v22, a5 + v23, a4 - v22);
        return std::__merge_move_construct[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v8, v8 + v23, v8 + v23, (uint64_t)a2, (void *)a5);
      }
      else
      {
        return std::__insertion_sort_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(result, a2, a5);
      }
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a6) {
    return;
  }
  uint64_t v8 = a6;
  while (v8 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    unint64_t v12 = 0;
    uint64_t v13 = -a5;
    while (*a2 >= (unint64_t)a1[v12 / 8])
    {
      v12 += 184;
      if (__CFADD__(v13++, 1)) {
        return;
      }
    }
    uint64_t v15 = -v13;
    if (-v13 >= v8)
    {
      if (v13 == -1)
      {
        std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&a1[v12 / 8], a2);
        return;
      }
      if (v13 > 0) {
        uint64_t v15 = 1 - v13;
      }
      uint64_t v25 = v15 >> 1;
      uint64_t v19 = &a1[23 * (v15 >> 1) + v12 / 8];
      unint64_t v18 = a2;
      if (a2 != a3)
      {
        unint64_t v32 = 0xD37A6F4DE9BD37A7 * (a3 - a2);
        unint64_t v18 = a2;
        do
        {
          unint64_t v33 = v32 >> 1;
          uint64_t v34 = (unint64_t *)&v18[23 * (v32 >> 1)];
          unint64_t v36 = *v34;
          __int16 v35 = (uint64_t *)(v34 + 23);
          v32 += ~(v32 >> 1);
          if (v36 < *v19) {
            unint64_t v18 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      uint64_t v17 = 0xD37A6F4DE9BD37A7 * (v18 - a2);
      uint64_t v55 = &a1[v12 / 8];
      if (v19 != a2)
      {
LABEL_22:
        if (v18 == a2)
        {
          unsigned int v26 = v19;
        }
        else
        {
          uint64_t v49 = v17;
          uint64_t v50 = v25;
          uint64_t v51 = a3;
          uint64_t v52 = a8;
          uint64_t v53 = a4;
          uint64_t v54 = a7;
          std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v19, a2);
          unsigned int v26 = v19 + 23;
          for (uint64_t i = a2 + 23; i != v18; i += 23)
          {
            if (v26 == a2) {
              a2 = i;
            }
            std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v26, i);
            v26 += 23;
          }
          if (v26 != a2)
          {
            long long v28 = v26;
            int v29 = a2;
            while (1)
            {
              std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v28, v29);
              v29 += 23;
              BOOL v30 = v28 + 23 == a2;
              if (v29 == v18)
              {
                if (v28 + 23 == a2) {
                  break;
                }
                int v29 = a2 + 23;
                v28 += 46;
                while (1)
                {
                  std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(v28 - 23, a2);
                  BOOL v30 = v28 == a2;
                  if (v29 != v18) {
                    break;
                  }
                  BOOL v31 = v28 == a2;
                  v28 += 23;
                  if (v31) {
                    goto LABEL_39;
                  }
                }
              }
              else
              {
                v28 += 23;
              }
              if (v30) {
                a2 = v29;
              }
            }
          }
LABEL_39:
          a4 = v53;
          a7 = v54;
          a3 = v51;
          a8 = v52;
          uint64_t v17 = v49;
          uint64_t v25 = v50;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = v8 + 1;
      }
      uint64_t v17 = v16 >> 1;
      unint64_t v18 = &a2[23 * (v16 >> 1)];
      uint64_t v19 = a2;
      if ((char *)a2 - (char *)a1 != v12)
      {
        unint64_t v20 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)a2 - (char *)a1 - v12) >> 3);
        uint64_t v19 = &a1[v12 / 8];
        do
        {
          unint64_t v21 = v20 >> 1;
          unint64_t v22 = &v19[23 * (v20 >> 1)];
          unint64_t v24 = *v22;
          uint64_t v23 = v22 + 23;
          v20 += ~(v20 >> 1);
          if (*v18 < v24) {
            unint64_t v20 = v21;
          }
          else {
            uint64_t v19 = v23;
          }
        }
        while (v20);
      }
      uint64_t v25 = 0xD37A6F4DE9BD37A7 * ((uint64_t)((char *)v19 - (char *)a1 - v12) >> 3);
      uint64_t v55 = &a1[v12 / 8];
      if (v19 != a2) {
        goto LABEL_22;
      }
    }
    unsigned int v26 = v18;
LABEL_52:
    a5 = -v25 - v13;
    uint64_t v37 = v8 - v17;
    if (v25 + v17 >= v8 - (v25 + v17) - v13)
    {
      uint64_t v43 = a4;
      uint64_t v44 = v25;
      uint64_t v45 = v17;
      unint64_t v46 = a7;
      uint64_t v47 = a8;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v26, v18, a3);
      a8 = v47;
      a4 = v43;
      a7 = v46;
      a2 = v19;
      uint64_t v48 = v45;
      a5 = v44;
      a3 = v26;
      a1 = v55;
      uint64_t v8 = v48;
      if (!v48) {
        return;
      }
    }
    else
    {
      unint64_t v38 = &a1[v12 / 8];
      unint64_t v39 = a3;
      uint64_t v40 = a4;
      BOOL v41 = a7;
      uint64_t v42 = a8;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(v38, v19, v26);
      a3 = v39;
      a8 = v42;
      a4 = v40;
      a7 = v41;
      a1 = v26;
      a2 = v18;
      uint64_t v8 = v37;
      if (!v37) {
        return;
      }
    }
  }

  std::__buffered_inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(a1, a2, a3, a4, a5, v8, a7);
}

void std::swap[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  int v18 = *((_DWORD *)a1 + 4);
  v19[0] = v20;
  v19[1] = (void *)0x400000000;
  if (*((_DWORD *)a1 + 8)) {
    llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=((uint64_t)v19, (uint64_t)(a1 + 3));
  }
  *(_OWORD *)unint64_t v21 = *(_OWORD *)(a1 + 17);
  uint64_t v5 = a1[19];
  a1[17] = 0;
  a1[18] = 0;
  long long v6 = *((_OWORD *)a1 + 10);
  uint64_t v7 = a1[22];
  a1[19] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[22] = 0;
  *a1 = *a2;
  uint64_t v22 = v5;
  *(_OWORD *)std::string __p = v6;
  uint64_t v24 = v7;
  mlir::Diagnostic::operator=(v4, a2 + 1);
  *a2 = v16;
  mlir::Diagnostic::operator=((uint64_t)(a2 + 1), &v17);
  uint64_t v8 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v9 = (void **)__p[1];
    int v10 = __p[0];
    if (__p[1] != __p[0])
    {
      do
        uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
      while (v9 != v8);
      int v10 = __p[0];
    }
    __p[1] = v8;
    operator delete(v10);
  }
  unint64_t v11 = v21[0];
  if (v21[0])
  {
    unint64_t v12 = v21[1];
    uint64_t v13 = v21[0];
    if (v21[1] != v21[0])
    {
      do
      {
        uint64_t v15 = (void *)*--v12;
        uint64_t v14 = v15;
        *unint64_t v12 = 0;
        if (v15) {
          operator delete[](v14);
        }
      }
      while (v12 != v11);
      uint64_t v13 = v21[0];
    }
    v21[1] = v11;
    operator delete(v13);
  }
  if (v19[0] != v20) {
    free(v19[0]);
  }
}

uint64_t mlir::Diagnostic::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(a1 + 16, (uint64_t)(a2 + 2));
  uint64_t v5 = (void **)(a1 + 128);
  long long v6 = *(void **)(a1 + 128);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 136);
    uint64_t v8 = *(void **)(a1 + 128);
    if (v7 != v6)
    {
      do
      {
        int v10 = (void *)*--v7;
        uint64_t v9 = v10;
        void *v7 = 0;
        if (v10) {
          operator delete[](v9);
        }
      }
      while (v7 != v6);
      uint64_t v8 = *v5;
    }
    *(void *)(a1 + 136) = v6;
    operator delete(v8);
    unint64_t *v5 = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(void *)(a1 + 144) = a2[18];
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  unint64_t v11 = (void **)(a1 + 152);
  unint64_t v12 = *(void ***)(a1 + 152);
  if (v12)
  {
    uint64_t v13 = *(void ***)(a1 + 160);
    uint64_t v14 = *(void **)(a1 + 152);
    if (v13 != v12)
    {
      do
        uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
      while (v13 != v12);
      uint64_t v14 = *v11;
    }
    *(void *)(a1 + 160) = v12;
    operator delete(v14);
    *unint64_t v11 = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
  *(void *)(a1 + 168) = a2[21];
  a2[19] = 0;
  a2[20] = 0;
  a2[21] = 0;
  return a1;
}

uint64_t std::__insertion_sort_move[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, unint64_t *a2, uint64_t a3)
{
  if ((unint64_t *)result != a2)
  {
    uint64_t v5 = (void *)result;
    *(void *)a3 = *(void *)result;
    uint64_t v6 = *(void *)(result + 8);
    int v7 = *(_DWORD *)(result + 16);
    *(void *)(a3 + 24) = a3 + 40;
    uint64_t result = a3 + 24;
    *(_DWORD *)(a3 + 16) = v7;
    *(void *)(a3 + 8) = v6;
    *(void *)(a3 + 32) = 0x400000000;
    if (*((_DWORD *)v5 + 8)) {
      uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(v5 + 3));
    }
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 152) = 0;
    *(_OWORD *)(a3 + 136) = *(_OWORD *)(v5 + 17);
    *(void *)(a3 + 152) = v5[19];
    v5[17] = 0;
    v5[18] = 0;
    v5[19] = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 168) = 0;
    *(void *)(a3 + 176) = 0;
    *(_OWORD *)(a3 + 160) = *((_OWORD *)v5 + 10);
    *(void *)(a3 + 176) = v5[22];
    v5[20] = 0;
    v5[21] = 0;
    v5[22] = 0;
    uint64_t v8 = v5 + 23;
    if (v5 + 23 != a2)
    {
      uint64_t v9 = a3;
      while (1)
      {
        while (1)
        {
          unint64_t v11 = v8;
          unint64_t v12 = *v8;
          uint64_t v13 = (void *)(v9 + 192);
          uint64_t result = v9 + 208;
          uint64_t v14 = v9 + 224;
          if (v12 < *(void *)v9) {
            break;
          }
          *(void *)(v9 + 184) = v12;
          uint64_t v34 = v5[24];
          *(_DWORD *)(v9 + 200) = *((_DWORD *)v5 + 50);
          *uint64_t v13 = v34;
          *(void *)(v9 + 208) = v14;
          *(void *)(v9 + 216) = 0x400000000;
          if (*((_DWORD *)v5 + 54)) {
            uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, (uint64_t)(v5 + 26));
          }
          *(void *)(v9 + 320) = 0;
          *(void *)(v9 + 328) = 0;
          *(void *)(v9 + 336) = 0;
          *(_OWORD *)(v9 + 320) = *((_OWORD *)v5 + 20);
          *(void *)(v9 + 336) = v5[42];
          unsigned char v5[40] = 0;
          v5[41] = 0;
          v5[42] = 0;
          *(void *)(v9 + 344) = 0;
          *(void *)(v9 + 352) = 0;
          *(void *)(v9 + 360) = 0;
          uint64_t v35 = v5[44];
          *(void *)(v9 + 344) = v5[43];
          *(void *)(v9 + 352) = v35;
          *(void *)(v9 + 360) = v5[45];
          v5[43] = 0;
          v5[44] = 0;
          v5[45] = 0;
          v9 += 184;
          uint64_t v8 = v11 + 23;
          uint64_t v5 = v11;
          if (v11 + 23 == a2) {
            return result;
          }
        }
        *(void *)(v9 + 184) = *(void *)v9;
        *uint64_t v13 = *(void *)(v9 + 8);
        *(_DWORD *)(v9 + 200) = *(_DWORD *)(v9 + 16);
        *(void *)(v9 + 208) = v14;
        *(void *)(v9 + 216) = 0x400000000;
        if (*(_DWORD *)(v9 + 32)) {
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v9 + 24);
        }
        *(_OWORD *)(v9 + 320) = *(_OWORD *)(v9 + 136);
        *(void *)(v9 + 336) = *(void *)(v9 + 152);
        *(void *)(v9 + 136) = 0;
        *(void *)(v9 + 144) = 0;
        *(_OWORD *)(v9 + 344) = *(_OWORD *)(v9 + 160);
        *(void *)(v9 + 360) = *(void *)(v9 + 176);
        *(void *)(v9 + 152) = 0;
        *(void *)(v9 + 160) = 0;
        uint64_t v10 = a3;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 176) = 0;
        if (v9 != a3) {
          break;
        }
LABEL_7:
        *(void *)uint64_t v10 = *v11;
        uint64_t result = mlir::Diagnostic::operator=(v10 + 8, v5 + 24);
        v9 += 184;
        uint64_t v8 = v11 + 23;
        uint64_t v5 = v11;
        if (v11 + 23 == a2) {
          return result;
        }
      }
      uint64_t v10 = v9;
      uint64_t v15 = v9;
      while (1)
      {
        unint64_t v17 = *(void *)(v15 - 184);
        v15 -= 184;
        unint64_t v16 = v17;
        if (*v11 >= v17) {
          goto LABEL_7;
        }
        uint64_t v18 = *(void *)(v10 - 176);
        *(void *)uint64_t v10 = v16;
        *(void *)(v10 + 8) = v18;
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v10 - 168);
        uint64_t v19 = *(const void **)(v10 - 160);
        if (v19 != (const void *)(v10 - 144))
        {
          unint64_t v20 = *(void **)(v10 + 24);
          if (v20 != (void *)(v10 + 40))
          {
            free(v20);
            uint64_t v19 = *(const void **)(v10 - 160);
          }
          *(void *)(v10 + 24) = v19;
          *(void *)(v10 + 32) = *(void *)(v10 - 152);
          *(void *)(v10 - 160) = v10 - 144;
          *(void *)(v10 - 152) = 0;
          unint64_t v21 = *(void **)(v10 + 136);
          if (!v21) {
            goto LABEL_38;
          }
LABEL_31:
          unsigned int v26 = *(void **)(v10 + 144);
          uint64_t v27 = v21;
          if (v26 != v21)
          {
            do
            {
              int v29 = (void *)*--v26;
              long long v28 = v29;
              void *v26 = 0;
              if (v29) {
                operator delete[](v28);
              }
            }
            while (v26 != v21);
            uint64_t v27 = *(void **)(v10 + 136);
          }
          *(void *)(v10 + 144) = v21;
          operator delete(v27);
          goto LABEL_38;
        }
        uint64_t v22 = (void **)(v10 + 24);
        unint64_t v23 = *(unsigned int *)(v10 - 152);
        uint64_t v24 = *(unsigned int *)(v10 + 32);
        if (v24 >= v23)
        {
          if (v23) {
            memmove(*v22, v19, 24 * v23);
          }
        }
        else if (*(_DWORD *)(v10 + 36) >= v23)
        {
          if (v24)
          {
            memmove(*v22, v19, 24 * v24);
            uint64_t v25 = *(unsigned int *)(v10 - 152);
            if (v24 == v25) {
              goto LABEL_30;
            }
LABEL_29:
            memcpy((void *)(*(void *)(v10 + 24) + 24 * v24), (const void *)(*(void *)(v10 - 160) + 24 * v24), 24 * v25 - 24 * v24);
            goto LABEL_30;
          }
          uint64_t v24 = 0;
          LODWORD(v25) = *(_DWORD *)(v10 - 152);
          if (v25) {
            goto LABEL_29;
          }
        }
        else
        {
          *(_DWORD *)(v10 + 32) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v22, (void *)(v10 + 40), v23, 24);
          uint64_t v24 = 0;
          LODWORD(v25) = *(_DWORD *)(v10 - 152);
          if (v25) {
            goto LABEL_29;
          }
        }
LABEL_30:
        *(_DWORD *)(v10 + 32) = v23;
        *(_DWORD *)(v10 - 152) = 0;
        unint64_t v21 = *(void **)(v10 + 136);
        if (v21) {
          goto LABEL_31;
        }
LABEL_38:
        BOOL v30 = (void *)(v10 - 48);
        *(_OWORD *)(v10 + 136) = *(_OWORD *)(v10 - 48);
        *(void *)(v10 + 152) = *(void *)(v10 - 32);
        v30[1] = 0;
        void v30[2] = 0;
        void *v30 = 0;
        BOOL v31 = *(void ***)(v10 + 160);
        if (v31)
        {
          unint64_t v32 = *(void ***)(v10 + 168);
          unint64_t v33 = *(void **)(v10 + 160);
          if (v32 != v31)
          {
            do
              unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            unint64_t v33 = *(void **)(v10 + 160);
          }
          *(void *)(v10 + 168) = v31;
          operator delete(v33);
        }
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v10 - 24);
        *(void *)(v10 + 176) = *(void *)(v10 - 8);
        *(void *)(v10 - 16) = 0;
        *(void *)(v10 - 8) = 0;
        *(void *)(v10 - 24) = 0;
        uint64_t v10 = v15;
        if (v15 == a3)
        {
          uint64_t v10 = a3;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t std::__merge_move_construct[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  if (result == a2)
  {
LABEL_18:
    if (a3 != a4)
    {
      uint64_t v20 = 0;
      do
      {
        unint64_t v21 = &v5[v20];
        uint64_t v22 = a3 + v20 * 8;
        v5[v20] = *(void *)(a3 + v20 * 8);
        uint64_t v23 = *(void *)(a3 + v20 * 8 + 8);
        int v24 = *(_DWORD *)(a3 + v20 * 8 + 16);
        v5[v20 + 3] = &v5[v20 + 5];
        uint64_t result = (uint64_t)&v5[v20 + 3];
        *(_DWORD *)(result - 8) = v24;
        *(void *)(result - 16) = v23;
        *(void *)(result + 8) = 0x400000000;
        if (*(_DWORD *)(a3 + v20 * 8 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v22 + 24);
        }
        v21[17] = 0;
        v21[18] = 0;
        v21[19] = 0;
        *(_OWORD *)(v21 + 17) = *(_OWORD *)(v22 + 136);
        v21[19] = *(void *)(v22 + 152);
        *(void *)(v22 + 136) = 0;
        *(void *)(v22 + 144) = 0;
        *(void *)(v22 + 152) = 0;
        v21[20] = 0;
        v21[21] = 0;
        v21[22] = 0;
        *((_OWORD *)v21 + 10) = *(_OWORD *)(v22 + 160);
        v21[22] = *(void *)(v22 + 176);
        *(void *)(v22 + 160) = 0;
        *(void *)(v22 + 168) = 0;
        *(void *)(v22 + 176) = 0;
        v20 += 23;
      }
      while (v22 + 184 != a4);
    }
  }
  else
  {
    uint64_t v9 = result;
    uint64_t v10 = a5 + 22;
    while (a3 != a4)
    {
      unint64_t v11 = v10 - 21;
      uint64_t result = (uint64_t)(v10 - 19);
      unint64_t v12 = v10 - 17;
      if (*(void *)a3 >= *(void *)v9)
      {
        *(v10 - 22) = *(void *)v9;
        uint64_t v14 = *(void *)(v9 + 8);
        *((_DWORD *)v10 - 40) = *(_DWORD *)(v9 + 16);
        *unint64_t v11 = v14;
        *(v10 - 19) = v12;
        *(v10 - 18) = 0x400000000;
        if (*(_DWORD *)(v9 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v9 + 24);
        }
        *(v10 - 5) = 0;
        *(v10 - 4) = 0;
        *(v10 - 3) = 0;
        *(_OWORD *)(v10 - 5) = *(_OWORD *)(v9 + 136);
        *(v10 - 3) = *(void *)(v9 + 152);
        *(void *)(v9 + 136) = 0;
        *(void *)(v9 + 144) = 0;
        *(void *)(v9 + 152) = 0;
        *(v10 - 2) = 0;
        *(v10 - 1) = 0;
        *uint64_t v10 = 0;
        *((_OWORD *)v10 - 1) = *(_OWORD *)(v9 + 160);
        *uint64_t v10 = *(void *)(v9 + 176);
        v10 += 23;
        *(void *)(v9 + 160) = 0;
        *(void *)(v9 + 168) = 0;
        *(void *)(v9 + 176) = 0;
        v9 += 184;
        if (v9 == a2)
        {
LABEL_17:
          uint64_t v5 = v10 - 22;
          goto LABEL_18;
        }
      }
      else
      {
        *(v10 - 22) = *(void *)a3;
        uint64_t v13 = *(void *)(a3 + 8);
        *((_DWORD *)v10 - 40) = *(_DWORD *)(a3 + 16);
        *unint64_t v11 = v13;
        *(v10 - 19) = v12;
        *(v10 - 18) = 0x400000000;
        if (*(_DWORD *)(a3 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, a3 + 24);
        }
        *(v10 - 5) = 0;
        *(v10 - 4) = 0;
        *(v10 - 3) = 0;
        *(_OWORD *)(v10 - 5) = *(_OWORD *)(a3 + 136);
        *(v10 - 3) = *(void *)(a3 + 152);
        *(void *)(a3 + 136) = 0;
        *(void *)(a3 + 144) = 0;
        *(void *)(a3 + 152) = 0;
        *(v10 - 2) = 0;
        *(v10 - 1) = 0;
        *uint64_t v10 = 0;
        *((_OWORD *)v10 - 1) = *(_OWORD *)(a3 + 160);
        *uint64_t v10 = *(void *)(a3 + 176);
        v10 += 23;
        *(void *)(a3 + 160) = 0;
        *(void *)(a3 + 168) = 0;
        *(void *)(a3 + 176) = 0;
        a3 += 184;
        if (v9 == a2) {
          goto LABEL_17;
        }
      }
    }
    if (v9 != a2)
    {
      uint64_t v15 = 0;
      do
      {
        unint64_t v16 = &v10[v15];
        uint64_t v17 = v9 + v15 * 8;
        v10[v15 - 22] = *(void *)(v9 + v15 * 8);
        uint64_t v18 = *(void *)(v9 + v15 * 8 + 8);
        int v19 = *(_DWORD *)(v9 + v15 * 8 + 16);
        v10[v15 - 19] = &v10[v15 - 17];
        uint64_t result = (uint64_t)&v10[v15 - 19];
        *(_DWORD *)(result - 8) = v19;
        *(void *)(result - 16) = v18;
        *(void *)(result + 8) = 0x400000000;
        if (*(_DWORD *)(v9 + v15 * 8 + 32)) {
          uint64_t result = llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(result, v17 + 24);
        }
        *(v16 - 5) = 0;
        *(v16 - 4) = 0;
        *(v16 - 3) = 0;
        *(_OWORD *)(v16 - 5) = *(_OWORD *)(v17 + 136);
        *(v16 - 3) = *(void *)(v17 + 152);
        *(void *)(v17 + 136) = 0;
        *(void *)(v17 + 144) = 0;
        *(void *)(v17 + 152) = 0;
        *(v16 - 2) = 0;
        *(v16 - 1) = 0;
        *unint64_t v16 = 0;
        *((_OWORD *)v16 - 1) = *(_OWORD *)(v17 + 160);
        *unint64_t v16 = *(void *)(v17 + 176);
        *(void *)(v17 + 160) = 0;
        *(void *)(v17 + 168) = 0;
        *(void *)(v17 + 176) = 0;
        v15 += 23;
      }
      while (v17 + 184 != a2);
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(unint64_t *a1, void *a2)
{
  if (*a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = (void **)a2[20];
      if (v5)
      {
        uint64_t v6 = (void **)a2[21];
        int v7 = (void *)a2[20];
        if (v6 != v5)
        {
          do
            uint64_t v6 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v6 - 1);
          while (v6 != v5);
          int v7 = (void *)a2[20];
        }
        a2[21] = v5;
        operator delete(v7);
      }
      uint64_t v8 = (void *)a2[17];
      if (v8)
      {
        uint64_t v9 = (void *)a2[18];
        uint64_t v10 = (void *)a2[17];
        if (v9 != v8)
        {
          do
          {
            unint64_t v12 = (void *)*--v9;
            unint64_t v11 = v12;
            *uint64_t v9 = 0;
            if (v12) {
              operator delete[](v11);
            }
          }
          while (v9 != v8);
          uint64_t v10 = (void *)a2[17];
        }
        a2[18] = v8;
        operator delete(v10);
      }
      uint64_t v13 = (void *)a2[3];
      if (v13 != a2 + 5) {
        free(v13);
      }
      ++v4;
      a2 += 23;
    }
    while (v4 < *a1);
  }
}

void std::__buffered_inplace_merge[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic *>>(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = a2;
  uint64_t v10 = a1;
  if (a5 > a6)
  {
    if (a2 != a3)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = &a7[v11];
        uint64_t v14 = &v9[v11];
        a7[v11] = v9[v11];
        uint64_t v15 = v9[v11 + 1];
        int v16 = v9[v11 + 2];
        a7[v11 + 3] = &a7[v11 + 5];
        uint64_t v17 = (uint64_t)&a7[v11 + 3];
        *(_DWORD *)(v17 - 8) = v16;
        *(void *)(v17 - 16) = v15;
        *(void *)(v17 + 8) = 0x400000000;
        if (LODWORD(v9[v11 + 4])) {
          llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v17, (uint64_t)(v14 + 3));
        }
        v13[17] = 0;
        v13[18] = 0;
        v13[19] = 0;
        *(_OWORD *)(v13 + 17) = *(_OWORD *)(v14 + 17);
        v13[19] = v14[19];
        v14[17] = 0;
        v14[18] = 0;
        v14[19] = 0;
        v13[20] = 0;
        v13[21] = 0;
        v13[22] = 0;
        *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
        v13[22] = v14[22];
        v14[20] = 0;
        v14[21] = 0;
        v14[22] = 0;
        ++v12;
        v11 += 23;
      }
      while (v14 + 23 != a3);
      unint64_t v39 = v12;
      if (v11 * 8)
      {
        uint64_t v25 = &a7[v11];
        unsigned int v26 = a3 - 23;
        while (v9 != v10)
        {
          unint64_t v27 = *(v25 - 23);
          unint64_t v28 = *(v9 - 23);
          uint64_t v29 = (uint64_t)(v26 + 1);
          BOOL v30 = v27 >= v28;
          if (v27 <= v28) {
            unint64_t v27 = *(v9 - 23);
          }
          if (v30) {
            BOOL v31 = v25;
          }
          else {
            BOOL v31 = v9;
          }
          if (v30) {
            v25 -= 23;
          }
          else {
            v9 -= 23;
          }
          unint64_t *v26 = v27;
          v26 -= 23;
          mlir::Diagnostic::operator=(v29, v31 - 22);
          if (v25 == a7) {
            goto LABEL_38;
          }
        }
        uint64_t v36 = 0;
        do
        {
          v26[v36] = v25[v36 - 23];
          mlir::Diagnostic::operator=((uint64_t)&v26[v36 + 1], &v25[v36 - 22]);
          v36 -= 23;
        }
        while (&v25[v36] != a7);
      }
      goto LABEL_38;
    }
LABEL_12:
    unint64_t v39 = 0;
    goto LABEL_38;
  }
  if (a1 == a2) {
    goto LABEL_12;
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  do
  {
    uint64_t v20 = &a7[v18];
    unint64_t v21 = &v10[v18];
    a7[v18] = v10[v18];
    uint64_t v22 = v10[v18 + 1];
    int v23 = v10[v18 + 2];
    a7[v18 + 3] = &a7[v18 + 5];
    uint64_t v24 = (uint64_t)&a7[v18 + 3];
    *(_DWORD *)(v24 - 8) = v23;
    *(void *)(v24 - 16) = v22;
    *(void *)(v24 + 8) = 0x400000000;
    if (LODWORD(v10[v18 + 4])) {
      llvm::SmallVectorImpl<mlir::DiagnosticArgument>::operator=(v24, (uint64_t)(v21 + 3));
    }
    v20[17] = 0;
    v20[18] = 0;
    v20[19] = 0;
    *(_OWORD *)(v20 + 17) = *(_OWORD *)(v21 + 17);
    v20[19] = v21[19];
    v21[17] = 0;
    v21[18] = 0;
    v21[19] = 0;
    v20[20] = 0;
    v20[21] = 0;
    v20[22] = 0;
    *((_OWORD *)v20 + 10) = *((_OWORD *)v21 + 10);
    v20[22] = v21[22];
    v21[20] = 0;
    v21[21] = 0;
    v21[22] = 0;
    ++v19;
    v18 += 23;
  }
  while (v21 + 23 != v9);
  unint64_t v39 = v19;
  if (v18 * 8)
  {
    unint64_t v32 = &a7[v18];
    uint64_t v33 = (uint64_t)&a7[v18 - 23];
    uint64_t v34 = a7;
    while (v9 != a3)
    {
      uint64_t v35 = (uint64_t)(v10 + 1);
      if (*v9 >= *v34)
      {
        *uint64_t v10 = *v34;
        v10 += 23;
        mlir::Diagnostic::operator=(v35, v34 + 1);
        v34 += 23;
        if (v32 == v34) {
          goto LABEL_38;
        }
      }
      else
      {
        *uint64_t v10 = *v9;
        v10 += 23;
        mlir::Diagnostic::operator=(v35, v9 + 1);
        v9 += 23;
        if (v32 == v34) {
          goto LABEL_38;
        }
      }
    }
    uint64_t v37 = 0;
    do
    {
      unint64_t v38 = &v34[v37];
      v10[v37] = v34[v37];
      mlir::Diagnostic::operator=((uint64_t)&v10[v37 + 1], &v34[v37 + 1]);
      v37 += 23;
    }
    while ((void *)v33 != v38);
  }
LABEL_38:
  if (a7) {
    std::__destruct_n::__process[abi:nn180100]<mlir::detail::ParallelDiagnosticHandlerImpl::ThreadDiagnostic>(&v39, a7);
  }
}

void llvm::function_ref<void ()(mlir::Diagnostic &)>::callback_fn<mlir::detail::ParallelDiagnosticHandlerImpl::~ParallelDiagnosticHandlerImpl()::{lambda(mlir::Diagnostic &)#1}>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)mlir::MLIRContext::getDiagEngine(*(mlir::MLIRContext **)(*(void *)a1 + 144));

  mlir::detail::DiagnosticEngineImpl::emit(v3, a2);
}

void mlir::detail::ParallelDiagnosticHandlerImpl::print(llvm::raw_ostream &)const::{lambda(mlir::Diagnostic const&)#1}::operator()(llvm::raw_ostream **a1, uint64_t *a2)
{
  llvm::raw_ostream::indent(*a1, 4u);
  if (*(_UNKNOWN **)(*(void *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id)
  {
LABEL_4:
    unsigned int v6 = *((_DWORD *)a2 + 2);
    if (v6 > 3) {
      goto LABEL_21;
    }
    goto LABEL_7;
  }
  unint64_t v4 = *a1;
  uint64_t v18 = *a2;
  mlir::Attribute::print((mlir::Attribute *)&v18, v4, 0);
  uint64_t v5 = (_WORD *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v5 <= 1uLL)
  {
    llvm::raw_ostream::write(v4, ": ", 2uLL);
    goto LABEL_4;
  }
  _WORD *v5 = 8250;
  *((void *)v4 + 4) += 2;
  unsigned int v6 = *((_DWORD *)a2 + 2);
LABEL_7:
  switch(v6)
  {
    case 0u:
      int v7 = *a1;
      uint64_t v8 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v8) > 5)
      {
        *(_WORD *)(v8 + 4) = 8250;
        *(_DWORD *)uint64_t v8 = 1702129518;
        uint64_t v12 = *((void *)v7 + 4) + 6;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "note: ", 6uLL);
      break;
    case 1u:
      int v7 = *a1;
      uint64_t v11 = *((void *)*a1 + 4);
      if ((unint64_t)(*((void *)*a1 + 3) - v11) > 8)
      {
        *(unsigned char *)(v11 + 8) = 32;
        *(void *)uint64_t v11 = *(void *)"warning: ";
        uint64_t v12 = *((void *)v7 + 4) + 9;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "warning: ", 9uLL);
      break;
    case 2u:
      int v7 = *a1;
      uint64_t v9 = (_DWORD *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v9 > 6uLL)
      {
        *(_DWORD *)((char *)v9 + 3) = 540701295;
        *uint64_t v9 = 1869771365;
        uint64_t v12 = *((void *)v7 + 4) + 7;
        goto LABEL_20;
      }
      llvm::raw_ostream::write(v7, "error: ", 7uLL);
      break;
    case 3u:
      int v7 = *a1;
      uint64_t v10 = (void *)*((void *)*a1 + 4);
      if (*((void *)*a1 + 3) - (void)v10 > 7uLL)
      {
        *uint64_t v10 = 0x203A6B72616D6572;
        uint64_t v12 = *((void *)v7 + 4) + 8;
LABEL_20:
        *((void *)v7 + 4) = v12;
      }
      else
      {
        llvm::raw_ostream::write(v7, "remark: ", 8uLL);
      }
      break;
    default:
      break;
  }
LABEL_21:
  uint64_t v13 = *a1;
  uint64_t v14 = *((unsigned int *)a2 + 6);
  if (v14)
  {
    uint64_t v15 = (mlir::DiagnosticArgument *)a2[2];
    uint64_t v16 = 24 * v14;
    do
    {
      mlir::DiagnosticArgument::print(v15, v13);
      uint64_t v15 = (mlir::DiagnosticArgument *)((char *)v15 + 24);
      v16 -= 24;
    }
    while (v16);
  }
  uint64_t v17 = (unsigned char *)*((void *)v13 + 4);
  if ((unint64_t)v17 >= *((void *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 10);
  }
  else
  {
    *((void *)v13 + 4) = v17 + 1;
    unsigned char *v17 = 10;
  }
}

void *std::vector<std::unique_ptr<mlir::Diagnostic>>::__push_back_slow_path<std::unique_ptr<mlir::Diagnostic>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    abort();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    if (!v15) {
      return v13;
    }
    goto LABEL_22;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
    goto LABEL_30;
  }
  uint64_t v17 = (v16 >> 3) + 1;
  uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v19 = &v15[-v18];
  v10 -= v18;
  uint64_t v20 = &v9[8 * v3 - 16];
  unint64_t v21 = v15 - 16;
  uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v24 = *((_OWORD *)v21 - 1);
    long long v23 = *(_OWORD *)v21;
    *((_OWORD *)v21 - 1) = 0uLL;
    *(_OWORD *)unint64_t v21 = 0uLL;
    *((_OWORD *)v20 - 1) = v24;
    *(_OWORD *)uint64_t v20 = v23;
    v20 -= 32;
    v21 -= 32;
    v22 -= 4;
  }
  while (v22);
  uint64_t v15 = v19;
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_30:
    do
    {
      uint64_t v25 = *((void *)v15 - 1);
      v15 -= 8;
      *(void *)uint64_t v15 = 0;
      *((void *)v10 - 1) = v25;
      v10 -= 8;
    }
    while (v15 != v14);
  }
  uint64_t v15 = (char *)*a1;
  unsigned int v26 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  for (a1[2] = v11;
        v26 != v15;
  if (v15) {
LABEL_22:
  }
    operator delete(v15);
  return v13;
}

void std::default_delete<mlir::detail::DiagnosticEngineImpl>::operator()[abi:nn180100](int a1, std::recursive_mutex *this)
{
  if (this)
  {
    uint64_t v3 = *(std::recursive_mutex **)&this[1].__m_.__opaque[40];
    uint64_t v4 = *(unsigned int *)&this[1].__m_.__opaque[48];
    if (v4)
    {
      uint64_t v5 = 40 * v4;
      do
      {
        unint64_t v6 = *(void *)((char *)v3 + v5 - 8);
        if (v6 >= 8)
        {
          uint64_t v7 = (llvm **)((char *)v3 + v5 - 32);
          if ((v6 & 4) != 0)
          {
            unint64_t v8 = (llvm *)((char *)v3 + v5 - 32);
            if ((v6 & 2) == 0) {
              unint64_t v8 = *v7;
            }
            (*(void (**)(llvm *))((v6 & 0xFFFFFFFFFFFFFFF8) + 16))(v8);
          }
          if ((v6 & 2) == 0) {
            llvm::deallocate_buffer(*v7, *(void **)((char *)v3 + v5 - 24));
          }
        }
        v5 -= 40;
      }
      while (v5);
      uint64_t v3 = *(std::recursive_mutex **)&this[1].__m_.__opaque[40];
    }
    if (v3 != &this[2]) {
      free(v3);
    }
    if ((this[1].__m_.__opaque[0] & 1) == 0) {
      llvm::deallocate_buffer(*(llvm **)&this[1].__m_.__opaque[8], (void *)(16 * *(unsigned int *)&this[1].__m_.__opaque[16]));
    }
    std::recursive_mutex::~recursive_mutex(this);
    operator delete(v9);
  }
}

uint64_t llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::try_emplace<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (void *)*a2;
  unint64_t v28 = (void *)*a2;
  int v29 = 0;
  uint64_t v7 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v8 = 2;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      uint64_t v14 = 0;
      goto LABEL_8;
    }
    uint64_t v7 = *(void *)(a1 + 8);
  }
  int v9 = v8 - 1;
  uint64_t v10 = (v8 - 1) & (37 * v6);
  uint64_t v11 = (uint64_t *)(v7 + 16 * v10);
  uint64_t v12 = (void *)*v11;
  if (v6 == (void *)*v11) {
    return *(void *)(a1 + 40) + 40 * *(unsigned int *)(v7 + 16 * v10 + 8);
  }
  long long v23 = 0;
  int v24 = 1;
  while (v12 != (void *)-1)
  {
    if (v23) {
      BOOL v25 = 0;
    }
    else {
      BOOL v25 = v12 == (void *)-2;
    }
    if (v25) {
      long long v23 = v11;
    }
    int v26 = v10 + v24++;
    uint64_t v10 = v26 & v9;
    uint64_t v11 = (uint64_t *)(v7 + 16 * v10);
    uint64_t v12 = (void *)*v11;
    if (v6 == (void *)*v11) {
      return *(void *)(a1 + 40) + 40 * *(unsigned int *)(v7 + 16 * v10 + 8);
    }
  }
  if (v23) {
    uint64_t v14 = v23;
  }
  else {
    uint64_t v14 = v11;
  }
LABEL_8:
  inserted = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,unsigned long long,unsigned int,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::InsertIntoBucket<unsigned long long,unsigned int>(a1, v14, (uint64_t *)&v28, &v29);
  unint64_t v16 = (void *)(a1 + 40);
  unsigned int v17 = *(_DWORD *)(a1 + 48);
  *((_DWORD *)inserted + 2) = v17;
  unint64_t v27 = (long long *)a3;
  unint64_t v28 = a2;
  if (v17 >= *(_DWORD *)(a1 + 52))
  {
    llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>&&>>(a1 + 40, (uint64_t)&std::piecewise_construct, &v28, &v27);
    unsigned int v22 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    uint64_t v18 = (void *)(*v16 + 40 * v17);
    *uint64_t v18 = *a2;
    v18[4] = 0;
    uint64_t v19 = *(void *)(a3 + 24);
    v18[4] = v19;
    if (*(void *)(a3 + 24) >= 8uLL)
    {
      uint64_t v20 = (long long *)(v18 + 1);
      if ((v19 & 2) != 0 && (v19 & 4) != 0)
      {
        (*(void (**)(long long *, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 8))(v20, a3);
      }
      else
      {
        long long v21 = *(_OWORD *)a3;
        _OWORD v18[3] = *(void *)(a3 + 16);
        *uint64_t v20 = v21;
      }
      *(void *)(a3 + 24) = 0;
    }
    unsigned int v22 = *(_DWORD *)(a1 + 48) + 1;
    *(_DWORD *)(a1 + 48) = v22;
  }
  return *v16 + 40 * v22 - 40;
}

uint64_t *llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,unsigned long long,unsigned int,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::InsertIntoBucket<unsigned long long,unsigned int>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  unsigned int v8 = *(_DWORD *)a1;
  int v9 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
  }
  else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
  {
    int v11 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::grow((unsigned int *)a1, v10);
  uint64_t v13 = a1 + 8;
  unsigned int v8 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v14 = 2;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 16);
    if (!v14)
    {
      int v11 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(a1 + 8);
  }
  int v11 = *(_DWORD *)a1 & 1;
  int v15 = v14 - 1;
  unsigned int v16 = (37 * *a3) & (v14 - 1);
  a2 = (uint64_t *)(v13 + 16 * v16);
  uint64_t v17 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    while (v17 != -1)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        uint64_t v18 = a2;
      }
      unsigned int v21 = v16 + v19++;
      unsigned int v16 = v21 & v15;
      a2 = (uint64_t *)(v13 + 16 * (v21 & v15));
      uint64_t v17 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v18) {
      a2 = v18;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v8 & 0xFFFFFFFE | v11) + 2;
  if (*a2 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *a2 = *a3;
  *((_DWORD *)a2 + 2) = *a4;
  return a2;
}

unint64_t llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>::grow(unsigned int *a1, unsigned int a2)
{
  v56[2] = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  unsigned int v6 = *a1;
  if ((*a1 & 1) == 0)
  {
    uint64_t v7 = (llvm *)*((void *)a1 + 1);
    uint64_t v8 = a1[4];
    if (a2 > 2)
    {
      uint64_t v20 = a2;
      buffer = llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
      *((void *)a1 + 1) = buffer;
      *((void *)a1 + 2) = v20;
      unsigned int v22 = *a1;
      int v9 = (llvm *)((char *)v7 + 16 * v8);
      *(void *)a1 = *a1 & 1;
      if ((v22 & 1) == 0)
      {
        long long v23 = &buffer[2 * v20];
        unint64_t v24 = 16 * v20 - 16;
        if (v24 < 0x10)
        {
          int v26 = buffer;
          goto LABEL_26;
        }
LABEL_20:
        uint64_t v25 = (v24 >> 4) + 1;
        int v26 = &buffer[2 * (v25 & 0x1FFFFFFFFFFFFFFELL)];
        unint64_t v27 = buffer + 2;
        uint64_t v28 = v25 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v27 - 2) = -1;
          *unint64_t v27 = -1;
          v27 += 4;
          v28 -= 2;
        }
        while (v28);
        if (v25 == (v25 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_27:
          if (v8)
          {
            int v29 = v7;
            do
            {
              uint64_t v36 = *(void *)v29;
              if (*(void *)v29 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                if (*(unsigned char *)a1)
                {
                  int v31 = 2;
                  BOOL v30 = (int *)(a1 + 2);
                }
                else
                {
                  BOOL v30 = (int *)*((void *)a1 + 1);
                  int v31 = a1[4];
                }
                int v32 = v31 - 1;
                unsigned int v33 = (v31 - 1) & (37 * v36);
                uint64_t v34 = (uint64_t *)&v30[4 * v33];
                uint64_t v35 = *v34;
                if (v36 != *v34)
                {
                  uint64_t v37 = 0;
                  int v38 = 1;
                  while (v35 != -1)
                  {
                    if (v37) {
                      BOOL v39 = 0;
                    }
                    else {
                      BOOL v39 = v35 == -2;
                    }
                    if (v39) {
                      uint64_t v37 = v34;
                    }
                    unsigned int v40 = v33 + v38++;
                    unsigned int v33 = v40 & v32;
                    uint64_t v34 = (uint64_t *)&v30[4 * (v40 & v32)];
                    uint64_t v35 = *v34;
                    if (v36 == *v34) {
                      goto LABEL_31;
                    }
                  }
                  if (v37) {
                    uint64_t v34 = v37;
                  }
                }
LABEL_31:
                *uint64_t v34 = v36;
                *((_DWORD *)v34 + 2) = *((_DWORD *)v29 + 2);
                *a1 += 2;
              }
              int v29 = (llvm *)((char *)v29 + 16);
            }
            while (v29 != v9);
          }
          llvm::deallocate_buffer(v7, (void *)(16 * v8));
        }
        do
        {
LABEL_26:
          void *v26 = -1;
          v26 += 2;
        }
        while (v26 != v23);
        goto LABEL_27;
      }
    }
    else
    {
      int v9 = (llvm *)((char *)v7 + 16 * v8);
      *(void *)a1 = 1;
    }
    long long v23 = a1 + 10;
    buffer = a1 + 2;
    unint64_t v24 = 16;
    goto LABEL_20;
  }
  unint64_t result = *((void *)a1 + 1);
  int v11 = (unint64_t *)&v54;
  if (result <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v54 = *((void *)a1 + 1);
    unsigned int v55 = a1[4];
    int v11 = v56;
    unint64_t v12 = *((void *)a1 + 3);
    if (v12 > 0xFFFFFFFFFFFFFFFDLL)
    {
LABEL_10:
      if (a2 < 3) {
        goto LABEL_11;
      }
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v12 = *((void *)a1 + 3);
    if (v12 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_10;
    }
  }
  *int v11 = v12;
  *((_DWORD *)v11 + 2) = a1[8];
  v11 += 2;
  if (a2 < 3)
  {
LABEL_11:
    *(void *)a1 = v6 & 1;
    if ((v6 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_54:
    int v14 = a1 + 10;
    unint64_t result = (unint64_t)(a1 + 2);
    unint64_t v15 = 16;
    goto LABEL_14;
  }
LABEL_53:
  *a1 = v6 & 0xFFFFFFFE;
  uint64_t v41 = a2;
  unint64_t result = (unint64_t)llvm::allocate_buffer(16 * a2, (std::align_val_t)8uLL);
  *((void *)a1 + 1) = result;
  *((void *)a1 + 2) = v41;
  unsigned int v42 = *a1;
  *(void *)a1 = *a1 & 1;
  if (v42) {
    goto LABEL_54;
  }
LABEL_12:
  uint64_t v13 = a1[4];
  if (!v13) {
    goto LABEL_57;
  }
  int v14 = (void *)(result + 16 * v13);
  unint64_t v15 = (unint64_t)v14 - result - 16;
  if (v15 < 0x10)
  {
    uint64_t v17 = (void *)result;
    do
    {
LABEL_56:
      void *v17 = -1;
      v17 += 2;
    }
    while (v17 != v14);
    goto LABEL_57;
  }
LABEL_14:
  uint64_t v16 = (v15 >> 4) + 1;
  uint64_t v17 = (void *)(result + 16 * (v16 & 0x1FFFFFFFFFFFFFFELL));
  uint64_t v18 = (void *)(result + 16);
  uint64_t v19 = v16 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v18 - 2) = -1;
    *uint64_t v18 = -1;
    v18 += 4;
    v19 -= 2;
  }
  while (v19);
  if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_56;
  }
LABEL_57:
  if (&v54 != (uint64_t *)v11)
  {
    uint64_t v43 = (unint64_t *)&v54;
    do
    {
      unint64_t v50 = *v43;
      if (*v43 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (*(unsigned char *)a1)
        {
          int v45 = 2;
          uint64_t v44 = (int *)(a1 + 2);
        }
        else
        {
          uint64_t v44 = (int *)*((void *)a1 + 1);
          int v45 = a1[4];
        }
        int v46 = v45 - 1;
        unsigned int v47 = (v45 - 1) & (37 * v50);
        uint64_t v48 = (unint64_t *)&v44[4 * v47];
        unint64_t v49 = *v48;
        if (v50 != *v48)
        {
          uint64_t v51 = 0;
          unint64_t result = 1;
          while (v49 != -1)
          {
            if (v51) {
              BOOL v52 = 0;
            }
            else {
              BOOL v52 = v49 == -2;
            }
            if (v52) {
              uint64_t v51 = v48;
            }
            int v53 = v47 + result;
            unint64_t result = (result + 1);
            unsigned int v47 = v53 & v46;
            uint64_t v48 = (unint64_t *)&v44[4 * (v53 & v46)];
            unint64_t v49 = *v48;
            if (v50 == *v48) {
              goto LABEL_61;
            }
          }
          if (v51) {
            uint64_t v48 = v51;
          }
        }
LABEL_61:
        *uint64_t v48 = v50;
        *((_DWORD *)v48 + 2) = *((_DWORD *)v43 + 2);
        *a1 += 2;
      }
      v43 += 2;
    }
    while (v43 != v11);
  }
  return result;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::growAndEmplaceBack<std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>&&>>(uint64_t a1, uint64_t a2, void **a3, long long **a4)
{
  unint64_t v17 = 0;
  uint64_t v7 = a1 + 16;
  uint64_t v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), 0, 40, &v17);
  int v9 = &v8[40 * *(unsigned int *)(a1 + 8)];
  unsigned int v10 = *a4;
  *(void *)int v9 = **a3;
  *((void *)v9 + 4) = 0;
  uint64_t v11 = *((void *)v10 + 3);
  *((void *)v9 + 4) = v11;
  if (*((void *)v10 + 3) >= 8uLL)
  {
    unint64_t v12 = v9 + 8;
    if ((v11 & 2) != 0 && (v11 & 4) != 0)
    {
      (*(void (**)(_OWORD *, long long *))((v11 & 0xFFFFFFFFFFFFFFF8) + 8))(v12, v10);
    }
    else
    {
      long long v13 = *v10;
      *((void *)v9 + 3) = *((void *)v10 + 2);
      *unint64_t v12 = v13;
    }
    *((void *)v10 + 3) = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::moveElementsForGrow(a1, (uint64_t)v8);
  int v14 = v17;
  if (*(void *)a1 != v7) {
    free(*(void **)a1);
  }
  *(void *)a1 = v8;
  unsigned int v15 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 12) = v14;
  return (uint64_t)&v8[40 * v15 - 40];
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,false>::moveElementsForGrow(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 8);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2 + 8;
    uint64_t v5 = 40 * v2;
    unsigned int v6 = (uint64_t *)(*(void *)result + 32);
    do
    {
      *(void *)(v4 - 8) = *(v6 - 4);
      *(void *)(v4 + 24) = 0;
      uint64_t v8 = *v6;
      *(void *)(v4 + 24) = *v6;
      if ((unint64_t)*v6 >= 8)
      {
        int v9 = (long long *)(v6 - 3);
        if ((v8 & 2) != 0 && (v8 & 4) != 0)
        {
          unint64_t result = (*(uint64_t (**)(uint64_t, long long *))((v8 & 0xFFFFFFFFFFFFFFF8) + 8))(v4, v9);
        }
        else
        {
          long long v7 = *v9;
          *(void *)(v4 + 16) = *(v6 - 1);
          *(_OWORD *)uint64_t v4 = v7;
        }
        *unsigned int v6 = 0;
      }
      v4 += 40;
      v6 += 5;
      v5 -= 40;
    }
    while (v5);
    uint64_t v10 = *(unsigned int *)(v3 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)v3;
      uint64_t v12 = 40 * v10;
      do
      {
        unint64_t v13 = *(void *)(v11 + v12 - 8);
        if (v13 >= 8)
        {
          int v14 = (llvm **)(v11 + v12 - 32);
          if ((v13 & 4) != 0)
          {
            unsigned int v15 = (llvm *)(v11 + v12 - 32);
            if ((v13 & 2) == 0) {
              unsigned int v15 = *v14;
            }
            unint64_t result = (*(uint64_t (**)(llvm *))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))(v15);
          }
          if ((v13 & 2) == 0) {
            llvm::deallocate_buffer(*v14, *(void **)(v11 + v12 - 24));
          }
        }
        v12 -= 40;
      }
      while (v12);
    }
  }
  return result;
}

void *llvm::MapVector<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>,llvm::SmallDenseMap<unsigned long long,unsigned int,2u,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,unsigned int>>,llvm::SmallVector<std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>>,2u>>::erase(int *a1, void *a2)
{
  uint64_t v4 = (uint64_t)(a1 + 2);
  if (*(unsigned char *)a1)
  {
    int v5 = 2;
    unsigned int v6 = a1 + 2;
  }
  else
  {
    int v5 = a1[4];
    if (!v5) {
      goto LABEL_7;
    }
    unsigned int v6 = (int *)*((void *)a1 + 1);
  }
  int v7 = v5 - 1;
  LODWORD(v8) = (37 * *a2) & (v5 - 1);
  int v9 = (uint64_t *)&v6[4 * v8];
  uint64_t v10 = *v9;
  if (*a2 == *v9)
  {
LABEL_6:
    *int v9 = -2;
    int v11 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v11;
  }
  else
  {
    int v28 = 1;
    while (v10 != -1)
    {
      int v29 = v8 + v28++;
      uint64_t v8 = v29 & v7;
      uint64_t v10 = *(void *)&v6[4 * v8];
      if (*a2 == v10)
      {
        int v9 = (uint64_t *)&v6[4 * v8];
        goto LABEL_6;
      }
    }
  }
LABEL_7:
  uint64_t v12 = (uint64_t *)(a1 + 10);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,0>((uint64_t)(a2 + 5), *((void *)a1 + 5) + 40 * a1[12], (uint64_t)a2);
  unsigned int v13 = a1[12] - 1;
  a1[12] = v13;
  uint64_t v14 = *v12;
  uint64_t v15 = *v12 + 40 * v13;
  unint64_t v16 = *(void *)(v15 + 32);
  if (v16 >= 8)
  {
    unint64_t v17 = (llvm **)(v15 + 8);
    if ((v16 & 4) != 0)
    {
      uint64_t v18 = (llvm *)(v15 + 8);
      if ((v16 & 2) == 0) {
        uint64_t v18 = *v17;
      }
      (*(void (**)(llvm *))((v16 & 0xFFFFFFFFFFFFFFF8) + 16))(v18);
    }
    if ((v16 & 2) == 0) {
      llvm::deallocate_buffer(*v17, *(void **)(v14 + 40 * v13 + 16));
    }
  }
  uint64_t v19 = *((void *)a1 + 5);
  if ((void *)(v19 + 40 * a1[12]) == a2) {
    return a2;
  }
  int v20 = *a1;
  if (*a1 > 1)
  {
    uint64_t v22 = (uint64_t)(a1 + 10);
    if ((v20 & 1) != 0
      || (v4 = *((void *)a1 + 1), v23 = a1[4], v22 = v4 + 16 * v23, uint64_t v21 = v4, v23))
    {
      uint64_t v21 = v4;
      while (*(void *)v21 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v21 += 16;
        if (v21 == v22)
        {
          uint64_t v21 = v22;
          break;
        }
      }
      if (*a1) {
        goto LABEL_26;
      }
    }
  }
  else
  {
    if (v20)
    {
      uint64_t v21 = (uint64_t)(a1 + 10);
      uint64_t v22 = v4 + 32;
      goto LABEL_26;
    }
    uint64_t v21 = *((void *)a1 + 1) + 16 * a1[4];
    uint64_t v22 = v21;
  }
  uint64_t v12 = (uint64_t *)(*((void *)a1 + 1) + 16 * a1[4]);
LABEL_26:
  if ((uint64_t *)v21 != v12)
  {
    unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - v19) >> 3);
    do
    {
      unint64_t v25 = *(unsigned int *)(v21 + 8);
      if (v24 < v25) {
        *(_DWORD *)(v21 + 8) = v25 - 1;
      }
      uint64_t v26 = v21 + 16;
      uint64_t v21 = v22;
      if (v26 != v22)
      {
        uint64_t v21 = v26;
        while (*(void *)v21 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v21 += 16;
          if (v21 == v22)
          {
            uint64_t v21 = v22;
            break;
          }
        }
      }
    }
    while ((uint64_t *)v21 != v12);
  }
  return a2;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,std::pair<unsigned long long,llvm::unique_function<mlir::LogicalResult ()(mlir::Diagnostic &)>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    uint64_t v8 = a3 + v6;
    *(void *)(a3 + v6) = *(void *)(a1 + v6);
    int v9 = (llvm **)(a3 + v6 + 8);
    if (a1 != a3)
    {
      unint64_t v10 = *(void *)(v8 + 32);
      if (v10 >= 8)
      {
        if ((v10 & 4) != 0)
        {
          int v11 = (llvm *)(a3 + v6 + 8);
          if ((v10 & 2) == 0) {
            int v11 = *v9;
          }
          (*(void (**)(llvm *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
        }
        if ((v10 & 2) == 0) {
          llvm::deallocate_buffer(*v9, *(void **)(a3 + v6 + 16));
        }
      }
      *(void *)(v8 + 32) = 0;
      uint64_t v12 = *(void *)(a1 + v6 + 32);
      *(void *)(v8 + 32) = v12;
      if (*(void *)(a1 + v6 + 32) >= 8uLL)
      {
        if ((v12 & 2) != 0 && (v12 & 4) != 0)
        {
          (*(void (**)(uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(a3 + v6 + 8, a1 + v6 + 8);
        }
        else
        {
          long long v7 = *(_OWORD *)(a1 + v6 + 8);
          *(void *)(a3 + v6 + 24) = *(void *)(a1 + v6 + 24);
          *(_OWORD *)int v9 = v7;
        }
        *(void *)(a1 + v6 + 32) = 0;
      }
    }
    v6 += 40;
  }
  while (a1 + v6 != v5);
  return v5;
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIN4mlir13LogicalResultEJRNS2_10DiagnosticEEE8CallImplIZNS2_16DiagnosticEngine15registerHandlerIZNS2_26SourceMgrDiagnosticHandlerC1ERNS_9SourceMgrEPNS2_11MLIRContextERNS_11raw_ostreamEONS_15unique_functionIFbNS2_8LocationEEEEE3__0vEENSt3__19enable_ifIXsr3std7is_sameIT0_vEE5valueEyE4typeEOT_EUlS5_E_EES3_PvS5_(mlir::SourceMgrDiagnosticHandler **a1, mlir::Diagnostic *a2)
{
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::Location)>::callback_fn<mlir::FileLineColLoc mlir::LocationAttr::findInstanceOf<mlir::FileLineColLoc>(void)::{lambda(mlir::FileLineColLoc)#1}>(void **a1, uint64_t a2)
{
  uint64_t result = 1;
  if (a2)
  {
    if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
    {
      uint64_t result = 0;
      **a1 = a2;
    }
  }
  return result;
}

uint64_t mlir::Dialect::Dialect(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)uint64_t result = &unk_1EC9CD940;
  *(void *)(result + 8) = a2;
  *(void *)(result + 16) = a3;
  *(void *)(result + 24) = a5;
  *(void *)(result + 32) = a4;
  *(_WORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void mlir::Dialect::~Dialect(llvm **this)
{
  *this = (llvm *)&unk_1EC9CD940;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

{
  *this = (llvm *)&unk_1EC9CD940;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

{
  *this = (llvm *)&unk_1EC9CD940;
  llvm::deallocate_buffer(this[9], (void *)(16 * *((unsigned int *)this + 22)));
}

uint64_t sub_18048649C()
{
  return v0;
}

uint64_t sub_18048657C()
{
  return v0;
}

void sub_18048665C()
{
  operator delete(v0);
}

uint64_t mlir::Dialect::verifyRegionArgAttribute()
{
  return 1;
}

uint64_t mlir::Dialect::verifyRegionResultAttribute()
{
  return 1;
}

uint64_t mlir::Dialect::parseAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  __int16 v29 = 257;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a2 + 24))(&v34, a2, v4, v28);
  if (v34)
  {
    LODWORD(v30) = 3;
    int v31 = "dialect '";
    uint64_t v32 = 9;
    uint64_t v5 = &v30;
    uint64_t v6 = (char *)v36;
    if (v37 >= v38)
    {
      unint64_t v24 = v37 + 1;
      if (v36 <= &v30 && (char *)v36 + 24 * v37 > (char *)&v30)
      {
        int64_t v26 = (char *)&v30 - (unsigned char *)v36;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v24, 24);
        uint64_t v6 = (char *)v36;
        uint64_t v5 = (const void ***)((char *)v36 + v26);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v24, 24);
        uint64_t v5 = &v30;
        uint64_t v6 = (char *)v36;
      }
    }
    long long v7 = &v6[24 * v37];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = v5[2];
    *(_OWORD *)long long v7 = v8;
    ++v37;
    if (v34)
    {
      int v9 = *(const void ***)(a1 + 8);
      unint64_t v10 = *(const char **)(a1 + 16);
      __int16 v33 = 261;
      BOOL v30 = v9;
      int v31 = v10;
      mlir::Diagnostic::operator<<((uint64_t)&v35, &v30);
      if (v34)
      {
        LODWORD(v30) = 3;
        int v31 = "' provides no attribute parsing hook";
        uint64_t v32 = 36;
        int v11 = &v30;
        uint64_t v12 = (char *)v36;
        if (v37 >= v38)
        {
          unint64_t v25 = v37 + 1;
          if (v36 <= &v30 && (char *)v36 + 24 * v37 > (char *)&v30)
          {
            int64_t v27 = (char *)&v30 - (unsigned char *)v36;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
            uint64_t v12 = (char *)v36;
            int v11 = (const void ***)((char *)v36 + v27);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, v39, v25, 24);
            int v11 = &v30;
            uint64_t v12 = (char *)v36;
          }
        }
        unsigned int v13 = &v12[24 * v37];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = v11[2];
        *(_OWORD *)unsigned int v13 = v14;
        ++v37;
        if (v34) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v34);
        }
      }
    }
  }
  if (v44)
  {
    uint64_t v15 = (void **)__p;
    if (__p)
    {
      unint64_t v16 = v43;
      unint64_t v17 = __p;
      if (v43 != __p)
      {
        do
          unint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        unint64_t v17 = __p;
      }
      uint64_t v43 = v15;
      operator delete(v17);
    }
    uint64_t v18 = v40;
    if (v40)
    {
      uint64_t v19 = v41;
      int v20 = v40;
      if (v41 != v40)
      {
        do
        {
          uint64_t v22 = (void *)*--v19;
          uint64_t v21 = v22;
          *uint64_t v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        int v20 = v40;
      }
      uint64_t v41 = v18;
      operator delete(v20);
    }
    if (v36 != v39) {
      free(v36);
    }
  }
  return 0;
}

uint64_t mlir::Dialect::parseType(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v4 = *(mlir::StringAttr **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    LOWORD(v43) = 261;
    uint64_t v40 = v5;
    uint64_t v41 = v6;
    uint64_t v7 = mlir::StringAttr::get(v4, (mlir::MLIRContext *)&v40);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 624))(a2);
    return mlir::OpaqueType::get(v7, v8, v9);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    __int16 v35 = 257;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, char *))(*(void *)a2 + 24))(&v40, a2, v11, v34);
    if (v40)
    {
      LODWORD(v36) = 3;
      unsigned int v37 = "dialect '";
      uint64_t v38 = 9;
      uint64_t v12 = &v36;
      unsigned int v13 = (char *)v42;
      if (v43 >= v44)
      {
        unint64_t v30 = v43 + 1;
        if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
        {
          int64_t v32 = (char *)&v36 - (unsigned char *)v42;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v30, 24);
          unsigned int v13 = (char *)v42;
          uint64_t v12 = (const void ***)((char *)v42 + v32);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v30, 24);
          uint64_t v12 = &v36;
          unsigned int v13 = (char *)v42;
        }
      }
      long long v14 = &v13[24 * v43];
      long long v15 = *(_OWORD *)v12;
      *((void *)v14 + 2) = v12[2];
      *(_OWORD *)long long v14 = v15;
      ++v43;
      if (v40)
      {
        unint64_t v16 = *(const void ***)(a1 + 8);
        unint64_t v17 = *(const char **)(a1 + 16);
        __int16 v39 = 261;
        uint64_t v36 = v16;
        unsigned int v37 = v17;
        mlir::Diagnostic::operator<<((uint64_t)&v41, &v36);
        if (v40)
        {
          LODWORD(v36) = 3;
          unsigned int v37 = "' provides no type parsing hook";
          uint64_t v38 = 31;
          uint64_t v18 = &v36;
          uint64_t v19 = (char *)v42;
          if (v43 >= v44)
          {
            unint64_t v31 = v43 + 1;
            if (v42 <= &v36 && (char *)v42 + 24 * v43 > (char *)&v36)
            {
              int64_t v33 = (char *)&v36 - (unsigned char *)v42;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
              uint64_t v19 = (char *)v42;
              uint64_t v18 = (const void ***)((char *)v42 + v33);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, v45, v31, 24);
              uint64_t v18 = &v36;
              uint64_t v19 = (char *)v42;
            }
          }
          int v20 = &v19[24 * v43];
          long long v21 = *(_OWORD *)v18;
          *((void *)v20 + 2) = v18[2];
          *(_OWORD *)int v20 = v21;
          ++v43;
          if (v40) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v40);
          }
        }
      }
    }
    if (v50)
    {
      uint64_t v22 = (void **)__p;
      if (__p)
      {
        uint64_t v23 = v49;
        unint64_t v24 = __p;
        if (v49 != __p)
        {
          do
            uint64_t v23 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v23 - 1);
          while (v23 != v22);
          unint64_t v24 = __p;
        }
        unint64_t v49 = v22;
        operator delete(v24);
      }
      unint64_t v25 = v46;
      if (v46)
      {
        int64_t v26 = v47;
        int64_t v27 = v46;
        if (v47 != v46)
        {
          do
          {
            __int16 v29 = (void *)*--v26;
            int v28 = v29;
            void *v26 = 0;
            if (v29) {
              operator delete[](v28);
            }
          }
          while (v26 != v25);
          int64_t v27 = v46;
        }
        unsigned int v47 = v25;
        operator delete(v27);
      }
      if (v42 != v45) {
        free(v42);
      }
    }
    return 0;
  }
}

void mlir::Dialect::getParseOperationHook(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void mlir::Dialect::getOperationPrinter(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t mlir::Dialect::isValidNamespace(char *a1, uint64_t a2)
{
  llvm::Regex::Regex((uint64_t)v6, "^[a-zA-Z_][a-zA-Z_0-9\\$]*$", 26, 0);
  uint64_t v4 = llvm::Regex::match((uint64_t)v6, a1, a2, 0, 0);
  llvm::Regex::~Regex(v6);
  return v4;
}

uint64_t *mlir::Dialect::addInterface(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(*a2 + 16);
  v20[0] = *(void *)(a1 + 24);
  v20[1] = v4;
  long long v21 = 0;
  uint64_t result = (uint64_t *)llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)(a1 + 72), v20, &v21);
  if (result)
  {
    *long long v21 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    *(int32x2_t *)(a1 + 80) = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v7 = a1 + 48;
  uint64_t v6 = v8;
  uint64_t v9 = *(void *)(*a2 + 16);
  v20[0] = v9;
  int v10 = *(_DWORD *)(v7 + 16);
  if (!v10)
  {
    long long v15 = 0;
    return llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(v7, v15, v20, a2);
  }
  int v11 = v10 - 1;
  unsigned int v12 = ((v9 >> 4) ^ (v9 >> 9)) & v11;
  unsigned int v13 = (uint64_t *)(v6 + 16 * v12);
  uint64_t v14 = *v13;
  if (v9 != *v13)
  {
    unint64_t v16 = 0;
    int v17 = 1;
    while (v14 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v14 == -8192;
      }
      if (v18) {
        unint64_t v16 = v13;
      }
      unsigned int v19 = v12 + v17++;
      unsigned int v12 = v19 & v11;
      unsigned int v13 = (uint64_t *)(v6 + 16 * v12);
      uint64_t v14 = *v13;
      if (v9 == *v13) {
        return result;
      }
    }
    if (v16) {
      long long v15 = v16;
    }
    else {
      long long v15 = v13;
    }
    return llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(v7, v15, v20, a2);
  }
  return result;
}

uint64_t mlir::DialectInterface::getContext(mlir::DialectInterface *this)
{
  return *(void *)(*((void *)this + 1) + 32);
}

uint64_t mlir::detail::DialectInterfaceCollectionBase::DialectInterfaceCollectionBase(uint64_t a1, mlir::MLIRContext *this, uint64_t a3)
{
  *(void *)a1 = &unk_1EC9CD820;
  *(void *)(a1 + 8) = 0;
  uint64_t v5 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  unsigned int v43 = (char **)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  mlir::MLIRContext::getLoadedDialects(this, &v46);
  uint64_t v6 = v46;
  uint64_t v7 = v47;
  if (v46 != v47)
  {
    unsigned int v8 = (a3 >> 4) ^ (a3 >> 9);
    unsigned int v42 = v8;
    while (1)
    {
      uint64_t v10 = *(void *)v6;
      uint64_t v45 = 0;
      uint64_t v11 = *(void *)(v10 + 48);
      uint64_t v12 = *(unsigned int *)(v10 + 64);
      if (!v12) {
        goto LABEL_12;
      }
      LODWORD(v13) = (v12 - 1) & v8;
      uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
      uint64_t v15 = *v14;
      if (*v14 != a3) {
        break;
      }
LABEL_13:
      if (v14 == (uint64_t *)(v11 + 16 * v12)) {
        goto LABEL_5;
      }
      uint64_t v45 = v14[1];
      if (!v45) {
        goto LABEL_5;
      }
      uint64_t v48 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>(v5, (uint64_t)&v45, &v48) & 1) == 0)
      {
        BOOL v18 = llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::InsertIntoBucketImpl<mlir::DialectInterface const*>((uint64_t)v5, (uint64_t)&v45, (uint64_t)&v45, v48);
        *BOOL v18 = v45;
      }
      int v20 = *(char **)(a1 + 40);
      unint64_t v19 = *(void *)(a1 + 48);
      if ((unint64_t)v20 < v19)
      {
        *(void *)int v20 = v45;
        uint64_t v9 = (uint64_t)(v20 + 8);
        goto LABEL_4;
      }
      long long v21 = v7;
      uint64_t v22 = v5;
      uint64_t v23 = a3;
      unint64_t v24 = *v43;
      uint64_t v25 = v20 - *v43;
      uint64_t v26 = v25 >> 3;
      unint64_t v27 = (v25 >> 3) + 1;
      if (v27 >> 61) {
        abort();
      }
      uint64_t v28 = v19 - (void)v24;
      if (v28 >> 2 > v27) {
        unint64_t v27 = v28 >> 2;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v44 = v27;
      if (v27)
      {
        if (v27 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        __int16 v29 = operator new(8 * v27);
        unint64_t v30 = &v29[8 * v26];
        void *v30 = v45;
        uint64_t v9 = (uint64_t)(v30 + 1);
        if (v20 == v24)
        {
LABEL_29:
          a3 = v23;
          uint64_t v5 = v22;
          uint64_t v7 = v21;
          unsigned int v8 = v42;
          *(void *)(a1 + 32) = v30;
          *(void *)(a1 + 40) = v9;
          *(void *)(a1 + 48) = &v29[8 * v44];
          if (!v20) {
            goto LABEL_4;
          }
LABEL_37:
          operator delete(v20);
          goto LABEL_4;
        }
      }
      else
      {
        __int16 v29 = 0;
        unint64_t v30 = (void *)(8 * v26);
        *(void *)(8 * v26) = v45;
        uint64_t v9 = 8 * v26 + 8;
        if (v20 == v24) {
          goto LABEL_29;
        }
      }
      unint64_t v31 = v20 - 8 - v24;
      if (v31 < 0x58)
      {
        a3 = v23;
        uint64_t v5 = v22;
        uint64_t v7 = v21;
        unsigned int v8 = v42;
        do
        {
LABEL_35:
          uint64_t v40 = *((void *)v20 - 1);
          v20 -= 8;
          *--unint64_t v30 = v40;
        }
        while (v20 != v24);
        goto LABEL_36;
      }
      unint64_t v32 = v20 - &v29[v25];
      a3 = v23;
      uint64_t v5 = v22;
      uint64_t v7 = v21;
      unsigned int v8 = v42;
      if (v32 < 0x20) {
        goto LABEL_35;
      }
      uint64_t v33 = (v31 >> 3) + 1;
      uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      __int16 v35 = &v20[-v34];
      unint64_t v30 = (void *)((char *)v30 - v34);
      uint64_t v36 = &v29[8 * v26 - 16];
      unsigned int v37 = (long long *)(v20 - 16);
      uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *uint64_t v36 = v39;
        v36 -= 2;
        v37 -= 2;
        v38 -= 4;
      }
      while (v38);
      int v20 = v35;
      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_35;
      }
LABEL_36:
      int v20 = *v43;
      *(void *)(a1 + 32) = v30;
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = &v29[8 * v44];
      if (v20) {
        goto LABEL_37;
      }
LABEL_4:
      *(void *)(a1 + 40) = v9;
LABEL_5:
      v6 += 8;
      if (v6 == v7)
      {
        uint64_t v6 = v46;
        goto LABEL_39;
      }
    }
    int v16 = 1;
    while (v15 != -4096)
    {
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & (v12 - 1);
      uint64_t v15 = *(void *)(v11 + 16 * v13);
      if (v15 == a3)
      {
        uint64_t v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_13;
      }
    }
LABEL_12:
    uint64_t v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_13;
  }
LABEL_39:
  if (v6)
  {
    unsigned int v47 = v6;
    operator delete(v6);
  }
  return a1;
}

void mlir::detail::DialectInterfaceCollectionBase::~DialectInterfaceCollectionBase(mlir::detail::DialectInterfaceCollectionBase *this)
{
  *(void *)this = &unk_1EC9CD820;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

{
  void *v2;

  *(void *)this = &unk_1EC9CD820;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

{
  void *v2;

  *(void *)this = &unk_1EC9CD820;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  llvm::deallocate_buffer(*((llvm **)this + 1), (void *)(8 * *((unsigned int *)this + 6)));
}

uint64_t sub_1804872A8()
{
  return v0;
}

uint64_t sub_18048730C()
{
  return v0;
}

void sub_180487370()
{
  operator delete(v0);
}

uint64_t mlir::detail::DialectInterfaceCollectionBase::getInterfaceFor(mlir::detail::DialectInterfaceCollectionBase *this, mlir::Operation *a2)
{
  uint64_t v3 = *((void *)a2 + 6);
  if (*(_UNKNOWN **)(v3 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t v6 = *(void *)(v3 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v6);
    uint64_t v6 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>((uint64_t *)this + 1, (unint64_t *)&Values, &v6))return 0; {
  }
    }
  else
  {
    uint64_t Values = *(void *)(v3 + 24);
    uint64_t v6 = 0;
    if (!llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>((uint64_t *)this + 1, (unint64_t *)&Values, &v6))return 0; {
  }
    }
  if (v6 != *((void *)this + 1) + 8 * *((unsigned int *)this + 6)) {
    return *(void *)v6;
  }
  return 0;
}

void mlir::DialectExtensionBase::~DialectExtensionBase(mlir::DialectExtensionBase *this)
{
  *(void *)this = &unk_1EC9AAD88;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
}

uint64_t mlir::Dialect::handleUseOfUndefinedPromisedInterface(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[0] = a2;
  v21[1] = a3;
  v20[0] = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>(a1 + 9, v21, v20);
  if (result)
  {
    __int16 v18 = 1283;
    void v17[2] = a4;
    v17[3] = a5;
    __int16 v16 = 259;
    llvm::operator+(v17, (uint64_t *)&v15, (uint64_t)v19);
    uint64_t v9 = a1[1];
    uint64_t v10 = a1[2];
    __int16 v14 = 261;
    v13[0] = v9;
    v13[1] = v10;
    llvm::operator+(v19, v13, (uint64_t)v20);
    uint64_t v11 = "' but never implemented. This is generally an indication that the dialect extension implementing the interface"
          " was never registered.";
    __int16 v12 = 259;
    llvm::operator+(v20, (uint64_t *)&v11, (uint64_t)v21);
    llvm::report_fatal_error((llvm::Twine *)v21, 1);
  }
  return result;
}

int32x2_t mlir::dialect_extension_detail::handleAdditionOfUndefinedPromisedInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v6 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>,std::pair<mlir::TypeID,mlir::TypeID>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<mlir::TypeID,mlir::TypeID>,void>,llvm::detail::DenseSetPair<std::pair<mlir::TypeID,mlir::TypeID>>>::LookupBucketFor<std::pair<mlir::TypeID,mlir::TypeID>>((uint64_t *)(a1 + 72), v5, &v6))
  {
    *uint64_t v6 = vdupq_n_s64(0xFFFFFFFFFFFFE000);
    int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 80), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 80) = result;
  }
  return result;
}

mlir::DialectRegistry *mlir::DialectRegistry::DialectRegistry(mlir::DialectRegistry *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  v3[0] = &unk_1EC9CEE88;
  uint64_t v4 = v3;
  mlir::DialectRegistry::insert((uint64_t **)this, &mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, "builtin", 7uLL, v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  return this;
}

uint64_t **(*mlir::DialectRegistry::getDialectAllocator(uint64_t a1, void *__src, size_t __len))(uint64_t a1, uint64_t a2)
{
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (__len >= 0x17)
    {
      size_t v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v10 = __len | 7;
      }
      size_t v11 = v10 + 1;
      p_dst = (void **)operator new(v10 + 1);
      size_t v32 = __len;
      unint64_t v33 = v11 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = __len;
      p_dst = (void **)&__dst;
      if (!__len)
      {
LABEL_12:
        *((unsigned char *)p_dst + __len) = 0;
        uint64_t v12 = *(void *)(a1 + 8);
        uint64_t v7 = a1 + 8;
        uint64_t v8 = v12;
        size_t v9 = HIBYTE(v33);
        if (v12) {
          goto LABEL_13;
        }
LABEL_51:
        uint64_t v15 = v7;
        goto LABEL_52;
      }
    }
    memmove(p_dst, __src, __len);
    goto LABEL_12;
  }
  __dst = 0;
  size_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t v7 = a1 + 8;
  uint64_t v8 = *(void *)(a1 + 8);
  size_t v9 = 0;
  if (!v8) {
    goto LABEL_51;
  }
LABEL_13:
  if ((v9 & 0x80u) == 0) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v32;
  }
  if ((v9 & 0x80u) == 0) {
    __int16 v14 = (void **)&__dst;
  }
  else {
    __int16 v14 = __dst;
  }
  uint64_t v15 = v7;
  do
  {
    int v16 = *(char *)(v8 + 55);
    if (v16 >= 0) {
      size_t v17 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      size_t v17 = *(void *)(v8 + 40);
    }
    if (v16 >= 0) {
      __int16 v18 = (const void *)(v8 + 32);
    }
    else {
      __int16 v18 = *(const void **)(v8 + 32);
    }
    if (v13 >= v17) {
      size_t v19 = v17;
    }
    else {
      size_t v19 = v13;
    }
    int v20 = memcmp(v18, v14, v19);
    BOOL v21 = v17 < v13;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    BOOL v22 = !v21;
    if (v21) {
      uint64_t v23 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v23 = (uint64_t *)v8;
    }
    if (v22) {
      uint64_t v15 = v8;
    }
    uint64_t v8 = *v23;
  }
  while (*v23);
  if (v15 == v7) {
    goto LABEL_51;
  }
  int v24 = *(char *)(v15 + 55);
  if (v24 >= 0) {
    size_t v25 = *(unsigned __int8 *)(v15 + 55);
  }
  else {
    size_t v25 = *(void *)(v15 + 40);
  }
  if (v24 >= 0) {
    uint64_t v26 = (const void *)(v15 + 32);
  }
  else {
    uint64_t v26 = *(const void **)(v15 + 32);
  }
  if (v25 >= v13) {
    size_t v27 = v13;
  }
  else {
    size_t v27 = v25;
  }
  int v28 = memcmp(v14, v26, v27);
  BOOL v29 = v13 < v25;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  if (v29) {
    goto LABEL_51;
  }
LABEL_52:
  if ((v9 & 0x80) != 0) {
    operator delete(__dst);
  }
  if (v15 == v7) {
    return 0;
  }
  else {
    return llvm::function_ref<mlir::Dialect * ()(mlir::MLIRContext *)>::callback_fn<std::function<mlir::Dialect * ()(mlir::MLIRContext *)> const>;
  }
}

void *mlir::DialectRegistry::insert(uint64_t **a1, uint64_t *a2, void *__src, size_t __len, void *a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v14 = __len | 7;
    }
    size_t v15 = v14 + 1;
    size_t v10 = (long long *)operator new(v14 + 1);
    *((void *)&v23 + 1) = __len;
    unint64_t v24 = v15 | 0x8000000000000000;
    *(void *)&long long v23 = v10;
LABEL_10:
    memmove(v10, __src, __len);
    *((unsigned char *)v10 + __len) = 0;
    size_t v25 = a2;
    size_t v11 = (void *)a5[3];
    if (v11) {
      goto LABEL_5;
    }
LABEL_11:
    size_t v27 = 0;
    *(_OWORD *)std::string __p = v23;
    int v16 = (void *)v24;
    long long v23 = 0uLL;
    unint64_t v24 = 0;
    BOOL v29 = v16;
    size_t v30 = (size_t)a2;
    size_t v32 = 0;
    goto LABEL_18;
  }
  HIBYTE(v24) = __len;
  size_t v10 = &v23;
  if (__len) {
    goto LABEL_10;
  }
  LOBYTE(v23) = 0;
  size_t v25 = a2;
  size_t v11 = (void *)a5[3];
  if (!v11) {
    goto LABEL_11;
  }
LABEL_5:
  if (v11 == a5)
  {
    size_t v27 = v26;
    (*(void (**)(void *, void *))(*a5 + 24))(a5, v26);
    size_t v13 = (size_t)v25;
    uint64_t v12 = v27;
  }
  else
  {
    uint64_t v12 = (void *)(*(uint64_t (**)(void *))(*v11 + 16))(v11);
    size_t v27 = v12;
    size_t v13 = (size_t)a2;
  }
  *(_OWORD *)std::string __p = v23;
  size_t v17 = (void *)v24;
  unint64_t v24 = 0;
  long long v23 = 0uLL;
  BOOL v29 = v17;
  size_t v30 = v13;
  if (v12)
  {
    if (v12 == v26)
    {
      size_t v32 = v31;
      (*(void (**)(void *, void *))(v26[0] + 24))(v26, v31);
    }
    else
    {
      size_t v32 = v12;
      size_t v27 = 0;
    }
  }
  else
  {
    size_t v32 = 0;
  }
LABEL_18:
  int v20 = std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(a1, (const void **)__p, (uint64_t)__p);
  char v21 = v18;
  if (v32 == v31)
  {
    (*(void (**)(void *))(v31[0] + 32))(v31);
    if ((SHIBYTE(v29) & 0x80000000) == 0) {
      goto LABEL_22;
    }
  }
  else
  {
    if (v32) {
      (*(void (**)(void *, uint64_t, uint64_t))(*v32 + 40))(v32, v18, v19);
    }
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_22:
      int32x2_t result = v27;
      if (v27 != v26) {
        goto LABEL_23;
      }
LABEL_29:
      int32x2_t result = (void *)(*(uint64_t (**)(void *))(v26[0] + 32))(v26);
      if (v21) {
        return result;
      }
      goto LABEL_30;
    }
  }
  operator delete(__p[0]);
  int32x2_t result = v27;
  if (v27 == v26) {
    goto LABEL_29;
  }
LABEL_23:
  if (result) {
    int32x2_t result = (void *)(*(uint64_t (**)(void *))(*result + 40))(result);
  }
  if (!v21)
  {
LABEL_30:
    if (v20[7] != a2)
    {
      LOWORD(v31[0]) = 1283;
      __p[0] = "Trying to register different dialects for the same namespace: ";
      BOOL v29 = __src;
      size_t v30 = __len;
      llvm::report_fatal_error((llvm::Twine *)__p, 1);
    }
  }
  return result;
}

void mlir::DialectRegistry::applyExtensions(mlir::DialectRegistry *this, mlir::Dialect *a2)
{
  v26[6] = *MEMORY[0x1E4F143B8];
  long long v23 = a2;
  uint64_t v2 = *((void *)this + 3);
  if ((int)((unint64_t)(*((void *)this + 4) - v2) >> 3) >= 1)
  {
    uint64_t v3 = this;
    uint64_t v4 = 0;
    uint64_t v6 = (const void *)*((void *)a2 + 1);
    size_t v5 = *((void *)a2 + 2);
    BOOL v22 = (uint64_t *)*((void *)a2 + 4);
    do
    {
      uint64_t v7 = *(void *)(v2 + 8 * v4);
      uint64_t v8 = *(void *)(v7 + 8);
      unint64_t v9 = *(unsigned int *)(v7 + 16);
      if (v9 == 1)
      {
        if (*(void *)(v8 + 8) != v5 || v5 && memcmp(*(const void **)v8, v6, v5)) {
          goto LABEL_4;
        }
LABEL_3:
        (*(void (**)(uint64_t, uint64_t *, mlir::Dialect **, uint64_t))(*(void *)v7 + 16))(v7, v22, &v23, 1);
        goto LABEL_4;
      }
      if (!v9) {
        goto LABEL_3;
      }
      uint64_t v10 = 16 * v9;
      if (v5)
      {
        size_t v11 = v3;
        uint64_t v12 = 16 * v9;
        uint64_t v13 = *(void *)(v7 + 8);
        while (*(void *)(v13 + 8) != v5 || memcmp(*(const void **)v13, v6, v5))
        {
          v13 += 16;
          v12 -= 16;
          if (!v12)
          {
            uint64_t v13 = v8 + 16 * v9;
            break;
          }
        }
        uint64_t v3 = v11;
      }
      else
      {
        uint64_t v14 = 16 * v9;
        uint64_t v13 = *(void *)(v7 + 8);
        while (*(void *)(v13 + 8))
        {
          v13 += 16;
          v14 -= 16;
          if (!v14)
          {
            uint64_t v13 = v8 + 16 * v9;
            break;
          }
        }
      }
      uint64_t v15 = (v13 - v8) >> 4;
      if (v15 == v9) {
        goto LABEL_4;
      }
      unint64_t v24 = v26;
      uint64_t v25 = 0x600000000;
      if (v9 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v9, 8);
      }
      int v16 = (uint64_t *)(v8 + 8);
      uint64_t v17 = 16 * v15;
      do
      {
        if (!v17)
        {
          uint64_t v19 = (uint64_t)v23;
          uint64_t v20 = v25;
          if (v25 < (unint64_t)HIDWORD(v25)) {
            goto LABEL_30;
          }
LABEL_33:
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v26, v20 + 1, 8);
          uint64_t v20 = v25;
          goto LABEL_30;
        }
        uint64_t LoadedDialect = mlir::MLIRContext::getLoadedDialect(v22, *(v16 - 1), *v16);
        if (!LoadedDialect) {
          goto LABEL_34;
        }
        uint64_t v19 = LoadedDialect;
        uint64_t v20 = v25;
        if (v25 >= (unint64_t)HIDWORD(v25)) {
          goto LABEL_33;
        }
LABEL_30:
        *((void *)v24 + v20) = v19;
        unsigned int v21 = v25 + 1;
        LODWORD(v25) = v25 + 1;
        v16 += 2;
        v17 -= 16;
        v10 -= 16;
      }
      while (v10);
      (*(void (**)(uint64_t, uint64_t *, void *, void))(*(void *)v7 + 16))(v7, v22, v24, v21);
LABEL_34:
      if (v24 != v26) {
        free(v24);
      }
LABEL_4:
      ++v4;
      uint64_t v2 = *((void *)v3 + 3);
    }
    while (v4 < (int)((unint64_t)(*((void *)v3 + 4) - v2) >> 3));
  }
}

void mlir::DialectRegistry::applyExtensions(mlir::DialectRegistry *this, mlir::MLIRContext *a2)
{
  v15[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 3);
  if ((int)((unint64_t)(*((void *)this + 4) - v2) >> 3) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(v2 + 8 * v5);
      unint64_t v7 = *(unsigned int *)(v6 + 16);
      if (v7)
      {
        uint64_t v8 = *(uint64_t **)(v6 + 8);
        std::string __p = v15;
        uint64_t v14 = 0x600000000;
        if (v7 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v15, v7, 8);
        }
        unint64_t v9 = &v8[2 * v7];
        while (1)
        {
          uint64_t LoadedDialect = mlir::MLIRContext::getLoadedDialect((uint64_t *)a2, *v8, v8[1]);
          if (!LoadedDialect) {
            break;
          }
          uint64_t v11 = LoadedDialect;
          uint64_t v12 = v14;
          if (v14 >= (unint64_t)HIDWORD(v14))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__p, v15, v14 + 1, 8);
            uint64_t v12 = v14;
          }
          *((void *)__p + v12) = v11;
          LODWORD(v14) = v14 + 1;
          v8 += 2;
          if (v8 == v9)
          {
            (*(void (**)(uint64_t, mlir::MLIRContext *, void *))(*(void *)v6 + 16))(v6, a2, __p);
            break;
          }
        }
        if (__p != v15) {
          free(__p);
        }
      }
      else
      {
        mlir::MLIRContext::getLoadedDialects(a2, (char **)&__p);
        (*(void (**)(uint64_t, mlir::MLIRContext *))(*(void *)v6 + 16))(v6, a2);
        if (__p)
        {
          uint64_t v14 = (uint64_t)__p;
          operator delete(__p);
        }
      }
      ++v5;
      uint64_t v2 = *((void *)this + 3);
    }
    while (v5 < (int)((unint64_t)(*((void *)this + 4) - v2) >> 3));
  }
}

uint64_t mlir::DialectRegistry::isSubsetOf(void *a1, uint64_t a2)
{
  if (a1[3] != a1[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (void *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  uint64_t v5 = *(uint64_t ***)(a2 + 8);
  if (!v5) {
    return 0;
  }
  do
  {
    int v6 = *((char *)v4 + 55);
    if (v6 >= 0) {
      size_t v7 = *((unsigned __int8 *)v4 + 55);
    }
    else {
      size_t v7 = v4[5];
    }
    if (v6 >= 0) {
      uint64_t v8 = v4 + 4;
    }
    else {
      uint64_t v8 = (const void *)v4[4];
    }
    unint64_t v9 = v5;
    while (1)
    {
      int v10 = *((char *)v9 + 55);
      if (v10 >= 0) {
        size_t v11 = *((unsigned __int8 *)v9 + 55);
      }
      else {
        size_t v11 = (size_t)v9[5];
      }
      if (v10 >= 0) {
        uint64_t v12 = (uint64_t *)(v9 + 4);
      }
      else {
        uint64_t v12 = v9[4];
      }
      if (v11 >= v7) {
        size_t v13 = v7;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v8, v12, v13);
      BOOL v15 = v7 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15) {
        goto LABEL_12;
      }
      int v16 = memcmp(v12, v8, v13);
      BOOL v17 = v11 < v7;
      if (v16) {
        BOOL v17 = v16 < 0;
      }
      if (!v17) {
        break;
      }
      ++v9;
LABEL_12:
      unint64_t v9 = (uint64_t **)*v9;
      if (!v9) {
        return 0;
      }
    }
    uint64_t v18 = (void *)v4[1];
    if (v18)
    {
      do
      {
        uint64_t v19 = v18;
        uint64_t v18 = (void *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        uint64_t v19 = (void *)v4[2];
        BOOL v20 = *v19 == (void)v4;
        uint64_t v4 = v19;
      }
      while (!v20);
    }
    uint64_t result = 1;
    uint64_t v4 = v19;
  }
  while (v19 != v3);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::Dialect *>(uint64_t *a1, unint64_t *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *a2;
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      BOOL v22 = a3;
      BOOL v20 = a2;
      uint64_t v23 = v4;
      int v21 = v3;
      unint64_t v24 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      uint64_t v4 = v23;
      unint64_t v5 = v24;
      int v3 = v21;
      a2 = v20;
      a3 = v22;
      if (v18)
      {
        unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v19 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v19;
        unint64_t v6 = 0x1E8EB8000;
        uint64_t v4 = v23;
        unint64_t v5 = v24;
        int v3 = v21;
        a2 = v20;
        a3 = v22;
      }
    }
    size_t v7 = 0;
    uint64_t v8 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
    unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v8) >> 47) ^ (0x9DDFEA08EB382D69 * v8));
    int v10 = v3 - 1;
    int v11 = 1;
    unsigned int v12 = (-348639895 * ((v9 >> 47) ^ v9)) & v10;
    size_t v13 = (void *)(v4 + 8 * v12);
    uint64_t v14 = *v13;
    if (*v13 == -8192) {
      goto LABEL_6;
    }
    while (v14 != -4096)
    {
      if (*(void *)(v14 + 8) == *a2)
      {
        uint64_t result = 1;
        *a3 = v13;
        return result;
      }
      do
      {
LABEL_6:
        if (v7) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v14 == -8192;
        }
        if (v15) {
          size_t v7 = v13;
        }
        unsigned int v16 = v12 + v11++;
        unsigned int v12 = v16 & v10;
        size_t v13 = (void *)(v4 + 8 * (v16 & v10));
        uint64_t v14 = *v13;
      }
      while (*v13 == -8192);
    }
    uint64_t result = 0;
    if (v7) {
      size_t v13 = v7;
    }
    *a3 = v13;
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::InsertIntoBucket<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v7 = *(_DWORD *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (4 * v7 + 4 >= (3 * v8))
  {
    int v12 = 2 * v8;
  }
  else
  {
    if ((int)v8 + ~v7 - *(_DWORD *)(a1 + 12) > v8 >> 3)
    {
LABEL_3:
      uint64_t v9 = *a2;
      goto LABEL_4;
    }
    int v12 = *(_DWORD *)(a1 + 16);
  }
  size_t v13 = *(uint64_t **)a1;
  unint64_t v14 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
  unint64_t v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
  int v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
  if ((v16 + 1) > 0x40) {
    unsigned int v17 = v16 + 1;
  }
  else {
    unsigned int v17 = 64;
  }
  *(_DWORD *)(a1 + 16) = v17;
  buffer = llvm::allocate_buffer(16 * v17, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v13)
  {
    unint64_t v19 = (char *)(16 * v8);
    llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::moveFromOldBuckets(a1, v13, (uint64_t *)&v19[(void)v13]);
    llvm::deallocate_buffer((llvm *)v13, v19);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v20 = *(unsigned int *)(a1 + 16);
  int v21 = buffer;
  if (((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_34;
  }
  uint64_t v22 = ((v20 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  int v21 = &buffer[2 * (v22 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v23 = buffer + 2;
  uint64_t v24 = v22 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v23 - 2) = -4096;
    *uint64_t v23 = -4096;
    v23 += 4;
    v24 -= 2;
  }
  while (v24);
  if (v22 != (v22 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *int v21 = -4096;
      v21 += 2;
    }
    while (v21 != &buffer[2 * v20]);
  }
  uint64_t v9 = *a3;
  int v25 = v20 - 1;
  unsigned int v26 = ((*a3 >> 4) ^ (*a3 >> 9)) & v25;
  a2 = &buffer[2 * v26];
  uint64_t v27 = *a2;
  if (*a3 != *a2)
  {
    int v28 = 0;
    int v29 = 1;
    while (v27 != -4096)
    {
      if (v28) {
        BOOL v30 = 0;
      }
      else {
        BOOL v30 = v27 == -8192;
      }
      if (v30) {
        int v28 = a2;
      }
      unsigned int v31 = v26 + v29++;
      unsigned int v26 = v31 & v25;
      a2 = &buffer[2 * v26];
      uint64_t v27 = *a2;
      if (v9 == *a2) {
        goto LABEL_4;
      }
    }
    if (v28) {
      a2 = v28;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v9 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  uint64_t v10 = *a4;
  *a4 = 0;
  a2[1] = v10;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>,mlir::TypeID,std::unique_ptr<mlir::DialectInterface>,llvm::DenseMapInfo<mlir::TypeID,void>,llvm::detail::DenseMapPair<mlir::TypeID,std::unique_ptr<mlir::DialectInterface>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      uint64_t v9 = v8 + 1;
      uint64_t v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      int v11 = &v7[2 * v10];
      int v12 = v7 + 2;
      uint64_t v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *int v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
    else
    {
      int v11 = *(void **)result;
    }
    unint64_t v14 = &v7[2 * v6];
    do
    {
      *int v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v16 = *(_DWORD *)(v5 + 16) - 1;
        unsigned int v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        int v18 = (void *)(*(void *)v5 + 16 * v17);
        uint64_t v19 = *v18;
        if (v15 != *v18)
        {
          int v21 = 0;
          int v22 = 1;
          while (v19 != -4096)
          {
            if (v21) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v19 == -8192;
            }
            if (v23) {
              int v21 = v18;
            }
            unsigned int v24 = v17 + v22++;
            unsigned int v17 = v24 & v16;
            int v18 = (void *)(*(void *)v5 + 16 * (v24 & v16));
            uint64_t v19 = *v18;
            if (v15 == *v18) {
              goto LABEL_15;
            }
          }
          if (v21) {
            int v18 = v21;
          }
        }
LABEL_15:
        *int v18 = v15;
        uint64_t v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(v5 + 8);
        uint64_t result = v4[1];
        v4[1] = 0;
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    unint64_t v5 = *(void *)(*(void *)a2 + 8);
    unint64_t v6 = 0x1E8EB8000uLL;
    {
      BOOL v23 = a3;
      uint64_t v21 = a2;
      uint64_t v24 = v4;
      int v22 = v3;
      unint64_t v25 = v5;
      unint64_t v6 = 0x1E8EB8000uLL;
      uint64_t v4 = v24;
      unint64_t v5 = v25;
      int v3 = v22;
      a2 = v21;
      a3 = v23;
      if (v19)
      {
        unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v20 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v20;
        unint64_t v6 = 0x1E8EB8000;
        uint64_t v4 = v24;
        unint64_t v5 = v25;
        int v3 = v22;
        a2 = v21;
        a3 = v23;
      }
    }
    uint64_t v7 = (*(void *)(v6 + 3024) + 8 * v5) ^ HIDWORD(v5);
    unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ ((0x9DDFEA08EB382D69 * v7) >> 47) ^ (0x9DDFEA08EB382D69 * v7));
    int v9 = -348639895 * ((v8 >> 47) ^ v8);
    int v10 = v3 - 1;
    unsigned int v11 = v9 & (v3 - 1);
    int v12 = (void *)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*(void *)a2 == *v12)
    {
      uint64_t result = 1;
LABEL_5:
      *a3 = v12;
    }
    else
    {
      uint64_t v15 = 0;
      int v16 = 1;
      uint64_t result = 1;
      while (v13 != -4096)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v13 == -8192;
        }
        if (v17) {
          uint64_t v15 = v12;
        }
        unsigned int v18 = v11 + v16++;
        unsigned int v11 = v18 & v10;
        int v12 = (void *)(v4 + 8 * (v18 & v10));
        uint64_t v13 = *v12;
        if (*(void *)a2 == *v12) {
          goto LABEL_5;
        }
      }
      uint64_t result = 0;
      if (v15) {
        int v12 = v15;
      }
      *a3 = v12;
    }
  }
  else
  {
    uint64_t result = 0;
    *a3 = 0;
  }
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::InsertIntoBucketImpl<mlir::DialectInterface const*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -4096) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

int64x2_t *llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  int v10 = (char *)result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3) {
        goto LABEL_10;
      }
      unint64_t v13 = v12 + 1;
      int v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      unint64_t v14 = result + 1;
      int64x2_t v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *unint64_t v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        BOOL v17 = &result->i8[8 * v11];
        do
        {
          *(void *)int v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    unsigned int v18 = (void *)(8 * v3);
    if (v3)
    {
      uint64_t v19 = 8 * v3;
      unint64_t v20 = v4;
      do
      {
        if ((*(void *)v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v28 = 0;
          llvm::DenseMapBase<llvm::DenseMap<mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>,mlir::DialectInterface const*,llvm::detail::DenseSetEmpty,mlir::detail::DialectInterfaceCollectionBase::InterfaceKeyInfo,llvm::detail::DenseSetPair<mlir::DialectInterface const*>>::LookupBucketFor<mlir::DialectInterface const*>((uint64_t *)a1, (uint64_t)v20, &v28);
          *int v28 = *(void *)v20;
          ++*(_DWORD *)(a1 + 8);
        }
        unint64_t v20 = (llvm *)((char *)v20 + 8);
        v19 -= 8;
      }
      while (v19);
    }
    llvm::deallocate_buffer(v4, v18);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v21 = *(unsigned int *)(a1 + 16);
  if (v21)
  {
    unint64_t v22 = (v21 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v22 < 3) {
      goto LABEL_23;
    }
    unint64_t v23 = v22 + 1;
    int v10 = &result->i8[8 * (v23 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v24 = result + 1;
    int64x2_t v25 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v26 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24[-1] = v25;
      *uint64_t v24 = v25;
      v24 += 2;
      v26 -= 4;
    }
    while (v26);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_23:
      uint64_t v27 = &result->i8[8 * v21];
      do
      {
        *(void *)int v10 = -4096;
        v10 += 8;
      }
      while (v10 != v27);
    }
  }
  return result;
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EC9CEE88;
  return result;
}

void std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1EC9CEE88;
}

mlir::Dialect *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::operator()(uint64_t a1, void **a2)
{
  return mlir::MLIRContext::getOrLoadDialect(*a2, (uint64_t)"builtin", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>, (uint64_t)&v3);
}

uint64_t std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir15DialectRegistry6insertINS_14BuiltinDialectEEEvvEUlPNS_11MLIRContextEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1},std::allocator<void mlir::DialectRegistry::insert<mlir::BuiltinDialect>(void)::{lambda(mlir::MLIRContext *)#1}>,mlir::Dialect * ()(mlir::MLIRContext *)>::target_type()
{
}

uint64_t **llvm::function_ref<mlir::Dialect * ()(mlir::MLIRContext *)>::callback_fn<std::function<mlir::Dialect * ()(mlir::MLIRContext *)> const>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v7);
  }
  uint64_t v4 = (uint64_t **)std::__throw_bad_function_call[abi:nn180100]();
  return std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(v4, v5, v6);
}

uint64_t **std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        int v10 = (uint64_t **)v5;
        unint64_t v13 = (const void *)v5[4];
        uint64_t v11 = v5 + 4;
        unint64_t v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          uint64_t v16 = v11;
        }
        else {
          uint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        unint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return v10;
      }
      unint64_t v5 = v10[1];
      if (!v5)
      {
        uint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    int v10 = a1 + 1;
LABEL_27:
    unint64_t v22 = operator new(0x60uLL);
    _OWORD v22[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v23 = *(void *)(a3 + 16);
    uint64_t v24 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v22 + 6) = v23;
    *((void *)v22 + 7) = v24;
    uint64_t v25 = *(void *)(a3 + 56);
    if (v25)
    {
      if (v25 == a3 + 32)
      {
        *((void *)v22 + 11) = v22 + 4;
        (*(void (**)(uint64_t))(*(void *)v25 + 24))(v25);
      }
      else
      {
        *((void *)v22 + 11) = v25;
        *(void *)(a3 + 56) = 0;
      }
    }
    else
    {
      *((void *)v22 + 11) = 0;
    }
    *(void *)unint64_t v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v10;
    *uint64_t v6 = (uint64_t *)v22;
    uint64_t v26 = (uint64_t *)**a1;
    uint64_t v27 = (uint64_t *)v22;
    if (v26)
    {
      *a1 = v26;
      uint64_t v27 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v22;
}

uint64_t *mlir::DialectResourceBlobManager::update(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)a1);
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(a1 + 16), a2, a3);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 24))
  {
    uint64_t v9 = 0;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)a1);
    uint64_t result = (uint64_t *)16;
    if (MEMORY[0x50])
    {
LABEL_4:
      return mlir::AsmResourceBlob::operator=(result, a4);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8 * Key) + 8;
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)a1);
    uint64_t result = (uint64_t *)(v9 + 16);
    if (*(unsigned char *)(v9 + 80)) {
      goto LABEL_4;
    }
  }
  long long v11 = *(_OWORD *)a4;
  result[2] = *(void *)(a4 + 16);
  *(_OWORD *)uint64_t result = v11;
  *(void *)(v9 + 64) = 0;
  uint64_t v12 = *(void *)(a4 + 48);
  *(void *)(v9 + 64) = v12;
  if (*(void *)(a4 + 48) >= 8uLL)
  {
    uint64_t result = (uint64_t *)(v9 + 40);
    unint64_t v13 = (long long *)(a4 + 24);
    if ((v12 & 2) != 0 && (v12 & 4) != 0)
    {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v13);
    }
    else
    {
      long long v14 = *v13;
      *(void *)(v9 + 56) = *(void *)(a4 + 40);
      *(_OWORD *)uint64_t result = v14;
    }
    *(void *)(a4 + 48) = 0;
  }
  *(unsigned char *)(v9 + 72) = *(unsigned char *)(a4 + 56);
  *(unsigned char *)(v9 + 80) = 1;
  return result;
}

uint64_t mlir::DialectResourceBlobManager::insert(pthread_rwlock_t **a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  void v22[4] = *MEMORY[0x1E4F143B8];
  llvm::sys::RWMutexImpl::lock(a1);
  v19[0] = a1;
  v19[1] = a4;
  uint64_t v8 = mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v19, a2, a3);
  if (v8) {
    goto LABEL_20;
  }
  int v20 = v22;
  long long v21 = xmmword_1810FE500;
  if ((unint64_t)a3 >= 0x21)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, (unint64_t)a3, 1);
    uint64_t v9 = v21;
LABEL_5:
    memcpy((char *)v20 + v9, a2, (size_t)a3);
    uint64_t v9 = v21;
    goto LABEL_6;
  }
  uint64_t v9 = 0;
  if (a3) {
    goto LABEL_5;
  }
LABEL_6:
  int v10 = &a3[v9];
  *(void *)&long long v21 = v10;
  if ((unint64_t)(v10 + 1) > *((void *)&v21 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, (unint64_t)(v10 + 1), 1);
    int v10 = (const unsigned __int8 *)v21;
  }
  v10[(void)v20] = 95;
  *(void *)&long long v21 = v21 + 1;
  unint64_t v11 = (unint64_t)(a3 + 1);
  uint64_t v12 = 1;
  while (1)
  {
    uint64_t v16 = v12;
    size_t v17 = &v16;
    __int16 v18 = 267;
    llvm::Twine::toVector((uint64_t)&v17, (uint64_t)&v20);
    uint64_t v13 = mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(v19, (int8x16_t *)v20, (const unsigned __int8 *)v21);
    if (v13) {
      break;
    }
    uint64_t v14 = v21;
    if ((void)v21 == v11)
    {
      ++v12;
    }
    else
    {
      if ((unint64_t)v21 <= v11)
      {
        if (*((void *)&v21 + 1) < v11)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v20, v22, v11, 1);
          uint64_t v14 = v21;
        }
        if (v11 != v14) {
          bzero((char *)v20 + v14, v11 - v14);
        }
      }
      *(void *)&long long v21 = v11;
      ++v12;
    }
  }
  uint64_t v8 = v13;
  if (v20 != v22) {
    free(v20);
  }
LABEL_20:
  llvm::sys::RWMutexImpl::unlock_shared(a1);
  return v8;
}

uint64_t mlir::DialectResourceBlobManager::insert(llvm::StringRef,std::optional<mlir::AsmResourceBlob>)::$_0::operator()(void *a1, int8x16_t *a2, const unsigned __int8 *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1 + 16;
  uint64_t v35 = 0;
  *(_OWORD *)uint64_t v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  unint64_t v5 = llvm::StringMap<mlir::DialectResourceBlobManager::BlobEntry,llvm::MallocAllocator>::try_emplace<mlir::DialectResourceBlobManager::BlobEntry>(v4, a2, a3, (uint64_t)&v30);
  char v7 = v6;
  if ((_BYTE)v35 && (unint64_t)v34 >= 8)
  {
    uint64_t v8 = (v34 & 2) != 0 ? (long long *)((char *)&v32 + 8) : (long long *)*((void *)&v32 + 1);
    (*(void (**)(long long *, void, void, void))(v34 & 0xFFFFFFFFFFFFFFF8))(v8, v31, *((void *)&v31 + 1), v32);
    char v9 = v34;
    if ((unint64_t)v34 >= 8)
    {
      if ((v34 & 4) != 0)
      {
        if ((v34 & 2) != 0) {
          int v10 = (char *)&v32 + 8;
        }
        else {
          int v10 = (char *)*((void *)&v32 + 1);
        }
        (*(void (**)(char *))((v34 & 0xFFFFFFFFFFFFFFF8) + 16))(v10);
      }
      if ((v9 & 2) == 0) {
        llvm::deallocate_buffer(*((llvm **)&v32 + 1), (void *)v33[0]);
      }
    }
  }
  if (!v7) {
    return 0;
  }
  unint64_t v11 = (void *)*v5;
  uint64_t v12 = *v5 + 96;
  uint64_t v13 = *(void *)*v5;
  uint64_t v14 = (long long *)a1[1];
  LOBYTE(v23) = 0;
  char v29 = 0;
  if (*((unsigned char *)v14 + 64))
  {
    uint64_t v15 = *((void *)v14 + 2);
    long long v23 = *v14;
    unint64_t v16 = *((void *)v14 + 6);
    uint64_t v24 = v15;
    unint64_t v27 = v16;
    if (v16 >= 8)
    {
      size_t v17 = (long long *)((char *)v14 + 24);
      if ((v16 & 2) != 0 && (v16 & 4) != 0)
      {
        (*(void (**)(long long *, long long *))((v16 & 0xFFFFFFFFFFFFFFF8) + 8))(&v25, v17);
      }
      else
      {
        long long v18 = *v17;
        unint64_t v26 = *((void *)v14 + 5);
        long long v25 = v18;
      }
      *((void *)v14 + 6) = 0;
    }
    char v28 = *((unsigned char *)v14 + 56);
    char v29 = 1;
  }
  v11[1] = v12;
  void v11[2] = v13;
  std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(v11 + 3, (uint64_t)&v23);
  if (v29 && v27 >= 8)
  {
    int v20 = (v27 & 2) != 0 ? &v25 : (long long *)v25;
    (*(void (**)(long long *, void, void, uint64_t))(v27 & 0xFFFFFFFFFFFFFFF8))(v20, v23, *((void *)&v23 + 1), v24);
    char v21 = v27;
    if (v27 >= 8)
    {
      if ((v27 & 4) != 0)
      {
        if ((v27 & 2) != 0) {
          unint64_t v22 = &v25;
        }
        else {
          unint64_t v22 = (long long *)v25;
        }
        (*(void (**)(long long *))((v27 & 0xFFFFFFFFFFFFFFF8) + 16))(v22);
      }
      if ((v21 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)v25, *((void **)&v25 + 1));
      }
    }
  }
  return *v5 + 8;
}

uint64_t *mlir::AsmResourceBlob::operator=(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t **)(a1 + 3);
  unint64_t v5 = a1[6];
  if (v5 >= 8)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    uint64_t v8 = a1[2];
    char v9 = a1 + 3;
    if ((v5 & 2) == 0) {
      char v9 = *v4;
    }
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFF8))(v9, v6, v7, v8);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  if (a1 != (uint64_t *)a2)
  {
    unint64_t v10 = a1[6];
    if (v10 >= 8)
    {
      if ((v10 & 4) != 0)
      {
        unint64_t v11 = (uint64_t *)v4;
        if ((v10 & 2) == 0) {
          unint64_t v11 = *v4;
        }
        (*(void (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v11);
      }
      if ((v10 & 2) == 0) {
        llvm::deallocate_buffer((llvm *)a1[3], (void *)a1[4]);
      }
    }
    a1[6] = 0;
    uint64_t v12 = *(void *)(a2 + 48);
    a1[6] = v12;
    if (*(void *)(a2 + 48) >= 8uLL)
    {
      uint64_t v13 = (long long *)(a2 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        (*(void (**)(uint64_t **, long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(v4, v13);
      }
      else
      {
        long long v14 = *v13;
        void v4[2] = *(uint64_t **)(a2 + 40);
        *(_OWORD *)uint64_t v4 = v14;
      }
      *(void *)(a2 + 48) = 0;
    }
  }
  *((unsigned char *)a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t *llvm::StringMap<mlir::DialectResourceBlobManager::BlobEntry,llvm::MallocAllocator>::try_emplace<mlir::DialectResourceBlobManager::BlobEntry>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  char v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
    uint64_t v12 = buffer + 96;
    if (!a3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (v10)
  {
    while (!v10 || v10 == -8)
    {
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v10 = v16;
    }
    return v9;
  }
  buffer = (char *)llvm::allocate_buffer((size_t)(a3 + 97), (std::align_val_t)8uLL);
  uint64_t v12 = buffer + 96;
  if (a3) {
LABEL_4:
  }
    memcpy(v12, a2, (size_t)a3);
LABEL_5:
  a3[(void)v12] = 0;
  *(void *)buffer = a3;
  *(_OWORD *)(buffer + 8) = *(_OWORD *)a4;
  buffer[24] = 0;
  buffer[88] = 0;
  if (*(unsigned char *)(a4 + 80))
  {
    *(_OWORD *)(buffer + 24) = *(_OWORD *)(a4 + 16);
    *((void *)buffer + 5) = *(void *)(a4 + 32);
    unint64_t v13 = *(void *)(a4 + 64);
    *((void *)buffer + 9) = v13;
    if (v13 >= 8)
    {
      long long v14 = buffer + 48;
      uint64_t v15 = (_OWORD *)(a4 + 40);
      if ((v13 & 2) != 0 && (v13 & 4) != 0)
      {
        (*(void (**)(_OWORD *, _OWORD *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(v14, v15);
      }
      else
      {
        *long long v14 = *v15;
        *((void *)buffer + 8) = *(void *)(a4 + 56);
      }
      *(void *)(a4 + 64) = 0;
    }
    buffer[80] = *(unsigned char *)(a4 + 72);
    buffer[88] = 1;
  }
  *char v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  char v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v17 = *v9 == -8;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    do
    {
      uint64_t v19 = v9[1];
      ++v9;
      uint64_t v18 = v19;
      if (v19) {
        BOOL v20 = v18 == -8;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (v20);
  }
  return v9;
}

uint64_t *std::__optional_storage_base<mlir::AsmResourceBlob,false>::__assign_from[abi:nn180100]<std::__optional_move_assign_base<mlir::AsmResourceBlob,false>>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result;
  if (*((unsigned __int8 *)result + 64) == *(unsigned __int8 *)(a2 + 64))
  {
    if (*((unsigned char *)result + 64))
    {
      return mlir::AsmResourceBlob::operator=(result, a2);
    }
  }
  else if (*((unsigned char *)result + 64))
  {
    unint64_t v4 = result[6];
    if (v4 >= 8)
    {
      unint64_t v5 = result + 3;
      uint64_t v6 = *result;
      uint64_t v7 = result[1];
      uint64_t v8 = result[2];
      char v9 = result + 3;
      if ((v4 & 2) == 0) {
        char v9 = (uint64_t *)*v5;
      }
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFF8))(v9, v6, v7, v8);
      unint64_t v10 = v3[6];
      if (v10 >= 8)
      {
        if ((v10 & 4) != 0)
        {
          if ((v10 & 2) == 0) {
            unint64_t v5 = (uint64_t *)*v5;
          }
          uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 16))(v5);
        }
        if ((v10 & 2) == 0) {
          llvm::deallocate_buffer((llvm *)v3[3], (void *)v3[4]);
        }
      }
    }
    *((unsigned char *)v3 + 64) = 0;
  }
  else
  {
    long long v11 = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t result = v11;
    result[6] = 0;
    uint64_t v12 = *(void *)(a2 + 48);
    result[6] = v12;
    if (*(void *)(a2 + 48) >= 8uLL)
    {
      result += 3;
      unint64_t v13 = (long long *)(a2 + 24);
      if ((v12 & 2) != 0 && (v12 & 4) != 0)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v13);
      }
      else
      {
        long long v14 = *v13;
        v3[5] = *(void *)(a2 + 40);
        *(_OWORD *)uint64_t result = v14;
      }
      *(void *)(a2 + 48) = 0;
    }
    *((unsigned char *)v3 + 56) = *(unsigned char *)(a2 + 56);
    *((unsigned char *)v3 + 64) = 1;
  }
  return result;
}

BOOL llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_10;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_10:
  long long v11 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v11)
  {
    uint64_t v12 = 0;
    if (!v4) {
      return 1;
    }
  }
  else
  {
    uint64_t v12 = v6[1];
    if (!v4) {
      return 1;
    }
  }
  unsigned int v13 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  long long v14 = (uint64_t *)(v3 + 16 * v4);
  uint64_t v15 = *v14;
  if (*v14 != a3)
  {
    int v21 = 1;
    while (v15 != -4096)
    {
      int v22 = v4 + v21++;
      uint64_t v4 = v22 & v13;
      uint64_t v15 = *(void *)(v3 + 16 * v4);
      if (v15 == a3)
      {
        long long v14 = (uint64_t *)(v3 + 16 * v4);
        if (v14 != v11) {
          goto LABEL_16;
        }
        return 1;
      }
    }
    return 1;
  }
  if (v14 == v11) {
    return 1;
  }
LABEL_16:
  uint64_t v16 = v14[1];
  if (v16 == v12 || v16 == 0) {
    return 1;
  }
  if (!v12) {
    return 0;
  }
  if (*(void *)(v16 + 8) == v12) {
    return 1;
  }
  if (*(void *)(v12 + 8) == v16) {
    return 0;
  }
  unsigned int v18 = *(_DWORD *)(v12 + 16);
  if (v18 >= *(_DWORD *)(v16 + 16)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72)) {
      return 0;
    }
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  unsigned int v19 = *(_DWORD *)(a1 + 68) + 1;
  *(_DWORD *)(a1 + 68) = v19;
  if (v19 > 0x20)
  {
    llvm::DominatorTreeBase<mlir::Block,false>::updateDFSNumbers(a1);
    if (*(_DWORD *)(v16 + 72) < *(_DWORD *)(v12 + 72)) {
      return 0;
    }
    return *(_DWORD *)(v16 + 76) <= *(_DWORD *)(v12 + 76);
  }
  do
  {
    uint64_t v20 = v16;
    uint64_t v16 = *(void *)(v16 + 8);
  }
  while (v16 && *(_DWORD *)(v16 + 16) >= v18);
  return v20 == v12;
}

void llvm::DominatorTreeBase<mlir::Block,false>::updateDFSNumbers(uint64_t a1)
{
  v18[64] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    uint64_t v15 = v18;
    unsigned int v17 = 32;
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      v18[0] = *(void *)(a1 + 48);
      v18[1] = v3;
      int v4 = 1;
      unsigned int v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      unsigned int v5 = 1;
      do
      {
        while (1)
        {
          uint64_t v6 = (char *)v15;
          uint64_t v7 = v5;
          int v8 = (char *)v15 + 16 * v5;
          uint64_t v10 = *((void *)v8 - 2);
          int v9 = (uint64_t *)*((void *)v8 - 1);
          if (v9 != (uint64_t *)(*(void *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32))) {
            break;
          }
          *(_DWORD *)(v10 + 76) = v4;
          unsigned int v5 = v7 - 1;
          unsigned int v16 = v7 - 1;
          ++v4;
          if (v7 == 1) {
            goto LABEL_11;
          }
        }
        uint64_t v11 = *v9;
        *((void *)v8 - 1) = v9 + 1;
        uint64_t v12 = *(void *)(v11 + 24);
        if (v7 >= v17)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v18, v7 + 1, 16);
          uint64_t v7 = v16;
          uint64_t v6 = (char *)v15;
        }
        unsigned int v13 = &v6[16 * v7];
        *(void *)unsigned int v13 = v11;
        *((void *)v13 + 1) = v12;
        unsigned int v5 = ++v16;
        *(_DWORD *)(v11 + 72) = v4++;
      }
      while (v5);
LABEL_11:
      long long v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(unsigned char *)(a1 + 64) = 1;
      if (v14 != v18) {
        free(v14);
      }
    }
  }
}

uint64_t llvm::DominatorTreeBase<mlir::Block,false>::createChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v6 = operator new(0x50uLL);
  uint64_t v7 = v6;
  *uint64_t v6 = a2;
  v6[1] = a3;
  if (a3) {
    int v8 = *(_DWORD *)(a3 + 16) + 1;
  }
  else {
    int v8 = 0;
  }
  *((_DWORD *)v6 + 4) = v8;
  v6[3] = v6 + 5;
  v6[4] = 0x400000000;
  v6[9] = -1;
  uint64_t v9 = *(unsigned int *)(a3 + 32);
  if (v9 >= *(_DWORD *)(a3 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a3 + 32);
  }
  *(void *)(*(void *)(a3 + 24) + 8 * v9) = v7;
  ++*(_DWORD *)(a3 + 32);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v11 = a1 + 24;
  uint64_t v10 = v12;
  int v13 = *(_DWORD *)(v11 + 16);
  if (v13)
  {
    int v14 = v13 - 1;
    unsigned int v15 = ((a2 >> 4) ^ (a2 >> 9)) & v14;
    unsigned int v16 = (uint64_t *)(v10 + 16 * v15);
    uint64_t v17 = *v16;
    if (*v16 == a2) {
      goto LABEL_19;
    }
    unsigned int v18 = 0;
    int v19 = 1;
    while (v17 != -4096)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -8192;
      }
      if (v20) {
        unsigned int v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      unsigned int v16 = (uint64_t *)(v10 + 16 * v15);
      uint64_t v17 = *v16;
      if (*v16 == a2) {
        goto LABEL_19;
      }
    }
    if (v18) {
      int v22 = v18;
    }
    else {
      int v22 = v16;
    }
  }
  else
  {
    int v22 = 0;
  }
  unsigned int v16 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(v11, v22, &v26);
LABEL_19:
  long long v23 = (void *)v16[1];
  v16[1] = (uint64_t)v7;
  if (v23)
  {
    uint64_t v24 = (void *)v23[3];
    if (v24 != v23 + 5) {
      free(v24);
    }
    operator delete(v23);
    return v16[1];
  }
  return (uint64_t)v7;
}

void *llvm::DominatorTreeBase<mlir::Block,false>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a2;
  int v4 = operator new(0x50uLL);
  void *v4 = a2;
  v4[1] = 0;
  *((_DWORD *)v4 + 4) = 0;
  v4[3] = v4 + 5;
  v4[4] = 0x400000000;
  v4[9] = -1;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = a1 + 24;
  uint64_t v5 = v7;
  int v8 = *(_DWORD *)(v6 + 16);
  if (v8)
  {
    int v9 = v8 - 1;
    unsigned int v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v11 = (uint64_t *)(v5 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 == a2) {
      goto LABEL_14;
    }
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (uint64_t *)(v5 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 == a2) {
        goto LABEL_14;
      }
    }
    if (v13) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v11;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(v6, v17, &v21);
LABEL_14:
  unsigned int v18 = (void *)v11[1];
  v11[1] = (uint64_t)v4;
  if (v18)
  {
    int v19 = (void *)v18[3];
    if (v19 != v18 + 5) {
      free(v19);
    }
    operator delete(v18);
    return (void *)v11[1];
  }
  return v4;
}

void llvm::DominatorTreeBase<mlir::Block,false>::reset(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 || *(_DWORD *)(a1 + 36))
  {
    uint64_t v3 = (_DWORD *)(a1 + 24);
    uint64_t v4 = *(unsigned int *)(a1 + 40);
    if (v4 > 4 * v2 && v4 >= 0x41)
    {
      llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::shrink_and_clear(v3);
      goto LABEL_17;
    }
    if (!v4)
    {
LABEL_16:
      *(void *)(a1 + 32) = 0;
      goto LABEL_17;
    }
    uint64_t v5 = (void **)(*(void *)v3 + 8);
    uint64_t v6 = 16 * v4;
    while (1)
    {
      uint64_t v7 = (uint64_t)*(v5 - 1);
      if (v7 != -8192)
      {
        if (v7 == -4096) {
          goto LABEL_10;
        }
        int v8 = *v5;
        uint64_t *v5 = 0;
        if (v8)
        {
          int v9 = (void *)v8[3];
          if (v9 != v8 + 5) {
            free(v9);
          }
          operator delete(v8);
        }
      }
      *(v5 - 1) = (void *)-4096;
LABEL_10:
      v5 += 2;
      v6 -= 16;
      if (!v6) {
        goto LABEL_16;
      }
    }
  }
LABEL_17:
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
}

void mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(llvm **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v2)
  {
    uint64_t v5 = v3;
    if (v4)
    {
      uint64_t v6 = 0;
      while ((*(void *)((char *)v3 + v6) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        if (16 * v4 == v6) {
          goto LABEL_25;
        }
      }
      uint64_t v5 = (llvm *)((char *)v3 + v6);
    }
    uint64_t v7 = (llvm *)((char *)v3 + 16 * v4);
    if (v5 != v7)
    {
      do
      {
        unint64_t v8 = *((void *)v5 + 1) & 0xFFFFFFFFFFFFFFF8;
        if (v8)
        {
          uint64_t v9 = *(unsigned int *)(v8 + 40);
          unsigned int v10 = *(llvm **)(v8 + 24);
          if (v9)
          {
            uint64_t v11 = (void **)((char *)v10 + 8);
            uint64_t v12 = 16 * v9;
            while (1)
            {
              if (((unint64_t)*(v11 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                int v13 = *v11;
                *uint64_t v11 = 0;
                if (v13)
                {
                  int v14 = (void *)v13[3];
                  if (v14 != v13 + 5) {
                    free(v14);
                  }
                  operator delete(v13);
                }
              }
              v11 += 2;
              v12 -= 16;
              if (!v12) {
                llvm::deallocate_buffer(*(llvm **)(v8 + 24), (void *)(16 * *(unsigned int *)(v8 + 40)));
              }
            }
          }
          llvm::deallocate_buffer(v10, 0);
        }
        do
        {
          uint64_t v5 = (llvm *)((char *)v5 + 16);
          if (v5 == v7) {
            goto LABEL_24;
          }
        }
        while ((*(void *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000);
      }
      while (v5 != v7);
LABEL_24:
      uint64_t v3 = *(llvm **)a1;
      uint64_t v4 = *(unsigned int *)(a1 + 16);
    }
  }
LABEL_25:
  llvm::deallocate_buffer(v3, (void *)(16 * v4));
}

uint64_t sub_18048A088()
{
  return v0;
}

unint64_t mlir::detail::DominanceInfoBase<false>::getDominanceInfo(uint64_t a1, void *a2, int a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  if (!v5) {
    goto LABEL_35;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v8 = (void *)(*(void *)a1 + 16 * v7);
  uint64_t v9 = (void *)*v8;
  if ((void *)*v8 == a2)
  {
LABEL_3:
    uint64_t v10 = v6 + 16 * v7 + 8;
    if (!a3 || *(void *)v10 > 7uLL || (void *)*a2 != a2 && *(void **)(a2[1] + 8) == a2) {
      return *(void *)v10;
    }
LABEL_14:
    int v13 = operator new(0x48uLL);
    void v13[2] = 0u;
    _OWORD v13[3] = 0u;
    *((void *)v13 + 7) = a2;
    *((void *)v13 + 8) = 0;
    v13[1] = 0u;
    *(void *)int v13 = v13 + 1;
    *((void *)v13 + 1) = 0x100000000;
    *((void *)v13 + 3) = 0;
    *((void *)v13 + 4) = 0;
    *((_DWORD *)v13 + 10) = 0;
    *((unsigned char *)v13 + 64) = 0;
    *((void *)v13 + 6) = 0;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::CalculateFromScratch((uint64_t)v13, 0);
  }
  BOOL v20 = 0;
  int v21 = 1;
  while (v9 != (void *)-4096)
  {
    if (v20) {
      BOOL v22 = 0;
    }
    else {
      BOOL v22 = v9 == (void *)-8192;
    }
    if (v22) {
      BOOL v20 = v8;
    }
    int v23 = v7 + v21++;
    uint64_t v7 = v23 & (v5 - 1);
    unint64_t v8 = (void *)(v6 + 16 * v7);
    uint64_t v9 = (void *)*v8;
    if ((void *)*v8 == a2) {
      goto LABEL_3;
    }
  }
  uint64_t v24 = v20 ? v20 : v8;
  int v25 = *(_DWORD *)(a1 + 8);
  if (4 * v25 + 4 < 3 * v5)
  {
    if (v5 + ~v25 - *(_DWORD *)(a1 + 12) > v5 >> 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_35:
    v5 *= 2;
  }
  llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow(a1, v5);
  int v26 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v24 = (void *)(*(void *)a1 + 16 * v27);
  char v28 = (void *)*v24;
  if ((void *)*v24 != a2)
  {
    char v29 = 0;
    int v30 = 1;
    while (v28 != (void *)-4096)
    {
      if (v29) {
        BOOL v31 = 0;
      }
      else {
        BOOL v31 = v28 == (void *)-8192;
      }
      if (v31) {
        char v29 = v24;
      }
      unsigned int v32 = v27 + v30++;
      unsigned int v27 = v32 & v26;
      uint64_t v24 = (void *)(*(void *)a1 + 16 * v27);
      char v28 = (void *)*v24;
      if ((void *)*v24 == a2) {
        goto LABEL_37;
      }
    }
    if (v29) {
      uint64_t v24 = v29;
    }
LABEL_10:
    uint64_t v12 = *v24;
    ++*(_DWORD *)(a1 + 8);
    if (v12 == -4096) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_37:
  ++*(_DWORD *)(a1 + 8);
  if (a2 != (void *)-4096) {
LABEL_11:
  }
    --*(_DWORD *)(a1 + 12);
LABEL_12:
  *uint64_t v24 = a2;
  v24[1] = 4;
  uint64_t v10 = (uint64_t)(v24 + 1);
  if ((void *)*a2 == a2 || *(void **)(a2[1] + 8) != a2) {
    goto LABEL_14;
  }
  uint64_t v14 = a2[2];
  if (!v14) {
    return *(void *)v10;
  }
  if (*(_UNKNOWN **)(*(void *)(v14 + 48) + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    *(void *)uint64_t v10 = 0;
    return 0;
  }
  v33[0] = llvm::DefaultDoCastIfPossible<mlir::RegionKindInterface,mlir::Operation *,llvm::CastInfo<mlir::RegionKindInterface,mlir::Operation *,void>>::doCastIfPossible(v14);
  v33[1] = v15;
  if (!v33[0]) {
    return *(void *)v10;
  }
  uint64_t RegionNumber = mlir::Region::getRegionNumber((unint64_t)a2);
  int hasSSADominance = mlir::RegionKindInterface::hasSSADominance((mlir::RegionKindInterface *)v33, RegionNumber);
  uint64_t v18 = 4;
  if (!hasSSADominance) {
    uint64_t v18 = 0;
  }
  unint64_t v19 = *(void *)v10 & 0xFFFFFFFFFFFFFFFBLL | v18;
  *(void *)uint64_t v10 = v19;
  return v19;
}

BOOL mlir::detail::DominanceInfoBase<false>::isReachableFromEntry(uint64_t a1, mlir::Block *this)
{
  Parent = (void *)mlir::Block::getParent(this);
  uint64_t v5 = Parent[1];
  if (v5) {
    uint64_t v6 = (mlir::Block *)(v5 - 8);
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 == this) {
    return 1;
  }
  unint64_t DominanceInfo = mlir::detail::DominanceInfoBase<false>::getDominanceInfo(a1, Parent, 1);
  uint64_t v8 = *(void *)((DominanceInfo & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v9 = *(unsigned int *)((DominanceInfo & 0xFFFFFFFFFFFFFFF8) + 40);
  if (v9)
  {
    LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v11 = v8 + 16 * v10;
    uint64_t v12 = *(mlir::Block **)v11;
    if (*(mlir::Block **)v11 == this) {
      return v11 != v8 + 16 * v9 && *(void *)(v11 + 8) != 0;
    }
    int v13 = 1;
    while (v12 != (mlir::Block *)-4096)
    {
      int v14 = v10 + v13++;
      uint64_t v10 = v14 & (v9 - 1);
      uint64_t v12 = *(mlir::Block **)(v8 + 16 * v10);
      if (v12 == this)
      {
        uint64_t v11 = v8 + 16 * v10;
        return v11 != v8 + 16 * v9 && *(void *)(v11 + 8) != 0;
      }
    }
  }
  uint64_t v11 = v8 + 16 * v9;
  return v11 != v8 + 16 * v9 && *(void *)(v11 + 8) != 0;
}

uint64_t mlir::DominanceInfo::properlyDominatesImpl(mlir::DominanceInfo *this, mlir::Block **a2, mlir::Block **a3, char a4)
{
  uint64_t v5 = a2[2];
  if (a2 == a3)
  {
    Parent = (void *)mlir::Block::getParent(a2[2]);
    return (mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, Parent, 0) & 4) == 0;
  }
  uint64_t v7 = (mlir::Operation *)a3;
  uint64_t v9 = a3[2];
  uint64_t v10 = (mlir::Region *)mlir::Block::getParent(a2[2]);
  if (v10 == (mlir::Region *)mlir::Block::getParent(v9))
  {
LABEL_10:
    if (v5 == v9)
    {
      int v14 = (void *)mlir::Block::getParent(v5);
      if ((mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, v14, 0) & 4) != 0)
      {
        return mlir::Operation::isBeforeInBlock(a2, v7);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      unint64_t v13 = mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)this, v10, 1) & 0xFFFFFFFFFFFFFFF8;
      return llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(v13, (uint64_t)v5, (uint64_t)v9);
    }
  }
  if (!v10) {
    return 0;
  }
  uint64_t result = (uint64_t)mlir::Region::findAncestorOpInRegion(v10, v7);
  if (result)
  {
    uint64_t v7 = (mlir::Operation *)result;
    uint64_t v9 = *(mlir::Block **)(result + 16);
    if (mlir::Block **)result == a2 && (a4) {
      return 1;
    }
    goto LABEL_10;
  }
  return result;
}

uint64_t mlir::DominanceInfo::properlyDominates(mlir::DominanceInfo *a1, uint64_t a2, mlir::Block **a3)
{
  uint64_t v11 = a2;
  if (!a2 || (*(void *)(a2 + 8) & 7) != 7)
  {
    DefiningOp = (mlir::Block **)mlir::Value::getDefiningOp((mlir::Value *)&v11);
    return mlir::DominanceInfo::properlyDominatesImpl(a1, DefiningOp, a3, 0);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = a3[2];
  if ((mlir::Block *)v5 == v6) {
    return 1;
  }
  Parent = (mlir::Region *)mlir::Block::getParent(*(mlir::Block **)(a2 + 16));
  if (Parent == (mlir::Region *)mlir::Block::getParent(v6))
  {
LABEL_8:
    unint64_t v9 = mlir::detail::DominanceInfoBase<false>::getDominanceInfo((uint64_t)a1, Parent, 1) & 0xFFFFFFFFFFFFFFF8;
    return llvm::DominatorTreeBase<mlir::Block,false>::properlyDominates(v9, v5, (uint64_t)v6);
  }
  if (!Parent) {
    return 0;
  }
  uint64_t result = (uint64_t)mlir::Region::findAncestorBlockInRegion(Parent, v6);
  if (result)
  {
    uint64_t v6 = (mlir::Block *)result;
    if (result != v5) {
      goto LABEL_8;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::RegionKindInterface,mlir::Operation *,llvm::CastInfo<mlir::RegionKindInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::RegionKindInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::RegionKindInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::RegionKindInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  unint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::RegionKindInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::RegionKindInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::RegionKindInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      unint64_t v17 = 75;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      unint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3840), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::RegionKindInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionKindInterface]";
      unint64_t v22 = 75;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::RegionKindInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3840);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::CalculateFromScratch(uint64_t a1, uint64_t a2)
{
  v33[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  llvm::DominatorTreeBase<mlir::Block,false>::reset(a1);
  *(void *)(a1 + 56) = v4;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (!v5)
    {
      uint64_t v7 = 0;
      goto LABEL_23;
    }
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = a2;
    if (v5 == v6) {
      goto LABEL_23;
    }
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(*(void *)(a2 + 8), *(_DWORD **)(a2 + 16));
    llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(v6 + 296, (_DWORD *)(v5 + 296));
    *(unsigned char *)(v6 + 592) = *(unsigned char *)(v5 + 592);
    unint64_t v8 = (void **)(v6 + 600);
    unint64_t v9 = *(unsigned int *)(v5 + 608);
    uint64_t v10 = *(unsigned int *)(v6 + 608);
    if (v10 >= v9)
    {
      if (v9) {
        memmove(*v8, *(const void **)(v5 + 600), 16 * v9);
      }
      goto LABEL_22;
    }
    if (*(_DWORD *)(v6 + 612) >= v9)
    {
      if (v10)
      {
        memmove(*v8, *(const void **)(v5 + 600), 16 * v10);
        uint64_t v11 = *(unsigned int *)(v5 + 608);
        if (v10 == v11)
        {
LABEL_22:
          *(_DWORD *)(v6 + 608) = v9;
          uint64_t v4 = *(void *)(a1 + 56);
          uint64_t v7 = a2;
LABEL_23:
          unint64_t v16 = operator new(8uLL);
          std::string __p = v16;
          *unint64_t v16 = 0;
          int v25 = v16 + 1;
          int v26 = v16 + 1;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = v7;
          __src = v33;
          uint64_t v17 = *(void *)(v4 + 8);
          if (v17) {
            uint64_t v18 = v17 - 8;
          }
          else {
            uint64_t v18 = 0;
          }
          v33[0] = v18;
          uint64_t v32 = 0x100000001;
          if (&__src == (void **)a1) {
            goto LABEL_35;
          }
          if (*(_DWORD *)(a1 + 8))
          {
            **(void **)a1 = v18;
            goto LABEL_33;
          }
          if (*(_DWORD *)(a1 + 12))
          {
            unsigned int v19 = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
            unsigned int v19 = v32;
            if (!v32) {
              goto LABEL_33;
            }
          }
          memcpy(*(void **)a1, __src, 8 * v19);
LABEL_33:
          *(_DWORD *)(a1 + 8) = 1;
          LODWORD(v32) = 0;
          if (__src != v33) {
            free(__src);
          }
LABEL_35:
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>((uint64_t)&__p, **(void **)a1, 0, (unsigned int (*)(mlir::Block *))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend, 0, 0);
          llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
          *(unsigned char *)a2 = 1;
          if (!*(_DWORD *)(a1 + 8)) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(unsigned int *)(v5 + 608);
        if (!*(_DWORD *)(v5 + 608)) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      *(_DWORD *)(v6 + 608) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 600, (void *)(v6 + 616), v9, 16);
      uint64_t v10 = 0;
      uint64_t v11 = *(unsigned int *)(v5 + 608);
      if (!*(_DWORD *)(v5 + 608)) {
        goto LABEL_22;
      }
    }
    memcpy((char *)*v8 + 16 * v10, (const void *)(*(void *)(v5 + 600) + 16 * v10), 16 * v11 - 16 * v10);
    goto LABEL_22;
  }
  int v12 = operator new(8uLL);
  std::string __p = v12;
  *int v12 = 0;
  int v25 = v12 + 1;
  int v26 = v12 + 1;
  unsigned int v27 = 0;
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  uint64_t v30 = 0;
  __src = v33;
  uint64_t v13 = *(void *)(v4 + 8);
  if (v13) {
    uint64_t v14 = v13 - 8;
  }
  else {
    uint64_t v14 = 0;
  }
  v33[0] = v14;
  uint64_t v32 = 0x100000001;
  if (&__src == (void **)a1)
  {
LABEL_49:
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>((uint64_t)&__p, **(void **)a1, 0, (unsigned int (*)(mlir::Block *))llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend, 0, 0);
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA((uint64_t)&__p, a1, 0);
    if (!*(_DWORD *)(a1 + 8))
    {
LABEL_37:
      if (v29)
      {
        int v21 = (char *)v27 + 56;
        uint64_t v22 = 72 * v29;
        while (1)
        {
          if ((*((void *)v21 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            int v23 = (char *)*((void *)v21 - 2);
            if (v21 != v23) {
              free(v23);
            }
          }
          v21 += 72;
          v22 -= 72;
          if (!v22) {
            llvm::deallocate_buffer(v27, (void *)(72 * v29));
          }
        }
      }
      llvm::deallocate_buffer(v27, 0);
    }
LABEL_36:
    Node = llvm::DominatorTreeBase<mlir::Block,false>::createNode(a1, **(void **)a1);
    *(void *)(a1 + 48) = Node;
    llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::attachNewSubtree((uint64_t)&__p, a1, Node);
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 8))
  {
    **(void **)a1 = v14;
    goto LABEL_47;
  }
  if (*(_DWORD *)(a1 + 12))
  {
    unsigned int v15 = 1;
  }
  else
  {
    *(_DWORD *)(a1 + 8) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), 1uLL, 8);
    unsigned int v15 = v32;
    if (!v32) {
      goto LABEL_47;
    }
  }
  memcpy(*(void **)a1, __src, 8 * v15);
LABEL_47:
  *(_DWORD *)(a1 + 8) = 1;
  LODWORD(v32) = 0;
  if (__src != v33) {
    free(__src);
  }
  goto LABEL_49;
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runSemiNCA(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v185[32] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a1;
  unint64_t v177 = *(void *)(a1 + 8) - *(void *)a1;
  unint64_t v178 = v177 >> 3;
  if ((v177 >> 3) >= 2)
  {
    uint64_t v7 = 1;
    while (1)
    {
      v184[0] = 0;
      uint64_t v13 = *(void **)(v6 + 8 * v7);
      v184[0] = v13;
      int v14 = *(_DWORD *)(a1 + 40);
      if (!v14) {
        break;
      }
      uint64_t v8 = *(void *)(a1 + 24);
      int v9 = v14 - 1;
      unsigned int v10 = ((v13 >> 4) ^ (v13 >> 9)) & v9;
      uint64_t v11 = (char *)(v8 + 72 * v10);
      uint64_t v12 = *(void *)v11;
      if (v13 != *(void **)v11)
      {
        unint64_t v16 = 0;
        int v17 = 1;
        while (v12 != -4096)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v12 == -8192;
          }
          if (v18) {
            unint64_t v16 = v11;
          }
          unsigned int v19 = v10 + v17++;
          unsigned int v10 = v19 & v9;
          uint64_t v11 = (char *)(v8 + 72 * v10);
          uint64_t v12 = *(void *)v11;
          if (v13 == *(void **)v11) {
            goto LABEL_4;
          }
        }
        if (v16) {
          unsigned int v15 = v16;
        }
        else {
          unsigned int v15 = v11;
        }
        goto LABEL_7;
      }
LABEL_4:
      *((void *)v11 + 4) = *(void *)(v6 + 8 * *((unsigned int *)v11 + 3));
      if (++v7 == (v177 >> 3)) {
        goto LABEL_20;
      }
    }
    unsigned int v15 = 0;
LABEL_7:
    uint64_t v11 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(a1 + 24, v15, (uint64_t *)v184);
    uint64_t v6 = *(void *)a1;
    goto LABEL_4;
  }
LABEL_20:
  v184[0] = v185;
  v184[1] = (void *)0x2000000000;
  uint64_t v20 = (v178 - 1);
  if (v20 < 2) {
    goto LABEL_233;
  }
  uint64_t v179 = a1 + 24;
  unsigned int v21 = v177 >> 3;
  do
  {
    uint64_t v180 = v20;
    uint64_t v183 = 0;
    uint64_t v22 = *(void *)(*(void *)a1 + 8 * v20);
    uint64_t v183 = v22;
    int v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 24);
      int v25 = v23 - 1;
      unsigned int v26 = ((v22 >> 4) ^ (v22 >> 9)) & v25;
      unsigned int v27 = (char *)(v24 + 72 * v26);
      uint64_t v28 = *(void *)v27;
      if (v22 == *(void *)v27) {
        goto LABEL_36;
      }
      unsigned int v29 = 0;
      int v30 = 1;
      while (v28 != -4096)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -8192;
        }
        if (v31) {
          unsigned int v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        unsigned int v27 = (char *)(v24 + 72 * v26);
        uint64_t v28 = *(void *)v27;
        if (v22 == *(void *)v27) {
          goto LABEL_36;
        }
      }
      if (v29) {
        uint64_t v33 = v29;
      }
      else {
        uint64_t v33 = v27;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    unsigned int v27 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v33, &v183);
LABEL_36:
    *((_DWORD *)v27 + 4) = *((_DWORD *)v27 + 3);
    uint64_t v34 = *((unsigned int *)v27 + 12);
    if (v34)
    {
      uint64_t v35 = (uint64_t *)*((void *)v27 + 5);
      uint64_t v36 = &v35[v34];
      while (1)
      {
        uint64_t v37 = *v35;
        uint64_t v38 = *(void *)(a2 + 24);
        uint64_t v39 = *(unsigned int *)(a2 + 40);
        if (!v39) {
          goto LABEL_45;
        }
        LODWORD(v40) = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
        uint64_t v41 = (uint64_t *)(v38 + 16 * v40);
        uint64_t v42 = *v41;
        if (*v41 != v37) {
          break;
        }
LABEL_46:
        if (v41 == (uint64_t *)(v38 + 16 * v39) || (uint64_t v45 = v41[1]) == 0 || *(_DWORD *)(v45 + 16) >= a3)
        {
          uint64_t v46 = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::eval(a1, v37, v21, (uint64_t)v184);
          uint64_t v47 = v46;
          uint64_t v48 = *(uint64_t **)(a1 + 24);
          uint64_t v49 = *(unsigned int *)(a1 + 40);
          if (!v49) {
            goto LABEL_70;
          }
          int v50 = v49 - 1;
          unsigned int v51 = ((v46 >> 4) ^ (v46 >> 9)) & (v49 - 1);
          BOOL v52 = &v48[9 * v51];
          uint64_t v53 = *v52;
          if (v46 != *v52)
          {
            uint64_t v54 = 0;
            int v55 = 1;
            while (v53 != -4096)
            {
              if (v54) {
                BOOL v56 = 0;
              }
              else {
                BOOL v56 = v53 == -8192;
              }
              if (v56) {
                uint64_t v54 = v52;
              }
              unsigned int v57 = v51 + v55++;
              unsigned int v51 = v57 & v50;
              BOOL v52 = &v48[9 * (v57 & v50)];
              uint64_t v53 = *v52;
              if (v46 == *v52) {
                goto LABEL_65;
              }
            }
            if (v54) {
              BOOL v52 = v54;
            }
            int v60 = *(_DWORD *)(a1 + 32);
            if (4 * v60 + 4 >= (3 * v49))
            {
LABEL_70:
              int v61 = 2 * v49;
              goto LABEL_72;
            }
            if ((int)v49 + ~v60 - *(_DWORD *)(a1 + 36) <= v49 >> 3)
            {
              int v61 = *(_DWORD *)(a1 + 40);
LABEL_72:
              unint64_t v62 = (v61 - 1) | ((unint64_t)(v61 - 1) >> 1);
              unint64_t v63 = v62 | (v62 >> 2) | ((v62 | (v62 >> 2)) >> 4);
              int v64 = ((v63 | (v63 >> 8)) >> 16) | v63 | (v63 >> 8);
              if ((v64 + 1) > 0x40) {
                unsigned int v65 = v64 + 1;
              }
              else {
                unsigned int v65 = 64;
              }
              *(_DWORD *)(a1 + 40) = v65;
              buffer = llvm::allocate_buffer(72 * v65, (std::align_val_t)8uLL);
              *(void *)(a1 + 24) = buffer;
              if (v48)
              {
                uint64_t v67 = 9 * v49;
                llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v48, &v48[v67]);
                llvm::deallocate_buffer((llvm *)v48, (void *)(v67 * 8));
              }
              *(void *)(a1 + 32) = 0;
              uint64_t v68 = *(unsigned int *)(a1 + 40);
              unint64_t v69 = 72 * v68 - 72;
              uint64_t v70 = buffer;
              if (v69 < 0x48) {
                goto LABEL_237;
              }
              unint64_t v71 = v69 / 0x48 + 1;
              uint64_t v70 = &buffer[9 * (v71 & 0x7FFFFFFFFFFFFFELL)];
              uint64_t v72 = v71 & 0x7FFFFFFFFFFFFFELL;
              uint64_t v73 = buffer;
              do
              {
                void *v73 = -4096;
                v73[9] = -4096;
                v73 += 18;
                v72 -= 2;
              }
              while (v72);
              if (v71 != (v71 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_237:
                do
                {
                  *uint64_t v70 = -4096;
                  v70 += 9;
                }
                while (v70 != &buffer[9 * v68]);
              }
              int v74 = v68 - 1;
              unsigned int v75 = (v68 - 1) & ((v47 >> 4) ^ (v47 >> 9));
              BOOL v52 = &buffer[9 * v75];
              uint64_t v76 = *v52;
              if (v47 == *v52)
              {
LABEL_83:
                ++*(_DWORD *)(a1 + 32);
                if (v47 == -4096) {
                  goto LABEL_64;
                }
              }
              else
              {
                unsigned int v77 = 0;
                int v78 = 1;
                while (v76 != -4096)
                {
                  if (v77) {
                    BOOL v79 = 0;
                  }
                  else {
                    BOOL v79 = v76 == -8192;
                  }
                  if (v79) {
                    unsigned int v77 = v52;
                  }
                  unsigned int v80 = v75 + v78++;
                  unsigned int v75 = v80 & v74;
                  BOOL v52 = &buffer[9 * (v80 & v74)];
                  uint64_t v76 = *v52;
                  if (v47 == *v52) {
                    goto LABEL_83;
                  }
                }
                if (v77) {
                  BOOL v52 = v77;
                }
                uint64_t v81 = *v52;
                ++*(_DWORD *)(a1 + 32);
                if (v81 == -4096) {
                  goto LABEL_64;
                }
              }
LABEL_63:
              --*(_DWORD *)(a1 + 36);
              goto LABEL_64;
            }
            uint64_t v58 = *v52;
            ++*(_DWORD *)(a1 + 32);
            if (v58 != -4096) {
              goto LABEL_63;
            }
LABEL_64:
            *BOOL v52 = v47;
            *(_OWORD *)(v52 + 5) = 0u;
            *(_OWORD *)(v52 + 1) = 0u;
            *(_OWORD *)(v52 + 3) = 0u;
            *(_OWORD *)(v52 + 7) = 0u;
            v52[5] = (uint64_t)(v52 + 7);
            *((_DWORD *)v52 + 13) = 2;
          }
LABEL_65:
          unsigned int v59 = *((_DWORD *)v52 + 4);
          if (v59 < *((_DWORD *)v27 + 4)) {
            *((_DWORD *)v27 + 4) = v59;
          }
        }
        if (++v35 == v36) {
          goto LABEL_22;
        }
      }
      int v43 = 1;
      while (v42 != -4096)
      {
        int v44 = v40 + v43++;
        uint64_t v40 = v44 & (v39 - 1);
        uint64_t v42 = *(void *)(v38 + 16 * v40);
        if (v42 == v37)
        {
          uint64_t v41 = (uint64_t *)(v38 + 16 * v40);
          goto LABEL_46;
        }
      }
LABEL_45:
      uint64_t v41 = (uint64_t *)(v38 + 16 * v39);
      goto LABEL_46;
    }
LABEL_22:
    unsigned int v21 = v180;
    uint64_t v20 = v180 - 1;
  }
  while (((v180 - 1) & 0xFFFFFFFELL) != 0);
  if (v178 >= 3)
  {
    uint64_t v82 = (v177 >> 3);
    long long v83 = 0uLL;
    for (uint64_t i = 2; i != v82; ++i)
    {
      uint64_t v183 = 0;
      uint64_t v85 = *(void *)a1;
      uint64_t v86 = *(void *)(*(void *)a1 + 8 * i);
      uint64_t v183 = v86;
      int v87 = *(_DWORD *)(a1 + 40);
      if (v87)
      {
        uint64_t v88 = *(void *)(a1 + 24);
        unsigned int v89 = ((v86 >> 4) ^ (v86 >> 9)) & (v87 - 1);
        char v90 = (char *)(v88 + 72 * v89);
        uint64_t v91 = *(void *)v90;
        if (v86 == *(void *)v90)
        {
          unint64_t v92 = (uint64_t *)(v85 + 8 * *((unsigned int *)v90 + 4));
          goto LABEL_111;
        }
        uint64_t v93 = v82;
        v173 = 0;
        int v174 = 1;
        while (v91 != -4096)
        {
          if (v173) {
            BOOL v175 = 0;
          }
          else {
            BOOL v175 = v91 == -8192;
          }
          if (v175) {
            v173 = v90;
          }
          unsigned int v176 = v89 + v174++;
          unsigned int v89 = v176 & (v87 - 1);
          char v90 = (char *)(v88 + 72 * v89);
          uint64_t v91 = *(void *)v90;
          if (v86 == *(void *)v90) {
            goto LABEL_109;
          }
        }
        if (v173) {
          char v94 = v173;
        }
        else {
          char v94 = v90;
        }
      }
      else
      {
        uint64_t v93 = v82;
        char v94 = 0;
      }
      char v90 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v94, &v183);
      uint64_t v85 = *(void *)a1;
      uint64_t v88 = *(void *)(a1 + 24);
      int v87 = *(_DWORD *)(a1 + 40);
LABEL_109:
      unint64_t v92 = (uint64_t *)(v85 + 8 * *((unsigned int *)v90 + 4));
      if (!v87)
      {
        v168 = 0;
LABEL_208:
        v97 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v179, v168, v92);
        uint64_t v82 = v93;
        long long v83 = 0uLL;
        goto LABEL_112;
      }
      uint64_t v82 = v93;
      long long v83 = 0uLL;
LABEL_111:
      int v95 = v87 - 1;
      unsigned int v96 = ((*v92 >> 4) ^ (*v92 >> 9)) & v95;
      v97 = (char *)(v88 + 72 * v96);
      uint64_t v98 = *(void *)v97;
      if (*v92 != *(void *)v97)
      {
        uint64_t v93 = v82;
        v169 = 0;
        int v170 = 1;
        while (v98 != -4096)
        {
          if (v169) {
            BOOL v171 = 0;
          }
          else {
            BOOL v171 = v98 == -8192;
          }
          if (v171) {
            v169 = v97;
          }
          unsigned int v172 = v96 + v170++;
          unsigned int v96 = v172 & v95;
          v97 = (char *)(v88 + 72 * v96);
          uint64_t v98 = *(void *)v97;
          long long v83 = 0uLL;
          if (*v92 == *(void *)v97)
          {
            uint64_t v82 = v93;
            goto LABEL_112;
          }
        }
        if (v169) {
          v168 = v169;
        }
        else {
          v168 = v97;
        }
        goto LABEL_208;
      }
LABEL_112:
      unsigned int v99 = *((_DWORD *)v97 + 2);
      BOOL v100 = (uint64_t *)(v90 + 32);
      for (j = (uint64_t *)(v90 + 32); ; j = v104 + 4)
      {
        uint64_t v106 = *j;
        unint64_t v107 = *(uint64_t **)(a1 + 24);
        uint64_t v108 = *(unsigned int *)(a1 + 40);
        unsigned int v109 = *j >> 4;
        if (!v108) {
          goto LABEL_143;
        }
        int v110 = v108 - 1;
        unsigned int v111 = (v109 ^ (v106 >> 9)) & (v108 - 1);
        uint64_t v112 = &v107[9 * v111];
        uint64_t v113 = *v112;
        if (v106 == *v112) {
          goto LABEL_132;
        }
        unsigned int v114 = 0;
        int v115 = 1;
        while (v113 != -4096)
        {
          if (v114) {
            BOOL v116 = 0;
          }
          else {
            BOOL v116 = v113 == -8192;
          }
          if (v116) {
            unsigned int v114 = v112;
          }
          unsigned int v117 = v111 + v115++;
          unsigned int v111 = v117 & v110;
          uint64_t v112 = &v107[9 * (v117 & v110)];
          uint64_t v113 = *v112;
          if (v106 == *v112) {
            goto LABEL_132;
          }
        }
        if (v114) {
          uint64_t v112 = v114;
        }
        int v122 = *(_DWORD *)(a1 + 32);
        if (4 * v122 + 4 < (3 * v108))
        {
          if ((int)v108 + ~v122 - *(_DWORD *)(a1 + 36) > v108 >> 3) {
            goto LABEL_128;
          }
          uint64_t v181 = v82;
          int v123 = *(_DWORD *)(a1 + 40);
        }
        else
        {
LABEL_143:
          uint64_t v181 = v82;
          int v123 = 2 * v108;
        }
        unint64_t v130 = (v123 - 1) | ((unint64_t)(v123 - 1) >> 1);
        unint64_t v131 = v130 | (v130 >> 2) | ((v130 | (v130 >> 2)) >> 4);
        int v132 = ((v131 | (v131 >> 8)) >> 16) | v131 | (v131 >> 8);
        if ((v132 + 1) > 0x40) {
          unsigned int v133 = v132 + 1;
        }
        else {
          unsigned int v133 = 64;
        }
        *(_DWORD *)(a1 + 40) = v133;
        uint64_t v134 = llvm::allocate_buffer(72 * v133, (std::align_val_t)8uLL);
        *(void *)(a1 + 24) = v134;
        if (v107)
        {
          uint64_t v135 = 9 * v108;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v107, &v107[v135]);
          llvm::deallocate_buffer((llvm *)v107, (void *)(v135 * 8));
        }
        *(void *)(a1 + 32) = 0;
        uint64_t v142 = *(unsigned int *)(a1 + 40);
        unint64_t v143 = 72 * v142 - 72;
        v144 = v134;
        long long v83 = 0uLL;
        if (v143 < 0x48) {
          goto LABEL_238;
        }
        unint64_t v145 = v143 / 0x48 + 1;
        v144 = &v134[9 * (v145 & 0x7FFFFFFFFFFFFFELL)];
        uint64_t v146 = v145 & 0x7FFFFFFFFFFFFFELL;
        v147 = v134;
        do
        {
          void *v147 = -4096;
          v147[9] = -4096;
          v147 += 18;
          v146 -= 2;
        }
        while (v146);
        if (v145 != (v145 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_238:
          do
          {
            void *v144 = -4096;
            v144 += 9;
          }
          while (v144 != &v134[9 * v142]);
        }
        uint64_t v82 = v181;
        int v148 = v142 - 1;
        unsigned int v149 = (v142 - 1) & (v109 ^ (v106 >> 9));
        uint64_t v112 = &v134[9 * v149];
        uint64_t v150 = *v112;
        if (v106 == *v112)
        {
          uint64_t v118 = v106;
          goto LABEL_129;
        }
        v160 = 0;
        int v161 = 1;
        while (v150 != -4096)
        {
          if (v160) {
            BOOL v162 = 0;
          }
          else {
            BOOL v162 = v150 == -8192;
          }
          if (v162) {
            v160 = v112;
          }
          unsigned int v163 = v149 + v161++;
          unsigned int v149 = v163 & v148;
          uint64_t v112 = &v134[9 * (v163 & v148)];
          uint64_t v150 = *v112;
          if (v106 == *v112)
          {
            uint64_t v118 = v106;
            long long v83 = 0uLL;
            goto LABEL_129;
          }
        }
        if (v160) {
          uint64_t v112 = v160;
        }
        long long v83 = 0uLL;
LABEL_128:
        uint64_t v118 = *v112;
LABEL_129:
        ++*(_DWORD *)(a1 + 32);
        if (v118 != -4096) {
          --*(_DWORD *)(a1 + 36);
        }
        *uint64_t v112 = v106;
        *(_OWORD *)(v112 + 5) = v83;
        *(_OWORD *)(v112 + 1) = v83;
        *(_OWORD *)(v112 + 3) = v83;
        *(_OWORD *)(v112 + 7) = v83;
        v112[5] = (uint64_t)(v112 + 7);
        *((_DWORD *)v112 + 13) = 2;
LABEL_132:
        if (*((_DWORD *)v112 + 2) <= v99) {
          break;
        }
        unint64_t v119 = *(uint64_t **)(a1 + 24);
        uint64_t v120 = *(unsigned int *)(a1 + 40);
        if (!v120) {
          goto LABEL_156;
        }
        int v102 = v120 - 1;
        unsigned int v103 = (v120 - 1) & (v109 ^ (v106 >> 9));
        unint64_t v104 = &v119[9 * v103];
        uint64_t v105 = *v104;
        if (v106 == *v104) {
          continue;
        }
        uint64_t v124 = 0;
        int v125 = 1;
        while (v105 != -4096)
        {
          if (v124) {
            BOOL v126 = 0;
          }
          else {
            BOOL v126 = v105 == -8192;
          }
          if (v126) {
            uint64_t v124 = v104;
          }
          unsigned int v127 = v103 + v125++;
          unsigned int v103 = v127 & v102;
          unint64_t v104 = &v119[9 * (v127 & v102)];
          uint64_t v105 = *v104;
          if (v106 == *v104) {
            goto LABEL_114;
          }
        }
        if (v124) {
          unint64_t v104 = v124;
        }
        int v128 = *(_DWORD *)(a1 + 32);
        if (4 * v128 + 4 < (3 * v120))
        {
          if ((int)v120 + ~v128 - *(_DWORD *)(a1 + 36) > v120 >> 3) {
            goto LABEL_136;
          }
          uint64_t v182 = v82;
          int v129 = *(_DWORD *)(a1 + 40);
        }
        else
        {
LABEL_156:
          uint64_t v182 = v82;
          int v129 = 2 * v120;
        }
        unint64_t v136 = (v129 - 1) | ((unint64_t)(v129 - 1) >> 1);
        unint64_t v137 = v136 | (v136 >> 2) | ((v136 | (v136 >> 2)) >> 4);
        int v138 = ((v137 | (v137 >> 8)) >> 16) | v137 | (v137 >> 8);
        if ((v138 + 1) > 0x40) {
          unsigned int v139 = v138 + 1;
        }
        else {
          unsigned int v139 = 64;
        }
        *(_DWORD *)(a1 + 40) = v139;
        v140 = llvm::allocate_buffer(72 * v139, (std::align_val_t)8uLL);
        *(void *)(a1 + 24) = v140;
        if (v119)
        {
          uint64_t v141 = 9 * v120;
          llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(v179, v119, &v119[v141]);
          llvm::deallocate_buffer((llvm *)v119, (void *)(v141 * 8));
        }
        *(void *)(a1 + 32) = 0;
        uint64_t v151 = *(unsigned int *)(a1 + 40);
        unint64_t v152 = 72 * v151 - 72;
        v153 = v140;
        long long v83 = 0uLL;
        if (v152 < 0x48) {
          goto LABEL_239;
        }
        unint64_t v154 = v152 / 0x48 + 1;
        v153 = &v140[9 * (v154 & 0x7FFFFFFFFFFFFFELL)];
        uint64_t v155 = v154 & 0x7FFFFFFFFFFFFFELL;
        v156 = v140;
        do
        {
          void *v156 = -4096;
          v156[9] = -4096;
          v156 += 18;
          v155 -= 2;
        }
        while (v155);
        if (v154 != (v154 & 0x7FFFFFFFFFFFFFELL))
        {
LABEL_239:
          do
          {
            void *v153 = -4096;
            v153 += 9;
          }
          while (v153 != &v140[9 * v151]);
        }
        uint64_t v82 = v182;
        int v157 = v151 - 1;
        unsigned int v158 = (v151 - 1) & (v109 ^ (v106 >> 9));
        unint64_t v104 = &v140[9 * v158];
        uint64_t v159 = *v104;
        if (v106 == *v104)
        {
          uint64_t v121 = v106;
          goto LABEL_137;
        }
        v164 = 0;
        int v165 = 1;
        while (v159 != -4096)
        {
          if (v164) {
            BOOL v166 = 0;
          }
          else {
            BOOL v166 = v159 == -8192;
          }
          if (v166) {
            v164 = v104;
          }
          unsigned int v167 = v158 + v165++;
          unsigned int v158 = v167 & v157;
          unint64_t v104 = &v140[9 * (v167 & v157)];
          uint64_t v159 = *v104;
          if (v106 == *v104)
          {
            uint64_t v121 = v106;
            long long v83 = 0uLL;
            goto LABEL_137;
          }
        }
        if (v164) {
          unint64_t v104 = v164;
        }
        long long v83 = 0uLL;
LABEL_136:
        uint64_t v121 = *v104;
LABEL_137:
        ++*(_DWORD *)(a1 + 32);
        if (v121 != -4096) {
          --*(_DWORD *)(a1 + 36);
        }
        *unint64_t v104 = v106;
        *(_OWORD *)(v104 + 5) = v83;
        *(_OWORD *)(v104 + 1) = v83;
        *(_OWORD *)(v104 + 3) = v83;
        *(_OWORD *)(v104 + 7) = v83;
        v104[5] = (uint64_t)(v104 + 7);
        *((_DWORD *)v104 + 13) = 2;
LABEL_114:
        ;
      }
      *BOOL v100 = v106;
    }
  }
LABEL_233:
  if (v184[0] != v185) {
    free(v184[0]);
  }
}

char *llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::attachNewSubtree(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t result = (char *)(a1 + 24);
  uint64_t v7 = v8;
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = (uint64_t *)(*(void *)a1 + 8);
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    int v14 = (char *)(v7 + 72 * v13);
    uint64_t v15 = *(void *)v14;
    if (*v10 == *(void *)v14) {
      goto LABEL_14;
    }
    unint64_t v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        unint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      int v14 = (char *)(v7 + 72 * (v19 & v12));
      uint64_t v15 = *(void *)v14;
      if (*v10 == *(void *)v14) {
        goto LABEL_14;
      }
    }
    if (v16) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = v14;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>((uint64_t)result, v20, v10);
  int v14 = result;
  uint64_t v9 = *(void *)a1;
LABEL_14:
  *((void *)v14 + 4) = v5;
  uint64_t v21 = *(void *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    uint64_t v22 = v21 >> 3;
    for (uint64_t i = 1; i != v22; ++i)
    {
      uint64_t v44 = 0;
      uint64_t v26 = *(void *)(*(void *)a1 + 8 * i);
      uint64_t v44 = v26;
      int v27 = *(_DWORD *)(a2 + 40);
      if (v27)
      {
        uint64_t v28 = *(void *)(a2 + 24);
        int v29 = v27 - 1;
        unsigned int v30 = ((v26 >> 4) ^ (v26 >> 9)) & v29;
        uint64_t result = (char *)(v28 + 16 * v30);
        uint64_t v31 = *(void *)result;
        if (v26 == *(void *)result) {
          goto LABEL_33;
        }
        unsigned int v32 = 0;
        int v33 = 1;
        while (v31 != -4096)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -8192;
          }
          if (v34) {
            unsigned int v32 = (uint64_t *)result;
          }
          unsigned int v35 = v30 + v33++;
          unsigned int v30 = v35 & v29;
          uint64_t result = (char *)(v28 + 16 * v30);
          uint64_t v31 = *(void *)result;
          if (v26 == *(void *)result) {
            goto LABEL_33;
          }
        }
        if (v32) {
          uint64_t v36 = v32;
        }
        else {
          uint64_t v36 = (uint64_t *)result;
        }
      }
      else
      {
        uint64_t v36 = 0;
      }
      uint64_t result = (char *)llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(a2 + 24, v36, &v44);
LABEL_33:
      if (!*((void *)result + 1))
      {
        uint64_t v37 = *(void *)(a1 + 24);
        unsigned int v38 = *(_DWORD *)(a1 + 40);
        if (!v38) {
          goto LABEL_40;
        }
        unsigned int v39 = ((v44 >> 4) ^ (v44 >> 9)) & (v38 - 1);
        uint64_t v40 = (uint64_t *)(v37 + 72 * v39);
        uint64_t v41 = *v40;
        if (*v40 != v44)
        {
          int v42 = 1;
          while (v41 != -4096)
          {
            unsigned int v43 = v39 + v42++;
            unsigned int v39 = v43 & (v38 - 1);
            uint64_t v40 = (uint64_t *)(v37 + 72 * v39);
            uint64_t v41 = *v40;
            if (*v40 == v44) {
              goto LABEL_41;
            }
          }
LABEL_40:
          uint64_t v40 = (uint64_t *)(v37 + 72 * v38);
        }
LABEL_41:
        if (v40 == (uint64_t *)(v37 + 72 * v38)) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = v40[4];
        }
        uint64_t NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock(a1, v24, a2);
        uint64_t result = (char *)llvm::DominatorTreeBase<mlir::Block,false>::createChild(a2, v44, NodeForBlock);
      }
    }
  }
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, char *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *(void *)a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  unsigned int v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(72 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = 9 * v6;
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(a1, v10, &v10[v16]);
    llvm::deallocate_buffer((llvm *)v10, (void *)(v16 * 8));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  unint64_t v18 = 72 * v17 - 72;
  unsigned int v19 = buffer;
  if (v18 < 0x48) {
    goto LABEL_34;
  }
  unint64_t v20 = v18 / 0x48 + 1;
  unsigned int v19 = &buffer[9 * (v20 & 0x7FFFFFFFFFFFFFELL)];
  uint64_t v21 = v20 & 0x7FFFFFFFFFFFFFELL;
  uint64_t v22 = buffer;
  do
  {
    *uint64_t v22 = -4096;
    v22[9] = -4096;
    v22 += 18;
    v21 -= 2;
  }
  while (v21);
  if (v20 != (v20 & 0x7FFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *unsigned int v19 = -4096;
      v19 += 9;
    }
    while (v19 != &buffer[9 * v17]);
  }
  uint64_t v7 = *a3;
  int v23 = v17 - 1;
  unsigned int v24 = ((*a3 >> 4) ^ (*a3 >> 9)) & v23;
  a2 = (char *)&buffer[9 * v24];
  uint64_t v25 = *(void *)a2;
  if (*a3 != *(void *)a2)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != -4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == -8192;
      }
      if (v28) {
        uint64_t v26 = a2;
      }
      unsigned int v29 = v24 + v27++;
      unsigned int v24 = v29 & v23;
      a2 = (char *)&buffer[9 * v24];
      uint64_t v25 = *(void *)a2;
      if (v7 == *(void *)a2) {
        goto LABEL_4;
      }
    }
    if (v26) {
      a2 = v26;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)a2 = *a3;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *((void *)a2 + 5) = a2 + 56;
  *((_DWORD *)a2 + 13) = 2;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    unint64_t v8 = 72 * v6 - 72;
    if (v8 < 0x48)
    {
      int v9 = *(void **)a1;
LABEL_7:
      int v13 = &v7[9 * v6];
      do
      {
        *int v9 = -4096;
        v9 += 9;
      }
      while (v9 != v13);
      goto LABEL_9;
    }
    unint64_t v10 = v8 / 0x48 + 1;
    int v9 = &v7[9 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v11 = v10 & 0x7FFFFFFFFFFFFFELL;
    unint64_t v12 = *(void **)a1;
    do
    {
      *unint64_t v12 = -4096;
      v12[9] = -4096;
      v12 += 18;
      v11 -= 2;
    }
    while (v11);
    if (v10 != (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_7;
    }
  }
LABEL_9:
  if (a2 != a3)
  {
    do
    {
      uint64_t v14 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
        uint64_t v17 = (void *)(*(void *)a1 + 72 * v16);
        uint64_t v18 = *v17;
        if (v14 != *v17)
        {
          int v23 = 0;
          int v24 = 1;
          while (v18 != -4096)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v18 == -8192;
            }
            if (v25) {
              int v23 = v17;
            }
            unsigned int v26 = v16 + v24++;
            unsigned int v16 = v26 & v15;
            uint64_t v17 = (void *)(*(void *)a1 + 72 * v16);
            uint64_t v18 = *v17;
            if (v14 == *v17) {
              goto LABEL_14;
            }
          }
          if (v23) {
            uint64_t v17 = v23;
          }
        }
LABEL_14:
        void *v17 = v14;
        long long v19 = *(_OWORD *)(v4 + 1);
        long long v20 = *(_OWORD *)(v4 + 3);
        v17[5] = v17 + 7;
        uint64_t v21 = (uint64_t)(v17 + 5);
        *(_OWORD *)(v21 - 32) = v19;
        *(_OWORD *)(v21 - 16) = v20;
        *(void *)(v21 + 8) = 0x200000000;
        if (*((_DWORD *)v4 + 12)) {
          llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v21, (uint64_t)(v4 + 5));
        }
        ++*(_DWORD *)(a1 + 8);
        uint64_t v22 = (uint64_t *)v4[5];
        if (v22 != v4 + 7) {
          free(v22);
        }
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

void llvm::GraphDiff<mlir::Block *,false>::getChildren<false>(int *a1@<X0>, mlir::Block *a2@<X1>, void *a3@<X8>)
{
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v50, a2);
  uint64_t v6 = v50[0];
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v50, a2);
  uint64_t v8 = v50[0];
  unint64_t v7 = v50[1];
  int v9 = a3 + 2;
  *a3 = a3 + 2;
  a3[1] = 0x800000000;
  if (v7 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, v9, v7, 8);
    uint64_t v10 = *((unsigned int *)a3 + 2);
    int v9 = (void *)(*a3 + 8 * v10);
    if (v8 == v6) {
      goto LABEL_11;
    }
LABEL_8:
    for (uint64_t i = (uint64_t *)(v8 + 32 * v7 - 8); ; i -= 4)
    {
      uint64_t v16 = *i;
      *v9++ = v16;
    }
  }
  if (!v7 && v8 == v6)
  {
    uint64_t v11 = a3 + 2;
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t)(a3 + 2);
    uint64_t v14 = 0;
    goto LABEL_18;
  }
  if (v8 != v6) {
    goto LABEL_8;
  }
  LODWORD(v10) = 0;
LABEL_11:
  uint64_t v17 = (uint64_t *)(v8 + 32 * v7 - 8);
  unint64_t v18 = v7;
  do
  {
    uint64_t v19 = *v17;
    v17 -= 4;
    *v9++ = v19;
    --v18;
  }
  while (v18);
  int v9 = (void *)*a3;
  uint64_t v11 = (void *)*a3;
  uint64_t v12 = (v10 + v7);
  BOOL v23 = v10 + v7 == 0;
  uint64_t v13 = *a3 + 8 * v12;
  uint64_t v14 = 8 * v12;
  if (!v23)
  {
    uint64_t v20 = 8 * v12;
    uint64_t v11 = (void *)*a3;
    while (*v11)
    {
      ++v11;
      v20 -= 8;
      if (!v20)
      {
        uint64_t v11 = (void *)(*a3 + 8 * v12);
        break;
      }
    }
  }
LABEL_18:
  uint64_t v21 = v11 - v9;
  uint64_t v22 = v11 + 1;
  BOOL v23 = v21 == v12 || v22 == (void *)v13;
  if (!v23)
  {
    uint64_t v24 = v14 - 8 * v21 - 8;
    do
    {
      if (*v22) {
        *v11++ = *v22;
      }
      ++v22;
      v24 -= 8;
    }
    while (v24);
    int v9 = (void *)*a3;
  }
  unint64_t v25 = (char *)v11 - (char *)v9;
  unint64_t v26 = (unint64_t)((char *)v11 - (char *)v9) >> 3;
  *((_DWORD *)a3 + 2) = v26;
  int v27 = a1 + 2;
  int v28 = *a1;
  if (*a1)
  {
    int v29 = 4;
  }
  else
  {
    int v27 = (int *)*((void *)a1 + 1);
    int v29 = a1[4];
    if (!v29)
    {
      unsigned int v30 = 0;
LABEL_30:
      uint64_t v31 = &v27[18 * v30];
      goto LABEL_34;
    }
  }
  int v32 = v29 - 1;
  unsigned int v33 = (v29 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v31 = &v27[18 * v33];
  BOOL v34 = *(mlir::Block **)v31;
  if (*(mlir::Block **)v31 != a2)
  {
    int v35 = 1;
    while (v34 != (mlir::Block *)-4096)
    {
      unsigned int v36 = v33 + v35++;
      unsigned int v33 = v36 & v32;
      uint64_t v31 = &v27[18 * (v36 & v32)];
      BOOL v34 = *(mlir::Block **)v31;
      if (*(mlir::Block **)v31 == a2) {
        goto LABEL_33;
      }
    }
    if ((v28 & 1) == 0)
    {
      int v27 = (int *)*((void *)a1 + 1);
      unsigned int v30 = a1[4];
      goto LABEL_30;
    }
    uint64_t v31 = a1 + 74;
LABEL_43:
    if (v31 == a1 + 74) {
      return;
    }
    goto LABEL_44;
  }
LABEL_33:
  if (v28) {
    goto LABEL_43;
  }
LABEL_34:
  if (v31 == (int *)(*((void *)a1 + 1) + 72 * a1[4])) {
    return;
  }
LABEL_44:
  uint64_t v37 = v31[4];
  if (v37)
  {
    uint64_t v38 = (v25 >> 3);
    unsigned int v39 = (uint64_t *)*((void *)v31 + 1);
    uint64_t v40 = &v39[v37];
    do
    {
      uint64_t v42 = *v39;
      uint64_t v43 = 8 * v38;
      uint64_t v44 = v9;
      uint64_t v45 = &v9[v38];
      if (v38)
      {
        uint64_t v46 = 8 * v38;
        uint64_t v44 = v9;
        while (*v44 != v42)
        {
          ++v44;
          v46 -= 8;
          if (!v46)
          {
            uint64_t v44 = &v9[v38];
            break;
          }
        }
      }
      uint64_t v47 = v44 - v9;
      if (v47 != v38)
      {
        uint64_t v48 = v44 + 1;
        if (v44 + 1 != v45)
        {
          uint64_t v49 = v43 - 8 * v47 - 8;
          do
          {
            if (*v48 != v42) {
              *v44++ = *v48;
            }
            ++v48;
            v49 -= 8;
          }
          while (v49);
          int v9 = (void *)*a3;
        }
      }
      unint64_t v41 = (char *)v44 - (char *)v9;
      uint64_t v38 = (v41 >> 3);
      ++v39;
    }
    while (v39 != v40);
    unint64_t v26 = v41 >> 3;
    *((_DWORD *)a3 + 2) = v38;
  }
  llvm::SmallVectorImpl<mlir::Attribute>::insert<mlir::Attribute const*,void>((uint64_t)a3, (uint64_t)&v9[v26], *((char **)v31 + 5), (char *)(*((void *)v31 + 5) + 8 * v31[12]));
}

void llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getChildren<false>(mlir::Block *a1@<X0>, void *a2@<X8>)
{
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v23, a1);
  uint64_t v4 = v23[0];
  mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)v23, a1);
  uint64_t v6 = v23[0];
  unint64_t v5 = v23[1];
  unint64_t v7 = a2 + 2;
  *a2 = a2 + 2;
  a2[1] = 0x800000000;
  if (v5 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a2, v7, v5, 8);
    uint64_t v8 = *((unsigned int *)a2 + 2);
    unint64_t v7 = (void *)(*a2 + 8 * v8);
    if (v6 == v4) {
      goto LABEL_11;
    }
LABEL_8:
    for (uint64_t i = (uint64_t *)(v6 + 32 * v5 - 8); ; i -= 4)
    {
      uint64_t v14 = *i;
      *v7++ = v14;
    }
  }
  if (!v5 && v6 == v4)
  {
    int v9 = a2 + 2;
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t)(a2 + 2);
    uint64_t v12 = 0;
    goto LABEL_18;
  }
  if (v6 != v4) {
    goto LABEL_8;
  }
  LODWORD(v8) = 0;
LABEL_11:
  int v15 = (uint64_t *)(v6 + 32 * v5 - 8);
  unint64_t v16 = v5;
  do
  {
    uint64_t v17 = *v15;
    v15 -= 4;
    *v7++ = v17;
    --v16;
  }
  while (v16);
  unint64_t v7 = (void *)*a2;
  int v9 = (void *)*a2;
  uint64_t v10 = (v8 + v5);
  BOOL v21 = v8 + v5 == 0;
  uint64_t v11 = *a2 + 8 * v10;
  uint64_t v12 = 8 * v10;
  if (!v21)
  {
    uint64_t v18 = 8 * v10;
    int v9 = (void *)*a2;
    while (*v9)
    {
      ++v9;
      v18 -= 8;
      if (!v18)
      {
        int v9 = (void *)(*a2 + 8 * v10);
        break;
      }
    }
  }
LABEL_18:
  uint64_t v19 = v9 - v7;
  uint64_t v20 = v9 + 1;
  BOOL v21 = v19 == v10 || v20 == (void *)v11;
  if (!v21)
  {
    uint64_t v22 = v12 - 8 * v19 - 8;
    do
    {
      if (*v20) {
        *v9++ = *v20;
      }
      ++v20;
      v22 -= 8;
    }
    while (v22);
    unint64_t v7 = (void *)*a2;
  }
  *((_DWORD *)a2 + 2) = (unint64_t)((char *)v9 - (char *)v7) >> 3;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::eval(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v61 = a2;
  uint64_t v8 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 40);
  if (v9)
  {
    int v10 = v9 - 1;
    unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v12 = (char *)(v7 + 72 * v11);
    uint64_t v13 = *(void *)v12;
    if (*(void *)v12 == a2) {
      goto LABEL_14;
    }
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != -4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v13 == -8192;
      }
      if (v16) {
        uint64_t v14 = v12;
      }
      unsigned int v17 = v11 + v15++;
      unsigned int v11 = v17 & v10;
      uint64_t v12 = (char *)(v7 + 72 * v11);
      uint64_t v13 = *(void *)v12;
      if (*(void *)v12 == a2) {
        goto LABEL_14;
      }
    }
    if (v14) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v12;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v18, &v61);
LABEL_14:
  if (*((_DWORD *)v12 + 3) >= a3)
  {
    BOOL v21 = v12 + 8;
    while (1)
    {
      unint64_t v27 = *(unsigned int *)(a4 + 8);
      if (v27 >= *(unsigned int *)(a4 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v27 + 1, 8);
        unint64_t v27 = *(unsigned int *)(a4 + 8);
      }
      *(void *)(*(void *)a4 + 8 * v27) = v21;
      ++*(_DWORD *)(a4 + 8);
      int v28 = (uint64_t *)(*(void *)a1 + 8 * *((unsigned int *)v21 + 1));
      int v29 = *(_DWORD *)(a1 + 40);
      if (!v29) {
        break;
      }
      uint64_t v22 = *(void *)(a1 + 24);
      int v23 = v29 - 1;
      unsigned int v24 = ((*v28 >> 4) ^ (*v28 >> 9)) & v23;
      unint64_t v25 = (char *)(v22 + 72 * v24);
      uint64_t v26 = *(void *)v25;
      if (*v28 != *(void *)v25)
      {
        uint64_t v31 = 0;
        int v32 = 1;
        while (v26 != -4096)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v26 == -8192;
          }
          if (v33) {
            uint64_t v31 = v25;
          }
          unsigned int v34 = v24 + v32++;
          unsigned int v24 = v34 & v23;
          unint64_t v25 = (char *)(v22 + 72 * v24);
          uint64_t v26 = *(void *)v25;
          if (*v28 == *(void *)v25) {
            goto LABEL_19;
          }
        }
        if (v31) {
          unsigned int v30 = v31;
        }
        else {
          unsigned int v30 = v25;
        }
        goto LABEL_24;
      }
LABEL_19:
      BOOL v21 = v25 + 8;
      if (*((_DWORD *)v25 + 3) < a3)
      {
        int v35 = (uint64_t *)(v25 + 24);
        int v36 = *(_DWORD *)(a1 + 40);
        if (!v36)
        {
          uint64_t v46 = 0;
          goto LABEL_49;
        }
        uint64_t v37 = *(void *)(a1 + 24);
        int v38 = v36 - 1;
        unsigned int v39 = ((*v35 >> 4) ^ (*v35 >> 9)) & v38;
        uint64_t v40 = (char *)(v37 + 72 * v39);
        uint64_t v41 = *(void *)v40;
        if (*v35 != *(void *)v40)
        {
          uint64_t v42 = 0;
          int v43 = 1;
          while (v41 != -4096)
          {
            if (v42) {
              BOOL v44 = 0;
            }
            else {
              BOOL v44 = v41 == -8192;
            }
            if (v44) {
              uint64_t v42 = v40;
            }
            unsigned int v45 = v39 + v43++;
            unsigned int v39 = v45 & v38;
            uint64_t v40 = (char *)(v37 + 72 * v39);
            uint64_t v41 = *(void *)v40;
            if (*v35 == *(void *)v40) {
              goto LABEL_50;
            }
          }
          if (v42) {
            uint64_t v46 = v42;
          }
          else {
            uint64_t v46 = v40;
          }
LABEL_49:
          uint64_t v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v46, v35);
        }
LABEL_50:
        uint64_t v47 = v40 + 8;
        unsigned int v48 = *(_DWORD *)(a4 + 8);
        while (2)
        {
          uint64_t v49 = *(void *)(*(void *)a4 + 8 * v48 - 8);
          *(_DWORD *)(a4 + 8) = v48 - 1;
          *(_DWORD *)(v49 + 4) = *((_DWORD *)v21 + 1);
          uint64_t v19 = (char *)(v49 + 16);
          int v50 = *(_DWORD *)(a1 + 40);
          if (v50)
          {
            uint64_t v51 = *(void *)(a1 + 24);
            int v52 = v50 - 1;
            unsigned int v53 = ((*(void *)v19 >> 4) ^ (*(void *)v19 >> 9)) & v52;
            uint64_t v54 = (char *)(v51 + 72 * v53);
            uint64_t v55 = *(void *)v54;
            if (*(void *)v19 != *(void *)v54)
            {
              BOOL v56 = 0;
              int v57 = 1;
              while (v55 != -4096)
              {
                if (v56) {
                  BOOL v58 = 0;
                }
                else {
                  BOOL v58 = v55 == -8192;
                }
                if (v58) {
                  BOOL v56 = v54;
                }
                unsigned int v59 = v53 + v57++;
                unsigned int v53 = v59 & v52;
                uint64_t v54 = (char *)(v51 + 72 * v53);
                uint64_t v55 = *(void *)v54;
                if (*(void *)v19 == *(void *)v54) {
                  goto LABEL_65;
                }
              }
              if (v56) {
                int v60 = v56;
              }
              else {
                int v60 = v54;
              }
LABEL_64:
              uint64_t v54 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v60, (uint64_t *)(v49 + 16));
            }
LABEL_65:
            if (*((_DWORD *)v47 + 2) < *((_DWORD *)v54 + 4))
            {
              *(void *)uint64_t v19 = *((void *)v21 + 2);
              unsigned int v48 = *(_DWORD *)(a4 + 8);
              BOOL v21 = (char *)v49;
              if (!v48) {
                return *(void *)v19;
              }
            }
            else
            {
              uint64_t v47 = v54 + 8;
              unsigned int v48 = *(_DWORD *)(a4 + 8);
              BOOL v21 = (char *)v49;
              if (!v48) {
                return *(void *)v19;
              }
            }
            continue;
          }
          break;
        }
        int v60 = 0;
        goto LABEL_64;
      }
    }
    unsigned int v30 = 0;
LABEL_24:
    unint64_t v25 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v8, v30, v28);
    goto LABEL_19;
  }
  uint64_t v19 = v12 + 24;
  return *(void *)v19;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(unsigned int *)(a3 + 40);
  unsigned int v7 = a2 >> 4;
  if (!v6)
  {
LABEL_7:
    int v9 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_8;
  }
  LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
  int v9 = (uint64_t *)(v5 + 16 * v8);
  uint64_t v10 = *v9;
  if (*v9 != a2)
  {
    int v11 = 1;
    while (v10 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v6 - 1);
      uint64_t v10 = *(void *)(v5 + 16 * v8);
      if (v10 == a2)
      {
        int v9 = (uint64_t *)(v5 + 16 * v8);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v9 != (uint64_t *)(v5 + 16 * v6) && v9[1]) {
    return v9[1];
  }
  uint64_t v14 = *(void *)(a1 + 24);
  int v15 = *(_DWORD *)(a1 + 40);
  if (v15)
  {
    unsigned int v16 = (v15 - 1) & (v7 ^ (a2 >> 9));
    uint64_t v17 = *(void *)(v14 + 72 * v16);
    if (v17 != a2)
    {
      int v18 = 1;
      do
      {
        if (v17 == -4096) {
          break;
        }
        unsigned int v19 = v16 + v18++;
        unsigned int v16 = v19 & (v15 - 1);
        uint64_t v17 = *(void *)(v14 + 72 * v16);
      }
      while (v17 != a2);
    }
  }
  uint64_t NodeForBlock = llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getNodeForBlock();

  return llvm::DominatorTreeBase<mlir::Block,false>::createChild(a3, a2, NodeForBlock);
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::AlwaysDescend()
{
  return 1;
}

unsigned int *llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom(uint64_t a1, _DWORD *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = a1 + 8;
    uint64_t v5 = 4;
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    if (!v5) {
      goto LABEL_13;
    }
    uint64_t v6 = *(void *)(a1 + 8);
  }
  unsigned int v7 = (void *)(v6 + 56);
  uint64_t v8 = 72 * v5;
  do
  {
    if ((*(v7 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      int v9 = (void *)*(v7 - 2);
      if (v7 != v9) {
        free(v9);
      }
      uint64_t v10 = (char *)*(v7 - 6);
      if (v7 - 4 != (void *)v10) {
        free(v10);
      }
    }
    v7 += 9;
    v8 -= 72;
  }
  while (v8);
  unsigned int v4 = *(_DWORD *)a1;
LABEL_13:
  if ((v4 & 1) == 0) {
    llvm::deallocate_buffer(*(llvm **)(a1 + 8), (void *)(72 * *(unsigned int *)(a1 + 16)));
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(unsigned char *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if (*a2) {
      uint64_t v11 = 4;
    }
    else {
      uint64_t v11 = a2[4];
    }
    *(void *)(a1 + 8) = llvm::allocate_buffer(8 * (v11 + 8 * v11), (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v11;
  }

  return llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>,mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>>((unsigned int *)a1, a2);
}

unsigned int *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>,mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>::copyFrom<llvm::SmallDenseMap<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts,4u,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::GraphDiff<mlir::Block *,false>::DeletesInserts>>>(unsigned int *result, _DWORD *a2)
{
  unint64_t v2 = 0;
  unsigned int v3 = *a2 & 0xFFFFFFFE | *result & 1;
  *uint64_t result = v3;
  result[1] = a2[1];
  unsigned int v4 = result + 2;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = 5;
  uint64_t v20 = result;
  BOOL v21 = a2;
  while ((v3 & 1) == 0)
  {
    if (v2 >= result[4]) {
      return result;
    }
    uint64_t v8 = (void *)*v4;
LABEL_10:
    int v9 = v5;
    if ((*(unsigned char *)a2 & 1) == 0) {
      int v9 = (void *)*v5;
    }
    v8[v6 - 5] = v9[v6 - 5];
    if (*(unsigned char *)result)
    {
      uint64_t v10 = v4;
      if ((v4[v6 - 5] | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v10 = (void *)*v4;
      if ((*(void *)(*v4 + v6 * 8 - 40) | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = v5;
    if ((*(unsigned char *)a2 & 1) == 0) {
      uint64_t v11 = (void *)*v5;
    }
    int v12 = (void **)&v10[v6 - 4];
    uint64_t v13 = &v11[v6];
    uint64_t v14 = &v10[v6 - 2];
    *int v12 = v14;
    v10[v6 - 3] = 0x200000000;
    if (v10 != v11)
    {
      unint64_t v15 = *((unsigned int *)v13 - 6);
      if (*((_DWORD *)v13 - 6))
      {
        if (v15 < 3)
        {
          uint64_t v16 = *((unsigned int *)v13 - 6);
LABEL_24:
          memcpy(v14, (const void *)*(v13 - 4), 8 * v16);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10[v6 - 4], &v10[v6 - 2], *((unsigned int *)v13 - 6), 8);
          uint64_t v16 = *((unsigned int *)v13 - 6);
          if (v16)
          {
            uint64_t v14 = *v12;
            goto LABEL_24;
          }
        }
        LODWORD(v10[v6 - 3]) = v15;
        uint64_t result = v20;
        a2 = v21;
      }
    }
    uint64_t v17 = &v10[v6];
    int v18 = &v10[v6 + 2];
    void *v17 = v18;
    v17[1] = 0x200000000;
    if (v10 != v11)
    {
      unint64_t v19 = *((unsigned int *)v13 + 2);
      if (*((_DWORD *)v13 + 2))
      {
        if (v19 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10[v6], &v10[v6 + 2], *((unsigned int *)v13 + 2), 8);
          uint64_t v7 = *((unsigned int *)v13 + 2);
          if (v7)
          {
            int v18 = (void *)*v17;
LABEL_3:
            memcpy(v18, (const void *)*v13, 8 * v7);
          }
          *((_DWORD *)v17 + 2) = v19;
          uint64_t result = v20;
          a2 = v21;
          goto LABEL_5;
        }
        uint64_t v7 = *((unsigned int *)v13 + 2);
        goto LABEL_3;
      }
    }
LABEL_5:
    ++v2;
    unsigned int v3 = *((_DWORD *)v4 - 2);
    v6 += 9;
  }
  uint64_t v8 = v4;
  if (v2 < 4) {
    goto LABEL_10;
  }
  return result;
}

uint64_t llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(mlir::Block *), int a5, uint64_t *a6)
{
  uint64_t v6 = a6;
  v102[64] = *MEMORY[0x1E4F143B8];
  uint64_t v95 = a2;
  BOOL v100 = v102;
  v102[0] = a2;
  uint64_t v101 = 0x4000000001;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v92 = a1 + 24;
  int v10 = *(_DWORD *)(a1 + 40);
  if (!v10) {
    goto LABEL_4;
  }
  int v12 = v10 - 1;
  unsigned int v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = (char *)(v9 + 72 * v13);
  uint64_t v15 = *(void *)v14;
  if (*(void *)v14 == a2)
  {
LABEL_3:
    *(_DWORD *)(v9 + 72 * v13 + 12) = a5;
LABEL_4:
    unsigned int v16 = 1;
    goto LABEL_7;
  }
  int v80 = 1;
  uint64_t v81 = *(void *)v14;
  unsigned int v82 = v12 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v81 == -4096) {
      goto LABEL_4;
    }
    unsigned int v83 = v82 + v80++;
    unsigned int v82 = v83 & v12;
    uint64_t v81 = *(void *)(v9 + 72 * v82);
  }
  while (v81 != a2);
  uint64_t v84 = 0;
  int v85 = 1;
  uint64_t v6 = a6;
  while (v15 != -4096)
  {
    if (v84) {
      BOOL v86 = 0;
    }
    else {
      BOOL v86 = v15 == -8192;
    }
    if (v86) {
      uint64_t v84 = v14;
    }
    unsigned int v87 = v13 + v85++;
    unsigned int v13 = v87 & v12;
    uint64_t v14 = (char *)(v9 + 72 * v13);
    uint64_t v15 = *(void *)v14;
    if (*(void *)v14 == a2) {
      goto LABEL_3;
    }
  }
  if (v84) {
    uint64_t v88 = v84;
  }
  else {
    uint64_t v88 = v14;
  }
  unsigned int v89 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v88, &v95);
  unsigned int v16 = v101;
  *((_DWORD *)v89 + 3) = a5;
  uint64_t v6 = a6;
  if (v16)
  {
LABEL_7:
    char v94 = 0;
    uint64_t v17 = (mlir::Block *)*((void *)v100 + v16 - 1);
    LODWORD(v101) = v16 - 1;
    char v94 = v17;
    int v18 = *(_DWORD *)(a1 + 40);
    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 24);
      int v20 = v18 - 1;
      unsigned int v21 = v20 & ((v17 >> 4) ^ (v17 >> 9));
      uint64_t v22 = (char *)(v19 + 72 * v21);
      uint64_t v23 = *(void *)v22;
      if (v17 == *(mlir::Block **)v22) {
        goto LABEL_20;
      }
      unsigned int v24 = 0;
      int v25 = 1;
      while (v23 != -4096)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -8192;
        }
        if (v26) {
          unsigned int v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        uint64_t v22 = (char *)(v19 + 72 * v21);
        uint64_t v23 = *(void *)v22;
        if (v17 == *(mlir::Block **)v22) {
          goto LABEL_20;
        }
      }
      if (v24) {
        int v28 = v24;
      }
      else {
        int v28 = v22;
      }
    }
    else
    {
      int v28 = 0;
    }
    uint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v28, (uint64_t *)&v94);
LABEL_20:
    if (*((_DWORD *)v22 + 2)) {
      goto LABEL_6;
    }
    a3 = (a3 + 1);
    *((_DWORD *)v22 + 4) = a3;
    *((_DWORD *)v22 + 2) = a3;
    int v29 = v94;
    *((void *)v22 + 3) = v94;
    uint64_t v31 = *(char **)(a1 + 8);
    unint64_t v30 = *(void *)(a1 + 16);
    if ((unint64_t)v31 < v30)
    {
      *(void *)uint64_t v31 = v29;
      uint64_t v32 = (uint64_t)(v31 + 8);
      goto LABEL_44;
    }
    uint64_t v33 = a3;
    unsigned int v34 = *(char **)a1;
    uint64_t v35 = (uint64_t)&v31[-*(void *)a1];
    uint64_t v36 = v35 >> 3;
    unint64_t v37 = (v35 >> 3) + 1;
    if (v37 >> 61) {
      abort();
    }
    uint64_t v38 = v30 - (void)v34;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v40 = operator new(8 * v39);
      uint64_t v41 = (mlir::Block **)&v40[8 * v36];
      uint64_t *v41 = v29;
      uint64_t v32 = (uint64_t)(v41 + 1);
      if (v31 != v34)
      {
LABEL_32:
        unint64_t v42 = v31 - 8 - v34;
        if (v42 >= 0x58)
        {
          unint64_t v43 = v31 - &v40[v35];
          a3 = v33;
          uint64_t v6 = a6;
          if (v43 >= 0x20)
          {
            uint64_t v44 = (v42 >> 3) + 1;
            uint64_t v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v46 = &v31[-v45];
            uint64_t v41 = (mlir::Block **)((char *)v41 - v45);
            uint64_t v47 = &v40[8 * v36 - 16];
            unsigned int v48 = v31 - 16;
            uint64_t v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *uint64_t v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 4;
            }
            while (v49);
            uint64_t v31 = v46;
            if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_42:
              uint64_t v31 = *(char **)a1;
              *(void *)a1 = v41;
              *(void *)(a1 + 8) = v32;
              *(void *)(a1 + 16) = &v40[8 * v39];
              if (!v31) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
          }
        }
        else
        {
          a3 = v33;
          uint64_t v6 = a6;
        }
        do
        {
          uint64_t v51 = (mlir::Block *)*((void *)v31 - 1);
          v31 -= 8;
          *--uint64_t v41 = v51;
        }
        while (v31 != v34);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v41 = (mlir::Block **)(8 * v36);
      *(void *)(8 * v36) = v29;
      uint64_t v32 = 8 * v36 + 8;
      if (v31 != v34) {
        goto LABEL_32;
      }
    }
    a3 = v33;
    uint64_t v6 = a6;
    *(void *)a1 = v41;
    *(void *)(a1 + 8) = v32;
    *(void *)(a1 + 16) = &v40[8 * v39];
    if (!v31)
    {
LABEL_44:
      *(void *)(a1 + 8) = v32;
      uint64_t v52 = *(void *)(a1 + 48);
      if (v52)
      {
        llvm::GraphDiff<mlir::Block *,false>::getChildren<false>(*(int **)(v52 + 8), v94, &v97);
        unint64_t v53 = v98;
        if (!v6) {
          goto LABEL_50;
        }
      }
      else
      {
        llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::getChildren<false>(v94, &v97);
        unint64_t v53 = v98;
        if (!v6) {
          goto LABEL_50;
        }
      }
      if (v53 >= 2)
      {
        unsigned int v96 = v6;
        std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>((uint64_t)v97, (uint64_t *)v97 + v53, &v96, 126 - 2 * __clz(v53), 1);
        unint64_t v53 = v98;
      }
LABEL_50:
      uint64_t v54 = (uint64_t **)v97;
      uint64_t v55 = (uint64_t **)((char *)v97 + 8 * v53);
      if (!v53)
      {
        if (v97 != v99) {
          goto LABEL_91;
        }
        goto LABEL_6;
      }
      while (1)
      {
        unsigned int v96 = 0;
        int v57 = *v54;
        unsigned int v96 = *v54;
        uint64_t v58 = *(void *)(a1 + 24);
        unsigned int v59 = *(_DWORD *)(a1 + 40);
        if (v59)
        {
          unsigned int v60 = (v59 - 1) & ((v57 >> 4) ^ (v57 >> 9));
          uint64_t v61 = (char *)(v58 + 72 * v60);
          unint64_t v62 = *(uint64_t **)v61;
          if (*(uint64_t **)v61 == v57) {
            goto LABEL_63;
          }
          int v63 = 1;
          while (v62 != (uint64_t *)-4096)
          {
            unsigned int v64 = v60 + v63++;
            unsigned int v60 = v64 & (v59 - 1);
            uint64_t v61 = (char *)(v58 + 72 * v60);
            unint64_t v62 = *(uint64_t **)v61;
            if (*(uint64_t **)v61 == v57) {
              goto LABEL_63;
            }
          }
        }
        uint64_t v61 = (char *)(v58 + 72 * v59);
LABEL_63:
        if (v61 == (char *)(v58 + 72 * v59))
        {
          unsigned int v65 = v94;
LABEL_69:
          if (!a4(v65)) {
            goto LABEL_55;
          }
          int v68 = *(_DWORD *)(a1 + 40);
          if (v68)
          {
            uint64_t v69 = *(void *)(a1 + 24);
            uint64_t v70 = v96;
            int v71 = v68 - 1;
            unsigned int v72 = ((v96 >> 4) ^ (v96 >> 9)) & v71;
            uint64_t v61 = (char *)(v69 + 72 * v72);
            uint64_t v73 = *(uint64_t **)v61;
            if (v96 != *(uint64_t **)v61)
            {
              int v74 = 0;
              int v75 = 1;
              while (v73 != (uint64_t *)-4096)
              {
                if (v74) {
                  BOOL v76 = 0;
                }
                else {
                  BOOL v76 = v73 == (uint64_t *)-8192;
                }
                if (v76) {
                  int v74 = v61;
                }
                unsigned int v77 = v72 + v75++;
                unsigned int v72 = v77 & v71;
                uint64_t v61 = (char *)(v69 + 72 * v72);
                uint64_t v73 = *(uint64_t **)v61;
                if (v96 == *(uint64_t **)v61) {
                  goto LABEL_83;
                }
              }
              if (v74) {
                int v78 = v74;
              }
              else {
                int v78 = v61;
              }
LABEL_82:
              uint64_t v61 = llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>,mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::InfoRec>>::InsertIntoBucket<mlir::Block * const&>(v92, v78, (uint64_t *)&v96);
              uint64_t v70 = v96;
            }
LABEL_83:
            uint64_t v79 = v101;
            if (v101 >= (unint64_t)HIDWORD(v101))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v100, v102, v101 + 1, 8);
              uint64_t v79 = v101;
            }
            *((void *)v100 + v79) = v70;
            long long v66 = v61 + 48;
            unint64_t v56 = *((unsigned int *)v61 + 12);
            LODWORD(v101) = v101 + 1;
            *((_DWORD *)v61 + 3) = a3;
            uint64_t v67 = v61 + 40;
            unsigned int v65 = v94;
            if (v56 < *((unsigned int *)v61 + 13)) {
              goto LABEL_54;
            }
LABEL_53:
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, v61 + 56, v56 + 1, 8);
            unint64_t v56 = *((unsigned int *)v61 + 12);
            goto LABEL_54;
          }
          int v78 = 0;
          goto LABEL_82;
        }
        unsigned int v65 = v94;
        if (!*((_DWORD *)v61 + 2)) {
          goto LABEL_69;
        }
        if (v57 == (uint64_t *)v94) {
          goto LABEL_55;
        }
        long long v66 = v61 + 48;
        unint64_t v56 = *((unsigned int *)v61 + 12);
        uint64_t v67 = v61 + 40;
        if (v56 >= *((unsigned int *)v61 + 13)) {
          goto LABEL_53;
        }
LABEL_54:
        *(void *)(*v67 + 8 * v56) = v65;
        ++*v66;
LABEL_55:
        if (++v54 == v55)
        {
          uint64_t v54 = (uint64_t **)v97;
          if (v97 != v99) {
LABEL_91:
          }
            free(v54);
LABEL_6:
          unsigned int v16 = v101;
          if (!v101) {
            goto LABEL_113;
          }
          goto LABEL_7;
        }
      }
    }
LABEL_43:
    operator delete(v31);
    goto LABEL_44;
  }
LABEL_113:
  if (v100 != v102) {
    free(v100);
  }
  return a3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (uint64_t *)result;
  while (2)
  {
    int v12 = a2 - 1;
    unsigned int v65 = a2 - 3;
    long long v66 = a2 - 2;
    unsigned int v13 = v11;
    uint64_t v67 = a2 - 1;
    while (1)
    {
      while (1)
      {
        uint64_t v11 = v13;
        uint64_t v14 = (char *)a2 - (char *)v13;
        unint64_t v15 = a2 - v13;
        if (!(!v6 & v5))
        {
          switch(v15)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              uint64_t v43 = *(a2 - 1);
              uint64_t v44 = *v13;
              uint64_t v45 = **a3;
              uint64_t v46 = *((unsigned int *)*a3 + 4);
              if (!v46) {
                goto LABEL_69;
              }
              unsigned int v47 = v46 - 1;
              LODWORD(v48) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
              uint64_t v49 = v45 + 16 * v48;
              uint64_t v50 = *(void *)v49;
              if (*(void *)v49 == v43)
              {
                unsigned int v51 = *(_DWORD *)(v49 + 8);
                goto LABEL_72;
              }
              int v58 = 1;
              break;
            case 3uLL:
              return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, v13 + 1, v12, a3);
            case 4uLL:
              return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, v13 + 1, v13 + 2, v12, a3);
            case 5uLL:
              return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, v13 + 1, v13 + 2, v13 + 3, v12, a3);
            default:
              JUMPOUT(0);
          }
          while (v50 != -4096)
          {
            int v59 = v48 + v58++;
            uint64_t v48 = v59 & v47;
            uint64_t v50 = *(void *)(v45 + 16 * v48);
            if (v50 == v43) {
              goto LABEL_70;
            }
          }
LABEL_69:
          uint64_t v48 = *((unsigned int *)*a3 + 4);
LABEL_70:
          unsigned int v51 = *(_DWORD *)(v45 + 16 * v48 + 8);
          if (!v46) {
            goto LABEL_79;
          }
          unsigned int v47 = v46 - 1;
LABEL_72:
          LODWORD(v60) = v47 & ((v44 >> 4) ^ (v44 >> 9));
          uint64_t v61 = v45 + 16 * v60;
          uint64_t v62 = *(void *)v61;
          if (*(void *)v61 == v44) {
            goto LABEL_73;
          }
          int v63 = 1;
          while (v62 != -4096)
          {
            int v64 = v60 + v63++;
            uint64_t v60 = v64 & v47;
            uint64_t v62 = *(void *)(v45 + 16 * v60);
            if (v62 == v44)
            {
              uint64_t v61 = v45 + 16 * v60;
              goto LABEL_73;
            }
          }
LABEL_79:
          uint64_t v61 = v45 + 16 * v46;
LABEL_73:
          if (v51 < *(_DWORD *)(v61 + 8))
          {
            *unsigned int v13 = v43;
            *(a2 - 1) = v44;
          }
          return result;
        }
        if (v14 <= 191)
        {
          if (a5)
          {
            return (uint64_t)std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, a2, a3);
          }
          else
          {
            return (uint64_t)std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, a2, a3);
          }
        }
        if (!a4)
        {
          if (v13 != a2)
          {
            unint64_t v52 = (v15 - 2) >> 1;
            unint64_t v53 = v52 + 1;
            uint64_t v54 = &v13[v52];
            do
            {
              std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v13, (unint64_t *)a3, v15, v54--);
              --v53;
            }
            while (v53);
            uint64_t v55 = (unint64_t)v14 >> 3;
            do
            {
              while (1)
              {
                uint64_t v57 = *v13;
                uint64_t result = (uint64_t)std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v13, a3, v55);
                if (v12 == (uint64_t *)result) {
                  break;
                }
                *(void *)uint64_t result = *v12;
                *v12-- = v57;
                uint64_t result = std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>((uint64_t)v13, result + 8, a3, (result + 8 - (uint64_t)v13) >> 3);
                BOOL v56 = v55-- <= 2;
                if (v56) {
                  return result;
                }
              }
              *(void *)uint64_t result = v57;
              --v12;
              BOOL v56 = v55-- <= 2;
            }
            while (!v56);
          }
          return result;
        }
        unint64_t v16 = v15 >> 1;
        uint64_t v17 = &v11[v15 >> 1];
        if ((unint64_t)v14 >= 0x401) {
          break;
        }
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v17, v11, v12, a3);
        --a4;
        if (a5) {
          goto LABEL_23;
        }
LABEL_11:
        uint64_t v24 = *v11;
        uint64_t v25 = **a3;
        uint64_t v26 = *((unsigned int *)*a3 + 4);
        if (v26)
        {
          uint64_t v27 = *(v11 - 1);
          unsigned int v28 = v26 - 1;
          LODWORD(v29) = (v26 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          uint64_t v30 = v25 + 16 * v29;
          uint64_t v31 = *(void *)v30;
          if (*(void *)v30 == v27)
          {
            unsigned int v32 = *(_DWORD *)(v30 + 8);
            goto LABEL_21;
          }
          int v33 = 1;
          while (v31 != -4096)
          {
            int v34 = v29 + v33++;
            uint64_t v29 = v34 & v28;
            uint64_t v31 = *(void *)(v25 + 16 * v29);
            if (v31 == v27) {
              goto LABEL_19;
            }
          }
        }
        uint64_t v29 = *((unsigned int *)*a3 + 4);
LABEL_19:
        unsigned int v32 = *(_DWORD *)(v25 + 16 * v29 + 8);
        if (!v26) {
          goto LABEL_32;
        }
        unsigned int v28 = v26 - 1;
LABEL_21:
        LODWORD(v35) = v28 & ((v24 >> 4) ^ (v24 >> 9));
        uint64_t v36 = v25 + 16 * v35;
        uint64_t v37 = *(void *)v36;
        if (*(void *)v36 == v24) {
          goto LABEL_22;
        }
        int v41 = 1;
        while (v37 != -4096)
        {
          int v42 = v35 + v41++;
          uint64_t v35 = v42 & v28;
          uint64_t v37 = *(void *)(v25 + 16 * v35);
          if (v37 == v24)
          {
            uint64_t v36 = v25 + 16 * v35;
            goto LABEL_22;
          }
        }
LABEL_32:
        uint64_t v36 = v25 + 16 * v26;
LABEL_22:
        if (v32 < *(_DWORD *)(v36 + 8)) {
          goto LABEL_23;
        }
        uint64_t result = (uint64_t)std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v11, a2, a3);
        unsigned int v13 = (uint64_t *)result;
        a5 = 0;
      }
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v17, v12, a3);
      uint64_t v18 = a4;
      uint64_t v19 = a2;
      uint64_t v20 = a5;
      unsigned int v21 = &v11[v16];
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11 + 1, v21 - 1, v66, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11 + 2, &v11[v16 + 1], v65, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v21 - 1, v17, &v11[v16 + 1], a3);
      uint64_t v22 = *v11;
      *uint64_t v11 = *v21;
      *unsigned int v21 = v22;
      a5 = v20;
      a2 = v19;
      uint64_t v23 = v18;
      int v12 = v67;
      a4 = v23 - 1;
      if ((a5 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_23:
      uint64_t v38 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(v11, a2, a3);
      if ((v39 & 1) == 0) {
        goto LABEL_26;
      }
      BOOL v40 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v11, v38, a3);
      unsigned int v13 = v38 + 1;
      uint64_t result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(v38 + 1, a2, a3);
      if (result) {
        break;
      }
      if (!v40)
      {
LABEL_26:
        uint64_t result = std::__introsort<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**,false>(v11, v38, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v13 = v38 + 1;
      }
    }
    a2 = v38;
    if (!v40) {
      continue;
    }
    return result;
  }
}

void *std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(void *result, void *a2, uint64_t **a3)
{
  if (result != a2)
  {
    unsigned int v3 = result + 1;
    if (result + 1 != a2)
    {
      unsigned int v4 = result;
      do
      {
        char v6 = v3;
        uint64_t v8 = *v4;
        uint64_t v7 = v4[1];
        uint64_t v9 = **a3;
        uint64_t v10 = *((unsigned int *)*a3 + 4);
        unsigned int v11 = v7 >> 4;
        if (v10)
        {
          unsigned int v12 = v10 - 1;
          LODWORD(v13) = (v10 - 1) & (v11 ^ (v7 >> 9));
          uint64_t v14 = (uint64_t *)(v9 + 16 * v13);
          uint64_t v15 = *v14;
          if (*v14 == v7)
          {
            unsigned int v16 = *((_DWORD *)v14 + 2);
            goto LABEL_17;
          }
          int v17 = 1;
          while (v15 != -4096)
          {
            int v18 = v13 + v17++;
            uint64_t v13 = v18 & v12;
            uint64_t v15 = *(void *)(v9 + 16 * v13);
            if (v15 == v7) {
              goto LABEL_15;
            }
          }
        }
        uint64_t v13 = *((unsigned int *)*a3 + 4);
LABEL_15:
        unsigned int v16 = *(_DWORD *)(v9 + 16 * v13 + 8);
        if (!v10) {
          goto LABEL_43;
        }
        unsigned int v12 = v10 - 1;
LABEL_17:
        LODWORD(v19) = v12 & ((v8 >> 4) ^ (v8 >> 9));
        uint64_t v20 = (uint64_t *)(v9 + 16 * v19);
        uint64_t v21 = *v20;
        if (*v20 != v8)
        {
          int v38 = 1;
          while (v21 != -4096)
          {
            int v39 = v19 + v38++;
            uint64_t v19 = v39 & v12;
            uint64_t v21 = *(void *)(v9 + 16 * v19);
            if (v21 == v8)
            {
              if (v16 >= *(_DWORD *)(v9 + 16 * v19 + 8)) {
                goto LABEL_6;
              }
              goto LABEL_19;
            }
          }
LABEL_43:
          if (v16 >= *(_DWORD *)(v9 + 16 * v10 + 8)) {
            goto LABEL_6;
          }
          goto LABEL_19;
        }
        if (v16 >= *((_DWORD *)v20 + 2)) {
          goto LABEL_6;
        }
LABEL_19:
        unsigned int v22 = v11 ^ (v7 >> 9);
        char v5 = v6;
        while (1)
        {
          void *v5 = v8;
          if (v4 == result) {
            break;
          }
          char v5 = v4;
          uint64_t v27 = *--v4;
          uint64_t v8 = v27;
          uint64_t v28 = **a3;
          uint64_t v29 = *((unsigned int *)*a3 + 4);
          if (v29)
          {
            unsigned int v23 = v29 - 1;
            LODWORD(v30) = (v29 - 1) & v22;
            uint64_t v31 = (uint64_t *)(v28 + 16 * v30);
            uint64_t v32 = *v31;
            if (*v31 == v7)
            {
              unsigned int v33 = *((_DWORD *)v31 + 2);
              goto LABEL_21;
            }
            int v36 = 1;
            while (v32 != -4096)
            {
              int v37 = v30 + v36++;
              uint64_t v30 = v37 & v23;
              uint64_t v32 = *(void *)(v28 + 16 * v30);
              if (v32 == v7) {
                goto LABEL_36;
              }
            }
          }
          uint64_t v30 = *((unsigned int *)*a3 + 4);
LABEL_36:
          unsigned int v33 = *(_DWORD *)(v28 + 16 * v30 + 8);
          if (!v29) {
            goto LABEL_37;
          }
          unsigned int v23 = v29 - 1;
LABEL_21:
          LODWORD(v24) = v23 & ((v8 >> 4) ^ (v8 >> 9));
          uint64_t v25 = (uint64_t *)(v28 + 16 * v24);
          uint64_t v26 = *v25;
          if (*v25 != v8)
          {
            int v34 = 1;
            while (v26 != -4096)
            {
              int v35 = v24 + v34++;
              uint64_t v24 = v35 & v23;
              uint64_t v26 = *(void *)(v28 + 16 * v24);
              if (v26 == v8)
              {
                uint64_t v25 = (uint64_t *)(v28 + 16 * v24);
                goto LABEL_22;
              }
            }
LABEL_37:
            uint64_t v25 = (uint64_t *)(v28 + 16 * v29);
          }
LABEL_22:
          if (v33 >= *((_DWORD *)v25 + 2)) {
            goto LABEL_5;
          }
        }
        char v5 = result;
LABEL_5:
        void *v5 = v7;
LABEL_6:
        unsigned int v3 = v6 + 1;
        unsigned int v4 = v6;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

void *std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(void *result, void *a2, uint64_t **a3)
{
  if (result != a2)
  {
    unsigned int v3 = result + 1;
    while (1)
    {
      if (v3 == a2) {
        return result;
      }
      unsigned int v4 = v3;
      uint64_t v6 = *result;
      uint64_t v5 = result[1];
      uint64_t v7 = **a3;
      uint64_t v8 = *((unsigned int *)*a3 + 4);
      unsigned int v9 = v5 >> 4;
      if (v8)
      {
        unsigned int v10 = v8 - 1;
        LODWORD(v11) = (v8 - 1) & (v9 ^ (v5 >> 9));
        unsigned int v12 = (uint64_t *)(v7 + 16 * v11);
        uint64_t v13 = *v12;
        if (*v12 == v5)
        {
          unsigned int v14 = *((_DWORD *)v12 + 2);
          goto LABEL_16;
        }
        int v15 = 1;
        while (v13 != -4096)
        {
          int v16 = v11 + v15++;
          uint64_t v11 = v16 & v10;
          uint64_t v13 = *(void *)(v7 + 16 * v11);
          if (v13 == v5) {
            goto LABEL_14;
          }
        }
      }
      uint64_t v11 = *((unsigned int *)*a3 + 4);
LABEL_14:
      unsigned int v14 = *(_DWORD *)(v7 + 16 * v11 + 8);
      if (!v8) {
        goto LABEL_40;
      }
      unsigned int v10 = v8 - 1;
LABEL_16:
      LODWORD(v17) = v10 & ((v6 >> 4) ^ (v6 >> 9));
      int v18 = (uint64_t *)(v7 + 16 * v17);
      uint64_t v19 = *v18;
      if (*v18 == v6) {
        goto LABEL_17;
      }
      int v37 = 1;
      while (v19 != -4096)
      {
        int v38 = v17 + v37++;
        uint64_t v17 = v38 & v10;
        uint64_t v19 = *(void *)(v7 + 16 * v17);
        if (v19 == v6)
        {
          int v18 = (uint64_t *)(v7 + 16 * v17);
          goto LABEL_17;
        }
      }
LABEL_40:
      int v18 = (uint64_t *)(v7 + 16 * v8);
LABEL_17:
      if (v14 < *((_DWORD *)v18 + 2))
      {
        unsigned int v20 = v9 ^ (v5 >> 9);
        uint64_t v21 = v4;
        while (1)
        {
          *uint64_t v21 = v6;
          uint64_t v21 = result;
          uint64_t v26 = *--result;
          uint64_t v6 = v26;
          uint64_t v27 = **a3;
          uint64_t v28 = *((unsigned int *)*a3 + 4);
          if (v28)
          {
            unsigned int v22 = v28 - 1;
            LODWORD(v29) = (v28 - 1) & v20;
            uint64_t v30 = (uint64_t *)(v27 + 16 * v29);
            uint64_t v31 = *v30;
            if (*v30 == v5)
            {
              unsigned int v32 = *((_DWORD *)v30 + 2);
              goto LABEL_20;
            }
            int v35 = 1;
            while (v31 != -4096)
            {
              int v36 = v29 + v35++;
              uint64_t v29 = v36 & v22;
              uint64_t v31 = *(void *)(v27 + 16 * v29);
              if (v31 == v5) {
                goto LABEL_34;
              }
            }
          }
          uint64_t v29 = *((unsigned int *)*a3 + 4);
LABEL_34:
          unsigned int v32 = *(_DWORD *)(v27 + 16 * v29 + 8);
          if (!v28) {
            goto LABEL_35;
          }
          unsigned int v22 = v28 - 1;
LABEL_20:
          LODWORD(v23) = v22 & ((v6 >> 4) ^ (v6 >> 9));
          uint64_t v24 = (uint64_t *)(v27 + 16 * v23);
          uint64_t v25 = *v24;
          if (*v24 != v6)
          {
            int v33 = 1;
            while (v25 != -4096)
            {
              int v34 = v23 + v33++;
              uint64_t v23 = v34 & v22;
              uint64_t v25 = *(void *)(v27 + 16 * v23);
              if (v25 == v6)
              {
                uint64_t v24 = (uint64_t *)(v27 + 16 * v23);
                goto LABEL_21;
              }
            }
LABEL_35:
            uint64_t v24 = (uint64_t *)(v27 + 16 * v28);
          }
LABEL_21:
          if (v32 >= *((_DWORD *)v24 + 2))
          {
            *uint64_t v21 = v5;
            break;
          }
        }
      }
      unsigned int v3 = v4 + 1;
      uint64_t result = v4;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = **a4;
  uint64_t v7 = *((unsigned int *)*a4 + 4);
  unsigned int v8 = *a2 >> 4;
  unsigned int v9 = *a1 >> 4;
  if (v7)
  {
    unsigned int v10 = v7 - 1;
    LODWORD(v11) = (v7 - 1) & (v8 ^ (v4 >> 9));
    unsigned int v12 = (uint64_t *)(v6 + 16 * v11);
    uint64_t v13 = *v12;
    if (*v12 == v4)
    {
      unsigned int v14 = *((_DWORD *)v12 + 2);
      LODWORD(v15) = v10 & (v9 ^ (v5 >> 9));
      int v16 = (uint64_t *)(v6 + 16 * v15);
      uint64_t v17 = *v16;
      if (*v16 == v5) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
    int v38 = 1;
    while (v13 != -4096)
    {
      int v39 = v11 + v38++;
      uint64_t v11 = v39 & v10;
      uint64_t v13 = *(void *)(v6 + 16 * v11);
      if (v13 == v4) {
        goto LABEL_18;
      }
    }
  }
  uint64_t v11 = *((unsigned int *)*a4 + 4);
LABEL_18:
  unsigned int v14 = *(_DWORD *)(v6 + 16 * v11 + 8);
  if (!v7) {
    goto LABEL_24;
  }
  unsigned int v10 = v7 - 1;
  LODWORD(v15) = (v7 - 1) & (v9 ^ (v5 >> 9));
  int v16 = (uint64_t *)(v6 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 == v5)
  {
LABEL_4:
    uint64_t v18 = *a3;
    if (v14 < *((_DWORD *)v16 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_20:
  int v40 = 1;
  while (v17 != -4096)
  {
    int v41 = v15 + v40++;
    uint64_t v15 = v41 & v10;
    uint64_t v17 = *(void *)(v6 + 16 * v15);
    if (v17 == v5) {
      goto LABEL_25;
    }
  }
LABEL_24:
  uint64_t v15 = *((unsigned int *)*a4 + 4);
LABEL_25:
  unsigned int v42 = *(_DWORD *)(v6 + 16 * v15 + 8);
  uint64_t v18 = *a3;
  if (v14 < v42)
  {
    if (!v7) {
      goto LABEL_41;
    }
    unsigned int v10 = v7 - 1;
LABEL_5:
    LODWORD(v19) = ((v18 >> 4) ^ (v18 >> 9)) & v10;
    unsigned int v20 = (uint64_t *)(v6 + 16 * v19);
    uint64_t v21 = *v20;
    if (*v20 == v18)
    {
      unsigned int v22 = *((_DWORD *)v20 + 2);
      LODWORD(v23) = v10 & (v8 ^ (v4 >> 9));
      uint64_t v24 = (uint64_t *)(v6 + 16 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v4) {
        goto LABEL_7;
      }
      goto LABEL_44;
    }
    int v59 = 1;
    while (v21 != -4096)
    {
      int v60 = v19 + v59++;
      uint64_t v19 = v60 & v10;
      uint64_t v21 = *(void *)(v6 + 16 * v19);
      if (v21 == v18) {
        goto LABEL_42;
      }
    }
LABEL_41:
    uint64_t v19 = *((unsigned int *)*a4 + 4);
LABEL_42:
    unsigned int v22 = *(_DWORD *)(v6 + 16 * v19 + 8);
    if (!v7) {
      goto LABEL_48;
    }
    unsigned int v10 = v7 - 1;
    LODWORD(v23) = (v7 - 1) & (v8 ^ (v4 >> 9));
    uint64_t v24 = (uint64_t *)(v6 + 16 * v23);
    uint64_t v25 = *v24;
    if (*v24 == v4) {
      goto LABEL_7;
    }
LABEL_44:
    int v61 = 1;
    while (v25 != -4096)
    {
      int v62 = v23 + v61++;
      uint64_t v23 = v62 & v10;
      uint64_t v25 = *(void *)(v6 + 16 * v23);
      if (v25 == v4)
      {
        uint64_t v24 = (uint64_t *)(v6 + 16 * v23);
        goto LABEL_7;
      }
    }
LABEL_48:
    uint64_t v24 = (uint64_t *)(v6 + 16 * v7);
LABEL_7:
    if (v22 < *((_DWORD *)v24 + 2))
    {
      *a1 = v18;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v27 = *a3;
    uint64_t v28 = **a4;
    uint64_t v29 = *((unsigned int *)*a4 + 4);
    if (v29)
    {
      unsigned int v30 = v29 - 1;
      LODWORD(v31) = (v29 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      unsigned int v32 = (uint64_t *)(v28 + 16 * v31);
      uint64_t v33 = *v32;
      if (*v32 == v27)
      {
        unsigned int v34 = *((_DWORD *)v32 + 2);
        LODWORD(v35) = v30 & (v9 ^ (v5 >> 9));
        int v36 = (uint64_t *)(v28 + 16 * v35);
        uint64_t v37 = *v36;
        if (*v36 == v5) {
          goto LABEL_73;
        }
        goto LABEL_68;
      }
      int v67 = 1;
      while (v33 != -4096)
      {
        int v68 = v31 + v67++;
        uint64_t v31 = v68 & v30;
        uint64_t v33 = *(void *)(v28 + 16 * v31);
        if (v33 == v27) {
          goto LABEL_66;
        }
      }
    }
    uint64_t v31 = *((unsigned int *)*a4 + 4);
LABEL_66:
    unsigned int v34 = *(_DWORD *)(v28 + 16 * v31 + 8);
    if (!v29) {
      goto LABEL_72;
    }
    unsigned int v30 = v29 - 1;
    LODWORD(v35) = (v29 - 1) & (v9 ^ (v5 >> 9));
    int v36 = (uint64_t *)(v28 + 16 * v35);
    uint64_t v37 = *v36;
    if (*v36 == v5) {
      goto LABEL_73;
    }
LABEL_68:
    int v69 = 1;
    while (v37 != -4096)
    {
      int v70 = v35 + v69++;
      uint64_t v35 = v70 & v30;
      uint64_t v37 = *(void *)(v28 + 16 * v35);
      if (v37 == v5)
      {
        int v36 = (uint64_t *)(v28 + 16 * v35);
        goto LABEL_73;
      }
    }
LABEL_72:
    int v36 = (uint64_t *)(v28 + 16 * v29);
LABEL_73:
    if (v34 < *((_DWORD *)v36 + 2))
    {
      *a2 = v27;
      *a3 = v5;
      return 2;
    }
    return 1;
  }
  if (!v7) {
    goto LABEL_53;
  }
  unsigned int v10 = v7 - 1;
LABEL_30:
  LODWORD(v43) = ((v18 >> 4) ^ (v18 >> 9)) & v10;
  uint64_t v44 = (uint64_t *)(v6 + 16 * v43);
  uint64_t v45 = *v44;
  if (*v44 == v18)
  {
    unsigned int v46 = *((_DWORD *)v44 + 2);
    LODWORD(v47) = v10 & (v8 ^ (v4 >> 9));
    uint64_t v48 = (uint64_t *)(v6 + 16 * v47);
    uint64_t v49 = *v48;
    if (*v48 == v4) {
      goto LABEL_32;
    }
    goto LABEL_56;
  }
  int v63 = 1;
  while (v45 != -4096)
  {
    int v64 = v43 + v63++;
    uint64_t v43 = v64 & v10;
    uint64_t v45 = *(void *)(v6 + 16 * v43);
    if (v45 == v18) {
      goto LABEL_54;
    }
  }
LABEL_53:
  uint64_t v43 = *((unsigned int *)*a4 + 4);
LABEL_54:
  unsigned int v46 = *(_DWORD *)(v6 + 16 * v43 + 8);
  if (!v7) {
    goto LABEL_60;
  }
  unsigned int v10 = v7 - 1;
  LODWORD(v47) = (v7 - 1) & (v8 ^ (v4 >> 9));
  uint64_t v48 = (uint64_t *)(v6 + 16 * v47);
  uint64_t v49 = *v48;
  if (*v48 == v4) {
    goto LABEL_32;
  }
LABEL_56:
  int v65 = 1;
  while (v49 != -4096)
  {
    int v66 = v47 + v65++;
    uint64_t v47 = v66 & v10;
    uint64_t v49 = *(void *)(v6 + 16 * v47);
    if (v49 == v4)
    {
      uint64_t v48 = (uint64_t *)(v6 + 16 * v47);
      goto LABEL_32;
    }
  }
LABEL_60:
  uint64_t v48 = (uint64_t *)(v6 + 16 * v7);
LABEL_32:
  if (v46 >= *((_DWORD *)v48 + 2)) {
    return 0;
  }
  *a2 = v18;
  *a3 = v4;
  uint64_t v50 = *a2;
  uint64_t v51 = *a1;
  uint64_t v52 = **a4;
  uint64_t v53 = *((unsigned int *)*a4 + 4);
  if (v53)
  {
    unsigned int v54 = v53 - 1;
    LODWORD(v55) = (v53 - 1) & ((v50 >> 4) ^ (v50 >> 9));
    BOOL v56 = (uint64_t *)(v52 + 16 * v55);
    uint64_t v57 = *v56;
    if (*v56 == v50)
    {
      unsigned int v58 = *((_DWORD *)v56 + 2);
      goto LABEL_82;
    }
    int v71 = 1;
    while (v57 != -4096)
    {
      int v72 = v55 + v71++;
      uint64_t v55 = v72 & v54;
      uint64_t v57 = *(void *)(v52 + 16 * v55);
      if (v57 == v50) {
        goto LABEL_80;
      }
    }
  }
  uint64_t v55 = *((unsigned int *)*a4 + 4);
LABEL_80:
  unsigned int v58 = *(_DWORD *)(v52 + 16 * v55 + 8);
  if (!v53) {
    goto LABEL_90;
  }
  unsigned int v54 = v53 - 1;
LABEL_82:
  LODWORD(v73) = v54 & ((v51 >> 4) ^ (v51 >> 9));
  int v74 = (uint64_t *)(v52 + 16 * v73);
  uint64_t v75 = *v74;
  if (*v74 == v51) {
    goto LABEL_83;
  }
  int v76 = 1;
  while (v75 != -4096)
  {
    int v77 = v73 + v76++;
    uint64_t v73 = v77 & v54;
    uint64_t v75 = *(void *)(v52 + 16 * v73);
    if (v75 == v51)
    {
      int v74 = (uint64_t *)(v52 + 16 * v73);
      goto LABEL_83;
    }
  }
LABEL_90:
  int v74 = (uint64_t *)(v52 + 16 * v53);
LABEL_83:
  if (v58 < *((_DWORD *)v74 + 2))
  {
    *a1 = v50;
    *a2 = v51;
    return 2;
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(a2 - 1);
  uint64_t v5 = **a3;
  uint64_t v6 = *((unsigned int *)*a3 + 4);
  unsigned int v7 = *a1 >> 4;
  if (v6)
  {
    unsigned int v8 = v6 - 1;
    LODWORD(v9) = (v6 - 1) & (v7 ^ (v3 >> 9));
    unsigned int v10 = (uint64_t *)(v5 + 16 * v9);
    uint64_t v11 = *v10;
    if (*v10 == v3)
    {
      unsigned int v12 = *((_DWORD *)v10 + 2);
      goto LABEL_11;
    }
    int v13 = 1;
    while (v11 != -4096)
    {
      int v14 = v9 + v13++;
      uint64_t v9 = v14 & v8;
      uint64_t v11 = *(void *)(v5 + 16 * v9);
      if (v11 == v3) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v9 = *((unsigned int *)*a3 + 4);
LABEL_9:
  unsigned int v12 = *(_DWORD *)(v5 + 16 * v9 + 8);
  if (!v6) {
    goto LABEL_107;
  }
  unsigned int v8 = v6 - 1;
LABEL_11:
  LODWORD(v15) = v8 & ((v4 >> 4) ^ (v4 >> 9));
  int v16 = (uint64_t *)(v5 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16 == v4) {
    goto LABEL_12;
  }
  int v92 = 1;
  while (v17 != -4096)
  {
    int v93 = v15 + v92++;
    uint64_t v15 = v93 & v8;
    uint64_t v17 = *(void *)(v5 + 16 * v15);
    if (v17 == v4)
    {
      int v16 = (uint64_t *)(v5 + 16 * v15);
      goto LABEL_12;
    }
  }
LABEL_107:
  int v16 = (uint64_t *)(v5 + 16 * v6);
LABEL_12:
  unsigned int v18 = v7 ^ (v3 >> 9);
  unsigned int v19 = v6 - 1;
  unsigned int v20 = (void *)(v5 + 16 * ((v6 - 1) & v18));
  uint64_t v21 = (unsigned int *)(v5 + 16 * v6 + 8);
  unsigned int v22 = a1;
  if (v12 >= *((_DWORD *)v16 + 2))
  {
    while (1)
    {
      if (++v22 >= a2) {
        goto LABEL_47;
      }
      if (v6)
      {
        uint64_t v38 = *v20;
        int v39 = (unsigned int *)(v20 + 1);
        if (*v20 != v3)
        {
          int v44 = 1;
          LODWORD(v45) = v19 & v18;
          while (v38 != -4096)
          {
            int v46 = v45 + v44++;
            uint64_t v45 = v46 & v19;
            uint64_t v38 = *(void *)(v5 + 16 * v45);
            if (v38 == v3) {
              goto LABEL_46;
            }
          }
          uint64_t v45 = *((unsigned int *)*a3 + 4);
LABEL_46:
          int v39 = (unsigned int *)(v5 + 16 * v45 + 8);
        }
        unsigned int v36 = *v39;
        LODWORD(v40) = ((*v22 >> 4) ^ (*v22 >> 9)) & v19;
        uint64_t v37 = (uint64_t *)(v5 + 16 * v40);
        uint64_t v41 = *v37;
        if (*v37 == *v22) {
          goto LABEL_32;
        }
        int v42 = 1;
        while (v41 != -4096)
        {
          int v43 = v40 + v42++;
          uint64_t v40 = v43 & v19;
          uint64_t v41 = *(void *)(v5 + 16 * v40);
          if (v41 == *v22)
          {
            uint64_t v37 = (uint64_t *)(v5 + 16 * v40);
            goto LABEL_32;
          }
        }
      }
      else
      {
        unsigned int v36 = *v21;
      }
      uint64_t v37 = (uint64_t *)(v5 + 16 * v6);
LABEL_32:
      if (v36 < *((_DWORD *)v37 + 2)) {
        goto LABEL_47;
      }
    }
  }
  do
  {
    uint64_t v26 = v22[1];
    ++v22;
    uint64_t v25 = v26;
    if (!v6)
    {
      unsigned int v23 = *v21;
LABEL_15:
      uint64_t v24 = (uint64_t *)(v5 + 16 * v6);
      continue;
    }
    uint64_t v27 = *v20;
    uint64_t v28 = (unsigned int *)(v20 + 1);
    if (*v20 != v3)
    {
      int v33 = 1;
      LODWORD(v34) = v19 & v18;
      while (v27 != -4096)
      {
        int v35 = v34 + v33++;
        uint64_t v34 = v35 & v19;
        uint64_t v27 = *(void *)(v5 + 16 * v34);
        if (v27 == v3) {
          goto LABEL_29;
        }
      }
      uint64_t v34 = *((unsigned int *)*a3 + 4);
LABEL_29:
      uint64_t v28 = (unsigned int *)(v5 + 16 * v34 + 8);
    }
    unsigned int v23 = *v28;
    LODWORD(v29) = ((v25 >> 4) ^ (v25 >> 9)) & v19;
    uint64_t v24 = (uint64_t *)(v5 + 16 * v29);
    uint64_t v30 = *v24;
    if (*v24 != v25)
    {
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v29 + v31++;
        uint64_t v29 = v32 & v19;
        uint64_t v30 = *(void *)(v5 + 16 * v29);
        if (v30 == v25)
        {
          uint64_t v24 = (uint64_t *)(v5 + 16 * v29);
          goto LABEL_16;
        }
      }
      goto LABEL_15;
    }
LABEL_16:
    ;
  }
  while (v23 >= *((_DWORD *)v24 + 2));
LABEL_47:
  if (v22 < a2)
  {
    do
    {
      uint64_t v81 = *--a2;
      uint64_t v80 = v81;
      if (v6)
      {
        uint64_t v82 = *v20;
        unsigned int v83 = (unsigned int *)(v20 + 1);
        if (*v20 != v3)
        {
          int v88 = 1;
          LODWORD(v89) = v19 & v18;
          while (v82 != -4096)
          {
            int v90 = v89 + v88++;
            uint64_t v89 = v90 & v19;
            uint64_t v82 = *(void *)(v5 + 16 * v89);
            if (v82 == v3) {
              goto LABEL_99;
            }
          }
          uint64_t v89 = *((unsigned int *)*a3 + 4);
LABEL_99:
          unsigned int v83 = (unsigned int *)(v5 + 16 * v89 + 8);
        }
        unsigned int v78 = *v83;
        LODWORD(v84) = ((v80 >> 4) ^ (v80 >> 9)) & v19;
        uint64_t v79 = (uint64_t *)(v5 + 16 * v84);
        uint64_t v85 = *v79;
        if (*v79 == v80) {
          continue;
        }
        int v86 = 1;
        while (v85 != -4096)
        {
          int v87 = v84 + v86++;
          uint64_t v84 = v87 & v19;
          uint64_t v85 = *(void *)(v5 + 16 * v84);
          if (v85 == v80)
          {
            uint64_t v79 = (uint64_t *)(v5 + 16 * v84);
            goto LABEL_86;
          }
        }
      }
      else
      {
        unsigned int v78 = *v21;
      }
      uint64_t v79 = (uint64_t *)(v5 + 16 * v6);
LABEL_86:
      ;
    }
    while (v78 < *((_DWORD *)v79 + 2));
  }
  if (v22 < a2)
  {
    uint64_t v47 = *v22;
    uint64_t v48 = *a2;
    do
    {
      *unsigned int v22 = v48;
      *a2 = v47;
      uint64_t v49 = **a3;
      uint64_t v50 = *((unsigned int *)*a3 + 4);
      unsigned int v51 = v50 - 1;
      uint64_t v52 = (void *)(v49 + 16 * ((v50 - 1) & v18));
      uint64_t v53 = (unsigned int *)(v49 + 16 * v50 + 8);
      do
      {
        uint64_t v56 = v22[1];
        ++v22;
        uint64_t v47 = v56;
        if (!v50)
        {
          unsigned int v54 = *v53;
LABEL_53:
          uint64_t v55 = (uint64_t *)(v49 + 16 * v50);
          continue;
        }
        uint64_t v57 = *v52;
        unsigned int v58 = (unsigned int *)(v52 + 1);
        if (*v52 != v3)
        {
          int v63 = 1;
          LODWORD(v64) = v51 & v18;
          while (v57 != -4096)
          {
            int v65 = v64 + v63++;
            uint64_t v64 = v65 & v51;
            uint64_t v57 = *(void *)(v49 + 16 * v64);
            if (v57 == v3) {
              goto LABEL_67;
            }
          }
          uint64_t v64 = *((unsigned int *)*a3 + 4);
LABEL_67:
          unsigned int v58 = (unsigned int *)(v49 + 16 * v64 + 8);
        }
        unsigned int v54 = *v58;
        LODWORD(v59) = v51 & ((v47 >> 4) ^ (v47 >> 9));
        uint64_t v55 = (uint64_t *)(v49 + 16 * v59);
        uint64_t v60 = *v55;
        if (*v55 != v47)
        {
          int v61 = 1;
          while (v60 != -4096)
          {
            int v62 = v59 + v61++;
            uint64_t v59 = v62 & v51;
            uint64_t v60 = *(void *)(v49 + 16 * v59);
            if (v60 == v47)
            {
              uint64_t v55 = (uint64_t *)(v49 + 16 * v59);
              goto LABEL_54;
            }
          }
          goto LABEL_53;
        }
LABEL_54:
        ;
      }
      while (v54 >= *((_DWORD *)v55 + 2));
      do
      {
        uint64_t v68 = *--a2;
        uint64_t v48 = v68;
        if (!v50)
        {
          unsigned int v66 = *v53;
LABEL_69:
          int v67 = (uint64_t *)(v49 + 16 * v50);
          continue;
        }
        uint64_t v69 = *v52;
        int v70 = (unsigned int *)(v52 + 1);
        if (*v52 != v3)
        {
          int v75 = 1;
          LODWORD(v76) = v51 & v18;
          while (v69 != -4096)
          {
            int v77 = v76 + v75++;
            uint64_t v76 = v77 & v51;
            uint64_t v69 = *(void *)(v49 + 16 * v76);
            if (v69 == v3) {
              goto LABEL_83;
            }
          }
          uint64_t v76 = *((unsigned int *)*a3 + 4);
LABEL_83:
          int v70 = (unsigned int *)(v49 + 16 * v76 + 8);
        }
        unsigned int v66 = *v70;
        LODWORD(v71) = ((v48 >> 4) ^ (v48 >> 9)) & v51;
        int v67 = (uint64_t *)(v49 + 16 * v71);
        uint64_t v72 = *v67;
        if (*v67 != v48)
        {
          int v73 = 1;
          while (v72 != -4096)
          {
            int v74 = v71 + v73++;
            uint64_t v71 = v74 & v51;
            uint64_t v72 = *(void *)(v49 + 16 * v71);
            if (v72 == v48)
            {
              int v67 = (uint64_t *)(v49 + 16 * v71);
              goto LABEL_70;
            }
          }
          goto LABEL_69;
        }
LABEL_70:
        ;
      }
      while (v66 < *((_DWORD *)v67 + 2));
    }
    while (v22 < a2);
  }
  if (v22 - 1 != a1) {
    *a1 = *(v22 - 1);
  }
  *(v22 - 1) = v3;
  return v22;
}

void *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,mlir::Block **,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block *,mlir::Block *)>(mlir::Block *,unsigned int,BOOL (*)(mlir::Block *,mlir::Block *),unsigned int,llvm::DenseMap<mlir::Block *,unsigned int,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,unsigned int>> const*)::{lambda(mlir::Block *,mlir::Block *)#1} &>(void *a1, void *a2, uint64_t **a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a3;
  uint64_t v5 = *((unsigned int *)*a3 + 4);
  unsigned int v6 = v5 - 1;
  unsigned int v7 = (*a1 >> 4) ^ (*a1 >> 9);
  unsigned int v8 = (v5 - 1) & v7;
  uint64_t v9 = (uint64_t *)(v4 + 16 * v8);
  unsigned int v10 = (unsigned int *)(v4 + 16 * v5 + 8);
  uint64_t v11 = a1;
  do
  {
    int v13 = v11;
    uint64_t v15 = v11[1];
    ++v11;
    uint64_t v14 = v15;
    if (v5)
    {
      LODWORD(v16) = v6 & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v17 = (uint64_t *)(v4 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == v14)
      {
        unsigned int v19 = *((_DWORD *)v17 + 2);
        uint64_t v20 = *v9;
        if (*v9 == v3) {
          goto LABEL_2;
        }
      }
      else
      {
        int v24 = 1;
        while (v18 != -4096)
        {
          int v25 = v16 + v24++;
          uint64_t v16 = v25 & v6;
          uint64_t v18 = *(void *)(v4 + 16 * v16);
          if (v18 == v14) {
            goto LABEL_18;
          }
        }
        uint64_t v16 = *((unsigned int *)*a3 + 4);
LABEL_18:
        unsigned int v19 = *(_DWORD *)(v4 + 16 * v16 + 8);
        uint64_t v20 = *v9;
        if (*v9 == v3)
        {
LABEL_2:
          uint64_t v12 = v4 + 16 * v8;
          continue;
        }
      }
      int v21 = 1;
      LODWORD(v22) = v6 & v7;
      while (v20 != -4096)
      {
        int v23 = v22 + v21++;
        uint64_t v22 = v23 & v6;
        uint64_t v20 = *(void *)(v4 + 16 * v22);
        if (v20 == v3)
        {
          uint64_t v12 = v4 + 16 * v22;
          goto LABEL_3;
        }
      }
    }
    else
    {
      unsigned int v19 = *v10;
    }
    uint64_t v12 = v4 + 16 * v5;
LABEL_3:
    ;
  }
  while (v19 < *(_DWORD *)(v12 + 8));
  if (v13 == a1)
  {
    while (1)
    {
      if (v11 >= a2) {
        goto LABEL_59;
      }
      uint64_t v41 = *--a2;
      uint64_t v40 = v41;
      if (!v5) {
        break;
      }
      LODWORD(v42) = ((v40 >> 4) ^ (v40 >> 9)) & v6;
      int v43 = (uint64_t *)(v4 + 16 * v42);
      uint64_t v44 = *v43;
      if (*v43 == v40)
      {
        unsigned int v45 = *((_DWORD *)v43 + 2);
        uint64_t v46 = *v9;
        if (*v9 != v3) {
          goto LABEL_46;
        }
      }
      else
      {
        int v50 = 1;
        while (v44 != -4096)
        {
          int v51 = v42 + v50++;
          uint64_t v42 = v51 & v6;
          uint64_t v44 = *(void *)(v4 + 16 * v42);
          if (v44 == v40) {
            goto LABEL_57;
          }
        }
        uint64_t v42 = *((unsigned int *)*a3 + 4);
LABEL_57:
        unsigned int v45 = *(_DWORD *)(v4 + 16 * v42 + 8);
        uint64_t v46 = *v9;
        if (*v9 != v3)
        {
LABEL_46:
          int v47 = 1;
          LODWORD(v48) = v6 & v7;
          while (v46 != -4096)
          {
            int v49 = v48 + v47++;
            uint64_t v48 = v49 & v6;
            uint64_t v46 = *(void *)(v4 + 16 * v48);
            if (v46 == v3)
            {
              uint64_t v39 = v4 + 16 * v48;
              goto LABEL_41;
            }
          }
          goto LABEL_51;
        }
      }
      uint64_t v39 = v4 + 16 * v8;
LABEL_41:
      if (v45 < *(_DWORD *)(v39 + 8)) {
        goto LABEL_59;
      }
    }
    unsigned int v45 = *v10;
LABEL_51:
    uint64_t v39 = v4 + 16 * v5;
    goto LABEL_41;
  }
  while (2)
  {
    uint64_t v28 = *--a2;
    uint64_t v27 = v28;
    if (!v5)
    {
      unsigned int v32 = *v10;
LABEL_32:
      uint64_t v26 = v4 + 16 * v5;
      goto LABEL_23;
    }
    LODWORD(v29) = ((v27 >> 4) ^ (v27 >> 9)) & v6;
    uint64_t v30 = (uint64_t *)(v4 + 16 * v29);
    uint64_t v31 = *v30;
    if (*v30 != v27)
    {
      int v37 = 1;
      while (v31 != -4096)
      {
        int v38 = v29 + v37++;
        uint64_t v29 = v38 & v6;
        uint64_t v31 = *(void *)(v4 + 16 * v29);
        if (v31 == v27) {
          goto LABEL_38;
        }
      }
      uint64_t v29 = *((unsigned int *)*a3 + 4);
LABEL_38:
      unsigned int v32 = *(_DWORD *)(v4 + 16 * v29 + 8);
      uint64_t v33 = *v9;
      if (*v9 == v3) {
        goto LABEL_22;
      }
LABEL_27:
      int v34 = 1;
      LODWORD(v35) = v6 & v7;
      while (v33 != -4096)
      {
        int v36 = v35 + v34++;
        uint64_t v35 = v36 & v6;
        uint64_t v33 = *(void *)(v4 + 16 * v35);
        if (v33 == v3)
        {
          uint64_t v26 = v4 + 16 * v35;
          goto LABEL_23;
        }
      }
      goto LABEL_32;
    }
    unsigned int v32 = *((_DWORD *)v30 + 2);
    uint64_t v33 = *v9;
    if (*v9 != v3) {
      goto LABEL_27;
    }
LABEL_22:
    uint64_t v26 = v4 + 16 * v8;
LABEL_23:
    if (v32 >= *(_DWORD *)(v26 + 8)) {
      continue;
    }
    break;
  }
LABEL_59:
  if (v11 < a2)
  {
    uint64_t v52 = *a2;
    uint64_t v53 = v11;
    unsigned int v54 = a2;
    do
    {
      *uint64_t v53 = v52;
      *unsigned int v54 = v14;
      uint64_t v55 = **a3;
      uint64_t v56 = *((unsigned int *)*a3 + 4);
      unsigned int v57 = v56 - 1;
      unsigned int v58 = (v56 - 1) & v7;
      uint64_t v59 = (uint64_t *)(v55 + 16 * v58);
      uint64_t v60 = (unsigned int *)(v55 + 16 * v56 + 8);
      do
      {
        int v13 = v53;
        uint64_t v62 = v53[1];
        ++v53;
        uint64_t v14 = v62;
        if (v56)
        {
          LODWORD(v63) = v57 & ((v14 >> 4) ^ (v14 >> 9));
          uint64_t v64 = (uint64_t *)(v55 + 16 * v63);
          uint64_t v65 = *v64;
          if (*v64 == v14)
          {
            unsigned int v66 = *((_DWORD *)v64 + 2);
            uint64_t v67 = *v59;
            if (*v59 == v3) {
              goto LABEL_63;
            }
          }
          else
          {
            int v71 = 1;
            while (v65 != -4096)
            {
              int v72 = v63 + v71++;
              uint64_t v63 = v72 & v57;
              uint64_t v65 = *(void *)(v55 + 16 * v63);
              if (v65 == v14) {
                goto LABEL_79;
              }
            }
            uint64_t v63 = *((unsigned int *)*a3 + 4);
LABEL_79:
            unsigned int v66 = *(_DWORD *)(v55 + 16 * v63 + 8);
            uint64_t v67 = *v59;
            if (*v59 == v3)
            {
LABEL_63:
              uint64_t v61 = v55 + 16 * v58;
              continue;
            }
          }
          int v68 = 1;
          LODWORD(v69) = v57 & v7;
          while (v67 != -4096)
          {
            int v70 = v69 + v68++;
            uint64_t v69 = v70 & v57;
            uint64_t v67 = *(void *)(v55 + 16 * v69);
            if (v67 == v3)
            {
              uint64_t v61 = v55 + 16 * v69;
              goto LABEL_64;
            }
          }
        }
        else
        {
          unsigned int v66 = *v60;
        }
        uint64_t v61 = v55 + 16 * v56;
LABEL_64:
        ;
      }
      while (v66 < *(_DWORD *)(v61 + 8));
      do
      {
        uint64_t v74 = *--v54;
        uint64_t v52 = v74;
        if (v56)
        {
          LODWORD(v75) = ((v52 >> 4) ^ (v52 >> 9)) & v57;
          uint64_t v76 = (uint64_t *)(v55 + 16 * v75);
          uint64_t v77 = *v76;
          if (*v76 == v52)
          {
            unsigned int v78 = *((_DWORD *)v76 + 2);
            uint64_t v79 = *v59;
            if (*v59 == v3) {
              goto LABEL_81;
            }
          }
          else
          {
            int v83 = 1;
            while (v77 != -4096)
            {
              int v84 = v75 + v83++;
              uint64_t v75 = v84 & v57;
              uint64_t v77 = *(void *)(v55 + 16 * v75);
              if (v77 == v52) {
                goto LABEL_97;
              }
            }
            uint64_t v75 = *((unsigned int *)*a3 + 4);
LABEL_97:
            unsigned int v78 = *(_DWORD *)(v55 + 16 * v75 + 8);
            uint64_t v79 = *v59;
            if (*v59 == v3)
            {
LABEL_81:
              uint64_t v73 = v55 + 16 * v58;
              continue;
            }
          }
          int v80 = 1;
          LODWORD(v81) = v57 & v7;
          while (v79 != -4096)
          {
            int v82 = v81 + v80++;
            uint64_t v81 = v82 & v57;
            uint64_t v79 = *(void *)(v55 + 16 * v81);
            if (v79 == v3)
            {
              uint64_t v73 = v55 + 16 * v81;
              goto LABEL_82;
            }
          }
        }
        else
        {
          unsigned int v78 = *v60;
        }
        uint64_t v73 = v55 + 16 * v56;
LABEL_82:
        ;
      }
      while (v78 >= *(_DWORD *)(v73 + 8));
    }
    while (v53 < v54);
  }
  if (v13 != a1) {
    *a1 = *v13;
  }
  *int v13 = v3;
  return v13;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v45 = *(a2 - 1);
      uint64_t v46 = *a1;
      uint64_t v47 = **a3;
      uint64_t v48 = *((unsigned int *)*a3 + 4);
      if (!v48) {
        goto LABEL_55;
      }
      unsigned int v49 = v48 - 1;
      LODWORD(v50) = (v48 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      uint64_t v51 = v47 + 16 * v50;
      uint64_t v52 = *(void *)v51;
      if (*(void *)v51 == v45)
      {
        unsigned int v53 = *(_DWORD *)(v51 + 8);
        goto LABEL_58;
      }
      int v54 = 1;
      while (v52 != -4096)
      {
        int v55 = v50 + v54++;
        uint64_t v50 = v55 & v49;
        uint64_t v52 = *(void *)(v47 + 16 * v50);
        if (v52 == v45) {
          goto LABEL_56;
        }
      }
LABEL_55:
      uint64_t v50 = *((unsigned int *)*a3 + 4);
LABEL_56:
      unsigned int v53 = *(_DWORD *)(v47 + 16 * v50 + 8);
      if (!v48) {
        goto LABEL_65;
      }
      unsigned int v49 = v48 - 1;
LABEL_58:
      LODWORD(v56) = v49 & ((v46 >> 4) ^ (v46 >> 9));
      uint64_t v57 = v47 + 16 * v56;
      uint64_t v58 = *(void *)v57;
      if (*(void *)v57 == v46) {
        goto LABEL_59;
      }
      int v59 = 1;
      while (v58 != -4096)
      {
        int v60 = v56 + v59++;
        uint64_t v56 = v60 & v49;
        uint64_t v58 = *(void *)(v47 + 16 * v56);
        if (v58 == v46)
        {
          uint64_t v57 = v47 + 16 * v56;
          goto LABEL_59;
        }
      }
LABEL_65:
      uint64_t v57 = v47 + 16 * v48;
LABEL_59:
      if (v53 >= *(_DWORD *)(v57 + 8)) {
        return 1;
      }
      *a1 = v45;
      *(a2 - 1) = v46;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (2)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    uint64_t v14 = **a3;
    uint64_t v15 = *((unsigned int *)*a3 + 4);
    unsigned int v16 = *v9 >> 4;
    if (v15)
    {
      unsigned int v17 = v15 - 1;
      LODWORD(v18) = (v15 - 1) & (v16 ^ (v12 >> 9));
      uint64_t v19 = v14 + 16 * v18;
      uint64_t v20 = *(void *)v19;
      if (*(void *)v19 == v12)
      {
        unsigned int v21 = *(_DWORD *)(v19 + 8);
        goto LABEL_17;
      }
      int v22 = 1;
      while (v20 != -4096)
      {
        int v23 = v18 + v22++;
        uint64_t v18 = v23 & v17;
        uint64_t v20 = *(void *)(v14 + 16 * v18);
        if (v20 == v12) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v18 = *((unsigned int *)*a3 + 4);
LABEL_15:
    unsigned int v21 = *(_DWORD *)(v14 + 16 * v18 + 8);
    if (!v15) {
      goto LABEL_42;
    }
    unsigned int v17 = v15 - 1;
LABEL_17:
    LODWORD(v24) = v17 & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v25 = v14 + 16 * v24;
    uint64_t v26 = *(void *)v25;
    if (*(void *)v25 != v13)
    {
      int v43 = 1;
      while (v26 != -4096)
      {
        int v44 = v24 + v43++;
        uint64_t v24 = v44 & v17;
        uint64_t v26 = *(void *)(v14 + 16 * v24);
        if (v26 == v13)
        {
          uint64_t v25 = v14 + 16 * v24;
          goto LABEL_18;
        }
      }
LABEL_42:
      uint64_t v25 = v14 + 16 * v15;
    }
LABEL_18:
    if (v21 >= *(_DWORD *)(v25 + 8)) {
      goto LABEL_6;
    }
    unsigned int v27 = v16 ^ (v12 >> 9);
    uint64_t v11 = v9;
    while (1)
    {
      *uint64_t v11 = v13;
      if (v8 == a1) {
        break;
      }
      uint64_t v11 = v8;
      uint64_t v32 = *--v8;
      uint64_t v13 = v32;
      uint64_t v33 = **a3;
      uint64_t v34 = *((unsigned int *)*a3 + 4);
      if (v34)
      {
        unsigned int v28 = v34 - 1;
        LODWORD(v35) = (v34 - 1) & v27;
        uint64_t v36 = v33 + 16 * v35;
        uint64_t v37 = *(void *)v36;
        if (*(void *)v36 == v12)
        {
          unsigned int v38 = *(_DWORD *)(v36 + 8);
          goto LABEL_21;
        }
        int v41 = 1;
        while (v37 != -4096)
        {
          int v42 = v35 + v41++;
          uint64_t v35 = v42 & v28;
          uint64_t v37 = *(void *)(v33 + 16 * v35);
          if (v37 == v12) {
            goto LABEL_36;
          }
        }
      }
      uint64_t v35 = *((unsigned int *)*a3 + 4);
LABEL_36:
      unsigned int v38 = *(_DWORD *)(v33 + 16 * v35 + 8);
      if (!v34) {
        goto LABEL_37;
      }
      unsigned int v28 = v34 - 1;
LABEL_21:
      LODWORD(v29) = v28 & ((v13 >> 4) ^ (v13 >> 9));
      uint64_t v30 = v33 + 16 * v29;
      uint64_t v31 = *(void *)v30;
      if (*(void *)v30 != v13)
      {
        int v39 = 1;
        while (v31 != -4096)
        {
          int v40 = v29 + v39++;
          uint64_t v29 = v40 & v28;
          uint64_t v31 = *(void *)(v33 + 16 * v29);
          if (v31 == v13)
          {
            uint64_t v30 = v33 + 16 * v29;
            goto LABEL_22;
          }
        }
LABEL_37:
        uint64_t v30 = v33 + 16 * v34;
      }
LABEL_22:
      if (v38 >= *(_DWORD *)(v30 + 8)) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = a1;
LABEL_5:
    *uint64_t v11 = v12;
    if (++v10 == 8) {
      return v9 + 1 == a2;
    }
LABEL_6:
    unsigned int v8 = v9++;
    if (v9 != a2) {
      continue;
    }
    return 1;
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = **a5;
  uint64_t v14 = *((unsigned int *)*a5 + 4);
  if (v14)
  {
    unsigned int v15 = v14 - 1;
    LODWORD(v16) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    uint64_t v17 = v13 + 16 * v16;
    uint64_t v18 = *(void *)v17;
    if (*(void *)v17 == v11)
    {
      unsigned int v19 = *(_DWORD *)(v17 + 8);
      goto LABEL_11;
    }
    int v20 = 1;
    while (v18 != -4096)
    {
      int v21 = v16 + v20++;
      uint64_t v16 = v21 & v15;
      uint64_t v18 = *(void *)(v13 + 16 * v16);
      if (v18 == v11) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v16 = *((unsigned int *)*a5 + 4);
LABEL_9:
  unsigned int v19 = *(_DWORD *)(v13 + 16 * v16 + 8);
  if (!v14) {
    goto LABEL_20;
  }
  unsigned int v15 = v14 - 1;
LABEL_11:
  LODWORD(v22) = v15 & ((v12 >> 4) ^ (v12 >> 9));
  uint64_t v23 = v13 + 16 * v22;
  uint64_t v24 = *(void *)v23;
  if (*(void *)v23 == v12) {
    goto LABEL_12;
  }
  int v34 = 1;
  while (v24 != -4096)
  {
    int v35 = v22 + v34++;
    uint64_t v22 = v35 & v15;
    uint64_t v24 = *(void *)(v13 + 16 * v22);
    if (v24 == v12)
    {
      uint64_t v23 = v13 + 16 * v22;
      goto LABEL_12;
    }
  }
LABEL_20:
  uint64_t v23 = v13 + 16 * v14;
LABEL_12:
  if (v19 >= *(_DWORD *)(v23 + 8)) {
    return result;
  }
  *a3 = v11;
  *a4 = v12;
  uint64_t v25 = *a3;
  uint64_t v26 = *a2;
  uint64_t v27 = **a5;
  uint64_t v28 = *((unsigned int *)*a5 + 4);
  if (v28)
  {
    unsigned int v29 = v28 - 1;
    LODWORD(v30) = (v28 - 1) & ((v25 >> 4) ^ (v25 >> 9));
    uint64_t v31 = v27 + 16 * v30;
    uint64_t v32 = *(void *)v31;
    if (*(void *)v31 == v25)
    {
      unsigned int v33 = *(_DWORD *)(v31 + 8);
      goto LABEL_28;
    }
    int v36 = 1;
    while (v32 != -4096)
    {
      int v37 = v30 + v36++;
      uint64_t v30 = v37 & v29;
      uint64_t v32 = *(void *)(v27 + 16 * v30);
      if (v32 == v25) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v30 = *((unsigned int *)*a5 + 4);
LABEL_26:
  unsigned int v33 = *(_DWORD *)(v27 + 16 * v30 + 8);
  if (!v28) {
    goto LABEL_37;
  }
  unsigned int v29 = v28 - 1;
LABEL_28:
  LODWORD(v38) = v29 & ((v26 >> 4) ^ (v26 >> 9));
  uint64_t v39 = v27 + 16 * v38;
  uint64_t v40 = *(void *)v39;
  if (*(void *)v39 == v26) {
    goto LABEL_29;
  }
  int v50 = 1;
  while (v40 != -4096)
  {
    int v51 = v38 + v50++;
    uint64_t v38 = v51 & v29;
    uint64_t v40 = *(void *)(v27 + 16 * v38);
    if (v40 == v26)
    {
      uint64_t v39 = v27 + 16 * v38;
      goto LABEL_29;
    }
  }
LABEL_37:
  uint64_t v39 = v27 + 16 * v28;
LABEL_29:
  if (v33 >= *(_DWORD *)(v39 + 8)) {
    return result;
  }
  *a2 = v25;
  *a3 = v26;
  uint64_t v41 = *a2;
  uint64_t v42 = *a1;
  uint64_t v43 = **a5;
  uint64_t v44 = *((unsigned int *)*a5 + 4);
  if (v44)
  {
    unsigned int v45 = v44 - 1;
    LODWORD(v46) = (v44 - 1) & ((v41 >> 4) ^ (v41 >> 9));
    uint64_t v47 = v43 + 16 * v46;
    uint64_t v48 = *(void *)v47;
    if (*(void *)v47 == v41)
    {
      unsigned int v49 = *(_DWORD *)(v47 + 8);
      goto LABEL_45;
    }
    int v52 = 1;
    while (v48 != -4096)
    {
      int v53 = v46 + v52++;
      uint64_t v46 = v53 & v45;
      uint64_t v48 = *(void *)(v43 + 16 * v46);
      if (v48 == v41) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v46 = *((unsigned int *)*a5 + 4);
LABEL_43:
  unsigned int v49 = *(_DWORD *)(v43 + 16 * v46 + 8);
  if (!v44) {
    goto LABEL_53;
  }
  unsigned int v45 = v44 - 1;
LABEL_45:
  LODWORD(v54) = v45 & ((v42 >> 4) ^ (v42 >> 9));
  uint64_t v55 = v43 + 16 * v54;
  uint64_t v56 = *(void *)v55;
  if (*(void *)v55 == v42) {
    goto LABEL_46;
  }
  int v57 = 1;
  while (v56 != -4096)
  {
    int v58 = v54 + v57++;
    uint64_t v54 = v58 & v45;
    uint64_t v56 = *(void *)(v43 + 16 * v54);
    if (v56 == v42)
    {
      uint64_t v55 = v43 + 16 * v54;
      goto LABEL_46;
    }
  }
LABEL_53:
  uint64_t v55 = v43 + 16 * v44;
LABEL_46:
  if (v49 < *(_DWORD *)(v55 + 8))
  {
    *a1 = v41;
    *a2 = v42;
  }
  return result;
}

uint64_t std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = **a6;
  uint64_t v16 = *((unsigned int *)*a6 + 4);
  if (v16)
  {
    unsigned int v17 = v16 - 1;
    LODWORD(v18) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    uint64_t v19 = v15 + 16 * v18;
    uint64_t v20 = *(void *)v19;
    if (*(void *)v19 == v13)
    {
      unsigned int v21 = *(_DWORD *)(v19 + 8);
      goto LABEL_11;
    }
    int v22 = 1;
    while (v20 != -4096)
    {
      int v23 = v18 + v22++;
      uint64_t v18 = v23 & v17;
      uint64_t v20 = *(void *)(v15 + 16 * v18);
      if (v20 == v13) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v18 = *((unsigned int *)*a6 + 4);
LABEL_9:
  unsigned int v21 = *(_DWORD *)(v15 + 16 * v18 + 8);
  if (!v16) {
    goto LABEL_20;
  }
  unsigned int v17 = v16 - 1;
LABEL_11:
  LODWORD(v24) = v17 & ((v14 >> 4) ^ (v14 >> 9));
  uint64_t v25 = v15 + 16 * v24;
  uint64_t v26 = *(void *)v25;
  if (*(void *)v25 == v14) {
    goto LABEL_12;
  }
  int v36 = 1;
  while (v26 != -4096)
  {
    int v37 = v24 + v36++;
    uint64_t v24 = v37 & v17;
    uint64_t v26 = *(void *)(v15 + 16 * v24);
    if (v26 == v14)
    {
      uint64_t v25 = v15 + 16 * v24;
      goto LABEL_12;
    }
  }
LABEL_20:
  uint64_t v25 = v15 + 16 * v16;
LABEL_12:
  if (v21 >= *(_DWORD *)(v25 + 8)) {
    return result;
  }
  *a4 = v13;
  *a5 = v14;
  uint64_t v27 = *a4;
  uint64_t v28 = *a3;
  uint64_t v29 = **a6;
  uint64_t v30 = *((unsigned int *)*a6 + 4);
  if (v30)
  {
    unsigned int v31 = v30 - 1;
    LODWORD(v32) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    uint64_t v33 = v29 + 16 * v32;
    uint64_t v34 = *(void *)v33;
    if (*(void *)v33 == v27)
    {
      unsigned int v35 = *(_DWORD *)(v33 + 8);
      goto LABEL_28;
    }
    int v38 = 1;
    while (v34 != -4096)
    {
      int v39 = v32 + v38++;
      uint64_t v32 = v39 & v31;
      uint64_t v34 = *(void *)(v29 + 16 * v32);
      if (v34 == v27) {
        goto LABEL_26;
      }
    }
  }
  uint64_t v32 = *((unsigned int *)*a6 + 4);
LABEL_26:
  unsigned int v35 = *(_DWORD *)(v29 + 16 * v32 + 8);
  if (!v30) {
    goto LABEL_37;
  }
  unsigned int v31 = v30 - 1;
LABEL_28:
  LODWORD(v40) = v31 & ((v28 >> 4) ^ (v28 >> 9));
  uint64_t v41 = v29 + 16 * v40;
  uint64_t v42 = *(void *)v41;
  if (*(void *)v41 == v28) {
    goto LABEL_29;
  }
  int v52 = 1;
  while (v42 != -4096)
  {
    int v53 = v40 + v52++;
    uint64_t v40 = v53 & v31;
    uint64_t v42 = *(void *)(v29 + 16 * v40);
    if (v42 == v28)
    {
      uint64_t v41 = v29 + 16 * v40;
      goto LABEL_29;
    }
  }
LABEL_37:
  uint64_t v41 = v29 + 16 * v30;
LABEL_29:
  if (v35 >= *(_DWORD *)(v41 + 8)) {
    return result;
  }
  *a3 = v27;
  *a4 = v28;
  uint64_t v43 = *a3;
  uint64_t v44 = *a2;
  uint64_t v45 = **a6;
  uint64_t v46 = *((unsigned int *)*a6 + 4);
  if (v46)
  {
    unsigned int v47 = v46 - 1;
    LODWORD(v48) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
    uint64_t v49 = v45 + 16 * v48;
    uint64_t v50 = *(void *)v49;
    if (*(void *)v49 == v43)
    {
      unsigned int v51 = *(_DWORD *)(v49 + 8);
      goto LABEL_45;
    }
    int v54 = 1;
    while (v50 != -4096)
    {
      int v55 = v48 + v54++;
      uint64_t v48 = v55 & v47;
      uint64_t v50 = *(void *)(v45 + 16 * v48);
      if (v50 == v43) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v48 = *((unsigned int *)*a6 + 4);
LABEL_43:
  unsigned int v51 = *(_DWORD *)(v45 + 16 * v48 + 8);
  if (!v46) {
    goto LABEL_54;
  }
  unsigned int v47 = v46 - 1;
LABEL_45:
  LODWORD(v56) = v47 & ((v44 >> 4) ^ (v44 >> 9));
  uint64_t v57 = v45 + 16 * v56;
  uint64_t v58 = *(void *)v57;
  if (*(void *)v57 == v44) {
    goto LABEL_46;
  }
  int v68 = 1;
  while (v58 != -4096)
  {
    int v69 = v56 + v68++;
    uint64_t v56 = v69 & v47;
    uint64_t v58 = *(void *)(v45 + 16 * v56);
    if (v58 == v44)
    {
      uint64_t v57 = v45 + 16 * v56;
      goto LABEL_46;
    }
  }
LABEL_54:
  uint64_t v57 = v45 + 16 * v46;
LABEL_46:
  if (v51 >= *(_DWORD *)(v57 + 8)) {
    return result;
  }
  *a2 = v43;
  *a3 = v44;
  uint64_t v59 = *a2;
  uint64_t v60 = *a1;
  uint64_t v61 = **a6;
  uint64_t v62 = *((unsigned int *)*a6 + 4);
  if (v62)
  {
    unsigned int v63 = v62 - 1;
    LODWORD(v64) = (v62 - 1) & ((v59 >> 4) ^ (v59 >> 9));
    uint64_t v65 = v61 + 16 * v64;
    uint64_t v66 = *(void *)v65;
    if (*(void *)v65 == v59)
    {
      unsigned int v67 = *(_DWORD *)(v65 + 8);
      goto LABEL_62;
    }
    int v70 = 1;
    while (v66 != -4096)
    {
      int v71 = v64 + v70++;
      uint64_t v64 = v71 & v63;
      uint64_t v66 = *(void *)(v61 + 16 * v64);
      if (v66 == v59) {
        goto LABEL_60;
      }
    }
  }
  uint64_t v64 = *((unsigned int *)*a6 + 4);
LABEL_60:
  unsigned int v67 = *(_DWORD *)(v61 + 16 * v64 + 8);
  if (!v62) {
    goto LABEL_70;
  }
  unsigned int v63 = v62 - 1;
LABEL_62:
  LODWORD(v72) = v63 & ((v60 >> 4) ^ (v60 >> 9));
  uint64_t v73 = v61 + 16 * v72;
  uint64_t v74 = *(void *)v73;
  if (*(void *)v73 == v60) {
    goto LABEL_63;
  }
  int v75 = 1;
  while (v74 != -4096)
  {
    int v76 = v72 + v75++;
    uint64_t v72 = v76 & v63;
    uint64_t v74 = *(void *)(v61 + 16 * v72);
    if (v74 == v60)
    {
      uint64_t v73 = v61 + 16 * v72;
      goto LABEL_63;
    }
  }
LABEL_70:
  uint64_t v73 = v61 + 16 * v62;
LABEL_63:
  if (v67 < *(_DWORD *)(v73 + 8))
  {
    *a1 = v59;
    *a2 = v60;
  }
  return result;
}

uint64_t std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      unsigned int v8 = (uint64_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      unint64_t v10 = *a2;
      uint64_t v11 = *(void *)*a2;
      if (v9 >= a3)
      {
        LODWORD(v10) = *(_DWORD *)(v10 + 16);
        uint64_t v18 = *v8;
        uint64_t v19 = *a4;
        unsigned int v20 = *a4 >> 4;
        if (!v10) {
          goto LABEL_27;
        }
        goto LABEL_20;
      }
      uint64_t v12 = v8[1];
      unint64_t v10 = *(unsigned int *)(v10 + 16);
      if (v10)
      {
        int v13 = v10 - 1;
        LODWORD(v14) = (v10 - 1) & ((*v8 >> 4) ^ (*v8 >> 9));
        uint64_t v15 = (uint64_t *)(v11 + 16 * v14);
        uint64_t v16 = *v15;
        if (*v15 == *v8)
        {
          unsigned int v17 = *((_DWORD *)v15 + 2);
          goto LABEL_16;
        }
        int v21 = 1;
        while (v16 != -4096)
        {
          int v22 = v14 + v21++;
          unint64_t v14 = v22 & v13;
          uint64_t v16 = *(void *)(v11 + 16 * v14);
          if (v16 == *v8) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v14 = v10;
LABEL_14:
      unsigned int v17 = *(_DWORD *)(v11 + 16 * v14 + 8);
      if (!v10)
      {
LABEL_84:
        uint64_t v24 = (uint64_t *)(v11 + 16 * v10);
        goto LABEL_17;
      }
      int v13 = v10 - 1;
LABEL_16:
      LODWORD(v23) = v13 & ((v12 >> 4) ^ (v12 >> 9));
      uint64_t v24 = (uint64_t *)(v11 + 16 * v23);
      uint64_t v25 = *v24;
      if (*v24 != v12)
      {
        int v68 = 1;
        do
        {
          if (v25 == -4096) {
            goto LABEL_84;
          }
          int v69 = v23 + v68++;
          uint64_t v23 = v69 & v13;
          uint64_t v25 = *(void *)(v11 + 16 * v23);
        }
        while (v25 != v12);
        uint64_t v24 = (uint64_t *)(v11 + 16 * v23);
      }
LABEL_17:
      if (v17 < *((_DWORD *)v24 + 2))
      {
        ++v8;
        uint64_t v7 = v9;
      }
      uint64_t v18 = *v8;
      uint64_t v19 = *a4;
      unsigned int v20 = *a4 >> 4;
      if (!v10) {
        goto LABEL_27;
      }
LABEL_20:
      int v26 = v10 - 1;
      LODWORD(v27) = (v10 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      uint64_t v28 = (uint64_t *)(v11 + 16 * v27);
      uint64_t v29 = *v28;
      if (*v28 == v18)
      {
        unsigned int v30 = *((_DWORD *)v28 + 2);
        LODWORD(v31) = v26 & (v20 ^ (v19 >> 9));
        uint64_t v32 = (uint64_t *)(v11 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v32 != v19)
        {
LABEL_30:
          int v36 = 1;
          do
          {
            if (v33 == -4096) {
              goto LABEL_34;
            }
            int v37 = v31 + v36++;
            uint64_t v31 = v37 & v26;
            uint64_t v33 = *(void *)(v11 + 16 * v31);
          }
          while (v33 != v19);
          uint64_t v32 = (uint64_t *)(v11 + 16 * v31);
        }
LABEL_35:
        if (v30 < *((_DWORD *)v32 + 2)) {
          return result;
        }
        unsigned int v38 = v20 ^ (v19 >> 9);
        while (1)
        {
          uint64_t v43 = v8;
          *a4 = v18;
          if (v5 < v7)
          {
LABEL_78:
            *uint64_t v43 = v19;
            return result;
          }
          uint64_t v44 = (2 * v7) | 1;
          unsigned int v8 = (uint64_t *)(result + 8 * v44);
          uint64_t v7 = 2 * v7 + 2;
          unint64_t v45 = *a2;
          uint64_t v46 = *(void *)*a2;
          if (v7 >= a3)
          {
            LODWORD(v45) = *(_DWORD *)(v45 + 16);
            uint64_t v7 = v44;
            uint64_t v18 = *v8;
            if (!v45) {
              goto LABEL_70;
            }
            goto LABEL_58;
          }
          uint64_t v47 = v8[1];
          unint64_t v45 = *(unsigned int *)(v45 + 16);
          if (v45)
          {
            int v48 = v45 - 1;
            LODWORD(v49) = (v45 - 1) & ((*v8 >> 4) ^ (*v8 >> 9));
            uint64_t v50 = (uint64_t *)(v46 + 16 * v49);
            uint64_t v51 = *v50;
            if (*v50 == *v8)
            {
              unsigned int v52 = *((_DWORD *)v50 + 2);
              goto LABEL_53;
            }
            int v53 = 1;
            while (v51 != -4096)
            {
              int v54 = v49 + v53++;
              unint64_t v49 = v54 & v48;
              uint64_t v51 = *(void *)(v46 + 16 * v49);
              if (v51 == *v8) {
                goto LABEL_51;
              }
            }
          }
          unint64_t v49 = v45;
LABEL_51:
          unsigned int v52 = *(_DWORD *)(v46 + 16 * v49 + 8);
          if (!v45) {
            goto LABEL_77;
          }
          int v48 = v45 - 1;
LABEL_53:
          LODWORD(v55) = v48 & ((v47 >> 4) ^ (v47 >> 9));
          uint64_t v56 = (uint64_t *)(v46 + 16 * v55);
          uint64_t v57 = *v56;
          if (*v56 == v47) {
            goto LABEL_54;
          }
          int v66 = 1;
          while (v57 != -4096)
          {
            int v67 = v55 + v66++;
            uint64_t v55 = v67 & v48;
            uint64_t v57 = *(void *)(v46 + 16 * v55);
            if (v57 == v47)
            {
              uint64_t v56 = (uint64_t *)(v46 + 16 * v55);
              goto LABEL_54;
            }
          }
LABEL_77:
          uint64_t v56 = (uint64_t *)(v46 + 16 * v45);
LABEL_54:
          if (v52 >= *((_DWORD *)v56 + 2)) {
            uint64_t v7 = v44;
          }
          else {
            ++v8;
          }
          uint64_t v18 = *v8;
          if (!v45) {
            goto LABEL_70;
          }
LABEL_58:
          int v39 = v45 - 1;
          LODWORD(v58) = (v45 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          uint64_t v59 = (uint64_t *)(v46 + 16 * v58);
          uint64_t v60 = *v59;
          if (*v59 != v18)
          {
            int v64 = 1;
            while (v60 != -4096)
            {
              int v65 = v58 + v64++;
              uint64_t v58 = v65 & v39;
              uint64_t v60 = *(void *)(v46 + 16 * v58);
              if (v60 == v18) {
                goto LABEL_71;
              }
            }
LABEL_70:
            uint64_t v58 = v45;
LABEL_71:
            unsigned int v61 = *(_DWORD *)(v46 + 16 * v58 + 8);
            if (!v45) {
              goto LABEL_72;
            }
            int v39 = v45 - 1;
            LODWORD(v40) = (v45 - 1) & v38;
            uint64_t v41 = (uint64_t *)(v46 + 16 * v40);
            uint64_t v42 = *v41;
            if (*v41 != v19) {
              goto LABEL_62;
            }
            goto LABEL_60;
          }
          unsigned int v61 = *((_DWORD *)v59 + 2);
          LODWORD(v40) = v39 & v38;
          uint64_t v41 = (uint64_t *)(v46 + 16 * (v39 & v38));
          uint64_t v42 = *v41;
          if (*v41 != v19)
          {
LABEL_62:
            int v62 = 1;
            while (v42 != -4096)
            {
              int v63 = v40 + v62++;
              uint64_t v40 = v63 & v39;
              uint64_t v42 = *(void *)(v46 + 16 * v40);
              if (v42 == v19)
              {
                uint64_t v41 = (uint64_t *)(v46 + 16 * v40);
                goto LABEL_60;
              }
            }
LABEL_72:
            uint64_t v41 = (uint64_t *)(v46 + 16 * v45);
          }
LABEL_60:
          a4 = v43;
          if (v61 < *((_DWORD *)v41 + 2)) {
            goto LABEL_78;
          }
        }
      }
      int v34 = 1;
      while (v29 != -4096)
      {
        int v35 = v27 + v34++;
        uint64_t v27 = v35 & v26;
        uint64_t v29 = *(void *)(v11 + 16 * v27);
        if (v29 == v18) {
          goto LABEL_28;
        }
      }
LABEL_27:
      uint64_t v27 = v10;
LABEL_28:
      unsigned int v30 = *(_DWORD *)(v11 + 16 * v27 + 8);
      if (v10)
      {
        int v26 = v10 - 1;
        LODWORD(v31) = (v10 - 1) & (v20 ^ (v19 >> 9));
        uint64_t v32 = (uint64_t *)(v11 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v32 != v19) {
          goto LABEL_30;
        }
      }
      else
      {
LABEL_34:
        uint64_t v32 = (uint64_t *)(v11 + 16 * v10);
      }
      goto LABEL_35;
    }
  }
  return result;
}

void *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    unint64_t v10 = &a1[v3 + 1];
    uint64_t v11 = (2 * v3) | 1;
    uint64_t v12 = 2 * v3 + 2;
    if (v12 >= a3) {
      goto LABEL_8;
    }
    uint64_t v13 = v10[1];
    uint64_t v14 = **a2;
    uint64_t v15 = *((unsigned int *)*a2 + 4);
    if (v15)
    {
      unsigned int v6 = v15 - 1;
      LODWORD(v16) = (v15 - 1) & ((*v10 >> 4) ^ (*v10 >> 9));
      unsigned int v17 = (uint64_t *)(v14 + 16 * v16);
      uint64_t v18 = *v17;
      if (*v17 == *v10)
      {
        unsigned int v19 = *((_DWORD *)v17 + 2);
        goto LABEL_5;
      }
      int v22 = 1;
      while (v18 != -4096)
      {
        int v23 = v16 + v22++;
        uint64_t v16 = v23 & v6;
        uint64_t v18 = *(void *)(v14 + 16 * v16);
        if (v18 == *v10) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v16 = *((unsigned int *)*a2 + 4);
LABEL_22:
    unsigned int v19 = *(_DWORD *)(v14 + 16 * v16 + 8);
    if (!v15) {
      goto LABEL_23;
    }
    unsigned int v6 = v15 - 1;
LABEL_5:
    LODWORD(v7) = v6 & ((v13 >> 4) ^ (v13 >> 9));
    unsigned int v8 = (uint64_t *)(v14 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == v13) {
      goto LABEL_6;
    }
    int v20 = 1;
    while (v9 != -4096)
    {
      int v21 = v7 + v20++;
      uint64_t v7 = v21 & v6;
      uint64_t v9 = *(void *)(v14 + 16 * v7);
      if (v9 == v13)
      {
        unsigned int v8 = (uint64_t *)(v14 + 16 * v7);
        goto LABEL_6;
      }
    }
LABEL_23:
    unsigned int v8 = (uint64_t *)(v14 + 16 * v15);
LABEL_6:
    if (v19 < *((_DWORD *)v8 + 2))
    {
      ++v10;
      uint64_t v11 = v12;
    }
LABEL_8:
    *a1 = *v10;
    a1 = v10;
    uint64_t v3 = v11;
  }
  while (v11 <= v5);
  return v10;
}

uint64_t std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int llvm::DomTreeBuilder::SemiNCAInfo<llvm::DominatorTreeBase<mlir::Block,false>>::runDFS<false,BOOL (*)(mlir::Block*,mlir::Block*)>(mlir::Block*,unsigned int,BOOL (*)(mlir::Block*,mlir::Block*),unsigned int,llvm::DenseMap<mlir::Block*,unsigned int,llvm::DenseMapInfo<mlir::Block*,void>,llvm::detail::DenseMapPair<mlir::Block*,unsigned int>> const*)::{lambda(mlir::Block*,mlir::Block*)#1} &,mlir::Block**>(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (void *)(result + 8 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(void *)(a2 - 8);
    uint64_t v7 = (void *)(a2 - 8);
    uint64_t v8 = v9;
    uint64_t v10 = **a3;
    uint64_t v11 = *((unsigned int *)*a3 + 4);
    unsigned int v12 = v9 >> 4;
    if (v11)
    {
      unsigned int v13 = v11 - 1;
      LODWORD(v14) = (v11 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      uint64_t v15 = (uint64_t *)(v10 + 16 * v14);
      uint64_t v16 = *v15;
      if (*v15 == v6)
      {
        unsigned int v17 = *((_DWORD *)v15 + 2);
        LODWORD(v18) = v13 & (v12 ^ (v8 >> 9));
        unsigned int v19 = (uint64_t *)(v10 + 16 * v18);
        uint64_t v20 = *v19;
        if (*v19 != v8)
        {
LABEL_13:
          int v23 = 1;
          do
          {
            if (v20 == -4096) {
              goto LABEL_17;
            }
            int v24 = v18 + v23++;
            uint64_t v18 = v24 & v13;
            uint64_t v20 = *(void *)(v10 + 16 * v18);
          }
          while (v20 != v8);
          unsigned int v19 = (uint64_t *)(v10 + 16 * v18);
        }
LABEL_18:
        if (v17 >= *((_DWORD *)v19 + 2)) {
          return result;
        }
        unsigned int v25 = v12 ^ (v8 >> 9);
        while (1)
        {
          unsigned int v30 = v5;
          void *v7 = v6;
          if (!v4)
          {
LABEL_39:
            void *v30 = v8;
            return result;
          }
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v5 = (void *)(result + 8 * v4);
          uint64_t v6 = *v5;
          uint64_t v31 = **a3;
          uint64_t v32 = *((unsigned int *)*a3 + 4);
          if (!v32) {
            goto LABEL_36;
          }
          unsigned int v26 = v32 - 1;
          LODWORD(v33) = (v32 - 1) & ((v6 >> 4) ^ (v6 >> 9));
          int v34 = (uint64_t *)(v31 + 16 * v33);
          uint64_t v35 = *v34;
          if (*v34 != v6) {
            break;
          }
          unsigned int v36 = *((_DWORD *)v34 + 2);
          LODWORD(v27) = v26 & v25;
          uint64_t v28 = (uint64_t *)(v31 + 16 * (v26 & v25));
          uint64_t v29 = *v28;
          if (*v28 != v8)
          {
LABEL_28:
            int v37 = 1;
            while (v29 != -4096)
            {
              int v38 = v27 + v37++;
              uint64_t v27 = v38 & v26;
              uint64_t v29 = *(void *)(v31 + 16 * v27);
              if (v29 == v8)
              {
                uint64_t v28 = (uint64_t *)(v31 + 16 * v27);
                goto LABEL_26;
              }
            }
LABEL_38:
            uint64_t v28 = (uint64_t *)(v31 + 16 * v32);
          }
LABEL_26:
          uint64_t v7 = v30;
          if (v36 >= *((_DWORD *)v28 + 2)) {
            goto LABEL_39;
          }
        }
        int v39 = 1;
        while (v35 != -4096)
        {
          int v40 = v33 + v39++;
          uint64_t v33 = v40 & v26;
          uint64_t v35 = *(void *)(v31 + 16 * v33);
          if (v35 == v6) {
            goto LABEL_37;
          }
        }
LABEL_36:
        uint64_t v33 = *((unsigned int *)*a3 + 4);
LABEL_37:
        unsigned int v36 = *(_DWORD *)(v31 + 16 * v33 + 8);
        if (!v32) {
          goto LABEL_38;
        }
        unsigned int v26 = v32 - 1;
        LODWORD(v27) = (v32 - 1) & v25;
        uint64_t v28 = (uint64_t *)(v31 + 16 * v27);
        uint64_t v29 = *v28;
        if (*v28 != v8) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
      int v21 = 1;
      while (v16 != -4096)
      {
        int v22 = v14 + v21++;
        uint64_t v14 = v22 & v13;
        uint64_t v16 = *(void *)(v10 + 16 * v14);
        if (v16 == v6) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v14 = *((unsigned int *)*a3 + 4);
LABEL_11:
    unsigned int v17 = *(_DWORD *)(v10 + 16 * v14 + 8);
    if (v11)
    {
      unsigned int v13 = v11 - 1;
      LODWORD(v18) = (v11 - 1) & (v12 ^ (v8 >> 9));
      unsigned int v19 = (uint64_t *)(v10 + 16 * v18);
      uint64_t v20 = *v19;
      if (*v19 != v8) {
        goto LABEL_13;
      }
    }
    else
    {
LABEL_17:
      unsigned int v19 = (uint64_t *)(v10 + 16 * v11);
    }
    goto LABEL_18;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::InsertIntoBucket<mlir::Block * const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  uint64_t v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(void)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  uint64_t v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_34;
  }
  uint64_t v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  uint64_t v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v20 = buffer + 2;
  uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *uint64_t v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *uint64_t v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  uint64_t v7 = *a3;
  int v22 = v17 - 1;
  unsigned int v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  uint64_t v24 = *a2;
  if (*a3 != *a2)
  {
    unsigned int v25 = 0;
    int v26 = 1;
    while (v24 != -4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -8192;
      }
      if (v27) {
        unsigned int v25 = a2;
      }
      unsigned int v28 = v23 + v26++;
      unsigned int v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      uint64_t v24 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v25) {
      a2 = v25;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

void llvm::DenseMapBase<llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>,mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::moveFromOldBuckets(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = (v6 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v8)
    {
      uint64_t v9 = v8 + 1;
      uint64_t v10 = (v8 + 1) & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v11 = &v7[2 * v10];
      unint64_t v12 = v7 + 2;
      uint64_t v13 = v10;
      do
      {
        *(v12 - 2) = -4096;
        *unint64_t v12 = -4096;
        v12 += 4;
        v13 -= 2;
      }
      while (v13);
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
    else
    {
      unint64_t v11 = *(void **)a1;
    }
    unsigned int v14 = &v7[2 * v6];
    do
    {
      *unint64_t v11 = -4096;
      v11 += 2;
    }
    while (v11 != v14);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v16 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v17 = v16 & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v18 = (void *)(*(void *)a1 + 16 * v17);
        uint64_t v19 = *v18;
        if (v15 != *v18)
        {
          unsigned int v23 = 0;
          int v24 = 1;
          while (v19 != -4096)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v19 == -8192;
            }
            if (v25) {
              unsigned int v23 = v18;
            }
            unsigned int v26 = v17 + v24++;
            unsigned int v17 = v26 & v16;
            uint64_t v18 = (void *)(*(void *)a1 + 16 * (v26 & v16));
            uint64_t v19 = *v18;
            if (v15 == *v18) {
              goto LABEL_16;
            }
          }
          if (v23) {
            uint64_t v18 = v23;
          }
        }
LABEL_16:
        *uint64_t v18 = v15;
        uint64_t v20 = v4[1];
        v4[1] = 0;
        v18[1] = v20;
        ++*(_DWORD *)(a1 + 8);
        uint64_t v21 = (void *)v4[1];
        v4[1] = 0;
        if (v21)
        {
          int v22 = (void *)v21[3];
          if (v22 != v21 + 5) {
            free(v22);
          }
          operator delete(v21);
        }
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void llvm::DenseMap<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,std::unique_ptr<llvm::DomTreeNodeBase<mlir::Block>>>>::shrink_and_clear(_DWORD *a1)
{
  uint64_t v2 = a1[4];
  int v3 = a1[2];
  unint64_t v4 = (void *)(16 * v2);
  if (v2)
  {
    int v5 = (void **)(*(void *)a1 + 8);
    uint64_t v6 = 16 * v2;
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v7 = *v5;
        void *v5 = 0;
        if (v7)
        {
          uint64_t v8 = (void *)v7[3];
          if (v8 != v7 + 5) {
            free(v8);
          }
          operator delete(v7);
        }
      }
      v5 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  if (!v3)
  {
    if (!a1[4])
    {
      *((void *)a1 + 1) = 0;
      return;
    }
LABEL_20:
    llvm::deallocate_buffer(*(llvm **)a1, v4);
  }
  int v9 = 1 << (33 - __clz(v3 - 1));
  if (v9 <= 64) {
    uint64_t v10 = 64;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10 != a1[4]) {
    goto LABEL_20;
  }
  *((void *)a1 + 1) = 0;
  unint64_t v11 = *(llvm **)a1;
  uint64_t v12 = (v10 - 1) & 0xFFFFFFFFFFFFFFFLL;
  if (!v12)
  {
    uint64_t v15 = *(llvm **)a1;
LABEL_23:
    uint64_t v18 = (llvm *)((char *)v11 + 16 * v10);
    do
    {
      *(void *)uint64_t v15 = -4096;
      uint64_t v15 = (llvm *)((char *)v15 + 16);
    }
    while (v15 != v18);
    return;
  }
  uint64_t v13 = v12 + 1;
  uint64_t v14 = (v12 + 1) & 0x1FFFFFFFFFFFFFFELL;
  uint64_t v15 = (llvm *)((char *)v11 + 16 * v14);
  int v16 = (void *)((char *)v11 + 16);
  uint64_t v17 = v14;
  do
  {
    *(v16 - 2) = -4096;
    *int v16 = -4096;
    v16 += 4;
    v17 -= 2;
  }
  while (v17);
  if (v13 != v14) {
    goto LABEL_23;
  }
}

uint64_t mlir::IntegerSet::getNumEqualities(mlir::IntegerSet *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 16);
  if (!*(_DWORD *)(*(void *)this + 16)) {
    return 0;
  }
  uint64_t v2 = *(uint8x8_t **)(*(void *)this + 24);
  if (v1 < 8)
  {
    uint64_t v3 = 0;
    LODWORD(result) = 0;
    goto LABEL_14;
  }
  if (v1 >= 0x20)
  {
    int32x4_t v5 = 0uLL;
    int32x4_t v6 = 0uLL;
    uint64_t v3 = v1 & 0xFFFFFFE0;
    uint64_t v7 = v2 + 2;
    uint64_t v8 = v3;
    int32x4_t v9 = 0uLL;
    int32x4_t v10 = 0uLL;
    int32x4_t v11 = 0uLL;
    int32x4_t v12 = 0uLL;
    int32x4_t v13 = 0uLL;
    int32x4_t v14 = 0uLL;
    do
    {
      uint8x16_t v15 = *(uint8x16_t *)v7[-2].i8;
      uint16x8_t v16 = vmovl_u8(*(uint8x8_t *)v15.i8);
      uint16x8_t v17 = vmovl_high_u8(v15);
      uint16x8_t v18 = vmovl_u8(*v7);
      uint16x8_t v19 = vmovl_high_u8(*(uint8x16_t *)v7->i8);
      int32x4_t v10 = (int32x4_t)vaddw_high_u16((uint32x4_t)v10, v17);
      int32x4_t v9 = (int32x4_t)vaddw_u16((uint32x4_t)v9, *(uint16x4_t *)v17.i8);
      int32x4_t v6 = (int32x4_t)vaddw_high_u16((uint32x4_t)v6, v16);
      int32x4_t v5 = (int32x4_t)vaddw_u16((uint32x4_t)v5, *(uint16x4_t *)v16.i8);
      int32x4_t v14 = (int32x4_t)vaddw_high_u16((uint32x4_t)v14, v19);
      int32x4_t v13 = (int32x4_t)vaddw_u16((uint32x4_t)v13, *(uint16x4_t *)v19.i8);
      int32x4_t v12 = (int32x4_t)vaddw_high_u16((uint32x4_t)v12, v18);
      int32x4_t v11 = (int32x4_t)vaddw_u16((uint32x4_t)v11, *(uint16x4_t *)v18.i8);
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
    uint64_t result = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v11, v5), vaddq_s32(v13, v9)), vaddq_s32(vaddq_s32(v12, v6), vaddq_s32(v14, v10))));
    if ((v1 & 0x1F) == 0) {
      return result;
    }
    if ((v1 & 0x1F) < 8)
    {
LABEL_14:
      BOOL v27 = (uint8x8_t *)((char *)v2 + v3);
      uint64_t v28 = v1 - v3;
      do
      {
        int v29 = v27->u8[0];
        BOOL v27 = (uint8x8_t *)((char *)v27 + 1);
        uint64_t result = (result + v29);
        --v28;
      }
      while (v28);
      return result;
    }
  }
  else
  {
    LODWORD(result) = 0;
    uint64_t v3 = 0;
  }
  uint64_t v20 = (uint8x8_t *)((char *)v2 + v3);
  uint64_t v21 = v3 + (v1 & 7);
  uint64_t v3 = v1 & 0xFFFFFFF8;
  int32x4_t v22 = 0uLL;
  int32x4_t v23 = (int32x4_t)result;
  uint64_t v24 = v21 - v1;
  do
  {
    uint8x8_t v25 = *v20++;
    uint16x8_t v26 = vmovl_u8(v25);
    int32x4_t v22 = (int32x4_t)vaddw_high_u16((uint32x4_t)v22, v26);
    int32x4_t v23 = (int32x4_t)vaddw_u16((uint32x4_t)v23, *(uint16x4_t *)v26.i8);
    v24 += 8;
  }
  while (v24);
  uint64_t result = vaddvq_s32(vaddq_s32(v23, v22));
  if ((v1 & 7) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t mlir::IntegerSet::isEq(mlir::IntegerSet *this, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)this + 24) + a2);
}

uint64_t mlir::IntegerSet::getNumInequalities(mlir::IntegerSet *this)
{
  unint64_t v1 = *(unsigned int *)(*(void *)this + 16);
  if (!*(_DWORD *)(*(void *)this + 16)) {
    return v1;
  }
  uint64_t v2 = *(uint8x8_t **)(*(void *)this + 24);
  if (v1 >= 8)
  {
    if (v1 >= 0x20)
    {
      int32x4_t v6 = 0uLL;
      int32x4_t v7 = 0uLL;
      uint64_t v3 = v1 & 0xFFFFFFE0;
      uint64_t v8 = v2 + 2;
      uint64_t v9 = v3;
      int32x4_t v10 = 0uLL;
      int32x4_t v11 = 0uLL;
      int32x4_t v12 = 0uLL;
      int32x4_t v13 = 0uLL;
      int32x4_t v14 = 0uLL;
      int32x4_t v15 = 0uLL;
      do
      {
        uint8x16_t v16 = *(uint8x16_t *)v8[-2].i8;
        uint16x8_t v17 = vmovl_u8(*(uint8x8_t *)v16.i8);
        uint16x8_t v18 = vmovl_high_u8(v16);
        uint16x8_t v19 = vmovl_u8(*v8);
        uint16x8_t v20 = vmovl_high_u8(*(uint8x16_t *)v8->i8);
        int32x4_t v11 = (int32x4_t)vaddw_high_u16((uint32x4_t)v11, v18);
        int32x4_t v10 = (int32x4_t)vaddw_u16((uint32x4_t)v10, *(uint16x4_t *)v18.i8);
        int32x4_t v7 = (int32x4_t)vaddw_high_u16((uint32x4_t)v7, v17);
        int32x4_t v6 = (int32x4_t)vaddw_u16((uint32x4_t)v6, *(uint16x4_t *)v17.i8);
        int32x4_t v15 = (int32x4_t)vaddw_high_u16((uint32x4_t)v15, v20);
        int32x4_t v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v20.i8);
        int32x4_t v13 = (int32x4_t)vaddw_high_u16((uint32x4_t)v13, v19);
        int32x4_t v12 = (int32x4_t)vaddw_u16((uint32x4_t)v12, *(uint16x4_t *)v19.i8);
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
      unsigned int v4 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v12, v6), vaddq_s32(v14, v10)), vaddq_s32(vaddq_s32(v13, v7), vaddq_s32(v15, v11))));
      if ((v1 & 0x1F) == 0) {
        return v1 - v4;
      }
      if ((v1 & 0x1F) < 8) {
        goto LABEL_14;
      }
    }
    else
    {
      unsigned int v4 = 0;
      uint64_t v3 = 0;
    }
    uint64_t v21 = (uint8x8_t *)((char *)v2 + v3);
    uint64_t v22 = v3 + (v1 & 7);
    uint64_t v3 = v1 & 0xFFFFFFF8;
    int32x4_t v23 = 0uLL;
    int32x4_t v24 = (int32x4_t)v4;
    uint64_t v25 = v22 - v1;
    do
    {
      uint8x8_t v26 = *v21++;
      uint16x8_t v27 = vmovl_u8(v26);
      int32x4_t v23 = (int32x4_t)vaddw_high_u16((uint32x4_t)v23, v27);
      int32x4_t v24 = (int32x4_t)vaddw_u16((uint32x4_t)v24, *(uint16x4_t *)v27.i8);
      v25 += 8;
    }
    while (v25);
    unsigned int v4 = vaddvq_s32(vaddq_s32(v24, v23));
    if ((v1 & 7) == 0) {
      return v1 - v4;
    }
    goto LABEL_14;
  }
  uint64_t v3 = 0;
  unsigned int v4 = 0;
LABEL_14:
  uint64_t v28 = v1 - v3;
  int v29 = (uint8x8_t *)((char *)v2 + v3);
  do
  {
    int v30 = v29->u8[0];
    int v29 = (uint8x8_t *)((char *)v29 + 1);
    v4 += v30;
    --v28;
  }
  while (v28);
  return v1 - v4;
}

BOOL mlir::IntegerSet::isEmptyIntegerSet(int **this)
{
  int v2 = **this;
  int v3 = (*this)[1];
  uint64_t AffineConstantExpr = **((void **)*this + 1);
  DesiredBytecodeVersion = (mlir::MLIRContext *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&AffineConstantExpr);
  uint64_t AffineConstantExpr = mlir::getAffineConstantExpr((mlir *)1, DesiredBytecodeVersion, v5);
  char v7 = 1;
  return *this == (int *)mlir::IntegerSet::get(v2, v3, (mlir::BytecodeWriterConfig *)&AffineConstantExpr, 1, (uint64_t)&v7, 1);
}

uint64_t mlir::IntegerSet::getContext(mlir::IntegerSet *this)
{
  uint64_t v2 = **(void **)(*(void *)this + 8);
  return mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v2);
}

uint64_t mlir::IntegerSet::getConstraint(mlir::IntegerSet *this, unsigned int a2)
{
  return *(void *)(*(void *)(*(void *)this + 8) + 8 * a2);
}

uint64_t mlir::IntegerSet::walkExprs(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    int32x4_t v6 = *(uint64_t **)(*(void *)result + 8);
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6;
      v9[0] = &unk_1EC9CE398;
      v9[1] = a2;
      void v9[2] = a3;
      int32x4_t v10 = v9;
      mlir::AffineExpr::walk(&v8, v9);
      uint64_t result = (uint64_t)v10;
      if (v10 == v9)
      {
        uint64_t result = (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
      }
      else if (v10)
      {
        uint64_t result = (*(uint64_t (**)(void))(*v10 + 40))();
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t mlir::IntegerSet::replaceDimsAndSymbols(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6, int a7)
{
  v28[8] = *MEMORY[0x1E4F143B8];
  uint8x8_t v26 = (mlir::BytecodeWriterConfig *)v28;
  uint64_t v27 = 0x800000000;
  int32x4_t v14 = *(void **)a1;
  uint64_t v15 = *(void *)(*(void *)a1 + 16);
  if (v15 >= 9uLL)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v15, 8);
    int32x4_t v14 = *(void **)a1;
    uint64_t v15 = *(void *)(*(void *)a1 + 16);
  }
  if (v15)
  {
    int v24 = a6;
    int v16 = a7;
    uint16x8_t v17 = (uint64_t *)v14[1];
    uint64_t v18 = 8 * v15;
    do
    {
      uint64_t v25 = *v17;
      uint64_t v19 = mlir::AffineExpr::replaceDimsAndSymbols(&v25, a2, a3, a4, a5);
      uint64_t v20 = v27;
      if (v27 >= (unint64_t)HIDWORD(v27))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, v28, v27 + 1, 8);
        uint64_t v20 = v27;
      }
      *((void *)v26 + v20) = v19;
      unsigned int v21 = v27 + 1;
      LODWORD(v27) = v27 + 1;
      ++v17;
      v18 -= 8;
    }
    while (v18);
    int32x4_t v14 = *(void **)a1;
    a7 = v16;
    a6 = v24;
  }
  else
  {
    unsigned int v21 = v27;
  }
  uint64_t v22 = mlir::IntegerSet::get(a6, a7, v26, v21, v14[3], v14[4]);
  if (v26 != (mlir::BytecodeWriterConfig *)v28) {
    free(v26);
  }
  return v22;
}

uint64_t mlir::CallSiteLoc::get(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  v8[1] = Context;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v13[1] = v8;
  uint64_t v11 = v7;
  uint64_t v12 = a2;
  unsigned int v5 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v11, &v12);
  v9[0] = &v11;
  v9[1] = v13;
  int32x4_t v10 = &v11;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
}

uint64_t mlir::FileLineColLoc::get(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v15[1] = v10;
  uint64_t v13 = v9;
  unint64_t v14 = a2 | (unint64_t)(a3 << 32);
  unsigned int v7 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v13, (int *)&v14, (int *)&v14 + 1);
  v11[0] = &v13;
  v11[1] = v15;
  uint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::FileLineColLoc::get(mlir::StringAttr *a1, const char *a2, unint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a3 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = a3;
  }
  uint64_t v9 = "-";
  __int16 v15 = 261;
  if (a3) {
    uint64_t v9 = a2;
  }
  v14[0] = v9;
  v14[1] = v8;
  uint64_t v10 = mlir::StringAttr::get(a1, (mlir::MLIRContext *)v14);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v16[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v16[1] = a1;
  v21[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJNS1_10StringAttrERjSC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v21[1] = v16;
  uint64_t v19 = v10;
  unint64_t v20 = a4 | (unint64_t)(a5 << 32);
  unsigned int v12 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v19, (int *)&v20, (int *)&v20 + 1);
  v17[0] = &v19;
  v17[1] = v21;
  uint64_t v18 = &v19;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v12, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v18, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v17);
}

uint64_t mlir::FileLineColLoc::getColumn(mlir::FileLineColLoc *this)
{
  return *(unsigned int *)(*(void *)this + 20);
}

uint64_t mlir::FusedLoc::get(mlir::MLIRContext *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(a1);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  v11[1] = a1;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v16[1] = v11;
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v15 = a4;
  unsigned int v9 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)v14, &v15);
  v12[0] = v14;
  v12[1] = v16;
  uint64_t v13 = v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v9, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::NameLoc::get(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v7);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v8[1] = Context;
  v13[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v13[1] = v8;
  uint64_t v11 = v7;
  uint64_t v12 = a2;
  unsigned int v5 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v11, &v12);
  v9[0] = &v11;
  v9[1] = v13;
  uint64_t v10 = &v11;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v5, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v10, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v9);
}

uint64_t mlir::NameLoc::get(uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v2 = (mlir::UnknownLoc *)mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v4 = mlir::UnknownLoc::get(v2, v3);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v9[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v9[1] = Context;
  v14[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrENS1_10UnknownLocEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v14[1] = v9;
  uint64_t v12 = v8;
  uint64_t v13 = v4;
  unsigned int v6 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v12, &v13);
  v10[0] = &v12;
  v10[1] = v14;
  uint64_t v11 = &v12;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v11, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v10);
}

uint64_t mlir::OpaqueLoc::get(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a3;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  v10[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_;
  v16[1] = v10;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v15 = v9;
  unsigned int v7 = llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(&v13, &v14, &v15);
  v11[0] = &v13;
  v11[1] = v16;
  uint64_t v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

void *mlir::BuiltinDialect::registerLocationAttributes(mlir::BuiltinDialect *this)
{
  mlir::Dialect::addAttribute<mlir::CallSiteLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::FileLineColLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::FusedLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::NameLoc>((uint64_t)this);
  mlir::Dialect::addAttribute<mlir::OpaqueLoc>((uint64_t)this);

  return mlir::Dialect::addAttribute<mlir::UnknownLoc>((uint64_t)this);
}

uint64_t mlir::LocationAttr::walk(void *a1, uint64_t (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t result = a2(a3, *a1);
  if (!result) {
    return result;
  }
  unsigned int v7 = (void *)*a1;
  uint64_t v8 = *(void **)(*v7 + 136);
  if (v7) {
    BOOL v9 = v8 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    uint64_t v15 = v7[1];
    uint64_t result = mlir::LocationAttr::walk(&v15, a2, a3);
    if (!result) {
      return result;
    }
    goto LABEL_16;
  }
  if (v7) {
    BOOL v10 = v8 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    uint64_t v12 = v7[2];
    if (!v12) {
      return 1;
    }
    uint64_t v13 = (uint64_t *)v7[1];
    uint64_t v14 = 8 * v12;
    while (1)
    {
      uint64_t v15 = *v13;
      uint64_t result = mlir::LocationAttr::walk(&v15, a2, a3);
      if (!result) {
        break;
      }
      ++v13;
      v14 -= 8;
      if (!v14) {
        return 1;
      }
    }
    return result;
  }
  if (v7 && v8 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
LABEL_16:
    uint64_t v11 = v7[2];
    goto LABEL_17;
  }
  uint64_t result = 1;
  if (v7 && v8 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id)
  {
    uint64_t v11 = v7[3];
LABEL_17:
    uint64_t v15 = v11;
    return mlir::LocationAttr::walk(&v15, a2, a3);
  }
  return result;
}

BOOL mlir::LocationAttr::classof(uint64_t a1)
{
  unint64_t v1 = *(void **)(*(void *)a1 + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
}

void mlir::FusedLoc::get(uint64_t **a1, mlir::MLIRContext *a2, uint64_t a3, mlir::UnknownLoc *this)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  v34[0] = 0;
  v34[1] = 0;
  unsigned int v35 = 0;
  unsigned int v36 = v38;
  uint64_t v37 = 0x400000000;
  if (!a2) {
    goto LABEL_20;
  }
  unsigned int v6 = a1;
  unsigned int v7 = &a1[(void)a2];
  while (1)
  {
    uint64_t v8 = *v6;
    uint64_t v28 = v8;
    BOOL v9 = *(void **)(*v8 + 136);
    if (v8 && v9 == &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id) {
      break;
    }
    if (v9 != &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id) {
      goto LABEL_4;
    }
LABEL_5:
    if (++v6 == v7)
    {
      uint64_t v14 = v37;
      if (v37)
      {
        uint64_t v15 = (uint64_t *)v36;
        if (v37 != 1 || a3)
        {
          uint64_t AttributeUniquer = mlir::MLIRContext::getAttributeUniquer(this);
          int32x4_t v23 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
          int v24 = this;
          uint64_t v31 = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJRNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_;
          uint64_t v32 = &v23;
          uint64_t v28 = v15;
          uint64_t v29 = v14;
          uint64_t v30 = a3;
          unsigned int v17 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)&v28, &v30);
          uint64_t v25 = &v28;
          uint8x8_t v26 = &v31;
          uint64_t v27 = &v28;
          uint64_t v18 = (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>;
          uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>;
          unint64_t v20 = (unsigned __int8 **)AttributeUniquer;
          goto LABEL_22;
        }
        uint64_t v22 = v36;
        if (v36 == v38) {
LABEL_26:
        }
          llvm::deallocate_buffer(v34[0], (void *)(8 * v35));
        goto LABEL_25;
      }
LABEL_20:
      if (a3)
      {
        uint64_t v33 = mlir::UnknownLoc::get(this, a2);
        uint64_t v21 = mlir::MLIRContext::getAttributeUniquer(this);
        int32x4_t v23 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
        int v24 = this;
        uint64_t v31 = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_;
        uint64_t v32 = &v23;
        uint64_t v28 = &v33;
        uint64_t v29 = 1;
        uint64_t v30 = a3;
        unsigned int v17 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)&v28, &v30);
        uint64_t v25 = &v28;
        uint8x8_t v26 = &v31;
        uint64_t v27 = &v28;
        uint64_t v18 = (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>;
        uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>;
        unint64_t v20 = (unsigned __int8 **)v21;
LABEL_22:
        mlir::StorageUniquer::getParametricStorageTypeImpl(v20, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v17, v18, (uint64_t)&v27, v19, (uint64_t)&v25);
        uint64_t v22 = v36;
        if (v36 == v38) {
          goto LABEL_26;
        }
      }
      else
      {
        mlir::UnknownLoc::get(this, a2);
        uint64_t v22 = v36;
        if (v36 == v38) {
          goto LABEL_26;
        }
      }
LABEL_25:
      free(v22);
      goto LABEL_26;
    }
  }
  if (v8[3] == a3)
  {
    uint64_t v11 = v8[2];
    if (v11)
    {
      uint64_t v12 = (uint64_t *)v8[1];
      uint64_t v13 = 8 * v11;
      do
      {
        llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert((uint64_t)v34, v12++);
        v13 -= 8;
      }
      while (v13);
    }
    goto LABEL_5;
  }
LABEL_4:
  llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert((uint64_t)v34, (uint64_t *)&v28);
  goto LABEL_5;
}

uint64_t llvm::SetVector<mlir::Location,llvm::SmallVector<mlir::Location,4u>,llvm::DenseSet<mlir::Location,llvm::DenseMapInfo<mlir::Location,void>>,4u>::insert(uint64_t a1, uint64_t *a2)
{
  if (*(_DWORD *)(a1 + 8))
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v33 = 0;
LABEL_41:
      llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(a1, v33, a2);
      uint64_t v34 = *a2;
      uint64_t v35 = *(unsigned int *)(a1 + 32);
      if (v35 >= *(_DWORD *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, (void *)(a1 + 40), v35 + 1, 8);
        LODWORD(v35) = *(_DWORD *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v35) = v34;
      ++*(_DWORD *)(a1 + 32);
      return 1;
    }
    int v5 = v4 - 1;
    unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & v5;
    unsigned int v7 = (void *)(*(void *)a1 + 8 * v6);
    uint64_t v8 = *v7;
    if (*a2 != *v7)
    {
      BOOL v9 = 0;
      int v10 = 1;
      while (v8 != -4096)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == -8192;
        }
        if (v11) {
          BOOL v9 = v7;
        }
        unsigned int v12 = v6 + v10++;
        unsigned int v6 = v12 & v5;
        unsigned int v7 = (void *)(*(void *)a1 + 8 * v6);
        uint64_t v8 = *v7;
        if (*a2 == *v7) {
          return 0;
        }
      }
      if (v9) {
        uint64_t v33 = v9;
      }
      else {
        uint64_t v33 = v7;
      }
      goto LABEL_41;
    }
    return 0;
  }
  uint64_t v13 = a1 + 24;
  uint64_t v14 = *(void **)(a1 + 24);
  uint64_t v15 = *(unsigned int *)(a1 + 32);
  int v16 = v14;
  if (v15)
  {
    uint64_t v17 = 8 * v15;
    int v16 = *(void **)(a1 + 24);
    while (*v16 != *a2)
    {
      ++v16;
      v17 -= 8;
      if (!v17)
      {
        int v16 = &v14[v15];
        break;
      }
    }
  }
  if (v15 != v16 - v14) {
    return 0;
  }
  uint64_t v18 = *a2;
  if (v15 >= *(_DWORD *)(a1 + 36))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v13, (void *)(a1 + 40), v15 + 1, 8);
    *(void *)(*(void *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 32)) = v18;
    unsigned int v19 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v19;
    if (v19 >= 5) {
      goto LABEL_21;
    }
  }
  else
  {
    v14[v15] = v18;
    unsigned int v19 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v19;
    if (v19 >= 5)
    {
LABEL_21:
      unint64_t v20 = *(void **)(a1 + 24);
      uint64_t v21 = &v20[v19];
      while (1)
      {
        int v26 = *(_DWORD *)(a1 + 16);
        if (!v26) {
          break;
        }
        int v22 = v26 - 1;
        unsigned int v23 = ((*v20 >> 4) ^ (*v20 >> 9)) & v22;
        int v24 = (void *)(*(void *)a1 + 8 * v23);
        uint64_t v25 = *v24;
        if (*v20 != *v24)
        {
          uint64_t v28 = 0;
          int v29 = 1;
          while (v25 != -4096)
          {
            if (v28) {
              BOOL v30 = 0;
            }
            else {
              BOOL v30 = v25 == -8192;
            }
            if (v30) {
              uint64_t v28 = v24;
            }
            unsigned int v31 = v23 + v29++;
            unsigned int v23 = v31 & v22;
            int v24 = (void *)(*(void *)a1 + 8 * v23);
            uint64_t v25 = *v24;
            if (*v20 == *v24) {
              goto LABEL_23;
            }
          }
          if (v28) {
            uint64_t v27 = v28;
          }
          else {
            uint64_t v27 = v24;
          }
          goto LABEL_26;
        }
LABEL_23:
        if (++v20 == v21) {
          return 1;
        }
      }
      uint64_t v27 = 0;
LABEL_26:
      llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(a1, v27, v20);
      goto LABEL_23;
    }
  }
  return 1;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **(void **)a1 && *(void *)(a2 + 16) == *(void *)(*(void *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, uint64_t a2)
{
  long long v4 = **a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v13 = v4;
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v13;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  *(void *)unint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  BOOL v11 = a1[1];
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*((void *)v11 + 1), v10);
  }
  return v10;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(_DWORD *a1, int *a2, int *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    unint64_t v10 = a2;
    BOOL v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = (*a1 >> 4) ^ (*a1 >> 9);
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = v4;
  unint64_t v12 = 0;
  BOOL v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v14, (uint64_t *)&v12, (_DWORD *)v14 + 2, (unint64_t)v15, *a2);
  unint64_t v13 = v12;
  unsigned int v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, *a3);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  return *(void *)(a2 + 8) == *(void *)*a1
      && *(_DWORD *)(a2 + 16) == *((_DWORD *)v2 + 2)
      && *(_DWORD *)(a2 + 20) == *((_DWORD *)v2 + 3);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::detail::FileLineColLocAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::FileLineColLocAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 80) += 24;
  if (*(void *)a1) {
    BOOL v5 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 24 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v7];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)a1 = result + 3;
  *uint64_t result = 0;
  result[1] = v3;
  result[2] = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  return *(void *)(a2 + 8) == *(void *)*a1
      && *(_DWORD *)(a2 + 16) == *((_DWORD *)v2 + 2)
      && *(_DWORD *)(a2 + 20) == *((_DWORD *)v2 + 3);
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = mlir::detail::FileLineColLocAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJNS1_10StringAttrERjSC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>(uint64_t a1, _DWORD *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  memset(v10, 0, sizeof(v10));
  {
    uint64_t v8 = a1;
    a1 = v8;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      a1 = v8;
    }
  }
  uint64_t v13 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v3 = llvm::hashing::detail::hash_combine_range_impl<mlir::Attribute const*>(*(_DWORD **)a1, (_DWORD *)(*(void *)a1 + 8 * *(void *)(a1 + 8)));
  unint64_t v9 = 0;
  *(void *)&v10[0] = v3;
  uint64_t v4 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v10, (uint64_t *)&v9, (void *)v10 + 1, (unint64_t)v11, (*a2 >> 4) ^ (*a2 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v10, v9, v4, (char *)v11);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2[2];
  if (v3 == *(void *)(*a1 + 8))
  {
    if (!v3) {
      return a2[3] == *(void *)(v2 + 16);
    }
    uint64_t v4 = (void *)a2[1];
    BOOL v5 = *(void **)v2;
    uint64_t v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6) {
        return a2[3] == *(void *)(v2 + 16);
      }
    }
  }
  return 0;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t a2)
{
  uint64_t v3 = mlir::detail::FusedLocAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *mlir::detail::FusedLocAttrStorage::construct(size_t __sz, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  if (v3)
  {
    uint64_t v5 = *a2;
    uint64_t v6 = 8 * v3;
    uint64_t v7 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)__sz, 8 * v3, 3);
    uint64_t v8 = v7;
    if ((unint64_t)(8 * v3 - 8) < 0x18)
    {
      unint64_t v9 = (void *)v7;
      unint64_t v10 = (uint64_t *)v5;
    }
    else
    {
      unint64_t v9 = (void *)v7;
      unint64_t v10 = (uint64_t *)v5;
      if ((unint64_t)(v7 - v5) >= 0x20)
      {
        unint64_t v11 = ((unint64_t)(v6 - 8) >> 3) + 1;
        uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v9 = (void *)(v7 + v12);
        unint64_t v10 = (uint64_t *)(v5 + v12);
        uint64_t v13 = (long long *)(v5 + 16);
        uint64_t v14 = (_OWORD *)(v7 + 16);
        uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v16 = *v13;
          *(v14 - 1) = *(v13 - 1);
          *uint64_t v14 = v16;
          v13 += 2;
          v14 += 2;
          v15 -= 4;
        }
        while (v15);
        if (v11 == (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_11;
        }
      }
    }
    do
    {
      uint64_t v17 = *v10++;
      *v9++ = v17;
    }
    while (v10 != (uint64_t *)(v5 + v6));
  }
  else
  {
    uint64_t v8 = 0;
  }
LABEL_11:
  *(void *)(__sz + 80) += 32;
  if (*(void *)__sz) {
    BOOL v18 = ((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)__sz + 32 > *(void *)(__sz + 8)
  }
                                                                                  - *(void *)__sz;
  else {
    BOOL v18 = 1;
  }
  if (v18)
  {
    unsigned int v19 = *(_DWORD *)(__sz + 24) >> 7;
    if (v19 >= 0x1E) {
      LOBYTE(v19) = 30;
    }
    uint64_t v20 = 4096 << v19;
    buffer = (char *)llvm::allocate_buffer(4096 << v19, (std::align_val_t)8uLL);
    uint64_t v22 = *(unsigned int *)(__sz + 24);
    if (v22 >= *(_DWORD *)(__sz + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(__sz + 16, (void *)(__sz + 32), v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(__sz + 24);
    }
    *(void *)(*(void *)(__sz + 16) + 8 * v22) = buffer;
    ++*(_DWORD *)(__sz + 24);
    *(void *)(__sz + 8) = &buffer[v20];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)__sz + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)__sz = result + 4;
  *uint64_t result = 0;
  result[1] = v8;
  result[2] = v3;
  result[3] = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **(void **)a1 && *(void *)(a2 + 16) == *(void *)(*(void *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, uint64_t a2)
{
  long long v4 = **a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v13 = v4;
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v13;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  *(void *)unint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  unint64_t v11 = a1[1];
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*((void *)v11 + 1), v10);
  }
  return v10;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 8) == **(void **)a1 && *(void *)(a2 + 16) == *(void *)(*(void *)a1 + 8);
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::UnknownLoc>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::UnknownLoc &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(long long **a1, uint64_t a2)
{
  long long v4 = **a1;
  *(void *)(a2 + 80) += 24;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 24 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v13 = v4;
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v13;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 24;
  *(void *)unint64_t v10 = 0;
  *(_OWORD *)(v10 + 8) = v4;
  unint64_t v11 = a1[1];
  if (*(void *)v11) {
    (*(void (**)(void, unint64_t))v11)(*((void *)v11 + 1), v10);
  }
  return v10;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrENS1_10UnknownLocEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

unint64_t llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  {
    unint64_t v10 = a2;
    unint64_t v11 = a1;
    a2 = v10;
    a1 = v11;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v9;
      a2 = v10;
      a1 = v11;
    }
  }
  uint64_t v4 = *a1;
  uint64_t v17 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&v14[0] = v4;
  unint64_t v12 = 0;
  BOOL v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v12, (void *)v14 + 1, (unint64_t)v15, (*a2 >> 4) ^ (*a2 >> 9));
  unint64_t v13 = v12;
  unsigned int v6 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(v14, (uint64_t *)&v13, v5, (unint64_t)v15, (*a3 >> 4) ^ (*a3 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)v14, v13, v6, (char *)v15);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, void *a2)
{
  uint64_t v2 = (void *)*a1;
  return a2[1] == *(void *)*a1 && a2[2] == v2[1] && a2[3] == v2[2];
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::OpaqueLocAttrStorage::construct(a2, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::OpaqueLocAttrStorage::construct(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v4 = *(_OWORD *)(a2 + 1);
  *(void *)(a1 + 80) += 32;
  if (*(void *)a1) {
    BOOL v5 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 32 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    long long v11 = v4;
    unsigned int v6 = *(_DWORD *)(a1 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v7];
    unint64_t result = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v4 = v11;
  }
  else
  {
    unint64_t result = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = result + 32;
  *(void *)unint64_t result = 0;
  *(void *)(result + 8) = v3;
  *(_OWORD *)(result + 16) = v4;
  return result;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

uint64_t *mlir::Dialect::addAttribute<mlir::CallSiteLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::CallSiteLoc,mlir::LocationAttr,mlir::detail::CallSiteLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSB_22CallSiteLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSA_22CallSiteLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FileLineColLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FileLineColLoc,mlir::LocationAttr,mlir::detail::FileLineColLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSB_25FileLineColLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSA_25FileLineColLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::FusedLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::FusedLoc,mlir::LocationAttr,mlir::detail::FusedLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSB_19FusedLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSA_19FusedLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::NameLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::NameLoc,mlir::LocationAttr,mlir::detail::NameLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSB_18NameLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSA_18NameLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, 0, v10);
}

uint64_t *mlir::Dialect::addAttribute<mlir::OpaqueLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = v27;
  int v26 = 0;
  uint64_t v14 = a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::OpaqueLoc,mlir::LocationAttr,mlir::detail::OpaqueLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSB_20OpaqueLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSA_20OpaqueLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(*(mlir::MLIRContext **)(a1 + 32));
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, 0, v10);
}

void *mlir::Dialect::addAttribute<mlir::UnknownLoc>(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  memset(v27, 0, sizeof(v27));
  uint64_t v25 = (mlir::MLIRContext *)v27;
  LODWORD(v26) = 0;
  uint64_t v14 = (void *(*)(uint64_t *, void *))a1;
  uint64_t v15 = v17;
  uint64_t v16 = 0x300000000;
  unint64_t v19 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
      + 2;
  if ((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<BOOL (*)(mlir::TypeID),BOOL (* const)(mlir::TypeID),void>::Callbacks
     + 2 >= 8)
    v18[0] = (llvm *)mlir::detail::StorageUserBase<mlir::UnknownLoc,mlir::LocationAttr,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke;
  uint64_t v20 = _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_;
  uint64_t v21 = &v13;
  uint64_t v22 = _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_;
  unsigned int v23 = &v12;
  int v24 = &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
  mlir::Dialect::addAttribute(a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id, (uint64_t)&v14);
  char v3 = v19;
  if (v19 >= 8)
  {
    if ((v19 & 4) != 0)
    {
      if ((v19 & 2) != 0) {
        long long v4 = v18;
      }
      else {
        long long v4 = (llvm **)v18[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v2);
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer(v18[0], v18[1]);
    }
  }
  BOOL v5 = v15;
  if (v16)
  {
    uint64_t v6 = 16 * v16;
    uint64_t v7 = (void **)((char *)v15 + 8);
    do
    {
      int v8 = *v7;
      v7 += 2;
      free(v8);
      v6 -= 16;
    }
    while (v6);
    BOOL v5 = v15;
  }
  if (v5 != v17) {
    free(v5);
  }
  uint64_t v9 = *(mlir::MLIRContext **)(a1 + 32);
  uint64_t AttributeUniquer = (uint64_t *)mlir::MLIRContext::getAttributeUniquer(v9);
  uint64_t v25 = v9;
  int v26 = &mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id;
  uint64_t v14 = _ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_10UnknownLocEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_;
  uint64_t v15 = &v25;
  char v13 = &v14;
  return mlir::StorageUniquer::registerSingletonImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<void mlir::StorageUniquer::registerSingletonStorageType<mlir::AttributeStorage>(mlir::TypeID,llvm::function_ref<void ()(mlir::AttributeStorage *)>)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)&v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::CallSiteLoc,mlir::LocationAttr,mlir::detail::CallSiteLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSB_22CallSiteLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  void v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_11CallSiteLocENS1_12LocationAttrENSA_22CallSiteLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v9 = a2;
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  mlir::Attribute::getContext((mlir::Attribute *)&v9);
  uint64_t v10 = v3;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v11[0] = &mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id;
  v11[1] = Context;
  v16[0] = _ZN4llvm12function_refIFvPN4mlir6detail22CallSiteLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_11CallSiteLocEJRNS1_8LocationESC_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESF_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSH_E_EEvlS4_;
  v16[1] = v11;
  uint64_t v14 = v10;
  uint64_t v15 = v4;
  unsigned int v7 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v14, &v15);
  v12[0] = &v14;
  v12[1] = v16;
  char v13 = &v14;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::CallSiteLoc,void>::id, v7, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::CallSiteLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::CallSiteLocAttrStorage,mlir::Location &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::CallSiteLocAttrStorage *)>,mlir::TypeID,mlir::Location &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v12);
}

uint64_t mlir::detail::StorageUserBase<mlir::FileLineColLoc,mlir::LocationAttr,mlir::detail::FileLineColLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSB_25FileLineColLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_14FileLineColLocENS1_12LocationAttrENSA_25FileLineColLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FileLineColLoc>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FileLineColLoc>(uint64_t a1, uint64_t **a2)
{
  uint64_t v8 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 8)) {
    uint64_t v3 = **a2;
  }
  else {
    uint64_t v3 = 0;
  }
  mlir::Attribute::getContext((mlir::Attribute *)&v8);
  uint64_t v9 = v3;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v9);
  uint64_t AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v10[0] = &mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id;
  v10[1] = Context;
  v15[0] = _ZN4llvm12function_refIFvPN4mlir6detail25FileLineColLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_14FileLineColLocEJRNS1_10StringAttrERjSD_EEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_;
  v15[1] = v10;
  uint64_t v13 = v9;
  uint64_t v14 = v2;
  unsigned int v6 = llvm::hash_combine<mlir::StringAttr,unsigned int,unsigned int>(&v13, (int *)&v14, (int *)&v14 + 1);
  v11[0] = &v13;
  v11[1] = v15;
  char v12 = &v13;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FileLineColLoc,void>::id, v6, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v12, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FileLineColLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FileLineColLocAttrStorage,mlir::StringAttr &,unsigned int &,unsigned int &>(llvm::function_ref<void ()(mlir::detail::FileLineColLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,unsigned int &,unsigned int &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v11);
}

uint64_t mlir::detail::StorageUserBase<mlir::FusedLoc,mlir::LocationAttr,mlir::detail::FusedLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSB_19FusedLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7 = (uint64_t *)a2[1];
  uint64_t v6 = a2[2];
  uint64_t v8 = a2[3];
  v12[0] = a3;
  v12[1] = a4;
  void v12[2] = a5;
  v12[3] = a6;
  if (v6)
  {
    uint64_t v9 = 8 * v6;
    do
    {
      uint64_t v10 = *v7++;
      mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v10);
      v9 -= 8;
    }
    while (v9);
  }
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v12, v8);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_8FusedLocENS1_12LocationAttrENSA_19FusedLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v5 = a3;
  *((void *)&v5 + 1) = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::FusedLoc>(a2, &v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::FusedLoc>(uint64_t a1, long long *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a1;
  long long v2 = *(_OWORD *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 24);
  long long v13 = *a2;
  long long v14 = v2;
  mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::Location>,mlir::Attribute>,void>::replace((uint64_t)&v14, (uint64_t **)&v13, (uint64_t)&v26);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v16);
  unsigned int v23 = v25;
  uint64_t v24 = 0x600000000;
  uint64_t v4 = v27;
  if (!v27)
  {
    uint64_t v4 = 0;
    unsigned int v7 = v25;
    goto LABEL_9;
  }
  if (v27 < 7)
  {
    uint64_t v6 = v25;
    unsigned int v5 = v27;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, v25, v27, 8);
  unsigned int v5 = v27;
  if (v27)
  {
    uint64_t v6 = v23;
LABEL_7:
    memcpy(v6, v26, 8 * v5);
  }
  LODWORD(v24) = v4;
  unsigned int v7 = v23;
LABEL_9:
  uint64_t v8 = v29;
  void v25[6] = v29;
  uint64_t AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v17[0] = &mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id;
  v17[1] = Context;
  v22[0] = _ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEENS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v22[1] = v17;
  v20[0] = v7;
  v20[1] = v4;
  uint64_t v21 = v8;
  unsigned int v10 = llvm::hash_combine<llvm::ArrayRef<mlir::Location>,mlir::Attribute>((uint64_t)v20, &v21);
  v18[0] = v20;
  v18[1] = v22;
  unint64_t v19 = v20;
  uint64_t ParametricStorageTypeImpl = mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FusedLoc,void>::id, v10, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v19, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v18);
  if (v23 != v25) {
    free(v23);
  }
  if (v26 != &v28) {
    free(v26);
  }
  return ParametricStorageTypeImpl;
}

void mlir::AttrTypeSubElementHandler<std::tuple<llvm::ArrayRef<mlir::Location>,mlir::Attribute>,void>::replace(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::Location>,void>::replace(*(void *)(a1 + 8), (uint64_t)a2, (uint64_t)&__src);
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)a2[1] - 1;
    ++*a2;
    a2[1] = (uint64_t *)v7;
    uint64_t v8 = *v6;
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (void *)(a3 + 16);
  *(void *)a3 = a3 + 16;
  *(void *)(a3 + 8) = 0x600000000;
  unsigned int v10 = v15;
  long long v11 = __src;
  if (!v15 || &__src == (void **)a3) {
    goto LABEL_15;
  }
  if (__src == v17)
  {
    if (v15 < 7)
    {
      unsigned int v13 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v15, 8);
      unsigned int v13 = v15;
      long long v11 = __src;
      if (!v15)
      {
LABEL_13:
        *(_DWORD *)(a3 + 8) = v10;
        goto LABEL_14;
      }
      uint64_t v9 = *(void **)a3;
    }
    memcpy(v9, v11, 8 * v13);
    long long v11 = __src;
    goto LABEL_13;
  }
  *(void *)a3 = __src;
  int v12 = v16;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v12;
  __src = v17;
  int v16 = 0;
  long long v11 = v17;
LABEL_14:
  unsigned int v15 = 0;
LABEL_15:
  *(void *)(a3 + 64) = v8;
  if (v11 != v17) {
    free(v11);
  }
}

void mlir::AttrTypeSubElementHandler<llvm::ArrayRef<mlir::Location>,void>::replace(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v17[6] = *MEMORY[0x1E4F143B8];
  unsigned int v15 = v17;
  uint64_t v16 = 0x600000000;
  if (a1)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = v17;
    uint64_t v7 = 8 * a1;
    do
    {
      uint64_t v8 = *(uint64_t **)a2;
      uint64_t v9 = *(void *)(a2 + 8) - 1;
      *(void *)a2 += 8;
      *(void *)(a2 + 8) = v9;
      uint64_t v10 = *v8;
      uint64_t v11 = v5;
      if (v5 >= HIDWORD(v16))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, v17, v5 + 1, 8);
        uint64_t v11 = v16;
      }
      v15[v11] = v10;
      unint64_t v5 = (v16 + 1);
      LODWORD(v16) = v16 + 1;
      v7 -= 8;
    }
    while (v7);
    int v12 = v15;
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x600000000;
    if (v5 && &v15 != (void **)a3)
    {
      if (v12 == v17)
      {
        unsigned int v14 = v5;
        if (v5 < 7
          || (llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v5, 8),
              unsigned int v14 = v16,
              uint64_t v6 = v15,
              v16))
        {
          memcpy(*(void **)a3, v6, 8 * v14);
          uint64_t v6 = v15;
        }
        *(_DWORD *)(a3 + 8) = v5;
      }
      else
      {
        *(void *)a3 = v12;
        int v13 = HIDWORD(v16);
        *(_DWORD *)(a3 + 8) = v5;
        *(_DWORD *)(a3 + 12) = v13;
        unsigned int v15 = v17;
        HIDWORD(v16) = 0;
      }
      LODWORD(v16) = 0;
      int v12 = v6;
    }
    if (v12 != v17) {
      free(v12);
    }
  }
  else
  {
    *(void *)a3 = a3 + 16;
    *(void *)(a3 + 8) = 0x600000000;
  }
}

uint64_t mlir::detail::StorageUserBase<mlir::NameLoc,mlir::LocationAttr,mlir::detail::NameLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSB_18NameLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  v9[0] = a3;
  v9[1] = a4;
  void v9[2] = a5;
  void v9[3] = a6;
  mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v6);
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v9, v7);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_7NameLocENS1_12LocationAttrENSA_18NameLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v5[0] = a3;
  v5[1] = a4;
  return mlir::detail::replaceImmediateSubElementsImpl<mlir::NameLoc>(a2, v5);
}

uint64_t mlir::detail::replaceImmediateSubElementsImpl<mlir::NameLoc>(uint64_t a1, uint64_t **a2)
{
  uint64_t v10 = a1;
  long long v2 = *a2;
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *v2++;
    uint64_t v3 = v4;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *v2;
  mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v11 = v3;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id;
  v12[1] = Context;
  v17[0] = _ZN4llvm12function_refIFvPN4mlir6detail18NameLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_7NameLocEJRNS1_10StringAttrERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESH_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSJ_E_EEvlS4_;
  v17[1] = v12;
  uint64_t v15 = v11;
  uint64_t v16 = v5;
  unsigned int v8 = llvm::hash_combine<mlir::Type,mlir::Attribute>(&v15, &v16);
  v13[0] = &v15;
  v13[1] = v17;
  unsigned int v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NameLoc,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::NameLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::NameLocAttrStorage,mlir::StringAttr &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::NameLocAttrStorage *)>,mlir::TypeID,mlir::StringAttr &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::OpaqueLoc,mlir::LocationAttr,mlir::detail::OpaqueLocAttrStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFvN4mlir9AttributeENS0_IFvS2_EEENS0_IFvNS1_4TypeEEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSB_20OpaqueLocAttrStorageENSB_16AttributeUniquerEJEE29getWalkImmediateSubElementsFnEvEUlT_S4_S7_E_EEvlS2_S4_S7_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a2 + 24);
  v8[0] = a3;
  v8[1] = a4;
  void v8[2] = a5;
  v8[3] = a6;
  return mlir::AttrTypeImmediateSubElementWalker::walk((uint64_t)v8, v6);
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_9OpaqueLocENS1_12LocationAttrENSA_20OpaqueLocAttrStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *a3;
  mlir::Attribute::getContext((mlir::Attribute *)&v10);
  uint64_t v11 = v5;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  uint64_t AttributeUniquer = (unsigned __int8 **)mlir::MLIRContext::getAttributeUniquer(Context);
  v12[0] = &mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id;
  v12[1] = Context;
  v18[0] = _ZN4llvm12function_refIFvPN4mlir6detail20OpaqueLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_9OpaqueLocEJRmRNS1_6TypeIDERNS1_8LocationEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextESC_DpOT0_EUlPSK_E_EEvlS4_;
  v18[1] = v12;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  uint64_t v17 = v11;
  unsigned int v8 = llvm::hash_combine<unsigned long,mlir::TypeID,mlir::Location>(&v15, &v16, &v17);
  v13[0] = &v15;
  v13[1] = v18;
  unsigned int v14 = &v15;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(AttributeUniquer, (uint64_t)&mlir::detail::TypeIDResolver<mlir::OpaqueLoc,void>::id, v8, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v14, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::OpaqueLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::OpaqueLocAttrStorage,unsigned long &,mlir::TypeID &,mlir::Location &>(llvm::function_ref<void ()(mlir::detail::OpaqueLocAttrStorage *)>,mlir::TypeID,unsigned long &,mlir::TypeID &,mlir::Location &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v13);
}

uint64_t mlir::detail::StorageUserBase<mlir::UnknownLoc,mlir::LocationAttr,mlir::AttributeStorage,mlir::detail::AttributeUniquer>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1}::__invoke()
{
  return 0;
}

uint64_t _ZN4llvm12function_refIFN4mlir9AttributeES2_NS_8ArrayRefIS2_EENS3_INS1_4TypeEEEEE11callback_fnIZNS1_6detail15StorageUserBaseINS1_10UnknownLocENS1_12LocationAttrENS1_16AttributeStorageENSA_16AttributeUniquerEJEE32getReplaceImmediateSubElementsFnEvEUlT_S4_S6_E_EES2_lS2_S4_S6_(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *_ZN4llvm12function_refIFvPN4mlir16AttributeStorageEEE11callback_fnIZNS1_6detail16AttributeUniquer17registerAttributeINS1_10UnknownLocEEENSt3__19enable_ifIXsr3std7is_sameINT_8ImplTypeES2_EE5valueEvE4typeEPNS1_11MLIRContextENS1_6TypeIDEEUlS3_E_EEvlS3_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, *a1, a1[1]);
}

void *llvm::DenseMapBase<llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>,mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::InsertIntoBucket<mlir::Location const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, void *a2, void *a3)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::grow(a1, v7);
  int v9 = *(_DWORD *)(a1 + 16);
  if (v9)
  {
    int v10 = v9 - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v9 - 1);
    a2 = (void *)(*(void *)a1 + 8 * v11);
    uint64_t v12 = *a2;
    if (*a3 != *a2)
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          int v13 = a2;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a2 = (void *)(*(void *)a1 + 8 * (v16 & v10));
        uint64_t v12 = *a2;
        if (*a3 == *a2) {
          goto LABEL_3;
        }
      }
      if (v13) {
        a2 = v13;
      }
    }
  }
  else
  {
    a2 = 0;
  }
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  return a2;
}

int64x2_t *llvm::DenseMap<mlir::Location,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<mlir::Location,void>,llvm::detail::DenseSetPair<mlir::Location>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unint64_t result = (int64x2_t *)llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  int v10 = (char *)result;
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 16);
    if (v11)
    {
      unint64_t v12 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v12 < 3) {
        goto LABEL_10;
      }
      unint64_t v13 = v12 + 1;
      int v10 = &result->i8[8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      int v14 = result + 1;
      int64x2_t v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v14[-1] = v15;
        *int v14 = v15;
        v14 += 2;
        v16 -= 4;
      }
      while (v16);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_10:
        uint64_t v17 = &result->i8[8 * v11];
        do
        {
          *(void *)int v10 = -4096;
          v10 += 8;
        }
        while (v10 != v17);
      }
    }
    if (v3)
    {
      uint64_t v18 = v4;
      do
      {
        uint64_t v27 = *(void *)v18;
        if ((*(void *)v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v28 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v29 = v28 & ((v27 >> 4) ^ (v27 >> 9));
          int v26 = (void *)(*(void *)a1 + 8 * v29);
          uint64_t v30 = *v26;
          if (v27 != *v26)
          {
            unsigned int v31 = 0;
            int v32 = 1;
            while (v30 != -4096)
            {
              if (v31) {
                BOOL v33 = 0;
              }
              else {
                BOOL v33 = v30 == -8192;
              }
              if (v33) {
                unsigned int v31 = v26;
              }
              unsigned int v34 = v29 + v32++;
              unsigned int v29 = v34 & v28;
              int v26 = (void *)(*(void *)a1 + 8 * (v34 & v28));
              uint64_t v30 = *v26;
              if (v27 == *v26) {
                goto LABEL_24;
              }
            }
            if (v31) {
              int v26 = v31;
            }
          }
LABEL_24:
          void *v26 = v27;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v18 = (llvm *)((char *)v18 + 8);
      }
      while (v18 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v19 = *(unsigned int *)(a1 + 16);
  if (v19)
  {
    unint64_t v20 = (v19 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v20 < 3) {
      goto LABEL_19;
    }
    unint64_t v21 = v20 + 1;
    int v10 = &result->i8[8 * (v21 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v22 = result + 1;
    int64x2_t v23 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v22[-1] = v23;
      *uint64_t v22 = v23;
      v22 += 2;
      v24 -= 4;
    }
    while (v24);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      uint64_t v25 = &result->i8[8 * v19];
      do
      {
        *(void *)int v10 = -4096;
        v10 += 8;
      }
      while (v10 != v25);
    }
  }
  return result;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2[2];
  if (v3 == *(void *)(*a1 + 8))
  {
    if (!v3) {
      return a2[3] == *(void *)(v2 + 16);
    }
    uint64_t v4 = (void *)a2[1];
    unint64_t v5 = *(void **)v2;
    uint64_t v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6) {
        return a2[3] == *(void *)(v2 + 16);
      }
    }
  }
  return 0;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location>,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location>,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  uint64_t v3 = mlir::detail::FusedLocAttrStorage::construct(__sz, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESI_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSK_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2[2];
  if (v3 == *(void *)(*a1 + 8))
  {
    if (!v3) {
      return a2[3] == *(void *)(v2 + 16);
    }
    uint64_t v4 = (void *)a2[1];
    unint64_t v5 = *(void **)v2;
    uint64_t v6 = 8 * v3;
    while (*v4 == *v5)
    {
      ++v4;
      ++v5;
      v6 -= 8;
      if (!v6) {
        return a2[3] == *(void *)(v2 + 16);
      }
    }
  }
  return 0;
}

void *llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::FusedLocAttrStorage * mlir::StorageUniquer::get<mlir::detail::FusedLocAttrStorage,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &>(llvm::function_ref<void ()(mlir::detail::FusedLocAttrStorage *)>,mlir::TypeID,llvm::ArrayRef<mlir::Location> &,mlir::Attribute &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t a1, size_t __sz)
{
  uint64_t v3 = mlir::detail::FusedLocAttrStorage::construct(__sz, *(uint64_t **)a1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)v4) {
    (*(void (**)(void, void *))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

void *_ZN4llvm12function_refIFvPN4mlir6detail19FusedLocAttrStorageEEE11callback_fnIZNS2_16AttributeUniquer13getWithTypeIDINS1_8FusedLocEJRNS_8ArrayRefINS1_8LocationEEERNS1_9AttributeEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_16AttributeStorageEEE5valueESJ_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSL_E_EEvlS4_(uint64_t *a1, void *a2)
{
  return mlir::detail::AttributeUniquer::initializeAttributeStorage(a2, a1[1], *a1);
}

mlir::MLIRContextImpl **mlir::MLIRContext::MLIRContext(mlir::MLIRContextImpl **a1, void *a2, int a3)
{
  uint64_t v6 = (mlir::MLIRContextImpl *)operator new(0x2C0uLL);
  int v7 = v6;
  if (a3 != 1)
  {
    mlir::MLIRContextImpl::MLIRContextImpl(v6, 0);
    *a1 = v7;
    if (atomic_load((unint64_t *)&clOptions)) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  if (!atomic_load((unint64_t *)&clOptions))
  {
    mlir::MLIRContextImpl::MLIRContextImpl(v6, 1);
    *a1 = v7;
    if (atomic_load((unint64_t *)&clOptions)) {
      goto LABEL_8;
    }
LABEL_14:
    uint64_t v11 = *a1;
    goto LABEL_15;
  }
  if (!atomic_load_explicit(&clOptions, memory_order_acquire)) {
  mlir::MLIRContextImpl::MLIRContextImpl(v7, *(unsigned char *)(clOptions + 128) == 0);
  }
  *a1 = v7;
  if (!atomic_load((unint64_t *)&clOptions)) {
    goto LABEL_14;
  }
LABEL_8:
  if (!atomic_load_explicit(&clOptions, memory_order_acquire))
  {
    *((unsigned char *)*a1 + 42) = *(unsigned char *)(clOptions + 320);
    if (atomic_load_explicit(&clOptions, memory_order_acquire)) {
      goto LABEL_10;
    }
LABEL_12:
    goto LABEL_10;
  }
  *((unsigned char *)*a1 + 42) = *(unsigned char *)(clOptions + 320);
  if (!atomic_load_explicit(&clOptions, memory_order_acquire)) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v11 = *a1;
  *((unsigned char *)*a1 + 43) = *(unsigned char *)(clOptions + 512);
LABEL_15:
  mlir::DialectRegistry::appendTo(a2, (uint64_t **)v11 + 31);
  int v39 = a1;
  mlir::MLIRContext::getOrLoadDialect(a1, (uint64_t)"builtin", 7, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BuiltinDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::BuiltinDialect * mlir::MLIRContext::getOrLoadDialect<mlir::BuiltinDialect>(void)::{lambda(void)#1}>, (uint64_t)&v39);
  *((void *)*a1 + 44) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id);
  *((void *)*a1 + 45) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id);
  *((void *)*a1 + 46) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id);
  *((void *)*a1 + 47) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id);
  *((void *)*a1 + 48) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id);
  *((void *)*a1 + 49) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id);
  *((void *)*a1 + 50) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id);
  *((void *)*a1 + 51) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id);
  *((void *)*a1 + 52) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id);
  *((void *)*a1 + 53) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id);
  *((void *)*a1 + 54) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id);
  *((void *)*a1 + 55) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id);
  *((void *)*a1 + 56) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id);
  unsigned int v37 = 0;
  unsigned int v38 = 1;
  uint64_t v41 = a1;
  unint64_t v13 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  int v40 = &v41;
  *((void *)*a1 + 57) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v13, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  unsigned int v37 = 0;
  unsigned int v38 = 8;
  int v40 = &v41;
  uint64_t v41 = a1;
  int v14 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((void *)*a1 + 58) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v14, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  unsigned int v37 = 0;
  unsigned int v38 = 16;
  int v40 = &v41;
  uint64_t v41 = a1;
  int64x2_t v15 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((void *)*a1 + 59) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v15, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  unsigned int v37 = 0;
  unsigned int v38 = 32;
  int v40 = &v41;
  uint64_t v41 = a1;
  uint64_t v16 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((void *)*a1 + 60) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v16, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  unsigned int v37 = 0;
  unsigned int v38 = 64;
  int v40 = &v41;
  uint64_t v41 = a1;
  uint64_t v17 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((void *)*a1 + 61) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v17, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  unsigned int v37 = 0;
  unsigned int v38 = 128;
  int v40 = &v41;
  uint64_t v41 = a1;
  uint64_t v18 = (unsigned __int8 **)((char *)*a1 + 344);
  int v39 = (mlir::MLIRContextImpl **)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  *((void *)*a1 + 62) = mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(v18, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_, (uint64_t)&v39, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v38, &v37);
  *((void *)*a1 + 63) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 43, (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id);
  *((void *)*a1 + 71) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnknownLoc,void>::id);
  *((void *)*a1 + 68) = mlir::IntegerAttr::getBoolAttrUnchecked(*((void *)*a1 + 57), 0);
  *((void *)*a1 + 69) = mlir::IntegerAttr::getBoolAttrUnchecked(*((void *)*a1 + 57), 1u);
  *((void *)*a1 + 70) = mlir::StorageUniquer::getSingletonImpl((uint64_t *)*a1 + 67, (uint64_t)&mlir::detail::TypeIDResolver<mlir::UnitAttr,void>::id);
  *((void *)*a1 + 72) = mlir::DictionaryAttr::getEmptyUnchecked((mlir::DictionaryAttr *)a1, v19);
  *((void *)*a1 + 73) = mlir::StringAttr::getEmptyStringAttrUnchecked((mlir::StringAttr *)a1, v20);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineBinaryOpExprStorage>((uint64_t *)*a1 + 39, v21, v22, v23);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineConstantExprStorage>((uint64_t *)*a1 + 39, v24, v25, v26);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineDimExprStorage>((uint64_t *)*a1 + 39, v27, v28, v29);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineMapStorage>((uint64_t *)*a1 + 39, v30, v31, v32);
  mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerSetStorage>((uint64_t *)*a1 + 39, v33, v34, v35);
  return a1;
}

mlir::MLIRContextImpl **mlir::MLIRContext::MLIRContext(mlir::MLIRContextImpl **a1, int a2)
{
  mlir::DialectRegistry::DialectRegistry((mlir::DialectRegistry *)v10);
  mlir::MLIRContext::MLIRContext(a1, v10, a2);
  uint64_t v4 = __p;
  if (__p)
  {
    unint64_t v5 = v12;
    uint64_t v6 = __p;
    if (v12 != __p)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        void *v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      uint64_t v6 = __p;
    }
    unint64_t v12 = v4;
    operator delete(v6);
  }
  std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy((uint64_t)v10, (void *)v10[1]);
  return a1;
}

uint64_t mlir::MLIRContext::printOpOnDiagnostic(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 42) = a2;
  return this;
}

void *mlir::DialectRegistry::appendTo(void *this, uint64_t **a2)
{
  uint64_t v3 = this;
  uint64_t v4 = this + 1;
  unint64_t v5 = (void *)*this;
  if ((void *)*this != this + 1)
  {
    do
    {
      int v8 = *((char *)v5 + 55);
      if (v8 >= 0) {
        int v9 = v5 + 4;
      }
      else {
        int v9 = (void *)v5[4];
      }
      if (v8 >= 0) {
        size_t v10 = *((unsigned __int8 *)v5 + 55);
      }
      else {
        size_t v10 = v5[5];
      }
      this = mlir::DialectRegistry::insert(a2, (uint64_t *)v5[7], v9, v10, v5 + 8);
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          unint64_t v5 = v12;
        }
        while (!v13);
      }
      unint64_t v5 = v12;
    }
    while (v12 != v4);
  }
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  if (v6 != v7)
  {
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**(void **)v6 + 24))(&v16);
      int v14 = a2[4];
      if (v14 < a2[5]) {
        break;
      }
      a2[4] = std::vector<std::unique_ptr<mlir::DialectExtensionBase>>::__push_back_slow_path<std::unique_ptr<mlir::DialectExtensionBase>>(a2 + 3, (uint64_t *)&v16);
      this = v16;
      uint64_t v16 = 0;
      if (this) {
        goto LABEL_22;
      }
LABEL_17:
      v6 += 8;
      if (v6 == v7) {
        return this;
      }
    }
    int64x2_t v15 = v16;
    uint64_t v16 = 0;
    *int v14 = (uint64_t)v15;
    a2[4] = v14 + 1;
    this = v16;
    uint64_t v16 = 0;
    if (!this) {
      goto LABEL_17;
    }
LABEL_22:
    this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
    goto LABEL_17;
  }
  return this;
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineBinaryOpExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    int64x2_t v15 = a1;
    unint64_t v4 = 0x1E8EB8000;
    int v7 = v6;
    a1 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineBinaryOpExprStorage]";
      unint64_t v17 = 89;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      size_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::AffineBinaryOpExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v4 = 0x1E8EB8000;
      a1 = v15;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, *(void *)(v4 + 3704), 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineConstantExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    int64x2_t v15 = a1;
    unint64_t v4 = 0x1E8EB8000;
    int v7 = v6;
    a1 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineConstantExprStorage]";
      unint64_t v17 = 89;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      size_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::AffineConstantExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v4 = 0x1E8EB8000;
      a1 = v15;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, *(void *)(v4 + 3712), 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineDimExprStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    int64x2_t v15 = a1;
    unint64_t v4 = 0x1E8EB8000;
    int v7 = v6;
    a1 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineDimExprStorage]";
      unint64_t v17 = 84;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      size_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::AffineDimExprStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v4 = 0x1E8EB8000;
      a1 = v15;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, *(void *)(v4 + 3696), 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::AffineMapStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    int64x2_t v15 = a1;
    unint64_t v4 = 0x1E8EB8000;
    int v7 = v6;
    a1 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineMapStorage]";
      unint64_t v17 = 80;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      size_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v4 = 0x1E8EB8000;
      a1 = v15;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, *(void *)(v4 + 3680), 0, a4);
}

uint64_t *mlir::StorageUniquer::registerParametricStorageType<mlir::detail::IntegerSetStorage>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = 0x1E8EB8000uLL;
  {
    int64x2_t v15 = a1;
    unint64_t v4 = 0x1E8EB8000;
    int v7 = v6;
    a1 = v15;
    if (v7)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::IntegerSetStorage]";
      unint64_t v17 = 81;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      size_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v4 = 0x1E8EB8000;
      a1 = v15;
    }
  }
  return mlir::StorageUniquer::registerParametricStorageTypeImpl(a1, *(void *)(v4 + 3688), 0, a4);
}

void mlir::MLIRContext::~MLIRContext(mlir::MLIRContextImpl **this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2) {
    mlir::MLIRContextImpl::~MLIRContextImpl(v2);
  }
}

uint64_t mlir::MLIRContext::executeActionInternal(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v5 + 48))(v5, v8, a4);
  }
  int v7 = (mlir::MLIRContext *)std::__throw_bad_function_call[abi:nn180100]();
  return mlir::MLIRContext::hasActionHandler(v7);
}

BOOL mlir::MLIRContext::hasActionHandler(mlir::MLIRContext *this)
{
  return *(void *)(*(void *)this + 24) != 0;
}

uint64_t mlir::MLIRContext::getDiagEngine(mlir::MLIRContext *this)
{
  return *(void *)this + 32;
}

void mlir::MLIRContext::appendDialectRegistry(mlir::MLIRContext *this, const mlir::DialectRegistry *a2)
{
  if ((mlir::DialectRegistry::isSubsetOf(a2, *(void *)this + 248) & 1) == 0)
  {
    mlir::DialectRegistry::appendTo(a2, (uint64_t **)(*(void *)this + 248));
    mlir::DialectRegistry::applyExtensions(a2, this);
  }
}

void mlir::MLIRContext::getLoadedDialects(mlir::MLIRContext *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(unsigned int *)(*(void *)this + 232);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    int v6 = (char *)operator new(8 * v4);
    *a2 = v6;
    a2[1] = v6;
    a2[2] = &v6[v5];
    uint64_t v7 = *(unsigned int *)(v3 + 240);
    if (v7)
    {
      uint64_t v8 = 24 * v7;
      for (uint64_t i = *(void **)(v3 + 224); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
      {
        v8 -= 24;
        if (!v8) {
          return;
        }
      }
    }
    else
    {
      uint64_t i = *(void **)(v3 + 224);
    }
    uint64_t v10 = *(void *)(v3 + 224) + 24 * v7;
    if (i != (void *)v10)
    {
LABEL_9:
      uint64_t v11 = i[2];
      unint64_t v12 = (unint64_t)a2[2];
      if ((unint64_t)v6 < v12)
      {
        *(void *)int v6 = v11;
        uint64_t v13 = (uint64_t)(v6 + 8);
        a2[1] = v6 + 8;
        goto LABEL_37;
      }
      uint64_t v14 = *a2;
      uint64_t v15 = v6 - *a2;
      uint64_t v16 = v15 >> 3;
      unint64_t v17 = (v15 >> 3) + 1;
      if (v17 >> 61) {
        abort();
      }
      uint64_t v18 = v12 - (void)v14;
      if (v18 >> 2 > v17) {
        unint64_t v17 = v18 >> 2;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19)
      {
        if (v19 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v20 = operator new(8 * v19);
        uint64_t v21 = &v20[8 * v16];
        uint64_t v22 = &v20[8 * v19];
        *(void *)uint64_t v21 = v11;
        uint64_t v13 = (uint64_t)(v21 + 8);
        if (v6 != v14)
        {
LABEL_20:
          unint64_t v23 = v6 - 8 - v14;
          if (v23 >= 0x168)
          {
            if (&v20[v15 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8])
            {
              uint64_t v24 = v6;
            }
            else if (&v6[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v6 - 8)
            {
              uint64_t v24 = v6;
            }
            else if ((unint64_t)(v6 - &v20[v15]) >= 0x20)
            {
              uint64_t v25 = (v23 >> 3) + 1;
              uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v24 = &v6[-v26];
              v21 -= v26;
              uint64_t v27 = &v20[8 * v16 - 16];
              uint64_t v28 = v6 - 16;
              uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v30 = *(_OWORD *)v28;
                *(v27 - 1) = *((_OWORD *)v28 - 1);
                *uint64_t v27 = v30;
                v27 -= 2;
                v28 -= 32;
                v29 -= 4;
              }
              while (v29);
              if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_34:
                int v6 = *a2;
                *a2 = v21;
                a2[1] = (char *)v13;
                a2[2] = v22;
                if (!v6) {
                  goto LABEL_36;
                }
                goto LABEL_35;
              }
            }
            else
            {
              uint64_t v24 = v6;
            }
          }
          else
          {
            uint64_t v24 = v6;
          }
          do
          {
            uint64_t v31 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v21 - 1) = v31;
            v21 -= 8;
          }
          while (v24 != v14);
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = (char *)(8 * v16);
        uint64_t v22 = 0;
        *(void *)(8 * v16) = v11;
        uint64_t v13 = 8 * v16 + 8;
        if (v6 != v14) {
          goto LABEL_20;
        }
      }
      *a2 = v21;
      a2[1] = (char *)v13;
      a2[2] = v22;
LABEL_35:
      operator delete(v6);
LABEL_36:
      a2[1] = (char *)v13;
LABEL_37:
      while (1)
      {
        i += 3;
        if (i == (void *)v10) {
          break;
        }
        if (*i < 0xFFFFFFFFFFFFFFFELL)
        {
          int v6 = (char *)v13;
          if (i != (void *)v10) {
            goto LABEL_9;
          }
          break;
        }
      }
      uint64_t v32 = v13 - (void)*a2;
      if (v32 >= 16)
      {
        uint64_t v33 = *a2;
        qsort(v33, (unint64_t)v32 >> 3, 8uLL, (int (__cdecl *)(const void *, const void *))mlir::MLIRContext::getLoadedDialects(void)::$_0::__invoke);
      }
    }
  }
}

void mlir::MLIRContext::getAvailableDialects(mlir::MLIRContext *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void **)(*(void *)this + 248);
  uint64_t v4 = *(void *)this + 256;
  if (v3 != (void *)v4)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = *((char *)v3 + 55);
      if (v6 >= 0) {
        uint64_t v7 = v3 + 4;
      }
      else {
        uint64_t v7 = (void *)v3[4];
      }
      if (v6 >= 0) {
        uint64_t v8 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        uint64_t v8 = v3[5];
      }
      unint64_t v9 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v9)
      {
        uint64_t v10 = *a2;
        uint64_t v11 = (v5 - *a2) >> 4;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60) {
          abort();
        }
        uint64_t v13 = v9 - (void)v10;
        if (v13 >> 3 > v12) {
          unint64_t v12 = v13 >> 3;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          if (v14 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v15 = (char *)operator new(16 * v14);
          uint64_t v16 = &v15[16 * v11];
          *(void *)uint64_t v16 = v7;
          *((void *)v16 + 1) = v8;
          if (v5 == v10)
          {
LABEL_32:
            uint64_t v18 = v5;
            uint64_t v5 = v16 + 16;
            *a2 = v16;
            a2[1] = v16 + 16;
            a2[2] = &v15[16 * v14];
            if (!v18) {
              goto LABEL_25;
            }
LABEL_24:
            operator delete(v18);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = (char *)(16 * v11);
          *(void *)uint64_t v16 = v7;
          *((void *)v16 + 1) = v8;
          if (v5 == v10) {
            goto LABEL_32;
          }
        }
        unint64_t v17 = v16;
        do
        {
          *((_OWORD *)v17 - 1) = *((_OWORD *)v5 - 1);
          v17 -= 16;
          v5 -= 16;
        }
        while (v5 != v10);
        uint64_t v18 = *a2;
        uint64_t v5 = v16 + 16;
        *a2 = v17;
        a2[1] = v16 + 16;
        a2[2] = &v15[16 * v14];
        if (v18) {
          goto LABEL_24;
        }
      }
      else
      {
        *(void *)uint64_t v5 = v7;
        *((void *)v5 + 1) = v8;
        v5 += 16;
      }
LABEL_25:
      a2[1] = v5;
      unint64_t v19 = (void *)v3[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          unint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (void *)v3[2];
          BOOL v21 = *v20 == (void)v3;
          uint64_t v3 = v20;
        }
        while (!v21);
      }
      uint64_t v3 = v20;
    }
    while (v20 != (void *)v4);
  }
}

uint64_t mlir::MLIRContext::getLoadedDialect(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)(*a1 + 224);
  uint64_t v10 = 0;
  int v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v5, (uint64_t)v9, &v10);
  uint64_t v7 = v10;
  if (!v6) {
    uint64_t v7 = *(void *)(v4 + 224) + 24 * *(unsigned int *)(v4 + 240);
  }
  if (v7 == *(void *)(*a1 + 224) + 24 * *(unsigned int *)(*a1 + 240)) {
    return 0;
  }
  else {
    return *(void *)(v7 + 16);
  }
}

uint64_t **(*mlir::MLIRContext::getOrLoadDialect(uint64_t a1, void *a2, size_t a3))(uint64_t a1, uint64_t a2)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (uint64_t *)(*(void *)a1 + 224);
  uint64_t v13 = 0;
  int v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v7, (uint64_t)v12, &v13);
  uint64_t v9 = *(void *)(v6 + 224) + 24 * *(unsigned int *)(v6 + 240);
  if (v8) {
    uint64_t v9 = v13;
  }
  if (v9 == *(void *)(*(void *)a1 + 224) + 24 * *(unsigned int *)(*(void *)a1 + 240)
    || (unint64_t result = *(uint64_t **(**)(uint64_t, uint64_t))(v9 + 16)) == 0)
  {
    unint64_t result = mlir::DialectRegistry::getDialectAllocator(*(void *)a1 + 248, a2, a3);
    if (result) {
      return (uint64_t **(*)(uint64_t, uint64_t))result(v11, a1);
    }
  }
  return result;
}

mlir::Dialect *mlir::MLIRContext::getOrLoadDialect(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  *(void *)&long long v31 = a2;
  *((void *)&v31 + 1) = a3;
  uint64_t v9 = *a1;
  uint64_t v10 = (uint64_t *)(*a1 + 224);
  v30[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v10, (uint64_t)&v31, v30))
  {
    uint64_t v11 = (mlir::Dialect *)v30[0][2];
    if (*((void *)v11 + 3) != a4)
    {
      __int16 v29 = 1283;
      v27[0] = (uint64_t)"a dialect with namespace '";
      long long v28 = v31;
      uint64_t v25 = "' has already been registered";
      __int16 v26 = 259;
      llvm::operator+(v27, (uint64_t *)&v25, (uint64_t)v30);
      llvm::report_fatal_error((llvm::Twine *)v30, 1);
    }
  }
  else
  {
    unint64_t v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v10, (uint64_t)&v31, (uint64_t)&v31, v30[0]);
    *(_OWORD *)unint64_t v12 = v31;
    void v12[2] = 0;
    a5(v27, a6);
    v30[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v10, (uint64_t)&v31, v30))
    {
      unint64_t v14 = (mlir::Dialect **)(v30[0] + 2);
      uint64_t v13 = v30[0][2];
      uint64_t v15 = v27[0];
      v27[0] = 0;
      v30[0][2] = v15;
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        uint64_t v16 = v27[0];
        v27[0] = 0;
        if (v16) {
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        }
      }
    }
    else
    {
      unint64_t v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v10, (uint64_t)&v31, (uint64_t)&v31, v30[0]);
      *(_OWORD *)unint64_t v17 = v31;
      void v17[2] = v27[0];
      unint64_t v14 = (mlir::Dialect **)(v17 + 2);
    }
    uint64_t v11 = *v14;
    v30[0] = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(v9 + 664), (uint64_t)&v31, v30))
    {
      uint64_t v18 = v30[0];
      if (v30[0] != (void *)(*(void *)(v9 + 664) + 80 * *(unsigned int *)(v9 + 680)))
      {
        unint64_t v19 = (_OWORD *)v30[0][2];
        uint64_t v20 = *((unsigned int *)v30[0] + 6);
        if (v20)
        {
          uint64_t v21 = 8 * v20;
          uint64_t v22 = (uint64_t *)v30[0][2];
          do
          {
            uint64_t v23 = *v22++;
            *(void *)(v23 + 32) = v11;
            v21 -= 8;
          }
          while (v21);
        }
        if (v19 != v18 + 2) {
          free(v19);
        }
        *uint64_t v18 = xmmword_181101A20;
        *(int32x2_t *)(v9 + 672) = vadd_s32(*(int32x2_t *)(v9 + 672), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    mlir::DialectRegistry::applyExtensions((mlir::DialectRegistry *)(v9 + 248), v11);
  }
  return v11;
}

BOOL mlir::MLIRContext::isDialectLoading(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)(*a1 + 224);
  uint64_t v10 = 0;
  int v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v5, (uint64_t)v9, &v10);
  uint64_t v7 = v10;
  if (!v6) {
    uint64_t v7 = *(void *)(v4 + 224) + 24 * *(unsigned int *)(v4 + 240);
  }
  return v7 != *(void *)(*a1 + 224) + 24 * *(unsigned int *)(*a1 + 240) && *(void *)(v7 + 16) == 0;
}

unint64_t mlir::MLIRContext::getRegistryHash(mlir::MLIRContext *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(*(void *)this + 232);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  {
    int v10 = v2;
    int v2 = v10;
    if (v11)
    {
      unint64_t v12 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v12 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v12;
      int v2 = v10;
    }
  }
  uint64_t v32 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&long long v24 = 0;
  DWORD2(v24) = v2;
  unint64_t v3 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v24, 0, (char *)((unint64_t)&v24 | 0xC), (char *)&v28);
  int v4 = *(_DWORD *)(*(void *)this + 520);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  {
    unint64_t v23 = v3;
    int v22 = v4;
    int v4 = v22;
    int v14 = v13;
    unint64_t v3 = v23;
    if (v14)
    {
      unint64_t v15 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v15 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v15;
      int v4 = v22;
      unint64_t v3 = v23;
    }
  }
  uint64_t v32 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&long long v24 = v3;
  DWORD2(v24) = v4;
  unint64_t v5 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v24, 0, (char *)((unint64_t)&v24 | 0xC), (char *)&v28);
  int v6 = *(_DWORD *)(*(void *)this + 196);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  {
    int v16 = v6;
    int v6 = v16;
    if (v17)
    {
      unint64_t v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v18 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v18;
      int v6 = v16;
    }
  }
  uint64_t v32 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&long long v24 = v5;
  DWORD2(v24) = v6;
  unint64_t v7 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v24, 0, (char *)((unint64_t)&v24 | 0xC), (char *)&v28);
  int v8 = *(_DWORD *)(*(void *)this + 328);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v24 = 0u;
  {
    unint64_t v19 = v7;
    unint64_t v7 = v19;
    if (v20)
    {
      unint64_t v21 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v21 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v21;
      unint64_t v7 = v19;
    }
  }
  uint64_t v32 = llvm::hashing::detail::get_execution_seed(void)::seed;
  *(void *)&long long v24 = v7;
  DWORD2(v24) = v8;
  return llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v24, 0, (char *)((unint64_t)&v24 | 0xC), (char *)&v28);
}

uint64_t mlir::MLIRContext::allowsUnregisteredDialects(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 40);
}

uint64_t mlir::MLIRContext::allowUnregisteredDialects(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)this + 40) = a2;
  return this;
}

uint64_t mlir::MLIRContext::isMultithreadingEnabled(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 41);
}

uint64_t mlir::MLIRContext::getNumThreads(mlir::MLIRContext *this)
{
  if (*(unsigned char *)(*(void *)this + 41)) {
    return *(unsigned int *)(*(void *)(*(void *)this + 48) + 308);
  }
  else {
    return 1;
  }
}

uint64_t mlir::MLIRContext::shouldPrintOpOnDiagnostic(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 42);
}

uint64_t mlir::MLIRContext::shouldPrintStackTraceOnDiagnostic(mlir::MLIRContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 43);
}

uint64_t mlir::MLIRContext::getRegisteredOperations(mlir::MLIRContext *this)
{
  return *(void *)(*(void *)this + 208);
}

uint64_t mlir::RegisteredOperationName::lookup(int8x16_t *a1, const unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  int Key = llvm::StringMapImpl::FindKey((uint64_t *)(*a3 + 184), a1, a2);
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(v3 + 192)) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(*(void *)(v3 + 184) + 8 * Key) + 8);
  }
}

_OWORD *mlir::Dialect::addType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = **(void **)(a1 + 32);
  *(void *)(v5 + 144) += 144;
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6) {
    BOOL v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 144 > *(void *)(v5 + 72) - v6;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 88) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *(unsigned int *)(v5 + 88);
    if (v11 >= *(_DWORD *)(v5 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 80, (void *)(v5 + 96), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v5 + 88);
    }
    *(void *)(*(void *)(v5 + 80) + 8 * v11) = buffer;
    ++*(_DWORD *)(v5 + 88);
    *(void *)(v5 + 72) = &buffer[v9];
    unint64_t v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 64) = v12 + 144;
  *(void *)unint64_t v12 = *(void *)a3;
  *(void *)(v12 + 8) = v12 + 24;
  unint64_t result = (_OWORD *)(v12 + 8);
  *(void *)(v12 + 16) = 0x300000000;
  if (*(_DWORD *)(a3 + 16)) {
    unint64_t result = (_OWORD *)llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)result, a3 + 8);
  }
  *(void *)(v12 + 96) = 0;
  uint64_t v14 = *(void *)(a3 + 96);
  *(void *)(v12 + 96) = v14;
  if (*(void *)(a3 + 96) >= 8uLL)
  {
    unint64_t result = (_OWORD *)(v12 + 72);
    unint64_t v15 = (long long *)(a3 + 72);
    if ((v14 & 2) != 0 && (v14 & 4) != 0)
    {
      unint64_t result = (_OWORD *)(*(uint64_t (**)(_OWORD *, long long *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v15);
    }
    else
    {
      long long v16 = *v15;
      *(void *)(v12 + 88) = *(void *)(a3 + 88);
      *unint64_t result = v16;
    }
    *(void *)(a3 + 96) = 0;
  }
  long long v17 = *(_OWORD *)(a3 + 104);
  long long v18 = *(_OWORD *)(a3 + 120);
  *(void *)(v12 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(v12 + 120) = v18;
  *(_OWORD *)(v12 + 104) = v17;
  unsigned int v19 = *(_DWORD *)(v5 + 336);
  if (!v19) {
    goto LABEL_41;
  }
  uint64_t v20 = *(void *)(v5 + 320);
  unsigned int v21 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v22 = (void *)(v20 + 16 * v21);
  uint64_t v23 = *v22;
  if (*v22 == a2) {
LABEL_21:
  }
    llvm::report_fatal_error((llvm *)"Dialect Type already registered.", (const char *)1);
  long long v25 = 0;
  int v26 = 1;
  while (v23 != -4096)
  {
    if (v25) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = v23 == -8192;
    }
    if (v27) {
      long long v25 = v22;
    }
    unsigned int v28 = v21 + v26++;
    unsigned int v21 = v28 & (v19 - 1);
    int v22 = (void *)(v20 + 16 * v21);
    uint64_t v23 = *v22;
    if (*v22 == a2) {
      goto LABEL_21;
    }
  }
  long long v29 = v25 ? v25 : v22;
  int v30 = *(_DWORD *)(v5 + 328);
  if (4 * v30 + 4 < 3 * v19)
  {
    if (v19 + ~v30 - *(_DWORD *)(v5 + 332) > v19 >> 3)
    {
LABEL_24:
      uint64_t v24 = *v29;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_41:
    v19 *= 2;
  }
  unint64_t result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v5 + 320, v19);
  uint64_t v31 = *(void *)(v5 + 320);
  int v32 = *(_DWORD *)(v5 + 336) - 1;
  unsigned int v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
  long long v29 = (void *)(v31 + 16 * v33);
  uint64_t v34 = *v29;
  if (*v29 != a2)
  {
    uint64_t v35 = 0;
    int v36 = 1;
    while (v34 != -4096)
    {
      if (v35) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v34 == -8192;
      }
      if (v37) {
        uint64_t v35 = v29;
      }
      unsigned int v38 = v33 + v36++;
      unsigned int v33 = v38 & v32;
      long long v29 = (void *)(v31 + 16 * (v38 & v32));
      uint64_t v34 = *v29;
      uint64_t v24 = a2;
      if (*v29 == a2) {
        goto LABEL_25;
      }
    }
    if (v35) {
      long long v29 = v35;
    }
    goto LABEL_24;
  }
  uint64_t v24 = a2;
LABEL_25:
  ++*(_DWORD *)(v5 + 328);
  if (v24 != -4096) {
    --*(_DWORD *)(v5 + 332);
  }
  *long long v29 = a2;
  v29[1] = v12;
  return result;
}

_OWORD *mlir::Dialect::addAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = **(void **)(a1 + 32);
  *(void *)(v5 + 144) += 144;
  uint64_t v6 = *(void *)(v5 + 64);
  if (v6) {
    BOOL v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) - v6 + 144 > *(void *)(v5 + 72) - v6;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v5 + 88) >> 7;
    if (v8 >= 0x1E) {
      LOBYTE(v8) = 30;
    }
    uint64_t v9 = 4096 << v8;
    buffer = (char *)llvm::allocate_buffer(4096 << v8, (std::align_val_t)8uLL);
    uint64_t v11 = *(unsigned int *)(v5 + 88);
    if (v11 >= *(_DWORD *)(v5 + 92))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 80, (void *)(v5 + 96), v11 + 1, 8);
      LODWORD(v11) = *(_DWORD *)(v5 + 88);
    }
    *(void *)(*(void *)(v5 + 80) + 8 * v11) = buffer;
    ++*(_DWORD *)(v5 + 88);
    *(void *)(v5 + 72) = &buffer[v9];
    unint64_t v12 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v5 + 64) = v12 + 144;
  *(void *)unint64_t v12 = *(void *)a3;
  *(void *)(v12 + 8) = v12 + 24;
  unint64_t result = (_OWORD *)(v12 + 8);
  *(void *)(v12 + 16) = 0x300000000;
  if (*(_DWORD *)(a3 + 16)) {
    unint64_t result = (_OWORD *)llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)result, a3 + 8);
  }
  *(void *)(v12 + 96) = 0;
  uint64_t v14 = *(void *)(a3 + 96);
  *(void *)(v12 + 96) = v14;
  if (*(void *)(a3 + 96) >= 8uLL)
  {
    unint64_t result = (_OWORD *)(v12 + 72);
    unint64_t v15 = (long long *)(a3 + 72);
    if ((v14 & 2) != 0 && (v14 & 4) != 0)
    {
      unint64_t result = (_OWORD *)(*(uint64_t (**)(_OWORD *, long long *))((v14 & 0xFFFFFFFFFFFFFFF8) + 8))(result, v15);
    }
    else
    {
      long long v16 = *v15;
      *(void *)(v12 + 88) = *(void *)(a3 + 88);
      *unint64_t result = v16;
    }
    *(void *)(a3 + 96) = 0;
  }
  long long v17 = *(_OWORD *)(a3 + 104);
  long long v18 = *(_OWORD *)(a3 + 120);
  *(void *)(v12 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(v12 + 120) = v18;
  *(_OWORD *)(v12 + 104) = v17;
  unsigned int v19 = *(_DWORD *)(v5 + 528);
  if (!v19) {
    goto LABEL_41;
  }
  uint64_t v20 = *(void *)(v5 + 512);
  unsigned int v21 = (v19 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v22 = (void *)(v20 + 16 * v21);
  uint64_t v23 = *v22;
  if (*v22 == a2) {
LABEL_21:
  }
    llvm::report_fatal_error((llvm *)"Dialect Attribute already registered.", (const char *)1);
  long long v25 = 0;
  int v26 = 1;
  while (v23 != -4096)
  {
    if (v25) {
      BOOL v27 = 0;
    }
    else {
      BOOL v27 = v23 == -8192;
    }
    if (v27) {
      long long v25 = v22;
    }
    unsigned int v28 = v21 + v26++;
    unsigned int v21 = v28 & (v19 - 1);
    int v22 = (void *)(v20 + 16 * v21);
    uint64_t v23 = *v22;
    if (*v22 == a2) {
      goto LABEL_21;
    }
  }
  long long v29 = v25 ? v25 : v22;
  int v30 = *(_DWORD *)(v5 + 520);
  if (4 * v30 + 4 < 3 * v19)
  {
    if (v19 + ~v30 - *(_DWORD *)(v5 + 524) > v19 >> 3)
    {
LABEL_24:
      uint64_t v24 = *v29;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_41:
    v19 *= 2;
  }
  unint64_t result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v5 + 512, v19);
  uint64_t v31 = *(void *)(v5 + 512);
  int v32 = *(_DWORD *)(v5 + 528) - 1;
  unsigned int v33 = v32 & ((a2 >> 4) ^ (a2 >> 9));
  long long v29 = (void *)(v31 + 16 * v33);
  uint64_t v34 = *v29;
  if (*v29 != a2)
  {
    uint64_t v35 = 0;
    int v36 = 1;
    while (v34 != -4096)
    {
      if (v35) {
        BOOL v37 = 0;
      }
      else {
        BOOL v37 = v34 == -8192;
      }
      if (v37) {
        uint64_t v35 = v29;
      }
      unsigned int v38 = v33 + v36++;
      unsigned int v33 = v38 & v32;
      long long v29 = (void *)(v31 + 16 * (v38 & v32));
      uint64_t v34 = *v29;
      uint64_t v24 = a2;
      if (*v29 == a2) {
        goto LABEL_25;
      }
    }
    if (v35) {
      long long v29 = v35;
    }
    goto LABEL_24;
  }
  uint64_t v24 = a2;
LABEL_25:
  ++*(_DWORD *)(v5 + 520);
  if (v24 != -4096) {
    --*(_DWORD *)(v5 + 524);
  }
  *long long v29 = a2;
  v29[1] = v12;
  return result;
}

uint64_t mlir::AbstractAttribute::lookup(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)a2 + 528);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(*(void *)a2 + 512);
  unsigned int v4 = v2 - 1;
  uint64_t v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v6 = *(void *)(v3 + 16 * v5);
  if (v6 != a1)
  {
    int v8 = 1;
    while (v6 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a1) {
        goto LABEL_3;
      }
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create an Attribute that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  uint64_t result = *(void *)(v3 + 16 * v5 + 8);
  if (!result) {
    goto LABEL_9;
  }
  return result;
}

void *mlir::OperationName::Impl::Impl(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  int v10 = *(mlir::StringAttr **)(a4 + 32);
  __int16 v20 = 261;
  v19[0] = a2;
  v19[1] = a3;
  uint64_t v11 = mlir::StringAttr::get(v10, (mlir::MLIRContext *)v19);
  unsigned int v21 = v23;
  uint64_t v22 = 0x300000000;
  if (*(_DWORD *)(a6 + 8))
  {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)&v21, a6);
    BOOL v12 = v22 == 0;
  }
  else
  {
    BOOL v12 = 1;
  }
  *a1 = &unk_1EC9AA560;
  a1[1] = v11;
  a1[2] = a5;
  a1[3] = a4;
  a1[4] = a1 + 6;
  a1[5] = 0x300000000;
  if (v12)
  {
    a1[12] = 0;
    a1[13] = 0;
  }
  else
  {
    llvm::SmallVectorImpl<std::pair<mlir::TypeID,void *>>::operator=((uint64_t)(a1 + 4), (uint64_t)&v21);
    uint64_t v13 = v22;
    a1[12] = 0;
    a1[13] = 0;
    uint64_t v14 = v21;
    if (!v13) {
      goto LABEL_10;
    }
    uint64_t v15 = 16 * v13;
    long long v16 = (void **)((char *)v21 + 8);
    do
    {
      long long v17 = *v16;
      v16 += 2;
      free(v17);
      v15 -= 16;
    }
    while (v15);
  }
  uint64_t v14 = v21;
LABEL_10:
  if (v14 != v23) {
    free(v14);
  }
  return a1;
}

void *mlir::OperationName::OperationName(void *a1, int8x16_t *a2, const unsigned __int8 *a3, mlir::StringAttr *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  uint64_t v8 = *(void *)a4;
  if (*(unsigned char *)(*(void *)a4 + 41))
  {
    int Key = llvm::StringMapImpl::FindKey((uint64_t *)(v8 + 184), a2, a3);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v8 + 192))
    {
      *a1 = *(void *)(*(void *)(*(void *)(v8 + 184) + 8 * Key) + 8);
      return a1;
    }
    int v10 = (pthread_rwlock_t **)(v8 + 296);
    llvm::sys::RWMutexImpl::lock_shared((pthread_rwlock_t **)(v8 + 296));
    int v11 = llvm::StringMapImpl::FindKey((uint64_t *)(v8 + 160), a2, a3);
    if (v11 != -1 && v11 != (unint64_t)*(unsigned int *)(v8 + 168))
    {
      *a1 = *(void *)(*(void *)(*(void *)(v8 + 160) + 8 * v11) + 8);
      llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(v8 + 296));
      return a1;
    }
    llvm::sys::RWMutexImpl::unlock_shared((pthread_rwlock_t **)(v8 + 296));
    llvm::sys::RWMutexImpl::lock((pthread_rwlock_t **)(v8 + 296));
  }
  else
  {
    int v10 = 0;
  }
  v24[1] = a2;
  void v24[2] = a3;
  uint64_t v25 = 0;
  BOOL v12 = llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(v8 + 160, a2, a3, &v25);
  char v14 = v13;
  uint64_t v15 = v25;
  uint64_t v25 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  if (v14)
  {
    LOWORD(v29) = 261;
    int v26 = a2;
    uint64_t v27 = (uint64_t)a3;
    v24[0] = mlir::StringAttr::get(a4, (mlir::MLIRContext *)&v26);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v24);
    long long v30 = 0u;
    long long v29 = 0u;
    long long v28 = 0u;
    int v26 = &v28;
    uint64_t v27 = 0x300000000;
    long long v17 = operator new(0x70uLL);
    v17[1] = v24[0];
    void v17[2] = &mlir::detail::TypeIDResolver<void,void>::id;
    v17[3] = Values;
    uint64_t v17[4] = v17 + 6;
    v17[5] = 0x300000000;
    v17[12] = 0;
    v17[13] = 0;
    void *v17 = &unk_1EC9AA498;
    uint64_t v18 = *(void *)(*v12 + 8);
    *(void *)(*v12 + 8) = v17;
    if (v18)
    {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      unsigned int v19 = (long long *)v26;
      if (v27)
      {
        uint64_t v20 = 16 * v27;
        unsigned int v21 = (void **)((char *)v26 + 8);
        do
        {
          uint64_t v22 = *v21;
          v21 += 2;
          free(v22);
          v20 -= 16;
        }
        while (v20);
        unsigned int v19 = (long long *)v26;
      }
      if (v19 != &v28) {
        free(v19);
      }
    }
  }
  *a1 = *(void *)(*v12 + 8);
  if (v10) {
    llvm::sys::RWMutexImpl::unlock_shared(v10);
  }
  return a1;
}

uint64_t mlir::OperationName::getDialectNamespace(mlir::OperationName *this)
{
  uint64_t v2 = *(void *)this;
  if (*(_UNKNOWN **)(*(void *)this + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v6[0] = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v6);
    if (Values) {
      return *(void *)(Values + 8);
    }
  }
  else
  {
    uint64_t Values = *(void *)(v2 + 24);
    if (Values) {
      return *(void *)(Values + 8);
    }
  }
  v6[0] = *(void *)(*(void *)this + 8);
  v6[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v6);
  v6[1] = v5;
  char v7 = 46;
  llvm::StringRef::find(v6, &v7, 1uLL, 0);
  return v6[0];
}

uint64_t mlir::OperationName::UnregisteredOpModel::foldHook()
{
  return 0;
}

uint64_t mlir::OperationName::UnregisteredOpModel::hasTrait()
{
  return 0;
}

void mlir::OperationName::UnregisteredOpModel::getParseAssemblyFn(mlir::OperationName::UnregisteredOpModel *this)
{
}

uint64_t mlir::OperationName::UnregisteredOpModel::printAssembly(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 216))(a3, a2, 1);
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyInvariants(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return 1;
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyRegionInvariants(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return 1;
}

unint64_t mlir::OperationName::UnregisteredOpModel::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  uint64_t v4 = *(void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  if (!v4) {
    return v4;
  }
  if (*(_UNKNOWN **)(*(void *)v4 + 136) != &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4;
  if (!v4) {
    return v4;
  }
  uint64_t v5 = mlir::DictionaryAttr::get((uint64_t)&v9, a3, a4);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
  uint64_t v7 = v5;
  if (!v5)
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  return v6 | v7;
}

uint64_t mlir::OperationName::UnregisteredOpModel::getPropertiesAsAttr(mlir::OperationName::UnregisteredOpModel *this, Operation *a2)
{
  return *((void *)a2 + 2 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1) + 8);
}

void mlir::OperationName::UnregisteredOpModel::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[9] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2 + 64;
  uint64_t v8 = *(void *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  if (v8)
  {
    if (*(_UNKNOWN **)(*(void *)v8 + 136) == &mlir::detail::TypeIDResolver<mlir::DictionaryAttr,void>::id) {
      uint64_t v9 = *(void *)(a2 + 64 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  mlir::NamedAttrList::NamedAttrList(v13, v9);
  mlir::NamedAttrList::set((uint64_t)v13, a3, a4);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v13, Context);
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    BOOL v12 = (unint64_t *)(v7 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1));
  }
  else {
    BOOL v12 = 0;
  }
  *BOOL v12 = Dictionary;
  if (v13[0] != v14) {
    free(v13[0]);
  }
}

uint64_t mlir::OperationName::UnregisteredOpModel::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::OperationName::UnregisteredOpModel::getOpPropertyByteSize(mlir::OperationName::UnregisteredOpModel *this)
{
  return 8;
}

void mlir::OperationName::UnregisteredOpModel::initProperties(uint64_t a1, uint64_t a2, void *a3)
{
  *a3 = 0;
}

uint64_t mlir::OperationName::UnregisteredOpModel::setPropertiesFromAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  *a3 = a4;
  return 1;
}

void mlir::OperationName::UnregisteredOpModel::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::OperationName::UnregisteredOpModel::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

unint64_t mlir::OperationName::UnregisteredOpModel::hashProperties(uint64_t a1, _DWORD *a2)
{
  unint64_t v2 = 0x1E8EB8000uLL;
  {
    uint64_t v8 = a2;
    unint64_t v2 = 0x1E8EB8000uLL;
    a2 = v8;
    if (v6)
    {
      unint64_t v7 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v7 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v7;
      unint64_t v2 = 0x1E8EB8000;
      a2 = v8;
    }
  }
  uint64_t v3 = *(void *)(v2 + 3024);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (v3 ^ (8 * ((*a2 >> 4) ^ (*a2 >> 9)) + 8));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
}

void mlir::RegisteredOperationName::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)*a1;
  uint64_t v5 = *(mlir::StringAttr **)(*(void *)(*a1 + 24) + 32);
  uint64_t v6 = *(void *)v5;
  if (a3)
  {
    uint64_t v9 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)(v6 + 64), 8 * a3, 3);
    uint64_t v10 = v9;
    uint64_t v11 = a3;
    if (a3)
    {
      BOOL v12 = (uint64_t *)(a2 + 8);
      char v13 = (uint64_t *)v9;
      do
      {
        __int16 v45 = 261;
        v44[0] = *(v12 - 1);
        uint64_t v14 = *v12;
        v12 += 2;
        v44[1] = v14;
        *v13++ = mlir::StringAttr::get(v5, (mlir::MLIRContext *)v44);
        --v11;
      }
      while (v11);
    }
    v4[12] = v10;
    v4[13] = a3;
  }
  v44[0] = v4[1];
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v44);
  long long v17 = v16;
  uint64_t v43 = 0;
  uint64_t v18 = llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(v6 + 160, AttrData, v16, &v43);
  uint64_t v19 = v43;
  uint64_t v43 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *v18;
  uint64_t v21 = *a1;
  *a1 = 0;
  uint64_t v22 = *(void *)(v20 + 8);
  *(void *)(v20 + 8) = v21;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  v44[0] = (uint64_t)v4;
  uint64_t v23 = *llvm::StringMap<mlir::Type,llvm::MallocAllocator>::try_emplace<mlir::Type&>(v6 + 184, AttrData, v17, v44);
  uint64_t v24 = *(void *)(v6 + 208);
  unint64_t v25 = *(unsigned int *)(v6 + 216);
  if (v25)
  {
    uint64_t v26 = *(void *)(v6 + 208);
    do
    {
      unint64_t v27 = v25 >> 1;
      uint64_t v28 = v26 + 8 * (v25 >> 1);
      uint64_t v29 = *(void *)(*(void *)v28 + 8);
      uint64_t v46 = *(void *)(*(void *)(v23 + 8) + 8);
      v44[0] = v29;
      if (v46 == v29
        || ((long long v30 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v46),
             size_t v32 = v31,
             unsigned int v33 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v44),
             size_t v35 = v34,
             v34 >= v32)
          ? (size_t v36 = v32)
          : (size_t v36 = v34),
            (!v36 || !memcmp(v30, v33, v36)) && v32 == v35))
      {
        uint64_t v26 = v28 + 8;
        unint64_t v27 = v25 + ~v27;
      }
      unint64_t v25 = v27;
    }
    while (v27);
    uint64_t v24 = *(void *)(v6 + 208);
    uint64_t v37 = *(void *)(v23 + 8);
    uint64_t v38 = *(unsigned int *)(v6 + 216);
    if (v24 + 8 * v38 != v26) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v26 = v24 + 8 * v25;
    uint64_t v37 = *(void *)(v23 + 8);
    uint64_t v38 = 0;
    if (v24 != v26)
    {
LABEL_23:
      uint64_t v39 = (v26 - v24) >> 3;
      if (v38 >= *(_DWORD *)(v6 + 220))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 208, (void *)(v6 + 224), v38 + 1, 8);
        uint64_t v24 = *(void *)(v6 + 208);
        uint64_t v38 = *(unsigned int *)(v6 + 216);
      }
      int v40 = (void *)(v24 + 8 * v39);
      *(void *)(v24 + 8 * v38) = *(void *)(v24 + 8 * v38 - 8);
      uint64_t v41 = *(unsigned int *)(v6 + 216);
      uint64_t v42 = *(void *)(v6 + 208) + 8 * v41 - 8;
      if ((void *)v42 != v40)
      {
        memmove(v40 + 1, v40, v42 - (void)v40);
        LODWORD(v41) = *(_DWORD *)(v6 + 216);
      }
      *(_DWORD *)(v6 + 216) = v41 + 1;
      *int v40 = v37;
      return;
    }
  }
  if (v38 >= *(_DWORD *)(v6 + 220))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 208, (void *)(v6 + 224), v38 + 1, 8);
    uint64_t v38 = *(unsigned int *)(v6 + 216);
    uint64_t v24 = *(void *)(v6 + 208);
  }
  *(void *)(v24 + 8 * v38) = v37;
  ++*(_DWORD *)(v6 + 216);
}

uint64_t mlir::AbstractType::lookup(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)a2 + 336);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(*(void *)a2 + 320);
  unsigned int v4 = v2 - 1;
  uint64_t v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v6 = *(void *)(v3 + 16 * v5);
  if (v6 != a1)
  {
    int v8 = 1;
    while (v6 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      uint64_t v6 = *(void *)(v3 + 16 * v5);
      if (v6 == a1) {
        goto LABEL_3;
      }
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  uint64_t result = *(void *)(v3 + 16 * v5 + 8);
  if (!result) {
    goto LABEL_9;
  }
  return result;
}

uint64_t mlir::MLIRContext::getTypeUniquer(mlir::MLIRContext *this)
{
  return *(void *)this + 344;
}

uint64_t mlir::Float8E5M2Type::get(mlir::Float8E5M2Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 352);
}

uint64_t mlir::Float8E4M3FNType::get(mlir::Float8E4M3FNType *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 360);
}

uint64_t mlir::Float8E5M2FNUZType::get(mlir::Float8E5M2FNUZType *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 368);
}

uint64_t mlir::Float8E4M3FNUZType::get(mlir::Float8E4M3FNUZType *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 376);
}

uint64_t mlir::Float8E4M3B11FNUZType::get(mlir::Float8E4M3B11FNUZType *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 384);
}

uint64_t mlir::BFloat16Type::get(mlir::BFloat16Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 392);
}

uint64_t mlir::Float16Type::get(mlir::Float16Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 400);
}

uint64_t mlir::FloatTF32Type::get(mlir::FloatTF32Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 408);
}

uint64_t mlir::Float32Type::get(mlir::Float32Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 416);
}

uint64_t mlir::Float64Type::get(mlir::Float64Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 424);
}

uint64_t mlir::Float80Type::get(mlir::Float80Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 432);
}

uint64_t mlir::Float128Type::get(mlir::Float128Type *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 440);
}

uint64_t mlir::IndexType::get(mlir::IndexType *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 448);
}

uint64_t mlir::IntegerType::get(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = a3;
  unsigned int v7 = a2;
  if (!a3)
  {
    switch(a2)
    {
      case 1u:
        uint64_t v4 = *(void *)(*(void *)a1 + 456);
        if (!v4) {
          break;
        }
        return v4;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
        break;
      case 8u:
        uint64_t v4 = *(void *)(*(void *)a1 + 464);
        if (!v4) {
          break;
        }
        return v4;
      case 0x10u:
        uint64_t v4 = *(void *)(*(void *)a1 + 472);
        if (!v4) {
          break;
        }
        return v4;
      case 0x20u:
        uint64_t v4 = *(void *)(*(void *)a1 + 480);
        if (!v4) {
          break;
        }
        return v4;
      default:
        if (a2 == 64)
        {
          uint64_t v4 = *(void *)(*(void *)a1 + 488);
          if (v4) {
            return v4;
          }
        }
        else if (a2 == 128)
        {
          uint64_t v4 = *(void *)(*(void *)a1 + 496);
          if (v4) {
            return v4;
          }
        }
        break;
    }
  }
  uint64_t v9 = a1;
  uint64_t v3 = (unsigned __int8 **)(*(void *)a1 + 344);
  v8[0] = &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  v8[1] = &v9;
  return mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(v3, (uint64_t)_ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJRjRNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_, (uint64_t)v8, (uint64_t)&mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id, &v7, &v6);
}

uint64_t mlir::NoneType::get(mlir::NoneType *this, mlir::MLIRContext *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t result = *(void *)(*(void *)this + 504);
  if (!result) {
    return mlir::StorageUniquer::getSingletonImpl((uint64_t *)(v2 + 344), (uint64_t)&mlir::detail::TypeIDResolver<mlir::NoneType,void>::id);
  }
  return result;
}

uint64_t mlir::MLIRContext::getAttributeUniquer(mlir::MLIRContext *this)
{
  return *(void *)this + 536;
}

void *mlir::detail::AttributeUniquer::initializeAttributeStorage(void *result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)a2 + 528);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(*(void *)a2 + 512);
  unsigned int v5 = v3 - 1;
  uint64_t v6 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v7 = *(void *)(v4 + 16 * v6);
  if (v7 != a3)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == a3) {
        goto LABEL_3;
      }
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create an Attribute that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  uint64_t v8 = *(void *)(v4 + 16 * v6 + 8);
  if (!v8) {
    goto LABEL_9;
  }
  *uint64_t result = v8;
  return result;
}

uint64_t mlir::BoolAttr::get(mlir::BoolAttr *this, mlir::MLIRContext *a2)
{
  uint64_t v2 = 544;
  if (a2) {
    uint64_t v2 = 552;
  }
  return *(void *)(*(void *)this + v2);
}

uint64_t mlir::UnitAttr::get(mlir::UnitAttr *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 560);
}

uint64_t mlir::UnknownLoc::get(mlir::UnknownLoc *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 568);
}

void *mlir::detail::DistinctAttributeUniquer::allocateStorage(uint64_t a1, uint64_t a2)
{
  return mlir::detail::DistinctAttributeAllocator::allocate((uint64_t *)(*(void *)a1 + 688), a2);
}

void *mlir::detail::DistinctAttributeAllocator::allocate(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::get(a1);
  uint64_t v4 = v3;
  *(void *)(v3 + 80) += 16;
  if (*(void *)v3) {
    BOOL v5 = ((*(void *)v3 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3 + 16 > *(void *)(v3 + 8) - *(void *)v3;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(v3 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(v4 + 24);
    if (v9 >= *(_DWORD *)(v4 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 16, (void *)(v4 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v4 + 24);
    }
    *(void *)(*(void *)(v4 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(v4 + 24);
    *(void *)(v4 + 8) = &buffer[v7];
    uint64_t result = (void *)((unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    uint64_t result = (void *)((*(void *)v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  *(void *)uint64_t v4 = result + 2;
  *uint64_t result = 0;
  result[1] = a2;
  return result;
}

uint64_t mlir::DictionaryAttr::getEmpty(mlir::DictionaryAttr *this, mlir::MLIRContext *a2)
{
  return *(void *)(*(void *)this + 576);
}

void mlir::detail::StringAttrStorage::initialize(mlir::detail::StringAttrStorage *this, mlir::MLIRContext *a2)
{
  LOBYTE(v27[0]) = 46;
  unint64_t v4 = llvm::StringRef::find((uint64_t *)this + 2, (char *)v27, 1uLL, 0);
  if (v4 != -1)
  {
    uint64_t v6 = *((void *)this + 2);
    unint64_t v5 = *((void *)this + 3);
    uint64_t v7 = (void *)(v4 >= v5 ? *((void *)this + 3) : v4);
    uint64_t v8 = v5 >= v4 + 1 ? v4 + 1 : *((void *)this + 3);
    *(void *)&long long v24 = *((void *)this + 2);
    *((void *)&v24 + 1) = v7;
    uint64_t v25 = v6 + v8;
    unint64_t v26 = v5 - v8;
    if (v7 && v5 > v4 + 1)
    {
      v27[0] = (void *)v24;
      v27[1] = v7;
      uint64_t v10 = *(void *)a2;
      uint64_t v11 = (uint64_t *)(*(void *)a2 + 224);
      uint64_t v28 = 0;
      int v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>(v11, (uint64_t)v27, &v28);
      uint64_t v13 = v28;
      if (!v12) {
        uint64_t v13 = *(void *)(v10 + 224) + 24 * *(unsigned int *)(v10 + 240);
      }
      if (v13 == *(void *)(*(void *)a2 + 224) + 24 * *(unsigned int *)(*(void *)a2 + 240))
      {
        *((void *)this + 4) = 0;
      }
      else
      {
        uint64_t v14 = *(void *)(v13 + 16);
        *((void *)this + 4) = v14;
        if (v14) {
          return;
        }
      }
      uint64_t v15 = *(void *)a2;
      long long v16 = (std::recursive_mutex *)(*(void *)a2 + 592);
      std::recursive_mutex::lock(v16);
      long long v17 = (uint64_t *)(v15 + 664);
      v27[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>(v17, (uint64_t)&v24, v27))
      {
        uint64_t v18 = v27[0] + 3;
        uint64_t v19 = *((unsigned int *)v27[0] + 6);
        uint64_t v20 = v27[0] + 2;
        if (v19 >= *((_DWORD *)v27[0] + 7))
        {
          uint64_t v23 = v27[0] + 3;
          uint64_t v21 = v27[0];
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v27[0] + 2), v27[0] + 4, v19 + 1, 8);
          uint64_t v18 = v23;
          LODWORD(v19) = *((_DWORD *)v21 + 6);
        }
      }
      else
      {
        uint64_t v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)v17, (uint64_t)&v24, (uint64_t)&v24, v27[0]);
        LODWORD(v19) = 0;
        *(_OWORD *)uint64_t v22 = v24;
        void v22[2] = v22 + 4;
        uint64_t v20 = v22 + 2;
        v22[3] = 0x600000000;
        uint64_t v18 = v22 + 3;
      }
      *(void *)(*v20 + 8 * v19) = this;
      ++*v18;
      std::recursive_mutex::unlock(v16);
    }
  }
}

uint64_t mlir::MLIRContext::getAffineUniquer(mlir::MLIRContext *this)
{
  return *(void *)this + 312;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _DWORD *a4, int *a5, long long *a6)
{
  uint64_t v8 = a4;
  unint64_t v9 = 0x1E8EB8000uLL;
  long long v24 = a6;
  uint64_t v25 = a1;
  uint64_t v23 = a5;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  unint64_t v9 = 0x1E8EB8000;
  a2 = v20;
  a3 = v21;
  uint64_t v8 = a4;
  a5 = v23;
  int v12 = v11;
  a6 = v24;
  a1 = v25;
  if (!v12) {
    return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(a1, a2, a3, *(void *)(v9 + 3680), v8, a5, a6);
  }
  unint64_t v26 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::AffineMapStorage]";
  unint64_t v27 = 80;
  unint64_t v13 = llvm::StringRef::find((uint64_t *)&v26, "DesiredTypeName = ", 0x12uLL, 0);
  if (v27 >= v13) {
    unint64_t v14 = v13;
  }
  else {
    unint64_t v14 = v27;
  }
  uint64_t v15 = &v26[v14];
  unint64_t v16 = v27 - v14;
  if (v27 - v14 >= 0x12) {
    uint64_t v17 = 18;
  }
  else {
    uint64_t v17 = v27 - v14;
  }
  unint64_t v18 = v16 - v17;
  if (v18 >= v18 - 1) {
    uint64_t v19 = v18 - 1;
  }
  else {
    uint64_t v19 = v18;
  }
  mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v25, v20, v21, mlir::detail::TypeIDResolver<mlir::detail::AffineMapStorage,void>::resolveTypeID(void)::id, a4, v23, v24);
}

uint64_t mlir::AffineMap::get(mlir::AffineMap *this, mlir::MLIRContext *a2)
{
  long long v8 = 0uLL;
  int v7 = 0;
  int v6 = 0;
  unint64_t v5 = this;
  uint64_t v2 = (unsigned __int8 **)(*(void *)this + 312);
  unint64_t v4 = &v5;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v2, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v4, &v7, &v6, &v8);
}

uint64_t mlir::AffineMap::get(int a1, int a2, uint64_t a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a3;
  v14[0] = a3;
  DesiredBytecodeVersion = (void *)mlir::BytecodeWriterConfig::getDesiredBytecodeVersion((mlir::BytecodeWriterConfig *)&v8);
  *(void *)&long long v13 = v14;
  *((void *)&v13 + 1) = 1;
  int v11 = a2;
  int v12 = a1;
  uint64_t v10 = DesiredBytecodeVersion;
  int v6 = (unsigned __int8 **)(*DesiredBytecodeVersion + 312);
  unint64_t v9 = &v10;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v6, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v9, &v12, &v11, &v13);
}

uint64_t mlir::AffineMap::get(int a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)&long long v11 = a3;
  *((void *)&v11 + 1) = a4;
  int v10 = a1;
  int v9 = a2;
  unint64_t v5 = (unsigned __int8 **)(*a5 + 312);
  int v7 = &v8;
  uint64_t v8 = a5;
  return mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(v5, (uint64_t)llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>, (uint64_t)&v7, &v10, &v9, &v11);
}

uint64_t mlir::IntegerSet::get(int a1, int a2, mlir::BytecodeWriterConfig *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v12 = this;
  *((void *)&v12 + 1) = a4;
  *(void *)&long long v11 = a5;
  *((void *)&v11 + 1) = a6;
  int v9 = a2;
  int v10 = a1;
  uint64_t DesiredBytecodeVersion = mlir::BytecodeWriterConfig::getDesiredBytecodeVersion(this);
  return mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>((unsigned __int8 **)(*(void *)DesiredBytecodeVersion + 312), (uint64_t)llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>::callback_fn<mlir::IntegerSet::get(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>)::$_0>, (uint64_t)&v8, &v10, &v9, &v12, &v11);
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _OWORD *a6, _OWORD *a7)
{
  {
    uint64_t v25 = a6;
    unint64_t v26 = a7;
    uint64_t v23 = a4;
    long long v24 = a5;
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    a2 = v21;
    a3 = v22;
    a4 = v23;
    a5 = v24;
    a6 = v25;
    a7 = v26;
    if (v13)
    {
      uint64_t v29 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::detail::IntegerSetStorage]";
      *(void *)&long long v30 = 81;
      unint64_t v14 = llvm::StringRef::find((uint64_t *)&v29, "DesiredTypeName = ", 0x12uLL, 0);
      if ((unint64_t)v30 >= v14) {
        unint64_t v15 = v14;
      }
      else {
        unint64_t v15 = v30;
      }
      unint64_t v16 = &v29[v15];
      uint64_t v17 = v30 - v15;
      if ((unint64_t)v30 - v15 >= 0x12) {
        uint64_t v18 = 18;
      }
      else {
        uint64_t v18 = v30 - v15;
      }
      unint64_t v19 = v17 - v18;
      if (v19 >= v19 - 1) {
        uint64_t v20 = v19 - 1;
      }
      else {
        uint64_t v20 = v19;
      }
      mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v16[v18], v20);
      a2 = v21;
      a3 = v22;
      a4 = v23;
      a5 = v24;
      a6 = v25;
      a7 = v26;
    }
  }
  uint64_t v8 = mlir::detail::TypeIDResolver<mlir::detail::IntegerSetStorage,void>::resolveTypeID(void)::id;
  v32[0] = a2;
  v32[1] = a3;
  int v9 = *a5;
  LODWORD(v29) = *a4;
  HIDWORD(v29) = v9;
  long long v10 = *a7;
  long long v30 = *a6;
  long long v31 = v10;
  Hashuint64_t Value = llvm::DenseMapInfo<std::tuple<unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>>,void>::getHashValueImpl<0u>((uint64_t)&v29);
  v27[0] = &v29;
  v27[1] = v32;
  uint64_t v28 = &v29;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v8, HashValue, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v28, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v27);
}

uint64_t mlir::detail::getDefaultDiagnosticEmitFn@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = this;
  a2[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::InFlightDiagnostic>::CallbacksHolder<mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0,mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0,void>::Callbacks
        + 2;
  return this;
}

void mlir::OperationName::UnregisteredOpModel::~UnregisteredOpModel(mlir::OperationName::UnregisteredOpModel *this)
{
  *(void *)this = &unk_1EC9AA560;
  uint64_t v2 = (void **)*((void *)this + 4);
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)*((void *)this + 4);
  }
  if (v2 != (void **)((char *)this + 48)) {
    free(v2);
  }
}

{
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EC9AA560;
  uint64_t v2 = (void **)*((void *)this + 4);
  uint64_t v3 = *((unsigned int *)this + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)*((void *)this + 4);
  }
  if (v2 != (void **)((char *)this + 48)) {
    free(v2);
  }

  operator delete(this);
}

void std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<mlir::TypeID,std::function<mlir::Dialect * ()(mlir::MLIRContext *)>>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (void *)a2[11];
    if (v4 == a2 + 8)
    {
      (*(void (**)(void *))(a2[8] + 32))(a2 + 8);
      if ((*((char *)a2 + 55) & 0x80000000) == 0)
      {
LABEL_6:
        unint64_t v5 = a2;
LABEL_8:
        operator delete(v5);
        return;
      }
    }
    else
    {
      if (v4) {
        (*(void (**)(void *))(*v4 + 40))(v4);
      }
      if ((*((char *)a2 + 55) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete((void *)a2[4]);
    unint64_t v5 = a2;
    goto LABEL_8;
  }
}

mlir::MLIRContextImpl *mlir::MLIRContextImpl::MLIRContextImpl(mlir::MLIRContextImpl *this, int a2)
{
  *((void *)this + 3) = 0;
  mlir::DiagnosticEngine::DiagnosticEngine((mlir::MLIRContextImpl *)((char *)this + 32));
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 41) = a2;
  *((_WORD *)this + 21) = 1;
  *((_OWORD *)this + 4) = 0u;
  *((void *)this + 10) = (char *)this + 96;
  *((void *)this + 11) = 0x400000000;
  *((void *)this + 16) = (char *)this + 144;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 1;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0x1000000000;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 25) = 0x1000000000;
  *((void *)this + 26) = (char *)this + 224;
  *((void *)this + 29) = 0;
  *((_DWORD *)this + 60) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  mlir::DialectRegistry::DialectRegistry((mlir::MLIRContextImpl *)((char *)this + 248));
  llvm::sys::RWMutexImpl::RWMutexImpl((mlir::MLIRContextImpl *)((char *)this + 296));
  *((void *)this + 38) = 0;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 312));
  *((_DWORD *)this + 84) = 0;
  *((_OWORD *)this + 20) = 0u;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 344));
  *((_DWORD *)this + 132) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 22) = 0u;
  mlir::StorageUniquer::StorageUniquer((mlir::MLIRContextImpl *)((char *)this + 536));
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 34) = 0u;
  MEMORY[0x1852FDB50]((char *)this + 592);
  *((_DWORD *)this + 164) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 170) = 0;
  uint64_t v4 = (char *)operator new(0x78uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_1EC9CFE90;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((void *)v4 + 3) = v4 + 40;
  *((void *)v4 + 4) = 0x100000000;
  MEMORY[0x1852FDB50](v4 + 48);
  *((_DWORD *)v4 + 28) = 0;
  *((void *)this + 86) = v4 + 24;
  *((void *)this + 87) = v4;
  if (a2)
  {
    unint64_t v5 = operator new(0x138uLL);
    uint64_t v6 = llvm::ThreadPool::ThreadPool((uint64_t)v5, 0x100000000);
    int v7 = (llvm::ThreadPool *)*((void *)this + 7);
    *((void *)this + 7) = v6;
    if (v7) {
      llvm::ThreadPool::~ThreadPool(v7);
    }
    *((void *)this + 6) = v6;
  }
  return this;
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFE90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9CFE90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState,std::allocator<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState>>::__on_zero_shared(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 48));
  uint64_t v2 = *(char **)(a1 + 24);
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    unint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6)
      {
        int v7 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v6);
        operator delete(v7);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *(char **)(a1 + 24);
  }
  if (v2 != (char *)(a1 + 40))
  {
    free(v2);
  }
}

BOOL mlir::MLIRContext::getLoadedDialects(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)a1 + 16);
  unint64_t v3 = *(void *)(*(void *)a2 + 16);
  if (v3 >= v2) {
    size_t v4 = *(void *)(*(void *)a1 + 16);
  }
  else {
    size_t v4 = *(void *)(*(void *)a2 + 16);
  }
  if (v4)
  {
    unsigned int v5 = memcmp(*(const void **)(*(void *)a1 + 8), *(const void **)(*(void *)a2 + 8), v4);
    if (v5) {
      return v5 >> 31;
    }
  }
  if (v2 == v3) {
    return 0;
  }
  return v2 < v3;
}

uint64_t mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::get(uint64_t *a1)
{
  {
    long long v30 = (void *)mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache);
    void *v30 = 1;
    v30[1] = -4096;
    v30[4] = -4096;
    v30[7] = -4096;
    v30[10] = -4096;
    _tlv_atexit((void (__cdecl *)(void *))mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::~CacheType, v30);
  }
  uint64_t v3 = mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache(&mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::getStaticCache(void)::cache);
  size_t v4 = (int *)v3;
  uint64_t v5 = *a1;
  uint64_t v35 = *a1;
  uint64_t v6 = v3 + 8;
  if (*(unsigned char *)v3)
  {
    int v7 = 4;
  }
  else
  {
    int v7 = *(_DWORD *)(v3 + 16);
    if (!v7)
    {
      unint64_t v16 = 0;
LABEL_14:
      long long v10 = llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(v3, v16, &v35);
      goto LABEL_8;
    }
    uint64_t v6 = *(void *)(v3 + 8);
  }
  int v8 = v7 - 1;
  unsigned int v9 = v8 & ((v5 >> 4) ^ (v5 >> 9));
  long long v10 = (void *)(v6 + 24 * v9);
  uint64_t v11 = *v10;
  if (v5 != *v10)
  {
    long long v31 = 0;
    int v32 = 1;
    while (v11 != -4096)
    {
      if (v31) {
        BOOL v33 = 0;
      }
      else {
        BOOL v33 = v11 == -8192;
      }
      if (v33) {
        long long v31 = v10;
      }
      unsigned int v34 = v9 + v32++;
      unsigned int v9 = v34 & v8;
      long long v10 = (void *)(v6 + 24 * v9);
      uint64_t v11 = *v10;
      if (v5 == *v10) {
        goto LABEL_8;
      }
    }
    if (v31) {
      unint64_t v16 = v31;
    }
    else {
      unint64_t v16 = v10;
    }
    goto LABEL_14;
  }
LABEL_8:
  long long v12 = (std::__shared_weak_count *)v10[2];
  if (v12)
  {
    int v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t v15 = v10[1];
      if (atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        if (v15) {
          return v15;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v14);
        if (v15) {
          return v15;
        }
      }
    }
  }
  uint64_t v17 = (std::recursive_mutex *)(*a1 + 24);
  std::recursive_mutex::lock(v17);
  uint64_t v18 = *a1;
  unint64_t v19 = operator new(0x60uLL);
  *unint64_t v19 = 0u;
  v19[1] = 0u;
  void v19[2] = 0u;
  *((void *)v19 + 2) = v19 + 2;
  *((_DWORD *)v19 + 7) = 4;
  *((void *)v19 + 10) = 0;
  v19[3] = 0u;
  *((void *)v19 + 8) = v19 + 5;
  *((void *)v19 + 9) = 0;
  *((void *)v19 + 11) = 1;
  uint64_t v35 = (uint64_t)v19;
  Address = llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,false>::reserveForParamAndGetAddress(v18, (unint64_t)&v35, 1);
  uint64_t v21 = *(void *)v18;
  uint64_t v22 = *(unsigned int *)(v18 + 8);
  uint64_t v23 = *(void *)Address;
  *(void *)Address = 0;
  *(void *)(v21 + 8 * v22) = v23;
  *(_DWORD *)(v18 + 8) = v22 + 1;
  uint64_t v24 = v35;
  uint64_t v35 = 0;
  if (v24)
  {
    uint64_t v25 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v24);
    operator delete(v25);
  }
  uint64_t v26 = *a1;
  unint64_t v27 = (std::__shared_weak_count *)a1[1];
  uint64_t v15 = *(void *)(*(void *)v26 + 8 * *(unsigned int *)(v26 + 8) - 8);
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = (std::__shared_weak_count *)v10[2];
  v10[1] = v15;
  void v10[2] = v27;
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::clearExpiredEntries(v4);
  std::recursive_mutex::unlock(v17);
  return v15;
}

void mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::clearExpiredEntries(int *a1)
{
  int v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      uint64_t v3 = a1 + 2;
      size_t v4 = a1 + 26;
      unsigned int v5 = 4;
    }
    else
    {
      uint64_t v3 = (int *)*((void *)a1 + 1);
      unsigned int v5 = a1[4];
      size_t v4 = &v3[6 * v5];
    }
    int v7 = &v3[6 * v5];
    if (!v2) {
      goto LABEL_16;
    }
LABEL_12:
    uint64_t v8 = (uint64_t)(a1 + 26);
    if (v4 != a1 + 26) {
      goto LABEL_20;
    }
    return;
  }
  if (v2)
  {
    size_t v4 = a1 + 2;
    int v7 = a1 + 26;
LABEL_8:
    while ((*(void *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 6;
      if (v4 == v7)
      {
        size_t v4 = v7;
        break;
      }
    }
    if (*a1) {
      goto LABEL_12;
    }
  }
  else
  {
    size_t v4 = (int *)*((void *)a1 + 1);
    unsigned int v6 = a1[4];
    int v7 = &v4[6 * v6];
    if (v6) {
      goto LABEL_8;
    }
  }
LABEL_16:
  uint64_t v8 = *((void *)a1 + 1) + 24 * a1[4];
  if (v4 != (int *)v8)
  {
    do
    {
LABEL_20:
      long long v10 = v7;
      if (v4 + 6 != v7)
      {
        long long v10 = v4 + 6;
        while ((*(void *)v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 6;
          if (v10 == v7)
          {
            long long v10 = v7;
            break;
          }
        }
      }
      uint64_t v11 = (std::__shared_weak_count *)*((void *)v4 + 2);
      if (v11)
      {
        if (v11->__shared_owners_ != -1) {
          goto LABEL_19;
        }
        std::__shared_weak_count::__release_weak(v11);
      }
      *(void *)size_t v4 = -8192;
      int v9 = a1[1] + 1;
      *a1 -= 2;
      a1[1] = v9;
LABEL_19:
      size_t v4 = v10;
    }
    while (v10 != (int *)v8);
  }
}

int *mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::CacheType::~CacheType(int *a1)
{
  int v2 = *a1;
  if (*a1 <= 1)
  {
    if (v2)
    {
      uint64_t v3 = a1 + 2;
      size_t v4 = (uint64_t *)(a1 + 26);
      unsigned int v5 = 4;
    }
    else
    {
      uint64_t v3 = (int *)*((void *)a1 + 1);
      unsigned int v5 = a1[4];
      size_t v4 = (uint64_t *)&v3[6 * v5];
    }
    uint64_t v8 = (uint64_t *)&v3[6 * v5];
    unsigned int v6 = a1 + 2;
    if (!v2) {
      goto LABEL_18;
    }
LABEL_12:
    uint64_t v9 = (uint64_t)(a1 + 26);
    if (v4 != (uint64_t *)(a1 + 26)) {
      goto LABEL_21;
    }
LABEL_13:
    if (v2) {
      goto LABEL_34;
    }
    goto LABEL_14;
  }
  unsigned int v6 = a1 + 2;
  if (v2)
  {
    uint64_t v8 = (uint64_t *)(a1 + 26);
    size_t v4 = (uint64_t *)(a1 + 2);
LABEL_8:
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 3;
      if (v4 == v8)
      {
        size_t v4 = v8;
        break;
      }
    }
    unsigned int v6 = a1 + 2;
    if (v2) {
      goto LABEL_12;
    }
  }
  else
  {
    size_t v4 = (uint64_t *)*((void *)a1 + 1);
    unsigned int v7 = a1[4];
    uint64_t v8 = &v4[3 * v7];
    if (v7) {
      goto LABEL_8;
    }
  }
LABEL_18:
  uint64_t v9 = *((void *)a1 + 1) + 24 * a1[4];
  if (v4 == (uint64_t *)v9) {
    goto LABEL_13;
  }
  do
  {
LABEL_21:
    uint64_t v11 = (std::__shared_weak_count *)v4[2];
    if (!v11) {
      goto LABEL_26;
    }
    long long v12 = std::__shared_weak_count::lock(v11);
    if (!v12) {
      goto LABEL_26;
    }
    int v13 = v12;
    uint64_t v14 = v4[1];
    if (v14) {
      mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState::remove(*v4, v14);
    }
    if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      uint64_t v15 = v4 + 3;
      size_t v4 = v8;
      if (v15 == v8) {
        continue;
      }
    }
    else
    {
LABEL_26:
      uint64_t v15 = v4 + 3;
      size_t v4 = v8;
      if (v15 == v8) {
        continue;
      }
    }
    size_t v4 = v15;
    while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 3;
      if (v4 == v8)
      {
        size_t v4 = v8;
        break;
      }
    }
  }
  while (v4 != (uint64_t *)v9);
  int v2 = *a1;
  if (*a1)
  {
LABEL_34:
    uint64_t v10 = 4;
    goto LABEL_35;
  }
LABEL_14:
  uint64_t v10 = a1[4];
  if (v10)
  {
    unsigned int v6 = (void *)*v6;
LABEL_35:
    unint64_t v16 = (std::__shared_weak_count **)(v6 + 2);
    uint64_t v17 = 24 * v10;
    do
    {
      if (((unint64_t)*(v16 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v16) {
        std::__shared_weak_count::__release_weak(*v16);
      }
      v16 += 3;
      v17 -= 24;
    }
    while (v17);
    int v2 = *a1;
  }
  if ((v2 & 1) == 0) {
    llvm::deallocate_buffer(*((llvm **)a1 + 1), (void *)(24 * a1[4]));
  }
  return a1;
}

void mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState::remove(uint64_t a1, uint64_t a2)
{
  size_t v4 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  unsigned int v5 = *(void **)a1;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  uint64_t v7 = *(void *)a1 + 8 * v6;
  uint64_t v8 = *(void **)a1;
  if (v6)
  {
    uint64_t v9 = 8 * v6;
    uint64_t v8 = *(void **)a1;
    while (*v8 != a2)
    {
      ++v8;
      v9 -= 8;
      if (!v9)
      {
        uint64_t v8 = (void *)(*(void *)a1 + 8 * v6);
        break;
      }
    }
  }
  uint64_t v10 = v8 + 1;
  if (v8 + 1 == (void *)v7)
  {
    unsigned int v11 = v6 - 1;
    *(_DWORD *)(a1 + 8) = v11;
    uint64_t v12 = v11;
    uint64_t v13 = v5[v12];
    v5[v12] = 0;
    if (!v13) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  do
  {
    uint64_t v15 = *(v10 - 1);
    *(v10 - 1) = *v10;
    *uint64_t v10 = 0;
    if (v15)
    {
      unint64_t v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v15);
      operator delete(v16);
    }
    ++v10;
  }
  while (v10 != (void *)v7);
  uint64_t v17 = *(void **)a1;
  unsigned int v18 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v18;
  uint64_t v19 = v18;
  uint64_t v13 = v17[v19];
  v17[v19] = 0;
  if (v13)
  {
LABEL_8:
    uint64_t v14 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v13);
    operator delete(v14);
  }
LABEL_9:

  std::recursive_mutex::unlock(v4);
}

void *llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::InsertIntoBucket<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *>(uint64_t a1, void *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
  }
  else if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
  {
    int v9 = *(_DWORD *)a1 & 1;
    goto LABEL_7;
  }
  llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::grow(a1, v8);
  uint64_t v12 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v13 = 4;
  }
  else
  {
    int v13 = *(_DWORD *)(a1 + 16);
    if (!v13)
    {
      int v9 = 0;
      a2 = 0;
      goto LABEL_7;
    }
    uint64_t v12 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v14 = v13 - 1;
  unsigned int v15 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v13 - 1);
  a2 = (void *)(v12 + 24 * v15);
  uint64_t v16 = *a2;
  if (*a3 != *a2)
  {
    uint64_t v17 = 0;
    int v18 = 1;
    while (v16 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -8192;
      }
      if (v19) {
        uint64_t v17 = a2;
      }
      unsigned int v20 = v15 + v18++;
      unsigned int v15 = v20 & v14;
      a2 = (void *)(v12 + 24 * (v20 & v14));
      uint64_t v16 = *a2;
      if (*a3 == *a2) {
        goto LABEL_7;
      }
    }
    if (v17) {
      a2 = v17;
    }
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a2 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  uint64_t v10 = *a3;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v10;
  return a2;
}

void llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::grow(uint64_t a1, unsigned int a2)
{
  v16[9] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40) {
    unsigned int v6 = v5 + 1;
  }
  else {
    unsigned int v6 = 64;
  }
  if (a2 >= 5) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = a2;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    unsigned int v8 = *(uint64_t **)(a1 + 8);
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    if (v7 > 4)
    {
      *(void *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets((int *)a1, v8, &v8[3 * v9]);
    llvm::deallocate_buffer((llvm *)v8, (void *)(24 * v9));
  }
  uint64_t v10 = &v14;
  if ((*(void *)(a1 + 8) | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 8);
    long long v15 = *(_OWORD *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    uint64_t v10 = v16;
    uint64_t v11 = *(void *)(a1 + 32);
    if ((v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_12:
      uint64_t v12 = *(void *)(a1 + 56);
      if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000) {
        goto LABEL_13;
      }
      goto LABEL_23;
    }
  }
  *uint64_t v10 = v11;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  v10 += 3;
  uint64_t v12 = *(void *)(a1 + 56);
  if ((v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
  {
LABEL_13:
    uint64_t v13 = *(void *)(a1 + 80);
    if ((v13 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_14;
    }
LABEL_24:
    *uint64_t v10 = v13;
    *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 88);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    v10 += 3;
    if (v7 < 5) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_23:
  *uint64_t v10 = v12;
  *(_OWORD *)(v10 + 1) = *(_OWORD *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  v10 += 3;
  uint64_t v13 = *(void *)(a1 + 80);
  if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000) {
    goto LABEL_24;
  }
LABEL_14:
  if (v7 >= 5)
  {
LABEL_15:
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = llvm::allocate_buffer(8 * (v7 + 2 * v7), (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v7;
  }
LABEL_16:
  llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets((int *)a1, &v14, v10);
}

void llvm::DenseMapBase<llvm::SmallDenseMap<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,4u,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>,mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,llvm::DenseMapInfo<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,void>,llvm::detail::DenseMapPair<mlir::ThreadLocalCache<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::PerInstanceState *,std::weak_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>>>::moveFromOldBuckets(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    uint64_t v10 = (char *)(a1 + 26);
    uint64_t v9 = (char *)(a1 + 2);
    unint64_t v11 = 72;
  }
  else
  {
    int v8 = a1[4];
    if (!v8) {
      goto LABEL_11;
    }
    uint64_t v9 = (char *)*((void *)a1 + 1);
    uint64_t v10 = &v9[24 * v8];
    unint64_t v11 = v10 - v9 - 24;
    if (v11 < 0x18)
    {
      uint64_t v13 = (char *)*((void *)a1 + 1);
      do
      {
LABEL_10:
        *(void *)uint64_t v13 = -4096;
        v13 += 24;
      }
      while (v13 != v10);
      goto LABEL_11;
    }
  }
  unint64_t v12 = v11 / 0x18 + 1;
  uint64_t v13 = &v9[24 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(void *)uint64_t v9 = -4096;
    *((void *)v9 + 3) = -4096;
    v9 += 48;
    v14 -= 2;
  }
  while (v14);
  if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_10;
  }
LABEL_11:
  if (a2 != a3)
  {
    do
    {
      uint64_t v15 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)a1)
        {
          int v17 = 4;
          uint64_t v16 = v7;
        }
        else
        {
          uint64_t v16 = (int *)*((void *)a1 + 1);
          int v17 = a1[4];
        }
        int v18 = v17 - 1;
        unsigned int v19 = (v17 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        unsigned int v20 = (uint64_t *)&v16[6 * v19];
        uint64_t v21 = *v20;
        if (v15 != *v20)
        {
          uint64_t v23 = 0;
          int v24 = 1;
          while (v21 != -4096)
          {
            if (v23) {
              BOOL v25 = 0;
            }
            else {
              BOOL v25 = v21 == -8192;
            }
            if (v25) {
              uint64_t v23 = v20;
            }
            unsigned int v26 = v19 + v24++;
            unsigned int v19 = v26 & v18;
            unsigned int v20 = (uint64_t *)&v16[6 * (v26 & v18)];
            uint64_t v21 = *v20;
            if (v15 == *v20) {
              goto LABEL_19;
            }
          }
          if (v23) {
            unsigned int v20 = v23;
          }
        }
LABEL_19:
        *unsigned int v20 = v15;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v4 + 1);
        v4[1] = 0;
        void v4[2] = 0;
        *a1 += 2;
        uint64_t v22 = (std::__shared_weak_count *)v4[2];
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v4 += 3;
    }
    while (v4 != a3);
  }
}

char *llvm::SmallVectorTemplateBase<std::unique_ptr<llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>,false>::reserveForParamAndGetAddress(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = v4 + a3;
  if (v5 <= *(unsigned int *)(a1 + 12)) {
    return (char *)v3;
  }
  unint64_t v8 = *(void *)a1 + 8 * v4;
  if (*(void *)a1 > a2 || v8 <= a2)
  {
    unint64_t v54 = 0;
    uint64_t v10 = (char *)(a1 + 16);
    unint64_t v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
    unint64_t v12 = *(char **)a1;
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (!v13)
    {
LABEL_22:
      int v30 = v54;
      if (v12 != v10) {
        free(v12);
      }
      *(void *)a1 = v11;
      *(_DWORD *)(a1 + 12) = v30;
      return (char *)v3;
    }
    unint64_t v14 = (v13 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v15 = 8 * v13;
    if (v14 >= 0xB)
    {
      if (v12 >= &v11[v15] || (uint64_t v16 = v11, v17 = *(char **)a1, v11 >= &v12[v15]))
      {
        unint64_t v18 = v14 + 1;
        uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v16 = &v11[v19];
        int v17 = &v12[v19];
        unsigned int v20 = (long long *)(v12 + 16);
        uint64_t v21 = v11 + 16;
        uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(v20 - 1);
          long long v24 = *v20;
          *(v20 - 1) = 0uLL;
          *unsigned int v20 = 0uLL;
          *(v21 - 1) = v23;
          *uint64_t v21 = v24;
          v20 += 2;
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_17:
          uint64_t v27 = *(void *)a1 - 8;
          do
          {
            uint64_t v28 = *(void *)(v27 + v15);
            *(void *)(v27 + v15) = 0;
            if (v28)
            {
              uint64_t v29 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v28);
              operator delete(v29);
            }
            v15 -= 8;
          }
          while (v15);
          unint64_t v12 = *(char **)a1;
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v16 = v11;
      int v17 = *(char **)a1;
    }
    BOOL v25 = &v12[8 * v13];
    do
    {
      uint64_t v26 = *(void *)v17;
      *(void *)int v17 = 0;
      v17 += 8;
      *(void *)uint64_t v16 = v26;
      v16 += 8;
    }
    while (v17 != v25);
    goto LABEL_17;
  }
  uint64_t v31 = a2 - *(void *)a1;
  unint64_t v54 = 0;
  int v32 = (char *)(a1 + 16);
  BOOL v33 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), v5, 8, &v54);
  unsigned int v34 = *(char **)a1;
  uint64_t v35 = *(unsigned int *)(a1 + 8);
  if (v35)
  {
    unint64_t v36 = (v35 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v37 = 8 * v35;
    if (v36 >= 0xB)
    {
      if (v34 >= &v33[v37] || (uint64_t v38 = v33, v39 = *(char **)a1, v33 >= &v34[v37]))
      {
        unint64_t v40 = v36 + 1;
        uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v38 = &v33[v41];
        uint64_t v39 = &v34[v41];
        uint64_t v42 = (long long *)(v34 + 16);
        uint64_t v43 = v33 + 16;
        uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v45 = *(v42 - 1);
          long long v46 = *v42;
          *(v42 - 1) = 0uLL;
          *uint64_t v42 = 0uLL;
          *(v43 - 1) = v45;
          *uint64_t v43 = v46;
          v42 += 2;
          v43 += 2;
          v44 -= 4;
        }
        while (v44);
        if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_35:
          uint64_t v49 = *(void *)a1 - 8;
          do
          {
            uint64_t v50 = *(void *)(v49 + v37);
            *(void *)(v49 + v37) = 0;
            if (v50)
            {
              uint64_t v51 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(v50);
              operator delete(v51);
            }
            v37 -= 8;
          }
          while (v37);
          unsigned int v34 = *(char **)a1;
          goto LABEL_40;
        }
      }
    }
    else
    {
      uint64_t v38 = v33;
      uint64_t v39 = *(char **)a1;
    }
    uint64_t v47 = &v34[8 * v35];
    do
    {
      uint64_t v48 = *(void *)v39;
      *(void *)uint64_t v39 = 0;
      v39 += 8;
      *(void *)uint64_t v38 = v48;
      v38 += 8;
    }
    while (v39 != v47);
    goto LABEL_35;
  }
LABEL_40:
  uint64_t v52 = v31 >> 3;
  int v53 = v54;
  if (v34 != v32) {
    free(v34);
  }
  *(void *)a1 = v33;
  *(_DWORD *)(a1 + 12) = v53;
  return &v33[8 * v52];
}

void *llvm::object_creator<anonymous namespace'::MLIRContextOptions>::call()
{
  uint64_t v0 = operator new(0x240uLL);
  bzero(v0, 0x240uLL);
  *(void *)&long long v4 = "Disable multi-threading within MLIR, overrides any further call to MLIRContext::enableMultiThreading()";
  *((void *)&v4 + 1) = 102;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>((uint64_t)v0, (int8x16_t *)"mlir-disable-threading", &v4);
  *(void *)&long long v4 = "When a diagnostic is emitted on an operation, also print the operation as an attached note";
  *((void *)&v4 + 1) = 90;
  char v2 = 1;
  unint64_t v3 = &v2;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>((uint64_t)v0 + 192, (int8x16_t *)"mlir-print-op-on-diagnostic", &v4, &v3);
  *(void *)&long long v4 = "When a diagnostic is emitted, also print the stack trace as an attached note";
  *((void *)&v4 + 1) = 76;
  llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>((uint64_t)v0 + 384, (int8x16_t *)"mlir-print-stacktrace-on-diagnostic", &v4);
  return v0;
}

void llvm::object_deleter<anonymous namespace'::MLIRContextOptions>::call(char *__p)
{
  if (!__p) {
    return;
  }
  *((void *)__p + 48) = &unk_1EC9A3F00;
  char v2 = __p + 544;
  unint64_t v3 = (char *)*((void *)__p + 71);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    *((void *)__p + 48) = &unk_1EC9A42A8;
    long long v4 = (void *)*((void *)__p + 60);
    if (v4 != *((void **)__p + 59)) {
LABEL_6:
    }
      free(v4);
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    *((void *)__p + 48) = &unk_1EC9A42A8;
    long long v4 = (void *)*((void *)__p + 60);
    if (v4 != *((void **)__p + 59)) {
      goto LABEL_6;
    }
  }
  unint64_t v5 = (char *)*((void *)__p + 56);
  if (v5 != __p + 464) {
    free(v5);
  }
  *((void *)__p + 24) = &unk_1EC9A3F00;
  int v6 = (char *)*((void *)__p + 47);
  if (v6 == __p + 352)
  {
    (*(void (**)(char *))(*((void *)__p + 44) + 32))(__p + 352);
    *((void *)__p + 24) = &unk_1EC9A42A8;
    uint64_t v7 = (void *)*((void *)__p + 36);
    if (v7 != *((void **)__p + 35)) {
LABEL_13:
    }
      free(v7);
  }
  else
  {
    if (v6) {
      (*(void (**)(char *))(*(void *)v6 + 40))(v6);
    }
    *((void *)__p + 24) = &unk_1EC9A42A8;
    uint64_t v7 = (void *)*((void *)__p + 36);
    if (v7 != *((void **)__p + 35)) {
      goto LABEL_13;
    }
  }
  unint64_t v8 = (char *)*((void *)__p + 32);
  if (v8 != __p + 272) {
    free(v8);
  }
  *(void *)std::string __p = &unk_1EC9A3F00;
  uint64_t v9 = (char *)*((void *)__p + 23);
  if (v9 == __p + 160)
  {
    (*(void (**)(char *))(*((void *)__p + 20) + 32))(__p + 160);
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v10 = (void *)*((void *)__p + 12);
    if (v10 == *((void **)__p + 11)) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v9) {
      (*(void (**)(char *))(*(void *)v9 + 40))(v9);
    }
    *(void *)std::string __p = &unk_1EC9A42A8;
    uint64_t v10 = (void *)*((void *)__p + 12);
    if (v10 == *((void **)__p + 11)) {
      goto LABEL_21;
    }
  }
  free(v10);
LABEL_21:
  unint64_t v11 = (char *)*((void *)__p + 8);
  if (v11 != __p + 80) {
    free(v11);
  }

  operator delete(__p);
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [23],llvm::cl::desc>(uint64_t a1, int8x16_t *a2, _OWORD *a3)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  int v6 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v7 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v9 = *(unsigned int *)(a1 + 72);
  if (v9 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v6, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v9) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  uint64_t v10 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v10);
  *(_OWORD *)(a1 + 32) = *a3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [28],llvm::cl::desc,llvm::cl::initializer<BOOL>>(uint64_t a1, int8x16_t *a2, _OWORD *a3, unsigned char **a4)
{
  *(void *)a1 = &unk_1EC9A42A8;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) &= 0x8000u;
  unint64_t v8 = (void *)(a1 + 80);
  *(void *)(a1 + 64) = a1 + 80;
  uint64_t v9 = a1 + 64;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(void *)(a1 + 72) = 0x100000000;
  *(void *)(a1 + 88) = a1 + 120;
  *(void *)(a1 + 96) = a1 + 120;
  *(void *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  GeneralCategory = llvm::cl::getGeneralCategory((llvm::cl *)a1);
  uint64_t v11 = *(unsigned int *)(a1 + 72);
  if (v11 >= *(_DWORD *)(a1 + 76))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a1 + 72);
  }
  *(void *)(*(void *)(a1 + 64) + 8 * v11) = GeneralCategory;
  ++*(_DWORD *)(a1 + 72);
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &unk_1EC9A3AE0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1EC9A3F00;
  *(void *)(a1 + 152) = &unk_1EC9A4440;
  *(void *)(a1 + 160) = &unk_1EC9CE680;
  *(void *)(a1 + 184) = a1 + 160;
  unint64_t v12 = (const unsigned __int8 *)strlen(a2->i8);
  llvm::cl::Option::setArgStr(a1, a2, v12);
  *(_OWORD *)(a1 + 32) = *a3;
  uint64_t v13 = *a4;
  *(unsigned char *)(a1 + 128) = **a4;
  *(unsigned char *)(a1 + 145) = 1;
  *(unsigned char *)(a1 + 144) = *v13;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void mlir::MLIRContextImpl::~MLIRContextImpl(mlir::MLIRContextImpl *this)
{
  if (*((_DWORD *)this + 82))
  {
    uint64_t v2 = *((unsigned int *)this + 84);
    if (v2)
    {
      uint64_t v3 = 16 * v2;
      long long v4 = (void *)*((void *)this + 40);
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        v3 -= 16;
        if (!v3) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      long long v4 = (void *)*((void *)this + 40);
    }
    uint64_t v15 = *((void *)this + 40) + 16 * v2;
LABEL_22:
    if (v4 != (void *)v15)
    {
      uint64_t v16 = v4[1];
      unint64_t v17 = *(void *)(v16 + 96);
      if (v17 >= 8)
      {
        if ((v17 & 4) != 0)
        {
          unint64_t v18 = (void *)(v16 + 72);
          if ((v17 & 2) == 0) {
            unint64_t v18 = (void *)*v18;
          }
          (*(void (**)(void *))((v17 & 0xFFFFFFFFFFFFFFF8) + 16))(v18);
        }
        if ((v17 & 2) == 0) {
          llvm::deallocate_buffer(*(llvm **)(v16 + 72), *(void **)(v16 + 80));
        }
      }
      uint64_t v19 = *(void ***)(v16 + 8);
      uint64_t v20 = *(unsigned int *)(v16 + 16);
      if (v20)
      {
        uint64_t v21 = 16 * v20;
        uint64_t v22 = v19 + 1;
        do
        {
          long long v23 = *v22;
          v22 += 2;
          free(v23);
          v21 -= 16;
        }
        while (v21);
        uint64_t v19 = *(void ***)(v16 + 8);
      }
      if (v19 != (void **)(v16 + 24)) {
        free(v19);
      }
      while (1)
      {
        v4 += 2;
        if (v4 == (void *)v15) {
          break;
        }
        if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_22;
        }
      }
    }
  }
LABEL_6:
  if (*((_DWORD *)this + 130))
  {
    uint64_t v5 = *((unsigned int *)this + 132);
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      uint64_t v7 = (void *)*((void *)this + 64);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6) {
          goto LABEL_11;
        }
      }
    }
    else
    {
      uint64_t v7 = (void *)*((void *)this + 64);
    }
    uint64_t v24 = *((void *)this + 64) + 16 * v5;
LABEL_41:
    if (v7 != (void *)v24)
    {
      uint64_t v25 = v7[1];
      unint64_t v26 = *(void *)(v25 + 96);
      if (v26 >= 8)
      {
        if ((v26 & 4) != 0)
        {
          uint64_t v27 = (void *)(v25 + 72);
          if ((v26 & 2) == 0) {
            uint64_t v27 = (void *)*v27;
          }
          (*(void (**)(void *))((v26 & 0xFFFFFFFFFFFFFFF8) + 16))(v27);
        }
        if ((v26 & 2) == 0) {
          llvm::deallocate_buffer(*(llvm **)(v25 + 72), *(void **)(v25 + 80));
        }
      }
      uint64_t v28 = *(void ***)(v25 + 8);
      uint64_t v29 = *(unsigned int *)(v25 + 16);
      if (v29)
      {
        uint64_t v30 = 16 * v29;
        uint64_t v31 = v28 + 1;
        do
        {
          int v32 = *v31;
          v31 += 2;
          free(v32);
          v30 -= 16;
        }
        while (v30);
        uint64_t v28 = *(void ***)(v25 + 8);
      }
      if (v28 != (void **)(v25 + 24)) {
        free(v28);
      }
      while (1)
      {
        v7 += 2;
        if (v7 == (void *)v24) {
          break;
        }
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000) {
          goto LABEL_41;
        }
      }
    }
  }
LABEL_11:
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    uint64_t v9 = *((unsigned int *)this + 170);
    uint64_t v10 = (llvm *)*((void *)this + 83);
    if (v9)
    {
LABEL_14:
      uint64_t v11 = 80 * v9;
      unint64_t v12 = (char *)v10 + 32;
      do
      {
        if (*((void *)v12 - 4) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v13 = (char *)*((void *)v12 - 2);
          if (v12 != v13) {
            free(v13);
          }
        }
        v12 += 80;
        v11 -= 80;
      }
      while (v11);
      uint64_t v10 = (llvm *)*((void *)this + 83);
      uint64_t v14 = 80 * *((unsigned int *)this + 170);
LABEL_60:
      llvm::deallocate_buffer(v10, (void *)v14);
    }
  }
  else
  {
    uint64_t v9 = *((unsigned int *)this + 170);
    uint64_t v10 = (llvm *)*((void *)this + 83);
    if (v9) {
      goto LABEL_14;
    }
  }
  uint64_t v14 = 0;
  goto LABEL_60;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6 = a4;
  v19[0] = a2;
  v19[1] = a3;
  unint64_t v18 = *a5 | ((unint64_t)*a6 << 32);
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v7 = 0x1E8EB8000uLL;
    int v12 = v11;
    uint64_t v6 = a4;
    a1 = v15;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v7 = 0x1E8EB8000;
      uint64_t v6 = a4;
      a1 = v15;
    }
  }
  uint64_t v8 = *(void *)(v7 + 3024) ^ HIDWORD(v18);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * v18 + 8));
  v16[0] = &v18;
  v16[1] = v19;
  unint64_t v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  int v3 = v2 & 0x3FFFFFFF;
  unsigned int v4 = v2 >> 30;
  return v3 == **(_DWORD **)a1 && *(_DWORD *)(*(void *)a1 + 4) == v4;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,int,mlir::IntegerType::SignednessSemantics>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,int,mlir::IntegerType::SignednessSemantics &&)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t v4 = **a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(void *)unint64_t v10 = 0;
  *(_DWORD *)(v10 + 8) = (v4 >> 2) & 0xC0000000 | v4 & 0x3FFFFFFF;
  int v11 = (uint64_t *)a1[1];
  if (*v11) {
    ((void (*)(uint64_t, unint64_t))*v11)(v11[1], v10);
  }
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJiNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESE_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSG_E_EEvlS4_(uint64_t result, void *a2)
{
  uint64_t v2 = ***(void ***)(result + 8);
  int v3 = *(_DWORD *)(v2 + 336);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v2 + 320);
  unsigned int v5 = v3 - 1;
  uint64_t v6 = (v3 - 1) & ((*(void *)result >> 4) ^ (*(void *)result >> 9));
  uint64_t v7 = *(void *)(v4 + 16 * (v5 & ((*(void *)result >> 4) ^ (*(void *)result >> 9))));
  if (v7 != *(void *)result)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == *(void *)result) {
        goto LABEL_3;
      }
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  uint64_t v8 = *(void *)(v4 + 16 * v6 + 8);
  if (!v8) {
    goto LABEL_9;
  }
  *a2 = v8;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>,llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::Dialect>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::Dialect>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 24 * v10 - 24;
    if (v11 >= 0x18)
    {
      unint64_t v16 = v11 / 0x18 + 1;
      int v12 = (_OWORD *)((char *)result + 24 * (v16 & 0x1FFFFFFFFFFFFFFELL));
      uint64_t v17 = v16 & 0x1FFFFFFFFFFFFFFELL;
      unint64_t v18 = result;
      do
      {
        *unint64_t v18 = xmmword_1810FFA60;
        *(_OWORD *)((char *)v18 + 24) = xmmword_1810FFA60;
        v18 += 3;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 24 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            if (*(void *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v29 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>,llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<mlir::AsmResourceParser>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v29);
              uint64_t v22 = v29;
              *uint64_t v29 = *(_OWORD *)v21;
              uint64_t v23 = *(void *)(v21 + 16);
              *(void *)(v21 + 16) = 0;
              *((void *)v22 + 2) = v23;
              ++*(_DWORD *)(a1 + 8);
              uint64_t v24 = *(void *)(v21 + 16);
              *(void *)(v21 + 16) = 0;
              if (v24) {
                (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
              }
            }
            v21 += 24;
            v20 -= 24;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(24 * v3));
      }
    }
    else
    {
      int v12 = result;
    }
    uint64_t v19 = (_OWORD *)((char *)result + 24 * v10);
    do
    {
      *int v12 = xmmword_1810FFA60;
      int v12 = (_OWORD *)((char *)v12 + 24);
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 24 * v13 - 24;
    if (v14 < 0x18)
    {
      uint64_t v15 = result;
LABEL_26:
      uint64_t v28 = (_OWORD *)((char *)result + 24 * v13);
      do
      {
        *uint64_t v15 = xmmword_1810FFA60;
        uint64_t v15 = (_OWORD *)((char *)v15 + 24);
      }
      while (v15 != v28);
      return result;
    }
    unint64_t v25 = v14 / 0x18 + 1;
    uint64_t v15 = (_OWORD *)((char *)result + 24 * (v25 & 0x1FFFFFFFFFFFFFFELL));
    uint64_t v26 = v25 & 0x1FFFFFFFFFFFFFFELL;
    uint64_t v27 = result;
    do
    {
      *uint64_t v27 = xmmword_1810FFA60;
      *(_OWORD *)((char *)v27 + 24) = xmmword_1810FFA60;
      v27 += 3;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x1FFFFFFFFFFFFFFELL)) {
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, void *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    unint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_70;
  }
  uint64_t v6 = *a1;
  Hashuint64_t Value = llvm::DenseMapInfo<llvm::StringRef,void>::getHashValue(*(void **)a2, *(void *)(a2 + 8));
  unsigned int v8 = v4 - 1;
  int v9 = *(void **)a2;
  size_t v10 = *(void *)(a2 + 8);
  if (!v10)
  {
    if (v9 == (void *)-2)
    {
      unint64_t v11 = 0;
      int v19 = 1;
      int v20 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 80 * (HashValue & v8));
      uint64_t v21 = (const void *)*v14;
      if (*v14 == -1) {
        goto LABEL_21;
      }
LABEL_19:
      if (v21 != (const void *)-2 && v14[1])
      {
LABEL_21:
        while (v21 != (const void *)-1)
        {
          if (v11) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v21 == (const void *)-2;
          }
          if (v22) {
            unint64_t v11 = v14;
          }
          int v23 = v19 + v20;
          ++v19;
          int v20 = v23 & v8;
          unint64_t v14 = (void *)(v6 + 80 * (v23 & v8));
          uint64_t v21 = (const void *)*v14;
          if (*v14 != -1) {
            goto LABEL_19;
          }
        }
        goto LABEL_66;
      }
    }
    else
    {
      unint64_t v11 = 0;
      int v31 = 1;
      int v32 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 80 * (HashValue & v8));
      uint64_t v33 = *v14;
      if (*v14 == -2) {
        goto LABEL_47;
      }
LABEL_43:
      if (v33 == -1)
      {
        if (v9 != (void *)-1)
        {
LABEL_47:
          while (v33 != -1)
          {
            if (v11) {
              BOOL v34 = 0;
            }
            else {
              BOOL v34 = v33 == -2;
            }
            if (v34) {
              unint64_t v11 = v14;
            }
            int v35 = v31 + v32;
            ++v31;
            int v32 = v35 & v8;
            unint64_t v14 = (void *)(v6 + 80 * (v35 & v8));
            uint64_t v33 = *v14;
            if (*v14 != -2) {
              goto LABEL_43;
            }
          }
          goto LABEL_66;
        }
      }
      else if (v14[1])
      {
        goto LABEL_47;
      }
    }
    goto LABEL_69;
  }
  if (v9 != (void *)-2)
  {
    if (v9 != (void *)-1)
    {
      __s1 = v9;
      unint64_t v11 = 0;
      int v36 = 1;
      int v37 = HashValue & v8;
      unint64_t v14 = (void *)(v6 + 80 * (HashValue & v8));
      uint64_t v38 = (const void *)*v14;
      if (*v14 <= 0xFFFFFFFFFFFFFFFDLL) {
        goto LABEL_63;
      }
      while (v38 != (const void *)-1)
      {
        if (v11) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v38 == (const void *)-2;
        }
        if (v39) {
          unint64_t v11 = v14;
        }
        int v40 = v36 + v37;
        ++v36;
        int v37 = v40 & v8;
        unint64_t v14 = (void *)(v6 + 80 * (v40 & v8));
        uint64_t v38 = (const void *)*v14;
        if (*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_63:
          if (v10 == v14[1] && !memcmp(__s1, v38, v10)) {
            goto LABEL_69;
          }
        }
      }
      goto LABEL_66;
    }
    unint64_t v11 = 0;
    int v24 = 1;
    int v25 = HashValue & v8;
    unint64_t v14 = (void *)(v6 + 80 * (HashValue & v8));
    uint64_t v26 = (const void *)*v14;
    if (*v14 == -2) {
      goto LABEL_34;
    }
LABEL_31:
    if (v26 != (const void *)-1)
    {
      if (v10 != v14[1] || (int v27 = v24, v28 = memcmp((const void *)0xFFFFFFFFFFFFFFFFLL, v26, v10), v24 = v27, v28))
      {
LABEL_34:
        while (v26 != (const void *)-1)
        {
          if (v11) {
            BOOL v29 = 0;
          }
          else {
            BOOL v29 = v26 == (const void *)-2;
          }
          if (v29) {
            unint64_t v11 = v14;
          }
          int v30 = v24 + v25;
          ++v24;
          int v25 = v30 & v8;
          unint64_t v14 = (void *)(v6 + 80 * (v30 & v8));
          uint64_t v26 = (const void *)*v14;
          if (*v14 != -2) {
            goto LABEL_31;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_69:
    uint64_t result = 1;
    goto LABEL_70;
  }
  unint64_t v11 = 0;
  int v12 = 1;
  int v13 = HashValue & v8;
  unint64_t v14 = (void *)(v6 + 80 * (HashValue & v8));
  uint64_t v15 = (const void *)*v14;
  if (*v14 == -1) {
    goto LABEL_8;
  }
LABEL_5:
  if (v15 == (const void *)-2 || v10 == v14[1] && !memcmp((const void *)0xFFFFFFFFFFFFFFFELL, v15, v10)) {
    goto LABEL_69;
  }
LABEL_8:
  while (v15 != (const void *)-1)
  {
    if (v11) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v15 == (const void *)-2;
    }
    if (v16) {
      unint64_t v11 = v14;
    }
    int v17 = v12 + v13;
    ++v12;
    int v13 = v17 & v8;
    unint64_t v14 = (void *)(v6 + 80 * (v17 & v8));
    uint64_t v15 = (const void *)*v14;
    if (*v14 != -1) {
      goto LABEL_5;
    }
  }
LABEL_66:
  uint64_t result = 0;
  if (v11) {
    unint64_t v14 = v11;
  }
LABEL_70:
  *a3 = v14;
  return result;
}

uint64_t *llvm::StringMap<std::unique_ptr<mlir::OperationName::Impl>,llvm::MallocAllocator>::try_emplace<std::unique_ptr<mlir::OperationName::Impl>>(uint64_t a1, int8x16_t *a2, const unsigned __int8 *a3, uint64_t *a4)
{
  uint64_t v8 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  int v9 = (uint64_t *)(*(void *)a1 + 8 * v8);
  uint64_t v10 = *v9;
  if (*v9 == -8)
  {
    --*(_DWORD *)(a1 + 16);
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    int v12 = buffer + 2;
    if (a3) {
LABEL_4:
    }
      memcpy(v12, a2, (size_t)a3);
  }
  else
  {
    if (v10)
    {
      while (!v10 || v10 == -8)
      {
        uint64_t v18 = v9[1];
        ++v9;
        uint64_t v10 = v18;
      }
      return v9;
    }
    buffer = llvm::allocate_buffer((size_t)(a3 + 17), (std::align_val_t)8uLL);
    int v12 = buffer + 2;
    if (a3) {
      goto LABEL_4;
    }
  }
  a3[(void)v12] = 0;
  uint64_t v13 = *a4;
  *a4 = 0;
  void *buffer = a3;
  buffer[1] = v13;
  *int v9 = (uint64_t)buffer;
  ++*(_DWORD *)(a1 + 12);
  int v9 = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v8));
  if (*v9) {
    BOOL v14 = *v9 == -8;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    do
    {
      uint64_t v16 = v9[1];
      ++v9;
      uint64_t v15 = v16;
      if (v16) {
        BOOL v17 = v15 == -8;
      }
      else {
        BOOL v17 = 1;
      }
    }
    while (v17);
  }
  return v9;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6 = a4;
  v19[0] = a2;
  v19[1] = a3;
  unint64_t v18 = *a5 | ((unint64_t)*a6 << 32);
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v7 = 0x1E8EB8000uLL;
    int v12 = v11;
    uint64_t v6 = a4;
    a1 = v15;
    if (v12)
    {
      unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v13 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v13;
      unint64_t v7 = 0x1E8EB8000;
      uint64_t v6 = a4;
      a1 = v15;
    }
  }
  uint64_t v8 = *(void *)(v7 + 3024) ^ HIDWORD(v18);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (8 * v18 + 8));
  v16[0] = &v18;
  v16[1] = v19;
  BOOL v17 = &v18;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, v6, -348639895* ((((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 32) >> 15) ^ (-348639895* (v8 ^ (v9 >> 47) ^ v9))), (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v17, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v16);
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  int v3 = v2 & 0x3FFFFFFF;
  unsigned int v4 = v2 >> 30;
  return v3 == **(_DWORD **)a1 && *(_DWORD *)(*(void *)a1 + 4) == v4;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerTypeStorage * mlir::StorageUniquer::get<mlir::detail::IntegerTypeStorage,unsigned int &,mlir::IntegerType::SignednessSemantics &>(llvm::function_ref<void ()(mlir::detail::IntegerTypeStorage *)>,mlir::TypeID,unsigned int &,mlir::IntegerType::SignednessSemantics &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(unint64_t **a1, uint64_t a2)
{
  unint64_t v4 = **a1;
  *(void *)(a2 + 80) += 16;
  if (*(void *)a2) {
    BOOL v5 = ((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 16 > *(void *)(a2 + 8) - *(void *)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 24) >> 7;
    if (v6 >= 0x1E) {
      LOBYTE(v6) = 30;
    }
    uint64_t v7 = 4096 << v6;
    buffer = (char *)llvm::allocate_buffer(4096 << v6, (std::align_val_t)8uLL);
    uint64_t v9 = *(unsigned int *)(a2 + 24);
    if (v9 >= *(_DWORD *)(a2 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, (void *)(a2 + 32), v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(a2 + 24);
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v9) = buffer;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = &buffer[v7];
    unint64_t v10 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v10 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v10 + 16;
  *(void *)unint64_t v10 = 0;
  *(_DWORD *)(v10 + 8) = (v4 >> 2) & 0xC0000000 | v4 & 0x3FFFFFFF;
  int v11 = (uint64_t *)a1[1];
  if (*v11) {
    ((void (*)(uint64_t, unint64_t))*v11)(v11[1], v10);
  }
  return v10;
}

uint64_t _ZN4llvm12function_refIFvPN4mlir6detail18IntegerTypeStorageEEE11callback_fnIZNS2_11TypeUniquer13getWithTypeIDINS1_11IntegerTypeEJRjRNSA_19SignednessSemanticsEEEENSt3__19enable_ifIXntsr3std7is_sameINT_8ImplTypeENS1_11TypeStorageEEE5valueESG_E4typeEPNS1_11MLIRContextENS1_6TypeIDEDpOT0_EUlPSI_E_EEvlS4_(uint64_t result, void *a2)
{
  uint64_t v2 = ***(void ***)(result + 8);
  int v3 = *(_DWORD *)(v2 + 336);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(v2 + 320);
  unsigned int v5 = v3 - 1;
  uint64_t v6 = (v3 - 1) & ((*(void *)result >> 4) ^ (*(void *)result >> 9));
  uint64_t v7 = *(void *)(v4 + 16 * (v5 & ((*(void *)result >> 4) ^ (*(void *)result >> 9))));
  if (v7 != *(void *)result)
  {
    int v9 = 1;
    while (v7 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == *(void *)result) {
        goto LABEL_3;
      }
    }
LABEL_9:
    llvm::report_fatal_error((llvm *)"Trying to create a Type that was not registered in this MLIRContext.", (const char *)1);
  }
LABEL_3:
  uint64_t v8 = *(void *)(v4 + 16 * v6 + 8);
  if (!v8) {
    goto LABEL_9;
  }
  *a2 = v8;
  return result;
}

void *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_7:
    llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::grow(a1, v7);
    int v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v9);
    a4 = v9;
    ++*(_DWORD *)(a1 + 8);
    if (*a4 == -1) {
      return a4;
    }
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_7;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
LABEL_4:
  }
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = llvm::allocate_buffer(80 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (!v10) {
      goto LABEL_16;
    }
    unint64_t v11 = 80 * v10 - 80;
    if (v11 >= 0x50)
    {
      unint64_t v16 = v11 / 0x50 + 1;
      int v12 = &result[5 * (v16 & 0x7FFFFFFFFFFFFFELL)];
      uint64_t v17 = v16 & 0x7FFFFFFFFFFFFFELL;
      unint64_t v18 = result;
      do
      {
        *unint64_t v18 = xmmword_1810FFA60;
        v18[5] = xmmword_1810FFA60;
        v18 += 10;
        v17 -= 2;
      }
      while (v17);
      if (v16 == (v16 & 0x7FFFFFFFFFFFFFELL))
      {
LABEL_16:
        if (v3)
        {
          uint64_t v20 = 80 * v3;
          uint64_t v21 = (uint64_t)v4;
          do
          {
            if (*(void *)v21 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v29 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>,llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::SmallVector<mlir::detail::StringAttrStorage *,6u>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v21, &v29);
              BOOL v22 = v29;
              *BOOL v29 = *(_OWORD *)v21;
              *((void *)v22 + 3) = 0x600000000;
              *((void *)v22 + 2) = v22 + 2;
              uint64_t v23 = (uint64_t)(v22 + 1);
              if (*(_DWORD *)(v21 + 24)) {
                llvm::SmallVectorImpl<llvm::SMLoc>::operator=(v23, v21 + 16);
              }
              ++*(_DWORD *)(a1 + 8);
              int v24 = *(void **)(v21 + 16);
              if ((void *)(v21 + 32) != v24) {
                free(v24);
              }
            }
            v21 += 80;
            v20 -= 80;
          }
          while (v20);
        }
        llvm::deallocate_buffer(v4, (void *)(80 * v3));
      }
    }
    else
    {
      int v12 = result;
    }
    int v19 = &result[5 * v10];
    do
    {
      *int v12 = xmmword_1810FFA60;
      v12 += 5;
    }
    while (v12 != v19);
    goto LABEL_16;
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v13 = *(_DWORD *)(a1 + 16);
  if (v13)
  {
    unint64_t v14 = 80 * v13 - 80;
    if (v14 < 0x50)
    {
      uint64_t v15 = result;
LABEL_28:
      int v28 = &result[5 * v13];
      do
      {
        *uint64_t v15 = xmmword_1810FFA60;
        v15 += 5;
      }
      while (v15 != v28);
      return result;
    }
    unint64_t v25 = v14 / 0x50 + 1;
    uint64_t v15 = &result[5 * (v25 & 0x7FFFFFFFFFFFFFELL)];
    uint64_t v26 = v25 & 0x7FFFFFFFFFFFFFELL;
    int v27 = result;
    do
    {
      *int v27 = xmmword_1810FFA60;
      v27[5] = xmmword_1810FFA60;
      v27 += 10;
      v26 -= 2;
    }
    while (v26);
    if (v25 != (v25 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(unsigned __int8 **a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int *a6, long long *a7)
{
  v27[0] = a2;
  v27[1] = a3;
  int v9 = *a6;
  v25[0] = *a5;
  v25[1] = v9;
  long long v26 = *a7;
  uint64_t v10 = (37 * v9);
  unint64_t v11 = llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>((unint64_t *)v26, (unint64_t *)(v26 + 8 * *((void *)&v26 + 1)));
  unint64_t v12 = ((v11 << 32) - 1) ^ (((v11 << 32) - 1) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unint64_t v15 = ((v14 >> 31) ^ v14 | (unint64_t)(v10 << 32))
      + ~((unint64_t)((v14 >> 31) ^ v14) << 32);
  unint64_t v16 = (v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13);
  unint64_t v17 = (9 * (v16 ^ (v16 >> 8))) ^ ((9 * (v16 ^ (v16 >> 8))) >> 15);
  uint64_t v18 = ((v17 + ~(v17 << 27)) >> 31) ^ (v17 + ~(v17 << 27));
  unint64_t v19 = (v18 | ((unint64_t)(37 * v25[0]) << 32)) + ~(v18 << 32);
  unint64_t v20 = 9
      * (((v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13)) ^ (((v19 ^ (v19 >> 22)) + ~((v19 ^ (v19 >> 22)) << 13)) >> 8));
  unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
  v23[0] = v25;
  v23[1] = v27;
  int v24 = v25;
  return mlir::StorageUniquer::getParametricStorageTypeImpl(a1, a4, (v21 >> 31) ^ v21, (uint64_t (*)(uint64_t))llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>, (uint64_t)&v24, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>, (uint64_t)v23);
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  {
    unsigned int v96 = a1;
    a1 = v96;
    if (v97)
    {
      unint64_t v98 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v98 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v98;
      a1 = v96;
    }
  }
  unint64_t v3 = llvm::hashing::detail::get_execution_seed(void)::seed;
  if (a1 == a2)
  {
    unint64_t v7 = 0;
    return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v110, v7, v3);
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = &llvm::hashing::detail::fixed_seed_override;
    while (1)
    {
      unint64_t v6 = a1[v4];
      {
        unint64_t v106 = v3;
        uint64_t v108 = a1;
        unint64_t v11 = v5;
        unint64_t v5 = v11;
        int v13 = v12;
        unint64_t v3 = v106;
        a1 = v108;
        if (v13)
        {
          unint64_t v14 = *v11;
          if (!*v11) {
            unint64_t v14 = 0xFF51AFD7ED558CCDLL;
          }
          llvm::hashing::detail::get_execution_seed(void)::seed = v14;
          unint64_t v5 = v11;
          unint64_t v3 = v106;
          a1 = v108;
        }
      }
      if (v4 > 7) {
        break;
      }
      unint64_t v7 = v4 * 8 + 8;
      unint64_t v8 = 0x9DDFEA08EB382D69
         * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v6) ^ HIDWORD(v6));
      unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v6) ^ (v8 >> 47) ^ v8);
      *(uint64_t *)((char *)&v110 + v4 * 8) = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      uint64_t v10 = &a1[++v4];
      if (v10 == a2) {
        return llvm::hashing::detail::hash_short((llvm::hashing::detail *)&v110, v7, v3);
      }
    }
    unint64_t v16 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v3 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v17 = __ROR8__(v3 ^ 0xB492B66FBE98F273, 49);
    unint64_t v18 = v3 ^ (v3 >> 47);
    unint64_t v19 = v3 ^ (((0x9DDFEA08EB382D69 * (v18 ^ (0xB492B66FBE98F273 * v3))) ^ v3) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v18 ^ (0xB492B66FBE98F273 * v3)));
    uint64_t v20 = v17 + v3;
    unint64_t v21 = v115 + v17 - 0x4B6D499041670D8DLL * __ROR8__(v116 + v3 - 0x4B6D499041670D8DLL * v3, 42);
    unint64_t v22 = v18 - 0x622015F714C7D297 * (v16 ^ (v16 >> 47));
    uint64_t v23 = v110 - 0x6D8ED9027DD26057 * v3;
    uint64_t v24 = v18 + v23;
    uint64_t v25 = v23 + v111 + v112;
    uint64_t v26 = __ROR8__(v25, 44) + v23;
    unint64_t v27 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v19) ^ ((0x9DDFEA08EB382D69 * v19) >> 47));
    unint64_t v28 = (0xB492B66FBE98F273 * __ROR8__(v20 + v111, 37)) ^ v27;
    uint64_t v29 = v26 + __ROR8__(v28 + v24 + v113, 21);
    uint64_t v30 = __ROR8__(v22, 33);
    unint64_t v31 = 0xB492B66FBE98F273 * v30;
    uint64_t v32 = v27 + v114 - 0x4B6D499041670D8DLL * v30;
    uint64_t v33 = v25 + v113;
    uint64_t v34 = __ROR8__(v115 + v116 + v32, 44) + v32 + __ROR8__(v21 + v112 + v117 + v32, 21);
    uint64_t v35 = v115 + v116 + v32 + v117;
    int v36 = &a1[v4];
    if (v36 == a2)
    {
      unint64_t v38 = 64;
      unint64_t v40 = v31;
    }
    else
    {
      int v37 = (char *)&v110 + 1;
      unint64_t v38 = 64;
      unint64_t v39 = v28;
      unint64_t v40 = v31;
      do
      {
        unint64_t v109 = v39;
        uint64_t v46 = 0;
        uint64_t v41 = 0;
        do
        {
          unint64_t v47 = v41;
          uint64_t v48 = v46;
          unint64_t v49 = *v36;
          {
            unint64_t v105 = v38;
            uint64_t v107 = v29;
            unint64_t v103 = v21;
            uint64_t v104 = v34;
            uint64_t v101 = v35;
            uint64_t v102 = v33;
            unint64_t v99 = v40;
            BOOL v100 = v37;
            unint64_t v40 = v99;
            int v37 = v100;
            uint64_t v35 = v101;
            uint64_t v33 = v102;
            unint64_t v21 = v103;
            uint64_t v34 = v104;
            unint64_t v38 = v105;
            uint64_t v29 = v107;
            if (v52)
            {
              unint64_t v53 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v53 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v53;
              unint64_t v40 = v99;
              int v37 = v100;
              uint64_t v35 = v101;
              uint64_t v33 = v102;
              unint64_t v21 = v103;
              uint64_t v34 = v104;
              unint64_t v38 = v105;
              uint64_t v29 = v107;
            }
          }
          if (v47 > 0x38)
          {
            uint64_t v41 = 64;
LABEL_18:
            unint64_t v42 = v109;
            goto LABEL_19;
          }
          uint64_t v41 = v47 + 8;
          unint64_t v50 = 0x9DDFEA08EB382D69
              * ((llvm::hashing::detail::get_execution_seed(void)::seed + 8 * v49) ^ HIDWORD(v49));
          unint64_t v51 = 0x9DDFEA08EB382D69 * (HIDWORD(v49) ^ (v50 >> 47) ^ v50);
          *(uint64_t *)((char *)&v110 + v47) = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
          ++v36;
          uint64_t v46 = v48 + 1;
        }
        while (v36 != a2);
        if ((v41 & 0x7FFFFFFFFFFFFFB8) == 0) {
          goto LABEL_42;
        }
        uint64_t v54 = 56 - v47;
        unint64_t v55 = v47 + 8;
        if (v41 == 56 - v47)
        {
          uint64_t v56 = (char *)&v110 + v41;
          if (55 - 8 * v48 >= (v47 | 7)) {
            unint64_t v57 = v47 | 7;
          }
          else {
            unint64_t v57 = 55 - 8 * v48;
          }
          uint64_t v58 = (char *)&v110;
          uint64_t v59 = v47 + 8;
          if (v57 >= 0xF)
          {
            if (&v110 >= (uint64_t *)((char *)&v110 + v47 + v57 + 9) || (uint64_t v59 = v47 + 8, v56 >= &v37[v57]))
            {
              unint64_t v60 = v57 + 1;
              uint64_t v61 = (v57 + 1) & 0x7FFFFFFFFFFFFFF0;
              int v62 = (uint64_t *)((char *)&v110 + v41);
              uint64_t v63 = v110;
              uint64_t v64 = v111;
              uint64_t v65 = *(uint64_t *)((char *)&v110 + v41 + 8);
              uint64_t v110 = *(uint64_t *)((char *)&v110 + v41);
              uint64_t v111 = v65;
              *int v62 = v63;
              v62[1] = v64;
              if (v61 != 16)
              {
                int v66 = (uint64_t *)((char *)&v113 + v47);
                uint64_t v67 = v112;
                uint64_t v68 = v113;
                uint64_t v69 = *(uint64_t *)((char *)&v113 + v47 + 8);
                uint64_t v112 = *(uint64_t *)((char *)&v113 + v47);
                uint64_t v113 = v69;
                void *v66 = v67;
                v66[1] = v68;
                if (v61 != 32)
                {
                  int v70 = (uint64_t *)((char *)&v115 + v47);
                  uint64_t v71 = v114;
                  uint64_t v72 = v115;
                  uint64_t v73 = *(uint64_t *)((char *)&v115 + v47 + 8);
                  uint64_t v114 = *(uint64_t *)((char *)&v115 + v47);
                  uint64_t v115 = v73;
                  *int v70 = v71;
                  v70[1] = v72;
                  if (v61 != 48)
                  {
                    uint64_t v74 = (uint64_t *)((char *)&v117 + v47);
                    uint64_t v75 = v116;
                    uint64_t v76 = v117;
                    uint64_t v77 = *(uint64_t *)((char *)&v117 + v47 + 8);
                    uint64_t v116 = *(uint64_t *)((char *)&v117 + v47);
                    uint64_t v117 = v77;
                    void *v74 = v75;
                    v74[1] = v76;
                  }
                }
              }
              if (v60 == v61)
              {
LABEL_42:
                int v36 = a2;
                goto LABEL_18;
              }
              uint64_t v59 = v41 + v61;
              uint64_t v58 = (char *)&v110 + v61;
            }
          }
          uint64_t v89 = v58 + 1;
          unint64_t v42 = v109;
          do
          {
            char v90 = *(v89 - 1);
            *(v89 - 1) = *((unsigned char *)&v110 + v59);
            *((unsigned char *)&v110 + v59) = v90;
            if (v89 == v56) {
              break;
            }
            ++v89;
          }
          while (v59++ != 63);
        }
        else
        {
          do
          {
            uint64_t v78 = v55;
            unint64_t v55 = v54;
            uint64_t v54 = v78 % v54;
          }
          while (v54);
          unint64_t v42 = v109;
          if (v55)
          {
            uint64_t v79 = (uint64_t *)((char *)&v110 + v55);
            do
            {
              char v81 = *((unsigned char *)v79 - 1);
              uint64_t v79 = (uint64_t *)((char *)v79 - 1);
              char v80 = v81;
              int v82 = (uint64_t *)((char *)v79 + v41);
              int v83 = v79;
              do
              {
                int v84 = v83;
                int v83 = v82;
                *(unsigned char *)int v84 = *(unsigned char *)v82;
                uint64_t v85 = (char *)((char *)&v118 - (char *)v82);
                BOOL v86 = __OFSUB__(v41, v85);
                uint64_t v88 = v41 - (void)v85;
                char v87 = (v88 < 0) ^ v86;
                int v82 = (uint64_t *)((char *)&v110 + v88);
                if (v87) {
                  int v82 = (uint64_t *)((char *)v83 + v41);
                }
              }
              while (v82 != v79);
              *(unsigned char *)int v83 = v80;
            }
            while (v79 != &v110);
          }
        }
        int v36 = a2;
LABEL_19:
        uint64_t v43 = v21 + v33 + v40 + v111;
        unint64_t v21 = v115 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v21 + v29 + v116, 42);
        uint64_t v44 = v110 - 0x4B6D499041670D8DLL * v29;
        unint64_t v28 = (0xB492B66FBE98F273 * __ROR8__(v43, 37)) ^ v34;
        uint64_t v29 = __ROR8__(v44 + v111 + v112, 44) + v44 + __ROR8__(v28 + v35 + v44 + v113, 21);
        uint64_t v33 = v44 + v111 + v112 + v113;
        unint64_t v40 = 0xB492B66FBE98F273 * __ROR8__(v42 + v35, 33);
        unint64_t v45 = v40 + v34 + v114;
        uint64_t v34 = __ROR8__(v21 + v112 + v45 + v117, 21) + v45 + __ROR8__(v115 + v116 + v45, 44);
        uint64_t v35 = v115 + v116 + v45 + v117;
        v38 += v41;
        unint64_t v39 = v28;
      }
      while (v36 != a2);
    }
    unint64_t v92 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v35)));
    uint64_t v93 = v28 - 0x4B6D499041670D8DLL * (v21 ^ (v21 >> 47)) - 0x622015F714C7D297 * (v92 ^ (v92 >> 47));
    unint64_t v94 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v29 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v29 ^ v34)));
    unint64_t v95 = 0x9DDFEA08EB382D69
        * ((v40 - 0x4B6D499041670D8DLL * (v38 ^ (v38 >> 47)) - 0x622015F714C7D297 * (v94 ^ (v94 >> 47))) ^ ((0x9DDFEA08EB382D69 * ((v40 - 0x4B6D499041670D8DLL * (v38 ^ (v38 >> 47)) - 0x622015F714C7D297 * (v94 ^ (v94 >> 47))) ^ v93)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v40 - 0x4B6D499041670D8DLL * (v38 ^ (v38 >> 47)) - 0x622015F714C7D297 * (v94 ^ (v94 >> 47))) ^ v93)));
    return 0x9DDFEA08EB382D69 * (v95 ^ (v95 >> 47));
  }
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 != *a2) {
    return 0;
  }
  if (v2[1] != a2[1]) {
    return 0;
  }
  uint64_t v3 = *((void *)v2 + 2);
  if (v3 != a2[2]) {
    return 0;
  }
  if (!v3) {
    return 1;
  }
  unint64_t v4 = (uint64_t *)*((void *)v2 + 1);
  unint64_t v5 = (uint64_t *)(a2 + 6);
  uint64_t v6 = 8 * v3 - 8;
  do
  {
    uint64_t v8 = *v5++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    BOOL result = v9 == v7;
    BOOL v11 = v9 != v7 || v6 == 0;
    v6 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::AffineMapStorage * mlir::StorageUniquer::get<mlir::detail::AffineMapStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &>(llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(void *a1, uint64_t *__sz)
{
  uint64_t v3 = (_DWORD *)*a1;
  uint64_t v4 = *(void *)(*a1 + 8);
  uint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(__sz, 8 * v5 + 24, 3);
  uint64_t v7 = v6;
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = 0;
  *(_DWORD *)uint64_t v6 = *v3;
  *(_DWORD *)(v6 + 4) = v3[1];
  *(_DWORD *)(v6 + 8) = v5;
  if (v5)
  {
    uint64_t v8 = (void *)(v6 + 24);
    unint64_t v9 = (v5 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v9 < 5)
    {
      uint64_t v10 = (uint64_t *)v4;
      do
      {
LABEL_8:
        uint64_t v17 = *v10++;
        *v8++ = v17;
      }
      while (v10 != (uint64_t *)(v4 + 8 * v5));
      goto LABEL_9;
    }
    uint64_t v10 = (uint64_t *)v4;
    if ((unint64_t)(v6 - v4 + 24) < 0x20) {
      goto LABEL_8;
    }
    unint64_t v11 = v9 + 1;
    uint64_t v12 = 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = (void *)((char *)v8 + v12);
    uint64_t v10 = (uint64_t *)(v4 + v12);
    int v13 = (long long *)(v4 + 16);
    unint64_t v14 = (_OWORD *)(v6 + 40);
    uint64_t v15 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *unint64_t v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 4;
    }
    while (v15);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t v18 = a1[1];
  if (*(void *)v18) {
    (*(void (**)(void, uint64_t))v18)(*(void *)(v18 + 8), v6);
  }
  return v7;
}

void **llvm::function_ref<void ()(mlir::detail::AffineMapStorage *)>::callback_fn<mlir::AffineMap::getImpl(unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,mlir::MLIRContext *)::$_0>(void **result, uint64_t a2)
{
  *(void *)(a2 + 16) = **result;
  return result;
}

uint64_t llvm::DenseMapInfo<std::tuple<unsigned int,unsigned int,llvm::ArrayRef<mlir::AffineExpr>,llvm::ArrayRef<BOOL>>,void>::getHashValueImpl<0u>(uint64_t a1)
{
  uint64_t v2 = (37 * *(_DWORD *)a1);
  uint64_t v3 = (37 * *(_DWORD *)(a1 + 4));
  unint64_t v4 = llvm::hashing::detail::hash_combine_range_impl<mlir::AffineExpr const*>(*(unint64_t **)(a1 + 8), (unint64_t *)(*(void *)(a1 + 8) + 8 * *(void *)(a1 + 16)));
  unint64_t v5 = llvm::hashing::detail::hash_combine_range_impl<char const>(*(void **)(a1 + 24), *(void *)(a1 + 24) + *(void *)(a1 + 32));
  unint64_t v6 = ((v5 << 32) - 1) ^ (((v5 << 32) - 1) >> 22);
  unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  unint64_t v9 = ((v8 >> 31) ^ v8 | (v4 << 32))
     + ~((unint64_t)((v8 >> 31) ^ v8) << 32);
  unint64_t v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  unint64_t v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  uint64_t v12 = ((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~(v11 << 27));
  unint64_t v13 = (v12 | (v3 << 32)) + ~(v12 << 32);
  unint64_t v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  unint64_t v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  uint64_t v16 = ((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~(v15 << 27));
  unint64_t v17 = (v16 | (v2 << 32)) + ~(v16 << 32);
  unint64_t v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  return (v19 >> 31) ^ v19;
}

BOOL llvm::function_ref<BOOL ()(mlir::StorageUniquer::BaseStorage const*)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::BaseStorage const*)#1}>(void *a1, uint64_t a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  if (*(_DWORD *)*a1 == *(_DWORD *)a2 && v2[1] == *(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *((void *)v2 + 2);
    if (v3 == *(void *)(a2 + 16))
    {
      if (v3)
      {
        unint64_t v4 = (void *)*((void *)v2 + 1);
        unint64_t v5 = *(void **)(a2 + 8);
        uint64_t v6 = 8 * v3;
        while (*v4 == *v5)
        {
          ++v4;
          ++v5;
          v6 -= 8;
          if (!v6) {
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        size_t v7 = *((void *)v2 + 4);
        if (v7 == *(void *)(a2 + 32)) {
          return memcmp(*((const void **)v2 + 3), *(const void **)(a2 + 24), v7) == 0;
        }
      }
    }
  }
  return 0;
}

unint64_t llvm::function_ref<mlir::StorageUniquer::BaseStorage * ()(mlir::StorageUniquer::StorageAllocator &)>::callback_fn<mlir::detail::IntegerSetStorage * mlir::StorageUniquer::get<mlir::detail::IntegerSetStorage,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &>(llvm::function_ref<void ()(mlir::detail::IntegerSetStorage *)>,mlir::TypeID,unsigned int &,unsigned int &,llvm::ArrayRef<mlir::AffineExpr> &,llvm::ArrayRef<BOOL> &)::{lambda(mlir::StorageUniquer::StorageAllocator &)#1}>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = mlir::detail::IntegerSetStorage::construct(a2, *a1);
  uint64_t v4 = a1[1];
  if (*(void *)v4) {
    (*(void (**)(void, unint64_t))v4)(*(void *)(v4 + 8), v3);
  }
  return v3;
}

unint64_t mlir::detail::IntegerSetStorage::construct(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) += 40;
  if (*(void *)a1) {
    BOOL v4 = ((*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1 + 40 > *(void *)(a1 + 8) - *(void *)a1;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    buffer = (char *)llvm::allocate_buffer(4096 << v5, (std::align_val_t)8uLL);
    uint64_t v8 = *(unsigned int *)(a1 + 24);
    if (v8 >= *(_DWORD *)(a1 + 28))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8 + 1, 8);
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v8) = buffer;
    ++*(_DWORD *)(a1 + 24);
    *(void *)(a1 + 8) = &buffer[v6];
    unint64_t v9 = (unint64_t)(buffer + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    unint64_t v9 = (*(void *)a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a1 = v9 + 40;
  *(void *)(v9 + 32) = 0;
  *(_OWORD *)unint64_t v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_DWORD *)unint64_t v9 = *(_DWORD *)a2;
  *(_DWORD *)(v9 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v10 = *(void *)(a2 + 16);
  if (!v10)
  {
    uint64_t v13 = 0;
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v12 = 8 * v10;
  uint64_t v13 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, 8 * v10, 3);
  if ((unint64_t)(8 * v10 - 8) < 0x18)
  {
    unint64_t v14 = (void *)v13;
    unint64_t v15 = (uint64_t *)v11;
    do
    {
LABEL_20:
      uint64_t v22 = *v15++;
      *v14++ = v22;
    }
    while (v15 != (uint64_t *)(v11 + v12));
    goto LABEL_21;
  }
  unint64_t v14 = (void *)v13;
  unint64_t v15 = (uint64_t *)v11;
  if ((unint64_t)(v13 - v11) < 0x20) {
    goto LABEL_20;
  }
  unint64_t v16 = ((unint64_t)(v12 - 8) >> 3) + 1;
  uint64_t v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
  unint64_t v14 = (void *)(v13 + v17);
  unint64_t v15 = (uint64_t *)(v11 + v17);
  unint64_t v18 = (long long *)(v11 + 16);
  unint64_t v19 = (_OWORD *)(v13 + 16);
  uint64_t v20 = v16 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v21 = *v18;
    *(v19 - 1) = *(v18 - 1);
    *unint64_t v19 = v21;
    v18 += 2;
    v19 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_20;
  }
LABEL_21:
  *(void *)(v9 + 8) = v13;
  *(void *)(v9 + 16) = v10;
  unint64_t v23 = *(void *)(a2 + 32);
  if (!v23)
  {
    uint64_t v25 = 0;
    goto LABEL_38;
  }
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v25 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t *)a1, v23, 0);
  if (v23 < 8)
  {
    uint64_t v26 = (unsigned char *)v25;
    unint64_t v27 = (char *)v24;
    goto LABEL_37;
  }
  uint64_t v26 = (unsigned char *)v25;
  unint64_t v27 = (char *)v24;
  if ((unint64_t)(v25 - v24) < 0x20) {
    goto LABEL_37;
  }
  if (v23 < 0x20)
  {
    unint64_t v28 = 0;
    goto LABEL_32;
  }
  unint64_t v28 = v23 & 0xFFFFFFFFFFFFFFE0;
  uint64_t v29 = (long long *)(v24 + 16);
  uint64_t v30 = (_OWORD *)(v25 + 16);
  unint64_t v31 = v23 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v32 = *v29;
    *(v30 - 1) = *(v29 - 1);
    _OWORD *v30 = v32;
    v29 += 2;
    v30 += 2;
    v31 -= 32;
  }
  while (v31);
  if (v23 != v28)
  {
    if ((v23 & 0x18) == 0)
    {
      unint64_t v27 = (char *)(v24 + v28);
      uint64_t v26 = (unsigned char *)(v25 + v28);
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v26 = (unsigned char *)(v25 + (v23 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v27 = (char *)(v24 + (v23 & 0xFFFFFFFFFFFFFFF8));
    uint64_t v33 = (uint64_t *)(v24 + v28);
    uint64_t v34 = (void *)(v25 + v28);
    unint64_t v35 = v28 - (v23 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      uint64_t v36 = *v33++;
      *v34++ = v36;
      v35 += 8;
    }
    while (v35);
    if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_38;
    }
    do
    {
LABEL_37:
      char v37 = *v27++;
      *v26++ = v37;
    }
    while (v27 != (char *)(v24 + v23));
  }
LABEL_38:
  *(void *)(v9 + 24) = v25;
  *(void *)(v9 + 32) = v23;
  return v9;
}

void llvm::detail::UniqueFunctionBase<mlir::InFlightDiagnostic>::CallImpl<mlir::detail::getDefaultDiagnosticEmitFn(mlir::MLIRContext *)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t mlir::convertFromAttribute(void *a1, const char *a2, void *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return convertDenseArrayFromAttr<mlir::detail::DenseArrayAttrImpl<int>,int>(a1, a2, a3, a4, a5, (const void **)"DenseI32ArrayAttr", (const char *)0x11);
}

uint64_t convertDenseArrayFromAttr<mlir::detail::DenseArrayAttrImpl<int>,int>(void *a1, const char *a2, void *a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5, const void **a6, const char *a7)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if (mlir::detail::DenseArrayAttrImpl<int>::classof(a3)) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = 0;
  }
  uint64_t v73 = v14;
  if (!v14)
  {
    a4(&v78, a5);
    if (v78)
    {
      LODWORD(v74) = 3;
      uint64_t v75 = "expected ";
      uint64_t v76 = 9;
      unint64_t v18 = &v74;
      unint64_t v19 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v59 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          int64_t v67 = (char *)&v74 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
          unint64_t v19 = (char *)v80;
          unint64_t v18 = (const void ***)((char *)v80 + v67);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v59, 24);
          unint64_t v18 = &v74;
          unint64_t v19 = (char *)v80;
        }
      }
      uint64_t v20 = &v19[24 * v81];
      long long v21 = *(_OWORD *)v18;
      *((void *)v20 + 2) = v18[2];
      *(_OWORD *)uint64_t v20 = v21;
      ++v81;
      if (v78)
      {
        __int16 v77 = 261;
        uint64_t v74 = a6;
        uint64_t v75 = a7;
        mlir::Diagnostic::operator<<((uint64_t)&v79, &v74);
        if (v78)
        {
          LODWORD(v74) = 3;
          uint64_t v76 = 16;
          uint64_t v22 = &v74;
          unint64_t v23 = (char *)v80;
          if (v81 >= v82)
          {
            unint64_t v64 = v81 + 1;
            if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
            {
              int64_t v71 = (char *)&v74 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
              unint64_t v23 = (char *)v80;
              uint64_t v22 = (const void ***)((char *)v80 + v71);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v64, 24);
              uint64_t v22 = &v74;
              unint64_t v23 = (char *)v80;
            }
          }
          uint64_t v24 = &v23[24 * v81];
          long long v25 = *(_OWORD *)v22;
          *((void *)v24 + 2) = v22[2];
          *(_OWORD *)uint64_t v24 = v25;
          ++v81;
          if (v78) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
          }
        }
      }
    }
    if (!v88) {
      return 0;
    }
    uint64_t v26 = (void **)__p;
    if (__p)
    {
      unint64_t v27 = v87;
      unint64_t v28 = __p;
      if (v87 != __p)
      {
        do
          unint64_t v27 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v27 - 1);
        while (v27 != v26);
        unint64_t v28 = __p;
      }
      char v87 = v26;
      operator delete(v28);
    }
    uint64_t v29 = v84;
    if (!v84) {
      goto LABEL_53;
    }
    uint64_t v30 = v85;
    unint64_t v31 = v84;
    if (v85 == v84) {
      goto LABEL_52;
    }
    do
    {
      uint64_t v33 = (void *)*--v30;
      long long v32 = v33;
      void *v30 = 0;
      if (v33) {
        operator delete[](v32);
      }
    }
    while (v30 != v29);
    goto LABEL_51;
  }
  if ((const char *)mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73) != a2)
  {
    a4(&v78, a5);
    if (v78)
    {
      LODWORD(v74) = 3;
      uint64_t v75 = "size mismatch in attribute conversion: ";
      uint64_t v76 = 39;
      uint64_t v34 = &v74;
      unint64_t v35 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v60 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          int64_t v68 = (char *)&v74 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          unint64_t v35 = (char *)v80;
          uint64_t v34 = (const void ***)((char *)v80 + v68);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v60, 24);
          uint64_t v34 = &v74;
          unint64_t v35 = (char *)v80;
        }
      }
      uint64_t v36 = &v35[24 * v81];
      long long v37 = *(_OWORD *)v34;
      *((void *)v36 + 2) = v34[2];
      *(_OWORD *)uint64_t v36 = v37;
      ++v81;
    }
    uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v73);
    if (v78)
    {
      LODWORD(v74) = 2;
      uint64_t v75 = (const char *)LHS;
      unint64_t v39 = &v74;
      unint64_t v40 = (char *)v80;
      if (v81 >= v82)
      {
        unint64_t v61 = v81 + 1;
        if (v80 <= &v74 && (char *)v80 + 24 * v81 > (char *)&v74)
        {
          int64_t v69 = (char *)&v74 - (unsigned char *)v80;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
          unint64_t v40 = (char *)v80;
          unint64_t v39 = (const void ***)((char *)v80 + v69);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v61, 24);
          unint64_t v39 = &v74;
          unint64_t v40 = (char *)v80;
        }
      }
      uint64_t v41 = &v40[24 * v81];
      long long v42 = *(_OWORD *)v39;
      *((void *)v41 + 2) = v39[2];
      *(_OWORD *)uint64_t v41 = v42;
      uint64_t v43 = ++v81;
      if (v78)
      {
        LODWORD(v74) = 3;
        uint64_t v75 = " vs ";
        uint64_t v76 = 4;
        uint64_t v44 = &v74;
        unint64_t v45 = (char *)v80;
        if (v43 >= v82)
        {
          unint64_t v62 = v43 + 1;
          BOOL v63 = (char *)v80 + 24 * v43 > (char *)&v74;
          if (v80 <= &v74 && v63)
          {
            int64_t v70 = (char *)&v74 - (unsigned char *)v80;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
            unint64_t v45 = (char *)v80;
            uint64_t v44 = (const void ***)((char *)v80 + v70);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v62, 24);
            uint64_t v44 = &v74;
            unint64_t v45 = (char *)v80;
          }
        }
        uint64_t v46 = &v45[24 * v81];
        long long v47 = *(_OWORD *)v44;
        *((void *)v46 + 2) = v44[2];
        *(_OWORD *)uint64_t v46 = v47;
        uint64_t v48 = ++v81;
        if (v78)
        {
          LODWORD(v74) = 5;
          uint64_t v75 = a2;
          unint64_t v49 = &v74;
          unint64_t v50 = (char *)v80;
          if (v48 >= v82)
          {
            unint64_t v65 = v48 + 1;
            BOOL v66 = (char *)v80 + 24 * v48 > (char *)&v74;
            if (v80 <= &v74 && v66)
            {
              int64_t v72 = (char *)&v74 - (unsigned char *)v80;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              unint64_t v50 = (char *)v80;
              unint64_t v49 = (const void ***)((char *)v80 + v72);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, v83, v65, 24);
              unint64_t v49 = &v74;
              unint64_t v50 = (char *)v80;
            }
          }
          unint64_t v51 = &v50[24 * v81];
          long long v52 = *(_OWORD *)v49;
          *((void *)v51 + 2) = v49[2];
          *(_OWORD *)unint64_t v51 = v52;
          ++v81;
          if (v78) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v78);
          }
        }
      }
    }
    if (!v88) {
      return 0;
    }
    unint64_t v53 = (void **)__p;
    if (__p)
    {
      uint64_t v54 = v87;
      unint64_t v55 = __p;
      if (v87 != __p)
      {
        do
          uint64_t v54 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v54 - 1);
        while (v54 != v53);
        unint64_t v55 = __p;
      }
      char v87 = v53;
      operator delete(v55);
    }
    uint64_t v29 = v84;
    if (!v84)
    {
LABEL_53:
      if (v80 != v83) {
        free(v80);
      }
      return 0;
    }
    uint64_t v56 = v85;
    unint64_t v31 = v84;
    if (v85 == v84)
    {
LABEL_52:
      uint64_t v85 = v29;
      operator delete(v31);
      goto LABEL_53;
    }
    do
    {
      uint64_t v58 = (void *)*--v56;
      unint64_t v57 = v58;
      *uint64_t v56 = 0;
      if (v58) {
        operator delete[](v57);
      }
    }
    while (v56 != v29);
LABEL_51:
    unint64_t v31 = v84;
    goto LABEL_52;
  }
  unint64_t v15 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v73);
  if (v16) {
    memmove(a1, v15, 4 * v16);
  }
  return 1;
}

uint64_t mlir::Operation::create(mlir::Operation *this, const mlir::OperationState *a2)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  mlir::ValueRange::ValueRange(v17, *((void *)this + 8), *((unsigned int *)this + 18));
  mlir::ValueRange::ValueRange(v16, *((void *)this + 2), *((unsigned int *)this + 6));
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext(this);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::Operation *)((char *)this + 112), Context);
  mlir::NamedAttrList::NamedAttrList(v14, Dictionary);
  uint64_t v7 = *((void *)this + 32);
  mlir::BlockRange::BlockRange(v13, *((void *)this + 25), *((unsigned int *)this + 52));
  mlir::ValueRange::ValueRange(v12, *((void *)this + 28), *((unsigned int *)this + 58));
  uint64_t v9 = mlir::Operation::create(v3, v4, v17[0], (mlir::OpResult *)v17[1], v16[0], v16[1], (mlir::NamedAttrList *)v14, v7, v13[0], v13[1], v12[0], v12[1]);
  if (v14[0] != &v15) {
    free(v14[0]);
  }
  uint64_t v10 = *((void *)this + 31);
  if (v10) {
    mlir::Operation::setPropertiesFromAttribute(v9, v10, 0, v8);
  }
  return v9;
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *a4, int a5, uint64_t a6, mlir::NamedAttrList *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  v31[0] = a11;
  v31[1] = a12;
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  (*(void (**)(uint64_t, uint64_t *, mlir::NamedAttrList *))(*(void *)a2 + 48))(a2, &v29, a7);
  uint64_t v18 = v29;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v30);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary(a7, Context);
  uint64_t v21 = mlir::Operation::create(a1, v18, a3, a4, a5, a6, Dictionary, a8, a9, a10, a12);
  if (a12)
  {
    uint64_t v22 = 0;
    do
    {
      if (mlir::RegionRange::dereference_iterator(v31, v22))
      {
        unint64_t v26 = *(unsigned int *)(v21 + 44);
        if ((v26 & 0x7FFFFF) != 0) {
          unint64_t v23 = ((v21 + 64 + 16 * ((v26 >> 23) & 1) + ((v26 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        }
              + 32 * *(unsigned int *)(v21 + 40);
        else {
          unint64_t v23 = 0;
        }
        uint64_t v24 = (mlir::Region *)(v23 + 24 * v22);
        long long v25 = (mlir::Region *)mlir::RegionRange::dereference_iterator(v31, v22);
        mlir::Region::takeBody(v24, v25);
      }
      ++v22;
    }
    while (v22 != a12);
  }
  return v21;
}

uint64_t mlir::Operation::setPropertiesFromAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = *(void ***)(a1 + 48);
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  uint64_t v7 = (void *)(a1 + 16 * ((v6 >> 23) & 1) + 64);
  if (v5[2] == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    if (!BYTE3(v6)) {
      uint64_t v7 = 0;
    }
    void *v7 = a2;
    return 1;
  }
  else
  {
    if (BYTE3(v6)) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0;
    }
    return (*((uint64_t (**)(void **, void **, void *, uint64_t, uint64_t, uint64_t))*v5 + 18))(v5, v5, v9, a2, a3, a4);
  }
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *a4, int a5, uint64_t a6, mlir::NamedAttrList *a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v22 = a2;
  uint64_t v23 = a1;
  (*(void (**)(uint64_t, uint64_t *, mlir::NamedAttrList *))(*(void *)a2 + 48))(a2, &v22, a7);
  uint64_t v17 = v22;
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v23);
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary(a7, Context);
  return mlir::Operation::create(a1, v17, a3, a4, a5, a6, Dictionary, a8, a9, a10, a11);
}

void mlir::Region::takeBody(mlir::Region *this, mlir::Region *a2)
{
  mlir::Region::dropAllReferences((uint64_t)this);
  uint64_t v4 = (mlir::Region *)*((void *)this + 1);
  if (v4 != this)
  {
    do
    {
      unsigned int v5 = (mlir::Region *)*((void *)v4 + 1);
      if (v4) {
        unint64_t v6 = (mlir::Region *)((char *)v4 - 8);
      }
      else {
        unint64_t v6 = 0;
      }
      llvm::ilist_traits<mlir::Block>::removeNodeFromList((uint64_t)this, (uint64_t)v6);
      uint64_t v7 = *((void *)v6 + 1);
      uint64_t v8 = (void *)*((void *)v6 + 2);
      void *v8 = v7;
      *(void *)(v7 + 8) = v8;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      mlir::Block::~Block(v6);
      operator delete(v9);
      uint64_t v4 = v5;
    }
    while (v5 != this);
  }
  if (*(mlir::Region **)a2 != a2 && this != a2)
  {
    uint64_t v10 = (mlir::Region *)*((void *)a2 + 1);
    llvm::ilist_traits<mlir::Block>::transferNodesFromList((uint64_t)this, (uint64_t)a2, (uint64_t)v10, (uint64_t)a2);
    if (v10 != a2)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *(void *)v10;
      *(void *)(v12 + 8) = a2;
      *(void *)a2 = v12;
      uint64_t v13 = *(void *)this;
      *(void *)(v11 + 8) = this;
      *(void *)uint64_t v10 = v13;
      *(void *)(v13 + 8) = v10;
      *(void *)this = v11;
    }
  }
}

uint64_t mlir::Operation::create(uint64_t a1, uint64_t a2, uint64_t a3, mlir::OpResult *this, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned int a11)
{
  uint64_t v14 = a2;
  uint64_t v15 = a11;
  uint64_t v62 = a2;
  unsigned int NumTrailing = mlir::OpResult::getNumTrailing(this);
  unsigned int NumInline = mlir::OpResult::getNumInline((uint64_t)this);
  int v18 = ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 112))(v14) + 7) & 0xFFFFFFF8;
  if (a6)
  {
    uint64_t v19 = v18;
    uint64_t v20 = a10;
    uint64_t v21 = a6;
  }
  else
  {
    char v22 = mlir::OperationName::hasTrait<mlir::OpTrait::ZeroOperands>(&v62);
    uint64_t v21 = 0;
    uint64_t v14 = v62;
    uint64_t v19 = v18;
    uint64_t v20 = a10;
    if (v22)
    {
      int v23 = 0;
      uint64_t v24 = 0;
      goto LABEL_6;
    }
  }
  int v23 = 1;
  uint64_t v24 = 16;
LABEL_6:
  uint64_t v25 = 32 * (v20 + v21);
  uint64_t v26 = NumTrailing;
  unsigned int v56 = NumTrailing;
  uint64_t v27 = 24 * NumTrailing;
  uint64_t v28 = NumInline;
  unsigned int v55 = NumInline;
  uint64_t v60 = 16 * NumInline;
  uint64_t v61 = v27;
  uint64_t v29 = v60 + v27;
  uint64_t v30 = (char *)malloc(v25 + 24 * a11 + v24 + v60 + v27 + v19 + 64);
  uint64_t v31 = (uint64_t)&v30[v29];
  *(void *)uint64_t v31 = 0;
  *(void *)(v31 + 8) = 0;
  *(void *)(v31 + 16) = 0;
  *(void *)(v31 + 24) = a1;
  *(_DWORD *)(v31 + 32) = 0;
  *(_DWORD *)(v31 + 36) = this;
  char v58 = v23;
  if (v23) {
    unsigned int v32 = 0x800000;
  }
  else {
    unsigned int v32 = 0;
  }
  unsigned int v33 = v18 | 7;
  if (v18 < 0) {
    unsigned int v33 = (v18 | 7) + 7;
  }
  unsigned int v34 = v32 | a11 & 0x7FFFFF | ((v33 >> 3) << 24);
  *(_DWORD *)(v31 + 40) = a10;
  *(_DWORD *)(v31 + 44) = v34;
  *(void *)(v31 + 48) = v14;
  *(void *)(v31 + 56) = 0;
  if (v18)
  {
    uint64_t v35 = v31 + 16 * (v32 >> 23) + 64;
    if (HIBYTE(v34)) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 120))(v14, v14, v36, a8);
  }
  if (v55)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    unint64_t v39 = (unint64_t *)&v30[v61 - 8 + v60];
    do
    {
      uint64_t v40 = v38 + 1;
      unint64_t v41 = mlir::TypeRange::dereference_iterator(a3, v38);
      *(v39 - 1) = 0;
      *unint64_t v39 = v41 & 0xFFFFFFFFFFFFFFF8 | (v37 >> 32);
      v37 += 0x100000000;
      v39 -= 2;
      uint64_t v38 = v40;
    }
    while (v28 != v40);
  }
  if (v56)
  {
    uint64_t v42 = 0;
    uint64_t v43 = &v30[v61 - 120 + v60];
    do
    {
      unint64_t v44 = mlir::TypeRange::dereference_iterator(a3, v28 + v42);
      *(void *)uint64_t v43 = 0;
      *((void *)v43 + 1) = v44 & 0xFFFFFFFFFFFFFFF8 | 6;
      *((void *)v43 + 2) = v42;
      v43 -= 24;
      ++v42;
    }
    while (v26 != v42);
  }
  if (a11)
  {
    unint64_t v45 = 0;
    do
    {
      while (1)
      {
        unint64_t v46 = *(unsigned int *)(v31 + 44);
        if ((v46 & 0x7FFFFF) == 0) {
          break;
        }
        mlir::Region::Region((void *)((char *)&v45[4 * *(unsigned int *)(v31 + 40)]+ ((v31 + 64 + 16 * ((v46 >> 23) & 1) + ((v46 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)), (mlir::Operation *)v31);
        v45 += 3;
        if (!--v15) {
          goto LABEL_27;
        }
      }
      mlir::Region::Region(v45, (mlir::Operation *)v31);
      v45 += 3;
      --v15;
    }
    while (v15);
  }
LABEL_27:
  unsigned int v47 = *(_DWORD *)(v31 + 44);
  if (v58)
  {
    mlir::detail::OperandStorage::OperandStorage();
    unsigned int v47 = *(_DWORD *)(v31 + 44);
  }
  if (a10)
  {
    uint64_t v48 = 0;
    unint64_t v49 = (void *)((v31 + 16 * ((v47 >> 23) & 1) + ((v47 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8);
    do
    {
      unint64_t v50 = (mlir::GenericProgramPoint *)mlir::BlockRange::dereference_iterator(a9, v48);
      *unint64_t v49 = 0;
      v49[1] = 0;
      v49[2] = v31;
      v49[3] = v50;
      mlir::GenericProgramPoint::~GenericProgramPoint(v50);
      uint64_t v52 = *v51;
      *unint64_t v49 = *v51;
      v49[1] = v51;
      if (v52) {
        *(void *)(v52 + 8) = v49;
      }
      uint64_t *v51 = (uint64_t)v49;
      ++v48;
      v49 += 4;
    }
    while (a10 != v48);
  }
  mlir::Operation::setAttrs(v31, a7);
  return v31;
}

uint64_t mlir::OperationName::hasTrait<mlir::OpTrait::ZeroOperands>(void *a1)
{
  unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v12 = a1;
    unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v4 = v3;
    a1 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v14 = 84;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v12;
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v1[10]);
}

void mlir::Operation::setAttrs(uint64_t a1, uint64_t a2)
{
  v21[6] = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  if (*(unsigned char *)(a1 + 47))
  {
    uint64_t v19 = v21;
    uint64_t v20 = 0x300000000;
    unint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18);
    if (LHS > HIDWORD(v20)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, LHS, 16);
    }
    uint64_t Value = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18);
    uint64_t v5 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v18);
    if (Value != (long long *)v5)
    {
      unint64_t v6 = (long long *)v5;
      do
      {
        while (1)
        {
          long long v17 = *Value;
          uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
          uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 80))(*(void *)(a1 + 48), a1, AttrData, v9);
          if (!v10) {
            break;
          }
          uint64_t v7 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
          (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a1, v7, *((void *)&v17 + 1));
          if (++Value == v6) {
            goto LABEL_11;
          }
        }
        long long v11 = v17;
        uint64_t v12 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          long long v15 = v17;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, v21, v20 + 1, 16);
          long long v11 = v15;
          uint64_t v12 = v20;
        }
        *((_OWORD *)v19 + v12) = v11;
        LODWORD(v20) = v20 + 1;
        ++Value;
      }
      while (Value != v6);
    }
LABEL_11:
    uint64_t v13 = v20;
    if (mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v18) != v13)
    {
      uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
      uint64_t v18 = mlir::DictionaryAttr::get(Context, (uint64_t *)v19, v20);
    }
    if (v19 != v21) {
      free(v19);
    }
    a2 = v18;
  }
  *(void *)(a1 + 56) = a2;
}

void mlir::Operation::~Operation(mlir::Operation *this)
{
  unsigned int v2 = *((_DWORD *)this + 11);
  if ((v2 & 0x800000) != 0)
  {
    mlir::detail::OperandStorage::~OperandStorage((mlir::Operation *)((char *)this + 64));
    unsigned int v2 = *((_DWORD *)this + 11);
  }
  int v3 = (char *)this + 64;
  uint64_t v4 = *((unsigned int *)this + 10);
  if (v4)
  {
    unint64_t v5 = (unint64_t)&v3[16 * ((v2 >> 23) & 1) + 7 + ((v2 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v6 = 32 * v4;
    uint64_t v7 = (void **)(v5 + 8);
    do
    {
      if (*v7)
      {
        *const char *v7 = *(v7 - 1);
        uint64_t v8 = (uint64_t)*(v7 - 1);
        if (v8) {
          *(void *)(v8 + 8) = *v7;
        }
      }
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    unsigned int v2 = *((_DWORD *)this + 11);
  }
  if ((v2 & 0x7FFFFF) != 0)
  {
    uint64_t v9 = (mlir::Region *)(((unint64_t)&v3[16 * ((v2 >> 23) & 1) + 7 + ((v2 >> 21) & 0x7F8)] & 0xFFFFFFFFFFFFFFF8)
                        + 32 * v4);
    uint64_t v10 = 24 * (v2 & 0x7FFFFF);
    do
    {
      mlir::Region::~Region(v9);
      uint64_t v9 = (mlir::Region *)(v11 + 24);
      v10 -= 24;
    }
    while (v10);
    unsigned int v2 = *((_DWORD *)this + 11);
  }
  if (HIBYTE(v2)) {
    (*(void (**)(void, char *))(**((void **)this + 6) + 128))(*((void *)this + 6), &v3[16 * ((v2 >> 23) & 1)]);
  }
}

void mlir::Operation::destroy(mlir::Operation *this)
{
  uint64_t v2 = *((unsigned int *)this + 9);
  unsigned int NumTrailing = mlir::OpResult::getNumTrailing((mlir::OpResult *)v2);
  uint64_t v4 = (char *)this - 24 * NumTrailing - 16 * mlir::OpResult::getNumInline(v2);
  mlir::Operation::~Operation(this);

  free(v4);
}

mlir::Block *mlir::Operation::isProperAncestor(mlir::Operation *this, Operation *ParentOp)
{
  do
  {
    BOOL result = (mlir::Block *)*((void *)ParentOp + 2);
    if (!result) {
      break;
    }
    ParentOp = (Operation *)mlir::Block::getParentOp(result);
    BOOL result = (mlir::Block *)(ParentOp != 0);
  }
  while (ParentOp != this && ParentOp != 0);
  return result;
}

uint64_t mlir::Operation::replaceUsesOfWith(uint64_t this, Value a2, Value a3)
{
  if (a2.impl != a3.impl && (*(unsigned char *)(this + 46) & 0x80) != 0)
  {
    uint64_t v3 = *(unsigned int *)(this + 68);
    if (v3)
    {
      uint64_t v4 = *(Value **)(this + 72);
      uint64_t v5 = 32 * v3;
      do
      {
        if (v4[3].impl == a2.impl)
        {
          impl = v4[1].impl;
          if (impl)
          {
            void *impl = v4->impl;
            if (v4->impl) {
              *((Value *)v4->impl + 1) = v4[1];
            }
          }
          v4[3].impl = a3.impl;
          uint64_t v7 = *(void *)a3.impl;
          v4->impl = *(ValueImpl **)a3.impl;
          v4[1].impl = a3.impl;
          if (v7) {
            *(void *)(v7 + 8) = v4;
          }
          *(void *)a3.impl = v4;
        }
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
    }
  }
  return this;
}

uint64_t *mlir::Operation::setOperands(uint64_t *result, uint64_t a2, unsigned int a3)
{
  if ((*((unsigned char *)result + 46) & 0x80) != 0) {
    return mlir::detail::OperandStorage::setOperands((mlir::detail::OperandStorage *)(result + 8), (mlir::Operation *)result, a2, a3);
  }
  return result;
}

mlir::Operation *mlir::Operation::setOperands(mlir::Operation *result, int a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  if ((*((unsigned char *)result + 46) & 0x80) != 0) {
    return (mlir::Operation *)mlir::detail::OperandStorage::setOperands((uint64_t)result + 64, result, a2, a3, a4, a5);
  }
  return result;
}

mlir::Operation *mlir::Operation::insertOperands(mlir::Operation *result, int a2, uint64_t a3, unsigned int a4)
{
  if ((*((unsigned char *)result + 46) & 0x80) != 0) {
    return (mlir::Operation *)mlir::detail::OperandStorage::setOperands((uint64_t)result + 64, result, a2, 0, a3, a4);
  }
  return result;
}

mlir::Diagnostic *mlir::Operation::emitError@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (mlir::Attribute *)(a1 + 3);
  mlir::emitError(a1[3], a2, a3);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext(v5);
  BOOL result = (mlir::Diagnostic *)mlir::MLIRContext::shouldPrintOpOnDiagnostic(Context);
  if (result)
  {
    uint64_t v8 = mlir::Diagnostic::attachNote((uint64_t *)(a3 + 8), *(void *)v5, 1);
    uint64_t v9 = v8 + 16;
    unint64_t v10 = *(void *)(v8 + 16);
    int v19 = 3;
    uint64_t v20 = "see current operation: ";
    uint64_t v21 = 23;
    uint64_t v11 = *(unsigned int *)(v8 + 24);
    uint64_t v12 = &v19;
    if (v11 >= *(_DWORD *)(v8 + 28))
    {
      unint64_t v16 = v11 + 1;
      BOOL v17 = v10 + 24 * v11 > (unint64_t)&v19;
      if (v10 <= (unint64_t)&v19 && v17)
      {
        uint64_t v18 = (char *)&v19 - v10;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v8 + 32), v16, 24);
        unint64_t v10 = *(void *)(v8 + 16);
        uint64_t v12 = (int *)&v18[v10];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, (void *)(v8 + 32), v16, 24);
        unint64_t v10 = *(void *)(v8 + 16);
        uint64_t v12 = &v19;
      }
    }
    uint64_t v13 = v10 + 24 * *(unsigned int *)(v8 + 24);
    long long v14 = *(_OWORD *)v12;
    *(void *)(v13 + 16) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    ++*(_DWORD *)(v8 + 24);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)&v19);
    long long v15 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::printGenericOpForm((uint64_t)&v19, 1);
    return mlir::Diagnostic::appendOp((mlir::Diagnostic *)v8, (mlir::Operation *)a1, v15);
  }
  return result;
}

unint64_t mlir::Operation::getAttrDictionary(mlir::Operation *this)
{
  v6[9] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 47)) {
    return *((void *)this + 7);
  }
  mlir::NamedAttrList::NamedAttrList(v5, *((void *)this + 7));
  (*(void (**)(void, mlir::Operation *, void **))(**((void **)this + 6) + 96))(*((void *)this + 6), this, v5);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Operation *)((char *)this + 24));
  unint64_t Dictionary = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v5, Context);
  if (v5[0] != v6) {
    free(v5[0]);
  }
  return Dictionary;
}

uint64_t mlir::Operation::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 80))(*(void *)(a1 + 48), a1, a2, a3);
}

uint64_t mlir::Operation::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a1, a2, a3);
}

void mlir::Operation::setAttrs(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  void v20[6] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 47))
  {
    uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
    *(void *)(a1 + 56) = mlir::DictionaryAttr::get(Context, a2, a3);
    return;
  }
  uint64_t v18 = v20;
  uint64_t v19 = 0x300000000;
  if (a3 >= 4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, a3, 16);
    goto LABEL_6;
  }
  if (a3)
  {
LABEL_6:
    uint64_t v7 = 16 * a3;
    do
    {
      while (1)
      {
        long long v17 = *(_OWORD *)a2;
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 80))(*(void *)(a1 + 48), a1, AttrData, v10);
        if (!v11) {
          break;
        }
        uint64_t v8 = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)&v17);
        (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 48) + 88))(*(void *)(a1 + 48), a1, v8, *((void *)&v17 + 1));
        a2 += 2;
        v7 -= 16;
        if (!v7) {
          goto LABEL_12;
        }
      }
      long long v12 = v17;
      uint64_t v13 = v19;
      if (v19 >= (unint64_t)HIDWORD(v19))
      {
        long long v15 = v17;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, v19 + 1, 16);
        long long v12 = v15;
        uint64_t v13 = v19;
      }
      *((_OWORD *)v18 + v13) = v12;
      LODWORD(v19) = v19 + 1;
      a2 += 2;
      v7 -= 16;
    }
    while (v7);
  }
LABEL_12:
  long long v14 = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  *(void *)(a1 + 56) = mlir::DictionaryAttr::get(v14, (uint64_t *)v18, v19);
  if (v18 != v20) {
    free(v18);
  }
}

uint64_t mlir::Operation::getPropertiesAsAttribute(mlir::Operation *this)
{
  uint64_t v2 = (void **)*((void *)this + 6);
  if (v2[2] == &mlir::detail::TypeIDResolver<void,void>::id) {
    return *((void *)this + 2 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1) + 8);
  }
  else {
    return (*((uint64_t (**)(void **, mlir::Operation *))*v2 + 19))(v2, this);
  }
}

uint64_t mlir::Operation::hashProperties(mlir::Operation *this)
{
  if (HIBYTE(*((_DWORD *)this + 11))) {
    unint64_t v1 = (char *)this + 16 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1) + 64;
  }
  else {
    unint64_t v1 = 0;
  }
  return (*(uint64_t (**)(void, char *))(**((void **)this + 6) + 176))(*((void *)this + 6), v1);
}

BOOL mlir::Operation::isBeforeInBlock(mlir::Block **this, mlir::Operation *a2)
{
  if (mlir::Block::isOpOrderValid(this[2]))
  {
    mlir::Operation::updateOrderIfNecessary((mlir::Operation *)this);
    mlir::Operation::updateOrderIfNecessary(a2);
  }
  else
  {
    mlir::Block::recomputeOpOrder(this[2]);
  }
  return *((_DWORD *)this + 8) < *((_DWORD *)a2 + 8);
}

void mlir::Operation::updateOrderIfNecessary(mlir::Operation *this)
{
  if (*((_DWORD *)this + 8) == -1)
  {
    uint64_t v1 = *((void *)this + 2);
    uint64_t v2 = v1 + 32;
    if (*(mlir::Operation **)(v1 + 32) == this)
    {
      if (*(mlir::Operation **)(v1 + 40) == this) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = *(void *)this;
      }
      int v7 = *(_DWORD *)(v6 + 32);
      if (v7 != -1)
      {
        *((_DWORD *)this + 8) = v7 + 5;
        return;
      }
      goto LABEL_21;
    }
    if (*(mlir::Operation **)(v1 + 40) != this)
    {
      int v3 = *(_DWORD *)(*(void *)this + 32);
      if (v3 != -1)
      {
        uint64_t v4 = *((void *)this + 1) == v2 ? 0 : *((void *)this + 1);
        int v5 = *(_DWORD *)(v4 + 32);
        if (v5 != -1 && v3 + 1 != v5)
        {
          *((_DWORD *)this + 8) = v3 + ((v5 - v3) >> 1);
          return;
        }
      }
      goto LABEL_21;
    }
    if (*((void *)this + 1) == v2) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = *((void *)this + 1);
    }
    unsigned int v9 = *(_DWORD *)(v8 + 32);
    if (!v9 || v9 == -1)
    {
LABEL_21:
      mlir::Block::recomputeOpOrder(*((mlir::Block **)this + 2));
      return;
    }
    if (v9 > 5) {
      *((_DWORD *)this + 8) = 5;
    }
    else {
      *((_DWORD *)this + 8) = v9 >> 1;
    }
  }
}

uint64_t llvm::ilist_traits<mlir::Operation>::addNodeToList(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 16) = result - 32;
  *(_DWORD *)(a2 + 32) = -1;
  return result;
}

void llvm::ilist_traits<mlir::Operation>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 16) = 0;
}

uint64_t llvm::ilist_traits<mlir::Operation>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 - 32;
  uint64_t result = mlir::Block::invalidateOpOrder(a1 - 32);
  if (a1 != a2 && a3 != a4)
  {
    do
    {
      *(void *)(a3 + 16) = v8;
      a3 = *(void *)(a3 + 8);
    }
    while (a3 != a4);
  }
  return result;
}

void mlir::Operation::erase(mlir::Operation *this)
{
  if (*((void *)this + 2))
  {
    *((void *)this + 2) = 0;
    uint64_t v3 = *(void *)this;
    uint64_t v2 = (void *)*((void *)this + 1);
    *uint64_t v2 = *(void *)this;
    *(void *)(v3 + 8) = v2;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  uint64_t v4 = *((unsigned int *)this + 9);
  unsigned int NumTrailing = mlir::OpResult::getNumTrailing((mlir::OpResult *)v4);
  uint64_t v6 = (char *)this - 24 * NumTrailing - 16 * mlir::OpResult::getNumInline(v4);
  mlir::Operation::~Operation(this);

  free(v6);
}

uint64_t *mlir::Operation::remove(uint64_t *this)
{
  if (this[2])
  {
    this[2] = 0;
    uint64_t v2 = *this;
    uint64_t v1 = (uint64_t *)this[1];
    uint64_t *v1 = *this;
    *(void *)(v2 + 8) = v1;
    *this = 0;
    this[1] = 0;
  }
  return this;
}

mlir::Operation *mlir::Operation::moveBefore(mlir::Operation *this, mlir::Operation *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = (mlir::Operation *)*((void *)this + 1);
    if (v4 != a2)
    {
      uint64_t v5 = *((void *)a2 + 2);
      uint64_t v6 = *((void *)this + 2);
      this = (mlir::Operation *)mlir::Block::invalidateOpOrder(v5);
      if (v6 != v5 && v4 != v3)
      {
        uint64_t v8 = v3;
        do
        {
          *((void *)v8 + 2) = v5;
          uint64_t v8 = (mlir::Operation *)*((void *)v8 + 1);
        }
        while (v8 != v4);
      }
      if (v4 != v3)
      {
        uint64_t v9 = *(void *)v4;
        uint64_t v10 = *(void *)v3;
        *(void *)(v10 + 8) = v4;
        *(void *)uint64_t v4 = v10;
        uint64_t v11 = *(void *)a2;
        *(void *)(v9 + 8) = a2;
        *(void *)uint64_t v3 = v11;
        *(void *)(v11 + 8) = v3;
        *(void *)a2 = v9;
      }
    }
  }
  return this;
}

uint64_t mlir::Operation::moveBefore(uint64_t result, mlir::Block *this, uint64_t *a3)
{
  if (a3 != (uint64_t *)result)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t v5 = *(uint64_t **)(result + 8);
    if (v5 != a3)
    {
      int v7 = *(mlir::Block **)(result + 16);
      uint64_t result = mlir::Block::invalidateOpOrder((uint64_t)this);
      if (v7 != this && v5 != v4)
      {
        uint64_t v9 = v4;
        do
        {
          void v9[2] = (uint64_t)this;
          uint64_t v9 = (uint64_t *)v9[1];
        }
        while (v9 != v5);
      }
      if (v5 != v4)
      {
        uint64_t v10 = *v5;
        uint64_t v11 = *v4;
        *(void *)(v11 + 8) = v5;
        uint64_t *v5 = v11;
        uint64_t v12 = *a3;
        *(void *)(v10 + 8) = a3;
        uint64_t *v4 = v12;
        *(void *)(v12 + 8) = v4;
        *a3 = v10;
      }
    }
  }
  return result;
}

uint64_t *mlir::Operation::moveAfter(uint64_t *this, mlir::Operation *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)a2 + 1);
  uint64_t v3 = (uint64_t *)this[1];
  if (v2 != this && v3 != v2)
  {
    uint64_t v5 = this;
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t v7 = this[2];
    this = (uint64_t *)mlir::Block::invalidateOpOrder(v6);
    if (v7 != v6 && v3 != v5)
    {
      uint64_t v9 = v5;
      do
      {
        void v9[2] = v6;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9 != v3);
    }
    if (v3 != v5)
    {
      uint64_t v10 = *v3;
      uint64_t v11 = *v5;
      *(void *)(v11 + 8) = v3;
      uint64_t *v3 = v11;
      uint64_t v12 = *v2;
      *(void *)(v10 + 8) = v2;
      uint64_t *v5 = v12;
      *(void *)(v12 + 8) = v5;
      *uint64_t v2 = v10;
    }
  }
  return this;
}

uint64_t mlir::Operation::dropAllReferences(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = *(_DWORD *)(this + 44);
  if ((v2 & 0x800000) != 0)
  {
    uint64_t v3 = *(unsigned int *)(this + 68);
    if (v3)
    {
      uint64_t v4 = *(void **)(this + 72);
      uint64_t v5 = 32 * v3;
      do
      {
        uint64_t v6 = (void *)v4[1];
        if (v6)
        {
          *uint64_t v6 = *v4;
          if (*v4) {
            *(void *)(*v4 + 8) = v4[1];
          }
        }
        void *v4 = 0;
        v4[1] = 0;
        v4[3] = 0;
        v4 += 4;
        v5 -= 32;
      }
      while (v5);
      unsigned int v2 = *(_DWORD *)(this + 44);
    }
  }
  if ((v2 & 0x7FFFFF) != 0)
  {
    uint64_t v7 = (mlir::Region *)(((this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                        + 32 * *(unsigned int *)(this + 40));
    uint64_t v8 = 24 * (v2 & 0x7FFFFF);
    do
    {
      this = mlir::Region::dropAllReferences(v7);
      uint64_t v7 = (mlir::Region *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
    unsigned int v2 = *(_DWORD *)(v1 + 44);
  }
  uint64_t v9 = *(unsigned int *)(v1 + 40);
  if (v9)
  {
    uint64_t v10 = (void *)((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = 32 * v9;
    do
    {
      uint64_t v12 = (void *)v10[1];
      if (v12)
      {
        *uint64_t v12 = *v10;
        if (*v10) {
          *(void *)(*v10 + 8) = v10[1];
        }
      }
      *uint64_t v10 = 0;
      v10[1] = 0;
      v10[3] = 0;
      v10 += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return this;
}

uint64_t mlir::Operation::dropAllDefinedValueUses(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 36);
  if (v2) {
    uint64_t v3 = this - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      this = mlir::detail::OpResultImpl::getNextResultAtOffset(v3, i);
      while (1)
      {
        uint64_t v5 = *(void **)this;
        if (!*(void *)this) {
          break;
        }
        uint64_t v6 = (void *)v5[1];
        if (v6)
        {
          *uint64_t v6 = *v5;
          if (*v5) {
            *(void *)(*v5 + 8) = v5[1];
          }
        }
        void *v5 = 0;
        v5[1] = 0;
        v5[3] = 0;
      }
    }
  }
  unint64_t v7 = *(unsigned int *)(v1 + 44);
  if ((v7 & 0x7FFFFF) != 0)
  {
    unint64_t v8 = ((v1 + 16 * ((v7 >> 23) & 1) + ((v7 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(v1 + 40);
    unint64_t v9 = v8 + 24 * (v7 & 0x7FFFFF);
    uint64_t j = *(void *)(v8 + 8);
    if (j != v8) {
      goto LABEL_17;
    }
    while (1)
    {
      v8 += 24;
      if (v8 == v9) {
        break;
      }
      for (uint64_t j = *(void *)(v8 + 8); j != v8; uint64_t j = *(void *)(j + 8))
      {
LABEL_17:
        if (j) {
          uint64_t v11 = (mlir::Block *)(j - 8);
        }
        else {
          uint64_t v11 = 0;
        }
        this = mlir::Block::dropAllDefinedValueUses(v11);
      }
    }
  }
  return this;
}

void mlir::Operation::setSuccessor(mlir::Operation *this, mlir::Block *a2, unsigned int a3)
{
  uint64_t v3 = (uint64_t *)((((unint64_t)this
                   + 16 * (((unint64_t)*((unsigned int *)this + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)this + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * a3);
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    uint64_t *v4 = *v3;
    if (*v3) {
      *(void *)(*v3 + 8) = v3[1];
    }
  }
  void v3[3] = (uint64_t)a2;
  mlir::GenericProgramPoint::~GenericProgramPoint(a2);
  uint64_t v6 = *v5;
  uint64_t *v3 = *v5;
  v3[1] = (uint64_t)v5;
  if (v6) {
    *(void *)(v6 + 8) = v3;
  }
  uint64_t *v5 = (uint64_t)v3;
}

uint64_t mlir::Operation::fold(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(unsigned __int8 (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a1, a2, a3, a4))
  {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (*(_UNKNOWN **)(v9 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t Values = *(void *)(v9 + 24);
    if (Values) {
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v11);
  if (!Values) {
    return 0;
  }
LABEL_6:
  uint64_t result = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
  if (result)
  {
    uint64_t result = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 16))(result, a1, a2, a3, a4);
    }
  }
  return result;
}

uint64_t mlir::Operation::fold(uint64_t a1, uint64_t a2)
{
  v23[6] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v23;
  int v22 = 6;
  if ((*(unsigned char *)(a1 + 46) & 0x80) == 0)
  {
    unint64_t v4 = 0;
    unsigned int v21 = 0;
    goto LABEL_14;
  }
  unint64_t v4 = *(unsigned int *)(a1 + 68);
  if (v4 > 6)
  {
    unsigned int v21 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v23, v4, 8);
    bzero(v20, 8 * v4);
    int v5 = *(_DWORD *)(a1 + 44);
    unsigned int v21 = v4;
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 68);
    if (!v6) {
      goto LABEL_14;
    }
    goto LABEL_9;
  }
  if (v4) {
    bzero(v23, 8 * v4);
  }
  unsigned int v21 = v4;
  uint64_t v6 = *(unsigned int *)(a1 + 68);
  if (v6)
  {
LABEL_9:
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v6;
    uint64_t v9 = 24;
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 72) + v9);
      uint64_t v18 = (unint64_t *)((char *)v20 + v7);
      uint64_t v19 = v10;
      uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)&v19);
      if (DefiningOp) {
        mlir::detail::constant_op_binder<mlir::Attribute>::match(&v18, DefiningOp);
      }
      v9 += 32;
      v7 += 8;
    }
    while (v8 != v7);
    unint64_t v4 = v21;
  }
LABEL_14:
  uint64_t v12 = v20;
  if ((*(unsigned __int8 (**)(void, uint64_t, void *, unint64_t, uint64_t))(**(void **)(a1 + 48)
                                                                                             + 16))(*(void *)(a1 + 48), a1, v20, v4, a2))
  {
    uint64_t v13 = 1;
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (*(_UNKNOWN **)(v14 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t v19 = *(void *)(v14 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v19);
    if (!Values) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t Values = *(void *)(v14 + 24);
    if (!Values) {
      goto LABEL_23;
    }
  }
  if (mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values))
  {
    uint64_t v16 = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
    if (v16)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void *, unint64_t, uint64_t))(*(void *)v16 + 16))(v16, a1, v12, v4, a2);
      goto LABEL_24;
    }
  }
LABEL_23:
  uint64_t v13 = 0;
LABEL_24:
  if (v20 != v23) {
    free(v20);
  }
  return v13;
}

void mlir::Operation::emitOpError(uint64_t *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  __int16 v40 = 257;
  mlir::Operation::emitError(a1, (uint64_t)v39, (uint64_t)&v44);
  uint64_t v6 = v44;
  if (v44)
  {
    int v41 = 3;
    uint64_t v42 = "'";
    uint64_t v43 = 1;
    uint64_t v7 = &v41;
    uint64_t v8 = (char *)__src;
    if (v48 >= v49)
    {
      unint64_t v35 = v48 + 1;
      if (__src <= &v41 && (char *)__src + 24 * v48 > (char *)&v41)
      {
        int64_t v37 = (char *)&v41 - (unsigned char *)__src;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v35, 24);
        uint64_t v8 = (char *)__src;
        uint64_t v7 = (int *)((char *)__src + v37);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v35, 24);
        uint64_t v7 = &v41;
        uint64_t v8 = (char *)__src;
      }
    }
    uint64_t v9 = &v8[24 * v48];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++v48;
    uint64_t v6 = v44;
    if (v44)
    {
      mlir::Diagnostic::operator<<((uint64_t)&v45, a1[6]);
      uint64_t v6 = v44;
      if (v44)
      {
        int v41 = 3;
        uint64_t v42 = "' op ";
        uint64_t v43 = 5;
        uint64_t v11 = &v41;
        uint64_t v12 = (char *)__src;
        if (v48 >= v49)
        {
          unint64_t v36 = v48 + 1;
          if (__src <= &v41 && (char *)__src + 24 * v48 > (char *)&v41)
          {
            int64_t v38 = (char *)&v41 - (unsigned char *)__src;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v36, 24);
            uint64_t v12 = (char *)__src;
            uint64_t v11 = (int *)((char *)__src + v38);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v50, v36, 24);
            uint64_t v11 = &v41;
            uint64_t v12 = (char *)__src;
          }
        }
        uint64_t v13 = &v12[24 * v48];
        long long v14 = *(_OWORD *)v11;
        *((void *)v13 + 2) = *((void *)v11 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        ++v48;
        uint64_t v6 = v44;
        if (v44)
        {
          mlir::Diagnostic::operator<<((uint64_t)&v45, a2);
          uint64_t v6 = v44;
        }
      }
    }
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  if (v55)
  {
    *(void *)(a3 + 8) = v45;
    unint64_t v15 = v48;
    *(_DWORD *)(a3 + 16) = v46;
    *(void *)(a3 + 24) = a3 + 40;
    *(void *)(a3 + 32) = 0x400000000;
    if (!v15 || &v44 == (uint64_t *)a3)
    {
      int v17 = 1;
      goto LABEL_21;
    }
    if (__src != v50)
    {
      *(void *)(a3 + 24) = __src;
      unsigned int v16 = v49;
      *(_DWORD *)(a3 + 32) = v15;
      *(_DWORD *)(a3 + 36) = v16;
      __src = v50;
      unsigned int v49 = 0;
      int v17 = 1;
LABEL_20:
      unsigned int v48 = 0;
LABEL_21:
      *(_OWORD *)(a3 + 136) = *(_OWORD *)v51;
      *(void *)(a3 + 152) = v52;
      v51[0] = 0;
      v51[1] = 0;
      *(_OWORD *)(a3 + 160) = *(_OWORD *)__p;
      *(void *)(a3 + 176) = v54;
      uint64_t v52 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v54 = 0;
      *(unsigned char *)(a3 + 184) = 1;
      if (v17)
      {
        uint64_t v19 = (void **)__p[0];
        if (__p[0])
        {
          uint64_t v20 = (void **)__p[1];
          unsigned int v21 = __p[0];
          if (__p[1] != __p[0])
          {
            do
              uint64_t v20 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v20 - 1);
            while (v20 != v19);
            unsigned int v21 = __p[0];
          }
          __p[1] = v19;
          operator delete(v21);
        }
        int v22 = v51[0];
        if (v51[0])
        {
          int v23 = v51[1];
          uint64_t v24 = v51[0];
          if (v51[1] != v51[0])
          {
            do
            {
              uint64_t v26 = (void *)*--v23;
              uint64_t v25 = v26;
              *int v23 = 0;
              if (v26) {
                operator delete[](v25);
              }
            }
            while (v23 != v22);
            uint64_t v24 = v51[0];
          }
          v51[1] = v22;
          operator delete(v24);
        }
        if (__src != v50) {
          free(__src);
        }
        unsigned __int8 v55 = 0;
      }
      goto LABEL_38;
    }
    if (v15 < 5)
    {
      unint64_t v18 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 24, (void *)(a3 + 40), v15, 24);
      unint64_t v18 = v48;
      if (!v48) {
        goto LABEL_19;
      }
    }
    memcpy(*(void **)(a3 + 24), __src, 24 * v18);
LABEL_19:
    *(_DWORD *)(a3 + 32) = v15;
    int v17 = v55;
    goto LABEL_20;
  }
LABEL_38:
  mlir::InFlightDiagnostic::abandon(&v44);
  if (v44) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v44);
  }
  if (v55)
  {
    uint64_t v27 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v28 = (void **)__p[1];
      uint64_t v29 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
        while (v28 != v27);
        uint64_t v29 = __p[0];
      }
      __p[1] = v27;
      operator delete(v29);
    }
    uint64_t v30 = v51[0];
    if (v51[0])
    {
      uint64_t v31 = v51[1];
      unsigned int v32 = v51[0];
      if (v51[1] != v51[0])
      {
        do
        {
          unsigned int v34 = (void *)*--v31;
          unsigned int v33 = v34;
          void *v31 = 0;
          if (v34) {
            operator delete[](v33);
          }
        }
        while (v31 != v30);
        unsigned int v32 = v51[0];
      }
      v51[1] = v30;
      operator delete(v32);
    }
    if (__src != v50) {
      free(__src);
    }
  }
}

uint64_t mlir::Operation::CloneOptions::all(mlir::Operation::CloneOptions *this)
{
  return 3;
}

unsigned char *mlir::Operation::CloneOptions::cloneRegions(unsigned char *this, char a2)
{
  *this = *this & 0xFE | a2;
  return this;
}

unsigned char *mlir::Operation::CloneOptions::cloneOperands(unsigned char *this, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 0;
  }
  *this = *this & 0xFD | v2;
  return this;
}

unsigned int *mlir::Operation::clone(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int64_t v69 = v71;
  uint64_t v70 = 0x800000000;
  BOOL v66 = v68;
  uint64_t v67 = 0x200000000;
  if ((a3 & 2) != 0 && (*(unsigned char *)(a1 + 46) & 0x80) != 0)
  {
    unint64_t v5 = *(unsigned int *)(a1 + 68);
    if (v5 < 9
      || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v5, 8), (*(unsigned char *)(a1 + 46) & 0x80) != 0))
    {
      uint64_t v6 = *(unsigned int *)(a1 + 68);
      if (v6)
      {
        uint64_t v7 = (unint64_t *)(*(void *)(a1 + 72) + 24);
        do
        {
          unint64_t v8 = *v7;
          unint64_t v62 = *v7;
          int64_t v72 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72)&& v72 != (void *)(*(void *)a2 + 16 * *(unsigned int *)(a2 + 16)))
          {
            unint64_t v8 = v72[1];
          }
          uint64_t v9 = v70;
          if (v70 >= (unint64_t)HIDWORD(v70))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
            uint64_t v9 = v70;
          }
          *((void *)v69 + v9) = v8;
          LODWORD(v70) = v70 + 1;
          v7 += 4;
          --v6;
        }
        while (v6);
      }
    }
  }
  unint64_t v10 = *(unsigned int *)(a1 + 40);
  if (HIDWORD(v67) < v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v10, 8);
  }
  mlir::SuccessorRange::SuccessorRange((unint64_t *)&v72, (Operation *)a1);
  unint64_t v11 = v73;
  if (v73)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v72;
    while (1)
    {
      uint64_t v14 = v13[4 * v12 + 3];
      uint64_t v15 = *(void *)(a2 + 24);
      uint64_t v16 = *(unsigned int *)(a2 + 40);
      if (!v16) {
        goto LABEL_23;
      }
      LODWORD(v17) = ((v14 >> 4) ^ (v14 >> 9)) & (v16 - 1);
      unint64_t v18 = (uint64_t *)(v15 + 16 * v17);
      uint64_t v19 = *v18;
      if (*v18 != v14) {
        break;
      }
LABEL_24:
      if (v18 != (uint64_t *)(v15 + 16 * v16)) {
        uint64_t v14 = v18[1];
      }
      uint64_t v22 = v67;
      if (v67 >= (unint64_t)HIDWORD(v67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v66, v68, v67 + 1, 8);
        uint64_t v22 = v67;
      }
      *((void *)v66 + v22) = v14;
      LODWORD(v67) = v67 + 1;
      if (++v12 == v11) {
        goto LABEL_29;
      }
    }
    int v20 = 1;
    while (v19 != -4096)
    {
      int v21 = v17 + v20++;
      uint64_t v17 = v21 & (v16 - 1);
      uint64_t v19 = *(void *)(v15 + 16 * v17);
      if (v19 == v14)
      {
        unint64_t v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_24;
      }
    }
LABEL_23:
    unint64_t v18 = (uint64_t *)(v15 + 16 * v16);
    goto LABEL_24;
  }
LABEL_29:
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 48);
  unint64_t v25 = *(unsigned int *)(a1 + 36);
  if (v25) {
    uint64_t v26 = (void *)(a1 - 16);
  }
  else {
    uint64_t v26 = 0;
  }
  int64_t v72 = v26;
  unint64_t v73 = v25;
  mlir::OperandRange::getTypes((uint64_t *)&v72, &v59);
  uint64_t NextResultAtOffset = v59;
  uint64_t v28 = v60;
  uint64_t v29 = v61;
  if (v60) {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v59, v60);
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v72, NextResultAtOffset, v29 - v28);
  mlir::TypeRange::TypeRange(v65, (uint64_t)v72, v73);
  mlir::ValueRange::ValueRange(v64, (uint64_t)v69, v70);
  uint64_t v30 = *(void *)(a1 + 56);
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v31 = a1 + 64 + 16 * (((unint64_t)*(unsigned int *)(a1 + 44) >> 23) & 1);
  }
  else {
    uint64_t v31 = 0;
  }
  mlir::BlockRange::BlockRange(v63, (uint64_t)v66, v67);
  unsigned int v32 = (unsigned int *)mlir::Operation::create(v23, v24, v65[0], (mlir::OpResult *)v65[1], v64[0], v64[1], v30, v31, v63[0], v63[1], *(_DWORD *)(a1 + 44) & 0x7FFFFF);
  mlir::IRMapping::map((mlir::IRMapping *)a2, (mlir::Operation *)a1, (mlir::Operation *)v32);
  if (v58)
  {
    unsigned int v33 = *(_DWORD *)(a1 + 44);
    if ((v33 & 0x7FFFFF) != 0)
    {
      unsigned int v34 = 0;
      int v35 = 1;
      do
      {
        if (v35)
        {
          unint64_t v37 = ((a1 + 64 + 16 * ((v33 >> 23) & 1) + ((v33 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
              + 32 * *(unsigned int *)(a1 + 40);
          unint64_t v38 = v32[11];
          if ((v38 & 0x7FFFFF) == 0) {
            goto LABEL_46;
          }
        }
        else
        {
          unint64_t v37 = 0;
          unint64_t v38 = v32[11];
          if ((v38 & 0x7FFFFF) == 0)
          {
LABEL_46:
            unint64_t v36 = 0;
            goto LABEL_41;
          }
        }
        unint64_t v36 = (((unint64_t)&v32[4 * ((v38 >> 23) & 1) + 17] + ((v38 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
            + 32 * v32[10];
LABEL_41:
        mlir::Region::cloneInto((mlir::Region *)(v37 + 24 * v34), (mlir::Region *)(v36 + 24 * v34), (mlir::IRMapping *)a2);
        ++v34;
        unsigned int v33 = *(_DWORD *)(a1 + 44);
        int v35 = v33 & 0x7FFFFF;
      }
      while (v34 != (v33 & 0x7FFFFF));
    }
  }
  uint64_t v39 = *(unsigned int *)(a1 + 36);
  if (v39)
  {
    unint64_t v62 = a1 - 16;
    int64_t v72 = 0;
    char v40 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
    int v41 = v72;
    if ((v40 & 1) == 0)
    {
      int v41 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
      void *v41 = v62;
      v41[1] = 0;
    }
    v41[1] = v32 - 4;
    if (v39 != 1)
    {
      unint64_t v62 = a1 - 32;
      int64_t v72 = 0;
      char v42 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
      uint64_t v43 = v72;
      if ((v42 & 1) == 0)
      {
        uint64_t v43 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
        *uint64_t v43 = v62;
        v43[1] = 0;
      }
      v43[1] = v32 - 8;
      if (v39 != 2)
      {
        unint64_t v62 = a1 - 48;
        int64_t v72 = 0;
        char v44 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
        uint64_t v45 = v72;
        if ((v44 & 1) == 0)
        {
          uint64_t v45 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
          void *v45 = v62;
          v45[1] = 0;
        }
        v45[1] = v32 - 12;
        if (v39 != 3)
        {
          unint64_t v62 = a1 - 64;
          int64_t v72 = 0;
          char v46 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
          unsigned int v47 = v72;
          if ((v46 & 1) == 0)
          {
            unsigned int v47 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
            *unsigned int v47 = v62;
            v47[1] = 0;
          }
          v47[1] = v32 - 16;
          if (v39 != 4)
          {
            unint64_t v62 = a1 - 80;
            int64_t v72 = 0;
            char v48 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
            unsigned int v49 = v72;
            if ((v48 & 1) == 0)
            {
              unsigned int v49 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
              *unsigned int v49 = v62;
              v49[1] = 0;
            }
            v49[1] = v32 - 20;
            if (v39 != 5)
            {
              unint64_t v62 = a1 - 96;
              int64_t v72 = 0;
              char v50 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
              unint64_t v51 = v72;
              if ((v50 & 1) == 0)
              {
                unint64_t v51 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
                void *v51 = v62;
                v51[1] = 0;
              }
              v51[1] = v32 - 24;
              if (v39 != 6)
              {
                unint64_t v53 = a1 - 120;
                uint64_t v54 = v32 - 30;
                uint64_t v55 = v39 - 6;
                do
                {
                  unint64_t v62 = v53;
                  int64_t v72 = 0;
                  char v56 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a2, &v62, &v72);
                  unint64_t v57 = v72;
                  if ((v56 & 1) == 0)
                  {
                    unint64_t v57 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>(a2, (uint64_t)&v62, &v62, v72);
                    *unint64_t v57 = v62;
                    v57[1] = 0;
                  }
                  v57[1] = v54;
                  v53 -= 24;
                  v54 -= 6;
                  --v55;
                }
                while (v55);
              }
            }
          }
        }
      }
    }
  }
  if (v66 != v68) {
    free(v66);
  }
  if (v69 != v71) {
    free(v69);
  }
  return v32;
}

void mlir::Operation::cloneWithoutRegions(mlir::Operation *this)
{
  v1[0] = 0;
  v1[1] = 0;
  int v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  mlir::Operation::clone((uint64_t)this, (uint64_t)v1, 2);
  llvm::deallocate_buffer(v6, (void *)(16 * v8));
}

void sub_18049EA4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
}

void sub_18049EA60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
}

uint64_t sub_18049EA74()
{
  return v0;
}

void *mlir::IRMapping::map(mlir::IRMapping *this, mlir::Operation *a2, mlir::Operation *a3)
{
  uint64_t v8 = *((void *)this + 6);
  uint64_t result = (void *)((char *)this + 48);
  uint64_t v7 = v8;
  unsigned int v9 = *((_DWORD *)result + 4);
  if (!v9) {
    goto LABEL_21;
  }
  unsigned int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = (mlir::Operation **)(v7 + 16 * v11);
  uint64_t v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  uint64_t v15 = 0;
  int v16 = 1;
  while (v13 != (mlir::Operation *)-4096)
  {
    if (v15) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v13 == (mlir::Operation *)-8192;
    }
    if (v17) {
      uint64_t v15 = v12;
    }
    unsigned int v18 = v11 + v16++;
    unsigned int v11 = v18 & v10;
    uint64_t v12 = (mlir::Operation **)(v7 + 16 * (v18 & v10));
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_3;
    }
  }
  if (v15) {
    uint64_t v12 = v15;
  }
  int v19 = *((_DWORD *)this + 14);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *((_DWORD *)this + 15) > v9 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  uint64_t result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  uint64_t v20 = *((void *)this + 6);
  int v21 = *((_DWORD *)this + 16) - 1;
  unsigned int v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = (mlir::Operation **)(v20 + 16 * v22);
  uint64_t v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 14);
    if (a2 == (mlir::Operation *)-4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != (mlir::Operation *)-4096)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (mlir::Operation *)-8192;
    }
    if (v26) {
      uint64_t v24 = v12;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    uint64_t v12 = (mlir::Operation **)(v20 + 16 * (v27 & v21));
    uint64_t v23 = *v12;
    if (*v12 == a2) {
      goto LABEL_23;
    }
  }
  if (v24) {
    uint64_t v12 = v24;
  }
LABEL_6:
  uint64_t v14 = *v12;
  ++*((_DWORD *)this + 14);
  if (v14 != (mlir::Operation *)-4096) {
LABEL_7:
  }
    --*((_DWORD *)this + 15);
LABEL_8:
  *uint64_t v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

void mlir::Operation::clone(uint64_t a1, char a2)
{
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  mlir::Operation::clone(a1, (uint64_t)v2, a2);
  llvm::deallocate_buffer(v7, (void *)(16 * v9));
}

void sub_18049ECA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, llvm *a13, uint64_t a14, unsigned int a15)
{
}

void sub_18049ECB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, llvm *a10, uint64_t a11, unsigned int a12)
{
}

uint64_t sub_18049ECC8()
{
  return v0;
}

uint64_t mlir::OpState::parse(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v19[0] = *(void *)(v4 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v19);
    uint64_t v4 = *(void *)(a2 + 8);
  }
  else
  {
    uint64_t Values = *(void *)(v4 + 24);
  }
  v19[0] = *(void *)(v4 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v19);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)Values + 64))(v21, Values, AttrData, v7);
  if (v22) {
    return ((uint64_t (*)(void, uint64_t, uint64_t))v21[0])(v21[1], a1, a2);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  v19[0] = "has no custom assembly form";
  __int16 v20 = 259;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, void *))(*(void *)a1 + 24))(v21, a1, v10, v19);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v21);
  if (v21[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v21);
  }
  if (v29)
  {
    unsigned int v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v28;
      uint64_t v13 = __p;
      if (v28 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v28 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v25;
    if (v25)
    {
      uint64_t v15 = v26;
      int v16 = v25;
      if (v26 != v25)
      {
        do
        {
          unsigned int v18 = (void *)*--v15;
          BOOL v17 = v18;
          *uint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        int v16 = v25;
      }
      BOOL v26 = v14;
      operator delete(v16);
    }
    if (v23 != &v24) {
      free(v23);
    }
  }
  return v8;
}

uint64_t mlir::OpState::print(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 48);
  if (*(_UNKNOWN **)(v8 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    v14[0] = *(llvm **)(v8 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)v14);
  }
  else
  {
    uint64_t Values = *(void *)(v8 + 24);
  }
  (*(void (**)(llvm **__return_ptr))(*(void *)Values + 72))(v14);
  if (v15 < 8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 216))(a2, a1, 1);
    unint64_t v12 = v15;
    if (v15 < 8) {
      return result;
    }
  }
  else
  {
    mlir::OpState::printOpName(a1, a2, a3, a4);
    if ((v15 & 2) != 0) {
      uint64_t v10 = v14;
    }
    else {
      uint64_t v10 = (llvm **)v14[0];
    }
    uint64_t result = (*(uint64_t (**)(llvm **, uint64_t, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v10, a1, a2);
    unint64_t v12 = v15;
    if (v15 < 8) {
      return result;
    }
  }
  if ((v12 & 4) != 0)
  {
    if ((v12 & 2) != 0) {
      uint64_t v13 = v14;
    }
    else {
      uint64_t v13 = (llvm **)v14[0];
    }
    uint64_t result = (*(uint64_t (**)(llvm **))((v12 & 0xFFFFFFFFFFFFFFF8) + 16))(v13);
  }
  if ((v12 & 2) == 0) {
    llvm::deallocate_buffer(v14[0], v14[1]);
  }
  return result;
}

llvm::raw_ostream *mlir::OpState::printOpName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v79[0] = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t AttrData = (int8x16_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v79);
  size_t v9 = v8;
  __int16 v80 = 773;
  v79[0] = a3;
  v79[1] = a4;
  v79[2] = ".";
  llvm::Twine::str((llvm::Twine *)v79, &v81);
  int v10 = SHIBYTE(v81.__r_.__value_.__r.__words[2]);
  unsigned int v11 = (void *)v81.__r_.__value_.__r.__words[0];
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v12 = &v81;
  }
  else {
    unint64_t v12 = (std::string *)v81.__r_.__value_.__r.__words[0];
  }
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v81.__r_.__value_.__l.__size_;
  }
  if (v9 < size || size && memcmp(AttrData, v12, size))
  {
    if (v10 < 0) {
      operator delete(v11);
    }
    goto LABEL_37;
  }
  if (v9)
  {
    if (v9 < 8)
    {
      unint64_t v14 = 0;
      uint64_t v15 = 0;
      goto LABEL_26;
    }
    if (v9 >= 0x20)
    {
      int64x2_t v17 = 0uLL;
      v18.i64[0] = 0x2E2E2E2E2E2E2E2ELL;
      v18.i64[1] = 0x2E2E2E2E2E2E2E2ELL;
      int8x16_t v19 = (int8x16_t)vdupq_n_s64(1uLL);
      unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFE0;
      int64x2_t v20 = 0uLL;
      int v21 = AttrData + 1;
      int64x2_t v22 = 0uLL;
      unint64_t v23 = v9 & 0xFFFFFFFFFFFFFFE0;
      int64x2_t v24 = 0uLL;
      int64x2_t v25 = 0uLL;
      int64x2_t v26 = 0uLL;
      int64x2_t v27 = 0uLL;
      int64x2_t v28 = 0uLL;
      int64x2_t v29 = 0uLL;
      int64x2_t v30 = 0uLL;
      int64x2_t v31 = 0uLL;
      int64x2_t v32 = 0uLL;
      int64x2_t v33 = 0uLL;
      int64x2_t v34 = 0uLL;
      int64x2_t v35 = 0uLL;
      int64x2_t v36 = 0uLL;
      do
      {
        uint8x16_t v37 = (uint8x16_t)vceqq_s8(v21[-1], v18);
        uint16x8_t v38 = vmovl_u8(*(uint8x8_t *)v37.i8);
        uint16x8_t v39 = vmovl_high_u8(v37);
        uint32x4_t v40 = vmovl_high_u16(v39);
        v41.i64[0] = v40.u32[2];
        v41.i64[1] = v40.u32[3];
        int64x2_t v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v41, v19));
        uint32x4_t v42 = vmovl_high_u16(v38);
        uint32x4_t v43 = vmovl_u16(*(uint16x4_t *)v39.i8);
        v41.i64[0] = v40.u32[0];
        v41.i64[1] = v40.u32[1];
        int64x2_t v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v43.u32[2];
        v41.i64[1] = v43.u32[3];
        int64x2_t v26 = vaddq_s64(v26, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v42.u32[2];
        v41.i64[1] = v42.u32[3];
        int64x2_t v24 = vaddq_s64(v24, (int64x2_t)vandq_s8(v41, v19));
        int8x16_t v44 = *v21;
        v21 += 2;
        uint32x4_t v45 = vmovl_u16(*(uint16x4_t *)v38.i8);
        v41.i64[0] = v43.u32[0];
        v41.i64[1] = v43.u32[1];
        int64x2_t v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v45.u32[0];
        v41.i64[1] = v45.u32[1];
        int64x2_t v46 = (int64x2_t)vandq_s8(v41, v19);
        v41.i64[0] = v45.u32[2];
        v41.i64[1] = v45.u32[3];
        int64x2_t v47 = (int64x2_t)vandq_s8(v41, v19);
        v41.i64[0] = v42.u32[0];
        v41.i64[1] = v42.u32[1];
        uint8x16_t v48 = (uint8x16_t)vceqq_s8(v44, v18);
        int64x2_t v22 = vaddq_s64(v22, (int64x2_t)vandq_s8(v41, v19));
        uint16x8_t v49 = vmovl_u8(*(uint8x8_t *)v48.i8);
        uint16x8_t v50 = vmovl_high_u8(v48);
        int64x2_t v20 = vaddq_s64(v20, v47);
        uint32x4_t v51 = vmovl_high_u16(v50);
        int64x2_t v17 = vaddq_s64(v17, v46);
        v41.i64[0] = v51.u32[2];
        v41.i64[1] = v51.u32[3];
        int64x2_t v36 = vaddq_s64(v36, (int64x2_t)vandq_s8(v41, v19));
        uint32x4_t v52 = vmovl_high_u16(v49);
        uint32x4_t v53 = vmovl_u16(*(uint16x4_t *)v50.i8);
        v41.i64[0] = v51.u32[0];
        v41.i64[1] = v51.u32[1];
        int64x2_t v35 = vaddq_s64(v35, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v53.u32[2];
        v41.i64[1] = v53.u32[3];
        int64x2_t v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v52.u32[2];
        v41.i64[1] = v52.u32[3];
        int64x2_t v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v53.u32[0];
        v41.i64[1] = v53.u32[1];
        int64x2_t v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v41, v19));
        uint32x4_t v54 = vmovl_u16(*(uint16x4_t *)v49.i8);
        v41.i64[0] = v52.u32[0];
        v41.i64[1] = v52.u32[1];
        int64x2_t v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v54.u32[2];
        v41.i64[1] = v54.u32[3];
        int64x2_t v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v41, v19));
        v41.i64[0] = v54.u32[0];
        v41.i64[1] = v54.u32[1];
        int64x2_t v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v41, v19));
        v23 -= 32;
      }
      while (v23);
      uint64_t v15 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v29, v17), vaddq_s64(v33, v25)), vaddq_s64(vaddq_s64(v31, v22), vaddq_s64(v35, v27))), vaddq_s64(vaddq_s64(vaddq_s64(v30, v20), vaddq_s64(v34, v26)), vaddq_s64(vaddq_s64(v32, v24), vaddq_s64(v36, v28)))));
      if (v9 == v14) {
        goto LABEL_30;
      }
      if ((v9 & 0x18) == 0)
      {
LABEL_26:
        size_t v71 = v9 - v14;
        int64_t v72 = &AttrData->u8[v14];
        do
        {
          int v73 = *v72++;
          if (v73 == 46) {
            ++v15;
          }
          --v71;
        }
        while (v71);
LABEL_30:
        BOOL v16 = v15 == 1;
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v15 = 0;
      unint64_t v14 = 0;
    }
    unint64_t v55 = v14;
    unint64_t v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    int64x2_t v56 = 0uLL;
    int64x2_t v57 = (int64x2_t)(unint64_t)v15;
    char v58 = (int8x8_t *)&AttrData->i8[v55];
    unint64_t v59 = v55 - (v9 & 0xFFFFFFFFFFFFFFF8);
    int8x16_t v60 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v61 = 0uLL;
    int64x2_t v62 = 0uLL;
    do
    {
      int8x8_t v63 = *v58++;
      uint16x8_t v64 = vmovl_u8((uint8x8_t)vceq_s8(v63, (int8x8_t)0x2E2E2E2E2E2E2E2ELL));
      uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)v64.i8);
      v66.i64[0] = v65.u32[0];
      v66.i64[1] = v65.u32[1];
      int64x2_t v67 = (int64x2_t)vandq_s8(v66, v60);
      v66.i64[0] = v65.u32[2];
      v66.i64[1] = v65.u32[3];
      int64x2_t v68 = (int64x2_t)vandq_s8(v66, v60);
      uint32x4_t v69 = vmovl_high_u16(v64);
      v66.i64[0] = v69.u32[0];
      v66.i64[1] = v69.u32[1];
      int64x2_t v70 = (int64x2_t)vandq_s8(v66, v60);
      v66.i64[0] = v69.u32[2];
      v66.i64[1] = v69.u32[3];
      int64x2_t v62 = vaddq_s64(v62, (int64x2_t)vandq_s8(v66, v60));
      int64x2_t v61 = vaddq_s64(v61, v70);
      int64x2_t v56 = vaddq_s64(v56, v68);
      int64x2_t v57 = vaddq_s64(v57, v67);
      v59 += 8;
    }
    while (v59);
    uint64_t v15 = vaddvq_s64(vaddq_s64(vaddq_s64(v57, v61), vaddq_s64(v56, v62)));
    if (v9 == v14) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  BOOL v16 = 0;
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v11);
LABEL_32:
  if (v9 >= a4 + 1) {
    size_t v74 = a4 + 1;
  }
  else {
    size_t v74 = v9;
  }
  uint64_t v75 = (int8x16_t *)((char *)AttrData + v74);
  size_t v76 = v9 - v74;
  if (v16)
  {
    uint64_t AttrData = v75;
    size_t v9 = v76;
  }
LABEL_37:
  __int16 v77 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t result = (llvm::raw_ostream *)*((void *)v77 + 4);
  if (v9 > *((void *)v77 + 3) - (void)result) {
    return llvm::raw_ostream::write(v77, AttrData->i8, v9);
  }
  if (v9)
  {
    uint64_t result = (llvm::raw_ostream *)memcpy(result, AttrData, v9);
    *((void *)v77 + 4) += v9;
  }
  return result;
}

mlir::Diagnostic *mlir::OpState::emitError@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return mlir::Operation::emitError(*a1, a2, a3);
}

void mlir::OpState::emitOpError(uint64_t **a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
}

BOOL mlir::OpTrait::impl::foldCommutative(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[0] = a2;
  v22[1] = a3;
  if ((*(unsigned char *)(a1 + 46) & 0x80) == 0) {
    return 0;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 68);
  if (v3 < 2) {
    return 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v21 = v6;
  uint64_t v7 = 32 * v3;
  size_t v8 = (uint64_t *)(v6 + v7);
  uint64_t v9 = v7;
  while (!*(void *)(a2 + (v5 >> 2)))
  {
    v5 += 32;
    v9 -= 32;
    if (!v9)
    {
      int v10 = (uint64_t *)(v6 + v7);
      return v10 != v8;
    }
  }
  v23[0] = v22;
  v23[1] = &v21;
  int v10 = (uint64_t *)(v6 + v5);
  if (v9)
  {
    uint64_t v11 = 0;
    for (uint64_t i = v5; !*(void *)(a2 + (i >> 2)); i += 32)
    {
      v11 += 32;
      if (v9 == v11) {
        return v10 != v8;
      }
    }
    uint64_t v13 = v9 - v11;
    size_t v8 = (uint64_t *)(v6 + v5 + v11);
    while (1)
    {
      v13 -= 32;
      if (!v13) {
        break;
      }
      v7 -= 32;
      if (!*(void *)(a2 + (v7 >> 2)))
      {
        uint64_t v14 = (v13 >> 5) + 1;
        uint64_t v15 = (uint64_t *)(v6 + v7);
        if (v13 < 65)
        {
LABEL_23:
          int64x2_t v20 = 0;
          unint64_t v16 = 0;
        }
        else
        {
          if (v14 >= 0x3FFFFFFFFFFFFFFLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = (v13 >> 5) + 1;
          }
          int64x2_t v17 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
          while (1)
          {
            int8x16_t v18 = (uint64_t *)operator new(32 * v16, v17);
            if (v18) {
              break;
            }
            BOOL v19 = v16 > 1;
            v16 >>= 1;
            if (!v19) {
              goto LABEL_23;
            }
          }
          int64x2_t v20 = v18;
        }
        size_t v8 = std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(v8, v15, v23, v14, v20, v16);
        if (v20) {
          operator delete(v20);
        }
        return v10 != v8;
      }
    }
  }
  return v10 != v8;
}

uint64_t mlir::OpTrait::impl::foldIdempotent(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  if ((*((unsigned char *)this + 46) & 0x80) == 0 || *((_DWORD *)this + 17) != 1)
  {
    uint64_t v4 = *((void *)this + 9);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5 != *(void *)(v4 + 56)) {
      return 0;
    }
    return v5 | 4;
  }
  uint64_t v6 = *(void *)(*((void *)this + 9) + 24);
  uint64_t result = mlir::Value::getDefiningOp((mlir::Value *)&v6);
  if (!result) {
    return result;
  }
  if (*((void *)this + 6) == *(void *)(result + 48))
  {
    uint64_t v5 = *(void *)(*((void *)this + 9) + 24);
    return v5 | 4;
  }
  return 0;
}

uint64_t mlir::OpTrait::impl::verifyZeroOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 46) & 0x80) == 0 || !*((_DWORD *)this + 17)) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires zero operands";
    uint64_t v22 = 22;
    int v2 = &v20;
    uint64_t v3 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v3 = (char *)v24;
        int v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        int v2 = &v20;
        uint64_t v3 = (char *)v24;
      }
    }
    uint64_t v4 = &v3[24 * v25];
    long long v5 = *(_OWORD *)v2;
    *((void *)v4 + 2) = *((void *)v2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
    ++v25;
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      size_t v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          size_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      int64x2_t v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      uint64_t v11 = v29;
      unint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        unint64_t v12 = v28;
      }
      int64x2_t v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneOperand(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 46) & 0x80) != 0 && *((_DWORD *)this + 17) == 1) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires a single operand";
    uint64_t v22 = 25;
    uint64_t v3 = &v20;
    uint64_t v4 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v4 = (char *)v24;
        uint64_t v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v3 = &v20;
        uint64_t v4 = (char *)v24;
      }
    }
    long long v5 = &v4[24 * v25];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v5 = v6;
    ++v25;
  }
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      size_t v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          size_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      int64x2_t v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      uint64_t v11 = v29;
      unint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          uint64_t v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        unint64_t v12 = v28;
      }
      int64x2_t v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2 = a2;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    if (*((_DWORD *)this + 17) == a2) {
      return 1;
    }
  }
  else if (!a2)
  {
    return 1;
  }
  __int16 v44 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v43, (uint64_t)v48);
  if (v48[0])
  {
    int v45 = 3;
    int64x2_t v46 = "expected ";
    uint64_t v47 = 9;
    long long v5 = &v45;
    long long v6 = (char *)v49;
    if (v50 >= v51)
    {
      unint64_t v33 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        int64_t v39 = (char *)&v45 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        long long v6 = (char *)v49;
        long long v5 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        long long v5 = &v45;
        long long v6 = (char *)v49;
      }
    }
    uint64_t v7 = &v6[24 * v50];
    long long v8 = *(_OWORD *)v5;
    *((void *)v7 + 2) = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    uint64_t v9 = ++v50;
    if (v48[0])
    {
      int v45 = 5;
      int64x2_t v46 = (const char *)v2;
      int v10 = &v45;
      uint64_t v11 = (char *)v49;
      if (v9 >= v51)
      {
        unint64_t v35 = v9 + 1;
        BOOL v36 = (char *)v49 + 24 * v9 > (char *)&v45;
        if (v49 <= &v45 && v36)
        {
          int64_t v41 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          uint64_t v11 = (char *)v49;
          int v10 = (int *)((char *)v49 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          int v10 = &v45;
          uint64_t v11 = (char *)v49;
        }
      }
      unint64_t v12 = &v11[24 * v50];
      long long v13 = *(_OWORD *)v10;
      *((void *)v12 + 2) = *((void *)v10 + 2);
      *(_OWORD *)unint64_t v12 = v13;
      uint64_t v14 = ++v50;
      if (v48[0])
      {
        int v45 = 3;
        int64x2_t v46 = " operands, but found ";
        uint64_t v47 = 21;
        uint64_t v15 = &v45;
        unint64_t v16 = (char *)v49;
        if (v14 >= v51)
        {
          unint64_t v37 = v14 + 1;
          BOOL v38 = (char *)v49 + 24 * v14 > (char *)&v45;
          if (v49 <= &v45 && v38)
          {
            int64_t v42 = (char *)&v45 - (unsigned char *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            unint64_t v16 = (char *)v49;
            uint64_t v15 = (int *)((char *)v49 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            uint64_t v15 = &v45;
            unint64_t v16 = (char *)v49;
          }
        }
        int64_t v17 = &v16[24 * v50];
        long long v18 = *(_OWORD *)v15;
        *((void *)v17 + 2) = *((void *)v15 + 2);
        *(_OWORD *)int64_t v17 = v18;
        ++v50;
      }
    }
  }
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    __int16 v19 = (const char *)*((unsigned int *)this + 17);
    if (v48[0])
    {
LABEL_14:
      int v45 = 5;
      int64x2_t v46 = v19;
      int v20 = &v45;
      uint64_t v21 = (char *)v49;
      if (v50 >= v51)
      {
        unint64_t v34 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          int64_t v40 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          uint64_t v21 = (char *)v49;
          int v20 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          int v20 = &v45;
          uint64_t v21 = (char *)v49;
        }
      }
      uint64_t v22 = &v21[24 * v50];
      long long v23 = *(_OWORD *)v20;
      *((void *)v22 + 2) = *((void *)v20 + 2);
      *(_OWORD *)uint64_t v22 = v23;
      ++v50;
    }
  }
  else
  {
    __int16 v19 = 0;
    if (v48[0]) {
      goto LABEL_14;
    }
  }
  uint64_t v4 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  }
  if (v57)
  {
    int64x2_t v24 = (void **)__p;
    if (__p)
    {
      unsigned int v25 = v56;
      unsigned int v26 = __p;
      if (v56 != __p)
      {
        do
          unsigned int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unsigned int v26 = __p;
      }
      int64x2_t v56 = v24;
      operator delete(v26);
    }
    int64x2_t v27 = v53;
    if (v53)
    {
      int64x2_t v28 = v54;
      int64x2_t v29 = v53;
      if (v54 != v53)
      {
        do
        {
          int64x2_t v31 = (void *)*--v28;
          int64x2_t v30 = v31;
          *int64x2_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        int64x2_t v29 = v53;
      }
      uint32x4_t v54 = v27;
      operator delete(v29);
    }
    if (v49 != v52) {
      free(v49);
    }
  }
  return v4;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  unsigned int v2 = a2;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    if (*((_DWORD *)this + 17) < a2) {
      goto LABEL_3;
    }
    return 1;
  }
  if (!a2) {
    return 1;
  }
LABEL_3:
  __int16 v44 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v43, (uint64_t)v48);
  if (v48[0])
  {
    int v45 = 3;
    int64x2_t v46 = "expected ";
    uint64_t v47 = 9;
    uint64_t v4 = &v45;
    long long v5 = (char *)v49;
    if (v50 >= v51)
    {
      unint64_t v33 = v50 + 1;
      if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
      {
        int64_t v39 = (char *)&v45 - (unsigned char *)v49;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        long long v5 = (char *)v49;
        uint64_t v4 = (int *)((char *)v49 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v33, 24);
        uint64_t v4 = &v45;
        long long v5 = (char *)v49;
      }
    }
    long long v6 = &v5[24 * v50];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)long long v6 = v7;
    uint64_t v8 = ++v50;
    if (v48[0])
    {
      int v45 = 5;
      int64x2_t v46 = (const char *)v2;
      uint64_t v9 = &v45;
      int v10 = (char *)v49;
      if (v8 >= v51)
      {
        unint64_t v35 = v8 + 1;
        BOOL v36 = (char *)v49 + 24 * v8 > (char *)&v45;
        if (v49 <= &v45 && v36)
        {
          int64_t v41 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          int v10 = (char *)v49;
          uint64_t v9 = (int *)((char *)v49 + v41);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v35, 24);
          uint64_t v9 = &v45;
          int v10 = (char *)v49;
        }
      }
      uint64_t v11 = &v10[24 * v50];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v50;
      if (v48[0])
      {
        int v45 = 3;
        int64x2_t v46 = " or more operands, but found ";
        uint64_t v47 = 29;
        uint64_t v14 = &v45;
        uint64_t v15 = (char *)v49;
        if (v13 >= v51)
        {
          unint64_t v37 = v13 + 1;
          BOOL v38 = (char *)v49 + 24 * v13 > (char *)&v45;
          if (v49 <= &v45 && v38)
          {
            int64_t v42 = (char *)&v45 - (unsigned char *)v49;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            uint64_t v15 = (char *)v49;
            uint64_t v14 = (int *)((char *)v49 + v42);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v37, 24);
            uint64_t v14 = &v45;
            uint64_t v15 = (char *)v49;
          }
        }
        unint64_t v16 = &v15[24 * v50];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        ++v50;
      }
    }
  }
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    long long v18 = (const char *)*((unsigned int *)this + 17);
    if (v48[0])
    {
LABEL_12:
      int v45 = 5;
      int64x2_t v46 = v18;
      __int16 v19 = &v45;
      int v20 = (char *)v49;
      if (v50 >= v51)
      {
        unint64_t v34 = v50 + 1;
        if (v49 <= &v45 && (char *)v49 + 24 * v50 > (char *)&v45)
        {
          int64_t v40 = (char *)&v45 - (unsigned char *)v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          int v20 = (char *)v49;
          __int16 v19 = (int *)((char *)v49 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, v52, v34, 24);
          __int16 v19 = &v45;
          int v20 = (char *)v49;
        }
      }
      uint64_t v21 = &v20[24 * v50];
      long long v22 = *(_OWORD *)v19;
      *((void *)v21 + 2) = *((void *)v19 + 2);
      *(_OWORD *)uint64_t v21 = v22;
      ++v50;
    }
  }
  else
  {
    long long v18 = 0;
    if (v48[0]) {
      goto LABEL_12;
    }
  }
  uint64_t v23 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v48);
  if (v48[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v48);
  }
  if (v57)
  {
    int64x2_t v24 = (void **)__p;
    if (__p)
    {
      unsigned int v25 = v56;
      unsigned int v26 = __p;
      if (v56 != __p)
      {
        do
          unsigned int v25 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v25 - 1);
        while (v25 != v24);
        unsigned int v26 = __p;
      }
      int64x2_t v56 = v24;
      operator delete(v26);
    }
    int64x2_t v27 = v53;
    if (v53)
    {
      int64x2_t v28 = v54;
      int64x2_t v29 = v53;
      if (v54 != v53)
      {
        do
        {
          int64x2_t v31 = (void *)*--v28;
          int64x2_t v30 = v31;
          *int64x2_t v28 = 0;
          if (v31) {
            operator delete[](v30);
          }
        }
        while (v28 != v27);
        int64x2_t v29 = v53;
      }
      uint32x4_t v54 = v27;
      operator delete(v29);
    }
    if (v49 != v52) {
      free(v49);
    }
  }
  return v23;
}

uint64_t mlir::OpTrait::impl::verifyIsIdempotent(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  return 1;
}

uint64_t mlir::OpTrait::impl::verifySameTypeOperands(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)this + 46) & 0x80) == 0) {
    return 1;
  }
  uint64_t v3 = (const void **)*((unsigned int *)this + 17);
  if (v3 < 2) {
    return 1;
  }
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 9) + 24) + 8);
  v25[0] = *((const void ***)this + 9);
  v25[1] = v3;
  mlir::OperandRange::getTypes((uint64_t *)v25, (uint64_t *)&v30);
  if (__PAIR128__(v31 + 1, v30) == v32) {
    return 1;
  }
  uint64_t v5 = *((void *)&v32 + 1) - v31 - 2;
  for (uint64_t i = v30 + 32 * v31 + 56;
        (*(void *)(*(void *)i + 8) & 0xFFFFFFFFFFFFFFF8) == (v4 & 0xFFFFFFFFFFFFFFF8);
        i += 32)
  {
    BOOL v8 = v5-- != 0;
    if (v30 == (void)v32 && !v8) {
      return 1;
    }
  }
  __int16 v26 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v25, (uint64_t)&v30);
  if (v30)
  {
    int v27 = 3;
    int64x2_t v28 = "requires all operands to have the same type";
    uint64_t v29 = 43;
    uint64_t v11 = &v27;
    uint64_t v12 = *((void *)&v32 + 1);
    if (v33 >= v34)
    {
      unint64_t v23 = v33 + 1;
      if (*((void *)&v32 + 1) <= (unint64_t)&v27
        && *((void *)&v32 + 1) + 24 * (unint64_t)v33 > (unint64_t)&v27)
      {
        int64x2_t v24 = (char *)&v27 - *((void *)&v32 + 1);
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32 + 8, v35, v23, 24);
        uint64_t v12 = *((void *)&v32 + 1);
        uint64_t v11 = (int *)&v24[*((void *)&v32 + 1)];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32 + 8, v35, v23, 24);
        uint64_t v11 = &v27;
        uint64_t v12 = *((void *)&v32 + 1);
      }
    }
    uint64_t v13 = v12 + 24 * v33;
    long long v14 = *(_OWORD *)v11;
    *(void *)(v13 + 16) = *((void *)v11 + 2);
    *(_OWORD *)uint64_t v13 = v14;
    ++v33;
  }
  uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v30);
  if (v30) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v30);
  }
  if (v40)
  {
    uint64_t v15 = (void **)__p;
    if (__p)
    {
      unint64_t v16 = v39;
      long long v17 = __p;
      if (v39 != __p)
      {
        do
          unint64_t v16 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v16 - 1);
        while (v16 != v15);
        long long v17 = __p;
      }
      int64_t v39 = v15;
      operator delete(v17);
    }
    long long v18 = v36;
    if (v36)
    {
      __int16 v19 = v37;
      int v20 = v36;
      if (v37 != v36)
      {
        do
        {
          long long v22 = (void *)*--v19;
          uint64_t v21 = v22;
          *__int16 v19 = 0;
          if (v22) {
            operator delete[](v21);
          }
        }
        while (v19 != v18);
        int v20 = v36;
      }
      unint64_t v37 = v18;
      operator delete(v20);
    }
    if (*((unsigned char **)&v32 + 1) != v35) {
      free(*((void **)&v32 + 1));
    }
  }
  return v9;
}

uint64_t mlir::OpTrait::impl::verifyZeroRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 0) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires zero regions";
    uint64_t v22 = 21;
    unsigned int v2 = &v20;
    uint64_t v3 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v3 = (char *)v24;
        unsigned int v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        unsigned int v2 = &v20;
        uint64_t v3 = (char *)v24;
      }
    }
    uint64_t v4 = &v3[24 * v25];
    long long v5 = *(_OWORD *)v2;
    *((void *)v4 + 2) = *((void *)v2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
    ++v25;
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    long long v7 = (void **)__p;
    if (__p)
    {
      BOOL v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      uint64_t v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      uint64_t v11 = v29;
      uint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v28;
      }
      uint64_t v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneRegion(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 1) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires one region";
    uint64_t v22 = 19;
    uint64_t v3 = &v20;
    uint64_t v4 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v4 = (char *)v24;
        uint64_t v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v3 = &v20;
        uint64_t v4 = (char *)v24;
      }
    }
    long long v5 = &v4[24 * v25];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v5 = v6;
    ++v25;
  }
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    long long v7 = (void **)__p;
    if (__p)
    {
      BOOL v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          BOOL v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      uint64_t v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      uint64_t v11 = v29;
      uint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *uint64_t v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v28;
      }
      uint64_t v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == a2) {
    return 1;
  }
  unsigned int v3 = a2;
  __int16 v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    int v37 = 3;
    BOOL v38 = "expected ";
    uint64_t v39 = 9;
    uint64_t v4 = &v37;
    long long v5 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v32 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        long long v5 = (char *)v41;
        uint64_t v4 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v4 = &v37;
        long long v5 = (char *)v41;
      }
    }
    long long v6 = &v5[24 * v42];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)long long v6 = v7;
    uint64_t v8 = ++v42;
    if (v40[0])
    {
      int v37 = 5;
      BOOL v38 = (const char *)v3;
      uint64_t v9 = &v37;
      int v10 = (char *)v41;
      if (v8 >= v43)
      {
        unint64_t v28 = v8 + 1;
        BOOL v29 = (char *)v41 + 24 * v8 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v33 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          int v10 = (char *)v41;
          uint64_t v9 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v9 = &v37;
          int v10 = (char *)v41;
        }
      }
      uint64_t v11 = &v10[24 * v42];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t v11 = v12;
      uint64_t v13 = ++v42;
      if (v40[0])
      {
        int v37 = 3;
        BOOL v38 = " regions";
        uint64_t v39 = 8;
        long long v14 = &v37;
        uint64_t v15 = (char *)v41;
        if (v13 >= v43)
        {
          unint64_t v30 = v13 + 1;
          BOOL v31 = (char *)v41 + 24 * v13 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            int64_t v34 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v15 = (char *)v41;
            long long v14 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            long long v14 = &v37;
            uint64_t v15 = (char *)v41;
          }
        }
        unint64_t v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    long long v18 = (void **)__p;
    if (__p)
    {
      __int16 v19 = v48;
      int v20 = __p;
      if (v48 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        int v20 = __p;
      }
      uint8x16_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          int64x2_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      int64x2_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNRegions(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)this + 11) & 0x7FFFFFu) >= a2) {
    return 1;
  }
  unsigned int v2 = a2;
  __int16 v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    int v37 = 3;
    BOOL v38 = "expected ";
    uint64_t v39 = 9;
    unsigned int v3 = &v37;
    uint64_t v4 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v32 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v4 = (char *)v41;
        unsigned int v3 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unsigned int v3 = &v37;
        uint64_t v4 = (char *)v41;
      }
    }
    long long v5 = &v4[24 * v42];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v5 = v6;
    uint64_t v7 = ++v42;
    if (v40[0])
    {
      int v37 = 5;
      BOOL v38 = (const char *)v2;
      uint64_t v8 = &v37;
      uint64_t v9 = (char *)v41;
      if (v7 >= v43)
      {
        unint64_t v28 = v7 + 1;
        BOOL v29 = (char *)v41 + 24 * v7 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v33 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v9 = (char *)v41;
          uint64_t v8 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v8 = &v37;
          uint64_t v9 = (char *)v41;
        }
      }
      int v10 = &v9[24 * v42];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)int v10 = v11;
      uint64_t v12 = ++v42;
      if (v40[0])
      {
        int v37 = 3;
        BOOL v38 = " or more regions";
        uint64_t v39 = 16;
        uint64_t v13 = &v37;
        long long v14 = (char *)v41;
        if (v12 >= v43)
        {
          unint64_t v30 = v12 + 1;
          BOOL v31 = (char *)v41 + 24 * v12 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            int64_t v34 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            long long v14 = (char *)v41;
            uint64_t v13 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v13 = &v37;
            long long v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    long long v18 = (void **)__p;
    if (__p)
    {
      __int16 v19 = v48;
      int v20 = __p;
      if (v48 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        int v20 = __p;
      }
      uint8x16_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          int64x2_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      int64x2_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifyZeroResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 9)) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires zero results";
    uint64_t v22 = 21;
    unsigned int v2 = &v20;
    unsigned int v3 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        unsigned int v3 = (char *)v24;
        unsigned int v2 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        unsigned int v2 = &v20;
        unsigned int v3 = (char *)v24;
      }
    }
    uint64_t v4 = &v3[24 * v25];
    long long v5 = *(_OWORD *)v2;
    *((void *)v4 + 2) = *((void *)v2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
    ++v25;
  }
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      BOOL v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      long long v11 = v29;
      uint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *long long v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v28;
      }
      BOOL v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyOneResult(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 9) == 1) {
    return 1;
  }
  __int16 v19 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v23);
  if (v23[0])
  {
    int v20 = 3;
    uint64_t v21 = "requires one result";
    uint64_t v22 = 19;
    unsigned int v3 = &v20;
    uint64_t v4 = (char *)v24;
    if (v25 >= v26)
    {
      unint64_t v16 = v25 + 1;
      if (v24 <= &v20 && (char *)v24 + 24 * v25 > (char *)&v20)
      {
        int64_t v17 = (char *)&v20 - (unsigned char *)v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        uint64_t v4 = (char *)v24;
        unsigned int v3 = (int *)((char *)v24 + v17);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, v27, v16, 24);
        unsigned int v3 = &v20;
        uint64_t v4 = (char *)v24;
      }
    }
    long long v5 = &v4[24 * v25];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v5 = v6;
    ++v25;
  }
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v23);
  if (v23[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v23);
  }
  if (v32)
  {
    uint64_t v7 = (void **)__p;
    if (__p)
    {
      uint64_t v8 = v31;
      uint64_t v9 = __p;
      if (v31 != __p)
      {
        do
          uint64_t v8 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v8 - 1);
        while (v8 != v7);
        uint64_t v9 = __p;
      }
      BOOL v31 = v7;
      operator delete(v9);
    }
    int v10 = v28;
    if (v28)
    {
      long long v11 = v29;
      uint64_t v12 = v28;
      if (v29 != v28)
      {
        do
        {
          long long v14 = (void *)*--v11;
          uint64_t v13 = v14;
          *long long v11 = 0;
          if (v14) {
            operator delete[](v13);
          }
        }
        while (v11 != v10);
        uint64_t v12 = v28;
      }
      BOOL v29 = v10;
      operator delete(v12);
    }
    if (v24 != v27) {
      free(v24);
    }
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyNResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 9) == a2) {
    return 1;
  }
  unsigned int v3 = a2;
  __int16 v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    int v37 = 3;
    BOOL v38 = "expected ";
    uint64_t v39 = 9;
    uint64_t v4 = &v37;
    long long v5 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v32 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        long long v5 = (char *)v41;
        uint64_t v4 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v4 = &v37;
        long long v5 = (char *)v41;
      }
    }
    long long v6 = &v5[24 * v42];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)long long v6 = v7;
    uint64_t v8 = ++v42;
    if (v40[0])
    {
      int v37 = 5;
      BOOL v38 = (const char *)v3;
      uint64_t v9 = &v37;
      int v10 = (char *)v41;
      if (v8 >= v43)
      {
        unint64_t v28 = v8 + 1;
        BOOL v29 = (char *)v41 + 24 * v8 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v33 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          int v10 = (char *)v41;
          uint64_t v9 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v9 = &v37;
          int v10 = (char *)v41;
        }
      }
      long long v11 = &v10[24 * v42];
      long long v12 = *(_OWORD *)v9;
      *((void *)v11 + 2) = *((void *)v9 + 2);
      *(_OWORD *)long long v11 = v12;
      uint64_t v13 = ++v42;
      if (v40[0])
      {
        int v37 = 3;
        BOOL v38 = " results";
        uint64_t v39 = 8;
        long long v14 = &v37;
        uint64_t v15 = (char *)v41;
        if (v13 >= v43)
        {
          unint64_t v30 = v13 + 1;
          BOOL v31 = (char *)v41 + 24 * v13 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            int64_t v34 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v15 = (char *)v41;
            long long v14 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            long long v14 = &v37;
            uint64_t v15 = (char *)v41;
          }
        }
        unint64_t v16 = &v15[24 * v42];
        long long v17 = *(_OWORD *)v14;
        *((void *)v16 + 2) = *((void *)v14 + 2);
        *(_OWORD *)unint64_t v16 = v17;
        ++v42;
      }
    }
  }
  uint64_t v2 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    long long v18 = (void **)__p;
    if (__p)
    {
      __int16 v19 = v48;
      int v20 = __p;
      if (v48 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        int v20 = __p;
      }
      uint8x16_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          int64x2_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      int64x2_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v2;
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNResults(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 9) >= a2) {
    return 1;
  }
  unsigned int v2 = a2;
  __int16 v36 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v35, (uint64_t)v40);
  if (v40[0])
  {
    int v37 = 3;
    BOOL v38 = "expected ";
    uint64_t v39 = 9;
    unsigned int v3 = &v37;
    uint64_t v4 = (char *)v41;
    if (v42 >= v43)
    {
      unint64_t v27 = v42 + 1;
      if (v41 <= &v37 && (char *)v41 + 24 * v42 > (char *)&v37)
      {
        int64_t v32 = (char *)&v37 - (unsigned char *)v41;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        uint64_t v4 = (char *)v41;
        unsigned int v3 = (int *)((char *)v41 + v32);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v27, 24);
        unsigned int v3 = &v37;
        uint64_t v4 = (char *)v41;
      }
    }
    long long v5 = &v4[24 * v42];
    long long v6 = *(_OWORD *)v3;
    *((void *)v5 + 2) = *((void *)v3 + 2);
    *(_OWORD *)long long v5 = v6;
    uint64_t v7 = ++v42;
    if (v40[0])
    {
      int v37 = 5;
      BOOL v38 = (const char *)v2;
      uint64_t v8 = &v37;
      uint64_t v9 = (char *)v41;
      if (v7 >= v43)
      {
        unint64_t v28 = v7 + 1;
        BOOL v29 = (char *)v41 + 24 * v7 > (char *)&v37;
        if (v41 <= &v37 && v29)
        {
          int64_t v33 = (char *)&v37 - (unsigned char *)v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v9 = (char *)v41;
          uint64_t v8 = (int *)((char *)v41 + v33);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v28, 24);
          uint64_t v8 = &v37;
          uint64_t v9 = (char *)v41;
        }
      }
      int v10 = &v9[24 * v42];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)int v10 = v11;
      uint64_t v12 = ++v42;
      if (v40[0])
      {
        int v37 = 3;
        BOOL v38 = " or more results";
        uint64_t v39 = 16;
        uint64_t v13 = &v37;
        long long v14 = (char *)v41;
        if (v12 >= v43)
        {
          unint64_t v30 = v12 + 1;
          BOOL v31 = (char *)v41 + 24 * v12 > (char *)&v37;
          if (v41 <= &v37 && v31)
          {
            int64_t v34 = (char *)&v37 - (unsigned char *)v41;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            long long v14 = (char *)v41;
            uint64_t v13 = (int *)((char *)v41 + v34);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, v44, v30, 24);
            uint64_t v13 = &v37;
            long long v14 = (char *)v41;
          }
        }
        uint64_t v15 = &v14[24 * v42];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = *((void *)v13 + 2);
        *(_OWORD *)uint64_t v15 = v16;
        ++v42;
      }
    }
  }
  uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v40);
  if (v40[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v40);
  }
  if (v49)
  {
    long long v18 = (void **)__p;
    if (__p)
    {
      __int16 v19 = v48;
      int v20 = __p;
      if (v48 != __p)
      {
        do
          __int16 v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
        while (v19 != v18);
        int v20 = __p;
      }
      uint8x16_t v48 = v18;
      operator delete(v20);
    }
    uint64_t v21 = v45;
    if (v45)
    {
      uint64_t v22 = v46;
      unint64_t v23 = v45;
      if (v46 != v45)
      {
        do
        {
          unsigned int v25 = (void *)*--v22;
          int64x2_t v24 = v25;
          *uint64_t v22 = 0;
          if (v25) {
            operator delete[](v24);
          }
        }
        while (v22 != v21);
        unint64_t v23 = v45;
      }
      int64x2_t v46 = v21;
      operator delete(v23);
    }
    if (v41 != v44) {
      free(v41);
    }
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsShape(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)) {
    return 0;
  }
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v3 = *((void *)this + 9);
    unint64_t v4 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
  }
  uint64_t v29 = v3;
  unint64_t v30 = v4;
  mlir::OperandRange::getTypes(&v29, &v23);
  mlir::ValueRange::ValueRange((unint64_t *)&v29, v23 + 32 * v24, v25 - v24);
  mlir::TypeRange::TypeRange(v40, v29, v30);
  if (mlir::verifyCompatibleShapes(v40[0], v40[1])) {
    return 1;
  }
  __int16 v22 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, &v21, (uint64_t)&v29);
  if (v29)
  {
    int v26 = 3;
    unint64_t v27 = "requires the same shape for all operands";
    uint64_t v28 = 40;
    uint64_t v7 = &v26;
    uint64_t v8 = (char *)v31;
    if (v32 >= v33)
    {
      unint64_t v19 = v32 + 1;
      if (v31 <= &v26 && (char *)v31 + 24 * v32 > (char *)&v26)
      {
        int64_t v20 = (char *)&v26 - (unsigned char *)v31;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v19, 24);
        uint64_t v8 = (char *)v31;
        uint64_t v7 = (int *)((char *)v31 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, v34, v19, 24);
        uint64_t v7 = &v26;
        uint64_t v8 = (char *)v31;
      }
    }
    uint64_t v9 = &v8[24 * v32];
    long long v10 = *(_OWORD *)v7;
    *((void *)v9 + 2) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v9 = v10;
    ++v32;
  }
  uint64_t v5 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v29);
  if (v29) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v29);
  }
  if (v39)
  {
    long long v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v38;
      uint64_t v13 = __p;
      if (v38 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      BOOL v38 = v11;
      operator delete(v13);
    }
    long long v14 = v35;
    if (v35)
    {
      uint64_t v15 = v36;
      long long v16 = v35;
      if (v36 != v35)
      {
        do
        {
          long long v18 = (void *)*--v15;
          uint64_t v17 = v18;
          *uint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        long long v16 = v35;
      }
      __int16 v36 = v14;
      operator delete(v16);
    }
    if (v31 != v34) {
      free(v31);
    }
  }
  return v5;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultShape(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  v72[8] = *MEMORY[0x1E4F143B8];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v3 = (char *)*((void *)this + 9);
    uint64_t v4 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  int64x2_t v70 = v3;
  uint64_t v71 = v4;
  mlir::OperandRange::getTypes((uint64_t *)&v70, (uint64_t *)&__src);
  int64x2_t v70 = (char *)v72;
  uint64_t v71 = 0x800000000;
  uint64_t v5 = (char *)__src;
  uint64_t v6 = v58;
  uint64_t v8 = v59;
  uint64_t v7 = (char *)v60;
  int v9 = v60 - v58;
  if ((char *)v60 - v58 >= (char *)9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, (unint64_t)v60 - v58, 8);
    int v10 = v71;
    BOOL v11 = v5 != v8;
    uint64_t v12 = &v7[-v6];
    if (v7 != (char *)v6) {
      goto LABEL_12;
    }
LABEL_11:
    if (!v11) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  int v10 = 0;
  BOOL v11 = __src != v59;
  uint64_t v12 = (char *)v60 - v58;
  if (v60 == (void *)v58) {
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v15 = (unint64_t *)&v70[8 * v10];
  if (v11)
  {
    for (uint64_t i = &v5[32 * v6 + 24]; ; i += 32)
    {
      uint64_t v17 = *(void *)i;
      *v15++ = *(void *)(v17 + 8) & 0xFFFFFFFFFFFFFFF8;
    }
  }
  long long v18 = &v5[32 * v6 + 24];
  do
  {
    uint64_t v19 = *(void *)v18;
    v18 += 32;
    *v15++ = *(void *)(v19 + 8) & 0xFFFFFFFFFFFFFFF8;
    --v12;
  }
  while (v12);
  int v10 = v71;
LABEL_18:
  LODWORD(v71) = v10 + v9;
  uint64_t v20 = *((unsigned int *)this + 9);
  uint64_t v21 = (char *)this - 16;
  if (!v20) {
    uint64_t v21 = 0;
  }
  __src = v21;
  uint64_t v58 = v20;
  mlir::OperandRange::getTypes((uint64_t *)&__src, (uint64_t *)&v49);
  __int16 v22 = v49;
  uint64_t v23 = v50;
  uint64_t v25 = v51;
  uint64_t v24 = v52;
  __src = &v59;
  uint64_t v58 = 0x400000000;
  int v26 = v52 - v50;
  if ((unint64_t)(v52 - v50) < 5)
  {
    int v27 = 0;
    uint64_t v28 = (void **)&v59;
    BOOL v29 = v49 != v51;
    if (v52 != v50) {
      goto LABEL_35;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, &v59, v52 - v50, 8);
    int v27 = v58;
    uint64_t v28 = (void **)__src;
    BOOL v29 = v22 != v25;
    if (v24 != v23)
    {
LABEL_35:
      int64_t v34 = (unint64_t *)&v28[v27];
      if (v29)
      {
        while (1)
          *v34++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v22, v23++) + 8) & 0xFFFFFFFFFFFFFFF8;
      }
      do
        *v34++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v22, v23++) + 8) & 0xFFFFFFFFFFFFFFF8;
      while (v24 != v23);
      uint64_t v28 = (void **)__src;
      LODWORD(v58) = v58 + v26;
      LODWORD(v30) = v58;
      int v31 = v71;
      unint64_t v32 = v71 + (unint64_t)v58;
      if (v32 <= HIDWORD(v71)) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
  }
  if (v29) {
    goto LABEL_35;
  }
  uint64_t v30 = (v27 + v26);
  LODWORD(v58) = v27 + v26;
  int v31 = v71;
  unint64_t v32 = v71 + v30;
  if (v32 > HIDWORD(v71))
  {
LABEL_26:
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v70, v72, v32, 8);
    int v31 = v71;
  }
LABEL_27:
  if (v30)
  {
    memcpy(&v70[8 * v31], v28, 8 * v30);
    int v31 = v71;
  }
  unsigned int v33 = v31 + v30;
  LODWORD(v71) = v33;
  if (__src != &v59)
  {
    free(__src);
    unsigned int v33 = v71;
  }
  mlir::ValueRange::ValueRange(v69, (uint64_t)v70, v33);
  if (mlir::verifyCompatibleShapes(v69[0], v69[1]))
  {
    uint64_t v13 = 1;
  }
  else
  {
    __int16 v53 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, &v49, (uint64_t)&__src);
    if (__src)
    {
      int v54 = 3;
      unint64_t v55 = "requires the same shape for all operands and results";
      uint64_t v56 = 52;
      unint64_t v35 = &v54;
      __int16 v36 = (char *)v60;
      if (v61 >= v62)
      {
        unint64_t v47 = v61 + 1;
        if (v60 <= &v54 && (char *)v60 + 24 * v61 > (char *)&v54)
        {
          int64_t v48 = (char *)&v54 - (unsigned char *)v60;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          __int16 v36 = (char *)v60;
          unint64_t v35 = (int *)((char *)v60 + v48);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, v63, v47, 24);
          unint64_t v35 = &v54;
          __int16 v36 = (char *)v60;
        }
      }
      int v37 = &v36[24 * v61];
      long long v38 = *(_OWORD *)v35;
      *((void *)v37 + 2) = *((void *)v35 + 2);
      *(_OWORD *)int v37 = v38;
      ++v61;
    }
    uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&__src);
    if (__src) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&__src);
    }
    if (v68)
    {
      char v39 = (void **)__p;
      if (__p)
      {
        char v40 = v67;
        uint64_t v41 = __p;
        if (v67 != __p)
        {
          do
            char v40 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v40 - 1);
          while (v40 != v39);
          uint64_t v41 = __p;
        }
        int64x2_t v67 = v39;
        operator delete(v41);
      }
      unsigned int v42 = v64;
      if (v64)
      {
        unsigned int v43 = v65;
        __int16 v44 = v64;
        if (v65 != v64)
        {
          do
          {
            int64x2_t v46 = (void *)*--v43;
            int v45 = v46;
            *unsigned int v43 = 0;
            if (v46) {
              operator delete[](v45);
            }
          }
          while (v43 != v42);
          __int16 v44 = v64;
        }
        uint32x4_t v65 = v42;
        operator delete(v44);
      }
      if (v60 != v63) {
        free(v60);
      }
    }
  }
  if (v70 != (char *)v72) {
    free(v70);
  }
  return v13;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsElementType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(*(void *)(*((void *)this + 9) + 24));
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v4 = *((unsigned int *)this + 17);
    if (v4 == 1) {
      return 1;
    }
    uint64_t v5 = *((void *)this + 9);
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v6 = (uint64_t *)(v5 + 56);
  uint64_t v7 = v4 - 1;
  while (mlir::getElementTypeOrSelf(*v6) == ElementTypeOrSelf)
  {
    v6 += 4;
    if (!--v7) {
      return 1;
    }
  }
  long long v18 = (const void **)"requires the same element type for all operands";
  __int16 v19 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v18, (uint64_t)v20);
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v20);
  if (v20[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v20);
  }
  if (v27)
  {
    int v10 = (void **)__p;
    if (__p)
    {
      BOOL v11 = v26;
      uint64_t v12 = __p;
      if (v26 != __p)
      {
        do
          BOOL v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        uint64_t v12 = __p;
      }
      int v26 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v23;
    if (v23)
    {
      long long v14 = v24;
      uint64_t v15 = v23;
      if (v24 != v23)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          long long v16 = v17;
          *long long v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v23;
      }
      uint64_t v24 = v13;
      operator delete(v15);
    }
    if (v21 != &v22) {
      free(v21);
    }
  }
  return v8;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultElementType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  uint64_t v3 = (char *)this - 16;
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf((uint64_t)this - 16);
  uint64_t v5 = *((unsigned int *)this + 9);
  if (!v5) {
    uint64_t v3 = 0;
  }
  if (v5 != 1)
  {
    uint64_t v6 = 1;
    while (1)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v3, v6);
      if (mlir::getElementTypeOrSelf(NextResultAtOffset) != ElementTypeOrSelf) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_9;
      }
    }
    v29[0] = (const void **)"requires the same element type for all operands and results";
    __int16 v30 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v29, (uint64_t)v31);
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
    if (v31[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
    }
    if (!v38) {
      return v10;
    }
    uint64_t v12 = (void **)__p;
    if (__p)
    {
      uint64_t v13 = v37;
      long long v14 = __p;
      if (v37 != __p)
      {
        do
          uint64_t v13 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v13 - 1);
        while (v13 != v12);
        long long v14 = __p;
      }
      int v37 = v12;
      operator delete(v14);
    }
    uint64_t v15 = v34;
    if (v34)
    {
      long long v16 = v35;
      uint64_t v17 = v34;
      if (v35 != v34)
      {
        do
        {
          __int16 v19 = (void *)*--v16;
          long long v18 = v19;
          *long long v16 = 0;
          if (v19) {
            operator delete[](v18);
          }
        }
        while (v16 != v15);
        uint64_t v17 = v34;
      }
      unint64_t v35 = v15;
      operator delete(v17);
    }
    uint64_t v28 = v32;
    if (v32 == v33) {
      return v10;
    }
LABEL_52:
    free(v28);
    return v10;
  }
LABEL_9:
  if ((*((unsigned char *)this + 46) & 0x80) == 0) {
    return 1;
  }
  uint64_t v8 = *((unsigned int *)this + 17);
  if (!v8) {
    return 1;
  }
  for (uint64_t i = (uint64_t *)(*((void *)this + 9) + 24); mlir::getElementTypeOrSelf(*i) == ElementTypeOrSelf; i += 4)
  {
    if (!--v8) {
      return 1;
    }
  }
  v29[0] = (const void **)"requires the same element type for all operands and results";
  __int16 v30 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, v29, (uint64_t)v31);
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v31);
  if (v31[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v31);
  }
  if (v38)
  {
    uint64_t v20 = (void **)__p;
    if (__p)
    {
      uint64_t v21 = v37;
      uint64_t v22 = __p;
      if (v37 != __p)
      {
        do
          uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
        while (v21 != v20);
        uint64_t v22 = __p;
      }
      int v37 = v20;
      operator delete(v22);
    }
    uint64_t v23 = v34;
    if (v34)
    {
      uint64_t v24 = v35;
      uint64_t v25 = v34;
      if (v35 != v34)
      {
        do
        {
          char v27 = (void *)*--v24;
          int v26 = v27;
          *uint64_t v24 = 0;
          if (v27) {
            operator delete[](v26);
          }
        }
        while (v24 != v23);
        uint64_t v25 = v34;
      }
      unint64_t v35 = v23;
      operator delete(v25);
    }
    uint64_t v28 = v32;
    if (v32 != v33) {
      goto LABEL_52;
    }
  }
  return v10;
}

uint64_t mlir::OpTrait::impl::verifySameOperandsAndResultType(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(this, (mlir::Operation *)1)
    || !mlir::OpTrait::impl::verifyAtLeastNResults(this, (mlir::Operation *)1))
  {
    return 0;
  }
  uint64_t v3 = (void *)(*((void *)this - 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t ElementTypeOrSelf = mlir::getElementTypeOrSelf(v3);
  if (*(_UNKNOWN **)(*v3 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id) {
    uint64_t v5 = (uint64_t)v3;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v91 = v5;
  if (v5) {
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v91);
  }
  else {
    uint64_t Values = 0;
  }
  uint64_t v8 = (const void **)*((unsigned int *)this + 9);
  if (v8) {
    int v9 = (const void **)((char *)this - 16);
  }
  else {
    int v9 = 0;
  }
  v86[0] = v9;
  v86[1] = v8;
  mlir::OperandRange::getTypes((uint64_t *)v86, &v91);
  uint64_t v10 = v91;
  uint64_t v12 = v93;
  BOOL v11 = (char *)v94;
  if (v91 != v93 || (void *)(v92 + 1) != v94)
  {
    uint64_t v13 = (char *)(v92 + 2);
    while (1)
    {
      long long v14 = v13;
      uint64_t v15 = (void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v10, (uint64_t)(v13 - 1)) + 8) & 0xFFFFFFFFFFFFFFF8);
      if (mlir::getElementTypeOrSelf(v15) != ElementTypeOrSelf || !mlir::verifyCompatibleShape(v15, v3))
      {
        __int16 v87 = 257;
        mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
        if (v91)
        {
          LODWORD(v82) = 3;
          int v83 = "requires the same type for all operands and results";
          uint64_t v84 = 51;
          char v27 = &v82;
          uint64_t v28 = (char *)v94;
          if (v95 >= v96)
          {
            unint64_t v73 = v95 + 1;
            if (v94 <= &v82 && (char *)v94 + 24 * v95 > (char *)&v82)
            {
              int64_t v77 = (char *)&v82 - (unsigned char *)v94;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v73, 24);
              uint64_t v28 = (char *)v94;
              char v27 = (uint64_t *)((char *)v94 + v77);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v73, 24);
              char v27 = &v82;
              uint64_t v28 = (char *)v94;
            }
          }
          BOOL v29 = &v28[24 * v95];
          long long v30 = *(_OWORD *)v27;
          *((void *)v29 + 2) = v27[2];
          *(_OWORD *)BOOL v29 = v30;
          ++v95;
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
        if (v91) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
        }
        if (!v102) {
          return v7;
        }
        int v31 = (void **)__p;
        if (__p)
        {
          unint64_t v32 = v101;
          unsigned int v33 = __p;
          if (v101 != __p)
          {
            do
              unint64_t v32 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v32 - 1);
            while (v32 != v31);
            unsigned int v33 = __p;
          }
          uint64_t v101 = v31;
          operator delete(v33);
        }
        int64_t v34 = v98;
        if (!v98) {
          goto LABEL_79;
        }
        unint64_t v35 = v99;
        __int16 v36 = v98;
        if (v99 == v98) {
          goto LABEL_78;
        }
        do
        {
          char v38 = (void *)*--v35;
          int v37 = v38;
          *unint64_t v35 = 0;
          if (v38) {
            operator delete[](v37);
          }
        }
        while (v35 != v34);
        goto LABEL_77;
      }
      if (Values)
      {
        long long v16 = *(_UNKNOWN **)(*v15 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id ? v15 : 0;
        char v88 = v16;
        if (Values != mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v88)) {
          break;
        }
      }
      uint64_t v13 = v14 + 1;
      if (v10 == v12 && v11 == v14) {
        goto LABEL_25;
      }
    }
    __int16 v87 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
    if (v91)
    {
      LODWORD(v82) = 3;
      int v83 = "requires the same encoding for all operands and results";
      uint64_t v84 = 55;
      uint64_t v50 = &v82;
      unsigned int v51 = (char *)v94;
      if (v95 >= v96)
      {
        unint64_t v75 = v95 + 1;
        if (v94 <= &v82 && (char *)v94 + 24 * v95 > (char *)&v82)
        {
          int64_t v79 = (char *)&v82 - (unsigned char *)v94;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v75, 24);
          unsigned int v51 = (char *)v94;
          uint64_t v50 = (uint64_t *)((char *)v94 + v79);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v75, 24);
          uint64_t v50 = &v82;
          unsigned int v51 = (char *)v94;
        }
      }
      uint64_t v52 = &v51[24 * v95];
      long long v53 = *(_OWORD *)v50;
      *((void *)v52 + 2) = v50[2];
      *(_OWORD *)uint64_t v52 = v53;
      ++v95;
    }
    uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
    if (v91) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
    }
    if (!v102) {
      return v7;
    }
    int v54 = (void **)__p;
    if (__p)
    {
      unint64_t v55 = v101;
      uint64_t v56 = __p;
      if (v101 != __p)
      {
        do
          unint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
        while (v55 != v54);
        uint64_t v56 = __p;
      }
      uint64_t v101 = v54;
      operator delete(v56);
    }
    char v57 = v98;
    if (v98)
    {
      uint64_t v58 = v99;
      unint64_t v59 = v98;
      if (v99 != v98)
      {
        do
        {
          unsigned int v61 = (void *)*--v58;
          int8x16_t v60 = v61;
          *uint64_t v58 = 0;
          if (v61) {
            operator delete[](v60);
          }
        }
        while (v58 != v57);
LABEL_115:
        unint64_t v59 = v98;
      }
LABEL_116:
      unint64_t v99 = v57;
      operator delete(v59);
    }
LABEL_117:
    char v49 = v94;
    if (v94 == v97) {
      return v7;
    }
    goto LABEL_118;
  }
LABEL_25:
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
    uint64_t v17 = *((void *)this + 9);
    uint64_t v18 = *((unsigned int *)this + 17);
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v91 = v17;
  uint64_t v92 = v18;
  mlir::OperandRange::getTypes(&v91, &v82);
  uint64_t v19 = v82;
  uint64_t v20 = v84;
  if (v82 == v84 && v83 == v85) {
    return 1;
  }
  uint64_t v21 = v82 + 32 * (void)v83 + 24;
  uint64_t v22 = &v85[~(unint64_t)v83];
  while (1)
  {
    uint64_t v23 = (void *)(*(void *)(*(void *)v21 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (mlir::getElementTypeOrSelf(v23) != ElementTypeOrSelf || !mlir::verifyCompatibleShape(v23, v3)) {
      break;
    }
    if (Values)
    {
      uint64_t v24 = *(_UNKNOWN **)(*v23 + 136) == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id ? v23 : 0;
      std::string v81 = v24;
      if (Values != mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v81))
      {
        __int16 v87 = 257;
        mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
        if (v91)
        {
          LODWORD(v88) = 3;
          uint64_t v89 = "requires the same encoding for all operands and results";
          uint64_t v90 = 55;
          unsigned int v62 = (char *)&v88;
          int8x8_t v63 = (char *)v94;
          if (v95 >= v96)
          {
            unint64_t v76 = v95 + 1;
            if (v94 <= &v88 && (char *)v94 + 24 * v95 > (char *)&v88)
            {
              int64_t v80 = (char *)&v88 - (unsigned char *)v94;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v76, 24);
              int8x8_t v63 = (char *)v94;
              unsigned int v62 = (char *)v94 + v80;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v76, 24);
              unsigned int v62 = (char *)&v88;
              int8x8_t v63 = (char *)v94;
            }
          }
          uint16x8_t v64 = &v63[24 * v95];
          long long v65 = *(_OWORD *)v62;
          *((void *)v64 + 2) = *((void *)v62 + 2);
          *(_OWORD *)uint16x8_t v64 = v65;
          ++v95;
        }
        uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
        if (v91) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
        }
        if (!v102) {
          return v7;
        }
        int8x16_t v66 = (void **)__p;
        if (__p)
        {
          int64x2_t v67 = v101;
          char v68 = __p;
          if (v101 != __p)
          {
            do
              int64x2_t v67 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v67 - 1);
            while (v67 != v66);
            char v68 = __p;
          }
          uint64_t v101 = v66;
          operator delete(v68);
        }
        char v57 = v98;
        if (!v98) {
          goto LABEL_117;
        }
        uint32x4_t v69 = v99;
        unint64_t v59 = v98;
        if (v99 == v98) {
          goto LABEL_116;
        }
        do
        {
          uint64_t v71 = (void *)*--v69;
          int64x2_t v70 = v71;
          *uint32x4_t v69 = 0;
          if (v71) {
            operator delete[](v70);
          }
        }
        while (v69 != v57);
        goto LABEL_115;
      }
    }
    BOOL v26 = v22-- != 0;
    v21 += 32;
    if (v19 == v20 && !v26) {
      return 1;
    }
  }
  __int16 v87 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v86, (uint64_t)&v91);
  if (v91)
  {
    LODWORD(v88) = 3;
    uint64_t v89 = "requires the same type for all operands and results";
    uint64_t v90 = 51;
    uint64_t v39 = (char *)&v88;
    char v40 = (char *)v94;
    if (v95 >= v96)
    {
      unint64_t v74 = v95 + 1;
      if (v94 <= &v88 && (char *)v94 + 24 * v95 > (char *)&v88)
      {
        int64_t v78 = (char *)&v88 - (unsigned char *)v94;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v74, 24);
        char v40 = (char *)v94;
        uint64_t v39 = (char *)v94 + v78;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v94, v97, v74, 24);
        uint64_t v39 = (char *)&v88;
        char v40 = (char *)v94;
      }
    }
    uint64_t v41 = &v40[24 * v95];
    long long v42 = *(_OWORD *)v39;
    *((void *)v41 + 2) = *((void *)v39 + 2);
    *(_OWORD *)uint64_t v41 = v42;
    ++v95;
  }
  uint64_t v7 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v91);
  if (v91) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v91);
  }
  if (!v102) {
    return v7;
  }
  unsigned int v43 = (void **)__p;
  if (__p)
  {
    __int16 v44 = v101;
    int v45 = __p;
    if (v101 != __p)
    {
      do
        __int16 v44 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v44 - 1);
      while (v44 != v43);
      int v45 = __p;
    }
    uint64_t v101 = v43;
    operator delete(v45);
  }
  int64_t v34 = v98;
  if (!v98) {
    goto LABEL_79;
  }
  int64x2_t v46 = v99;
  __int16 v36 = v98;
  if (v99 == v98) {
    goto LABEL_78;
  }
  do
  {
    int64_t v48 = (void *)*--v46;
    unint64_t v47 = v48;
    void *v46 = 0;
    if (v48) {
      operator delete[](v47);
    }
  }
  while (v46 != v34);
LABEL_77:
  __int16 v36 = v98;
LABEL_78:
  unint64_t v99 = v34;
  operator delete(v36);
LABEL_79:
  char v49 = v94;
  if (v94 != v97) {
LABEL_118:
  }
    free(v49);
  return v7;
}

uint64_t mlir::OpTrait::impl::verifyIsTerminator(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *(mlir::OpTrait::impl **)(v2 + 32) == this) {
    return 1;
  }
  uint64_t v13 = (const void **)"must be the last operation in the parent block";
  __int16 v14 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v13, (uint64_t)v15);
  uint64_t v3 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v15);
  if (v15[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v15);
  }
  if (v22)
  {
    uint64_t v4 = (void **)__p;
    if (__p)
    {
      uint64_t v5 = v21;
      uint64_t v6 = __p;
      if (v21 != __p)
      {
        do
          uint64_t v5 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v5 - 1);
        while (v5 != v4);
        uint64_t v6 = __p;
      }
      uint64_t v21 = v4;
      operator delete(v6);
    }
    uint64_t v7 = v18;
    if (v18)
    {
      uint64_t v8 = v19;
      int v9 = v18;
      if (v19 != v18)
      {
        do
        {
          BOOL v11 = (void *)*--v8;
          uint64_t v10 = v11;
          void *v8 = 0;
          if (v11) {
            operator delete[](v10);
          }
        }
        while (v8 != v7);
        int v9 = v18;
      }
      uint64_t v19 = v7;
      operator delete(v9);
    }
    if (v16 != &v17) {
      free(v16);
    }
  }
  return v3;
}

uint64_t mlir::OpTrait::impl::verifyZeroSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 10)) {
    return 1;
  }
  uint64_t v20 = (const void **)"requires 0 successors but found ";
  __int16 v21 = 259;
  mlir::Operation::emitOpError((uint64_t *)this, &v20, (uint64_t)v24);
  if (v24[0])
  {
    uint64_t v3 = *((unsigned int *)this + 10);
    int v22 = 5;
    uint64_t v23 = v3;
    uint64_t v4 = &v22;
    uint64_t v5 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v18 = v26 + 1;
      if (v25 <= &v22 && (char *)v25 + 24 * v26 > (char *)&v22)
      {
        int64_t v19 = (char *)&v22 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        uint64_t v5 = (char *)v25;
        uint64_t v4 = (int *)((char *)v25 + v19);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
        uint64_t v4 = &v22;
        uint64_t v5 = (char *)v25;
      }
    }
    uint64_t v6 = &v5[24 * v26];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = *((void *)v4 + 2);
    *(_OWORD *)uint64_t v6 = v7;
    ++v26;
  }
  uint64_t v8 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
  if (v24[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
  }
  if (v33)
  {
    int v9 = (void **)__p;
    if (__p)
    {
      uint64_t v10 = v32;
      BOOL v11 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v10 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v10 - 1);
        while (v10 != v9);
        BOOL v11 = __p;
      }
      unint64_t v32 = v9;
      operator delete(v11);
    }
    uint64_t v12 = v29;
    if (v29)
    {
      uint64_t v13 = v30;
      __int16 v14 = v29;
      if (v30 != v29)
      {
        do
        {
          long long v16 = (void *)*--v13;
          uint64_t v15 = v16;
          *uint64_t v13 = 0;
          if (v16) {
            operator delete[](v15);
          }
        }
        while (v13 != v12);
        __int16 v14 = v29;
      }
      long long v30 = v12;
      operator delete(v14);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return v8;
}

uint64_t mlir::OpTrait::impl::verifyOneSuccessor(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 10) == 1)
  {
    return verifyTerminatorSuccessors(this);
  }
  else
  {
    uint64_t v20 = (const void **)"requires 1 successor but found ";
    __int16 v21 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v20, (uint64_t)v24);
    if (v24[0])
    {
      uint64_t v4 = *((unsigned int *)this + 10);
      int v22 = 5;
      uint64_t v23 = v4;
      uint64_t v5 = &v22;
      uint64_t v6 = (char *)v25;
      if (v26 >= v27)
      {
        unint64_t v18 = v26 + 1;
        if (v25 <= &v22 && (char *)v25 + 24 * v26 > (char *)&v22)
        {
          int64_t v19 = (char *)&v22 - (unsigned char *)v25;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
          uint64_t v6 = (char *)v25;
          uint64_t v5 = (int *)((char *)v25 + v19);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v18, 24);
          uint64_t v5 = &v22;
          uint64_t v6 = (char *)v25;
        }
      }
      long long v7 = &v6[24 * v26];
      long long v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = *((void *)v5 + 2);
      *(_OWORD *)long long v7 = v8;
      ++v26;
    }
    uint64_t v9 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v24);
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
    if (v33)
    {
      uint64_t v10 = (void **)__p;
      if (__p)
      {
        BOOL v11 = v32;
        uint64_t v12 = __p;
        if (v32 != __p)
        {
          do
            BOOL v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
          while (v11 != v10);
          uint64_t v12 = __p;
        }
        unint64_t v32 = v10;
        operator delete(v12);
      }
      uint64_t v13 = v29;
      if (v29)
      {
        __int16 v14 = v30;
        uint64_t v15 = v29;
        if (v30 != v29)
        {
          do
          {
            uint64_t v17 = (void *)*--v14;
            long long v16 = v17;
            *__int16 v14 = 0;
            if (v17) {
              operator delete[](v16);
            }
          }
          while (v14 != v13);
          uint64_t v15 = v29;
        }
        long long v30 = v13;
        operator delete(v15);
      }
      if (v25 != v28) {
        free(v25);
      }
    }
    return v9;
  }
}

uint64_t verifyTerminatorSuccessors(mlir::Operation *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)*((void *)a1 + 2);
  if (v2)
  {
    unint64_t Parent = mlir::Block::getParent(v2);
    mlir::SuccessorRange::SuccessorRange(&v18, a1);
    uint64_t v4 = v19;
    if (!v19) {
      return 1;
    }
  }
  else
  {
    unint64_t Parent = 0;
    mlir::SuccessorRange::SuccessorRange(&v18, a1);
    uint64_t v4 = v19;
    if (!v19) {
      return 1;
    }
  }
  for (uint64_t i = (mlir::Block **)(v18 + 24); mlir::Block::getParent(*i) == Parent; i += 4)
  {
    if (!--v4) {
      return 1;
    }
  }
  long long v16 = "reference to block defined in another region";
  __int16 v17 = 259;
  mlir::Operation::emitError((uint64_t *)a1, (uint64_t)&v16, (uint64_t)&v18);
  uint64_t v6 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v18);
  if (v18) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v18);
  }
  if (v26)
  {
    long long v8 = (void **)__p;
    if (__p)
    {
      uint64_t v9 = v25;
      uint64_t v10 = __p;
      if (v25 != __p)
      {
        do
          uint64_t v9 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v9 - 1);
        while (v9 != v8);
        uint64_t v10 = __p;
      }
      uint64_t v25 = v8;
      operator delete(v10);
    }
    BOOL v11 = v22;
    if (v22)
    {
      uint64_t v12 = v23;
      uint64_t v13 = v22;
      if (v23 != v22)
      {
        do
        {
          uint64_t v15 = (void *)*--v12;
          __int16 v14 = v15;
          *uint64_t v12 = 0;
          if (v15) {
            operator delete[](v14);
          }
        }
        while (v12 != v11);
        uint64_t v13 = v22;
      }
      uint64_t v23 = v11;
      operator delete(v13);
    }
    if (v20 != &v21) {
      free(v20);
    }
  }
  return v6;
}

uint64_t mlir::OpTrait::impl::verifyNSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 10) == a2)
  {
    return verifyTerminatorSuccessors(this);
  }
  else
  {
    unsigned int v4 = a2;
    int v37 = (const void **)"requires ";
    __int16 v38 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v37, (uint64_t)v42);
    if (v42[0])
    {
      int v39 = 5;
      unint64_t v40 = v4;
      uint64_t v5 = &v39;
      uint64_t v6 = (char *)v43;
      if (v44 >= v45)
      {
        unint64_t v29 = v44 + 1;
        if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
        {
          int64_t v34 = (char *)&v39 - (unsigned char *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          uint64_t v6 = (char *)v43;
          uint64_t v5 = (int *)((char *)v43 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          uint64_t v5 = &v39;
          uint64_t v6 = (char *)v43;
        }
      }
      long long v7 = &v6[24 * v44];
      long long v8 = *(_OWORD *)v5;
      *((void *)v7 + 2) = *((void *)v5 + 2);
      *(_OWORD *)long long v7 = v8;
      uint64_t v9 = ++v44;
      if (v42[0])
      {
        int v39 = 3;
        unint64_t v40 = (unint64_t)" successors but found ";
        uint64_t v41 = 22;
        uint64_t v10 = &v39;
        BOOL v11 = (char *)v43;
        if (v9 >= v45)
        {
          unint64_t v30 = v9 + 1;
          BOOL v31 = (char *)v43 + 24 * v9 > (char *)&v39;
          if (v43 <= &v39 && v31)
          {
            int64_t v35 = (char *)&v39 - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
            BOOL v11 = (char *)v43;
            uint64_t v10 = (int *)((char *)v43 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
            uint64_t v10 = &v39;
            BOOL v11 = (char *)v43;
          }
        }
        uint64_t v12 = &v11[24 * v44];
        long long v13 = *(_OWORD *)v10;
        *((void *)v12 + 2) = *((void *)v10 + 2);
        *(_OWORD *)uint64_t v12 = v13;
        uint64_t v14 = ++v44;
        if (v42[0])
        {
          uint64_t v15 = (const char *)*((unsigned int *)this + 10);
          int v39 = 5;
          unint64_t v40 = (unint64_t)v15;
          long long v16 = &v39;
          __int16 v17 = (char *)v43;
          if (v14 >= v45)
          {
            unint64_t v32 = v14 + 1;
            BOOL v33 = (char *)v43 + 24 * v14 > (char *)&v39;
            if (v43 <= &v39 && v33)
            {
              int64_t v36 = (char *)&v39 - (unsigned char *)v43;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              __int16 v17 = (char *)v43;
              long long v16 = (int *)((char *)v43 + v36);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              long long v16 = &v39;
              __int16 v17 = (char *)v43;
            }
          }
          unint64_t v18 = &v17[24 * v44];
          long long v19 = *(_OWORD *)v16;
          *((void *)v18 + 2) = *((void *)v16 + 2);
          *(_OWORD *)unint64_t v18 = v19;
          ++v44;
        }
      }
    }
    uint64_t v20 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v51)
    {
      uint64_t v21 = (void **)__p;
      if (__p)
      {
        int v22 = v50;
        uint64_t v23 = __p;
        if (v50 != __p)
        {
          do
            int v22 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v22 - 1);
          while (v22 != v21);
          uint64_t v23 = __p;
        }
        uint64_t v50 = v21;
        operator delete(v23);
      }
      uint64_t v24 = v47;
      if (v47)
      {
        uint64_t v25 = v48;
        char v26 = v47;
        if (v48 != v47)
        {
          do
          {
            uint64_t v28 = (void *)*--v25;
            uint64_t v27 = v28;
            *uint64_t v25 = 0;
            if (v28) {
              operator delete[](v27);
            }
          }
          while (v25 != v24);
          char v26 = v47;
        }
        int64_t v48 = v24;
        operator delete(v26);
      }
      if (v43 != v46) {
        free(v43);
      }
    }
    return v20;
  }
}

uint64_t mlir::OpTrait::impl::verifyAtLeastNSuccessors(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 10) >= a2)
  {
    return verifyTerminatorSuccessors(this);
  }
  else
  {
    unsigned int v3 = a2;
    int v37 = (const void **)"requires at least ";
    __int16 v38 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, &v37, (uint64_t)v42);
    if (v42[0])
    {
      int v39 = 5;
      unint64_t v40 = v3;
      unsigned int v4 = &v39;
      uint64_t v5 = (char *)v43;
      if (v44 >= v45)
      {
        unint64_t v29 = v44 + 1;
        if (v43 <= &v39 && (char *)v43 + 24 * v44 > (char *)&v39)
        {
          int64_t v34 = (char *)&v39 - (unsigned char *)v43;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          uint64_t v5 = (char *)v43;
          unsigned int v4 = (int *)((char *)v43 + v34);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v29, 24);
          unsigned int v4 = &v39;
          uint64_t v5 = (char *)v43;
        }
      }
      uint64_t v6 = &v5[24 * v44];
      long long v7 = *(_OWORD *)v4;
      *((void *)v6 + 2) = *((void *)v4 + 2);
      *(_OWORD *)uint64_t v6 = v7;
      uint64_t v8 = ++v44;
      if (v42[0])
      {
        int v39 = 3;
        unint64_t v40 = (unint64_t)" successors but found ";
        uint64_t v41 = 22;
        uint64_t v9 = &v39;
        uint64_t v10 = (char *)v43;
        if (v8 >= v45)
        {
          unint64_t v30 = v8 + 1;
          BOOL v31 = (char *)v43 + 24 * v8 > (char *)&v39;
          if (v43 <= &v39 && v31)
          {
            int64_t v35 = (char *)&v39 - (unsigned char *)v43;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
            uint64_t v10 = (char *)v43;
            uint64_t v9 = (int *)((char *)v43 + v35);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v30, 24);
            uint64_t v9 = &v39;
            uint64_t v10 = (char *)v43;
          }
        }
        BOOL v11 = &v10[24 * v44];
        long long v12 = *(_OWORD *)v9;
        *((void *)v11 + 2) = *((void *)v9 + 2);
        *(_OWORD *)BOOL v11 = v12;
        uint64_t v13 = ++v44;
        if (v42[0])
        {
          uint64_t v14 = (const char *)*((unsigned int *)this + 10);
          int v39 = 5;
          unint64_t v40 = (unint64_t)v14;
          uint64_t v15 = &v39;
          long long v16 = (char *)v43;
          if (v13 >= v45)
          {
            unint64_t v32 = v13 + 1;
            BOOL v33 = (char *)v43 + 24 * v13 > (char *)&v39;
            if (v43 <= &v39 && v33)
            {
              int64_t v36 = (char *)&v39 - (unsigned char *)v43;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              long long v16 = (char *)v43;
              uint64_t v15 = (int *)((char *)v43 + v36);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, v46, v32, 24);
              uint64_t v15 = &v39;
              long long v16 = (char *)v43;
            }
          }
          __int16 v17 = &v16[24 * v44];
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = *((void *)v15 + 2);
          *(_OWORD *)__int16 v17 = v18;
          ++v44;
        }
      }
    }
    uint64_t v19 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v42);
    if (v42[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v42);
    }
    if (v51)
    {
      uint64_t v20 = (void **)__p;
      if (__p)
      {
        uint64_t v21 = v50;
        int v22 = __p;
        if (v50 != __p)
        {
          do
            uint64_t v21 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v21 - 1);
          while (v21 != v20);
          int v22 = __p;
        }
        uint64_t v50 = v20;
        operator delete(v22);
      }
      uint64_t v23 = v47;
      if (v47)
      {
        uint64_t v24 = v48;
        uint64_t v25 = v47;
        if (v48 != v47)
        {
          do
          {
            uint64_t v27 = (void *)*--v24;
            char v26 = v27;
            *uint64_t v24 = 0;
            if (v27) {
              operator delete[](v26);
            }
          }
          while (v24 != v23);
          uint64_t v25 = v47;
        }
        int64_t v48 = v23;
        operator delete(v25);
      }
      if (v43 != v46) {
        free(v43);
      }
    }
    return v19;
  }
}

uint64_t mlir::OpTrait::impl::verifyValueSizeAttr(uint64_t a1, const void *a2, size_t a3, const void **a4, const char *a5, const char *a6)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 47))
  {
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, const void *, size_t))(**(void **)(a1 + 48) + 80))(*(void *)(a1 + 48), a1, a2, a3);
    if (v13)
    {
      uint64_t v14 = (void *)v12;
      if (v12) {
        goto LABEL_4;
      }
LABEL_15:
      uint64_t v111 = 0;
      goto LABEL_16;
    }
  }
  uint64_t v14 = (void *)mlir::DictionaryAttr::get(a1 + 56, a2, a3);
  if (!v14) {
    goto LABEL_15;
  }
LABEL_4:
  BOOL v15 = mlir::detail::DenseArrayAttrImpl<int>::classof(v14);
  if (v15) {
    long long v16 = v14;
  }
  else {
    long long v16 = 0;
  }
  uint64_t v111 = v16;
  if (!v15)
  {
LABEL_16:
    v109[0] = (const void **)"requires dense i32 array attribute '";
    __int16 v110 = 259;
    mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
    if (v116)
    {
      __int16 v115 = 261;
      uint64_t v112 = (const void **)a2;
      uint64_t v113 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
      if (v116)
      {
        LODWORD(v112) = 3;
        uint64_t v113 = "'";
        uint64_t v114 = 1;
        uint64_t v23 = &v112;
        uint64_t v24 = (char *)v118;
        if (v119 >= v120)
        {
          unint64_t v89 = v119 + 1;
          if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
          {
            int64_t v101 = (char *)&v112 - (unsigned char *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v89, 24);
            uint64_t v24 = (char *)v118;
            uint64_t v23 = (const void ***)((char *)v118 + v101);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v89, 24);
            uint64_t v23 = &v112;
            uint64_t v24 = (char *)v118;
          }
        }
        uint64_t v25 = &v24[24 * v119];
        long long v26 = *(_OWORD *)v23;
        *((void *)v25 + 2) = v23[2];
        *(_OWORD *)uint64_t v25 = v26;
        ++v119;
      }
    }
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if (v116) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    }
    if (v126)
    {
      uint64_t v28 = (void **)__p;
      if (__p)
      {
        unint64_t v29 = v125;
        unint64_t v30 = __p;
        if (v125 != __p)
        {
          do
            unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
          while (v29 != v28);
          unint64_t v30 = __p;
        }
        int v125 = v28;
        operator delete(v30);
      }
      BOOL v31 = v122;
      if (!v122) {
        goto LABEL_90;
      }
      unint64_t v32 = v123;
      BOOL v33 = v122;
      if (v123 == v122) {
        goto LABEL_89;
      }
      do
      {
        int64_t v35 = (void *)*--v32;
        int64_t v34 = v35;
        *unint64_t v32 = 0;
        if (v35) {
          operator delete[](v34);
        }
      }
      while (v32 != v31);
      goto LABEL_88;
    }
    return v27;
  }
  uint64_t v17 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v111);
  if (v18)
  {
    uint64_t v19 = 0;
    while ((*(_DWORD *)(v17 + v19) & 0x80000000) == 0)
    {
      v19 += 4;
      if (4 * v18 == v19)
      {
        unint64_t v20 = (v18 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        if (v20 < 7)
        {
          int v21 = 0;
          int v22 = (int *)v17;
          do
          {
LABEL_56:
            int v52 = *v22++;
            v21 += v52;
          }
          while (v22 != (int *)(v17 + 4 * v18));
          goto LABEL_57;
        }
        unint64_t v46 = v20 + 1;
        uint64_t v47 = (v20 + 1) & 0x7FFFFFFFFFFFFFF8;
        int v22 = (int *)(v17 + 4 * v47);
        int64_t v48 = (int32x4_t *)(v17 + 16);
        int32x4_t v49 = 0uLL;
        uint64_t v50 = v47;
        int32x4_t v51 = 0uLL;
        do
        {
          int32x4_t v49 = vaddq_s32(v48[-1], v49);
          int32x4_t v51 = vaddq_s32(*v48, v51);
          v48 += 2;
          v50 -= 8;
        }
        while (v50);
        int v21 = vaddvq_s32(vaddq_s32(v51, v49));
        if (v46 != v47) {
          goto LABEL_56;
        }
        goto LABEL_57;
      }
    }
    v109[0] = (const void **)"'";
    __int16 v110 = 259;
    mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
    if (v116)
    {
      __int16 v115 = 261;
      uint64_t v112 = (const void **)a2;
      uint64_t v113 = (const char *)a3;
      mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
      if (v116)
      {
        LODWORD(v112) = 3;
        uint64_t v113 = "' attribute cannot have negative elements";
        uint64_t v114 = 41;
        int64_t v36 = &v112;
        int v37 = (char *)v118;
        if (v119 >= v120)
        {
          unint64_t v91 = v119 + 1;
          if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
          {
            int64_t v103 = (char *)&v112 - (unsigned char *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v91, 24);
            int v37 = (char *)v118;
            int64_t v36 = (const void ***)((char *)v118 + v103);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v91, 24);
            int64_t v36 = &v112;
            int v37 = (char *)v118;
          }
        }
        __int16 v38 = &v37[24 * v119];
        long long v39 = *(_OWORD *)v36;
        *((void *)v38 + 2) = v36[2];
        *(_OWORD *)__int16 v38 = v39;
        ++v119;
      }
    }
    uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
    if (v116) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
    }
    if (!v126) {
      return v27;
    }
    unint64_t v40 = (void **)__p;
    if (__p)
    {
      uint64_t v41 = v125;
      long long v42 = __p;
      if (v125 != __p)
      {
        do
          uint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        long long v42 = __p;
      }
      int v125 = v40;
      operator delete(v42);
    }
    BOOL v31 = v122;
    if (!v122) {
      goto LABEL_90;
    }
    unsigned int v43 = v123;
    BOOL v33 = v122;
    if (v123 == v122) {
      goto LABEL_89;
    }
    do
    {
      unsigned int v45 = (void *)*--v43;
      unsigned int v44 = v45;
      *unsigned int v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v31);
    goto LABEL_88;
  }
  int v21 = 0;
LABEL_57:
  long long v53 = (const char *)v21;
  if ((const char *)v21 == a6) {
    return 1;
  }
  __int16 v110 = 257;
  mlir::Operation::emitOpError((uint64_t *)a1, v109, (uint64_t)&v116);
  if (v116)
  {
    __int16 v115 = 261;
    uint64_t v112 = a4;
    uint64_t v113 = a5;
    mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
    if (v116)
    {
      LODWORD(v112) = 3;
      uint64_t v113 = " count (";
      uint64_t v114 = 8;
      int v54 = &v112;
      unint64_t v55 = (char *)v118;
      if (v119 >= v120)
      {
        unint64_t v90 = v119 + 1;
        if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
        {
          int64_t v102 = (char *)&v112 - (unsigned char *)v118;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v90, 24);
          unint64_t v55 = (char *)v118;
          int v54 = (const void ***)((char *)v118 + v102);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v90, 24);
          int v54 = &v112;
          unint64_t v55 = (char *)v118;
        }
      }
      uint64_t v56 = &v55[24 * v119];
      long long v57 = *(_OWORD *)v54;
      *((void *)v56 + 2) = v54[2];
      *(_OWORD *)uint64_t v56 = v57;
      uint64_t v58 = ++v119;
      if (v116)
      {
        LODWORD(v112) = 5;
        uint64_t v113 = a6;
        unint64_t v59 = &v112;
        int8x16_t v60 = (char *)v118;
        if (v58 >= v120)
        {
          unint64_t v92 = v58 + 1;
          BOOL v93 = (char *)v118 + 24 * v58 > (char *)&v112;
          if (v118 <= &v112 && v93)
          {
            int64_t v104 = (char *)&v112 - (unsigned char *)v118;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v92, 24);
            int8x16_t v60 = (char *)v118;
            unint64_t v59 = (const void ***)((char *)v118 + v104);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v92, 24);
            unint64_t v59 = &v112;
            int8x16_t v60 = (char *)v118;
          }
        }
        unsigned int v61 = &v60[24 * v119];
        long long v62 = *(_OWORD *)v59;
        *((void *)v61 + 2) = v59[2];
        *(_OWORD *)unsigned int v61 = v62;
        uint64_t v63 = ++v119;
        if (v116)
        {
          LODWORD(v112) = 3;
          uint64_t v113 = ") does not match with the total size (";
          uint64_t v114 = 38;
          uint16x8_t v64 = &v112;
          long long v65 = (char *)v118;
          if (v63 >= v120)
          {
            unint64_t v94 = v63 + 1;
            BOOL v95 = (char *)v118 + 24 * v63 > (char *)&v112;
            if (v118 <= &v112 && v95)
            {
              int64_t v105 = (char *)&v112 - (unsigned char *)v118;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v94, 24);
              long long v65 = (char *)v118;
              uint16x8_t v64 = (const void ***)((char *)v118 + v105);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v94, 24);
              uint16x8_t v64 = &v112;
              long long v65 = (char *)v118;
            }
          }
          int8x16_t v66 = &v65[24 * v119];
          long long v67 = *(_OWORD *)v64;
          *((void *)v66 + 2) = v64[2];
          *(_OWORD *)int8x16_t v66 = v67;
          uint64_t v68 = ++v119;
          if (v116)
          {
            LODWORD(v112) = 5;
            uint64_t v113 = v53;
            uint32x4_t v69 = &v112;
            int64x2_t v70 = (char *)v118;
            if (v68 >= v120)
            {
              unint64_t v96 = v68 + 1;
              BOOL v97 = (char *)v118 + 24 * v68 > (char *)&v112;
              if (v118 <= &v112 && v97)
              {
                int64_t v106 = (char *)&v112 - (unsigned char *)v118;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v96, 24);
                int64x2_t v70 = (char *)v118;
                uint32x4_t v69 = (const void ***)((char *)v118 + v106);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v96, 24);
                uint32x4_t v69 = &v112;
                int64x2_t v70 = (char *)v118;
              }
            }
            uint64_t v71 = &v70[24 * v119];
            long long v72 = *(_OWORD *)v69;
            *((void *)v71 + 2) = v69[2];
            *(_OWORD *)uint64_t v71 = v72;
            uint64_t v73 = ++v119;
            if (v116)
            {
              LODWORD(v112) = 3;
              uint64_t v113 = ") specified in attribute '";
              uint64_t v114 = 26;
              unint64_t v74 = &v112;
              unint64_t v75 = (char *)v118;
              if (v73 >= v120)
              {
                unint64_t v98 = v73 + 1;
                BOOL v99 = (char *)v118 + 24 * v73 > (char *)&v112;
                if (v118 <= &v112 && v99)
                {
                  int64_t v107 = (char *)&v112 - (unsigned char *)v118;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
                  unint64_t v75 = (char *)v118;
                  unint64_t v74 = (const void ***)((char *)v118 + v107);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v98, 24);
                  unint64_t v74 = &v112;
                  unint64_t v75 = (char *)v118;
                }
              }
              unint64_t v76 = &v75[24 * v119];
              long long v77 = *(_OWORD *)v74;
              *((void *)v76 + 2) = v74[2];
              *(_OWORD *)unint64_t v76 = v77;
              ++v119;
              if (v116)
              {
                __int16 v115 = 261;
                uint64_t v112 = (const void **)a2;
                uint64_t v113 = (const char *)a3;
                mlir::Diagnostic::operator<<((uint64_t)v117, &v112);
                if (v116)
                {
                  LODWORD(v112) = 3;
                  uint64_t v113 = "'";
                  uint64_t v114 = 1;
                  int64_t v78 = &v112;
                  int64_t v79 = (char *)v118;
                  if (v119 >= v120)
                  {
                    unint64_t v100 = v119 + 1;
                    if (v118 <= &v112 && (char *)v118 + 24 * v119 > (char *)&v112)
                    {
                      int64_t v108 = (char *)&v112 - (unsigned char *)v118;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v100, 24);
                      int64_t v79 = (char *)v118;
                      int64_t v78 = (const void ***)((char *)v118 + v108);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v118, v121, v100, 24);
                      int64_t v78 = &v112;
                      int64_t v79 = (char *)v118;
                    }
                  }
                  int64_t v80 = &v79[24 * v119];
                  long long v81 = *(_OWORD *)v78;
                  *((void *)v80 + 2) = v78[2];
                  *(_OWORD *)int64_t v80 = v81;
                  ++v119;
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v27 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v116);
  if (v116) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v116);
  }
  if (v126)
  {
    uint64_t v82 = (void **)__p;
    if (__p)
    {
      int v83 = v125;
      uint64_t v84 = __p;
      if (v125 != __p)
      {
        do
          int v83 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v83 - 1);
        while (v83 != v82);
        uint64_t v84 = __p;
      }
      int v125 = v82;
      operator delete(v84);
    }
    BOOL v31 = v122;
    if (!v122) {
      goto LABEL_90;
    }
    uint64_t v85 = v123;
    BOOL v33 = v122;
    if (v123 == v122)
    {
LABEL_89:
      int v123 = v31;
      operator delete(v33);
LABEL_90:
      if (v118 != v121) {
        free(v118);
      }
      return v27;
    }
    do
    {
      __int16 v87 = (void *)*--v85;
      BOOL v86 = v87;
      void *v85 = 0;
      if (v87) {
        operator delete[](v86);
      }
    }
    while (v85 != v31);
LABEL_88:
    BOOL v33 = v122;
    goto LABEL_89;
  }
  return v27;
}

uint64_t mlir::OpTrait::impl::verifyOperandSizeAttr(uint64_t a1, const void *a2, size_t a3)
{
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0) {
    unsigned int v3 = (const char *)*(unsigned int *)(a1 + 68);
  }
  else {
    unsigned int v3 = 0;
  }
  return mlir::OpTrait::impl::verifyValueSizeAttr(a1, a2, a3, (const void **)"operand", (const char *)7, v3);
}

uint64_t mlir::OpTrait::impl::verifyNoRegionArguments(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 0) {
    return 1;
  }
  unsigned int v3 = (void *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)this + 10));
  uint64_t v4 = 24 * (v2 & 0x7FFFFF);
  while (1)
  {
    if (v3 != (void *)*v3)
    {
      uint64_t v5 = v3[1];
      uint64_t v6 = v5 ? v5 - 8 : 0;
      if (((*(void *)(v6 + 56) - *(void *)(v6 + 48)) & 0x7FFFFFFF8) != 0) {
        break;
      }
    }
    v3 += 3;
    v4 -= 24;
    if (!v4) {
      return 1;
    }
  }
  if ((v2 & 0x7FFFFE) != 0)
  {
    v38[0] = (const void **)"region #";
    __int16 v39 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v38, (uint64_t)v43);
    unsigned int RegionNumber = mlir::Region::getRegionNumber((unint64_t)v3);
    if (v43[0])
    {
      int v40 = 5;
      unint64_t v41 = RegionNumber;
      uint64_t v8 = &v40;
      uint64_t v9 = (char *)v44;
      if (v45 >= v46)
      {
        unint64_t v33 = v45 + 1;
        if (v44 <= &v40 && (char *)v44 + 24 * v45 > (char *)&v40)
        {
          int64_t v36 = (char *)&v40 - (unsigned char *)v44;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
          uint64_t v9 = (char *)v44;
          uint64_t v8 = (int *)((char *)v44 + v36);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v33, 24);
          uint64_t v8 = &v40;
          uint64_t v9 = (char *)v44;
        }
      }
      uint64_t v10 = &v9[24 * v45];
      long long v11 = *(_OWORD *)v8;
      *((void *)v10 + 2) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      uint64_t v12 = ++v45;
      if (v43[0])
      {
        int v40 = 3;
        unint64_t v41 = (unint64_t)" should have no arguments";
        uint64_t v42 = 25;
        char v13 = &v40;
        uint64_t v14 = (char *)v44;
        if (v12 >= v46)
        {
          unint64_t v34 = v12 + 1;
          BOOL v35 = (char *)v44 + 24 * v12 > (char *)&v40;
          if (v44 <= &v40 && v35)
          {
            int64_t v37 = (char *)&v40 - (unsigned char *)v44;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v34, 24);
            uint64_t v14 = (char *)v44;
            char v13 = (int *)((char *)v44 + v37);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, v47, v34, 24);
            char v13 = &v40;
            uint64_t v14 = (char *)v44;
          }
        }
        BOOL v15 = &v14[24 * v45];
        long long v16 = *(_OWORD *)v13;
        *((void *)v15 + 2) = *((void *)v13 + 2);
        *(_OWORD *)BOOL v15 = v16;
        ++v45;
      }
    }
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (v52)
    {
      uint64_t v18 = (void **)__p;
      if (__p)
      {
        uint64_t v19 = v51;
        unint64_t v20 = __p;
        if (v51 != __p)
        {
          do
            uint64_t v19 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v19 - 1);
          while (v19 != v18);
          unint64_t v20 = __p;
        }
        int32x4_t v51 = v18;
        operator delete(v20);
      }
      int v21 = v48;
      if (!v48) {
        goto LABEL_47;
      }
      int v22 = v49;
      uint64_t v23 = v48;
      if (v49 == v48)
      {
LABEL_46:
        int32x4_t v49 = v21;
        operator delete(v23);
LABEL_47:
        if (v44 != v47) {
          free(v44);
        }
        return v17;
      }
      do
      {
        uint64_t v25 = (void *)*--v22;
        uint64_t v24 = v25;
        *int v22 = 0;
        if (v25) {
          operator delete[](v24);
        }
      }
      while (v22 != v21);
LABEL_45:
      uint64_t v23 = v48;
      goto LABEL_46;
    }
  }
  else
  {
    v38[0] = (const void **)"region should have no arguments";
    __int16 v39 = 259;
    mlir::Operation::emitOpError((uint64_t *)this, v38, (uint64_t)v43);
    uint64_t v17 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v43);
    if (v43[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v43);
    }
    if (v52)
    {
      uint64_t v27 = (void **)__p;
      if (__p)
      {
        uint64_t v28 = v51;
        unint64_t v29 = __p;
        if (v51 != __p)
        {
          do
            uint64_t v28 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v28 - 1);
          while (v28 != v27);
          unint64_t v29 = __p;
        }
        int32x4_t v51 = v27;
        operator delete(v29);
      }
      int v21 = v48;
      if (!v48) {
        goto LABEL_47;
      }
      unint64_t v30 = v49;
      uint64_t v23 = v48;
      if (v49 == v48) {
        goto LABEL_46;
      }
      do
      {
        unint64_t v32 = (void *)*--v30;
        BOOL v31 = v32;
        void *v30 = 0;
        if (v32) {
          operator delete[](v31);
        }
      }
      while (v30 != v21);
      goto LABEL_45;
    }
  }
  return v17;
}

uint64_t mlir::OpTrait::impl::verifyElementwise(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  v152[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 9);
  uint64_t v4 = (char *)this - 16;
  if (!v3) {
    uint64_t v4 = 0;
  }
  __dst = v4;
  uint64_t v132 = v3;
  mlir::OperandRange::getTypes((uint64_t *)&__dst, (uint64_t *)&v135);
  uint64_t v5 = v135;
  uint64_t v6 = v136;
  long long v7 = (char *)v138;
  BOOL v8 = v135 != v137;
  if (v135 != v137 || v136 != v138)
  {
    if (v135 == v137)
    {
      while (1)
      {
        int v22 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
        BOOL v23 = v22 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
           || v22 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
        if (v23 || v22 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          break;
        }
        if (v7 == ++v6)
        {
          uint64_t v6 = v7;
          break;
        }
      }
    }
    else
    {
      for (uint64_t i = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v135, (uint64_t)v136)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            i != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id;
            uint64_t i = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136))
      {
        if (i == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || i == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        ++v6;
      }
    }
  }
  uint64_t v9 = (char *)v138;
  uint64_t v150 = (char *)v152;
  uint64_t v151 = 0x100000000;
  BOOL v10 = v5 != v137 || v6 != v138;
  if (v10)
  {
    if (v8)
    {
      if (v5 != v137)
      {
        while (1)
          mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6);
      }
      BOOL v121 = 0;
      BOOL v122 = v8;
      int v123 = this;
      uint64_t v13 = 0;
      unint64_t v29 = v6;
      do
      {
        do
        {
          unint64_t v30 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v29)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
          if (v30 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
            break;
          }
        }
        while (v30 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
             && v30 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
        ++v13;
      }
      while (v29 != v9);
    }
    else
    {
      if (v5 != v137)
      {
        while (1)
        {
          do
          {
LABEL_34:
            uint64_t v18 = v6 + 1;
            uint64_t v6 = v7;
          }
          while (v18 == v7);
          uint64_t v6 = v18;
          do
          {
            uint64_t v19 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            if (v19 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
              || v19 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
              || v19 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
            {
              goto LABEL_34;
            }
            ++v6;
          }
          while (v7 != v6);
          uint64_t v6 = v7;
        }
      }
      BOOL v121 = 0;
      BOOL v122 = v8;
      int v123 = this;
      uint64_t v13 = 0;
      uint64_t v32 = (uint64_t)v6;
      do
      {
        unint64_t v33 = (char *)(v32 + 1);
        uint64_t v32 = (uint64_t)v7;
        if (v33 != v7)
        {
          uint64_t v32 = (uint64_t)v33;
          while (1)
          {
            unint64_t v34 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, v32)
                                                   + 8) & 0xFFFFFFFFFFFFFFF8)
                           + 136);
            BOOL v35 = v34 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
               || v34 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v35 || v34 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
              break;
            }
            if (v7 == (char *)++v32)
            {
              uint64_t v32 = (uint64_t)v7;
              break;
            }
          }
        }
        ++v13;
      }
      while ((char *)v32 != v9);
    }
  }
  else
  {
    BOOL v121 = v5 != v137;
    BOOL v122 = v8;
    int v123 = this;
    uint64_t v13 = 0;
  }
  uint64_t v14 = v151;
  if (v13 + (unint64_t)v151 > HIDWORD(v151))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, v152, v13 + v151, 8);
    uint64_t v14 = v151;
  }
  if (v10)
  {
    BOOL v15 = (unint64_t *)&v150[8 * v14];
    if (v122)
    {
      if (v121)
      {
        while (1)
        {
          *BOOL v15 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
          do
          {
            long long v16 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            if (v16 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
              break;
            }
          }
          while (v16 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
               && v16 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
          ++v15;
        }
      }
      do
      {
        *BOOL v15 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
        do
        {
          int64_t v37 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)++v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
          if (v37 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
            break;
          }
        }
        while (v37 != &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
             && v37 != &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id);
        ++v15;
      }
      while (v6 != v9);
    }
    else
    {
      if (v121)
      {
        while (1)
        {
          *BOOL v15 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v25 = v6 + 1;
          uint64_t v6 = v7;
          if (v25 != v7)
          {
            uint64_t v6 = v25;
            do
            {
              long long v26 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
              if (v26 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
                || v26 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
                || v26 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
              {
                goto LABEL_56;
              }
              ++v6;
            }
            while (v7 != v6);
            uint64_t v6 = v7;
          }
LABEL_56:
          ++v15;
        }
      }
      do
      {
        *BOOL v15 = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6) + 8) & 0xFFFFFFFFFFFFFFF8;
        __int16 v39 = v6 + 1;
        uint64_t v6 = v7;
        if (v39 != v7)
        {
          uint64_t v6 = v39;
          while (1)
          {
            int v40 = *(void **)(*(void *)(*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v5, (uint64_t)v6)+ 8) & 0xFFFFFFFFFFFFFFF8)+ 136);
            BOOL v41 = v40 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
               || v40 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
            if (v41 || v40 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
              break;
            }
            if (v7 == ++v6)
            {
              uint64_t v6 = v7;
              break;
            }
          }
        }
        ++v15;
      }
      while (v6 != v9);
    }
  }
  LODWORD(v151) = v151 + v13;
  if ((*((unsigned char *)v123 + 46) & 0x80) != 0)
  {
    unsigned int v43 = (void *)*((void *)v123 + 9);
    uint64_t v44 = *((unsigned int *)v123 + 17);
  }
  else
  {
    unsigned int v43 = 0;
    uint64_t v44 = 0;
  }
  __dst = v43;
  uint64_t v132 = v44;
  mlir::OperandRange::getTypes((uint64_t *)&__dst, (uint64_t *)&v135);
  unsigned int v46 = v135;
  uint64_t v45 = (uint64_t)v136;
  uint64_t v47 = v138;
  if (v135 != v137 || v136 != v138)
  {
    if (v135 == v137)
    {
      uint64_t v66 = (uint64_t)&v135[32 * (void)v136 + 24];
      while (1)
      {
        long long v67 = *(void **)(*(void *)(*(void *)(*(void *)v66 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
        BOOL v68 = v67 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
           || v67 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
        if (v68 || v67 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
          break;
        }
        ++v45;
        v66 += 32;
        if (v138 == (void *)v45)
        {
          uint64_t v45 = (uint64_t)v138;
          break;
        }
      }
    }
    else
    {
      uint64_t v50 = &v135[32 * (void)v136];
      int32x4_t v51 = *(void **)(*(void *)(*(void *)(*((void *)v50 + 3) + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      if (v51 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id)
      {
        v147 = v149;
        uint64_t v148 = 0x200000000;
        goto LABEL_221;
      }
      char v52 = (uint64_t *)(v50 + 56);
      do
      {
        if (v51 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v51 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        uint64_t v54 = *v52;
        v52 += 4;
        ++v45;
        int32x4_t v51 = *(void **)(*(void *)(*(void *)(v54 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v51 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
    }
  }
  v147 = v149;
  uint64_t v148 = 0x200000000;
  if (v135 == v137 && v45 == (void)v138)
  {
    int v55 = v148;
    uint64_t v56 = v151;
    if (!v151) {
      goto LABEL_200;
    }
    goto LABEL_130;
  }
  if (v135 != v137)
  {
    while (1)
    {
      do
      {
LABEL_221:
        uint64_t v98 = v45++;
        BOOL v99 = *(void **)(*(void *)(*(void *)(*(void *)&v135[32 * v45 + 24] + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v99 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
      unint64_t v100 = &v135[32 * v98 + 88];
      do
      {
        if (v99 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id
          || v99 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id)
        {
          break;
        }
        uint64_t v102 = *(void *)v100;
        v100 += 32;
        ++v45;
        BOOL v99 = *(void **)(*(void *)(*(void *)(v102 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      }
      while (v99 != &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id);
    }
  }
  unint64_t v48 = 0;
  uint64_t v49 = v45;
  do
  {
    unint64_t v59 = v48++;
    if ((void *)(v49 + 1) == v138) {
      break;
    }
    uint64_t v60 = (uint64_t)&v135[32 * v49++ + 56];
    while (1)
    {
      unsigned int v61 = *(void **)(*(void *)(*(void *)(*(void *)v60 + 8) & 0xFFFFFFFFFFFFFFF8) + 136);
      BOOL v62 = v61 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v61 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (v62 || v61 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        break;
      }
      ++v49;
      v60 += 32;
      if (v138 == (void *)v49) {
        goto LABEL_146;
      }
    }
  }
  while (v138 != (void *)v49);
LABEL_146:
  if (v59 < 2)
  {
    uint64_t v64 = 0;
    long long v65 = v149;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, v149, v48, 8);
    uint64_t v64 = v148;
    long long v65 = v147;
  }
  uint64_t v85 = (unint64_t *)&v65[8 * v64];
  uint64_t v86 = *(void *)(v46[4 * v45 + 3] + 8);
  do
  {
    unint64_t *v85 = v86 & 0xFFFFFFFFFFFFFFF8;
    if ((void *)(v45 + 1) == v47) {
      break;
    }
    uint64_t v87 = (uint64_t)&v46[4 * v45++ + 7];
    while (1)
    {
      uint64_t v86 = *(void *)(*(void *)v87 + 8);
      char v88 = *(void **)(*(void *)(v86 & 0xFFFFFFFFFFFFFFF8) + 136);
      BOOL v89 = v88 == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id
         || v88 == &mlir::detail::TypeIDResolver<mlir::RankedTensorType,void>::id;
      if (v89 || v88 == &mlir::detail::TypeIDResolver<mlir::UnrankedTensorType,void>::id) {
        break;
      }
      ++v45;
      v87 += 32;
      if (v47 == (void *)v45) {
        goto LABEL_199;
      }
    }
    ++v85;
  }
  while (v47 != (void *)v45);
LABEL_199:
  int v55 = v148 + v48;
  LODWORD(v148) = v148 + v48;
  uint64_t v56 = v151;
  if (!v151)
  {
LABEL_200:
    if (!v55)
    {
      uint64_t v70 = 1;
      goto LABEL_265;
    }
    __dst = "if an operand is non-scalar, then there must be at least one non-scalar result";
    __int16 v134 = 259;
    mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
    uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
    if (v135) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
    }
    if (v146)
    {
      unint64_t v91 = (void **)__p;
      if (__p)
      {
        unint64_t v92 = v145;
        BOOL v93 = __p;
        if (v145 != __p)
        {
          do
            unint64_t v92 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v92 - 1);
          while (v92 != v91);
          BOOL v93 = __p;
        }
        unint64_t v145 = v91;
        operator delete(v93);
      }
      unint64_t v74 = v142;
      if (v142)
      {
        unint64_t v94 = v143;
        unint64_t v76 = v142;
        if (v143 == v142) {
          goto LABEL_216;
        }
        do
        {
          unint64_t v96 = (void *)*--v94;
          BOOL v95 = v96;
          *unint64_t v94 = 0;
          if (v96) {
            operator delete[](v95);
          }
        }
        while (v94 != v74);
        goto LABEL_215;
      }
      goto LABEL_217;
    }
    goto LABEL_265;
  }
LABEL_130:
  if (v55)
  {
    if (v56 != *((_DWORD *)v123 + 9))
    {
      __dst = "if an operand is non-scalar, then all results must be non-scalar";
      __int16 v134 = 259;
      mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
      uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
      if (v135) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
      }
      if (v146)
      {
        int64_t v79 = (void **)__p;
        if (__p)
        {
          int64_t v80 = v145;
          long long v81 = __p;
          if (v145 != __p)
          {
            do
              int64_t v80 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v80 - 1);
            while (v80 != v79);
            long long v81 = __p;
          }
          unint64_t v145 = v79;
          operator delete(v81);
        }
        unint64_t v74 = v142;
        if (v142)
        {
          uint64_t v82 = v143;
          unint64_t v76 = v142;
          if (v143 == v142) {
            goto LABEL_216;
          }
          do
          {
            uint64_t v84 = (void *)*--v82;
            int v83 = v84;
            *uint64_t v82 = 0;
            if (v84) {
              operator delete[](v83);
            }
          }
          while (v82 != v74);
          goto LABEL_215;
        }
        goto LABEL_217;
      }
      goto LABEL_265;
    }
    __src = v129;
    uint64_t v128 = 0x200000000;
    uint64_t v135 = v147;
    unint64_t v136 = v150;
    unint64_t v137 = &v147[8 * v55];
    int v138 = &v150[8 * v56];
    __dst = v137;
    uint64_t v132 = (uint64_t)v138;
    v133[0] = v137;
    v133[1] = v138;
    llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>((uint64_t)&__src, &v135, &__dst);
    __dst = v133;
    uint64_t v132 = 0x400000000;
    unsigned int v57 = v128;
    uint64_t v58 = __src;
    if (v128)
    {
      if (__src == v129)
      {
        unsigned int v103 = v128;
        uint64_t v58 = v129;
        if (v128 < 5
          || (llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v133, v128, 8),
              unsigned int v103 = v128,
              uint64_t v58 = __src,
              v128))
        {
          memcpy(__dst, v58, 8 * v103);
          uint64_t v58 = __src;
        }
        LODWORD(v132) = v57;
      }
      else
      {
        __dst = __src;
        uint64_t v132 = v128;
        __src = v129;
        HIDWORD(v128) = 0;
        uint64_t v58 = v129;
      }
      LODWORD(v128) = 0;
    }
    if (v58 != v129)
    {
      free(v58);
      unsigned int v57 = v132;
    }
    if (v57)
    {
      uint64_t v104 = 8 * v57;
      int64_t v105 = (char *)__dst;
      while (*(void *)(**(void **)v105 + 136) == *(void *)(**(void **)__dst + 136))
      {
        v105 += 8;
        v104 -= 8;
        if (!v104) {
          goto LABEL_240;
        }
      }
    }
    else
    {
LABEL_240:
      mlir::ValueRange::ValueRange(v130, (uint64_t)__dst, v57);
      if (mlir::verifyCompatibleShapes(v130[0], v130[1]))
      {
        uint64_t v70 = 1;
        goto LABEL_263;
      }
    }
    v129[8] = 257;
    mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__src, (uint64_t)&v135);
    if (v135)
    {
      int v124 = 3;
      int v125 = "all non-scalar operands/results must have the same shape and base type";
      uint64_t v126 = 70;
      int64_t v106 = &v124;
      int64_t v107 = (char *)v138;
      if (v139 >= v140)
      {
        unint64_t v119 = v139 + 1;
        if (v138 <= &v124 && (char *)v138 + 24 * v139 > (char *)&v124)
        {
          int64_t v120 = (char *)&v124 - (unsigned char *)v138;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v141, v119, 24);
          int64_t v107 = (char *)v138;
          int64_t v106 = (int *)((char *)v138 + v120);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v138, v141, v119, 24);
          int64_t v106 = &v124;
          int64_t v107 = (char *)v138;
        }
      }
      int64_t v108 = &v107[24 * v139];
      long long v109 = *(_OWORD *)v106;
      *((void *)v108 + 2) = *((void *)v106 + 2);
      *(_OWORD *)int64_t v108 = v109;
      ++v139;
    }
    uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
    if (v135) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
    }
    if (v146)
    {
      __int16 v110 = (void **)__p;
      if (__p)
      {
        uint64_t v111 = v145;
        uint64_t v112 = __p;
        if (v145 != __p)
        {
          do
            uint64_t v111 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v111 - 1);
          while (v111 != v110);
          uint64_t v112 = __p;
        }
        unint64_t v145 = v110;
        operator delete(v112);
      }
      uint64_t v113 = v142;
      if (v142)
      {
        uint64_t v114 = v143;
        __int16 v115 = v142;
        if (v143 != v142)
        {
          do
          {
            uint64_t v117 = (void *)*--v114;
            uint64_t v116 = v117;
            *uint64_t v114 = 0;
            if (v117) {
              operator delete[](v116);
            }
          }
          while (v114 != v113);
          __int16 v115 = v142;
        }
        unint64_t v143 = v113;
        operator delete(v115);
      }
      if (v138 != v141) {
        free(v138);
      }
    }
LABEL_263:
    BOOL v97 = __dst;
    if (__dst == v133) {
      goto LABEL_265;
    }
    goto LABEL_264;
  }
  __dst = "if a result is non-scalar, then at least one operand must be non-scalar";
  __int16 v134 = 259;
  mlir::Operation::emitOpError((uint64_t *)v123, (const void ***)&__dst, (uint64_t)&v135);
  uint64_t v70 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v135);
  if (v135) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v135);
  }
  if (v146)
  {
    uint64_t v71 = (void **)__p;
    if (__p)
    {
      long long v72 = v145;
      uint64_t v73 = __p;
      if (v145 != __p)
      {
        do
          long long v72 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v72 - 1);
        while (v72 != v71);
        uint64_t v73 = __p;
      }
      unint64_t v145 = v71;
      operator delete(v73);
    }
    unint64_t v74 = v142;
    if (v142)
    {
      unint64_t v75 = v143;
      unint64_t v76 = v142;
      if (v143 == v142) {
        goto LABEL_216;
      }
      do
      {
        int64_t v78 = (void *)*--v75;
        long long v77 = v78;
        void *v75 = 0;
        if (v78) {
          operator delete[](v77);
        }
      }
      while (v75 != v74);
LABEL_215:
      unint64_t v76 = v142;
LABEL_216:
      unint64_t v143 = v74;
      operator delete(v76);
    }
LABEL_217:
    BOOL v97 = v138;
    if (v138 == v141) {
      goto LABEL_265;
    }
LABEL_264:
    free(v97);
  }
LABEL_265:
  if (v147 != v149) {
    free(v147);
  }
  if (v150 != (char *)v152) {
    free(v150);
  }
  return v70;
}

uint64_t mlir::OpTrait::impl::verifyIsIsolatedFromAbove(mlir::OpTrait::impl *this, mlir::Operation *a2)
{
  v90[8] = *MEMORY[0x1E4F143B8];
  char v88 = (mlir::Region **)v90;
  uint64_t v89 = 0x800000000;
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) == 0)
  {
LABEL_40:
    uint64_t v28 = 1;
    goto LABEL_77;
  }
  uint64_t v4 = (mlir::Region *)((((unint64_t)this + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                      + 32 * *((unsigned int *)this + 10));
  uint64_t v5 = (mlir::Region *)((char *)v4 + 24 * (v2 & 0x7FFFFF));
  while (1)
  {
    if (HIDWORD(v89))
    {
      *char v88 = v4;
      BOOL v6 = __CFADD__(v89, 1);
      unsigned int v7 = v89 + 1;
      LODWORD(v89) = v89 + 1;
      if (!v6) {
        break;
      }
      goto LABEL_35;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, 1uLL, 8);
    v88[v89] = v4;
    BOOL v6 = __CFADD__(v89, 1);
    unsigned int v7 = v89 + 1;
    LODWORD(v89) = v89 + 1;
    if (!v6) {
      break;
    }
LABEL_35:
    uint64_t v4 = (mlir::Region *)((char *)v4 + 24);
    if (v4 == v5) {
      goto LABEL_40;
    }
  }
  while (1)
  {
    BOOL v8 = v88[v7 - 1];
    LODWORD(v89) = v7 - 1;
    mlir::Region::OpIterator::OpIterator(&v79, v8, 0);
    mlir::Region::OpIterator::OpIterator(&v75, v8, 1);
    uint64_t v9 = v80;
    uint64_t v74 = v80;
    long long v73 = v79;
    long long v71 = v79;
    uint64_t v72 = v80;
    uint64_t v10 = v76;
    if (v80 != v76) {
      break;
    }
LABEL_34:
    unsigned int v7 = v89;
    if (!v89) {
      goto LABEL_35;
    }
  }
  while (1)
  {
    if ((*(unsigned char *)(v9 + 46) & 0x80) != 0)
    {
      uint64_t v11 = *(unsigned int *)(v9 + 68);
      if (v11) {
        break;
      }
    }
LABEL_14:
    if ((*(_DWORD *)(v9 + 44) & 0x7FFFFF) != 0)
    {
      {
        *(void *)&long long v79 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
        *((void *)&v79 + 1) = 91;
        unint64_t v21 = llvm::StringRef::find((uint64_t *)&v79, "DesiredTypeName = ", 0x12uLL, 0);
        if (*((void *)&v79 + 1) >= v21) {
          unint64_t v22 = v21;
        }
        else {
          unint64_t v22 = *((void *)&v79 + 1);
        }
        uint64_t v23 = v79 + v22;
        unint64_t v24 = *((void *)&v79 + 1) - v22;
        uint64_t v25 = 18;
        if (v24 < 0x12) {
          uint64_t v25 = v24;
        }
        unint64_t v26 = v24 - v25;
        if (v26 >= v26 - 1) {
          uint64_t v27 = v26 - 1;
        }
        else {
          uint64_t v27 = v26;
        }
        mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v23 + v25, v27);
      }
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 48) + 32))(*(void *)(v9 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
      {
        unint64_t v14 = *(unsigned int *)(v9 + 44);
        uint64_t v15 = v14 & 0x7FFFFF;
        if ((v14 & 0x7FFFFF) != 0)
        {
          unint64_t v16 = (v9 + 16 * ((v14 >> 23) & 1) + ((v14 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v17 = *(unsigned int *)(v9 + 40);
          unsigned int v18 = v89;
          uint64_t v19 = 24 * v15;
          unint64_t v20 = v16 + 32 * v17;
          do
          {
            if (v18 >= HIDWORD(v89))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v88, v90, v18 + 1, 8);
              unsigned int v18 = v89;
            }
            v88[v18] = (mlir::Region *)v20;
            unsigned int v18 = v89 + 1;
            LODWORD(v89) = v89 + 1;
            v20 += 24;
            v19 -= 24;
          }
          while (v19);
        }
      }
    }
    mlir::Region::OpIterator::operator++((uint64_t *)&v71);
    uint64_t v9 = v72;
    if (v72 == v10) {
      goto LABEL_34;
    }
  }
  uint64_t v12 = (uint64_t *)(*(void *)(v9 + 72) + 24);
  while (1)
  {
    uint64_t v70 = *v12;
    ParentRegion = mlir::Value::getParentRegion((mlir::Value *)&v70);
    if (!ParentRegion) {
      break;
    }
    if (v4 != ParentRegion && (mlir::Region::isProperAncestor(v4, ParentRegion) & 1) == 0)
    {
      v77[0] = (const void **)"using value defined outside the region";
      __int16 v78 = 259;
      mlir::Operation::emitOpError((uint64_t *)v9, v77, (uint64_t)&v79);
      uint64_t v46 = mlir::Diagnostic::attachNote((uint64_t *)&v79 + 1, *((void *)this + 3), 1);
      uint64_t v47 = v46;
      unint64_t v50 = *(void *)(v46 + 16);
      uint64_t v48 = v46 + 16;
      unint64_t v49 = v50;
      LODWORD(v68[0]) = 3;
      v68[1] = "required by region isolation constraints";
      v68[2] = 40;
      uint64_t v51 = *(unsigned int *)(v47 + 24);
      char v52 = (char *)v68;
      if (v51 >= *(_DWORD *)(v47 + 28))
      {
        unint64_t v62 = v51 + 1;
        BOOL v63 = v49 + 24 * v51 > (unint64_t)v68;
        if (v49 <= (unint64_t)v68 && v63)
        {
          uint64_t v66 = (char *)v68 - v49;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, (void *)(v47 + 32), v62, 24);
          unint64_t v49 = *(void *)(v47 + 16);
          char v52 = &v66[v49];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v48, (void *)(v47 + 32), v62, 24);
          unint64_t v49 = *(void *)(v47 + 16);
          char v52 = (char *)v68;
        }
      }
      uint64_t v53 = v49 + 24 * *(unsigned int *)(v47 + 24);
      long long v54 = *(_OWORD *)v52;
      *(void *)(v53 + 16) = *((void *)v52 + 2);
      *(_OWORD *)uint64_t v53 = v54;
      ++*(_DWORD *)(v47 + 24);
      uint64_t v28 = mlir::Diagnostic::operator mlir::LogicalResult();
      if ((void)v79) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v79);
      }
      if (v87)
      {
        int v55 = (void **)__p;
        if (__p)
        {
          uint64_t v56 = v86;
          unsigned int v57 = __p;
          if (v86 != __p)
          {
            do
              uint64_t v56 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v56 - 1);
            while (v56 != v55);
            unsigned int v57 = __p;
          }
          uint64_t v86 = v55;
          operator delete(v57);
        }
        BOOL v41 = v83;
        if (!v83) {
          goto LABEL_75;
        }
        uint64_t v58 = v84;
        unsigned int v43 = v83;
        if (v84 == v83)
        {
LABEL_74:
          uint64_t v84 = v41;
          operator delete(v43);
LABEL_75:
          if (v81 != &v82) {
            free(v81);
          }
          goto LABEL_77;
        }
        do
        {
          uint64_t v60 = (void *)*--v58;
          unint64_t v59 = v60;
          *uint64_t v58 = 0;
          if (v60) {
            operator delete[](v59);
          }
        }
        while (v58 != v41);
LABEL_73:
        unsigned int v43 = v83;
        goto LABEL_74;
      }
      goto LABEL_77;
    }
    v12 += 4;
    if (!--v11) {
      goto LABEL_14;
    }
  }
  v68[0] = "operation's operand is unlinked";
  __int16 v69 = 259;
  mlir::emitError(*(void *)(v9 + 24), (uint64_t)v68, (uint64_t)&v79);
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v9 + 24));
  if (mlir::MLIRContext::shouldPrintOpOnDiagnostic(Context))
  {
    uint64_t v30 = mlir::Diagnostic::attachNote((uint64_t *)&v79 + 1, *(void *)(v9 + 24), 1);
    uint64_t v31 = v30 + 16;
    unint64_t v32 = *(void *)(v30 + 16);
    LODWORD(v77[0]) = 3;
    v77[1] = (const void **)"see current operation: ";
    v77[2] = (const void **)23;
    uint64_t v33 = *(unsigned int *)(v30 + 24);
    unint64_t v34 = v77;
    if (v33 >= *(_DWORD *)(v30 + 28))
    {
      unint64_t v64 = v33 + 1;
      BOOL v65 = v32 + 24 * v33 > (unint64_t)v77;
      if (v32 <= (unint64_t)v77 && v65)
      {
        long long v67 = (char *)v77 - v32;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v30 + 32), v64, 24);
        unint64_t v32 = *(void *)(v30 + 16);
        unint64_t v34 = (const void ***)&v67[v32];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v31, (void *)(v30 + 32), v64, 24);
        unint64_t v32 = *(void *)(v30 + 16);
        unint64_t v34 = v77;
      }
    }
    uint64_t v35 = v32 + 24 * *(unsigned int *)(v30 + 24);
    long long v36 = *(_OWORD *)v34;
    *(void *)(v35 + 16) = v34[2];
    *(_OWORD *)uint64_t v35 = v36;
    ++*(_DWORD *)(v30 + 24);
    mlir::OpPrintingFlags::OpPrintingFlags((mlir::OpPrintingFlags *)v77);
    int64_t v37 = (const mlir::OpPrintingFlags *)mlir::OpPrintingFlags::printGenericOpForm((uint64_t)v77, 1);
    mlir::Diagnostic::appendOp((mlir::Diagnostic *)v30, (mlir::Operation *)v9, v37);
  }
  uint64_t v28 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v79);
  if ((void)v79) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v79);
  }
  if (v87)
  {
    __int16 v38 = (void **)__p;
    if (__p)
    {
      __int16 v39 = v86;
      int v40 = __p;
      if (v86 != __p)
      {
        do
          __int16 v39 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v39 - 1);
        while (v39 != v38);
        int v40 = __p;
      }
      uint64_t v86 = v38;
      operator delete(v40);
    }
    BOOL v41 = v83;
    if (!v83) {
      goto LABEL_75;
    }
    uint64_t v42 = v84;
    unsigned int v43 = v83;
    if (v84 == v83) {
      goto LABEL_74;
    }
    do
    {
      uint64_t v45 = (void *)*--v42;
      uint64_t v44 = v45;
      *uint64_t v42 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v42 != v41);
    goto LABEL_73;
  }
LABEL_77:
  if (v88 != v90) {
    free(v88);
  }
  return v28;
}

uint64_t mlir::impl::ensureRegionTerminator(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = a2 + 16;
  long long v16 = *(_OWORD *)(a2 + 16);
  uint64_t v10 = (void *)*a1;
  if ((void *)*a1 == a1)
  {
    mlir::ValueRange::ValueRange(v17, 0, 0);
    mlir::OpBuilder::createBlock((void *)a2, (uint64_t)a1, 0, v17[0], v17[1], 0, 0);
    uint64_t v10 = (void *)*a1;
  }
  if (v10) {
    uint64_t v12 = v10 - 1;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (void *)v12[4];
  if (v13 == v12 + 4
    || (uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>(v13 + 6), (result & 1) == 0))
  {
    *(void *)(a2 + 16) = v12;
    *(void *)(a2 + 24) = v12 + 4;
    uint64_t v15 = (mlir::Operation *)a4(a5, a2, a3);
    uint64_t result = (uint64_t)mlir::OpBuilder::insert((mlir::OpBuilder *)a2, v15);
  }
  if ((void)v16)
  {
    *(_OWORD *)uint64_t v9 = v16;
  }
  else
  {
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
  }
  return result;
}

uint64_t mlir::impl::ensureRegionTerminator(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  v6[0] = *a2;
  memset(&v6[1], 0, 24);
  return mlir::impl::ensureRegionTerminator(a1, (uint64_t)v6, a3, a4, a5);
}

uint64_t mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectFoldInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::DialectFoldInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    uint64_t v4 = *(void *)(v1 + 3848);
    LODWORD(v5) = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    BOOL v6 = (uint64_t *)(v2 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == v4) {
      goto LABEL_9;
    }
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & (v3 - 1);
      uint64_t v7 = *(void *)(v2 + 16 * v5);
      if (v7 == v4)
      {
        BOOL v6 = (uint64_t *)(v2 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  BOOL v6 = (uint64_t *)(v2 + 16 * v3);
LABEL_9:
  if (v6 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v6[1];
  }
}

BOOL mlir::detail::constant_op_binder<mlir::Attribute>::match(unint64_t **a1, uint64_t a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(a2 + 48);
  if (!mlir::OperationName::hasTrait<mlir::OpTrait::ConstantLike>((void *)(a2 + 48))) {
    return 0;
  }
  v13[0] = v14;
  v13[1] = (void *)0x100000000;
  if (!(*(unsigned __int8 (**)(void, uint64_t, void, void, void **))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), a2, 0, 0, v13))
  {
    uint64_t v9 = *v4;
    if (*(_UNKNOWN **)(*v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v12);
      if (!Values) {
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t Values = *(void *)(v9 + 24);
      if (!Values) {
        goto LABEL_3;
      }
    }
    if (mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values))
    {
      uint64_t v11 = mlir::Dialect::getRegisteredInterface<mlir::DialectFoldInterface>(Values);
      if (v11) {
        (*(void (**)(uint64_t, uint64_t, void, void, void **))(*(void *)v11 + 16))(v11, a2, 0, 0, v13);
      }
    }
  }
LABEL_3:
  uint64_t v5 = v13[0];
  unint64_t v6 = *(void *)v13[0] & 0xFFFFFFFFFFFFFFF8;
  BOOL v7 = v6 != 0;
  if (v6 && *a1)
  {
    **a1 = v6;
    uint64_t v5 = v13[0];
  }
  if (v5 != v14) {
    free(v5);
  }
  return v7;
}

uint64_t *std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(uint64_t *a1, uint64_t *a2, uint64_t **a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  BOOL v7 = a2;
  int v8 = a1;
  if (a4 != 3)
  {
    if (a4 == 2) {
      goto LABEL_53;
    }
    if (a6 < a4)
    {
      if (a4 >= 0) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = a4 + 1;
      }
      uint64_t v13 = v12 >> 1;
      unint64_t v14 = &a1[4 * (v12 >> 1)];
      uint64_t v15 = **a3;
      uint64_t v16 = *a3[1];
      uint64_t v17 = (uint64_t)(v14 - 4);
      if (*(void *)(v15 + (((uint64_t)v14 - v16 - 32) >> 2)))
      {
        uint64_t v18 = 4 * v13;
        uint64_t v19 = v13;
        while (1)
        {
          uint64_t v20 = v18 * 8 - 32;
          if (v18 == 4) {
            break;
          }
          --v19;
          uint64_t v21 = *(void *)(v15 + (((uint64_t)&a1[v18 - 8] - v16) >> 2));
          v18 -= 4;
          if (!v21)
          {
            uint64_t v17 = (uint64_t)a1 + v20 - 32;
            goto LABEL_56;
          }
        }
        BOOL v41 = a1;
        uint64_t v42 = a4 - v13;
        if (!*(void *)(v15 + (((uint64_t)v14 - v16) >> 2)))
        {
LABEL_89:
          uint64_t v55 = (uint64_t)(v7 + 4);
          uint64_t v56 = (uint64_t)&v8[4 * v13 + 4] - v16;
          unsigned int v43 = v14;
          while (1)
          {
            v43 += 4;
            if (v43 == v7) {
              goto LABEL_93;
            }
            --v42;
            uint64_t v57 = *(void *)(v15 + (v56 >> 2));
            v56 += 32;
            if (v57) {
              goto LABEL_92;
            }
          }
        }
      }
      else
      {
        uint64_t v19 = v13;
LABEL_56:
        BOOL v41 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(a1, v17, a3, v19, a5, a6);
        uint64_t v15 = **a3;
        uint64_t v16 = *a3[1];
        uint64_t v42 = a4 - v13;
        if (!*(void *)(v15 + (((uint64_t)v14 - v16) >> 2))) {
          goto LABEL_89;
        }
      }
      unsigned int v43 = v14;
LABEL_92:
      uint64_t v55 = std::__stable_partition_impl<std::_ClassicAlgPolicy,mlir::OpTrait::impl::foldCommutative(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)::$_0 &,mlir::OpOperand *,long,std::pair<mlir::OpOperand *,long>>(v43, v7, a3, v42, a5, a6);
LABEL_93:
      if (v41 == v14) {
        return (uint64_t *)v55;
      }
      if (v14 == (uint64_t *)v55) {
        return v41;
      }
      std::swap[abi:nn180100]<mlir::OpOperand>(v41, v14);
      BOOL v7 = v41 + 4;
      for (uint64_t i = v14 + 4; i != (uint64_t *)v55; i += 4)
      {
        if (v7 == v14) {
          unint64_t v14 = i;
        }
        std::swap[abi:nn180100]<mlir::OpOperand>(v7, i);
        v7 += 4;
      }
      if (v7 != v14)
      {
        unint64_t v59 = v7;
        uint64_t v60 = v14;
        while (1)
        {
          std::swap[abi:nn180100]<mlir::OpOperand>(v59, v14);
          v14 += 4;
          BOOL v61 = v59 + 4 == v60;
          if (v14 == (uint64_t *)v55)
          {
            if (v59 + 4 == v60) {
              return v7;
            }
            unint64_t v14 = v60 + 4;
            for (v59 += 8; ; v59 += 4)
            {
              std::swap[abi:nn180100]<mlir::OpOperand>(v59 - 4, v60);
              BOOL v61 = v59 == v60;
              if (v14 != (uint64_t *)v55) {
                break;
              }
              if (v59 == v60) {
                return v7;
              }
            }
          }
          else
          {
            v59 += 4;
          }
          if (v61) {
            uint64_t v60 = v14;
          }
        }
      }
      return v14;
    }
    *a5 = 0;
    a5[1] = 0;
    unint64_t v22 = (uint64_t *)a1[1];
    a5[2] = a1[2];
    if (v22)
    {
      *unint64_t v22 = *a1;
      if (*a1) {
        *(void *)(*a1 + 8) = a1[1];
      }
    }
    a1[1] = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[3] = 0;
    uint64_t v23 = (uint64_t *)a1[1];
    if (v23)
    {
      *uint64_t v23 = *a1;
      if (*a1) {
        *(void *)(*a1 + 8) = a1[1];
      }
    }
    a1[1] = 0;
    *a5 = 0;
    a5[1] = 0;
    a5[3] = a1[3];
    a1[3] = 0;
    unint64_t v24 = (uint64_t *)a5[3];
    if (v24)
    {
      uint64_t v25 = *v24;
      *a5 = *v24;
      a5[1] = (uint64_t)v24;
      if (v25) {
        *(void *)(v25 + 8) = a5;
      }
      *unint64_t v24 = (uint64_t)a5;
    }
    unint64_t v26 = a5 + 4;
    uint64_t v27 = a1 + 4;
    uint64_t v28 = 1;
    if (a1 + 4 == a2)
    {
      __int16 v38 = a1;
      __int16 v39 = (uint64_t *)a1[1];
      if (!v39)
      {
LABEL_61:
        uint64_t v44 = (uint64_t *)v38[5];
        if (v44)
        {
          uint64_t *v44 = *a2;
          if (*a2) {
            *(void *)(*a2 + 8) = v38[5];
          }
        }
        void v38[5] = 0;
        uint64_t *v8 = 0;
        v8[1] = 0;
        v8[3] = v38[7];
        v38[7] = 0;
        uint64_t v45 = (uint64_t *)v8[3];
        if (v45)
        {
          uint64_t v46 = *v45;
          uint64_t *v8 = *v45;
          v8[1] = (uint64_t)v45;
          if (v46) {
            *(void *)(v46 + 8) = v8;
          }
          uint64_t *v45 = (uint64_t)v8;
        }
        BOOL v7 = v8 + 4;
        if (v26 > a5)
        {
          uint64_t v47 = a5;
          uint64_t v48 = v8 + 4;
          do
          {
            unint64_t v49 = (uint64_t *)v48[1];
            if (v49)
            {
              *unint64_t v49 = *v48;
              if (*v48) {
                *(void *)(*v48 + 8) = v48[1];
              }
            }
            unint64_t v50 = (uint64_t *)v47[1];
            if (v50)
            {
              *unint64_t v50 = *v47;
              if (*v47) {
                *(void *)(*v47 + 8) = v47[1];
              }
            }
            v47[1] = 0;
            *uint64_t v48 = 0;
            v48[1] = 0;
            void v48[3] = v47[3];
            v47[3] = 0;
            uint64_t v51 = (uint64_t *)v48[3];
            if (v51)
            {
              uint64_t v52 = *v51;
              *uint64_t v48 = *v51;
              v48[1] = (uint64_t)v51;
              if (v52) {
                *(void *)(v52 + 8) = v48;
              }
              uint64_t *v51 = (uint64_t)v48;
            }
            v47 += 4;
            v48 += 4;
          }
          while (v47 < v26);
        }
        if (a5 && v28)
        {
          uint64_t v53 = (void **)(a5 + 1);
          do
          {
            if (*v53)
            {
              **uint64_t v53 = *(v53 - 1);
              uint64_t v54 = (uint64_t)*(v53 - 1);
              if (v54) {
                *(void *)(v54 + 8) = *v53;
              }
            }
            v53 += 4;
            --v28;
          }
          while (v28);
        }
        return v7;
      }
    }
    else
    {
      unint64_t v29 = a1 + 4;
      do
      {
        while (*(void *)(**a3 + (((uint64_t)v27 - *a3[1]) >> 2)))
        {
          uint64_t *v26 = 0;
          v26[1] = 0;
          uint64_t v30 = (uint64_t *)v29[1];
          void v26[2] = v29[2];
          if (v30)
          {
            uint64_t *v30 = *v29;
            if (*v29) {
              *(void *)(*v29 + 8) = v29[1];
            }
          }
          v29[1] = 0;
          uint64_t *v26 = 0;
          v26[1] = 0;
          void v26[3] = 0;
          uint64_t v31 = (uint64_t *)v29[1];
          if (v31)
          {
            uint64_t *v31 = *v29;
            if (*v29) {
              *(void *)(*v29 + 8) = v29[1];
            }
          }
          v29[1] = 0;
          uint64_t *v26 = 0;
          v26[1] = 0;
          void v26[3] = v29[3];
          v29[3] = 0;
          unint64_t v32 = (uint64_t *)v26[3];
          if (v32)
          {
            uint64_t v33 = *v32;
            uint64_t *v26 = *v32;
            v26[1] = (uint64_t)v32;
            if (v33) {
              *(void *)(v33 + 8) = v26;
            }
            *unint64_t v32 = (uint64_t)v26;
          }
          ++v28;
          v26 += 4;
          v29 += 4;
          v27 += 4;
          if (v29 == a2) {
            goto LABEL_50;
          }
        }
        unint64_t v34 = (uint64_t *)v8[1];
        if (v34)
        {
          *unint64_t v34 = *v8;
          if (*v8) {
            *(void *)(*v8 + 8) = v8[1];
          }
        }
        uint64_t v35 = (uint64_t *)v29[1];
        if (v35)
        {
          *uint64_t v35 = *v29;
          if (*v29) {
            *(void *)(*v29 + 8) = v29[1];
          }
        }
        v29[1] = 0;
        uint64_t *v8 = 0;
        v8[1] = 0;
        v8[3] = v29[3];
        v29[3] = 0;
        long long v36 = (uint64_t *)v8[3];
        if (v36)
        {
          uint64_t v37 = *v36;
          uint64_t *v8 = *v36;
          v8[1] = (uint64_t)v36;
          if (v37) {
            *(void *)(v37 + 8) = v8;
          }
          *long long v36 = (uint64_t)v8;
        }
        v8 += 4;
        v29 += 4;
        v27 += 4;
      }
      while (v29 != a2);
LABEL_50:
      __int16 v38 = v29 - 4;
      __int16 v39 = (uint64_t *)v8[1];
      if (!v39) {
        goto LABEL_61;
      }
    }
    *__int16 v39 = *v8;
    if (*v8) {
      *(void *)(*v8 + 8) = v8[1];
    }
    goto LABEL_61;
  }
  if (!*(void *)(**a3 + (((uint64_t)a1 - *a3[1] + 32) >> 2)))
  {
    std::swap[abi:nn180100]<mlir::OpOperand>(a1, a1 + 4);
    a1 = v8 + 4;
LABEL_53:
    std::swap[abi:nn180100]<mlir::OpOperand>(a1, v7);
    return v7;
  }
  std::swap[abi:nn180100]<mlir::OpOperand>(a1 + 4, a2);
  std::swap[abi:nn180100]<mlir::OpOperand>(v8, v8 + 4);
  return v8 + 4;
}

uint64_t *std::swap[abi:nn180100]<mlir::OpOperand>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)result[1];
  if (v2)
  {
    *uint64_t v2 = *result;
    if (*result) {
      *(void *)(*result + 8) = result[1];
    }
  }
  result[1] = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v15 = (void *)result[3];
  uint64_t v3 = v15;
  result[3] = 0;
  if (v3)
  {
    unint64_t v14 = v3;
    uint64_t v4 = *v3;
    uint64_t v13 = v4;
    if (v4)
    {
      *(void *)(v4 + 8) = &v13;
      uint64_t v5 = (uint64_t *)result[1];
      void *v3 = &v13;
      if (v5)
      {
        uint64_t *v5 = *result;
        if (*result) {
          *(void *)(*result + 8) = result[1];
        }
      }
    }
    else
    {
      void *v3 = &v13;
    }
  }
  unint64_t v6 = (uint64_t *)a2[1];
  if (v6)
  {
    *unint64_t v6 = *a2;
    if (*a2) {
      *(void *)(*a2 + 8) = a2[1];
    }
  }
  a2[1] = 0;
  *uint64_t result = 0;
  result[1] = 0;
  result[3] = a2[3];
  a2[3] = 0;
  BOOL v7 = (uint64_t *)result[3];
  if (v7)
  {
    result[1] = (uint64_t)v7;
    uint64_t v8 = *v7;
    *uint64_t result = *v7;
    if (v8) {
      *(void *)(v8 + 8) = result;
    }
    uint64_t *v7 = (uint64_t)result;
  }
  uint64_t v9 = (uint64_t *)a2[1];
  if (v9)
  {
    *uint64_t v9 = *a2;
    if (*a2) {
      *(void *)(*a2 + 8) = a2[1];
    }
  }
  if (v14)
  {
    *unint64_t v14 = v13;
    if (v13) {
      *(void *)(v13 + 8) = v14;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v10 = v15;
  a2[3] = (uint64_t)v15;
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  if (v10)
  {
    a2[1] = (uint64_t)v10;
    uint64_t v11 = *v10;
    *a2 = *v10;
    if (v11)
    {
      *(void *)(v11 + 8) = a2;
      uint64_t v12 = v14;
      *uint64_t v10 = (uint64_t)a2;
      if (v12)
      {
        *uint64_t v12 = v13;
        if (v13) {
          *(void *)(v13 + 8) = v14;
        }
      }
    }
    else
    {
      *uint64_t v10 = (uint64_t)a2;
    }
  }
  return result;
}

void llvm::SmallVectorImpl<mlir::Type>::append<llvm::concat_iterator<mlir::Type,mlir::Type*,mlir::Type*>,void>(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = (void *)*a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v5 = (void *)a2[2];
  unint64_t v6 = (void *)a2[3];
  BOOL v7 = (void *)*a3;
  uint64_t v8 = (void *)a3[1];
  uint64_t v9 = (void *)a3[2];
  uint64_t v10 = (void *)a3[3];
  uint64_t v37 = v4;
  __int16 v38 = v3;
  if (v6 != v10 || v5 != v9)
  {
    while (v3 == v5)
    {
      uint64_t v3 = v5;
      if (v37 != v6)
      {
        unint64_t v26 = &v37;
        uint64_t v3 = v37;
LABEL_26:
        void *v26 = v3 + 1;
        uint64_t v3 = v38;
      }
    }
    unint64_t v26 = &v38;
    goto LABEL_26;
  }
  uint64_t v15 = 0;
  if (v3 != v7 || v4 != v8)
  {
    uint64_t v17 = v4;
    uint64_t v18 = v3;
    while (1)
    {
      if (v18 == v5)
      {
        uint64_t v20 = v6;
        uint64_t v18 = v5;
        if (v17 == v6) {
          goto LABEL_16;
        }
        uint64_t v19 = &v37;
        uint64_t v18 = v17;
      }
      else
      {
        uint64_t v19 = &v38;
      }
      *uint64_t v19 = v18 + 1;
      uint64_t v20 = v37;
      uint64_t v18 = v38;
LABEL_16:
      ++v15;
      uint64_t v17 = v20;
      if (v18 == v7)
      {
        uint64_t v17 = v20;
        if (v20 == v8) {
          break;
        }
      }
    }
  }
  uint64_t v21 = *(unsigned int *)(a1 + 8);
  if (v15 + v21 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v15 + v21, 8);
    uint64_t v3 = (void *)*a2;
    uint64_t v4 = (void *)a2[1];
    uint64_t v5 = (void *)a2[2];
    unint64_t v6 = (void *)a2[3];
    BOOL v7 = (void *)*a3;
    uint64_t v8 = (void *)a3[1];
    uint64_t v9 = (void *)a3[2];
    uint64_t v10 = (void *)a3[3];
    uint64_t v21 = *(unsigned int *)(a1 + 8);
  }
  unint64_t v22 = (void *)(*(void *)a1 + 8 * v21);
  if (v6 != v10 || v5 != v9)
  {
    unint64_t v24 = v4;
    uint64_t v25 = v3;
    while (1)
    {
      if (v24 == v6) {
        unint64_t v29 = 0;
      }
      else {
        unint64_t v29 = v24;
      }
      if (v25 != v5 && v25 != 0) {
        unint64_t v29 = v25;
      }
      *unint64_t v22 = *v29;
      if (v25 == v5 && v24 == v6)
      {
        unint64_t v24 = v6;
        uint64_t v25 = v5;
        ++v22;
      }
      else
      {
        BOOL v27 = v25 == v5;
        if (v25 != v5) {
          unint64_t v24 = v25;
        }
        uint64_t v28 = v24 + 1;
        if (v25 == v5) {
          ++v24;
        }
        else {
          unint64_t v24 = v4;
        }
        if (v25 == v5)
        {
          uint64_t v4 = v28;
          uint64_t v25 = v3;
        }
        else
        {
          uint64_t v25 = v28;
        }
        if (!v27) {
          uint64_t v3 = v28;
        }
        ++v22;
      }
    }
  }
  if (v3 != v7 || v4 != v8)
  {
    uint64_t v31 = v4;
    unint64_t v32 = v3;
    while (1)
    {
      while (1)
      {
        if (v31 == v6) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = v31;
        }
        if (v32 != v5 && v32 != 0) {
          uint64_t v33 = v32;
        }
        *unint64_t v22 = *v33;
        if (v32 == v5 && v31 == v6) {
          break;
        }
        BOOL v35 = v32 == v5;
        if (v32 != v5) {
          uint64_t v31 = v32;
        }
        long long v36 = v31 + 1;
        if (v32 == v5) {
          ++v31;
        }
        else {
          uint64_t v31 = v4;
        }
        if (v32 == v5)
        {
          uint64_t v4 = v36;
          unint64_t v32 = v3;
        }
        else
        {
          unint64_t v32 = v36;
        }
        if (!v35) {
          uint64_t v3 = v36;
        }
        ++v22;
        if (v32 == v7) {
          goto LABEL_78;
        }
      }
      uint64_t v31 = v6;
      unint64_t v32 = v5;
      ++v22;
      if (v5 == v7)
      {
LABEL_78:
        if (v31 == v8) {
          break;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v21 + v15;
}

void *mlir::NamedAttrList::NamedAttrList(void *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  if (a2) {
    uint64_t Value = mlir::ArrayAttr::getValue((mlir::ArrayAttr *)&v5);
  }
  else {
    uint64_t Value = 0;
  }
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  a1[10] = 0;
  mlir::DictionaryAttr::sort(Value, (16 * a2) >> 4, a1);
  a1[10] = v5 | 4;
  return a1;
}

void mlir::NamedAttrList::findDuplicate(uint64_t **this@<X0>, unsigned char *a2@<X8>)
{
  mlir::DictionaryAttr::findDuplicate(this, ((unint64_t)this[10] & 4) != 0, a2);
  if (((_BYTE)this[10] & 4) == 0) {
    this[10] = (uint64_t *)4;
  }
}

unint64_t mlir::NamedAttrList::getDictionary(mlir::NamedAttrList *this, mlir::MLIRContext *a2)
{
  unint64_t v4 = *((void *)this + 10);
  if ((v4 & 4) == 0)
  {
    mlir::DictionaryAttr::sortInPlace((uint64_t **)this);
    *((void *)this + 10) = 4;
LABEL_4:
    unint64_t v4 = *((void *)this + 10) & 7 | mlir::DictionaryAttr::getWithSorted(a2, *(mlir::MLIRContext **)this, *((unsigned int *)this + 2));
    *((void *)this + 10) = v4;
    return v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 <= 7) {
    goto LABEL_4;
  }
  return v4 & 0xFFFFFFFFFFFFFFF8;
}

void mlir::NamedAttrList::append(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a4;
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v11);
  __int16 v10 = 261;
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v9);
  mlir::NamedAttrList::append(a1, v8, v11);
}

void mlir::NamedAttrList::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::NamedAttribute::NamedAttribute(&v11, a2, a3);
  long long v4 = v11;
  long long v12 = v11;
  unint64_t v5 = *(void *)(a1 + 80);
  if ((v5 & 4) != 0)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    if (v6)
    {
      int v7 = mlir::NamedAttribute::operator<((uint64_t *)(*(void *)a1 + 16 * v6 - 16), (uint64_t *)&v12);
      unint64_t v5 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFBLL;
      if (!v7)
      {
        char v8 = 0;
LABEL_7:
        LOBYTE(v5) = v8 | v5;
        long long v4 = v12;
        goto LABEL_8;
      }
    }
    else
    {
      LOBYTE(v5) = v5 & 0xFB;
    }
    char v8 = 4;
    goto LABEL_7;
  }
LABEL_8:
  *(void *)(a1 + 80) = v5 & 7;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9 >= *(_DWORD *)(a1 + 12))
  {
    long long v10 = v4;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v9 + 1, 16);
    long long v4 = v10;
    LODWORD(v9) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(void *)a1 + 16 * v9) = v4;
  ++*(_DWORD *)(a1 + 8);
}

void mlir::NamedAttrList::push_back(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  unint64_t v4 = *(void *)(a1 + 80);
  if ((v4 & 4) == 0)
  {
    uint64_t v5 = a3;
    uint64_t v6 = a2;
    goto LABEL_9;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (!v7)
  {
    LOBYTE(v4) = v4 & 0xFB;
    goto LABEL_7;
  }
  int v8 = mlir::NamedAttribute::operator<((uint64_t *)(*(void *)a1 + 16 * v7 - 16), &v12);
  unint64_t v4 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFBLL;
  if (v8)
  {
LABEL_7:
    char v9 = 4;
    goto LABEL_8;
  }
  char v9 = 0;
LABEL_8:
  LOBYTE(v4) = v9 | v4;
  uint64_t v6 = v12;
  uint64_t v5 = v13;
LABEL_9:
  *(void *)(a1 + 80) = v4 & 7;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  long long v11 = (uint64_t *)(*(void *)a1 + 16 * v10);
  *long long v11 = v6;
  v11[1] = v5;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t mlir::NamedAttrList::get(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, a2, a3);
  if (v4) {
    return *((void *)v3 + 1);
  }
  else {
    return 0;
  }
}

mlir::CallGraphNode *mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5 = *(mlir::CallGraphNode **)a1;
  unint64_t v6 = *(unsigned int *)(a1 + 8);
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    if (!v6) {
      return v5;
    }
    while (1)
    {
      uint64_t v11 = v6 >> 1;
      uint64_t v7 = (mlir::CallGraphNode *)((char *)v5 + 16 * (v6 >> 1));
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(v7);
      uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
      size_t v14 = v13;
      size_t v15 = a3 >= v13 ? v13 : a3;
      if (v15)
      {
        int v16 = memcmp(AttrData, a2, v15);
        if (v16) {
          break;
        }
      }
      if (v14 == a3) {
        return v7;
      }
      if (v14 < a3) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v6 = v11;
      if (v11 <= 0) {
        return v5;
      }
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_12;
    }
LABEL_11:
    uint64_t v5 = (mlir::CallGraphNode *)((char *)v7 + 16);
    uint64_t v11 = v6 + ~v11;
    goto LABEL_12;
  }
  if (v6)
  {
    uint64_t v7 = (mlir::CallGraphNode *)((char *)v5 + 16 * v6);
    if (a3)
    {
      uint64_t v8 = 16 * v6;
      while (1)
      {
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(v5);
        char v9 = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        if (v10 == a3 && !memcmp(v9, a2, a3)) {
          break;
        }
        uint64_t v5 = (mlir::CallGraphNode *)((char *)v5 + 16);
        v8 -= 16;
        if (!v8) {
          return v7;
        }
      }
    }
    else
    {
      uint64_t v17 = 16 * v6;
      while (1)
      {
        uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion(v5);
        mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&CallableRegion);
        if (!v18) {
          break;
        }
        uint64_t v5 = (mlir::CallGraphNode *)((char *)v5 + 16);
        v17 -= 16;
        if (!v17) {
          return v7;
        }
      }
    }
  }
  return v5;
}

uint64_t mlir::NamedAttrList::get(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(mlir::CallGraphNode **)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    uint64_t v3 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, (mlir::CallGraphNode *)(*(void *)a1 + 16 * v4), a2);
    char v6 = v7;
  }
  else
  {
    if (!v4) {
      return 0;
    }
    uint64_t v5 = 16 * v4;
    char v6 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v3) != a2)
    {
      uint64_t v3 = (mlir::CallGraphNode *)((char *)v3 + 16);
      v5 -= 16;
      if (!v5) {
        return 0;
      }
    }
  }
  if ((v6 & 1) == 0) {
    return 0;
  }
  return *((void *)v3 + 1);
}

uint64_t mlir::NamedAttrList::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v25 = a2;
  char v6 = *(mlir::CallGraphNode **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = (mlir::CallGraphNode *)(*(void *)a1 + 16 * v7);
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    char v6 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, v8, a2);
    char v10 = v11;
  }
  else
  {
    if (!v7)
    {
LABEL_11:
      if ((*(unsigned char *)(a1 + 80) & 4) != 0)
      {
        uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v25);
        char v6 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, AttrData, v14);
        uint64_t v4 = v25;
      }
      mlir::NamedAttribute::NamedAttribute(v24, v4, a3);
      uint64_t v16 = v24[0];
      uint64_t v15 = v24[1];
      uint64_t v17 = *(mlir::CallGraphNode **)a1;
      uint64_t v18 = *(unsigned int *)(a1 + 8);
      if ((mlir::CallGraphNode *)(*(void *)a1 + 16 * v18) == v6)
      {
        if (v18 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18 + 1, 16);
          uint64_t v18 = *(unsigned int *)(a1 + 8);
          uint64_t v17 = *(mlir::CallGraphNode **)a1;
        }
        uint64_t v23 = (void *)((char *)v17 + 16 * v18);
        *uint64_t v23 = v16;
        v23[1] = v15;
        ++*(_DWORD *)(a1 + 8);
      }
      else
      {
        uint64_t v19 = (v6 - v17) >> 4;
        if (v18 >= *(_DWORD *)(a1 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v18 + 1, 16);
          uint64_t v17 = *(mlir::CallGraphNode **)a1;
          uint64_t v18 = *(unsigned int *)(a1 + 8);
        }
        uint64_t v20 = (void *)((char *)v17 + 16 * v19);
        *((_OWORD *)v17 + v18) = *((_OWORD *)v17 + v18 - 1);
        uint64_t v21 = *(unsigned int *)(a1 + 8);
        uint64_t v22 = *(void *)a1 + 16 * v21 - 16;
        if ((void *)v22 != v20)
        {
          memmove(v20 + 2, v20, v22 - (void)v20);
          LODWORD(v21) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v21 + 1;
        *uint64_t v20 = v16;
        v20[1] = v15;
      }
      uint64_t result = 0;
      goto LABEL_23;
    }
    uint64_t v9 = 16 * v7;
    char v10 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v6) != v4)
    {
      char v6 = (mlir::CallGraphNode *)((char *)v6 + 16);
      v9 -= 16;
      if (!v9)
      {
        char v6 = v8;
        goto LABEL_11;
      }
    }
  }
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t result = *((void *)v6 + 1);
  if (result == a3) {
    return result;
  }
  *((void *)v6 + 1) = a3;
LABEL_23:
  *(void *)(a1 + 80) &= 7uLL;
  return result;
}

uint64_t mlir::NamedAttrList::set(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = a4;
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)&v12);
  __int16 v11 = 261;
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v10);
  return mlir::NamedAttrList::set(a1, v8, v12);
}

uint64_t mlir::NamedAttrList::erase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(mlir::CallGraphNode **)a1;
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  if ((*(unsigned char *)(a1 + 80) & 4) != 0)
  {
    uint64_t v4 = mlir::impl::findAttrSorted<mlir::NamedAttribute const*>(*(mlir::CallGraphNode **)a1, (mlir::CallGraphNode *)(*(void *)a1 + 16 * v5), a2);
    char v7 = v8;
  }
  else
  {
    if (!v5) {
      return 0;
    }
    uint64_t v6 = 16 * v5;
    char v7 = 1;
    while (mlir::CallGraphNode::getCallableRegion(v4) != a2)
    {
      uint64_t v4 = (mlir::CallGraphNode *)((char *)v4 + 16);
      v6 -= 16;
      if (!v6) {
        return 0;
      }
    }
  }
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *((void *)v4 + 1);
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  uint64_t v12 = *(void *)a1 + 16 * v11;
  if ((mlir::CallGraphNode *)v12 != (mlir::CallGraphNode *)((char *)v4 + 16))
  {
    memmove(v4, (char *)v4 + 16, v12 - ((void)v4 + 16));
    LODWORD(v11) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v11 - 1;
  *(void *)(a1 + 80) &= 7uLL;
  return v10;
}

uint64_t mlir::NamedAttrList::erase(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v4 = mlir::NamedAttrList::findAttr<mlir::NamedAttrList const,llvm::StringRef>(a1, a2, a3);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *((void *)v4 + 1);
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  uint64_t v9 = *(void *)a1 + 16 * v8;
  if ((mlir::CallGraphNode *)v9 != (mlir::CallGraphNode *)((char *)v4 + 16))
  {
    memmove(v4, (char *)v4 + 16, v9 - ((void)v4 + 16));
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v8 - 1;
  *(void *)(a1 + 80) &= 7uLL;
  return v7;
}

uint64_t mlir::NamedAttrList::operator llvm::ArrayRef<mlir::NamedAttribute>(uint64_t a1)
{
  return *(void *)a1;
}

void *mlir::OperationState::OperationState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a2;
  *a1 = a2;
  uint64_t v7 = a1 + 1;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v10);
  mlir::OperationName::OperationName(v7, a3, a4, Context);
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 4;
  a1[25] = a1 + 27;
  a1[26] = 0x100000000;
  a1[28] = a1 + 30;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  return a1;
}

double mlir::OperationState::OperationState(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 4;
  a1[25] = a1 + 27;
  *(void *)&double result = 0x100000000;
  a1[26] = 0x100000000;
  a1[28] = a1 + 30;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  return result;
}

void *mlir::OperationState::OperationState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a1 + 4;
  a1[3] = 0x400000000;
  llvm::SmallVectorImpl<mlir::Value>::append<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void>((uint64_t)(a1 + 2), a4, 0, a4, a5);
  a1[8] = a1 + 10;
  a1[9] = 0x400000000;
  if (a7 < 5)
  {
    if (!a7)
    {
      int v20 = 0;
      goto LABEL_9;
    }
    uint64_t v17 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 8), a1 + 10, a7, 8);
    uint64_t v17 = *((unsigned int *)a1 + 18);
  }
  uint64_t v18 = 0;
  uint64_t v19 = a1[8] + 8 * v17;
  do
  {
    *(void *)(v19 + 8 * v18) = mlir::TypeRange::dereference_iterator(a6, v18);
    ++v18;
  }
  while (a7 != v18);
  int v20 = *((_DWORD *)a1 + 18);
LABEL_9:
  *((_DWORD *)a1 + 18) = v20 + a7;
  a1[14] = a1 + 16;
  a1[15] = 0x400000000;
  a1[24] = 0;
  mlir::DictionaryAttr::sort(a9, (16 * a10) >> 4, a1 + 14);
  a1[24] = 4;
  a1[25] = a1 + 27;
  a1[26] = 0x100000000;
  if (a12 < 2)
  {
    if (!a12)
    {
      int v24 = 0;
      goto LABEL_17;
    }
    uint64_t v21 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 25), a1 + 27, a12, 8);
    uint64_t v21 = *((unsigned int *)a1 + 52);
  }
  uint64_t v22 = 0;
  uint64_t v23 = a1[25] + 8 * v21;
  do
  {
    *(void *)(v23 + 8 * v22) = mlir::BlockRange::dereference_iterator(a11, v22);
    ++v22;
  }
  while (a12 != v22);
  int v24 = *((_DWORD *)a1 + 52);
LABEL_17:
  a1[28] = a1 + 30;
  *((_DWORD *)a1 + 52) = v24 + a12;
  a1[29] = 0x100000000;
  a1[31] = 0;
  a1[32] = 0;
  a1[33] = &mlir::detail::TypeIDResolver<void,void>::id;
  a1[34] = 0;
  a1[36] = 0;
  if (a14)
  {
    uint64_t v26 = 8 * a14;
    do
    {
      Address = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress((uint64_t)(a1 + 28), a13, 1);
      uint64_t v28 = a1[28];
      uint64_t v29 = *((unsigned int *)a1 + 58);
      uint64_t v30 = *(void *)Address;
      *(void *)Address = 0;
      *(void *)(v28 + 8 * v29) = v30;
      *((_DWORD *)a1 + 58) = v29 + 1;
      a13 += 8;
      v26 -= 8;
    }
    while (v26);
  }
  return a1;
}

{
  return mlir::OperationState::OperationState(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

void *mlir::OperationState::OperationState(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14)
{
  uint64_t v26 = a2;
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)&v26);
  mlir::OperationName::OperationName(&v25, a3, a4, Context);
  return mlir::OperationState::OperationState(a1, a2, v25, a5, a6, a7, a8, v21, a9, a10, a11, a12, a13, a14);
}

void mlir::OperationState::~OperationState(mlir::OperationState *this)
{
  if (*((void *)this + 32)) {
    (*((void (**)(void))this + 34))(*((void *)this + 35));
  }
  uint64_t v2 = (char *)*((void *)this + 28);
  uint64_t v3 = *((unsigned int *)this + 58);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    char v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(mlir::Region **)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6)
      {
        mlir::Region::~Region(v6);
        operator delete(v7);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = (char *)*((void *)this + 28);
  }
  if (v2 != (char *)this + 240) {
    free(v2);
  }
  uint64_t v8 = (char *)*((void *)this + 25);
  if (v8 != (char *)this + 216) {
    free(v8);
  }
  uint64_t v9 = (char *)*((void *)this + 14);
  if (v9 != (char *)this + 128) {
    free(v9);
  }
  uint64_t v10 = (char *)*((void *)this + 8);
  if (v10 != (char *)this + 80) {
    free(v10);
  }
  uint64_t v11 = (char *)*((void *)this + 2);
  if (v11 != (char *)this + 32) {
    free(v11);
  }
}

void mlir::OperationState::addOperands(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void llvm::SmallVectorImpl<mlir::Value>::append<llvm::detail::indexed_accessor_range_base<mlir::ValueRange,llvm::PointerUnion<mlir::Value const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Value,mlir::Value,mlir::Value>::iterator,void>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  unint64_t v10 = a5 - a3;
  uint64_t v11 = *(unsigned int *)(a1 + 8);
  unint64_t v12 = a5 - a3 + v11;
  if (v12 > *(unsigned int *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v12, 8);
    uint64_t v11 = *(unsigned int *)(a1 + 8);
  }
  uint64_t v13 = *(void *)a1;
  BOOL v14 = a2 != a4;
  if (a5 != v7 || a2 != a4)
  {
    uint64_t v15 = (uint64_t *)(v13 + 8 * v11);
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) != 0 || !v16)
    {
      if ((a2 & 6) == 2 && v16)
      {
        if (v14)
        {
          for (uint64_t i = (uint64_t *)(v16 + 32 * v7 + 24); ; i += 4)
          {
            uint64_t v20 = *i;
            *v15++ = v20;
          }
        }
        if (v10 > 0x12)
        {
          unint64_t v30 = v16 + 32 * v7;
          if ((unint64_t)v15 >= v16 + 32 * a5 || v30 + 24 >= v13 + 8 * (a5 + v11 - v7))
          {
            uint64_t v31 = 4;
            if ((v10 & 3) != 0) {
              uint64_t v31 = v10 & 3;
            }
            v15 += v10 - v31;
            uint64_t v32 = v7 + v10 - v31;
            uint64_t v33 = (unsigned long long *)(v13 + 8 * v11 + 16);
            uint64_t v34 = v7 + v31 - a5;
            BOOL v35 = (const double *)(v30 + 88);
            do
            {
              long long v36 = v35 - 8;
              unsigned long long v37 = (unsigned __int128)vld4q_f64(v36);
              unsigned long long v38 = (unsigned __int128)vld4q_f64(v35);
              *(v33 - 1) = v37;
              *uint64_t v33 = v38;
              v33 += 2;
              v35 += 16;
              v34 += 4;
            }
            while (v34);
            uint64_t v7 = v32;
          }
        }
        uint64_t v39 = a5 - v7;
        int v40 = (uint64_t *)(v16 + 32 * v7 + 24);
        do
        {
          uint64_t v41 = *v40;
          v40 += 4;
          *v15++ = v41;
          --v39;
        }
        while (v39);
      }
      else
      {
        if (v14)
        {
          while (1)
            *v15++ = mlir::detail::OpResultImpl::getNextResultAtOffset(a2 & 0xFFFFFFFFFFFFFFF8, v7++);
        }
        do
          *v15++ = mlir::detail::OpResultImpl::getNextResultAtOffset(a2 & 0xFFFFFFFFFFFFFFF8, v7++);
        while (a5 != v7);
      }
    }
    else
    {
      if (v14)
      {
        for (uint64_t j = (uint64_t *)(v16 + 8 * v7); ; ++j)
        {
          uint64_t v18 = *j;
          *v15++ = v18;
        }
      }
      if (v10 < 0xA) {
        goto LABEL_25;
      }
      uint64_t v21 = 8 * v11 + v13;
      uint64_t v22 = 8 * v7;
      if (v21 - (v16 + 8 * v7) < 0x20) {
        goto LABEL_25;
      }
      v15 += v10 & 0xFFFFFFFFFFFFFFFCLL;
      v7 += v10 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v23 = (_OWORD *)(v21 + 16);
      int v24 = (long long *)(v22 + v16 + 16);
      unint64_t v25 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *uint64_t v23 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        uint64_t v27 = a5 - v7;
        uint64_t v28 = (uint64_t *)(v16 + 8 * v7);
        do
        {
          uint64_t v29 = *v28++;
          *v15++ = v29;
          --v27;
        }
        while (v27);
      }
    }
  }
  *(_DWORD *)(a1 + 8) += v10;
}

void mlir::OperationState::addSuccessors(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 50;
  uint64_t v7 = a1[52];
  unint64_t v8 = a3 + v7;
  if (v8 > a1[53])
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 50), a1 + 54, v8, 8);
    LODWORD(v7) = a1[52];
  }
  if (a3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *v6 + 8 * v7;
    do
    {
      *(void *)(v10 + 8 * v9) = mlir::BlockRange::dereference_iterator(a2, v9);
      ++v9;
    }
    while (a3 != v9);
    LODWORD(v7) = a1[52];
  }
  a1[52] = v7 + a3;
}

uint64_t mlir::OperationState::addRegion(mlir::OperationState *this)
{
  uint64_t v2 = operator new(0x18uLL);
  *uint64_t v2 = v2;
  v2[1] = v2;
  void v2[2] = 0;
  uint64_t v7 = v2;
  uint64_t v3 = *((unsigned int *)this + 58);
  if (v3 >= *((_DWORD *)this + 59))
  {
    llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::growAndEmplaceBack<mlir::Region*>((uint64_t)this + 224, &v7);
    return *(void *)(*((void *)this + 28) + 8 * *((unsigned int *)this + 58) - 8);
  }
  else
  {
    uint64_t v4 = *((void *)this + 28);
    *(void *)(v4 + 8 * v3) = v2;
    unsigned int v5 = v3 + 1;
    *((_DWORD *)this + 58) = v5;
    return *(void *)(v4 + 8 * v5 - 8);
  }
}

char *mlir::OperationState::addRegion(uint64_t a1, unint64_t a2)
{
  double result = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(a1 + 224, a2, 1);
  uint64_t v4 = *(void *)(a1 + 224);
  uint64_t v5 = *(unsigned int *)(a1 + 232);
  uint64_t v6 = *(void *)result;
  *(void *)double result = 0;
  *(void *)(v4 + 8 * v5) = v6;
  *(_DWORD *)(a1 + 232) = v5 + 1;
  return result;
}

char *mlir::OperationState::addRegions(char *result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t)(result + 224);
    uint64_t v6 = 8 * a3;
    do
    {
      double result = llvm::SmallVectorTemplateBase<std::unique_ptr<mlir::Region>,false>::reserveForParamAndGetAddress(v5, a2, 1);
      uint64_t v7 = *((void *)v4 + 28);
      uint64_t v8 = *((unsigned int *)v4 + 58);
      uint64_t v9 = *(void *)result;
      *(void *)double result = 0;
      *(void *)(v7 + 8 * v8) = v9;
      *((_DWORD *)v4 + 58) = v8 + 1;
      a2 += 8;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t mlir::detail::OperandStorage::OperandStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)a1 = a5 & 0x7FFFFFFF;
  *(_DWORD *)(a1 + 4) = a5 & 0x7FFFFFFF;
  if ((a5 & 0x7FFFFFFF) != 0)
  {
    unint64_t v7 = a4 & 0xFFFFFFFFFFFFFFF8;
    if ((a4 & 6) != 0 || !v7)
    {
      if ((a4 & 6) == 2 && v7)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0;
        do
        {
          uint64_t v15 = (uint64_t *)(*(void *)(a1 + 8) + v13);
          unint64_t v16 = *(uint64_t **)(v7 + 24 + v13);
          void v15[2] = a2;
          void v15[3] = (uint64_t)v16;
          *uint64_t v15 = 0;
          v15[1] = (uint64_t)v16;
          uint64_t v17 = *v16;
          *uint64_t v15 = *v16;
          if (v17) {
            *(void *)(v17 + 8) = v15;
          }
          *unint64_t v16 = (uint64_t)v15;
          ++v14;
          v13 += 32;
        }
        while (v14 < *(unsigned int *)(a1 + 4));
      }
      else
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        do
        {
          uint64_t v20 = (uint64_t *)(*(void *)(a1 + 8) + v18);
          uint64_t NextResultAtOffset = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v19);
          void v20[2] = a2;
          void v20[3] = (uint64_t)NextResultAtOffset;
          *uint64_t v20 = 0;
          v20[1] = (uint64_t)NextResultAtOffset;
          uint64_t v22 = *NextResultAtOffset;
          *uint64_t v20 = *NextResultAtOffset;
          if (v22) {
            *(void *)(v22 + 8) = v20;
          }
          *uint64_t NextResultAtOffset = (uint64_t)v20;
          ++v19;
          v18 += 32;
        }
        while (v19 < *(unsigned int *)(a1 + 4));
      }
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a1 + 8) + v8);
        uint64_t v11 = *(uint64_t **)(v7 + 8 * v9);
        void v10[2] = a2;
        v10[3] = (uint64_t)v11;
        *uint64_t v10 = 0;
        v10[1] = (uint64_t)v11;
        uint64_t v12 = *v11;
        *uint64_t v10 = *v11;
        if (v12) {
          *(void *)(v12 + 8) = v10;
        }
        *uint64_t v11 = (uint64_t)v10;
        ++v9;
        v8 += 32;
      }
      while (v9 < *(unsigned int *)(a1 + 4));
    }
  }
  return a1;
}

void mlir::detail::OperandStorage::~OperandStorage(mlir::detail::OperandStorage *this)
{
  uint64_t v1 = *((unsigned int *)this + 1);
  if (v1)
  {
    uint64_t v2 = 32 * v1;
    uint64_t v3 = (void **)(*((void *)this + 1) + 8);
    do
    {
      if (*v3)
      {
        void **v3 = *(v3 - 1);
        uint64_t v4 = (uint64_t)*(v3 - 1);
        if (v4) {
          *(void *)(v4 + 8) = *v3;
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  if ((*(_DWORD *)this & 0x80000000) != 0) {
    free(*((void **)this + 1));
  }
}

uint64_t *mlir::detail::OperandStorage::setOperands(mlir::detail::OperandStorage *a1, mlir::Operation *a2, uint64_t a3, unsigned int a4)
{
  double result = mlir::detail::OperandStorage::resize(a1, a2, a4);
  if (a4)
  {
    unint64_t v7 = result;
    uint64_t v8 = (uint64_t **)(a3 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = a3 & 6;
    if ((a3 & 6) != 0 || !v8)
    {
      uint64_t v15 = a4;
      if (v9 == 2 && v8)
      {
        unint64_t v16 = v8 + 3;
        do
        {
          uint64_t v17 = *v16;
          uint64_t v18 = (uint64_t *)v7[1];
          if (v18)
          {
            *uint64_t v18 = *v7;
            if (*v7) {
              *(void *)(*v7 + 8) = v7[1];
            }
          }
          v7[3] = (uint64_t)v17;
          uint64_t v19 = *v17;
          uint64_t *v7 = *v17;
          v7[1] = (uint64_t)v17;
          if (v19) {
            *(void *)(v19 + 8) = v7;
          }
          uint64_t *v17 = (uint64_t)v7;
          v7 += 4;
          v16 += 4;
          --v15;
        }
        while (v15);
      }
      else
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          double result = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v8, i);
          uint64_t v21 = (uint64_t *)v7[1];
          if (v21)
          {
            *uint64_t v21 = *v7;
            if (*v7) {
              *(void *)(*v7 + 8) = v7[1];
            }
          }
          v7[3] = (uint64_t)result;
          uint64_t v22 = *result;
          uint64_t *v7 = *result;
          v7[1] = (uint64_t)result;
          if (v22) {
            *(void *)(v22 + 8) = v7;
          }
          *double result = (uint64_t)v7;
          v7 += 4;
        }
      }
    }
    else
    {
      uint64_t v10 = a4;
      do
      {
        uint64_t v12 = *v8++;
        uint64_t v11 = v12;
        uint64_t v13 = (uint64_t *)v7[1];
        if (v13)
        {
          *uint64_t v13 = *v7;
          if (*v7) {
            *(void *)(*v7 + 8) = v7[1];
          }
        }
        v7[3] = (uint64_t)v11;
        uint64_t v14 = *v11;
        uint64_t *v7 = *v11;
        v7[1] = (uint64_t)v11;
        if (v14) {
          *(void *)(v14 + 8) = v7;
        }
        *uint64_t v11 = (uint64_t)v7;
        v7 += 4;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

void *mlir::detail::OperandStorage::resize(mlir::detail::OperandStorage *this, mlir::Operation *a2, unsigned int a3)
{
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = (void *)v5;
  uint64_t v7 = *((unsigned int *)this + 1);
  if (v7 >= a3)
  {
    if (v7 != a3)
    {
      unsigned int v24 = a3;
      do
      {
        unint64_t v25 = (void *)(v5 + 32 * v24);
        long long v26 = (void *)v25[1];
        if (v26)
        {
          void *v26 = *v25;
          if (*v25) {
            *(void *)(*v25 + 8) = v25[1];
          }
        }
        ++v24;
      }
      while (v7 != v24);
    }
    *((_DWORD *)this + 1) = a3;
  }
  else
  {
    uint64_t v9 = *(_DWORD *)this & 0x7FFFFFFF;
    if (v9 >= a3)
    {
      do
      {
        uint64_t v19 = (void *)(v5 + 32 * v7);
        *uint64_t v19 = 0;
        v19[1] = 0;
        void v19[2] = a2;
        v19[3] = 0;
        LODWORD(v7) = *((_DWORD *)this + 1) + 1;
        *((_DWORD *)this + 1) = v7;
      }
      while (v7 != a3);
    }
    else
    {
      unint64_t v10 = (v9 + 2) | ((unint64_t)(v9 + 2) >> 1) | (((v9 + 2) | ((unint64_t)(v9 + 2) >> 1)) >> 2);
      unint64_t v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      int v12 = (v11 >> 16) | v11;
      if (v12 + 1 > a3) {
        unsigned int v13 = v12 + 1;
      }
      else {
        unsigned int v13 = a3;
      }
      uint64_t v14 = malloc(32 * v13);
      uint64_t v6 = v14;
      if (v7)
      {
        uint64_t v15 = (uint64_t **)(v5 + 24);
        uint64_t v16 = 32 * v7;
        uint64_t v17 = 32 * v7;
        uint64_t v18 = v14;
        do
        {
          uint64_t v20 = *(v15 - 2);
          void v18[2] = (uint64_t)*(v15 - 1);
          if (v20)
          {
            *uint64_t v20 = *(v15 - 3);
            uint64_t v21 = (uint64_t)*(v15 - 3);
            if (v21) {
              *(void *)(v21 + 8) = *(v15 - 2);
            }
          }
          *(v15 - 2) = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          uint64_t v22 = *v15;
          _OWORD v18[3] = (uint64_t)*v15;
          *uint64_t v15 = 0;
          if (v22)
          {
            uint64_t v23 = *v22;
            *uint64_t v18 = *v22;
            v18[1] = (uint64_t)v22;
            if (v23) {
              *(void *)(v23 + 8) = v18;
            }
            *uint64_t v22 = (uint64_t)v18;
          }
          v18 += 4;
          v15 += 4;
          v17 -= 32;
        }
        while (v17);
        uint64_t v27 = (void **)(v5 + 8);
        do
        {
          if (*v27)
          {
            **uint64_t v27 = *(v27 - 1);
            uint64_t v28 = (uint64_t)*(v27 - 1);
            if (v28) {
              *(void *)(v28 + 8) = *v27;
            }
          }
          v27 += 4;
          v16 -= 32;
        }
        while (v16);
      }
      if (v7 != a3)
      {
        do
        {
          uint64_t v29 = &v14[4 * v7];
          *uint64_t v29 = 0;
          v29[1] = 0;
          v29[2] = a2;
          v29[3] = 0;
          LODWORD(v7) = v7 + 1;
        }
        while (a3 != v7);
        *((_DWORD *)this + 1) = a3;
      }
      if ((*(_DWORD *)this & 0x80000000) != 0) {
        free(*((void **)this + 1));
      }
      *((void *)this + 1) = v6;
      *(_DWORD *)this = v13 | 0x80000000;
    }
  }
  return v6;
}

uint64_t mlir::detail::OperandStorage::setOperands(uint64_t result, mlir::Operation *a2, int a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6 = a6;
  uint64_t v10 = result;
  uint64_t v11 = a6 - a4;
  if (a6 == a4)
  {
    unsigned int v6 = a4;
    if (!a4) {
      return result;
    }
    goto LABEL_6;
  }
  if (a6 < a4)
  {
    double result = (uint64_t)mlir::detail::OperandStorage::eraseOperands((uint64_t *)result, a6 + a3, a4 - a6);
    if (!v6) {
      return result;
    }
LABEL_6:
    uint64_t v12 = 0;
    uint64_t v13 = *(void *)(v10 + 8);
    BOOL v14 = (a5 & 6) != 0;
    BOOL v15 = (a5 & 6) != 2;
    unint64_t v16 = a5 & 0xFFFFFFFFFFFFFFF8;
    if (v16) {
      char v17 = v14;
    }
    else {
      char v17 = 1;
    }
    if (v16) {
      char v18 = v15;
    }
    else {
      char v18 = 1;
    }
    for (uint64_t i = 24; ; i += 32)
    {
      if (v17)
      {
        if (v18)
        {
          double result = mlir::detail::OpResultImpl::getNextResultAtOffset(v16, v12);
          uint64_t v20 = (void *)(v13 + 32 * (a3 + v12));
          uint64_t v21 = (void *)v20[1];
          if (v21) {
            goto LABEL_21;
          }
        }
        else
        {
          double result = *(void *)(v16 + i);
          uint64_t v20 = (void *)(v13 + 32 * (a3 + v12));
          uint64_t v21 = (void *)v20[1];
          if (v21)
          {
LABEL_21:
            *uint64_t v21 = *v20;
            if (*v20) {
              *(void *)(*v20 + 8) = v20[1];
            }
          }
        }
      }
      else
      {
        double result = *(void *)(v16 + 8 * v12);
        uint64_t v20 = (void *)(v13 + 32 * (a3 + v12));
        uint64_t v21 = (void *)v20[1];
        if (v21) {
          goto LABEL_21;
        }
      }
      void v20[3] = result;
      uint64_t v22 = *(void *)result;
      *uint64_t v20 = *(void *)result;
      v20[1] = result;
      if (v22) {
        *(void *)(v22 + 8) = v20;
      }
      *(void *)double result = v20;
      if (v6 == ++v12) {
        return result;
      }
    }
  }
  double result = (uint64_t)mlir::detail::OperandStorage::resize((mlir::detail::OperandStorage *)result, a2, *(_DWORD *)(result + 4) + (int)v11);
  uint64_t v24 = result;
  int v46 = a3;
  uint64_t v25 = v23 - (a4 + a3);
  if (v25 != v11)
  {
    uint64_t v26 = result + 32 * v23;
    uint64_t v27 = (uint64_t *)(v26 - 32 * v25);
    uint64_t v28 = (uint64_t *)(v26 - 32 * v11);
    uint64_t v29 = (uint64_t *)(v26 - 32);
    double result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v26 - 32), v28 - 4);
    if (v28 - 4 != v27)
    {
      unint64_t v30 = 0;
      uint64_t v31 = 32 * v11 - 32 * v25 + 32;
      uint64_t v32 = (uint64_t)v28;
      do
      {
        if (v26 + v30 - 32 == v32) {
          uint64_t v32 = (uint64_t)&v28[v30 / 8 - 4];
        }
        double result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v26 + v30 - 64), &v28[v30 / 8 - 8]);
        v30 -= 32;
      }
      while (v31 != v30);
      uint64_t v29 = (uint64_t *)(v26 + v30 - 32);
      uint64_t v28 = (uint64_t *)v32;
    }
    if (v29 != v28)
    {
      uint64_t v33 = v28;
      while (1)
      {
        v33 -= 4;
        double result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>(v29 - 4, v33);
        BOOL v34 = v29 - 4 == v28;
        if (v33 == v27)
        {
          if (v29 - 4 == v28) {
            break;
          }
          uint64_t v33 = v28 - 4;
          v29 -= 8;
          while (1)
          {
            double result = (uint64_t)std::swap[abi:nn180100]<mlir::OpOperand>(v29, v28 - 4);
            BOOL v34 = v29 == v28;
            if (v33 != v27) {
              break;
            }
            BOOL v35 = v29 == v28;
            v29 -= 4;
            if (v35) {
              goto LABEL_44;
            }
          }
        }
        else
        {
          v29 -= 4;
        }
        if (v34) {
          uint64_t v28 = v33;
        }
      }
    }
  }
LABEL_44:
  if (v6)
  {
    uint64_t v36 = 0;
    BOOL v37 = (a5 & 6) != 0;
    BOOL v38 = (a5 & 6) != 2;
    unint64_t v39 = a5 & 0xFFFFFFFFFFFFFFF8;
    if (v39) {
      char v40 = v37;
    }
    else {
      char v40 = 1;
    }
    if (v39) {
      char v41 = v38;
    }
    else {
      char v41 = 1;
    }
    uint64_t v42 = 24;
    do
    {
      if (v40)
      {
        if (v41)
        {
          double result = mlir::detail::OpResultImpl::getNextResultAtOffset(v39, v36);
          unsigned int v43 = (void *)(v24 + 32 * (v46 + v36));
          uint64_t v44 = (void *)v43[1];
          if (v44) {
            goto LABEL_60;
          }
        }
        else
        {
          double result = *(void *)(v39 + v42);
          unsigned int v43 = (void *)(v24 + 32 * (v46 + v36));
          uint64_t v44 = (void *)v43[1];
          if (v44)
          {
LABEL_60:
            void *v44 = *v43;
            if (*v43) {
              *(void *)(*v43 + 8) = v43[1];
            }
          }
        }
      }
      else
      {
        double result = *(void *)(v39 + 8 * v36);
        unsigned int v43 = (void *)(v24 + 32 * (v46 + v36));
        uint64_t v44 = (void *)v43[1];
        if (v44) {
          goto LABEL_60;
        }
      }
      void v43[3] = result;
      uint64_t v45 = *(void *)result;
      *unsigned int v43 = *(void *)result;
      v43[1] = result;
      if (v45) {
        *(void *)(v45 + 8) = v43;
      }
      *(void *)double result = v43;
      ++v36;
      v42 += 32;
    }
    while (v6 != v36);
  }
  return result;
}

uint64_t *mlir::detail::OperandStorage::eraseOperands(uint64_t *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v5 = this[1];
  uint64_t v6 = *((unsigned int *)this + 1);
  *((_DWORD *)this + 1) = v6 - a3;
  uint64_t v7 = a2;
  uint64_t v8 = v5 + 32 * a2;
  uint64_t v9 = a3;
  uint64_t v10 = (uint64_t *)(v8 + 32 * a3);
  uint64_t v11 = (uint64_t *)(v5 + 32 * v6);
  BOOL v12 = v6 - a3 == a2 || a3 == 0;
  if (!v12 && v10 != v11)
  {
    this = std::swap[abi:nn180100]<mlir::OpOperand>((uint64_t *)(v5 + 32 * a2), (uint64_t *)(v8 + 32 * a3));
    char v17 = (uint64_t *)(v8 + 32);
    if (v10 + 4 != v11)
    {
      uint64_t v18 = 32 * v9;
      uint64_t v19 = 32 * v6 - 32 * v7 - 32;
      do
      {
        if (v17 == v10) {
          uint64_t v10 = &v17[(unint64_t)v18 / 8];
        }
        this = std::swap[abi:nn180100]<mlir::OpOperand>(v17, &v17[(unint64_t)v18 / 8]);
        v17 += 4;
        v19 -= 32;
      }
      while (v18 != v19);
    }
    if (v17 != v10)
    {
      uint64_t v20 = v10;
      while (1)
      {
        this = std::swap[abi:nn180100]<mlir::OpOperand>(v17, v10);
        v10 += 4;
        BOOL v21 = v17 + 4 == v20;
        if (v10 == v11)
        {
          if (v17 + 4 == v20) {
            break;
          }
          uint64_t v10 = v20 + 4;
          v17 += 8;
          while (1)
          {
            this = std::swap[abi:nn180100]<mlir::OpOperand>(v17 - 4, v20);
            BOOL v21 = v17 == v20;
            if (v10 != v11) {
              break;
            }
            BOOL v12 = v17 == v20;
            v17 += 4;
            if (v12) {
              goto LABEL_9;
            }
          }
        }
        else
        {
          v17 += 4;
        }
        if (v21) {
          uint64_t v20 = v10;
        }
      }
    }
  }
LABEL_9:
  if (a3)
  {
    unsigned int v14 = *(_DWORD *)(v4 + 4);
    do
    {
      BOOL v15 = (void *)(v5 + 32 * v14);
      unint64_t v16 = (void *)v15[1];
      if (v16)
      {
        *unint64_t v16 = *v15;
        if (*v15) {
          *(void *)(*v15 + 8) = v15[1];
        }
      }
      ++v14;
      --v9;
    }
    while (v9);
  }
  return this;
}

unint64_t mlir::OperandRange::getBeginOperandIndex(mlir::OperandRange *this)
{
  return mlir::OpOperand::getOperandNumber(*(void *)this);
}

uint64_t mlir::OperandRange::split@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v7 = a2;
  uint64_t result = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v7);
  *a3 = v5;
  a3[1] = a2;
  a3[2] = 0;
  a3[3] = result;
  return result;
}

uint64_t mlir::OperandRangeRange::dereference(void *a1, uint64_t a2)
{
  uint64_t v17 = a1[1];
  uint64_t v4 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
  if (a2)
  {
    unint64_t v5 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v5 >= 7)
    {
      unint64_t v9 = v5 + 1;
      uint64_t v10 = (v5 + 1) & 0x7FFFFFFFFFFFFFF8;
      uint64_t v7 = (int *)(v4 + 4 * v10);
      uint64_t v11 = (int32x4_t *)(v4 + 16);
      int32x4_t v12 = 0uLL;
      uint64_t v13 = v10;
      int32x4_t v14 = 0uLL;
      do
      {
        int32x4_t v12 = vaddq_s32(v11[-1], v12);
        int32x4_t v14 = vaddq_s32(*v11, v14);
        v11 += 2;
        v13 -= 8;
      }
      while (v13);
      unsigned int v6 = vaddvq_s32(vaddq_s32(v14, v12));
      if (v9 == v10) {
        goto LABEL_9;
      }
    }
    else
    {
      unsigned int v6 = 0;
      uint64_t v7 = (int *)v4;
    }
    do
    {
      int v15 = *v7++;
      v6 += v15;
    }
    while (v7 != (int *)(v4 + 4 * a2));
LABEL_9:
    uint64_t v8 = v6;
    return *a1 + 32 * v8;
  }
  uint64_t v8 = 0;
  return *a1 + 32 * v8;
}

uint64_t mlir::MutableOperandRange::MutableOperandRange(uint64_t a1, uint64_t a2, int a3, int a4, const void *a5, uint64_t a6)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  unint64_t v9 = (void *)(a1 + 32);
  *(void *)(a1 + 16) = a1 + 32;
  uint64_t v10 = a1 + 16;
  uint64_t v11 = 3 * a6;
  *(void *)(a1 + 24) = 0x100000000;
  uint64_t v12 = (24 * a6) >> 3;
  int v13 = -1431655765 * v12;
  if (0xAAAAAAAAAAAAAAABLL * v12 >= 2)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v9, 0xAAAAAAAAAAAAAAABLL * v12, 24);
    unsigned int v14 = *(_DWORD *)(a1 + 24);
    if (!a6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unsigned int v14 = 0;
  if (a6)
  {
LABEL_5:
    memcpy((void *)(*(void *)(a1 + 16) + 24 * v14), a5, 8 * v11);
    unsigned int v14 = *(_DWORD *)(a1 + 24);
  }
LABEL_6:
  *(_DWORD *)(a1 + 24) = v14 + v13;
  return a1;
}

double mlir::MutableOperandRange::MutableOperandRange(mlir::MutableOperandRange *this, mlir::Operation *a2)
{
  if ((*((unsigned char *)a2 + 46) & 0x80) != 0) {
    int v2 = *((_DWORD *)a2 + 17);
  }
  else {
    int v2 = 0;
  }
  *(void *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = v2;
  *((void *)this + 2) = (char *)this + 32;
  *(void *)&double result = 0x100000000;
  *((void *)this + 3) = 0x100000000;
  return result;
}

mlir::MutableOperandRange *mlir::MutableOperandRange::MutableOperandRange(mlir::MutableOperandRange *this, mlir::OpOperand *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  int OperandNumber = mlir::OpOperand::getOperandNumber((unint64_t)a2);
  *(void *)this = v3;
  *((_DWORD *)this + 2) = OperandNumber;
  *((_DWORD *)this + 3) = 1;
  *((void *)this + 2) = (char *)this + 32;
  *((void *)this + 3) = 0x100000000;
  return this;
}

void mlir::MutableOperandRange::slice(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5 = a4;
  int v7 = *(_DWORD *)(a1 + 8) + a2;
  uint64_t v8 = *(const void **)(a1 + 16);
  unint64_t v9 = *(unsigned int *)(a1 + 24);
  *(void *)a5 = *(void *)a1;
  *(_DWORD *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 12) = a3;
  uint64_t v10 = (void *)(a5 + 32);
  *(void *)(a5 + 16) = a5 + 32;
  uint64_t v11 = (unint64_t *)(a5 + 16);
  *(void *)(a5 + 24) = 0x100000000;
  if (v9 < 2)
  {
    if (!v9)
    {
      uint64_t v13 = 0;
      *(_DWORD *)(a5 + 24) = 0;
      if (!*((unsigned char *)a4 + 24)) {
        return;
      }
      goto LABEL_6;
    }
    unsigned int v12 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v9, 24);
    unsigned int v12 = *(_DWORD *)(a5 + 24);
  }
  memcpy((void *)(*(void *)(a5 + 16) + 24 * v12), v8, 24 * v9);
  uint64_t v13 = (*(_DWORD *)(a5 + 24) + v9);
  *(_DWORD *)(a5 + 24) = v13;
  if (!*((unsigned char *)v5 + 24)) {
    return;
  }
LABEL_6:
  unint64_t v14 = *(void *)(a5 + 16);
  if (v13 >= *(_DWORD *)(a5 + 28))
  {
    unint64_t v17 = v13 + 1;
    if (v14 <= (unint64_t)v5 && v14 + 24 * v13 > (unint64_t)v5)
    {
      uint64_t v18 = (uint64_t)v5 - v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v17, 24);
      unint64_t v14 = *v11;
      unint64_t v5 = (long long *)(*v11 + v18);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v10, v17, 24);
      unint64_t v14 = *v11;
    }
  }
  unint64_t v15 = v14 + 24 * *(unsigned int *)(a5 + 24);
  long long v16 = *v5;
  *(void *)(v15 + 16) = *((void *)v5 + 2);
  *(_OWORD *)unint64_t v15 = v16;
  ++*(_DWORD *)(a5 + 24);
}

void mlir::MutableOperandRange::append(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  if (a3)
  {
    mlir::Operation::insertOperands(*(mlir::Operation **)a1, *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 8), a2, a3);
    int v5 = *(_DWORD *)(a1 + 12) + v3;
    mlir::MutableOperandRange::updateLength((mlir::MutableOperandRange *)a1, v5);
  }
}

void mlir::MutableOperandRange::updateLength(mlir::MutableOperandRange *this, int a2)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  int v2 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = a2;
  uint64_t v3 = *((unsigned int *)this + 6);
  if (v3)
  {
    int v5 = a2 - v2;
    uint64_t v6 = 24 * v3;
    for (uint64_t i = (uint64_t *)(*((void *)this + 2) + 8); ; i += 3)
    {
      uint64_t v17 = i[1];
      unint64_t v9 = (const void *)mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)&v17);
      uint64_t v10 = v8;
      uint64_t v18 = v20;
      uint64_t v19 = 0x800000000;
      size_t v11 = 4 * v8;
      if ((unint64_t)(4 * v8) >= 0x21) {
        break;
      }
      unsigned int v12 = 0;
      uint64_t v13 = v20;
      if (v8) {
        goto LABEL_8;
      }
LABEL_9:
      LODWORD(v19) = v12 + (v11 >> 2);
      *((_DWORD *)v13 + *((unsigned int *)i - 2)) += v5;
      uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)&v17);
      i[1] = mlir::detail::DenseArrayAttrImpl<int>::get(Context, (uint64_t)v18, v19);
      uint64_t v15 = *(void *)this;
      uint64_t CallableRegion = mlir::CallGraphNode::getCallableRegion((mlir::CallGraphNode *)i);
      mlir::Operation::setAttr(v15, CallableRegion, i[1]);
      if (v18 != v20) {
        free(v18);
      }
      v6 -= 24;
      if (!v6) {
        return;
      }
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, v20, (4 * v8) >> 2, 4);
    unsigned int v12 = v19;
    uint64_t v13 = v18;
    if (!v10) {
      goto LABEL_9;
    }
LABEL_8:
    memcpy((char *)v13 + 4 * v12, v9, v11);
    unsigned int v12 = v19;
    uint64_t v13 = v18;
    goto LABEL_9;
  }
}

void mlir::MutableOperandRange::assign(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mlir::Operation::setOperands(*(mlir::Operation **)a1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), a2, a3);
  if (a3 != *(_DWORD *)(a1 + 12))
  {
    mlir::MutableOperandRange::updateLength((mlir::MutableOperandRange *)a1, a3);
  }
}

void mlir::MutableOperandRange::erase(mlir::MutableOperandRange *this, int a2, unsigned int a3)
{
  if (*((_DWORD *)this + 3))
  {
    mlir::detail::OperandStorage::eraseOperands((uint64_t *)(*(void *)this + 64), *((_DWORD *)this + 2) + a2, a3);
    int v5 = *((_DWORD *)this + 3) - a3;
    mlir::MutableOperandRange::updateLength(this, v5);
  }
}

void mlir::MutableOperandRange::clear(mlir::MutableOperandRange *this)
{
  unsigned int v1 = *((_DWORD *)this + 3);
  if (v1)
  {
    mlir::detail::OperandStorage::eraseOperands((uint64_t *)(*(void *)this + 64), *((_DWORD *)this + 2), v1);
    mlir::MutableOperandRange::updateLength(this, 0);
  }
}

uint64_t mlir::MutableOperandRange::operator mlir::OperandRange(unsigned int *a1)
{
  if ((*(unsigned char *)(*(void *)a1 + 46) & 0x80) != 0) {
    return *(void *)(*(void *)a1 + 72) + 32 * a1[2];
  }
  else {
    return 32 * a1[2];
  }
}

uint64_t mlir::MutableOperandRange::split@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return mlir::MutableOperandRangeRange::MutableOperandRangeRange(a4, a1, a2, a3);
}

uint64_t mlir::MutableOperandRangeRange::MutableOperandRangeRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[5] = *MEMORY[0x1E4F143B8];
  long long v15 = *(_OWORD *)a2;
  long long v16 = v18;
  uint64_t v17 = 0x100000000;
  if (&v15 != (long long *)a2)
  {
    unint64_t v8 = *(unsigned int *)(a2 + 24);
    if (v8)
    {
      if (v8 < 2)
      {
        size_t v11 = 24;
        uint64_t v10 = v18;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, v18, v8, 24);
        uint64_t v9 = *(unsigned int *)(a2 + 24);
        if (!v9)
        {
LABEL_8:
          LODWORD(v17) = v8;
          goto LABEL_9;
        }
        uint64_t v10 = v16;
        size_t v11 = 24 * v9;
      }
      memcpy(v10, *(const void **)(a2 + 16), v11);
      goto LABEL_8;
    }
  }
LABEL_9:
  _OWORD v18[3] = a3;
  v18[4] = a4;
  uint64_t v14 = a4;
  uint64_t LHS = mlir::AffineBinaryOpExpr::getLHS((mlir::AffineBinaryOpExpr *)&v14);
  llvm::indexed_accessor_range<mlir::MutableOperandRangeRange,std::pair<mlir::MutableOperandRange,mlir::NamedAttribute>,mlir::MutableOperandRange,mlir::MutableOperandRange,mlir::MutableOperandRange>::indexed_accessor_range(a1, &v15, 0, LHS);
  if (v16 != v18) {
    free(v16);
  }
  return a1;
}

uint64_t mlir::MutableOperandRange::operator[](_DWORD *a1, int a2)
{
  return *(void *)(*(void *)a1 + 72) + 32 * (a1[2] + a2);
}

uint64_t mlir::MutableOperandRange::begin(mlir::MutableOperandRange *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * *((unsigned int *)this + 2);
  }
  else {
    return 32 * *((unsigned int *)this + 2);
  }
}

uint64_t mlir::MutableOperandRange::end(mlir::MutableOperandRange *this)
{
  if ((*(unsigned char *)(*(void *)this + 46) & 0x80) != 0) {
    return *(void *)(*(void *)this + 72) + 32 * *((unsigned int *)this + 2) + 32 * *((unsigned int *)this + 3);
  }
  else {
    return 32 * *((unsigned int *)this + 2) + 32 * *((unsigned int *)this + 3);
  }
}

void mlir::MutableOperandRangeRange::dereference(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v6 = mlir::detail::DenseArrayAttrImpl<int>::operator llvm::ArrayRef<int>((uint64_t)v23);
  int v7 = (int *)(v6 + 4 * a2);
  if (!a2)
  {
    int v9 = 0;
    goto LABEL_9;
  }
  unint64_t v8 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v8 < 7)
  {
    int v9 = 0;
    uint64_t v10 = (int *)v6;
    do
    {
LABEL_8:
      int v17 = *v10++;
      v9 += v17;
    }
    while (v10 != v7);
    goto LABEL_9;
  }
  unint64_t v11 = v8 + 1;
  uint64_t v12 = (v8 + 1) & 0x7FFFFFFFFFFFFFF8;
  uint64_t v10 = (int *)(v6 + 4 * v12);
  uint64_t v13 = (int32x4_t *)(v6 + 16);
  int32x4_t v14 = 0uLL;
  uint64_t v15 = v12;
  int32x4_t v16 = 0uLL;
  do
  {
    int32x4_t v14 = vaddq_s32(v13[-1], v14);
    int32x4_t v16 = vaddq_s32(*v13, v16);
    v13 += 2;
    v15 -= 8;
  }
  while (v15);
  int v9 = vaddvq_s32(vaddq_s32(v16, v14));
  if (v11 != v12) {
    goto LABEL_8;
  }
LABEL_9:
  int v18 = *v7;
  *(_OWORD *)&v23[4] = *(_OWORD *)(a1 + 56);
  int v19 = a2;
  long long v20 = *(_OWORD *)v23;
  int v21 = *(_DWORD *)&v23[16];
  char v22 = 1;
  mlir::MutableOperandRange::slice(a1, v9, v18, (long long *)&v19, a3);
}

void *mlir::ResultRange::ResultRange(void *result, uint64_t a2)
{
  *double result = a2;
  result[1] = 1;
  return result;
}

uint64_t *mlir::ResultRange::getUses@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  int v2 = this;
  uint64_t v4 = *this;
  uint64_t v5 = this[1];
  if (v5)
  {
    this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(*this, 0);
    uint64_t v6 = 0;
    if (!*this)
    {
      if (v5 == 1)
      {
        uint64_t v7 = 0;
        uint64_t v6 = 1;
        goto LABEL_9;
      }
      uint64_t v6 = 1;
      while (1)
      {
        this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v6);
        if (*this) {
          break;
        }
        if (v5 == ++v6) {
          goto LABEL_4;
        }
      }
    }
    if (v6 == v5)
    {
LABEL_4:
      uint64_t v7 = 0;
      uint64_t v6 = v5;
    }
    else
    {
      this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v6);
      uint64_t v7 = *this;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
LABEL_9:
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v7;
  a2[5] = v8;
  a2[6] = v9;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = 0;
  return this;
}

uint64_t *mlir::ResultRange::use_begin@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  *a2 = *this;
  a2[1] = 0;
  a2[2] = v2;
  a2[3] = v3;
  a2[4] = 0;
  if (v3)
  {
    this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, 0);
    uint64_t v5 = 0;
    if (!*this)
    {
      a2[1] = 1;
      if (v3 == 1) {
        goto LABEL_10;
      }
      uint64_t v5 = 1;
      while (1)
      {
        this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, v5);
        if (*this) {
          break;
        }
        a2[1] = ++v5;
        if (v3 == v5) {
          goto LABEL_10;
        }
      }
    }
    if (v5 != v3)
    {
      this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset(v2, v5);
      a2[4] = *this;
      return this;
    }
LABEL_10:
    a2[4] = 0;
  }
  return this;
}

uint64_t *mlir::ResultRange::use_end@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  *a2 = *this;
  a2[1] = v3;
  a2[2] = v2;
  a2[3] = v3;
  a2[4] = 0;
  return this;
}

uint64_t *mlir::ResultRange::UseIterator::operator++(uint64_t *a1)
{
  mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, a1[1]);
  uint64_t v2 = (uint64_t *)a1[4];
  if (v2) {
    a1[4] = *v2;
  }
  mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, a1[1]);
  if (a1[4]) {
    return a1;
  }
  do
  {
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1] + 1;
    a1[1] = v5;
    if (v4 == a1[2] && v5 == a1[3]) {
      goto LABEL_11;
    }
  }
  while (!*(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(v4, v5));
  uint64_t v6 = a1[1];
  if (*a1 == a1[2] && v6 == a1[3])
  {
LABEL_11:
    a1[4] = 0;
    return a1;
  }
  a1[4] = *(void *)mlir::detail::OpResultImpl::getNextResultAtOffset(*a1, v6);
  return a1;
}

uint64_t *mlir::ResultRange::replaceAllUsesWith(uint64_t *this, mlir::Operation *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 9);
  if (v2) {
    uint64_t v3 = (char *)a2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = this[1];
  if (v4) {
    BOOL v5 = v2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *this;
    do
    {
      uint64_t NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v7, v6);
      for (this = (uint64_t *)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v3, v6); ; *this = (uint64_t)v9)
      {
        uint64_t v9 = *NextResultAtOffset;
        if (!*NextResultAtOffset) {
          break;
        }
        uint64_t v10 = (uint64_t *)v9[1];
        if (v10)
        {
          *uint64_t v10 = *v9;
          if (*v9) {
            *(void *)(*v9 + 8) = v9[1];
          }
        }
        void v9[3] = (uint64_t)this;
        uint64_t v11 = *this;
        *uint64_t v9 = *this;
        v9[1] = (uint64_t)this;
        if (v11) {
          *(void *)(v11 + 8) = v9;
        }
      }
      ++v6;
    }
    while (v6 != v4 && v6 != v2);
  }
  return this;
}

unint64_t *mlir::ValueRange::ValueRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  *double result = a2 & 0xFFFFFFFFFFFFFFF9;
  result[1] = a3;
  return result;
}

{
  *double result = a2 & 0xFFFFFFFFFFFFFFF9 | 2;
  result[1] = a3;
  return result;
}

{
  *double result = a2 & 0xFFFFFFFFFFFFFFF9 | 4;
  result[1] = a3;
  return result;
}

unint64_t mlir::ValueRange::offset_base(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 & 6;
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    return v3 + 8 * a2;
  }
  if (v2 != 2 || v3 == 0) {
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2) & 0xFFFFFFFFFFFFFFF9 | 4;
  }
  else {
    return (v3 + 32 * a2) | 2;
  }
}

uint64_t mlir::ValueRange::dereference_iterator(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 & 6;
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    return *(void *)(v3 + 8 * a2);
  }
  if (v2 != 2 || v3 == 0) {
    return mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2);
  }
  else {
    return *(void *)(v3 + 32 * a2 + 24);
  }
}

unint64_t mlir::OperationEquivalence::computeHash(uint64_t a1, uint64_t (*a2)(uint64_t, void), uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, char a6)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 56);
  unint64_t v37 = v10;
  uint64_t v11 = *(unsigned int *)(a1 + 36);
  uint64_t v12 = a1 - 16;
  if (v11) {
    uint64_t v13 = a1 - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)&long long v38 = v13;
  *((void *)&v38 + 1) = v11;
  mlir::OperandRange::getTypes((uint64_t *)&v38, v35);
  uint64_t v34 = mlir::Operation::hashProperties((mlir::Operation *)a1);
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  {
    unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v28 = 0xFF51AFD7ED558CCDLL;
    }
    llvm::hashing::detail::get_execution_seed(void)::seed = v28;
  }
  uint64_t v46 = llvm::hashing::detail::get_execution_seed(void)::seed;
  unint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::OperationName,mlir::DictionaryAttr,mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v38, 0, &v38, (char *)&v42, &v37, &v36, v35, &v34);
  if ((a6 & 1) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v38 = 0u;
    {
      unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v29 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v29;
    }
    uint64_t v46 = llvm::hashing::detail::get_execution_seed(void)::seed;
    *(void *)&long long v38 = v14;
    *((void *)&v38 + 1) = (v15 >> 4) ^ (v15 >> 9);
    unint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v38, 0, (char *)&v39, (char *)&v42);
  }
  uint64_t v31 = a1;
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0)
  {
    uint64_t v16 = *(unsigned int *)(a1 + 68);
    if (v16)
    {
      int v17 = (void *)(*(void *)(a1 + 72) + 24);
      do
      {
        uint64_t v18 = a2(a3, *v17);
        uint64_t v45 = 0;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v38 = 0u;
        {
          uint64_t v30 = v18;
          uint64_t v18 = v30;
          if (v19)
          {
            unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v20 = 0xFF51AFD7ED558CCDLL;
            }
            llvm::hashing::detail::get_execution_seed(void)::seed = v20;
            uint64_t v18 = v30;
          }
        }
        uint64_t v46 = llvm::hashing::detail::get_execution_seed(void)::seed;
        *(void *)&long long v38 = v14;
        *((void *)&v38 + 1) = v18;
        unint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v38, 0, (char *)&v39, (char *)&v42);
        v17 += 4;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v21 = *(unsigned int *)(v31 + 36);
  if (v21) {
    uint64_t v22 = v12;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v21)
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(v22, i);
      uint64_t v25 = a4(a5, NextResultAtOffset);
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      {
        unint64_t v26 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v26 = 0xFF51AFD7ED558CCDLL;
        }
        llvm::hashing::detail::get_execution_seed(void)::seed = v26;
      }
      uint64_t v46 = llvm::hashing::detail::get_execution_seed(void)::seed;
      *(void *)&long long v38 = v14;
      *((void *)&v38 + 1) = v25;
      unint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine((llvm::hashing::detail::hash_combine_recursive_helper *)&v38, 0, (char *)&v39, (char *)&v42);
    }
  }
  return v14;
}

void mlir::OperationEquivalence::isRegionEquivalentTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  char v88 = 0;
  uint64_t v89 = 0;
  unsigned int v90 = 0;
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  uint64_t v78 = a1;
  uint64_t v79 = a2;
  while (1)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    uint64_t v13 = *(void *)(v10 + 8);
    if (v13 == a1 || v12 == a2) {
      goto LABEL_110;
    }
    uint64_t v80 = v13;
    uint64_t v81 = v12;
    uint64_t v15 = v13 ? (void *)(v13 - 8) : 0;
    uint64_t v16 = v12 ? (void *)(v12 - 8) : 0;
    if (((v15[7] - v15[6]) >> 3) != ((v16[7] - v16[6]) >> 3)) {
      goto LABEL_110;
    }
    int v17 = v90;
    if (!v90) {
      break;
    }
    unsigned int v18 = v90 - 1;
    unsigned int v19 = (v90 - 1) & ((v15 >> 4) ^ (v15 >> 9));
    unint64_t v20 = (char *)v88 + 16 * v19;
    uint64_t v21 = *(void *)v20;
    if (v15 == *(void **)v20) {
      goto LABEL_29;
    }
    uint64_t v22 = 0;
    int v23 = 1;
    while (v21 != -4096)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -8192;
      }
      if (v24) {
        uint64_t v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      unint64_t v20 = (char *)v88 + 16 * (v25 & v18);
      uint64_t v21 = *(void *)v20;
      if (v15 == *(void **)v20) {
        goto LABEL_29;
      }
    }
    if (v22) {
      unint64_t v20 = v22;
    }
    if (4 * (int)v89 + 4 >= 3 * v90) {
      break;
    }
    if (v90 + ~v89 - HIDWORD(v89) <= v90 >> 3) {
      goto LABEL_94;
    }
    uint64_t v26 = *(void *)v20;
    LODWORD(v89) = v89 + 1;
    if (v26 != -4096) {
      goto LABEL_27;
    }
LABEL_28:
    *(void *)unint64_t v20 = v15;
    *((void *)v20 + 1) = v16;
LABEL_29:
    if (*((void **)v20 + 1) != v16) {
      goto LABEL_110;
    }
    uint64_t v27 = (unint64_t *)v15[6];
    uint64_t v28 = v15[7] - (void)v27;
    if (v28)
    {
      uint64_t v30 = (uint64_t *)v16[6];
      unint64_t v29 = (void *)v16[7];
      if (v29 != v30)
      {
        uint64_t v31 = 8 * (v29 - v30) - 8;
        uint64_t v32 = 8 * (v28 >> 3) - 8;
        while (1)
        {
          unint64_t v92 = *v27;
          uint64_t v91 = *v30;
          if ((*(void *)(v92 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v91 + 8) & 0xFFFFFFFFFFFFFFF8)) {
            break;
          }
          if ((a7 & 1) == 0)
          {
            uint64_t Loc = mlir::Value::getLoc((mlir::Value *)&v92);
            if (Loc != mlir::Value::getLoc((mlir::Value *)&v91)) {
              break;
            }
          }
          if (a5) {
            a5(a6, v92, v91);
          }
          if (v32)
          {
            ++v27;
            ++v30;
            uint64_t v34 = v31;
            v31 -= 8;
            v32 -= 8;
            if (v34) {
              continue;
            }
          }
          goto LABEL_40;
        }
LABEL_110:
        llvm::deallocate_buffer(v88, (void *)(16 * v90));
      }
    }
LABEL_40:
    BOOL v35 = (mlir::GenericProgramPoint *)(v15 + 4);
    uint64_t v36 = (mlir::GenericProgramPoint *)(v16 + 4);
    unint64_t v37 = (mlir::GenericProgramPoint *)v16[5];
    long long v38 = (mlir::GenericProgramPoint *)v15[5];
    uint64_t v85 = v35;
    if (v38 != v35)
    {
      unsigned int v84 = a7;
      uint64_t v82 = v36;
      uint64_t v83 = a6;
      while (1)
      {
        if (v37 == v36) {
          goto LABEL_110;
        }
        mlir::GenericProgramPoint::~GenericProgramPoint(v38);
        long long v40 = v39;
        mlir::GenericProgramPoint::~GenericProgramPoint(v37);
        uint64_t v41 = a6;
        long long v43 = v42;
        if (!mlir::OperationEquivalence::isEquivalentTo(v40, v42, a3, a4, a5, v41, a7)) {
          goto LABEL_110;
        }
        long long v44 = mlir::SuccessorRange::SuccessorRange(&v92, v40);
        unint64_t v45 = v92;
        uint64_t v46 = v93;
        mlir::SuccessorRange::SuccessorRange(v44, v43);
        if (v46)
        {
          uint64_t v47 = v93;
          if (v93) {
            break;
          }
        }
LABEL_42:
        unint64_t v37 = (mlir::GenericProgramPoint *)*((void *)v37 + 1);
        long long v38 = (mlir::GenericProgramPoint *)*((void *)v38 + 1);
        a7 = v84;
        uint64_t v36 = v82;
        a6 = v83;
        if (v38 == v85) {
          goto LABEL_88;
        }
      }
      uint64_t v48 = 0;
      unint64_t v49 = v92;
      while (2)
      {
        uint64_t v50 = *(void *)(v45 + 32 * v48 + 24);
        uint64_t v51 = *(void *)(v49 + 32 * v48 + 24);
        int v52 = v90;
        if (v90)
        {
          unsigned int v53 = v90 - 1;
          unsigned int v54 = ((v50 >> 4) ^ (v50 >> 9)) & (v90 - 1);
          uint64_t v55 = (char *)v88 + 16 * v54;
          uint64_t v56 = *(void *)v55;
          if (v50 == *(void *)v55) {
            goto LABEL_64;
          }
          uint64_t v57 = 0;
          int v58 = 1;
          while (v56 != -4096)
          {
            if (v57) {
              BOOL v59 = 0;
            }
            else {
              BOOL v59 = v56 == -8192;
            }
            if (v59) {
              uint64_t v57 = v55;
            }
            unsigned int v60 = v54 + v58++;
            unsigned int v54 = v60 & v53;
            uint64_t v55 = (char *)v88 + 16 * (v60 & v53);
            uint64_t v56 = *(void *)v55;
            if (v50 == *(void *)v55) {
              goto LABEL_64;
            }
          }
          if (v57) {
            uint64_t v55 = v57;
          }
          if (4 * (int)v89 + 4 >= 3 * v90) {
            goto LABEL_71;
          }
          if (v90 + ~v89 - HIDWORD(v89) > v90 >> 3)
          {
            uint64_t v61 = *(void *)v55;
            LODWORD(v89) = v89 + 1;
            if (v61 != -4096) {
              goto LABEL_62;
            }
LABEL_63:
            *(void *)uint64_t v55 = v50;
            *((void *)v55 + 1) = v51;
LABEL_64:
            if (*((void *)v55 + 1) != v51) {
              goto LABEL_110;
            }
            if (++v48 == v46 || v48 == v47) {
              goto LABEL_42;
            }
            continue;
          }
        }
        else
        {
LABEL_71:
          int v52 = 2 * v90;
        }
        break;
      }
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v88, v52);
      unsigned int v62 = v90 - 1;
      unsigned int v63 = (v90 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      uint64_t v55 = (char *)v88 + 16 * v63;
      uint64_t v64 = *(void *)v55;
      if (v50 == *(void *)v55)
      {
LABEL_73:
        LODWORD(v89) = v89 + 1;
        if (v50 == -4096) {
          goto LABEL_63;
        }
      }
      else
      {
        BOOL v65 = 0;
        int v66 = 1;
        while (v64 != -4096)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -8192;
          }
          if (v67) {
            BOOL v65 = v55;
          }
          unsigned int v68 = v63 + v66++;
          unsigned int v63 = v68 & v62;
          uint64_t v55 = (char *)v88 + 16 * (v68 & v62);
          uint64_t v64 = *(void *)v55;
          if (v50 == *(void *)v55) {
            goto LABEL_73;
          }
        }
        if (v65) {
          uint64_t v55 = v65;
        }
        uint64_t v69 = *(void *)v55;
        LODWORD(v89) = v89 + 1;
        if (v69 == -4096) {
          goto LABEL_63;
        }
      }
LABEL_62:
      --HIDWORD(v89);
      goto LABEL_63;
    }
LABEL_88:
    a1 = v78;
    a2 = v79;
    uint64_t v10 = v80;
    uint64_t v11 = v81;
    if (v37 != v36) {
      goto LABEL_110;
    }
  }
  int v17 = 2 * v90;
LABEL_94:
  llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)&v88, v17);
  unsigned int v70 = v90 - 1;
  unsigned int v71 = (v90 - 1) & ((v15 >> 4) ^ (v15 >> 9));
  unint64_t v20 = (char *)v88 + 16 * v71;
  uint64_t v72 = *(void *)v20;
  if (v15 == *(void **)v20)
  {
LABEL_95:
    LODWORD(v89) = v89 + 1;
    if (v15 == (void *)-4096) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v73 = 0;
    int v74 = 1;
    while (v72 != -4096)
    {
      if (v73) {
        BOOL v75 = 0;
      }
      else {
        BOOL v75 = v72 == -8192;
      }
      if (v75) {
        long long v73 = v20;
      }
      unsigned int v76 = v71 + v74++;
      unsigned int v71 = v76 & v70;
      unint64_t v20 = (char *)v88 + 16 * (v76 & v70);
      uint64_t v72 = *(void *)v20;
      if (v15 == *(void **)v20) {
        goto LABEL_95;
      }
    }
    if (v73) {
      unint64_t v20 = v73;
    }
    uint64_t v77 = *(void *)v20;
    LODWORD(v89) = v89 + 1;
    if (v77 == -4096) {
      goto LABEL_28;
    }
  }
LABEL_27:
  --HIDWORD(v89);
  goto LABEL_28;
}

uint64_t mlir::OperationEquivalence::isEquivalentTo(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9 != *(void *)(a2 + 48)) {
    return 0;
  }
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56)) {
    return 0;
  }
  unint64_t v10 = *(unsigned int *)(a1 + 44);
  unint64_t v11 = *(unsigned int *)(a2 + 44);
  if (((v11 ^ v10) & 0x7FFFFF) != 0 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
    return 0;
  }
  if ((v10 & 0x800000) != 0)
  {
    int v17 = *(_DWORD *)(a1 + 68);
    if ((v11 & 0x800000) != 0) {
      goto LABEL_8;
    }
LABEL_63:
    if (v17) {
      return 0;
    }
    goto LABEL_9;
  }
  int v17 = 0;
  if ((v11 & 0x800000) == 0) {
    goto LABEL_63;
  }
LABEL_8:
  if (v17 != *(_DWORD *)(a2 + 68)) {
    return 0;
  }
LABEL_9:
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
    return 0;
  }
  if (HIBYTE(*(_DWORD *)(a1 + 44))) {
    uint64_t v18 = a1 + 64 + 16 * ((v10 >> 23) & 1);
  }
  else {
    uint64_t v18 = 0;
  }
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v19 = a2 + 64 + 16 * ((v11 >> 23) & 1);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, v18, v19);
  if (!result) {
    return result;
  }
  if ((a7 & 1) == 0 && *(void *)(a1 + 24) != *(void *)(a2 + 24)) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 46) & 0x80) != 0)
  {
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v22 = *(unsigned int *)(a1 + 68);
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0)
    {
LABEL_24:
      if (v22)
      {
        uint64_t v23 = *(unsigned int *)(a2 + 68);
        if (v23)
        {
          uint64_t v24 = v21 + 24;
          uint64_t v25 = *(void *)(a2 + 72) + 24;
          uint64_t v26 = (mlir::detail::OpResultImpl *)(v22 - 1);
          uint64_t v27 = v23 - 1;
          while (1)
          {
            if (*(void *)v24 != *(void *)v25)
            {
              if ((*(void *)(*(void *)v24 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v25 + 8) & 0xFFFFFFFFFFFFFFF8)) {
                return 0;
              }
              unint64_t v49 = v26;
              char v28 = a3(a4);
              uint64_t v26 = v49;
              if (!v28) {
                return 0;
              }
            }
            BOOL v29 = v27-- != 0;
            char v30 = v29;
            BOOL v29 = v26 != 0;
            uint64_t v26 = (mlir::detail::OpResultImpl *)((char *)v26 - 1);
            if (v29)
            {
              v24 += 32;
              v25 += 32;
              if (v30) {
                continue;
              }
            }
            break;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
      goto LABEL_24;
    }
  }
  uint64_t v31 = *(unsigned int *)(a1 + 36);
  uint64_t v32 = (mlir::detail::OpResultImpl *)(a1 - 16);
  uint64_t v33 = *(unsigned int *)(a2 + 36);
  if (!v31) {
    uint64_t v32 = 0;
  }
  uint64_t v50 = v32;
  if (v33) {
    uint64_t v34 = a2 - 16;
  }
  else {
    uint64_t v34 = 0;
  }
  if (v31 && v33)
  {
    uint64_t v35 = 0;
    uint64_t v36 = v31 - 1;
    if (a5)
    {
      uint64_t v47 = v36;
      uint64_t v45 = v33 - 1;
      while (1)
      {
        uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v50, v35);
        uint64_t v38 = mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v35);
        if ((*(void *)(NextResultAtOffset + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v38 + 8) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        a5(a6, NextResultAtOffset, v38);
        if (v47 != v35)
        {
          BOOL v39 = v45 == v35++;
          if (!v39) {
            continue;
          }
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v48 = v36;
      uint64_t v46 = v33 - 1;
      while (1)
      {
        uint64_t v40 = mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v50, v35);
        if ((*(void *)(v40 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v34, v35)+ 8) & 0xFFFFFFFFFFFFFFF8))break; {
        if (v48 != v35)
        }
        {
          BOOL v39 = v46 == v35++;
          if (!v39) {
            continue;
          }
        }
        goto LABEL_55;
      }
    }
    return 0;
  }
LABEL_55:
  unint64_t v41 = *(unsigned int *)(a1 + 44);
  uint64_t v42 = v41 & 0x7FFFFF;
  if ((v41 & 0x7FFFFF) != 0)
  {
    uint64_t v43 = ((a1 + 64 + 16 * ((v41 >> 23) & 1) + ((v41 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *(unsigned int *)(a1 + 40);
  }
  else
  {
    uint64_t v43 = 0;
    uint64_t v42 = 0;
  }
  unint64_t v44 = *(unsigned int *)(a2 + 44);
  if ((v44 & 0x7FFFFF) != 0)
  {
    if (v42) {
      mlir::OperationEquivalence::isRegionEquivalentTo(v43, ((a2 + 64 + 16 * ((v44 >> 23) & 1) + ((v44 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8)+ 32 * *(unsigned int *)(a2 + 40), (uint64_t)a3, a4, a5, a6, a7);
    }
  }
  return 1;
}

void mlir::OperationEquivalence::isEquivalentTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = 0;
  v5[1] = 0;
  unsigned int v6 = 0;
  unint64_t v3 = v5;
  BOOL v4 = v5;
  mlir::OperationEquivalence::isEquivalentTo(a1, a2, (uint64_t (*)(uint64_t))llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_0>, (uint64_t)&v4, (void (*)(uint64_t, unint64_t, uint64_t))llvm::function_ref<void ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_1>, (uint64_t)&v3, a3);
  llvm::deallocate_buffer(v5[0], (void *)(16 * v6));
}

uint64_t sub_1804AAB20()
{
  return v0;
}

mlir::OperationFingerPrint *mlir::OperationFingerPrint::OperationFingerPrint(mlir::OperationFingerPrint *this, mlir::Operation *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = a2;
  llvm::SHA1::init((llvm::SHA1 *)v5);
  v7.i64[0] = (uint64_t)v5;
  v7.i64[1] = (uint64_t)&v6;
  mlir::detail::walk<mlir::ForwardIterator>(a2, (mlir::Operation *)llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OperationFingerPrint::OperationFingerPrint(mlir::Operation *)::$_0>, (uint64_t)&v7, 1);
  llvm::SHA1::result((llvm::SHA1 *)v5, &v7);
  *(int8x16_t *)this = v7;
  *((_DWORD *)this + 4) = v8;
  return this;
}

uint64_t llvm::indexed_accessor_range<mlir::MutableOperandRangeRange,std::pair<mlir::MutableOperandRange,mlir::NamedAttribute>,mlir::MutableOperandRange,mlir::MutableOperandRange,mlir::MutableOperandRange>::indexed_accessor_range(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 0;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v16 = *a2;
  __src = v19;
  uint64_t v18 = 0x100000000;
  if (&v16 != a2)
  {
    unsigned int v9 = *((_DWORD *)a2 + 6);
    if (v9)
    {
      if (v9 < 2)
      {
        size_t v12 = 24;
        unint64_t v11 = v19;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, v19, *((unsigned int *)a2 + 6), 24);
        uint64_t v10 = *((unsigned int *)a2 + 6);
        if (!v10)
        {
LABEL_8:
          LODWORD(v18) = v9;
          unsigned int v8 = v9;
          goto LABEL_9;
        }
        unint64_t v11 = __src;
        size_t v12 = 24 * v10;
      }
      memcpy(v11, *((const void **)a2 + 2), v12);
      goto LABEL_8;
    }
  }
LABEL_9:
  long long v20 = *(long long *)((char *)a2 + 56);
  uint64_t v21 = a3;
  *(_OWORD *)a1 = v16;
  uint64_t v13 = (void *)(a1 + 32);
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x100000000;
  if (&v16 != (long long *)a1 && v8)
  {
    if (v8 < 2)
    {
      size_t v14 = 24;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 16, (void *)(a1 + 32), v8, 24);
      if (!v18)
      {
LABEL_16:
        *(_DWORD *)(a1 + 24) = v8;
        a3 = v21;
        goto LABEL_17;
      }
      uint64_t v13 = *(void **)(a1 + 16);
      size_t v14 = 24 * v18;
    }
    memcpy(v13, __src, v14);
    goto LABEL_16;
  }
LABEL_17:
  *(_OWORD *)(a1 + 56) = v20;
  *(void *)(a1 + 72) = a3;
  *(void *)(a1 + 80) = a4;
  if (__src != v19) {
    free(__src);
  }
  return a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::OperationName,mlir::DictionaryAttr,mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, unint64_t *a5, _DWORD *a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v23 = a2;
  unint64_t v13 = *a5;
  unint64_t v14 = 0x1E8EB8000uLL;
  {
    unint64_t v21 = v13;
    uint64_t v22 = a3;
    unint64_t v14 = 0x1E8EB8000uLL;
    unint64_t v13 = v21;
    a3 = v22;
    if (v19)
    {
      unint64_t v20 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v20 = 0xFF51AFD7ED558CCDLL;
      }
      llvm::hashing::detail::get_execution_seed(void)::seed = v20;
      unint64_t v14 = 0x1E8EB8000;
      unint64_t v13 = v21;
      a3 = v22;
    }
  }
  uint64_t v15 = (*(void *)(v14 + 3024) + 8 * v13) ^ HIDWORD(v13);
  long long v16 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v23, a3, (unint64_t)a4, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ ((0x9DDFEA08EB382D69 * v15) >> 47) ^ (0x9DDFEA08EB382D69 * v15))) ^ ((0x9DDFEA08EB382D69 * (HIDWORD(v13) ^ ((0x9DDFEA08EB382D69 * v15) >> 47) ^ (0x9DDFEA08EB382D69 * v15))) >> 47)));
  unint64_t v24 = v23;
  int v17 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v24, v16, (unint64_t)a4, (*a6 >> 4) ^ (*a6 >> 9));
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(a1, v24, v17, a4, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<mlir::ValueTypeRange<mlir::ResultRange>,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  void v18[2] = *MEMORY[0x1E4F143B8];
  unint64_t v17 = a2;
  uint64_t NextResultAtOffset = *a5;
  uint64_t v11 = a5[1];
  uint64_t v12 = a5[3];
  if (v11) {
    uint64_t NextResultAtOffset = mlir::detail::OpResultImpl::getNextResultAtOffset(NextResultAtOffset, a5[1]);
  }
  mlir::TypeRange::TypeRange(v18, NextResultAtOffset & 0xFFFFFFFFFFFFFFF9 | 4, v12 - v11);
  unint64_t v13 = llvm::hashing::detail::hash_combine_range_impl<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator>(v18[0], 0, v18[0], v18[1]);
  unint64_t v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)&v17, a3, (unint64_t)a4, v13);
  v18[0] = v17;
  uint64_t v15 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(a1, (uint64_t *)v18, v14, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v18[0], v15, a4);
}

BOOL llvm::function_ref<mlir::LogicalResult ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_0>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v8 = a2;
  if (a2 == a3) {
    return 1;
  }
  uint64_t v9 = 0;
  int v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v3, &v8, &v9);
  uint64_t v6 = 0;
  if (v5) {
    uint64_t v6 = *(void *)(v9 + 8);
  }
  return v6 == a3;
}

uint64_t llvm::function_ref<void ()(mlir::Value,mlir::Value)>::callback_fn<mlir::OperationEquivalence::isEquivalentTo(mlir::Operation *,mlir::Operation *,mlir::OperationEquivalence::Flags)::$_1>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v5 = a2;
  uint64_t v6 = a3;
  int8x16_t v7 = 0;
  uint64_t result = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>(v3, &v5, &v7);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>,mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::InsertIntoBucketImpl<mlir::Value>((uint64_t)v3, (uint64_t)&v5, &v5, v7);
    *(void *)uint64_t result = v5;
    *(void *)(result + 8) = v6;
  }
  return result;
}

void *llvm::function_ref<void ()(mlir::Operation *)>::callback_fn<mlir::OperationFingerPrint::OperationFingerPrint(mlir::Operation *)::$_0>(_DWORD **a1, mlir::Operation *a2)
{
  uint64_t v38 = a2;
  llvm::SHA1::update(*a1, (unsigned int *)&v38, 8uLL);
  unint64_t v3 = v38;
  if (v38 != *(mlir::Operation **)a1[1])
  {
    BOOL v4 = *a1;
    ParentOp = (mlir::Block *)*((void *)v38 + 2);
    if (ParentOp) {
      ParentOp = (mlir::Block *)mlir::Block::getParentOp(ParentOp);
    }
    uint64_t v34 = (uint64_t)ParentOp;
    llvm::SHA1::update(v4, (unsigned int *)&v34, 8uLL);
    unint64_t v3 = v38;
  }
  uint64_t v6 = *a1;
  uint64_t v34 = *((void *)v3 + 7);
  llvm::SHA1::update(v6, (unsigned int *)&v34, 8uLL);
  int8x16_t v7 = *a1;
  uint64_t v34 = mlir::Operation::hashProperties(v38);
  llvm::SHA1::update(v7, (unsigned int *)&v34, 8uLL);
  unint64_t v8 = v38;
  unint64_t v9 = *((unsigned int *)v38 + 11);
  if ((v9 & 0x7FFFFF) != 0)
  {
    unint64_t v10 = (((unint64_t)v38 + 16 * ((v9 >> 23) & 1) + ((v9 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)v38 + 10);
    unint64_t v11 = v10 + 24 * (v9 & 0x7FFFFF);
    do
    {
      for (uint64_t i = *(void *)(v10 + 8); i != v10; uint64_t i = *(void *)(i + 8))
      {
        if (i) {
          uint64_t v13 = i - 8;
        }
        else {
          uint64_t v13 = 0;
        }
        unint64_t v14 = *a1;
        uint64_t v34 = v13;
        llvm::SHA1::update(v14, (unsigned int *)&v34, 8uLL);
        uint64_t v15 = *(uint64_t **)(v13 + 48);
        uint64_t v16 = *(void *)(v13 + 56) - (void)v15;
        if (v16)
        {
          uint64_t v17 = 8 * (v16 >> 3);
          do
          {
            uint64_t v18 = *v15++;
            uint64_t v34 = v18;
            llvm::SHA1::update(*a1, (unsigned int *)&v34, 8uLL);
            v17 -= 8;
          }
          while (v17);
        }
      }
      v10 += 24;
    }
    while (v10 != v11);
    unint64_t v8 = v38;
  }
  int v19 = *a1;
  uint64_t v34 = *((void *)v8 + 3);
  llvm::SHA1::update(v19, (unsigned int *)&v34, 8uLL);
  unint64_t v20 = v38;
  if ((*((unsigned char *)v38 + 46) & 0x80) != 0)
  {
    uint64_t v21 = *((unsigned int *)v38 + 17);
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(*((void *)v38 + 9) + 24);
      do
      {
        uint64_t v23 = *v22;
        v22 += 4;
        uint64_t v34 = v23;
        llvm::SHA1::update(*a1, (unsigned int *)&v34, 8uLL);
        --v21;
      }
      while (v21);
      unint64_t v20 = v38;
    }
  }
  uint64_t v24 = *((unsigned int *)v20 + 10);
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 32 * v24;
    do
    {
      uint64_t v27 = *a1;
      uint64_t v34 = *(void *)((((unint64_t)v38
                        + 16 * (((unint64_t)*((unsigned int *)v38 + 11) >> 23) & 1)
                        + (((unint64_t)*((unsigned int *)v38 + 11) >> 21) & 0x7F8)
                        + 71) & 0xFFFFFFFFFFFFFFF8)
                      + v25
                      + 24);
      llvm::SHA1::update(v27, (unsigned int *)&v34, 8uLL);
      v25 += 32;
    }
    while (v26 != v25);
    unint64_t v20 = v38;
  }
  uint64_t v28 = *((unsigned int *)v20 + 9);
  uint64_t v29 = (uint64_t)v20 - 16;
  if (!v28) {
    uint64_t v29 = 0;
  }
  v39[0] = v29;
  v39[1] = v28;
  uint64_t result = mlir::OperandRange::getTypes(v39, &v34);
  uint64_t v31 = v34;
  uint64_t v32 = v35;
  uint64_t v33 = v37;
  if (v34 != v36 || v35 != v37)
  {
    if (v34 != v36)
    {
      while (1)
      {
        v39[0] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, v32) + 8) & 0xFFFFFFFFFFFFFFF8;
        llvm::SHA1::update(*a1, (unsigned int *)v39, 8uLL);
        ++v32;
      }
    }
    do
    {
      v39[0] = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v31, v32) + 8) & 0xFFFFFFFFFFFFFFF8;
      uint64_t result = llvm::SHA1::update(*a1, (unsigned int *)v39, 8uLL);
      ++v32;
    }
    while (v33 != v32);
  }
  return result;
}

_WORD *mlir::PatternBenefit::PatternBenefit(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, void *a6, unint64_t a7)
{
  mlir::OperationName::OperationName(&v13, a2, a3, a5);
  return mlir::Pattern::Pattern(a1, v13, 1, a6, a7, a4, a5);
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, int a3, void *a4, unint64_t a5, __int16 a6, uint64_t a7)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 12) = a6;
  *(void *)(a1 + 16) = a7 & 0xFFFFFFFFFFFFFFFBLL;
  unint64_t v8 = (void *)(a1 + 40);
  *(void *)(a1 + 24) = a1 + 40;
  uint64_t v9 = a1 + 24;
  *(void *)(a1 + 32) = 0x200000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = a1 + 88;
  *(void *)(a1 + 80) = 0;
  if (a5)
  {
    if (a5 >= 3) {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 24, v8, a5, 8);
    }
    uint64_t v13 = &a4[2 * a5];
    do
    {
      mlir::OperationName::OperationName(&v17, *a4, a4[1], a7);
      uint64_t v14 = v17;
      unint64_t v15 = *(unsigned int *)(a1 + 32);
      if (v15 >= *(unsigned int *)(a1 + 36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v8, v15 + 1, 8);
        unint64_t v15 = *(unsigned int *)(a1 + 32);
      }
      *(void *)(*(void *)(a1 + 24) + 8 * v15) = v14;
      ++*(_DWORD *)(a1 + 32);
      a4 += 2;
    }
    while (a4 != v13);
  }
  return a1;
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, __int16 a2, uint64_t a3, void *a4, unint64_t a5)
{
  return mlir::Pattern::Pattern(a1, 0, 0, a4, a5, a2, a3);
}

uint64_t mlir::Pattern::Pattern(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, void *a5, unint64_t a6)
{
  return mlir::Pattern::Pattern(a1, a2, 2, a5, a6, a3, a4);
}

BOOL mlir::RewriterBase::Listener::classof(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 1;
}

_DWORD *mlir::RewriterBase::replaceOpWithIf(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t result = (_DWORD *)a1[2];
  if (result && result[2] == 1) {
    uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)result + 48))(result, a2, a3, a4);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 36);
  if (v11) {
    uint64_t v12 = (_DWORD *)(a2 - 16);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v30 = 0;
  uint64_t v31 = a3;
  uint64_t v32 = 0;
  uint64_t v28 = v11;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    char v15 = 1;
    uint64_t result = v12;
    while (1)
    {
      if (v31 == a3 && v14 == a4) {
        goto LABEL_30;
      }
      uint64_t NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)result, v13);
      uint64_t v19 = mlir::ValueRange::dereference_iterator(&v31, v32);
      unint64_t v20 = *NextResultAtOffset;
      if (*NextResultAtOffset) {
        break;
      }
      uint64_t v16 = 0;
LABEL_10:
      v15 &= v16 == 0;
      uint64_t result = v12;
      uint64_t v14 = v32 + 1;
      uint64_t v13 = ++v30;
      ++v32;
      if (v30 == v28) {
        goto LABEL_30;
      }
    }
    uint64_t v21 = (uint64_t *)v19;
    while (1)
    {
      uint64_t v22 = a6[3];
      if ((v22 & 2) != 0)
      {
        uint64_t v23 = (uint64_t *)*v20;
        if ((*(unsigned int (**)(void *, uint64_t *))(v22 & 0xFFFFFFFFFFFFFFF8))(a6, v20)) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v23 = (uint64_t *)*v20;
        if ((*(unsigned int (**)(void, uint64_t *))(v22 & 0xFFFFFFFFFFFFFFF8))(*a6, v20))
        {
LABEL_23:
          uint64_t v24 = v20[2];
          (*(void (**)(void *, uint64_t))(*a1 + 72))(a1, v24);
          uint64_t v25 = (uint64_t *)v20[1];
          if (v25)
          {
            *uint64_t v25 = *v20;
            if (*v20) {
              *(void *)(*v20 + 8) = v20[1];
            }
          }
          void v20[3] = (uint64_t)v21;
          v20[1] = (uint64_t)v21;
          uint64_t v26 = *v21;
          *unint64_t v20 = *v21;
          if (v26) {
            *(void *)(v26 + 8) = v20;
          }
          *uint64_t v21 = (uint64_t)v20;
          (*(void (**)(void *, uint64_t))(*a1 + 80))(a1, v24);
        }
      }
      unint64_t v20 = v23;
      if (!v23)
      {
        uint64_t v16 = *NextResultAtOffset;
        goto LABEL_10;
      }
    }
  }
  char v15 = 1;
LABEL_30:
  if (a5) {
    *a5 = v15 & 1;
  }
  return result;
}

uint64_t mlir::RewriterBase::replaceUsesWithIf(uint64_t result, uint64_t **a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t *), uint64_t a5)
{
  unint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v9 = result;
    do
    {
      unint64_t v10 = (uint64_t *)*v5;
      uint64_t result = a4(a5, v5);
      if (result)
      {
        uint64_t v11 = v5[2];
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v11);
        uint64_t v12 = (uint64_t *)v5[1];
        if (v12)
        {
          *uint64_t v12 = *v5;
          if (*v5) {
            *(void *)(*v5 + 8) = v5[1];
          }
        }
        v5[3] = (uint64_t)a3;
        uint64_t v13 = *a3;
        uint64_t *v5 = *a3;
        v5[1] = (uint64_t)a3;
        if (v13) {
          *(void *)(v13 + 8) = v5;
        }
        *a3 = (uint64_t)v5;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 80))(v9, v11);
      }
      unint64_t v5 = v10;
    }
    while (v10);
  }
  return result;
}

uint64_t mlir::RewriterBase::replaceOp(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (_DWORD *)a1[2];
  if (v8 && v8[2] == 1) {
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a2, a3, a4);
  }
  uint64_t v9 = *(unsigned int *)(a2 + 36);
  if (v9) {
    uint64_t v10 = a2 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v24 = a2;
  uint64_t v25 = 0;
  uint64_t v26 = a3;
  uint64_t v27 = 0;
  if (v9)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v10;
    do
    {
      if (v26 == a3 && v12 == a4) {
        break;
      }
      uint64_t NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset(v13, v11);
      uint64_t v16 = mlir::ValueRange::dereference_iterator(&v26, v27);
      uint64_t v17 = *NextResultAtOffset;
      if (*NextResultAtOffset)
      {
        uint64_t v18 = (uint64_t *)v16;
        do
        {
          uint64_t v19 = (uint64_t *)*v17;
          uint64_t v20 = v17[2];
          (*(void (**)(void *, uint64_t))(*a1 + 72))(a1, v20);
          uint64_t v21 = (uint64_t *)v17[1];
          if (v21)
          {
            *uint64_t v21 = *v17;
            if (*v17) {
              *(void *)(*v17 + 8) = v17[1];
            }
          }
          unint64_t v17[3] = (uint64_t)v18;
          v17[1] = (uint64_t)v18;
          uint64_t v22 = *v18;
          uint64_t *v17 = *v18;
          if (v22) {
            *(void *)(v22 + 8) = v17;
          }
          *uint64_t v18 = (uint64_t)v17;
          (*(void (**)(void *, uint64_t))(*a1 + 80))(a1, v20);
          uint64_t v17 = v19;
        }
        while (v19);
      }
      uint64_t v13 = v10;
      uint64_t v12 = v27 + 1;
      uint64_t v11 = ++v25;
      ++v27;
    }
    while (v25 != v9);
  }
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 40))(a1, v24);
}

uint64_t mlir::RewriterBase::replaceOp(mlir::RewriterBase *this, mlir::Operation *a2, mlir::Operation *a3)
{
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  if (v6 && v6[2] == 1) {
    (*(void (**)(_DWORD *, mlir::Operation *, mlir::Operation *))(*(void *)v6 + 40))(v6, a2, a3);
  }
  uint64_t v7 = *((unsigned int *)a2 + 9);
  uint64_t v24 = a2;
  uint64_t v8 = *((unsigned int *)a3 + 9);
  uint64_t v9 = (char *)a3 - 16;
  if (v7) {
    uint64_t v10 = (char *)a2 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8) {
    uint64_t v11 = (uint64_t)v9;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v7) {
    BOOL v12 = v8 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t NextResultAtOffset = (uint64_t **)mlir::detail::OpResultImpl::getNextResultAtOffset((uint64_t)v10, v13);
      uint64_t v15 = mlir::detail::OpResultImpl::getNextResultAtOffset(v11, v13);
      uint64_t v16 = *NextResultAtOffset;
      if (*NextResultAtOffset)
      {
        uint64_t v17 = (uint64_t *)v15;
        do
        {
          uint64_t v18 = (uint64_t *)*v16;
          uint64_t v19 = v16[2];
          (*(void (**)(mlir::RewriterBase *, uint64_t))(*(void *)this + 72))(this, v19);
          uint64_t v20 = (uint64_t *)v16[1];
          if (v20)
          {
            *uint64_t v20 = *v16;
            if (*v16) {
              *(void *)(*v16 + 8) = v16[1];
            }
          }
          v16[3] = (uint64_t)v17;
          uint64_t v21 = *v17;
          *uint64_t v16 = *v17;
          v16[1] = (uint64_t)v17;
          if (v21) {
            *(void *)(v21 + 8) = v16;
          }
          uint64_t *v17 = (uint64_t)v16;
          (*(void (**)(mlir::RewriterBase *, uint64_t))(*(void *)this + 80))(this, v19);
          uint64_t v16 = v18;
        }
        while (v18);
      }
      ++v13;
    }
    while (v13 != v7 && v13 != v8);
  }
  uint64_t v22 = *(uint64_t (**)(mlir::RewriterBase *, mlir::Operation *))(*(void *)this + 40);

  return v22(this, v24);
}

void mlir::RewriterBase::eraseOp(mlir::RewriterBase *this, mlir::Operation *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 2);
  if (v2 && *(_DWORD *)(v2 + 8) == 1)
  {
    uint64_t v4 = *((void *)this + 2);
    unint64_t v5 = (unsigned int *)a2;
    unint64_t v3 = &v4;
    v6[0] = &unk_1EC9CECE0;
    v6[1] = v6;
    uint64_t v6[2] = &v3;
    uint64_t v7 = v6;
    std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::operator()((uint64_t)v6, &v5);
    if (v7 == v6)
    {
      (*(void (**)(void *))(v6[0] + 32))(v6);
    }
    else if (v7)
    {
      (*(void (**)(void))(*v7 + 40))();
    }
  }
  else
  {
    mlir::Operation::erase(a2);
  }
}

void mlir::RewriterBase::eraseBlock(mlir::RewriterBase *this, mlir::Block *a2)
{
  unint64_t v5 = (char *)a2 + 32;
  uint64_t v4 = (mlir::GenericProgramPoint *)*((void *)a2 + 4);
  if (v4 != (mlir::Block *)((char *)a2 + 32))
  {
    do
    {
      uint64_t v6 = *(mlir::GenericProgramPoint **)v4;
      mlir::GenericProgramPoint::~GenericProgramPoint(v4);
      (*(void (**)(mlir::RewriterBase *, uint64_t))(*(void *)this + 40))(this, v7);
      uint64_t v4 = v6;
    }
    while (v6 != (mlir::GenericProgramPoint *)v5);
  }

  mlir::Block::erase(a2);
}

_DWORD *mlir::RewriterBase::finalizeRootUpdate(mlir::RewriterBase *this, mlir::Operation *a2)
{
  uint64_t result = (_DWORD *)*((void *)this + 2);
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, mlir::Operation *))(*(void *)result + 32))(result, a2);
    }
  }
  return result;
}

void mlir::RewriterBase::inlineBlockBefore(uint64_t a1, mlir::Block *this, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (uint64_t ***)*((void *)this + 6);
  uint64_t v8 = (uint64_t ***)*((void *)this + 7);
  uint64_t v28 = v7;
  uint64_t v29 = a5;
  uint64_t v30 = 0;
  if (v8 != v7)
  {
    uint64_t v12 = 0;
    do
    {
      if (v29 == a5 && v12 == a6) {
        break;
      }
      uint64_t v14 = mlir::ValueRange::dereference_iterator(&v29, v12);
      uint64_t v15 = **v7;
      if (v15)
      {
        uint64_t v16 = (uint64_t *)v14;
        do
        {
          uint64_t v17 = (uint64_t *)*v15;
          uint64_t v18 = v15[2];
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 72))(a1, v18);
          uint64_t v19 = (uint64_t *)v15[1];
          if (v19)
          {
            *uint64_t v19 = *v15;
            if (*v15) {
              *(void *)(*v15 + 8) = v15[1];
            }
          }
          void v15[3] = (uint64_t)v16;
          v15[1] = (uint64_t)v16;
          uint64_t v20 = *v16;
          *uint64_t v15 = *v16;
          if (v20) {
            *(void *)(v20 + 8) = v15;
          }
          *uint64_t v16 = (uint64_t)v15;
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 80))(a1, v18);
          uint64_t v15 = v17;
        }
        while (v17);
      }
      uint64_t v7 = v28 + 1;
      uint64_t v12 = v30 + 1;
      uint64_t v28 = v7;
      ++v30;
    }
    while (v7 != v8);
  }
  uint64_t v21 = (uint64_t *)((char *)this + 32);
  if (*((mlir::Block **)this + 4) != (mlir::Block *)((char *)this + 32) && v21 != a4)
  {
    uint64_t v22 = (uint64_t *)*((void *)this + 5);
    llvm::ilist_traits<mlir::Operation>::transferNodesFromList(a3 + 32, (uint64_t)this + 32, (uint64_t)v22, (uint64_t)this + 32);
    if (v22 != v21)
    {
      uint64_t v23 = *v21;
      uint64_t v24 = *v22;
      *(void *)(v24 + 8) = v21;
      *uint64_t v21 = v24;
      uint64_t v25 = *a4;
      *(void *)(v23 + 8) = a4;
      *uint64_t v22 = v25;
      *(void *)(v25 + 8) = v22;
      *a4 = v23;
    }
  }
  mlir::Block::erase(this);
}

uint64_t mlir::RewriterBase::inlineBlockBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2, *(void *)(a3 + 16), a3, a4, a5);
}

uint64_t mlir::RewriterBase::mergeBlocks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 56))(a1, a2, a3, a3 + 32, a4, a5);
}

char *mlir::RewriterBase::splitBlock(uint64_t a1, char *a2, uint64_t *a3)
{
  return mlir::Block::splitBlock(a2, a3);
}

uint64_t mlir::RewriterBase::inlineRegionBefore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  if ((uint64_t *)*a2 != a2 && a4 != a2)
  {
    uint64_t v6 = (uint64_t *)a2[1];
    uint64_t result = llvm::ilist_traits<mlir::Block>::transferNodesFromList(a3, (uint64_t)a2, (uint64_t)v6, (uint64_t)a2);
    if (v6 != a2)
    {
      uint64_t v8 = (void *)*a2;
      uint64_t v9 = *v6;
      *(void *)(v9 + 8) = a2;
      *a2 = v9;
      uint64_t v10 = *a4;
      v8[1] = a4;
      *uint64_t v6 = v10;
      *(void *)(v10 + 8) = v6;
      *a4 = (uint64_t)v8;
    }
  }
  return result;
}

uint64_t mlir::RewriterBase::inlineRegionBefore(uint64_t (***a1)(void, uint64_t, unint64_t, char *), uint64_t a2, mlir::Block *this)
{
  unint64_t Parent = mlir::Block::getParent(this);
  uint64_t v7 = **a1;

  return v7(a1, a2, Parent, (char *)this + 8);
}

void mlir::RewriterBase::cloneRegionBefore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
}

__n128 std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EC9CECE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CECE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::operator()(uint64_t a1, unsigned int **a2)
{
  v84[40] = *MEMORY[0x1E4F143B8];
  uint64_t v50 = *a2;
  unint64_t v3 = (*a2)[11];
  if ((v3 & 0x7FFFFF) != 0)
  {
    unint64_t v51 = (((unint64_t)&v50[4 * ((v3 >> 23) & 1) + 17] + ((v3 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
        + 32 * v50[10];
    uint64_t v4 = (void *)(v51 + 24 * (v3 & 0x7FFFFF));
    while (1)
    {
      unsigned int v53 = v4;
      unint64_t v5 = (void *)*(v4 - 3);
      v4 -= 3;
      if (v5 != v4) {
        break;
      }
LABEL_3:
      if (v4 == (void *)v51) {
        goto LABEL_91;
      }
    }
    int v52 = v4;
LABEL_7:
    uint64_t v69 = v71;
    uint64_t v70 = 0x600000000;
    uint64_t v6 = *(v53 - 2);
    if (v6) {
      uint64_t v7 = (void *)(v6 - 8);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v77 = v81;
    uint64_t v78 = v81;
    int v80 = 0;
    uint64_t v83 = 0x800000000;
    uint64_t v79 = 0x100000008;
    __dst = v84;
    v81[0] = v7;
    mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v54, (mlir::Block *)v7);
    uint64_t v8 = v54;
    mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v54, (mlir::Block *)v7);
    uint64_t v10 = v54;
    uint64_t v9 = v55;
    if (v83 >= HIDWORD(v83))
    {
      unsigned int v54 = v7;
      uint64_t v55 = v8;
      uint64_t v56 = 0;
      uint64_t v57 = v10;
      int v58 = v9;
      unint64_t v37 = v83 + 1;
      if (__dst <= &v54 && (char *)__dst + 40 * v83 > (char *)&v54)
      {
        int64_t v43 = (char *)&v54 - (unsigned char *)__dst;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v37, 40);
        BOOL v39 = (char *)__dst;
        uint64_t v38 = (void **)((char *)__dst + v43);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v37, 40);
        uint64_t v38 = &v54;
        BOOL v39 = (char *)__dst;
      }
      uint64_t v40 = &v39[40 * v83];
      long long v41 = *(_OWORD *)v38;
      long long v42 = *((_OWORD *)v38 + 1);
      *((void *)v40 + 4) = v38[4];
      *(_OWORD *)uint64_t v40 = v41;
      *((_OWORD *)v40 + 1) = v42;
    }
    else
    {
      uint64_t v11 = (char *)__dst + 40 * v83;
      *uint64_t v11 = v7;
      v11[1] = v8;
      void v11[2] = 0;
      _OWORD v11[3] = v10;
      v11[4] = v9;
    }
    LODWORD(v83) = v83 + 1;
    llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v77);
    memset(&v76[1], 0, 328);
    memset(v75, 0, sizeof(v75));
    uint64_t v72 = &v75[1];
    long long v73 = &v75[1];
    uint64_t v74 = 8;
    v76[0] = &v76[2];
    HIDWORD(v76[1]) = 8;
    llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>((uint64_t)&v77, (uint64_t)&v72, &v59);
    if (v76[0] != &v76[2]) {
      free(v76[0]);
    }
    if (v73 != v72) {
      free(v73);
    }
    if (__dst != v84) {
      free(__dst);
    }
    if (v78 != v77) {
      free(v78);
    }
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v77, v81, (const llvm::SmallPtrSetImplBase *)&v59);
    __dst = v84;
    uint64_t v83 = 0x800000000;
    unsigned int v12 = v62;
    if (!v62)
    {
LABEL_26:
      llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v72, &v75[1], (const llvm::SmallPtrSetImplBase *)&v64);
      v76[0] = &v76[2];
      v76[1] = (void *)0x800000000;
      uint64_t v15 = v67;
      if (!v67) {
        goto LABEL_33;
      }
      uint64_t v16 = &v76[2];
      uint64_t v17 = v67;
      if (v67 >= 9uLL)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v76, &v76[2], v67, 40);
        uint64_t v17 = v67;
        if (!v67)
        {
LABEL_31:
          LODWORD(v76[1]) = v15;
          while (1)
          {
LABEL_33:
            if (v83 == v15)
            {
              if (!v15)
              {
LABEL_50:
                if (v76[0] != &v76[2]) {
                  free(v76[0]);
                }
                if (v73 != v72) {
                  free(v73);
                }
                if (__dst != v84) {
                  free(__dst);
                }
                if (v78 != v77) {
                  free(v78);
                }
                if (v66 != &v68) {
                  free(v66);
                }
                if (v65 != v64) {
                  free(v65);
                }
                if (__src != &v63) {
                  free(__src);
                }
                if (v60 != v59) {
                  free(v60);
                }
                uint64_t v27 = (char *)v69;
                uint64_t v28 = (char *)v69 + 8 * v70;
                if (!v70)
                {
                  if (v69 == v71) {
                    goto LABEL_6;
                  }
LABEL_85:
                  free(v27);
                  goto LABEL_6;
                }
                do
                {
                  uint64_t v29 = *(mlir::Block **)v27;
                  uint64_t v30 = *(void ****)(*(void *)v27 + 48);
                  for (uint64_t i = *(void ****)(*(void *)v27 + 56); v30 != i; ++v30)
                  {
                    uint64_t v32 = *v30;
                    while (1)
                    {
                      uint64_t v33 = *v32;
                      if (!*v32) {
                        break;
                      }
                      uint64_t v34 = (void *)v33[1];
                      if (v34)
                      {
                        *uint64_t v34 = *v33;
                        if (*v33) {
                          *(void *)(*v33 + 8) = v33[1];
                        }
                      }
                      *uint64_t v33 = 0;
                      v33[1] = 0;
                      v33[3] = 0;
                    }
                  }
                  while (1)
                  {
                    uint64_t v35 = *(void **)v29;
                    if (!*(void *)v29) {
                      break;
                    }
                    uint64_t v36 = (void *)v35[1];
                    if (v36)
                    {
                      *uint64_t v36 = *v35;
                      if (*v35) {
                        *(void *)(*v35 + 8) = v35[1];
                      }
                    }
                    *uint64_t v35 = 0;
                    v35[1] = 0;
                    v35[3] = 0;
                  }
                  mlir::Block::erase(v29);
                  v27 += 8;
                }
                while (v27 != v28);
                uint64_t v27 = (char *)v69;
                if (v69 != v71) {
                  goto LABEL_85;
                }
LABEL_6:
                uint64_t v4 = v52;
                if ((void *)*v52 == v52) {
                  goto LABEL_3;
                }
                goto LABEL_7;
              }
              uint64_t v18 = v76[0];
              uint64_t v19 = __dst;
              while (*v19 == *v18 && v19[1] == v18[1] && v19[2] == v18[2] && v19[3] == v18[3] && v19[4] == v18[4])
              {
                v19 += 5;
                v18 += 5;
                if (v19 == (void *)((char *)__dst + 40 * v15)) {
                  goto LABEL_50;
                }
              }
            }
            uint64_t v20 = *((void *)__dst + 5 * v83 - 5);
            uint64_t v21 = *(mlir::GenericProgramPoint **)(v20 + 32);
            if (v21 != (mlir::GenericProgramPoint *)(v20 + 32))
            {
              do
              {
                uint64_t v22 = *(mlir::GenericProgramPoint **)v21;
                mlir::GenericProgramPoint::~GenericProgramPoint(v21);
                uint64_t v23 = *(void *)(a1 + 8);
                unsigned int v54 = v24;
                uint64_t v25 = *(void *)(v23 + 24);
                if (!v25) {
                  std::__throw_bad_function_call[abi:nn180100]();
                }
                (*(void (**)(uint64_t, void **))(*(void *)v25 + 48))(v25, &v54);
                uint64_t v21 = v22;
              }
              while (v22 != (mlir::GenericProgramPoint *)(v20 + 32));
            }
            uint64_t v26 = v70;
            if (v70 >= (unint64_t)HIDWORD(v70))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, v71, v70 + 1, 8);
              uint64_t v26 = v70;
            }
            *((void *)v69 + v26) = v20;
            LODWORD(v70) = v70 + 1;
            LODWORD(v83) = v83 - 1;
            if (v83) {
              llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild((llvm::SmallPtrSetImplBase *)&v77);
            }
            uint64_t v15 = LODWORD(v76[1]);
          }
        }
        uint64_t v16 = (void **)v76[0];
      }
      memcpy(v16, v66, 40 * v17);
      goto LABEL_31;
    }
    uint64_t v13 = v84;
    uint64_t v14 = v62;
    if (v62 >= 9uLL)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, v84, v62, 40);
      uint64_t v14 = v62;
      if (!v62)
      {
LABEL_25:
        LODWORD(v83) = v12;
        goto LABEL_26;
      }
      uint64_t v13 = __dst;
    }
    memcpy(v13, __src, 40 * v14);
    goto LABEL_25;
  }
LABEL_91:
  (*(void (**)(void, unsigned int *))(****(void ****)(a1 + 16) + 56))(***(void ***)(a1 + 16), v50);
  uint64_t v44 = v50[9];
  if (v44) {
    uint64_t v45 = (uint64_t)(v50 - 4);
  }
  else {
    uint64_t v45 = 0;
  }
  if (v44)
  {
    for (uint64_t j = 0; j != v44; ++j)
    {
      uint64_t NextResultAtOffset = (void **)mlir::detail::OpResultImpl::getNextResultAtOffset(v45, j);
      while (1)
      {
        uint64_t v48 = *NextResultAtOffset;
        if (!*NextResultAtOffset) {
          break;
        }
        unint64_t v49 = (void *)v48[1];
        if (v49)
        {
          *unint64_t v49 = *v48;
          if (*v48) {
            *(void *)(*v48 + 8) = v48[1];
          }
        }
        *uint64_t v48 = 0;
        v48[1] = 0;
        void v48[3] = 0;
      }
    }
  }
  mlir::Operation::erase((mlir::Operation *)v50);
}

uint64_t std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir12RewriterBase7eraseOpEPNS_9OperationEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1,std::allocator<mlir::RewriterBase::eraseOp(mlir::Operation *)::$_1>,void ()(mlir::Operation *)>::target_type()
{
}

void llvm::make_range<llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v19[40] = *MEMORY[0x1E4F143B8];
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v14, &v16, 8, (uint64_t *)a1);
  uint64_t v17 = v19;
  uint64_t v18 = 0x800000000;
  if (*(_DWORD *)(a1 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v17, (uint64_t *)(a1 + 96));
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v8, &v10, 8, (uint64_t *)a2);
  uint64_t v11 = v13;
  uint64_t v12 = 0x800000000;
  if (*(_DWORD *)(a2 + 104)) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)&v11, (uint64_t *)(a2 + 96));
  }
  uint64_t v6 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a3, a3 + 4, 8, (uint64_t *)&v14);
  *(void *)(v6 + 96) = a3 + 14;
  uint64_t v7 = v6 + 96;
  *(void *)(v7 + 8) = 0x800000000;
  if (v18) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(v7, (uint64_t *)&v17);
  }
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(a3 + 54), a3 + 58, 8, (uint64_t *)&v8);
  a3[66] = a3 + 68;
  a3[67] = 0x800000000;
  if (v12) {
    llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=((uint64_t)(a3 + 66), (uint64_t *)&v11);
  }
  if (v11 != v13) {
    free(v11);
  }
  if (v9 != v8) {
    free(v9);
  }
  if (v17 != v19) {
    free(v17);
  }
  if (v15 != v14) {
    free(v15);
  }
}

uint64_t llvm::SmallVectorImpl<std::tuple<mlir::Block *,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator,llvm::detail::indexed_accessor_range_base<mlir::SuccessorRange,mlir::BlockOperand *,mlir::Block *,mlir::Block *,mlir::Block *>::iterator>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unint64_t v5 = a2 + 2;
    uint64_t v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      uint64_t v6 = *(char **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        uint64_t v4 = *a2;
      }
      *(void *)a1 = v4;
      uint64_t v7 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_20;
    }
    uint64_t v7 = a2 + 1;
    unint64_t v8 = *((unsigned int *)a2 + 2);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if (v8)
      {
        uint64_t v11 = *(char **)a1;
        uint64_t v12 = v4 + 40 * v8;
        do
        {
          *(void *)uint64_t v11 = *(void *)v4;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v11 + 24) = *(_OWORD *)(v4 + 24);
          v4 += 40;
          v11 += 40;
        }
        while (v4 != v12);
      }
      goto LABEL_19;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if (v9)
      {
        uint64_t v13 = v4 + 40 * v9;
        uint64_t v14 = *(char **)a1;
        do
        {
          *(void *)uint64_t v14 = *(void *)v4;
          *(_OWORD *)(v14 + 8) = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v4 + 24);
          v4 += 40;
          v14 += 40;
        }
        while (v4 != v13);
        uint64_t v10 = *v7;
        if (v9 == v10) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v9 = 0;
        LODWORD(v10) = *v7;
        if (!*v7) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
      uint64_t v9 = 0;
      LODWORD(v10) = *v7;
      if (!*v7) {
        goto LABEL_19;
      }
    }
    memcpy((void *)(*(void *)a1 + 40 * v9), (const void *)(*a2 + 40 * v9), *a2 + 40 * v10 - (*a2 + 40 * v9));
LABEL_19:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_20:
    _DWORD *v7 = 0;
  }
  return a1;
}

void llvm::po_iterator<mlir::Block *,llvm::SmallPtrSet<mlir::Block *,8u>,false,llvm::GraphTraits<mlir::Block *>>::traverseChild(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2 = (uint64_t *)((char *)this + 96);
  unint64_t v3 = (char *)this + 112;
  while (1)
  {
    uint64_t v4 = *((void *)this + 12) + 40 * *((unsigned int *)this + 26);
    uint64_t v5 = *(void *)(v4 - 24);
    uint64_t v6 = *(void *)(v4 - 32);
    if (v6 == *(void *)(v4 - 16) && v5 == *(void *)(v4 - 8)) {
      break;
    }
    *(void *)(v4 - 24) = v5 + 1;
    uint64_t v7 = *(mlir::Block **)(v6 + 32 * v5 + 24);
    uint64_t v8 = *((void *)this + 1);
    if (v8 == *(void *)this)
    {
      uint64_t v15 = *((unsigned int *)this + 5);
      if (v15)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 8 * v15;
        uint64_t v18 = (mlir::Block **)*((void *)this + 1);
        while (*v18 != v7)
        {
          if (*v18 == (mlir::Block *)-2) {
            uint64_t v16 = v18;
          }
          ++v18;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_17;
            }
            *uint64_t v16 = v7;
            --*((_DWORD *)this + 6);
            goto LABEL_6;
          }
        }
      }
      else
      {
LABEL_17:
        if (v15 >= *((_DWORD *)this + 4)) {
          goto LABEL_5;
        }
        *((_DWORD *)this + 5) = v15 + 1;
        *(void *)(v8 + 8 * v15) = v7;
LABEL_6:
        mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v27, v7);
        uint64_t v10 = v27;
        mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v27, v7);
        uint64_t v12 = v27;
        uint64_t v11 = v28;
        uint64_t v13 = *((unsigned int *)this + 26);
        if (v13 >= *((_DWORD *)this + 27))
        {
          uint64_t v27 = v7;
          uint64_t v28 = v10;
          uint64_t v29 = 0;
          uint64_t v30 = v12;
          uint64_t v31 = v11;
          unint64_t v19 = v13 + 1;
          BOOL v20 = *v2 + 40 * (unint64_t)v13 > (unint64_t)&v27;
          if (*v2 <= (unint64_t)&v27 && v20)
          {
            uint64_t v26 = (char *)&v27 - *v2;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v3, v19, 40);
            uint64_t v21 = *v2;
            uint64_t v22 = &v26[*v2];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v3, v19, 40);
            uint64_t v21 = *v2;
            uint64_t v22 = (char *)&v27;
          }
          uint64_t v23 = v21 + 40 * *((unsigned int *)this + 26);
          long long v24 = *(_OWORD *)v22;
          long long v25 = *((_OWORD *)v22 + 1);
          *(void *)(v23 + 32) = *((void *)v22 + 4);
          *(_OWORD *)uint64_t v23 = v24;
          *(_OWORD *)(v23 + 16) = v25;
        }
        else
        {
          uint64_t v14 = (mlir::Block **)(*((void *)this + 12) + 40 * v13);
          *uint64_t v14 = v7;
          v14[1] = v10;
          void v14[2] = 0;
          _OWORD v14[3] = v12;
          _OWORD v14[4] = v11;
        }
        ++*((_DWORD *)this + 26);
      }
    }
    else
    {
LABEL_5:
      llvm::SmallPtrSetImplBase::insert_imp_big(this, v7);
      if (v9) {
        goto LABEL_6;
      }
    }
  }
}

void *mlir::Region::Region(void *this, mlir::Operation *a2)
{
  *this = this;
  this[1] = this;
  this[2] = a2;
  return this;
}

uint64_t mlir::Region::dropAllReferences(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 8);
  if (v1 != this)
  {
    uint64_t v2 = this;
    do
    {
      if (v1) {
        uint64_t v3 = v1 - 8;
      }
      else {
        uint64_t v3 = 0;
      }
      this = mlir::Block::dropAllReferences(v3);
      uint64_t v1 = *(void *)(v1 + 8);
    }
    while (v1 != v2);
  }
  return this;
}

void mlir::Region::~Region(mlir::Region *this)
{
  uint64_t v2 = (mlir::Region *)*((void *)this + 1);
  if (v2 != this)
  {
    do
    {
      if (v2) {
        uint64_t v3 = (uint64_t)v2 - 8;
      }
      else {
        uint64_t v3 = 0;
      }
      mlir::Block::dropAllReferences(v3);
      uint64_t v2 = (mlir::Region *)*((void *)v2 + 1);
    }
    while (v2 != this);
    uint64_t v4 = (mlir::Region *)*((void *)this + 1);
    if (v4 != this)
    {
      do
      {
        uint64_t v5 = (mlir::Region *)*((void *)v4 + 1);
        *((void *)v4 + 2) &= 7uLL;
        uint64_t v6 = *(void *)v4;
        *(void *)uint64_t v5 = *(void *)v4;
        *(void *)(v6 + 8) = v5;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        mlir::Block::~Block((mlir::Region *)((char *)v4 - 8));
        operator delete(v7);
        uint64_t v4 = v5;
      }
      while (v5 != this);
    }
  }
}

uint64_t mlir::Region::getContext(mlir::Region *this)
{
  return mlir::Attribute::getContext((mlir::Attribute *)(*((void *)this + 2) + 24));
}

uint64_t mlir::Region::getLoc(mlir::Region *this)
{
  return *(void *)(*((void *)this + 2) + 24);
}

uint64_t mlir::Region::getArgumentTypes(mlir::Region *this)
{
  if (*(mlir::Region **)this == this) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    uint64_t v2 = v1 - 8;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(void *)(v2 + 48);
}

mlir::Block *mlir::Region::getParentRegion(mlir::Region *this)
{
  __n128 result = *(mlir::Block **)(*((void *)this + 2) + 16);
  if (result) {
    return (mlir::Block *)mlir::Block::getParent(result);
  }
  return result;
}

unint64_t mlir::Region::isProperAncestor(mlir::Region *this, mlir::Region *a2)
{
  if (this == a2) {
    return 0;
  }
  while (1)
  {
    unint64_t result = *(void *)(*((void *)a2 + 2) + 16);
    if (!result) {
      break;
    }
    unint64_t result = mlir::Block::getParent((mlir::Block *)result);
    if (!result) {
      break;
    }
    a2 = (mlir::Region *)result;
    if ((mlir::Region *)result == this) {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::Region::getRegionNumber(unint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  unint64_t v2 = *(unsigned int *)(v1 + 44);
  if ((v2 & 0x7FFFFF) != 0) {
    return -1431655765
  }
         * ((this
                         - (((v1 + 16 * ((v2 >> 23) & 1) + ((v2 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                          + 32 * *(unsigned int *)(v1 + 40))) >> 3);
  else {
    return -1431655765 * (this >> 3);
  }
}

void mlir::Region::cloneInto(mlir::Region *this, mlir::Region *a2, mlir::IRMapping *a3)
{
}

void mlir::Region::cloneInto(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v134[6] = *MEMORY[0x1E4F143B8];
  if (*(void *)a1 == a1) {
    return;
  }
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = a1;
  uint64_t v121 = a1;
  if (v6 != a1)
  {
    unint64_t v8 = 0x1E8EB8000uLL;
    while (1)
    {
      uint64_t v127 = v6;
      uint64_t v12 = v6 ? (mlir::Block *)(v6 - 8) : 0;
      unint64_t v13 = v8;
      uint64_t v14 = v9;
      uint64_t v15 = operator new(0x48uLL);
      *uint64_t v15 = 0u;
      v15[1] = 0u;
      *((void *)v15 + 4) = v15 + 2;
      *((void *)v15 + 5) = v15 + 2;
      *((void *)v15 + 7) = 0;
      *((void *)v15 + 8) = 0;
      *((void *)v15 + 6) = 0;
      a1 = (uint64_t)mlir::IRMapping::map((mlir::IRMapping *)a4, v12, (mlir::Block *)v15);
      char v9 = v14;
      unint64_t v8 = v13;
      uint64_t v17 = (unint64_t *)*((void *)v12 + 6);
      uint64_t v16 = (unint64_t *)*((void *)v12 + 7);
      if (v16 != v17) {
        break;
      }
LABEL_4:
      *((void *)v15 + 3) = *((void *)v15 + 3) & 7 | a2;
      uint64_t v5 = v121;
      uint64_t v10 = *a3;
      *((void *)v15 + 1) = *a3;
      *((void *)v15 + 2) = a3;
      uint64_t v11 = (char *)v15 + 8;
      *(void *)(v10 + 8) = v11;
      *a3 = (uint64_t)v11;
      uint64_t v6 = *(void *)(v127 + 8);
      if (v6 == v121)
      {
        uint64_t v7 = *(void *)(v121 + 8);
        goto LABEL_52;
      }
    }
    while (1)
    {
      unint64_t v18 = *v17;
      int v19 = *(_DWORD *)(a4 + 16);
      if (v19)
      {
        uint64_t v20 = *(void *)a4;
        if ((atomic_load_explicit((atomic_uchar *volatile)v9, memory_order_acquire) & 1) == 0)
        {
          a1 = __cxa_guard_acquire(v9);
          char v9 = v14;
          unint64_t v8 = v13;
          if (a1)
          {
            unint64_t v42 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v42 = 0xFF51AFD7ED558CCDLL;
            }
            *(void *)(v13 + 3024) = v42;
            __cxa_guard_release(v14);
            char v9 = v14;
            unint64_t v8 = v13;
          }
        }
        unint64_t v21 = 0x9DDFEA08EB382D69 * ((*(void *)(v8 + 3024) + 8 * v18) ^ HIDWORD(v18));
        unint64_t v22 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v21 >> 47) ^ v21);
        unsigned int v23 = (-348639895 * ((v22 >> 47) ^ v22)) & (v19 - 1);
        uint64_t v24 = *(void *)(v20 + 16 * v23);
        if (v24 == v18) {
          goto LABEL_12;
        }
        int v25 = 1;
        while (v24 != -4096)
        {
          unsigned int v26 = v23 + v25++;
          unsigned int v23 = v26 & (v19 - 1);
          uint64_t v24 = *(void *)(v20 + 16 * v23);
          if (v24 == v18) {
            goto LABEL_12;
          }
        }
      }
      a1 = (uint64_t)mlir::Block::addArgument(v15, *(void *)(v18 + 8) & 0xFFFFFFFFFFFFFFF8, *(void *)(v18 + 32));
      uint64_t v27 = a1;
      unint64_t v129 = v18;
      int v28 = *(_DWORD *)(a4 + 16);
      if (!v28) {
        break;
      }
      uint64_t v29 = *(void *)a4;
      char v9 = v14;
      if ((atomic_load_explicit((atomic_uchar *volatile)v14, memory_order_acquire) & 1) == 0)
      {
        a1 = __cxa_guard_acquire(v14);
        char v9 = v14;
        if (a1)
        {
          unint64_t v43 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v43 = 0xFF51AFD7ED558CCDLL;
          }
          *(void *)(v13 + 3024) = v43;
          __cxa_guard_release(v14);
          char v9 = v14;
        }
      }
      unint64_t v30 = 0x9DDFEA08EB382D69 * ((*(void *)(v13 + 3024) + 8 * v18) ^ HIDWORD(v18));
      unint64_t v31 = 0x9DDFEA08EB382D69 * (HIDWORD(v18) ^ (v30 >> 47) ^ v30);
      int v32 = v28 - 1;
      unsigned int v33 = (-348639895 * ((v31 >> 47) ^ v31)) & (v28 - 1);
      uint64_t v34 = (void *)(v29 + 16 * v33);
      uint64_t v35 = *v34;
      if (v129 == *v34)
      {
        unint64_t v8 = v13;
        goto LABEL_11;
      }
      unint64_t v37 = 0;
      int v38 = 1;
      while (v35 != -4096)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v35 == -8192;
        }
        if (v39) {
          unint64_t v37 = v34;
        }
        unsigned int v40 = v33 + v38++;
        unsigned int v33 = v40 & v32;
        uint64_t v34 = (void *)(v29 + 16 * (v40 & v32));
        uint64_t v35 = *v34;
        unint64_t v8 = v13;
        char v9 = v14;
        if (v129 == *v34) {
          goto LABEL_11;
        }
      }
      if (v37) {
        uint64_t v34 = v37;
      }
      unsigned int v36 = *(_DWORD *)(a4 + 16);
      int v41 = *(_DWORD *)(a4 + 8);
      if (4 * v41 + 4 >= 3 * v36) {
        goto LABEL_40;
      }
      if (v36 + ~v41 - *(_DWORD *)(a4 + 12) <= v36 >> 3) {
        goto LABEL_41;
      }
      ++*(_DWORD *)(a4 + 8);
      if (*v34 != -4096) {
        goto LABEL_27;
      }
LABEL_10:
      *uint64_t v34 = v129;
      v34[1] = 0;
      unint64_t v8 = v13;
      char v9 = v14;
LABEL_11:
      v34[1] = v27;
LABEL_12:
      if (++v17 == v16) {
        goto LABEL_4;
      }
    }
    unsigned int v36 = 0;
LABEL_40:
    v36 *= 2;
LABEL_41:
    llvm::DenseMap<mlir::Value,mlir::Value,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,mlir::Value>>::grow(a4, v36);
    uint64_t v132 = 0;
    a1 = llvm::DenseMapBase<llvm::DenseMap<mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>,mlir::Value,unsigned int,llvm::DenseMapInfo<mlir::Value,void>,llvm::detail::DenseMapPair<mlir::Value,unsigned int>>::LookupBucketFor<mlir::Value>((uint64_t *)a4, &v129, &v132);
    uint64_t v34 = v132;
    ++*(_DWORD *)(a4 + 8);
    if (*v34 == -4096) {
      goto LABEL_10;
    }
LABEL_27:
    --*(_DWORD *)(a4 + 12);
    goto LABEL_10;
  }
LABEL_52:
  if (v7) {
    uint64_t v44 = v7 - 8;
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = *(void *)(a4 + 24);
  uint64_t v46 = *(unsigned int *)(a4 + 40);
  if (v46)
  {
    LODWORD(v47) = ((v44 >> 4) ^ (v44 >> 9)) & (v46 - 1);
    uint64_t v48 = (uint64_t *)(v45 + 16 * v47);
    uint64_t v49 = *v48;
    if (*v48 == v44) {
      goto LABEL_62;
    }
    int v50 = 1;
    while (v49 != -4096)
    {
      int v51 = v47 + v50++;
      uint64_t v47 = v51 & (v46 - 1);
      uint64_t v49 = *(void *)(v45 + 16 * v47);
      if (v49 == v44)
      {
        uint64_t v48 = (uint64_t *)(v45 + 16 * v47);
        goto LABEL_62;
      }
    }
  }
  uint64_t v48 = (uint64_t *)(v45 + 16 * v46);
LABEL_62:
  if (v48 == (uint64_t *)(v45 + 16 * v46)) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = v48[1];
  }
  if (v52) {
    unsigned int v53 = (uint64_t *)(v52 + 8);
  }
  else {
    unsigned int v53 = 0;
  }
  LOBYTE(v132) = mlir::Operation::CloneOptions::all((mlir::Operation::CloneOptions *)a1);
  unsigned int v54 = mlir::Operation::CloneOptions::cloneRegions(&v132, 0);
  mlir::Operation::CloneOptions::cloneOperands(v54, 0);
  uint64_t v55 = *(void *)(v5 + 8);
  if (v55 != v5 && v53 != a3)
  {
    uint64_t v56 = v53;
    do
    {
      uint64_t v58 = v55 - 8;
      uint64_t v59 = v55;
      if (!v55) {
        uint64_t v58 = 0;
      }
      unsigned int v60 = (mlir::GenericProgramPoint *)(v58 + 32);
      uint64_t v61 = *(mlir::GenericProgramPoint **)(v58 + 40);
      if (v61 != (mlir::GenericProgramPoint *)(v58 + 32))
      {
        unsigned int v62 = v56 - 1;
        if (!v56) {
          unsigned int v62 = 0;
        }
        uint64_t v63 = v62 + 4;
        do
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v61);
          uint64_t v64 = (mlir::GenericProgramPoint *)mlir::Operation::clone();
          llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)v63, (uint64_t)v64);
          mlir::GenericProgramPoint::~GenericProgramPoint(v64);
          uint64_t v65 = *v63;
          uint64_t *v66 = *v63;
          v66[1] = (uint64_t)v63;
          *(void *)(v65 + 8) = v66;
          *uint64_t v63 = (uint64_t)v66;
          mlir::GenericProgramPoint::~GenericProgramPoint(v64);
          uint64_t v61 = (mlir::GenericProgramPoint *)*((void *)v61 + 1);
        }
        while (v61 != v60);
      }
      uint64_t v56 = (uint64_t *)v56[1];
      uint64_t v55 = *(void *)(v59 + 8);
    }
    while (v55 != v5 && v56 != a3);
    uint64_t v55 = *(void *)(v5 + 8);
  }
  uint64_t v132 = v134;
  uint64_t v133 = 0x600000000;
  if (v55 != v5 && v53 != a3)
  {
    while (1)
    {
      uint64_t v68 = v55 - 8;
      uint64_t v119 = v55;
      int64_t v120 = v53;
      if (!v55) {
        uint64_t v68 = 0;
      }
      uint64_t v69 = v53 - 1;
      if (!v53) {
        uint64_t v69 = 0;
      }
      uint64_t v70 = (mlir::GenericProgramPoint *)v69[5];
      unsigned int v71 = *(mlir::GenericProgramPoint **)(v68 + 40);
      int v124 = (mlir::GenericProgramPoint *)(v69 + 4);
      uint64_t v126 = (mlir::GenericProgramPoint *)(v68 + 32);
      if (v71 != (mlir::GenericProgramPoint *)(v68 + 32) && v70 != (mlir::GenericProgramPoint *)(v69 + 4)) {
        break;
      }
LABEL_87:
      unsigned int v53 = (uint64_t *)v120[1];
      uint64_t v55 = *(void *)(v119 + 8);
      if (v55 == v121 || v53 == a3)
      {
        if (v132 != v134) {
          free(v132);
        }
        return;
      }
    }
    while (1)
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v71);
      uint64_t v75 = v74;
      mlir::GenericProgramPoint::~GenericProgramPoint(v70);
      uint64_t v77 = v76;
      int v78 = *(_DWORD *)(v75 + 44);
      if ((v78 & 0x800000) != 0)
      {
        unint64_t v79 = *(unsigned int *)(v75 + 68);
        uint64_t v80 = v133;
        BOOL v81 = v133 > v79;
        unint64_t v82 = 0x1E8EB8000;
        if (v133 != v79) {
          goto LABEL_110;
        }
      }
      else
      {
        unint64_t v79 = 0;
        uint64_t v80 = v133;
        BOOL v81 = v133 != 0;
        unint64_t v82 = 0x1E8EB8000;
        if (v133)
        {
LABEL_110:
          if (!v81)
          {
            if (HIDWORD(v133) < v79)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v132, v134, v79, 8);
              unint64_t v82 = 0x1E8EB8000;
              uint64_t v80 = v133;
            }
            if (v79 != v80)
            {
              bzero((char *)v132 + 8 * v80, 8 * (v79 - v80));
              unint64_t v82 = 0x1E8EB8000uLL;
            }
          }
          LODWORD(v133) = v79;
          if ((*(_DWORD *)(v75 + 44) & 0x800000) == 0) {
            goto LABEL_147;
          }
          goto LABEL_116;
        }
      }
      if ((v78 & 0x800000) == 0) {
        goto LABEL_147;
      }
LABEL_116:
      uint64_t v83 = *(unsigned int *)(v75 + 68);
      if (v83)
      {
        uint64_t v128 = v70;
        uint64_t v84 = *(void *)(v75 + 72);
        uint64_t v85 = v132;
        int v86 = *(_DWORD *)(a4 + 16);
        if (v86)
        {
          uint64_t v123 = v77;
          uint64_t v87 = 0;
          unint64_t v88 = *(void *)(v84 + 24);
LABEL_120:
          uint64_t v89 = *(void *)a4;
          {
            unint64_t v82 = 0x1E8EB8000uLL;
            if (v96)
            {
              unint64_t v97 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override) {
                unint64_t v97 = 0xFF51AFD7ED558CCDLL;
              }
              llvm::hashing::detail::get_execution_seed(void)::seed = v97;
              unint64_t v82 = 0x1E8EB8000;
            }
          }
          unint64_t v90 = 0x9DDFEA08EB382D69 * ((*(void *)(v82 + 3024) + 8 * v88) ^ HIDWORD(v88));
          unint64_t v91 = 0x9DDFEA08EB382D69 * (HIDWORD(v88) ^ (v90 >> 47) ^ v90);
          LODWORD(v91) = (-348639895 * ((v91 >> 47) ^ v91)) & (v86 - 1);
          unint64_t v92 = (uint64_t *)(v89 + 16 * v91);
          uint64_t v93 = *v92;
          if (v88 == *v92)
          {
            if (v92 == (uint64_t *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 16))) {
              goto LABEL_133;
            }
LABEL_123:
            unint64_t v88 = v92[1];
            goto LABEL_133;
          }
          int v94 = 1;
          do
          {
            if (v93 == -4096) {
              goto LABEL_133;
            }
            int v95 = v91 + v94++;
            unint64_t v91 = v95 & (v86 - 1);
            uint64_t v93 = *(void *)(v89 + 16 * v91);
          }
          while (v88 != v93);
          unint64_t v92 = (uint64_t *)(v89 + 16 * v91);
          if (v92 != (uint64_t *)(*(void *)a4 + 16 * *(unsigned int *)(a4 + 16))) {
            goto LABEL_123;
          }
LABEL_133:
          while (1)
          {
            void *v85 = v88;
            if (++v87 == v83) {
              break;
            }
            ++v85;
            int v86 = *(_DWORD *)(a4 + 16);
            unint64_t v88 = *(void *)(v84 + 32 * v87 + 24);
            if (v86) {
              goto LABEL_120;
            }
          }
          unint64_t v79 = v133;
          uint64_t v70 = v128;
          uint64_t v77 = v123;
        }
        else
        {
          if (v83 >= 0xB
            && ((unint64_t)v132 >= v84 + 32 * v83 || v84 + 24 >= (unint64_t)v132 + 8 * v83))
          {
            uint64_t v99 = v83 & 3;
            if ((v83 & 3) == 0) {
              uint64_t v99 = 4;
            }
            uint64_t v98 = v83 - v99;
            unint64_t v100 = (const double *)(v84 + 88);
            int64_t v101 = (unsigned long long *)((char *)v132 + 16);
            uint64_t v102 = v98;
            do
            {
              unsigned int v103 = v100 - 8;
              unsigned long long v104 = (unsigned __int128)vld4q_f64(v103);
              unsigned long long v105 = (unsigned __int128)vld4q_f64(v100);
              *(v101 - 1) = v104;
              *int64_t v101 = v105;
              v100 += 16;
              v101 += 2;
              v102 -= 4;
            }
            while (v102);
            v85 += v98;
          }
          else
          {
            uint64_t v98 = 0;
          }
          uint64_t v106 = v83 - v98;
          int64_t v107 = (uint64_t *)(v84 + 32 * v98 + 24);
          do
          {
            uint64_t v108 = *v107;
            v107 += 4;
            *v85++ = v108;
            --v106;
          }
          while (v106);
          uint64_t v70 = v128;
        }
      }
LABEL_147:
      mlir::ValueRange::ValueRange((unint64_t *)&v130, (uint64_t)v132, v79);
      mlir::Operation::setOperands((uint64_t *)v77, v130, v131);
      unint64_t v109 = *(unsigned int *)(v75 + 44);
      uint64_t v110 = v109 & 0x7FFFFF;
      if ((v109 & 0x7FFFFF) != 0)
      {
        unint64_t v111 = ((v75 + 16 * ((v109 >> 23) & 1) + ((v109 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
             + 32 * *(unsigned int *)(v75 + 40);
        unint64_t v112 = *(unsigned int *)(v77 + 44);
        unsigned int v113 = v112 & 0x7FFFFF;
        if ((v112 & 0x7FFFFF) != 0) {
          goto LABEL_151;
        }
      }
      else
      {
        unint64_t v111 = 0;
        uint64_t v110 = 0;
        unint64_t v112 = *(unsigned int *)(v77 + 44);
        unsigned int v113 = v112 & 0x7FFFFF;
        if ((v112 & 0x7FFFFF) != 0)
        {
LABEL_151:
          if (v110)
          {
            unint64_t v114 = ((v77 + 16 * ((v112 >> 23) & 1) + ((v112 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(v77 + 40);
            uint64_t v115 = 24 * v110 - 24;
            uint64_t v116 = 24 * v113 - 24;
            unint64_t v117 = v114;
            do
            {
              mlir::Region::cloneInto(v111, v117, v114, a4);
              if (!v115) {
                break;
              }
              v111 += 24;
              v117 += 24;
              v115 -= 24;
              v114 += 24;
              uint64_t v118 = v116;
              v116 -= 24;
            }
            while (v118);
          }
        }
      }
      uint64_t v70 = (mlir::GenericProgramPoint *)*((void *)v70 + 1);
      unsigned int v71 = (mlir::GenericProgramPoint *)*((void *)v71 + 1);
      if (v71 == v126 || v70 == v124) {
        goto LABEL_87;
      }
    }
  }
}

void *mlir::IRMapping::map(mlir::IRMapping *this, mlir::Block *a2, mlir::Block *a3)
{
  uint64_t v8 = *((void *)this + 3);
  unint64_t result = (void *)((char *)this + 24);
  uint64_t v7 = v8;
  unsigned int v9 = *((_DWORD *)result + 4);
  if (!v9) {
    goto LABEL_21;
  }
  unsigned int v10 = v9 - 1;
  unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = (mlir::Block **)(v7 + 16 * v11);
  unint64_t v13 = *v12;
  if (*v12 == a2)
  {
LABEL_3:
    v12[1] = a3;
    return result;
  }
  uint64_t v15 = 0;
  int v16 = 1;
  while (v13 != (mlir::Block *)-4096)
  {
    if (v15) {
      BOOL v17 = 0;
    }
    else {
      BOOL v17 = v13 == (mlir::Block *)-8192;
    }
    if (v17) {
      uint64_t v15 = v12;
    }
    unsigned int v18 = v11 + v16++;
    unsigned int v11 = v18 & v10;
    uint64_t v12 = (mlir::Block **)(v7 + 16 * (v18 & v10));
    unint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_3;
    }
  }
  if (v15) {
    uint64_t v12 = v15;
  }
  int v19 = *((_DWORD *)this + 8);
  if (4 * v19 + 4 < 3 * v9)
  {
    if (v9 + ~v19 - *((_DWORD *)this + 9) > v9 >> 3) {
      goto LABEL_6;
    }
  }
  else
  {
LABEL_21:
    v9 *= 2;
  }
  unint64_t result = llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)result, v9);
  uint64_t v20 = *((void *)this + 3);
  int v21 = *((_DWORD *)this + 10) - 1;
  unsigned int v22 = v21 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = (mlir::Block **)(v20 + 16 * v22);
  unsigned int v23 = *v12;
  if (*v12 == a2)
  {
LABEL_23:
    ++*((_DWORD *)this + 8);
    if (a2 == (mlir::Block *)-4096) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != (mlir::Block *)-4096)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (mlir::Block *)-8192;
    }
    if (v26) {
      uint64_t v24 = v12;
    }
    unsigned int v27 = v22 + v25++;
    unsigned int v22 = v27 & v21;
    uint64_t v12 = (mlir::Block **)(v20 + 16 * (v27 & v21));
    unsigned int v23 = *v12;
    if (*v12 == a2) {
      goto LABEL_23;
    }
  }
  if (v24) {
    uint64_t v12 = v24;
  }
LABEL_6:
  uint64_t v14 = *v12;
  ++*((_DWORD *)this + 8);
  if (v14 != (mlir::Block *)-4096) {
LABEL_7:
  }
    --*((_DWORD *)this + 9);
LABEL_8:
  *uint64_t v12 = a2;
  v12[1] = 0;
  v12[1] = a3;
  return result;
}

mlir::Block *mlir::Region::findAncestorBlockInRegion(mlir::Region *this, mlir::Block *a2)
{
  while (1)
  {
    if ((mlir::Region *)mlir::Block::getParent(a2) == this) {
      return a2;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(a2);
    if (!ParentOp) {
      break;
    }
    a2 = *(mlir::Block **)(ParentOp + 16);
    if (!a2) {
      return a2;
    }
  }
  return 0;
}

mlir::Operation *mlir::Region::findAncestorOpInRegion(mlir::Region *this, mlir::Operation *a2)
{
  while (1)
  {
    uint64_t v4 = (mlir::Block *)*((void *)a2 + 2);
    if (!v4) {
      break;
    }
    unint64_t Parent = (mlir::Region *)mlir::Block::getParent(v4);
    if (!Parent) {
      break;
    }
    if (Parent != this)
    {
      a2 = (mlir::Operation *)*((void *)Parent + 2);
      if (a2) {
        continue;
      }
    }
    return a2;
  }
  return 0;
}

uint64_t llvm::ilist_traits<mlir::Block>::addNodeToList(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 24) = *(void *)(a2 + 24) & 7 | result;
  return result;
}

void llvm::ilist_traits<mlir::Block>::removeNodeFromList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) &= 7uLL;
}

uint64_t llvm::ilist_traits<mlir::Block>::transferNodesFromList(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != a2 && a3 != a4)
  {
    do
    {
      uint64_t v4 = a3 - 8;
      if (!a3) {
        uint64_t v4 = 0;
      }
      *(void *)(v4 + 24) = *(void *)(v4 + 24) & 7 | result;
      a3 = *(void *)(a3 + 8);
    }
    while (a3 != a4);
  }
  return result;
}

void *mlir::Region::OpIterator::OpIterator(void *this, mlir::Region *a2, char a3)
{
  *this = a2;
  uint64_t v3 = a2;
  if ((a3 & 1) == 0) {
    uint64_t v3 = (mlir::Region *)*((void *)a2 + 1);
  }
  this[1] = v3;
  this[2] = 0;
  if (*(mlir::Region **)a2 != a2)
  {
    if (v3 == a2) {
      goto LABEL_12;
    }
    while (1)
    {
      uint64_t v4 = (char **)((char *)v3 - 8);
      if (!v3) {
        uint64_t v4 = 0;
      }
      if (v4[4] != (char *)(v4 + 4)) {
        break;
      }
      uint64_t v3 = (mlir::Region *)*((void *)v3 + 1);
      this[1] = v3;
      if (v3 == a2) {
        goto LABEL_12;
      }
    }
    if (v3 == a2) {
LABEL_12:
    }
      uint64_t v5 = 0;
    else {
      uint64_t v5 = v4[5];
    }
    this[2] = v5;
  }
  return this;
}

uint64_t *mlir::Region::OpIterator::operator++(uint64_t *result)
{
  uint64_t v1 = result[1];
  uint64_t v2 = result[2];
  uint64_t v3 = v1 - 8;
  if (!v1) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = v3 + 32;
  if (v2 == v4 || (uint64_t v5 = *(void *)(v2 + 8), result[2] = v5, v5 == v4))
  {
    uint64_t v6 = *(void *)(v1 + 8);
    result[1] = v6;
    uint64_t v7 = *result;
    if (v6 == *result) {
      goto LABEL_13;
    }
    while (1)
    {
      uint64_t v8 = v6 - 8;
      if (!v6) {
        uint64_t v8 = 0;
      }
      if (*(void *)(v8 + 32) != v8 + 32) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 8);
      result[1] = v6;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
    if (v6 == v7) {
LABEL_13:
    }
      result[2] = 0;
    else {
      result[2] = *(void *)(v8 + 40);
    }
  }
  return result;
}

unint64_t mlir::RegionRange::dereference_iterator(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 & 6;
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  BOOL v4 = v2 != 2 || v3 == 0;
  if (v4 && (v2 == 4 ? (BOOL v5 = v3 == 0) : (BOOL v5 = 1), v5)) {
    return v3 + 24 * a2;
  }
  else {
    return *(void *)(v3 + 8 * a2);
  }
}

uint64_t mlir::RegionKindInterface::getRegionKind(uint64_t (***this)(uint64_t), uint64_t a2)
{
  return (*this[1])(a2);
}

uint64_t mlir::RegionKindInterface::hasSSADominance(mlir::RegionKindInterface *this, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*((void *)this + 1) + 8))(a2);
}

mlir::SymbolTable *mlir::SymbolTable::SymbolTable(mlir::SymbolTable *this, mlir::Operation *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  BOOL v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 8) = 0;
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
  __int16 v42 = 261;
  v41[0] = "sym_name";
  v41[1] = 8;
  uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v41);
  uint64_t v7 = *(void *)((((unint64_t)a2
                   + 16 * (((unint64_t)*((unsigned int *)a2 + 11) >> 23) & 1)
                   + (((unint64_t)*((unsigned int *)a2 + 11) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *((unsigned int *)a2 + 10)
                 + 8);
  if (v7) {
    uint64_t v8 = v7 - 8;
  }
  else {
    uint64_t v8 = 0;
  }
  unsigned int v9 = (mlir::GenericProgramPoint *)(v8 + 32);
  unsigned int v10 = *(mlir::GenericProgramPoint **)(v8 + 40);
  if (v10 != (mlir::GenericProgramPoint *)(v8 + 32))
  {
    uint64_t v11 = v6;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v10);
      uint64_t v17 = v16;
      v41[0] = v11;
      uint64_t v18 = v11;
      if (*(unsigned char *)(v16 + 47))
      {
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v41);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(v17, AttrData, v20);
        if (v22) {
          goto LABEL_12;
        }
        uint64_t v18 = v41[0];
      }
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v17 + 56, v18);
LABEL_12:
      if (InherentAttr)
      {
        uint64_t v23 = *(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id
            ? InherentAttr
            : 0;
        if (v23)
        {
          unsigned int v24 = *((_DWORD *)this + 6);
          if (!v24) {
            goto LABEL_37;
          }
          uint64_t v12 = *((void *)this + 1);
          unsigned int v13 = (v24 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          uint64_t v14 = (uint64_t *)(v12 + 16 * v13);
          uint64_t v15 = *v14;
          if (*v14 != v23)
          {
            BOOL v26 = 0;
            int v27 = 1;
            while (v15 != -4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v15 == -8192;
              }
              if (v28) {
                BOOL v26 = v14;
              }
              unsigned int v29 = v13 + v27++;
              unsigned int v13 = v29 & (v24 - 1);
              uint64_t v14 = (uint64_t *)(v12 + 16 * v13);
              uint64_t v15 = *v14;
              if (*v14 == v23) {
                goto LABEL_7;
              }
            }
            if (v26) {
              unint64_t v30 = v26;
            }
            else {
              unint64_t v30 = v14;
            }
            int v31 = *((_DWORD *)this + 4);
            if (4 * v31 + 4 < 3 * v24)
            {
              if (v24 + ~v31 - *((_DWORD *)this + 5) <= v24 >> 3) {
                goto LABEL_38;
              }
            }
            else
            {
LABEL_37:
              v24 *= 2;
LABEL_38:
              llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow((uint64_t)v4, v24);
              uint64_t v32 = *((void *)this + 1);
              int v33 = *((_DWORD *)this + 6) - 1;
              unsigned int v34 = v33 & ((v23 >> 4) ^ (v23 >> 9));
              unint64_t v30 = (uint64_t *)(v32 + 16 * v34);
              uint64_t v35 = *v30;
              if (*v30 == v23)
              {
                uint64_t v25 = v23;
                goto LABEL_21;
              }
              unsigned int v36 = 0;
              int v37 = 1;
              while (v35 != -4096)
              {
                if (v36) {
                  BOOL v38 = 0;
                }
                else {
                  BOOL v38 = v35 == -8192;
                }
                if (v38) {
                  unsigned int v36 = v30;
                }
                unsigned int v39 = v34 + v37++;
                unsigned int v34 = v39 & v33;
                unint64_t v30 = (uint64_t *)(v32 + 16 * (v39 & v33));
                uint64_t v35 = *v30;
                uint64_t v25 = v23;
                if (*v30 == v23) {
                  goto LABEL_21;
                }
              }
              if (v36) {
                unint64_t v30 = v36;
              }
            }
            uint64_t v25 = *v30;
LABEL_21:
            ++*((_DWORD *)this + 4);
            if (v25 != -4096) {
              --*((_DWORD *)this + 5);
            }
            uint64_t *v30 = v23;
            v30[1] = v17;
          }
        }
      }
LABEL_7:
      unsigned int v10 = (mlir::GenericProgramPoint *)*((void *)v10 + 1);
    }
    while (v10 != v9);
  }
  return this;
}

int32x2_t mlir::SymbolTable::remove(int32x2_t *this, mlir::Operation *a2)
{
  if (*((unsigned char *)a2 + 47))
  {
    uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"sym_name", 8);
    if (v6)
    {
      if (InherentAttr) {
        goto LABEL_4;
      }
LABEL_10:
      uint64_t v7 = 0;
      int32x2_t v8 = this[1];
      uint64_t v9 = this[3].u32[0];
      if (!v9) {
        goto LABEL_16;
      }
      goto LABEL_11;
    }
  }
  uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "sym_name", 8uLL);
  if (!InherentAttr) {
    goto LABEL_10;
  }
LABEL_4:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v7 = InherentAttr;
  }
  else {
    uint64_t v7 = 0;
  }
  int32x2_t v8 = this[1];
  uint64_t v9 = this[3].u32[0];
  if (!v9) {
    goto LABEL_16;
  }
LABEL_11:
  LODWORD(v10) = ((v7 >> 4) ^ (v7 >> 9)) & (v9 - 1);
  uint64_t v11 = *(void *)&v8 + 16 * v10;
  uint64_t v12 = *(void *)v11;
  if (*(void *)v11 == v7) {
    goto LABEL_17;
  }
  int v13 = 1;
  while (v12 != -4096)
  {
    int v14 = v10 + v13++;
    uint64_t v10 = v14 & (v9 - 1);
    uint64_t v12 = *(void *)(*(void *)&v8 + 16 * v10);
    if (v12 == v7)
    {
      uint64_t v11 = *(void *)&v8 + 16 * v10;
      goto LABEL_17;
    }
  }
LABEL_16:
  uint64_t v11 = *(void *)&v8 + 16 * v9;
LABEL_17:
  if (v11 != *(void *)&v8 + 16 * v9 && *(mlir::Operation **)(v11 + 8) == a2)
  {
    *(void *)uint64_t v11 = -8192;
    int32x2_t result = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
    this[2] = result;
  }
  return result;
}

void mlir::SymbolTable::erase(int32x2_t *this, mlir::Operation *a2)
{
  mlir::SymbolTable::remove(this, a2);

  mlir::Operation::erase(a2);
}

uint64_t mlir::SymbolTable::insert(uint64_t a1, uint64_t a2, mlir::GenericProgramPoint **a3)
{
  v99[16] = *MEMORY[0x1E4F143B8];
  char v6 = *(mlir::Block **)(a2 + 16);
  if (v6 && mlir::Block::getParentOp(v6))
  {
    if (!*(unsigned char *)(a2 + 47)) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)(((*(void *)a1
                   + 16 * (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 23) & 1)
                   + (((unint64_t)*(unsigned int *)(*(void *)a1 + 44) >> 21) & 0x7F8)
                   + 71) & 0xFFFFFFFFFFFFFFF8)
                 + 32 * *(unsigned int *)(*(void *)a1 + 40)
                 + 8);
  if (v7) {
    uint64_t v8 = v7 - 8;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (mlir::GenericProgramPoint **)(v8 + 32);
  if (a3)
  {
    if (v9 != a3) {
      goto LABEL_16;
    }
    uint64_t v10 = *a3;
    if (*a3 == (mlir::GenericProgramPoint *)a3) {
      goto LABEL_15;
    }
  }
  else
  {
    a3 = (mlir::GenericProgramPoint **)(v8 + 32);
    uint64_t v10 = *v9;
    if (v10 == (mlir::GenericProgramPoint *)(v8 + 32)) {
      goto LABEL_15;
    }
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(v10);
  if (mlir::OperationName::hasTrait<mlir::OpTrait::IsTerminator>((void *)(v11 + 48)))
  {
    uint64_t v9 = a3;
    a3 = (mlir::GenericProgramPoint **)*a3;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v9 = a3;
LABEL_16:
  llvm::ilist_traits<mlir::Operation>::addNodeToList((uint64_t)v9, a2);
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  uint64_t v12 = *a3;
  *int v13 = *a3;
  v13[1] = (mlir::GenericProgramPoint *)a3;
  *((void *)v12 + 1) = v13;
  *a3 = (mlir::GenericProgramPoint *)v13;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)a2);
  if (!*(unsigned char *)(a2 + 47)) {
    goto LABEL_28;
  }
LABEL_17:
  uint64_t InherentAttr = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_name", 8);
  if (v15)
  {
    if (!InherentAttr) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
LABEL_28:
  uint64_t InherentAttr = mlir::DictionaryAttr::get(a2 + 56, "sym_name", 8uLL);
  if (!InherentAttr)
  {
LABEL_29:
    uint64_t v16 = 0;
    uint64_t v92 = 0;
    uint64_t v17 = a1 + 8;
    uint64_t v18 = *(void *)(a1 + 8);
    unsigned int v19 = *(_DWORD *)(a1 + 24);
    if (!v19) {
      goto LABEL_30;
    }
    goto LABEL_23;
  }
LABEL_19:
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v16 = InherentAttr;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v92 = v16;
  uint64_t v17 = a1 + 8;
  uint64_t v18 = *(void *)(a1 + 8);
  unsigned int v19 = *(_DWORD *)(a1 + 24);
  if (!v19)
  {
LABEL_30:
    unsigned int v29 = 0;
    int v30 = *(_DWORD *)(a1 + 16);
    if (4 * v30 + 4 < 3 * v19) {
      goto LABEL_31;
    }
    goto LABEL_113;
  }
LABEL_23:
  unsigned int v20 = v19 - 1;
  uint64_t v21 = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
  char v22 = (uint64_t *)(v18 + 16 * v21);
  uint64_t v23 = *v22;
  if (*v22 == v16) {
    goto LABEL_24;
  }
  uint64_t v69 = 0;
  int v70 = 1;
  uint64_t v71 = *v22;
  unsigned int v72 = v20 & ((v16 >> 4) ^ (v16 >> 9));
  do
  {
    if (v71 == -4096)
    {
      if (v69) {
        unsigned int v29 = v69;
      }
      else {
        unsigned int v29 = v22;
      }
      int v30 = *(_DWORD *)(a1 + 16);
      if (4 * v30 + 4 < 3 * v19)
      {
LABEL_31:
        if (v19 + ~v30 - *(_DWORD *)(a1 + 20) > v19 >> 3) {
          goto LABEL_32;
        }
        goto LABEL_114;
      }
LABEL_113:
      v19 *= 2;
LABEL_114:
      llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v17, v19);
      uint64_t v77 = *(void *)(a1 + 8);
      int v78 = *(_DWORD *)(a1 + 24) - 1;
      unsigned int v79 = v78 & ((v16 >> 4) ^ (v16 >> 9));
      unsigned int v29 = (uint64_t *)(v77 + 16 * v79);
      uint64_t v80 = *v29;
      if (*v29 == v16)
      {
        uint64_t v31 = v16;
        goto LABEL_33;
      }
      uint64_t v85 = 0;
      int v86 = 1;
      while (v80 != -4096)
      {
        if (v85) {
          BOOL v87 = 0;
        }
        else {
          BOOL v87 = v80 == -8192;
        }
        if (v87) {
          uint64_t v85 = v29;
        }
        unsigned int v88 = v79 + v86++;
        unsigned int v79 = v88 & v78;
        unsigned int v29 = (uint64_t *)(v77 + 16 * (v88 & v78));
        uint64_t v80 = *v29;
        uint64_t v31 = v16;
        if (*v29 == v16) {
          goto LABEL_33;
        }
      }
      if (v85) {
        unsigned int v29 = v85;
      }
LABEL_32:
      uint64_t v31 = *v29;
LABEL_33:
      ++*(_DWORD *)(a1 + 16);
      if (v31 != -4096) {
        --*(_DWORD *)(a1 + 20);
      }
      *unsigned int v29 = v16;
      v29[1] = a2;
      return v92;
    }
    if (v69) {
      BOOL v73 = 0;
    }
    else {
      BOOL v73 = v71 == -8192;
    }
    if (v73) {
      uint64_t v69 = v22;
    }
    unsigned int v74 = v72 + v70++;
    unsigned int v72 = v74 & v20;
    char v22 = (uint64_t *)(v18 + 16 * (v74 & v20));
    uint64_t v71 = *v22;
  }
  while (*v22 != v16);
  if (v23 == v16)
  {
LABEL_24:
    if (*(void *)(v18 + 16 * v21 + 8) == a2) {
      return v16;
    }
LABEL_25:
    uint64_t v89 = v17;
    unint64_t v91 = (mlir::Attribute *)(a2 + 24);
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v92);
    size_t v27 = v25;
    unint64_t v97 = v99;
    long long v98 = xmmword_1811019F0;
    if (v25 < 0x81)
    {
      uint64_t v28 = 0;
      if (!v25)
      {
LABEL_38:
        unint64_t v32 = v28 + v27;
        unint64_t v33 = v32;
        *(void *)&long long v98 = v32;
        unint64_t v90 = v32 + 1;
        BOOL v34 = v32 > v32;
        if (v32 == v32) {
          goto LABEL_45;
        }
LABEL_39:
        if (!v34)
        {
          if (*((void *)&v98 + 1) < v33)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v33, 1);
            unint64_t v32 = v98;
          }
          if (v33 != v32) {
            bzero((char *)v97 + v32, v33 - v32);
          }
        }
        *(void *)&long long v98 = v33;
        while (1)
        {
LABEL_45:
          uint64_t v35 = v33;
          if (v33 >= *((void *)&v98 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v90, 1);
            uint64_t v35 = v98;
          }
          *((unsigned char *)v97 + v35) = 95;
          *(void *)&long long v98 = v98 + 1;
          unsigned int v36 = *(_DWORD *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v36 + 1;
          std::to_string(&v95, v36);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v37 = &v95;
          }
          else {
            int v37 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v95.__r_.__value_.__l.__size_;
          }
          uint64_t v39 = v98;
          if (*((void *)&v98 + 1) < (unint64_t)v98 + size)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v98 + size, 1);
            uint64_t v39 = v98;
          }
          if (size)
          {
            memcpy((char *)v97 + v39, v37, size);
            uint64_t v39 = v98;
          }
          std::string::size_type v40 = v39 + size;
          *(void *)&long long v98 = v40;
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v95.__r_.__value_.__l.__data_);
            std::string::size_type v40 = v98;
          }
          __int16 v96 = 261;
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
          v95.__r_.__value_.__l.__size_ = v40;
          uint64_t v41 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v95);
          uint64_t v42 = v41;
          unsigned int v43 = *(_DWORD *)(a1 + 24);
          if (!v43) {
            goto LABEL_93;
          }
          uint64_t v44 = *(void *)(a1 + 8);
          unsigned int v45 = (v43 - 1) & ((v41 >> 4) ^ (v41 >> 9));
          uint64_t v46 = (uint64_t *)(v44 + 16 * v45);
          uint64_t v47 = *v46;
          if (*v46 != v41) {
            break;
          }
LABEL_61:
          unint64_t v32 = v98;
          BOOL v34 = (unint64_t)v98 > v33;
          if ((void)v98 != v33) {
            goto LABEL_39;
          }
        }
        uint64_t v48 = 0;
        int v49 = 1;
        while (v47 != -4096)
        {
          if (v48) {
            BOOL v50 = 0;
          }
          else {
            BOOL v50 = v47 == -8192;
          }
          if (v50) {
            uint64_t v48 = v46;
          }
          unsigned int v51 = v45 + v49++;
          unsigned int v45 = v51 & (v43 - 1);
          uint64_t v46 = (uint64_t *)(v44 + 16 * v45);
          uint64_t v47 = *v46;
          if (*v46 == v41) {
            goto LABEL_61;
          }
        }
        if (v48) {
          uint64_t v63 = v48;
        }
        else {
          uint64_t v63 = v46;
        }
        int v64 = *(_DWORD *)(a1 + 16);
        if (4 * v64 + 4 < 3 * v43)
        {
          if (v43 + ~v64 - *(_DWORD *)(a1 + 20) > v43 >> 3) {
            goto LABEL_74;
          }
        }
        else
        {
LABEL_93:
          v43 *= 2;
        }
        llvm::DenseMap<mlir::Block *,llvm::SMLoc,llvm::DenseMapInfo<mlir::Block *,void>,llvm::detail::DenseMapPair<mlir::Block *,llvm::SMLoc>>::grow(v89, v43);
        uint64_t v65 = *(void *)(a1 + 8);
        int v66 = *(_DWORD *)(a1 + 24) - 1;
        unsigned int v67 = v66 & ((v42 >> 4) ^ (v42 >> 9));
        uint64_t v63 = (uint64_t *)(v65 + 16 * v67);
        uint64_t v68 = *v63;
        if (*v63 == v42)
        {
          uint64_t v52 = v42;
LABEL_75:
          ++*(_DWORD *)(a1 + 16);
          if (v52 != -4096) {
            --*(_DWORD *)(a1 + 20);
          }
          *uint64_t v63 = v42;
          v63[1] = a2;
          unsigned int v53 = v97;
          uint64_t v54 = v98;
          uint64_t v55 = (mlir::StringAttr *)mlir::Attribute::getContext(v91);
          __int16 v94 = 261;
          v93[0] = v53;
          v93[1] = v54;
          uint64_t v56 = mlir::StringAttr::get(v55, (mlir::MLIRContext *)v93);
          uint64_t v57 = (mlir::StringAttr *)mlir::Attribute::getContext(v91);
          __int16 v96 = 261;
          v95.__r_.__value_.__r.__words[0] = (std::string::size_type)"sym_name";
          v95.__r_.__value_.__l.__size_ = 8;
          uint64_t v58 = mlir::StringAttr::get(v57, (mlir::MLIRContext *)&v95);
          mlir::Operation::setAttr(a2, v58, v56);
          if (!*(unsigned char *)(a2 + 47) || (uint64_t v59 = mlir::Operation::getInherentAttr(a2, (uint64_t)"sym_name", 8), !v60)) {
            uint64_t v59 = mlir::DictionaryAttr::get(a2 + 56, "sym_name", 8uLL);
          }
          if (v59)
          {
            if (*(_UNKNOWN **)(*(void *)v59 + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
              uint64_t v16 = v59;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v61 = v97;
            if (v97 == v99) {
              return v16;
            }
          }
          else
          {
            uint64_t v16 = 0;
            uint64_t v61 = v97;
            if (v97 == v99) {
              return v16;
            }
          }
          free(v61);
          return v16;
        }
        BOOL v81 = 0;
        int v82 = 1;
        while (v68 != -4096)
        {
          if (v81) {
            BOOL v83 = 0;
          }
          else {
            BOOL v83 = v68 == -8192;
          }
          if (v83) {
            BOOL v81 = v63;
          }
          unsigned int v84 = v67 + v82++;
          unsigned int v67 = v84 & v66;
          uint64_t v63 = (uint64_t *)(v65 + 16 * (v84 & v66));
          uint64_t v68 = *v63;
          uint64_t v52 = v42;
          if (*v63 == v42) {
            goto LABEL_75;
          }
        }
        if (v81) {
          uint64_t v63 = v81;
        }
LABEL_74:
        uint64_t v52 = *v63;
        goto LABEL_75;
      }
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v97, v99, v25, 1);
      uint64_t v28 = v98;
      if (!v27) {
        goto LABEL_38;
      }
    }
    memcpy((char *)v97 + v28, AttrData, v27);
    uint64_t v28 = v98;
    goto LABEL_38;
  }
  int v75 = 1;
  while (v23 != -4096)
  {
    int v76 = v21 + v75++;
    uint64_t v21 = v76 & v20;
    uint64_t v23 = *(void *)(v18 + 16 * v21);
    if (v23 == v16) {
      goto LABEL_24;
    }
  }
  if (a2) {
    goto LABEL_25;
  }
  return v16;
}

uint64_t mlir::SymbolTable::getSymbolName(mlir::SymbolTable *this, mlir::Operation *a2)
{
  if (!*((unsigned char *)this + 47)
    || (uint64_t result = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
  }
  if (result)
  {
    if (*(_UNKNOWN **)(*(void *)result + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
      return 0;
    }
  }
  return result;
}

uint64_t mlir::SymbolTable::replaceAllSymbolUses(mlir::Operation *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = a2;
  uint64_t v17 = mlir::SymbolRefAttr::get(a2);
  collectSymbolScopes((mlir::Operation *)&v19, a1, a3);
  if (v20)
  {
    BOOL v5 = v19;
    uint64_t v16 = *(void **)v19;
    uint64_t NewRefAttr = generateNewRefAttr(v16, v17);
    int v14 = 0;
    memset(v13, 0, sizeof(v13));
    uint64_t v7 = operator new(0x28uLL);
    void *v7 = &unk_1EC9CF120;
    v7[1] = &v16;
    uint64_t v7[2] = &NewRefAttr;
    v7[3] = &v18;
    v7[4] = &v17;
    uint64_t v23 = v7;
    mlir::AttrTypeReplacer::addReplacement((uint64_t *)v13, v22);
    if (v23 == v22)
    {
      (*(void (**)(void *))(v22[0] + 32))(v22);
      v22[0] = v13;
      uint64_t v10 = v5[1];
      unint64_t v9 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v23) {
        (*(void (**)(void *))(*v23 + 40))(v23);
      }
      v22[0] = v13;
      uint64_t v8 = v5[1];
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) == 0) {
        goto LABEL_13;
      }
    }
    if (v9)
    {
      uint64_t v6 = 1;
      goto LABEL_4;
    }
LABEL_13:
    mlir::AttrTypeReplacer::replaceElementsIn((mlir::AttrTypeReplacer *)v13, (mlir::Operation *)v9, 1, 0, 0);
    if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v9 + 48))) {
      goto LABEL_5;
    }
    unint64_t v11 = *(unsigned int *)(v9 + 44);
    uint64_t v6 = v11 & 0x7FFFFF;
    if ((v11 & 0x7FFFFF) != 0)
    {
      unint64_t v9 = ((v9 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
         + 32 * *(unsigned int *)(v9 + 40);
    }
    else
    {
      unint64_t v9 = 0;
      uint64_t v6 = 0;
    }
LABEL_4:
    if ((walkSymbolTable(v9, v6, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult replaceAllSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::StringAttr,mlir::Operation *)::{lambda(mlir::Operation *)#1}>, (uint64_t)v22) & 0xFF00000000) == 0)mlir::AttrTypeReplacer::~AttrTypeReplacer((llvm **)v13); {
LABEL_5:
    }
    mlir::AttrTypeReplacer::~AttrTypeReplacer((llvm **)v13);
  }
  if (v19 != &v21) {
    free(v19);
  }
  return 1;
}

uint64_t mlir::SymbolTable::getSymbolVisibility(mlir::SymbolTable *this, mlir::Operation *a2)
{
  if (!*((unsigned char *)this + 47)
    || (uint64_t result = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_visibility", 14), !v4))
  {
    uint64_t result = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_visibility", 0xEuLL);
  }
  if (result)
  {
    BOOL v5 = *(void **)(*(void *)result + 136);
    BOOL v6 = v5 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
    if (v5 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v13 = v7;
    if (!v6) {
      return 0;
    }
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
    if (v9 != 6) {
      return v9 == 7 && *(_DWORD *)AttrData == 1986622064 && *(_DWORD *)(AttrData + 3) == 1702125942;
    }
    BOOL v12 = *(_DWORD *)AttrData == 1953719662 && *(_WORD *)(AttrData + 4) == 25701;
    return (2 * v12);
  }
  return result;
}

void mlir::SymbolTable::setSymbolVisibility(uint64_t a1, int a2)
{
  char v4 = (mlir::Attribute *)(a1 + 24);
  uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 24));
  if (a2)
  {
    BOOL v6 = "nested";
    if (a2 == 1) {
      BOOL v6 = "private";
    }
    uint64_t v7 = 6;
    __int16 v13 = 261;
    if (a2 == 1) {
      uint64_t v7 = 7;
    }
    v12[0] = v6;
    v12[1] = v7;
    uint64_t v8 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v12);
    uint64_t v9 = (mlir::StringAttr *)mlir::Attribute::getContext(v4);
    __int16 v16 = 261;
    int v14 = "sym_visibility";
    uint64_t v15 = 14;
    uint64_t v10 = mlir::StringAttr::get(v9, (mlir::MLIRContext *)&v14);
    mlir::Operation::setAttr(a1, v10, v8);
  }
  else
  {
    __int16 v16 = 261;
    int v14 = "sym_visibility";
    uint64_t v15 = 14;
    uint64_t v11 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)&v14);
    mlir::Operation::removeAttr(a1, v11);
  }
}

mlir::SymbolTable *mlir::SymbolTable::getNearestSymbolTable(mlir::SymbolTable *this, mlir::Operation *a2)
{
  uint64_t v2 = this;
  if ((*((_DWORD *)this + 11) & 0x7FFFFF) == 1)
  {
    uint64_t v3 = *((void *)this + 6);
    if (*(_UNKNOWN **)(v3 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
    {
      uint64_t v8 = *(void *)(v3 + 8);
      if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8)) {
        return 0;
      }
    }
    else if (!*(void *)(v3 + 24))
    {
      return 0;
    }
  }
  if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)v2 + 6)) {
    return v2;
  }
  while (1)
  {
    BOOL v5 = (mlir::Block *)*((void *)v2 + 2);
    if (!v5) {
      break;
    }
    uint64_t ParentOp = mlir::Block::getParentOp(v5);
    uint64_t v2 = (mlir::SymbolTable *)ParentOp;
    if (!ParentOp) {
      return v2;
    }
    if ((*(_DWORD *)(ParentOp + 44) & 0x7FFFFF) == 1)
    {
      uint64_t v7 = *(void *)(ParentOp + 48);
      if (*(_UNKNOWN **)(v7 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
      {
        uint64_t v8 = *(void *)(v7 + 8);
        if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8)) {
          return 0;
        }
      }
      else if (!*(void *)(v7 + 24))
      {
        return 0;
      }
    }
    if (mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)v2 + 6)) {
      return v2;
    }
  }
  return 0;
}

uint64_t mlir::SymbolTable::walkSymbolTables(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, uint64_t, BOOL), uint64_t a4)
{
  uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(a1 + 48));
  char v9 = result;
  if (result)
  {
    uint64_t v10 = llvm::DefaultDoCastIfPossible<mlir::SymbolOpInterface,mlir::Operation *,llvm::CastInfo<mlir::SymbolOpInterface,mlir::Operation *,void>>::doCastIfPossible((mlir::SymbolOpInterface *)a1, v8);
    if (v10) {
      uint64_t result = (*(uint64_t (**)(uint64_t, mlir::SymbolOpInterface *))(v11 + 32))(v11, v10);
    }
    else {
      uint64_t result = 1;
    }
    BOOL v12 = (result | a2) != 0;
    unint64_t v13 = *(unsigned int *)(a1 + 44);
    unsigned int v14 = v13 & 0x7FFFFF;
    if ((v13 & 0x7FFFFF) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v12 = 1;
    unint64_t v13 = *(unsigned int *)(a1 + 44);
    unsigned int v14 = v13 & 0x7FFFFF;
    if ((v13 & 0x7FFFFF) == 0) {
      goto LABEL_18;
    }
  }
  unint64_t v15 = ((a1 + 16 * ((v13 >> 23) & 1) + ((v13 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
      + 32 * *(unsigned int *)(a1 + 40);
  unint64_t v16 = v15 + 24 * v14;
  do
  {
    for (uint64_t i = *(void *)(v15 + 8); i != v15; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v18 = i - 8;
      if (!i) {
        uint64_t v18 = 0;
      }
      unsigned int v19 = (mlir::GenericProgramPoint *)(v18 + 32);
      int v20 = *(mlir::GenericProgramPoint **)(v18 + 40);
      if (v20 != (mlir::GenericProgramPoint *)(v18 + 32))
      {
        do
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v20);
          uint64_t result = mlir::SymbolTable::walkSymbolTables();
          int v20 = (mlir::GenericProgramPoint *)*((void *)v20 + 1);
        }
        while (v20 != v19);
      }
    }
    v15 += 24;
  }
  while (v15 != v16);
LABEL_18:
  if (v9)
  {
    return a3(a4, a1, v12);
  }
  return result;
}

uint64_t mlir::SymbolTable::lookupSymbolIn(unsigned int *a1, uint64_t a2)
{
  unint64_t v3 = a1[11];
  if ((v3 & 0x7FFFFF) != 0)
  {
    char v4 = (void *)((((unint64_t)&a1[4 * ((v3 >> 23) & 1) + 17] + ((v3 >> 21) & 0x7F8) + 3) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * a1[10]);
    if ((void *)*v4 == v4) {
      return 0;
    }
    goto LABEL_5;
  }
  char v4 = 0;
  if (MEMORY[0])
  {
LABEL_5:
    uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a1 + 6));
    __int16 v22 = 261;
    v21[0] = "sym_name";
    v21[1] = 8;
    uint64_t v6 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v21);
    uint64_t v7 = v4[1];
    if (v7) {
      uint64_t v8 = v7 - 8;
    }
    else {
      uint64_t v8 = 0;
    }
    char v9 = (mlir::GenericProgramPoint *)(v8 + 32);
    uint64_t v10 = *(mlir::GenericProgramPoint **)(v8 + 40);
    if (v10 == (mlir::GenericProgramPoint *)(v8 + 32)) {
      return 0;
    }
    uint64_t v11 = v6;
    do
    {
      mlir::GenericProgramPoint::~GenericProgramPoint(v10);
      uint64_t v13 = v12;
      v21[0] = v11;
      uint64_t v14 = v11;
      if (*(unsigned char *)(v12 + 47))
      {
        uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v21);
        uint64_t InherentAttr = mlir::Operation::getInherentAttr(v13, AttrData, v16);
        if (v18)
        {
          if (!InherentAttr) {
            goto LABEL_10;
          }
          goto LABEL_18;
        }
        uint64_t v14 = v21[0];
      }
      uint64_t InherentAttr = mlir::DictionaryAttr::get(v13 + 56, v14);
      if (!InherentAttr)
      {
LABEL_10:
        if (!a2) {
          return v13;
        }
        goto LABEL_11;
      }
LABEL_18:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v19 = InherentAttr;
      }
      else {
        uint64_t v19 = 0;
      }
      if (v19 == a2) {
        return v13;
      }
LABEL_11:
      uint64_t v10 = (mlir::GenericProgramPoint *)*((void *)v10 + 1);
    }
    while (v10 != v9);
  }
  return 0;
}

uint64_t mlir::SymbolTable::lookupSymbolIn(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  BOOL v5 = v7;
  uint64_t v6 = 0x400000000;
  if (!lookupSymbolInImpl(a1, a2, (uint64_t)&v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v4))
  {
    uint64_t v2 = 0;
    if (v5 == v7) {
      return v2;
    }
    goto LABEL_3;
  }
  uint64_t v2 = *((void *)v5 + v6 - 1);
  if (v5 != v7) {
LABEL_3:
  }
    free(v5);
  return v2;
}

uint64_t lookupSymbolInImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v26 = a2;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v26);
  uint64_t result = a4(a5, a1, Value);
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = *(unsigned int *)(a3 + 8);
    if (v12 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v12 + 1, 8);
      LODWORD(v12) = *(_DWORD *)(a3 + 8);
    }
    *(void *)(*(void *)a3 + 8 * v12) = v11;
    ++*(_DWORD *)(a3 + 8);
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v26);
    if (v14)
    {
      unint64_t v15 = (uint64_t *)AttrData;
      uint64_t v16 = v14;
      uint64_t result = mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v11 + 48));
      if (result)
      {
        if (v16 == 1)
        {
LABEL_15:
          uint64_t LeafReference = mlir::SymbolRefAttr::getLeafReference((mlir::SymbolRefAttr *)&v26);
          uint64_t v22 = a4(a5, v11, LeafReference);
          uint64_t v23 = *(unsigned int *)(a3 + 8);
          if (v23 >= *(_DWORD *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v23 + 1, 8);
            LODWORD(v23) = *(_DWORD *)(a3 + 8);
          }
          *(void *)(*(void *)a3 + 8 * v23) = v22;
          unsigned int v24 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v24;
          return *(void *)(*(void *)a3 + 8 * v24 - 8) != 0;
        }
        else
        {
          uint64_t v17 = 8 * v16 - 8;
          while (1)
          {
            uint64_t v25 = *v15;
            uint64_t v18 = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v25);
            uint64_t v19 = a4(a5, v11, v18);
            if (!v19) {
              return 0;
            }
            uint64_t v11 = v19;
            if (!mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v19 + 48))) {
              return 0;
            }
            unint64_t v20 = *(unsigned int *)(a3 + 8);
            if (v20 >= *(unsigned int *)(a3 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a3, (void *)(a3 + 16), v20 + 1, 8);
              unint64_t v20 = *(unsigned int *)(a3 + 8);
            }
            *(void *)(*(void *)a3 + 8 * v20) = v11;
            ++*(_DWORD *)(a3 + 8);
            ++v15;
            v17 -= 8;
            if (!v17) {
              goto LABEL_15;
            }
          }
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t mlir::SymbolTable::lookupNearestSymbolFrom(mlir::SymbolTable *a1, mlir::Operation *a2)
{
  void v9[4] = *MEMORY[0x1E4F143B8];
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(a1, a2);
  if (!NearestSymbolTable) {
    return 0;
  }
  uint64_t v7 = v9;
  uint64_t v8 = 0x400000000;
  if (lookupSymbolInImpl((uint64_t)NearestSymbolTable, (uint64_t)a2, (uint64_t)&v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v6))
  {
    uint64_t v4 = *((void *)v7 + v8 - 1);
    if (v7 == v9) {
      return v4;
    }
    goto LABEL_7;
  }
  uint64_t v4 = 0;
  if (v7 != v9) {
LABEL_7:
  }
    free(v7);
  return v4;
}

uint64_t mlir::detail::verifySymbolTable(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *((unsigned int *)this + 11);
  if ((v3 & 0x7FFFFF) != 1)
  {
    __int16 v102 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, v101, (uint64_t)&v106);
    if (v106)
    {
      int v103 = 3;
      unsigned long long v104 = "Operations with a 'SymbolTable' must have exactly one region";
      uint64_t v105 = 60;
      uint64_t v19 = &v103;
      unint64_t v20 = (char *)v109;
      if (v110 >= v111)
      {
        unint64_t v89 = v110 + 1;
        if (v109 <= &v103 && (char *)v109 + 24 * v110 > (char *)&v103)
        {
          int64_t v93 = (char *)&v103 - (unsigned char *)v109;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          unint64_t v20 = (char *)v109;
          uint64_t v19 = (int *)((char *)v109 + v93);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v89, 24);
          uint64_t v19 = &v103;
          unint64_t v20 = (char *)v109;
        }
      }
      uint64_t v21 = &v20[24 * v110];
      long long v22 = *(_OWORD *)v19;
      *((void *)v21 + 2) = *((void *)v19 + 2);
      *(_OWORD *)uint64_t v21 = v22;
      ++v110;
    }
    uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v106);
    if (v106) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
    }
    if (v117)
    {
      uint64_t v23 = (void **)__p;
      if (__p)
      {
        unsigned int v24 = v116;
        uint64_t v25 = __p;
        if (v116 != __p)
        {
          do
            unsigned int v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
          while (v24 != v23);
          uint64_t v25 = __p;
        }
        uint64_t v116 = v23;
        operator delete(v25);
      }
      uint64_t v26 = v113;
      if (v113)
      {
        size_t v27 = v114;
        uint64_t v28 = v113;
        if (v114 != v113)
        {
          do
          {
            int v30 = (void *)*--v27;
            unsigned int v29 = v30;
            *size_t v27 = 0;
            if (v30) {
              operator delete[](v29);
            }
          }
          while (v27 != v26);
          uint64_t v28 = v113;
        }
        unint64_t v114 = v26;
        operator delete(v28);
      }
      uint64_t v31 = v109;
      if (v109 != v112) {
        goto LABEL_99;
      }
    }
    return v10;
  }
  unint64_t v4 = (((unint64_t)this + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
     + 32 * *((unsigned int *)this + 10);
  uint64_t v5 = *(void *)(v4 + 8);
  if (v5 != v4 && *(void *)(v5 + 8) == v4)
  {
    long long v98 = 0;
    uint64_t v99 = 0;
    unsigned int v100 = 0;
    uint64_t v32 = *(void *)(v4 + 8);
    if (v32 == v4) {
      goto LABEL_94;
    }
    unint64_t v33 = "sym_name";
    BOOL v34 = &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
LABEL_44:
    uint64_t v35 = v32 - 8;
    if (!v32) {
      uint64_t v35 = 0;
    }
    unsigned int v36 = (mlir::GenericProgramPoint *)(v35 + 32);
    for (uint64_t i = *(mlir::GenericProgramPoint **)(v35 + 40); ; uint64_t i = (mlir::GenericProgramPoint *)*((void *)i + 1))
    {
      if (i == v36)
      {
        uint64_t v32 = *(void *)(v32 + 8);
        if (v32 == v4)
        {
LABEL_94:
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          unsigned int v108 = 0;
          v101[0] = (const void **)&v106;
          unint64_t v64 = *((unsigned int *)this + 11);
          uint64_t v65 = v64 & 0x7FFFFF;
          if ((v64 & 0x7FFFFF) != 0)
          {
            unint64_t v66 = (((unint64_t)this + 16 * ((v64 >> 23) & 1) + ((v64 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *((unsigned int *)this + 10);
          }
          else
          {
            unint64_t v66 = 0;
            uint64_t v65 = 0;
          }
          walkSymbolTable(v66, v65, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::detail::verifySymbolTable(mlir::Operation *)::$_0>, (uint64_t)v101);
          unsigned int v84 = v106;
          if (v108)
          {
            uint64_t v85 = (uint64_t *)((char *)v106 + 8);
            uint64_t v86 = 16 * v108;
            do
            {
              if ((*(v85 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                uint64_t v87 = *v85;
                uint64_t *v85 = 0;
                if (v87) {
                  llvm::deallocate_buffer(*(llvm **)(v87 + 8), (void *)(16 * *(unsigned int *)(v87 + 24)));
                }
              }
              v85 += 2;
              v86 -= 16;
            }
            while (v86);
            unsigned int v84 = v106;
            unsigned int v88 = (void *)(16 * v108);
          }
          else
          {
            unsigned int v88 = 0;
          }
          llvm::deallocate_buffer(v84, v88);
        }
        goto LABEL_44;
      }
      mlir::GenericProgramPoint::~GenericProgramPoint(i);
      uint64_t v39 = (uint64_t *)v38;
      if (!*(unsigned char *)(v38 + 47) || (uint64_t InherentAttr = mlir::Operation::getInherentAttr(v38, (uint64_t)v33, 8), !v41)) {
        uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)(v39 + 7), v33, 8uLL);
      }
      if (InherentAttr)
      {
        uint64_t v42 = *(void **)(*(void *)InherentAttr + 136) == v34 ? InherentAttr : 0;
        uint64_t v97 = v42;
        if (v42) {
          break;
        }
      }
LABEL_48:
      ;
    }
    uint64_t v43 = v39[3];
    int v44 = v100;
    if (!v100) {
      goto LABEL_77;
    }
    unsigned int v45 = v34;
    uint64_t v46 = v33;
    uint64_t v47 = v98;
    uint64_t v48 = (v100 - 1) & ((v42 >> 4) ^ (v42 >> 9));
    int v49 = (void *)((char *)v98 + 16 * v48);
    uint64_t v50 = *v49;
    if (*v49 == v42)
    {
LABEL_101:
      __int16 v102 = 257;
      mlir::Operation::emitError(v39, (uint64_t)v101, (uint64_t)&v106);
      v96[0] = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v97);
      v96[1] = v68;
      if (v106) {
        mlir::Diagnostic::append<char const(&)[28],llvm::StringRef &,char const(&)[2]>((uint64_t)&v107, "redefinition of symbol named '", (uint64_t)v96, "'");
      }
      uint64_t v69 = mlir::Diagnostic::attachNote(&v107, *((void *)v47 + 2 * v48 + 1), 1);
      uint64_t v70 = v69 + 16;
      unint64_t v71 = *(void *)(v69 + 16);
      int v103 = 3;
      unsigned long long v104 = "see existing symbol definition here";
      uint64_t v105 = 35;
      uint64_t v72 = *(unsigned int *)(v69 + 24);
      BOOL v73 = &v103;
      if (v72 >= *(_DWORD *)(v69 + 28))
      {
        unint64_t v91 = v72 + 1;
        BOOL v92 = v71 + 24 * v72 > (unint64_t)&v103;
        if (v71 <= (unint64_t)&v103 && v92)
        {
          std::string v95 = (char *)&v103 - v71;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v70, (void *)(v69 + 32), v91, 24);
          unint64_t v71 = *(void *)(v69 + 16);
          BOOL v73 = (int *)&v95[v71];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v70, (void *)(v69 + 32), v91, 24);
          unint64_t v71 = *(void *)(v69 + 16);
          BOOL v73 = &v103;
        }
      }
      uint64_t v74 = v71 + 24 * *(unsigned int *)(v69 + 24);
      long long v75 = *(_OWORD *)v73;
      *(void *)(v74 + 16) = *((void *)v73 + 2);
      *(_OWORD *)uint64_t v74 = v75;
      ++*(_DWORD *)(v69 + 24);
      mlir::Diagnostic::operator mlir::LogicalResult();
      if (v106) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
      }
      if (v117)
      {
        int v76 = (void **)__p;
        if (__p)
        {
          uint64_t v77 = v116;
          int v78 = __p;
          if (v116 != __p)
          {
            do
              uint64_t v77 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v77 - 1);
            while (v77 != v76);
            int v78 = __p;
          }
          uint64_t v116 = v76;
          operator delete(v78);
        }
        unsigned int v79 = v113;
        if (v113)
        {
          uint64_t v80 = v114;
          BOOL v81 = v113;
          if (v114 != v113)
          {
            do
            {
              BOOL v83 = (void *)*--v80;
              int v82 = v83;
              *uint64_t v80 = 0;
              if (v83) {
                operator delete[](v82);
              }
            }
            while (v80 != v79);
            BOOL v81 = v113;
          }
          unint64_t v114 = v79;
          operator delete(v81);
        }
        if (v109 != v112) {
          free(v109);
        }
      }
      llvm::deallocate_buffer(v98, (void *)(16 * v100));
    }
    unsigned int v51 = 0;
    int v52 = 1;
    while (v50 != -4096)
    {
      if (v51) {
        BOOL v53 = 0;
      }
      else {
        BOOL v53 = v50 == -8192;
      }
      if (v53) {
        unsigned int v51 = v49;
      }
      int v54 = v48 + v52++;
      uint64_t v48 = v54 & (v100 - 1);
      int v49 = (void *)((char *)v98 + 16 * v48);
      uint64_t v50 = *v49;
      if (*v49 == v42) {
        goto LABEL_101;
      }
    }
    uint64_t v56 = (char *)(v51 ? v51 : v49);
    unint64_t v33 = v46;
    BOOL v34 = v45;
    if (4 * (int)v99 + 4 < 3 * v100)
    {
      if (v100 + ~v99 - HIDWORD(v99) > v100 >> 3) {
        goto LABEL_71;
      }
    }
    else
    {
LABEL_77:
      int v44 = 2 * v100;
    }
    llvm::DenseMap<mlir::Region *,std::pair<unsigned int,unsigned int>,llvm::DenseMapInfo<mlir::Region *,void>,llvm::detail::DenseMapPair<mlir::Region *,std::pair<unsigned int,unsigned int>>>::grow((uint64_t)&v98, v44);
    uint64_t v42 = v97;
    unsigned int v57 = v100 - 1;
    unsigned int v58 = ((v97 >> 4) ^ (v97 >> 9)) & (v100 - 1);
    uint64_t v56 = (char *)v98 + 16 * v58;
    uint64_t v59 = *(void *)v56;
    if (v97 == *(void *)v56)
    {
LABEL_79:
      LODWORD(v99) = v99 + 1;
      if (v97 == -4096) {
        goto LABEL_47;
      }
      goto LABEL_72;
    }
    char v60 = 0;
    int v61 = 1;
    while (v59 != -4096)
    {
      if (v60) {
        BOOL v62 = 0;
      }
      else {
        BOOL v62 = v59 == -8192;
      }
      if (v62) {
        char v60 = v56;
      }
      unsigned int v63 = v58 + v61++;
      unsigned int v58 = v63 & v57;
      uint64_t v56 = (char *)v98 + 16 * (v63 & v57);
      uint64_t v59 = *(void *)v56;
      if (v97 == *(void *)v56) {
        goto LABEL_79;
      }
    }
    if (v60) {
      uint64_t v56 = v60;
    }
LABEL_71:
    uint64_t v55 = *(void *)v56;
    LODWORD(v99) = v99 + 1;
    if (v55 == -4096)
    {
LABEL_47:
      *(void *)uint64_t v56 = v42;
      *((void *)v56 + 1) = v43;
      goto LABEL_48;
    }
LABEL_72:
    --HIDWORD(v99);
    goto LABEL_47;
  }
  __int16 v102 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v101, (uint64_t)&v106);
  if (v106)
  {
    int v103 = 3;
    unsigned long long v104 = "Operations with a 'SymbolTable' must have exactly one block";
    uint64_t v105 = 59;
    char v6 = &v103;
    uint64_t v7 = (char *)v109;
    if (v110 >= v111)
    {
      unint64_t v90 = v110 + 1;
      if (v109 <= &v103 && (char *)v109 + 24 * v110 > (char *)&v103)
      {
        int64_t v94 = (char *)&v103 - (unsigned char *)v109;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
        uint64_t v7 = (char *)v109;
        char v6 = (int *)((char *)v109 + v94);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, v112, v90, 24);
        char v6 = &v103;
        uint64_t v7 = (char *)v109;
      }
    }
    uint64_t v8 = &v7[24 * v110];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v110;
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v106);
  if (v106) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v106);
  }
  if (v117)
  {
    uint64_t v11 = (void **)__p;
    if (__p)
    {
      uint64_t v12 = v116;
      uint64_t v13 = __p;
      if (v116 != __p)
      {
        do
          uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
        while (v12 != v11);
        uint64_t v13 = __p;
      }
      uint64_t v116 = v11;
      operator delete(v13);
    }
    uint64_t v14 = v113;
    if (v113)
    {
      unint64_t v15 = v114;
      uint64_t v16 = v113;
      if (v114 != v113)
      {
        do
        {
          uint64_t v18 = (void *)*--v15;
          uint64_t v17 = v18;
          *unint64_t v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        uint64_t v16 = v113;
      }
      unint64_t v114 = v14;
      operator delete(v16);
    }
    uint64_t v31 = v109;
    if (v109 != v112) {
LABEL_99:
    }
      free(v31);
  }
  return v10;
}

uint64_t walkSymbolTable(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  v57[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 3 * a2;
  uint64_t v55 = v57;
  uint64_t v56 = 0x100000000;
  uint64_t v10 = (24 * a2) >> 3;
  int v11 = -1431655765 * v10;
  if (0xAAAAAAAAAAAAAAABLL * v10 < 2)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    if (!a2) {
      goto LABEL_11;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, 0xAAAAAAAAAAAAAAABLL * v10, 8);
    uint64_t v12 = v56;
    int v13 = v56;
    if (!a2) {
      goto LABEL_11;
    }
  }
  uint64_t v14 = (int64x2_t *)((char *)v55 + 8 * v12);
  unint64_t v15 = 24 * a2 - 24;
  if (v15 < 0x48)
  {
    uint64_t v16 = (char *)v14;
    unint64_t v17 = a1;
    do
    {
LABEL_10:
      *(void *)uint64_t v16 = v17;
      v16 += 8;
      v17 += 24;
    }
    while (v17 != a1 + 8 * v9);
    goto LABEL_11;
  }
  unint64_t v18 = v15 / 0x18 + 1;
  uint64_t v16 = &v14->i8[8 * (v18 & 0x1FFFFFFFFFFFFFFCLL)];
  unint64_t v17 = a1 + 24 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
  uint64_t v19 = v14 + 1;
  uint64_t v20 = v18 & 0x1FFFFFFFFFFFFFFCLL;
  unint64_t v21 = a1;
  do
  {
    int64x2_t v22 = vdupq_n_s64(v21);
    v19[-1] = vaddq_s64(v22, (int64x2_t)xmmword_181101A10);
    *uint64_t v19 = vaddq_s64(v22, (int64x2_t)xmmword_181109A70);
    v21 += 96;
    v19 += 2;
    v20 -= 4;
  }
  while (v20);
  if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL)) {
    goto LABEL_10;
  }
LABEL_11:
  unsigned int v23 = v13 + v11;
  LODWORD(v56) = v23;
  if (v23)
  {
    uint64_t v24 = 1;
    do
    {
LABEL_13:
      uint64_t v25 = (mlir::Region *)*((void *)v55 + v23 - 1);
      LODWORD(v56) = v23 - 1;
      mlir::Region::OpIterator::OpIterator(&v51, v25, 0);
      mlir::Region::OpIterator::OpIterator(&v49, v25, 1);
      uint64_t v26 = v52;
      size_t v27 = v50;
      if (v52 != v50)
      {
        while (1)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(v26);
          uint64_t v29 = v28;
          unint64_t v30 = a3(a4, v28);
          unint64_t v31 = v30;
          uint64_t v32 = v30 & 0xFF00000000;
          if ((v30 & 0xFF00000000) == 0 || v30 != 1) {
            break;
          }
          {
            BOOL v53 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SymbolTable<Empty>]";
            unint64_t v54 = 83;
            unint64_t v40 = llvm::StringRef::find((uint64_t *)&v53, "DesiredTypeName = ", 0x12uLL, 0);
            if (v54 >= v40) {
              unint64_t v41 = v40;
            }
            else {
              unint64_t v41 = v54;
            }
            uint64_t v42 = &v53[v41];
            unint64_t v43 = v54 - v41;
            uint64_t v44 = 18;
            if (v43 < 0x12) {
              uint64_t v44 = v43;
            }
            unint64_t v45 = v43 - v44;
            if (v45 >= v45 - 1) {
              uint64_t v46 = v45 - 1;
            }
            else {
              uint64_t v46 = v45;
            }
            mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v42[v44], v46);
          }
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v29 + 48) + 32))(*(void *)(v29 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::SymbolTable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SymbolTable>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
          {
            unint64_t v34 = *(unsigned int *)(v29 + 44);
            uint64_t v35 = v34 & 0x7FFFFF;
            if ((v34 & 0x7FFFFF) != 0)
            {
              unint64_t v36 = (v29 + 16 * ((v34 >> 23) & 1) + ((v34 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8;
              unsigned int v37 = v56;
              uint64_t v38 = 24 * v35;
              unint64_t v39 = v36 + 32 * *(unsigned int *)(v29 + 40);
              do
              {
                if (v37 >= HIDWORD(v56))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, v57, v37 + 1, 8);
                  unsigned int v37 = v56;
                }
                *((void *)v55 + v37) = v39;
                unsigned int v37 = v56 + 1;
                LODWORD(v56) = v56 + 1;
                v39 += 24;
                v38 -= 24;
              }
              while (v38);
            }
          }
          mlir::Region::OpIterator::operator++((uint64_t *)&v51);
          uint64_t v26 = v52;
          if (v52 == v27)
          {
            unint64_t v4 = v31 >> 40;
            unsigned int v23 = v56;
            if (v56) {
              goto LABEL_13;
            }
            goto LABEL_41;
          }
        }
        unint64_t v4 = v30 >> 40;
        uint64_t v24 = v30;
        uint64_t v47 = v55;
        if (v55 == v57) {
          return v32 | (v4 << 40) | v24;
        }
        goto LABEL_44;
      }
      unsigned int v23 = v56;
    }
    while (v56);
LABEL_41:
    uint64_t v32 = 0x100000000;
    uint64_t v47 = v55;
    if (v55 != v57) {
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v32 = 0x100000000;
    uint64_t v24 = 1;
    uint64_t v47 = v55;
    if (v55 != v57) {
LABEL_44:
    }
      free(v47);
  }
  return v32 | (v4 << 40) | v24;
}

uint64_t mlir::detail::verifySymbol(mlir::detail *this, mlir::Operation *a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_name", 8), v4))
  {
    if (!InherentAttr)
    {
LABEL_7:
      __int16 v77 = 257;
      mlir::Operation::emitOpError((uint64_t *)this, v76, (uint64_t)&v82);
      if (v82)
      {
        LODWORD(v78) = 3;
        unsigned int v79 = "requires string attribute '";
        uint64_t v80 = 27;
        uint64_t v5 = &v78;
        char v6 = (char *)v85;
        if (v86 >= v87)
        {
          unint64_t v63 = v86 + 1;
          if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
          {
            int64_t v69 = (char *)&v78 - (unsigned char *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v63, 24);
            char v6 = (char *)v85;
            uint64_t v5 = (const void ***)((char *)v85 + v69);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v63, 24);
            uint64_t v5 = &v78;
            char v6 = (char *)v85;
          }
        }
        uint64_t v7 = &v6[24 * v86];
        long long v8 = *(_OWORD *)v5;
        *((void *)v7 + 2) = v5[2];
        *(_OWORD *)uint64_t v7 = v8;
        ++v86;
        if (v82)
        {
          __int16 v81 = 261;
          int v78 = (const void **)"sym_name";
          unsigned int v79 = (const char *)8;
          mlir::Diagnostic::operator<<((uint64_t)&v83, &v78);
          if (v82)
          {
            LODWORD(v78) = 3;
            unsigned int v79 = "'";
            uint64_t v80 = 1;
            uint64_t v9 = &v78;
            uint64_t v10 = (char *)v85;
            if (v86 >= v87)
            {
              unint64_t v64 = v86 + 1;
              if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
              {
                int64_t v70 = (char *)&v78 - (unsigned char *)v85;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v64, 24);
                uint64_t v10 = (char *)v85;
                uint64_t v9 = (const void ***)((char *)v85 + v70);
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v64, 24);
                uint64_t v9 = &v78;
                uint64_t v10 = (char *)v85;
              }
            }
            int v11 = &v10[24 * v86];
            long long v12 = *(_OWORD *)v9;
            *((void *)v11 + 2) = v9[2];
            *(_OWORD *)int v11 = v12;
            ++v86;
          }
        }
      }
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v94)
      {
        uint64_t v14 = (void **)__p;
        if (__p)
        {
          unint64_t v15 = v93;
          uint64_t v16 = __p;
          if (v93 != __p)
          {
            do
              unint64_t v15 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v15 - 1);
            while (v15 != v14);
            uint64_t v16 = __p;
          }
          int64_t v93 = v14;
          operator delete(v16);
        }
        unint64_t v17 = v90;
        if (!v90) {
          goto LABEL_98;
        }
        unint64_t v18 = v91;
        uint64_t v19 = v90;
        if (v91 == v90)
        {
LABEL_97:
          unint64_t v91 = v17;
          operator delete(v19);
LABEL_98:
          if (v85 != &v88) {
            free(v85);
          }
          return v13;
        }
        do
        {
          unint64_t v21 = (void *)*--v18;
          uint64_t v20 = v21;
          *unint64_t v18 = 0;
          if (v21) {
            operator delete[](v20);
          }
        }
        while (v18 != v17);
LABEL_96:
        uint64_t v19 = v90;
        goto LABEL_97;
      }
      return v13;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_name", 8uLL);
    if (!InherentAttr) {
      goto LABEL_7;
    }
  }
  if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    goto LABEL_7;
  }
  if (!*((unsigned char *)this + 47)
    || (uint64_t v22 = mlir::Operation::getInherentAttr((uint64_t)this, (uint64_t)"sym_visibility", 14), !v23))
  {
    uint64_t v22 = mlir::DictionaryAttr::get((uint64_t)this + 56, "sym_visibility", 0xEuLL);
  }
  uint64_t v24 = v22;
  if (!v22) {
    return 1;
  }
  uint64_t v25 = *(void **)(*(void *)v22 + 136);
  BOOL v26 = v25 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id;
  if (v25 == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
    uint64_t v27 = v22;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v75 = v27;
  if (v26)
  {
    uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v75);
    uint64_t v48 = (char *)&v89;
    if (v47)
    {
      if (v47 == 7)
      {
        if (*(_DWORD *)AttrData == 1986622064 && *(_DWORD *)(AttrData + 3) == 1702125942) {
          uint64_t v48 = (char *)&v84;
        }
      }
      else if (v47 == 6)
      {
        if (*(_DWORD *)AttrData == 1818391920 && *(_WORD *)(AttrData + 4) == 25449)
        {
          uint64_t v48 = (char *)&v82;
        }
        else if (*(_DWORD *)AttrData == 1953719662 && *(_WORD *)(AttrData + 4) == 25701)
        {
          uint64_t v48 = (char *)&v86;
        }
      }
    }
    if (v48 - (char *)&v82 == 48)
    {
      __int16 v81 = 257;
      mlir::Operation::emitOpError((uint64_t *)this, &v78, (uint64_t)&v82);
      if (v82)
      {
        LODWORD(v76[0]) = 3;
        v76[1] = (const void **)"visibility expected to be one of [\"public\", \"private\", \"nested\"], but got ";
        v76[2] = (const void **)74;
        int v52 = v76;
        BOOL v53 = (char *)v85;
        if (v86 >= v87)
        {
          unint64_t v67 = v86 + 1;
          if (v85 <= v76 && (char *)v85 + 24 * v86 > (char *)v76)
          {
            int64_t v73 = (char *)v76 - (unsigned char *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v67, 24);
            BOOL v53 = (char *)v85;
            int v52 = (const void ***)((char *)v85 + v73);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v67, 24);
            int v52 = v76;
            BOOL v53 = (char *)v85;
          }
        }
        unint64_t v54 = &v53[24 * v86];
        long long v55 = *(_OWORD *)v52;
        *((void *)v54 + 2) = v52[2];
        *(_OWORD *)unint64_t v54 = v55;
        ++v86;
        if (v82) {
          mlir::Diagnostic::operator<<((uint64_t)&v83, v75);
        }
      }
      uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
      if (v82) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
      }
      if (v94)
      {
        uint64_t v56 = (void **)__p;
        if (__p)
        {
          unsigned int v57 = v93;
          unsigned int v58 = __p;
          if (v93 != __p)
          {
            do
              unsigned int v57 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v57 - 1);
            while (v57 != v56);
            unsigned int v58 = __p;
          }
          int64_t v93 = v56;
          operator delete(v58);
        }
        unint64_t v17 = v90;
        if (!v90) {
          goto LABEL_98;
        }
        uint64_t v59 = v91;
        uint64_t v19 = v90;
        if (v91 == v90) {
          goto LABEL_97;
        }
        do
        {
          int v61 = (void *)*--v59;
          char v60 = v61;
          void *v59 = 0;
          if (v61) {
            operator delete[](v60);
          }
        }
        while (v59 != v17);
        goto LABEL_96;
      }
      return v13;
    }
    return 1;
  }
  __int16 v77 = 257;
  mlir::Operation::emitOpError((uint64_t *)this, v76, (uint64_t)&v82);
  if (v82)
  {
    LODWORD(v78) = 3;
    unsigned int v79 = "requires visibility attribute '";
    uint64_t v80 = 31;
    uint64_t v28 = &v78;
    uint64_t v29 = (char *)v85;
    if (v86 >= v87)
    {
      unint64_t v65 = v86 + 1;
      if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
      {
        int64_t v71 = (char *)&v78 - (unsigned char *)v85;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v65, 24);
        uint64_t v29 = (char *)v85;
        uint64_t v28 = (const void ***)((char *)v85 + v71);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v65, 24);
        uint64_t v28 = &v78;
        uint64_t v29 = (char *)v85;
      }
    }
    unint64_t v30 = &v29[24 * v86];
    long long v31 = *(_OWORD *)v28;
    *((void *)v30 + 2) = v28[2];
    *(_OWORD *)unint64_t v30 = v31;
    ++v86;
    if (v82)
    {
      __int16 v81 = 261;
      int v78 = (const void **)"sym_visibility";
      unsigned int v79 = (const char *)14;
      mlir::Diagnostic::operator<<((uint64_t)&v83, &v78);
      if (v82)
      {
        LODWORD(v78) = 3;
        unsigned int v79 = "' to be a string attribute, but got ";
        uint64_t v80 = 36;
        uint64_t v32 = &v78;
        unint64_t v33 = (char *)v85;
        if (v86 >= v87)
        {
          unint64_t v66 = v86 + 1;
          if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
          {
            int64_t v72 = (char *)&v78 - (unsigned char *)v85;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v66, 24);
            unint64_t v33 = (char *)v85;
            uint64_t v32 = (const void ***)((char *)v85 + v72);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v66, 24);
            uint64_t v32 = &v78;
            unint64_t v33 = (char *)v85;
          }
        }
        unint64_t v34 = &v33[24 * v86];
        long long v35 = *(_OWORD *)v32;
        *((void *)v34 + 2) = v32[2];
        *(_OWORD *)unint64_t v34 = v35;
        ++v86;
        if (v82)
        {
          unint64_t v36 = &v78;
          mlir::DiagnosticArgument::DiagnosticArgument((uint64_t)&v78, v24);
          unsigned int v37 = (char *)v85;
          if (v86 >= v87)
          {
            unint64_t v68 = v86 + 1;
            if (v85 <= &v78 && (char *)v85 + 24 * v86 > (char *)&v78)
            {
              int64_t v74 = (char *)&v78 - (unsigned char *)v85;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v68, 24);
              unsigned int v37 = (char *)v85;
              unint64_t v36 = (const void ***)((char *)v85 + v74);
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, &v88, v68, 24);
              unint64_t v36 = &v78;
              unsigned int v37 = (char *)v85;
            }
          }
          uint64_t v38 = &v37[24 * v86];
          long long v39 = *(_OWORD *)v36;
          *((void *)v38 + 2) = v36[2];
          *(_OWORD *)uint64_t v38 = v39;
          ++v86;
        }
      }
    }
  }
  uint64_t v13 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v82);
  if (v82) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v82);
  }
  if (v94)
  {
    unint64_t v40 = (void **)__p;
    if (__p)
    {
      unint64_t v41 = v93;
      uint64_t v42 = __p;
      if (v93 != __p)
      {
        do
          unint64_t v41 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v41 - 1);
        while (v41 != v40);
        uint64_t v42 = __p;
      }
      int64_t v93 = v40;
      operator delete(v42);
    }
    unint64_t v17 = v90;
    if (!v90) {
      goto LABEL_98;
    }
    unint64_t v43 = v91;
    uint64_t v19 = v90;
    if (v91 == v90) {
      goto LABEL_97;
    }
    do
    {
      unint64_t v45 = (void *)*--v43;
      uint64_t v44 = v45;
      *unint64_t v43 = 0;
      if (v45) {
        operator delete[](v44);
      }
    }
    while (v43 != v17);
    goto LABEL_96;
  }
  return v13;
}

void mlir::SymbolTable::getSymbolUses(mlir::SymbolTable *this@<X0>, uint64_t a2@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  uint64_t v5 = __p;
  if ((walkSymbolUses((uint64_t)this, (uint64_t)llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>, (uint64_t)&v5) & 0xFF00000000) != 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    char v4 = __p[0];
    *(unsigned char *)(a2 + 24) = 0;
    if (v4)
    {
      __p[1] = v4;
      operator delete(v4);
    }
  }
}

{
  void *v4;
  void **v5;
  void *__p[2];
  uint64_t v7;
  void *v8;
  void v9[2];

  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = __p;
  v9[0] = llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<llvm::MutableArrayRef<mlir::Region>>(llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::SymbolTable::SymbolUse)#1}>;
  v9[1] = &v5;
  uint64_t v7 = 0;
  long long v8 = v9;
  if ((walkSymbolTable((unint64_t)this, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v8) & 0xFF00000000) != 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v7;
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    char v4 = __p[0];
    *(unsigned char *)(a2 + 24) = 0;
    if (v4)
    {
      __p[1] = v4;
      operator delete(v4);
    }
  }
}

void mlir::SymbolTable::getSymbolUses(mlir::SymbolTable *this@<X0>, mlir::Operation *a2@<X1>, uint64_t a3@<X8>)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  collectSymbolScopes((mlir::Operation *)&v16, this, (unint64_t)a2);
  uint64_t v5 = (char *)v16;
  if (v17)
  {
    uint64_t v6 = 16 * v17;
    uint64_t v7 = (uint64_t *)((char *)v16 + 8);
    while (1)
    {
      uint64_t v8 = *v7;
      v7 += 2;
      v13[0] = v5;
      v13[1] = __p;
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 4) != 0 && v9)
      {
        v15[1] = v13;
        uint64_t v14 = v15;
        if ((walkSymbolTable(v9, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v14) & 0xFF00000000) == 0)goto LABEL_13; {
      }
        }
      {
LABEL_13:
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 24) = 0;
        if (v16 != v18) {
          free(v16);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return;
      }
      v5 += 16;
      v6 -= 16;
      if (!v6)
      {
        uint64_t v5 = (char *)v16;
        break;
      }
    }
  }
  if (v5 != (char *)v18) {
    free(v5);
  }
  uint64_t v10 = v12;
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(void *)(a3 + 16) = v10;
  *(unsigned char *)(a3 + 24) = 1;
}

BOOL mlir::SymbolTable::symbolKnownUseEmpty(mlir::SymbolTable *this, mlir::Operation *a2, mlir::Operation *a3)
{
  uint64_t v17[4] = *MEMORY[0x1E4F143B8];
  collectSymbolScopes((mlir::Operation *)&v15, this, (unint64_t)a2);
  unint64_t v3 = (char *)v15;
  if (!v16)
  {
    BOOL v7 = 1;
    if (v15 == v17) {
      return v7;
    }
    goto LABEL_18;
  }
  char v4 = (char *)v15 + 16 * v16;
  do
  {
    uint64_t v12 = v3;
    uint64_t v9 = *((void *)v3 + 1);
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0 && v10)
    {
      v14[0] = llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>;
      v14[1] = &v12;
      uint64_t v13 = v14;
      uint64_t v5 = walkSymbolTable(v10, 1, (uint64_t (*)(uint64_t, uint64_t))llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>, (uint64_t)&v13);
    }
    else
    {
      uint64_t v5 = walkSymbolUses(v10, (uint64_t)llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>, (uint64_t)&v12);
    }
    BOOL v7 = (v5 & 0xFF00000000) != 0 && v5 == 1;
    v3 += 16;
  }
  while (v7 && v3 != v4);
  unint64_t v3 = (char *)v15;
  if (v15 != v17) {
LABEL_18:
  }
    free(v3);
  return v7;
}

uint64_t mlir::SymbolTableCollection::getSymbolTable(mlir::SymbolTableCollection *this, mlir::Operation *a2)
{
  unsigned int v16 = a2;
  int v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    int v3 = v2 - 1;
    unsigned int v4 = v3 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(*(void *)this + 16 * v4);
    uint64_t v6 = (mlir::Operation *)*v5;
    if ((mlir::Operation *)*v5 == a2) {
      return v5[1];
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v6 != (mlir::Operation *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v6 == (mlir::Operation *)-8192;
      }
      if (v14) {
        uint64_t v12 = v5;
      }
      unsigned int v15 = v4 + v13++;
      unsigned int v4 = v15 & v3;
      uint64_t v5 = (uint64_t *)(*(void *)this + 16 * v4);
      uint64_t v6 = (mlir::Operation *)*v5;
      if ((mlir::Operation *)*v5 == a2) {
        return v5[1];
      }
    }
    if (v12) {
      uint64_t v8 = v12;
    }
    else {
      uint64_t v8 = v5;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v5 = llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::InsertIntoBucket<mlir::Operation * const&,decltype(nullptr)>((uint64_t)this, v8, (uint64_t *)&v16);
  uint64_t v9 = (mlir::SymbolTable *)operator new(0x28uLL);
  unint64_t v10 = mlir::SymbolTable::SymbolTable(v9, v16);
  uint64_t v11 = v5[1];
  v5[1] = (uint64_t)v10;
  if (v11) {
    llvm::deallocate_buffer(*(llvm **)(v11 + 8), (void *)(16 * *(unsigned int *)(v11 + 24)));
  }
  return v5[1];
}

uint64_t mlir::SymbolTableCollection::lookupSymbolIn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v6 = v8;
  uint64_t v7 = 0x400000000;
  if (!lookupSymbolInImpl(a2, a3, (uint64_t)&v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v5))
  {
    uint64_t v3 = 0;
    if (v6 == v8) {
      return v3;
    }
    goto LABEL_3;
  }
  uint64_t v3 = *((void *)v6 + v7 - 1);
  if (v6 != v8) {
LABEL_3:
  }
    free(v6);
  return v3;
}

uint64_t mlir::SymbolTableCollection::lookupSymbolIn(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  return lookupSymbolInImpl(a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v5);
}

uint64_t mlir::SymbolTableCollection::lookupNearestSymbolFrom(uint64_t a1, mlir::SymbolTable *a2, uint64_t a3)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(a2, a2);
  if (!NearestSymbolTable) {
    return 0;
  }
  uint64_t v8 = a1;
  uint64_t v9 = v11;
  uint64_t v10 = 0x400000000;
  if (lookupSymbolInImpl((uint64_t)NearestSymbolTable, a3, (uint64_t)&v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>, (uint64_t)&v8))
  {
    uint64_t v6 = *((void *)v9 + v10 - 1);
    if (v9 == v11) {
      return v6;
    }
    goto LABEL_7;
  }
  uint64_t v6 = 0;
  if (v9 != v11) {
LABEL_7:
  }
    free(v9);
  return v6;
}

uint64_t mlir::impl::parseOptionalVisibilityKeyword(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v10 = 0uLL;
  v11[0] = xmmword_1E4FBF840;
  v11[1] = *(_OWORD *)&off_1E4FBF850;
  long long v12 = xmmword_1E4FBF860;
  if (!(*(unsigned __int8 (**)(uint64_t, long long *, _OWORD *, uint64_t))(*(void *)a1 + 392))(a1, &v10, v11, 3))return 0; {
  unsigned int v4 = (mlir::StringAttr **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  LOWORD(v12) = 261;
  v11[0] = v10;
  uint64_t StringAttr = mlir::Builder::getStringAttr(v4, (mlir::MLIRContext *)v11);
  uint64_t v6 = (mlir::StringAttr **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t NamedAttr = mlir::Builder::getNamedAttr(v6, (uint64_t)"sym_visibility", 14, StringAttr);
  mlir::NamedAttrList::push_back(a2, NamedAttr, v8);
  return 1;
}

uint64_t mlir::SymbolOpInterface::isPublic(mlir::SymbolOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 40))(*((void *)this + 1), *(void *)this);
}

uint64_t mlir::SymbolOpInterface::canDiscardOnUseEmpty(mlir::SymbolOpInterface *this)
{
  return (*(uint64_t (**)(void, void))(*((void *)this + 1) + 112))(*((void *)this + 1), *(void *)this);
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTable::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  return mlir::SymbolTable::lookupSymbolIn(a2, a3);
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::detail::verifySymbolTable(mlir::Operation *)::$_0>(void *a1, uint64_t a2)
{
  uint64_t v3 = llvm::DefaultDoCastIfPossible<mlir::SymbolUserOpInterface,mlir::Operation *,llvm::CastInfo<mlir::SymbolUserOpInterface,mlir::Operation *,void>>::doCastIfPossible(a2);
  if (v3) {
    return ((*v4)(v4, v3, *a1) != 0) | 0x100000000;
  }
  else {
    return 0x100000001;
  }
}

uint64_t llvm::DefaultDoCastIfPossible<mlir::SymbolUserOpInterface,mlir::Operation *,llvm::CastInfo<mlir::SymbolUserOpInterface,mlir::Operation *,void>>::doCastIfPossible(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 16);
  BOOL v4 = v3 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v3 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  if (v4)
  {
    uint64_t v16 = *(void *)(v2 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!Values || !mlir::Dialect::getRegisteredInterfaceForOp<mlir::SymbolUserOpInterface>(Values, v2)) {
      return 0;
    }
  }
  else
  {
    unint64_t v6 = v5 | v2 & 0xFFFFFFFFFFFFFF00;
    if (!mlir::detail::InterfaceMap::lookup<mlir::SymbolUserOpInterface>(v6 + 32)
      && !mlir::Dialect::getRegisteredInterfaceForOp<mlir::SymbolUserOpInterface>(*(void *)(v6 + 24), *(void *)(v1 + 48)))
    {
      return 0;
    }
  }
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void **)(v8 + 16);
  BOOL v10 = v9 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v9 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *(void *)(v1 + 48);
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v14 = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v16);
    if (!v14) {
      return v1;
    }
    uint64_t v15 = v8;
  }
  else
  {
    unint64_t v12 = v11 | v8 & 0xFFFFFFFFFFFFFF00;
    if (mlir::detail::InterfaceMap::lookup<mlir::SymbolUserOpInterface>(v12 + 32)) {
      return v1;
    }
    uint64_t v14 = *(void *)(v12 + 24);
    uint64_t v15 = *(void *)(v1 + 48);
  }
  mlir::Dialect::getRegisteredInterfaceForOp<mlir::SymbolUserOpInterface>(v14, v15);
  return v1;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::SymbolUserOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      unint64_t v17 = 77;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      uint64_t v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3880), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::SymbolUserOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unint64_t v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::SymbolUserOpInterface]";
      unint64_t v22 = 77;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::SymbolUserOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3880);
  BOOL v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      BOOL v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

uint64_t walkSymbolUses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFF) != 1) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (*(_UNKNOWN **)(v6 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    if (!mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v8)) {
      return 0;
    }
LABEL_4:
    walkSymbolRefs((mlir::Operation *)a1, a2, a3);
  }
  if (*(void *)(v6 + 24)) {
    goto LABEL_4;
  }
  return 0;
}

void walkSymbolRefs(mlir::Operation *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v5[0] = a2;
  v5[1] = a3;
  BOOL v4 = a1;
  Attrunint64_t Dictionary = (uint64_t *)mlir::Operation::getAttrDictionary(a1);
  int v7 = 0;
  memset(v6, 0, sizeof(v6));
  v8[0] = &unk_1EC9CED80;
  v8[1] = v5;
  void v8[2] = &v4;
  unint64_t v9 = v8;
  *((void *)&v6[0] + 1) = std::vector<std::function<mlir::WalkResult ()(mlir::Attribute)>>::__emplace_back_slow_path<std::function<mlir::WalkResult ()(mlir::Attribute)>>((char **)v6, v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  mlir::AttrTypeWalker::walkImpl(v6, AttrDictionary, 0);
  mlir::AttrTypeWalker::~AttrTypeWalker((llvm **)v6);
}

uint64_t sub_1804B1F54()
{
  return v0;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE7__cloneEv(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1EC9CED80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE7__cloneEPNS0_6__baseISS_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CED80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EEclEOSG_(uint64_t a1, uint64_t a2)
{
  if (*(_UNKNOWN **)(**(void **)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    return 2
  }
         * ((**(unsigned int (***)(void, void))(a1 + 8))(*(void *)(*(void *)(a1 + 8) + 8), **(void **)(a1 + 16)) != 0);
  else {
    return 1;
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkRes"
                     "ultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoon"
                     "tsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFN"
                                "S_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EE"
                                "NSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3$_0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS2_9OperationEN4llvm12function_refIFNS2_10WalkResultENS2_11SymbolTable9SymbolUseEEEEE3__0NS2_13SymbolRefAttrENS2_9AttributeES9_EENS_9enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSG_E_NS_9allocatorISP_EEFS9_SG_EE11target_typeEv()
{
  return &_ZTIZN4mlir14AttrTypeWalker7addWalkIZL14walkSymbolRefsPNS_9OperationEN4llvm12function_refIFNS_10WalkResultENS_11SymbolTable9SymbolUseEEEEE3__0NS_13SymbolRefAttrENS_9AttributeES6_EENSt3__19enable_ifIXoontsr3stdE9is_same_vIT0_T1_Esr3stdE9is_same_vIT2_vEEvE4typeEOT_EUlSD_E_;
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<walkSymbolUses(llvm::MutableArrayRef<mlir::Region>,llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>)::$_0>(uint64_t **a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 44) & 0x7FFFFF) != 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(_UNKNOWN **)(v4 + 16) == &mlir::detail::TypeIDResolver<void,void>::id)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t result = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v6);
    if (!result) {
      return result;
    }
LABEL_4:
    walkSymbolRefs((mlir::Operation *)a2, **a1, (*a1)[1]);
  }
  uint64_t result = *(void *)(v4 + 24);
  if (result) {
    goto LABEL_4;
  }
  return result;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(char ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  int v7 = (*a1)[1];
  unint64_t v6 = (unint64_t)(*a1)[2];
  if ((unint64_t)v7 < v6)
  {
    *(void *)int v7 = a2;
    *((void *)v7 + 1) = a3;
    uint64_t v8 = (uint64_t)(v7 + 16);
    goto LABEL_18;
  }
  unint64_t v9 = *v5;
  uint64_t v10 = (v7 - *v5) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    abort();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    unint64_t v16 = &v14[16 * v13];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    uint64_t v8 = (uint64_t)(v15 + 16);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (char *)(16 * v10);
  unint64_t v16 = 0;
  *(void *)uint64_t v15 = a2;
  *((void *)v15 + 1) = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    int v7 = *v5;
  }
LABEL_16:
  uint64_t *v5 = v15;
  v5[1] = (char *)v8;
  void v5[2] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[1] = (char *)v8;
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<llvm::MutableArrayRef<mlir::Region>>(llvm::MutableArrayRef<mlir::Region>)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(char ***a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  int v7 = (*a1)[1];
  unint64_t v6 = (unint64_t)(*a1)[2];
  if ((unint64_t)v7 < v6)
  {
    *(void *)int v7 = a2;
    *((void *)v7 + 1) = a3;
    uint64_t v8 = (uint64_t)(v7 + 16);
    goto LABEL_18;
  }
  unint64_t v9 = *v5;
  uint64_t v10 = (v7 - *v5) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    abort();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v11;
  }
  if (v13)
  {
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    unint64_t v16 = &v14[16 * v13];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    uint64_t v8 = (uint64_t)(v15 + 16);
    if (v7 == v9) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  uint64_t v15 = (char *)(16 * v10);
  unint64_t v16 = 0;
  *(void *)uint64_t v15 = a2;
  *((void *)v15 + 1) = a3;
  uint64_t v8 = 16 * v10 + 16;
  if (v7 != v9)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
      v15 -= 16;
      v7 -= 16;
    }
    while (v7 != v9);
    int v7 = *v5;
  }
LABEL_16:
  uint64_t *v5 = v15;
  v5[1] = (char *)v8;
  void v5[2] = v16;
  if (v7) {
    operator delete(v7);
  }
LABEL_18:
  v5[1] = (char *)v8;
  return 1;
}

uint64_t isReferencePrefixOf(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  uint64_t v18 = a1;
  if (a2 == a1) {
    return 1;
  }
  if (*(_UNKNOWN **)(*(void *)a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v19 = v2;
  if (!v2 || (mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v19), v3))
  {
    uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v17);
    if (Value != mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v18)) {
      return 0;
    }
    uint64_t AttrData = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v17);
    unint64_t v9 = v8;
    uint64_t v10 = (uint64_t *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v18);
    if (v11 < v9)
    {
      if (v11)
      {
        uint64_t v12 = 8 * v11 - 8;
        do
        {
          uint64_t v14 = *AttrData++;
          uint64_t v13 = v14;
          uint64_t v15 = *v10++;
          BOOL v16 = v15 == v13;
          BOOL v5 = v15 == v13;
          BOOL v16 = !v16 || v12 == 0;
          v12 -= 8;
        }
        while (!v16);
        return v5;
      }
      return 1;
    }
  }
  return 0;
}

void collectSymbolScopes(mlir::Operation *a1, mlir::Operation *a2, unint64_t a3)
{
  v74[1] = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 47)
    && (uint64_t InherentAttr = mlir::Operation::getInherentAttr((uint64_t)a2, (uint64_t)"sym_name", 8), (_BYTE)v7))
  {
    if (InherentAttr) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t InherentAttr = mlir::DictionaryAttr::get((uint64_t)a2 + 56, "sym_name", 8uLL);
    if (InherentAttr)
    {
LABEL_4:
      if (*(_UNKNOWN **)(*(void *)InherentAttr + 136) == &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
        uint64_t v8 = InherentAttr;
      }
      else {
        uint64_t v8 = 0;
      }
      goto LABEL_9;
    }
  }
  uint64_t v8 = 0;
LABEL_9:
  unint64_t v64 = v68;
  unint64_t v65 = v68;
  uint64_t v66 = 4;
  int v67 = 0;
  int64_t v69 = v71;
  uint64_t v70 = 0x400000000;
  unsigned int v58 = (void *)a3;
  uint64_t ParentOp = (mlir::Operation *)a3;
  while (ParentOp != a2)
  {
    llvm::SetVector<mlir::Operation *,llvm::SmallVector<mlir::Operation *,4u>,llvm::SmallPtrSet<mlir::Operation *,4u>,0u>::insert((llvm::SmallPtrSetImplBase *)&v64, (const void **)&v58);
    uint64_t v10 = (mlir::Block *)v58[2];
    if (!v10)
    {
      unsigned int v58 = 0;
      unint64_t v11 = (mlir::Block *)*((void *)a2 + 2);
      if (v11) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
    uint64_t ParentOp = (mlir::Operation *)mlir::Block::getParentOp(v10);
    unsigned int v58 = ParentOp;
    if (!ParentOp)
    {
      unint64_t v11 = (mlir::Block *)*((void *)a2 + 2);
      if (v11)
      {
LABEL_14:
        uint64_t v12 = (void *)mlir::Block::getParentOp(v11);
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v12 = 0;
      while (1)
      {
LABEL_24:
        if (v65 == v64)
        {
          uint64_t v20 = &v65[8 * HIDWORD(v66)];
          if (HIDWORD(v66))
          {
            uint64_t v21 = 0;
            while (*(void **)&v65[v21] != v12)
            {
              v21 += 8;
              if (8 * HIDWORD(v66) == v21) {
                goto LABEL_40;
              }
            }
            uint64_t v20 = &v65[v21];
          }
LABEL_40:
          if (v20 != &v65[8 * HIDWORD(v66)]) {
            goto LABEL_45;
          }
        }
        else
        {
          BucketFor = llvm::SmallPtrSetImplBase::FindBucketFor((llvm::SmallPtrSetImplBase *)&v64, v12);
          if (*BucketFor != v12)
          {
            int v18 = v66;
            if (v65 == v64) {
              int v18 = HIDWORD(v66);
            }
            BucketFor = (const void **)&v65[8 * v18];
          }
          if (v65 == v64) {
            int v19 = HIDWORD(v66);
          }
          else {
            int v19 = v66;
          }
          if (BucketFor != (const void **)&v65[8 * v19]) {
            goto LABEL_45;
          }
        }
        unint64_t v22 = (mlir::Block *)v12[2];
        if (!v22) {
          break;
        }
        uint64_t v12 = (void *)mlir::Block::getParentOp(v22);
        if (!v12) {
          goto LABEL_45;
        }
      }
      uint64_t v12 = 0;
LABEL_45:
      int v61 = v63;
      uint64_t v62 = 0x200000000;
      uint64_t Context = (mlir::StringAttr *)mlir::Attribute::getContext((mlir::Operation *)((char *)a2 + 24));
      uint64_t v24 = mlir::SymbolRefAttr::get(v8);
      unsigned int v25 = v62;
      if (v62 >= HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 8);
        unsigned int v25 = v62;
      }
      *((void *)v61 + v25) = v24;
      LODWORD(v62) = v62 + 1;
      BOOL v26 = (mlir::Block *)*((void *)a2 + 2);
      if (v26)
      {
        uint64_t v27 = mlir::Block::getParentOp(v26);
        if ((void *)v27 != v12) {
          goto LABEL_49;
        }
LABEL_81:
        uint64_t v29 = 1;
        if (v12 == (void *)a3)
        {
LABEL_82:
          *(void *)a1 = (char *)a1 + 16;
          *((void *)a1 + 1) = 0x200000000;
          uint64_t v47 = (mlir::Block *)*((void *)a2 + 2);
          if (v47)
          {
            uint64_t v48 = mlir::Block::getParentOp(v47);
            uint64_t v49 = v62;
            if (!v62) {
              goto LABEL_86;
            }
          }
          else
          {
            uint64_t v48 = 0;
            uint64_t v49 = v62;
            if (!v62) {
              goto LABEL_86;
            }
          }
          uint64_t v50 = 0;
          uint64_t v51 = 8 * v49;
          while (2)
          {
            unint64_t v52 = *(unsigned int *)(v48 + 44);
            if ((v52 & 0x7FFFFF) != 0)
            {
              unint64_t v53 = ((v48 + 16 * ((v52 >> 23) & 1) + ((v52 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                  + 32 * *(unsigned int *)(v48 + 40);
              uint64_t v54 = *(void *)((char *)v61 + v50);
              unint64_t v55 = *((unsigned int *)a1 + 2);
              if (v55 < *((unsigned int *)a1 + 3)) {
                goto LABEL_100;
              }
LABEL_104:
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (char *)a1 + 16, v55 + 1, 16);
              unint64_t v55 = *((unsigned int *)a1 + 2);
            }
            else
            {
              unint64_t v53 = 0;
              uint64_t v54 = *(void *)((char *)v61 + v50);
              unint64_t v55 = *((unsigned int *)a1 + 2);
              if (v55 >= *((unsigned int *)a1 + 3)) {
                goto LABEL_104;
              }
            }
LABEL_100:
            uint64_t v56 = (void *)(*(void *)a1 + 16 * v55);
            *uint64_t v56 = v54;
            v56[1] = v53 | 4;
            ++*((_DWORD *)a1 + 2);
            unsigned int v57 = *(mlir::Block **)(v48 + 16);
            if (v57)
            {
              uint64_t v48 = mlir::Block::getParentOp(v57);
              v50 += 8;
              if (v51 == v50) {
                goto LABEL_86;
              }
            }
            else
            {
              uint64_t v48 = 0;
              v50 += 8;
              if (v51 == v50) {
                goto LABEL_86;
              }
            }
            continue;
          }
        }
LABEL_78:
        if (v29)
        {
          *((void *)a1 + 2) = *((void *)v61 + v62 - 1);
          *(void *)a1 = (char *)a1 + 16;
          *((void *)a1 + 3) = a3 & 0xFFFFFFFFFFFFFFFBLL;
          *((void *)a1 + 1) = 0x200000001;
        }
        else
        {
          *(void *)a1 = (char *)a1 + 16;
          *((void *)a1 + 1) = 0x200000000;
        }
LABEL_86:
        if (v61 != v63) {
          free(v61);
        }
        BOOL v16 = v69;
        if (v69 != v71) {
LABEL_89:
        }
          free(v16);
        goto LABEL_90;
      }
      uint64_t v27 = 0;
      if (!v12) {
        goto LABEL_81;
      }
LABEL_49:
      int64_t v72 = (char *)v74;
      v74[0] = v24;
      uint64_t v73 = 0x100000001;
      __int16 v60 = 261;
      v59[0] = "sym_name";
      v59[1] = 8;
      uint64_t v28 = mlir::StringAttr::get(Context, (mlir::MLIRContext *)v59);
      if (!mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v27 + 48)))
      {
LABEL_74:
        uint64_t v29 = 0;
LABEL_75:
        if (v72 != (char *)v74) {
          free(v72);
        }
        if (v12 == (void *)a3) {
          goto LABEL_82;
        }
        goto LABEL_78;
      }
      uint64_t v29 = 1;
      while (2)
      {
        v59[0] = v28;
        uint64_t v30 = v28;
        if (*(unsigned char *)(v27 + 47))
        {
          uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)v59);
          uint64_t v33 = mlir::Operation::getInherentAttr(v27, AttrData, v32);
          if (!v34)
          {
            uint64_t v30 = v59[0];
            goto LABEL_55;
          }
        }
        else
        {
LABEL_55:
          uint64_t v33 = mlir::DictionaryAttr::get(v27 + 56, v30);
        }
        uint64_t v35 = v33;
        if (!v33 || *(_UNKNOWN **)(*(void *)v33 + 136) != &mlir::detail::TypeIDResolver<mlir::StringAttr,void>::id) {
          goto LABEL_74;
        }
        uint64_t v36 = mlir::SymbolRefAttr::get(v33, (uint64_t)v72, v73);
        uint64_t v37 = v62;
        if (v62 >= (unint64_t)HIDWORD(v62))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, v63, v62 + 1, 8);
          uint64_t v37 = v62;
        }
        *((void *)v61 + v37) = v36;
        LODWORD(v62) = v62 + 1;
        uint64_t v38 = *(mlir::Block **)(v27 + 16);
        if (v38)
        {
          uint64_t v27 = mlir::Block::getParentOp(v38);
          if ((void *)v27 == v12) {
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v27 = 0;
          if (!v12) {
            goto LABEL_75;
          }
        }
        long long v39 = v72;
        uint64_t v40 = mlir::SymbolRefAttr::get(v35);
        unint64_t v41 = v72;
        uint64_t v42 = v73;
        if (&v72[8 * v73] == v39)
        {
          if (v73 >= HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v73 + 1, 8);
            uint64_t v42 = v73;
            unint64_t v41 = v72;
          }
          *(void *)&v41[8 * v42] = v40;
          LODWORD(v73) = v73 + 1;
          if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v27 + 48)) & 1) == 0) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v73 >= HIDWORD(v73))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, v74, v73 + 1, 8);
            unint64_t v43 = v72;
            uint64_t v42 = v73;
          }
          else
          {
            unint64_t v43 = v72;
          }
          uint64_t v44 = &v43[(v39 - v41) >> 3];
          v43[v42] = v43[v42 - 1];
          int v45 = v73;
          uint64_t v46 = &v72[8 * v73 - 8];
          if (v46 != (char *)v44)
          {
            memmove(v44 + 1, v44, v46 - (char *)v44);
            int v45 = v73;
          }
          LODWORD(v73) = v45 + 1;
          uint64_t *v44 = v40;
          if ((mlir::OperationName::hasTrait<mlir::OpTrait::SymbolTable>((void *)(v27 + 48)) & 1) == 0) {
            goto LABEL_74;
          }
        }
        continue;
      }
    }
  }
  uint64_t v13 = *(mlir::Block **)(a3 + 16);
  if (v13) {
    uint64_t v13 = (mlir::Block *)mlir::Block::getParentOp(v13);
  }
  NearestSymbolTable = mlir::SymbolTable::getNearestSymbolTable(v13, v7);
  uint64_t v15 = (mlir::Block *)*((void *)a2 + 2);
  if (v15) {
    uint64_t v15 = (mlir::Block *)mlir::Block::getParentOp(v15);
  }
  if (NearestSymbolTable == v15)
  {
    *((void *)a1 + 2) = mlir::SymbolRefAttr::get(v8);
    *(void *)a1 = (char *)a1 + 16;
    *((void *)a1 + 3) = a3 & 0xFFFFFFFFFFFFFFFBLL;
    *((void *)a1 + 1) = 0x200000001;
    BOOL v16 = v69;
    if (v69 != v71) {
      goto LABEL_89;
    }
  }
  else
  {
    *(void *)a1 = (char *)a1 + 16;
    *((void *)a1 + 1) = 0x200000000;
    BOOL v16 = v69;
    if (v69 != v71) {
      goto LABEL_89;
    }
  }
LABEL_90:
  if (v65 != v64) {
    free(v65);
  }
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<std::optional<mlir::WalkResult> anonymous namespace'::SymbolScope::walk<std::optional<mlir::SymbolTable::UseRange> getSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1},(void *)0>(mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (isReferencePrefixOf(**(void **)a1, a3))
  {
    unint64_t v6 = *(char ***)(a1 + 8);
    uint64_t v8 = v6[1];
    unint64_t v7 = (unint64_t)v6[2];
    if ((unint64_t)v8 < v7)
    {
      *(void *)uint64_t v8 = a2;
      *((void *)v8 + 1) = a3;
      uint64_t v9 = (uint64_t)(v8 + 16);
LABEL_19:
      v6[1] = (char *)v9;
      return 1;
    }
    uint64_t v10 = *v6;
    uint64_t v11 = (v8 - *v6) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v15 = (char *)operator new(16 * v14);
      BOOL v16 = &v15[16 * v11];
      uint64_t v17 = &v15[16 * v14];
      *(void *)BOOL v16 = a2;
      *((void *)v16 + 1) = a3;
      uint64_t v9 = (uint64_t)(v16 + 16);
      if (v8 == v10) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v16 = (char *)(16 * v11);
      uint64_t v17 = 0;
      *(void *)BOOL v16 = a2;
      *((void *)v16 + 1) = a3;
      uint64_t v9 = 16 * v11 + 16;
      if (v8 == v10)
      {
LABEL_17:
        *unint64_t v6 = v16;
        v6[1] = (char *)v9;
        uint64_t v6[2] = v17;
        if (v8) {
          operator delete(v8);
        }
        goto LABEL_19;
      }
    }
    do
    {
      *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
      v16 -= 16;
      v8 -= 16;
    }
    while (v8 != v10);
    uint64_t v8 = *v6;
    goto LABEL_17;
  }
  return 1;
}

uint64_t llvm::function_ref<mlir::WalkResult ()(mlir::SymbolTable::SymbolUse)>::callback_fn<BOOL symbolKnownUseEmptyImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::Operation *)::{lambda(mlir::SymbolTable::SymbolUse)#1}>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  return isReferencePrefixOf(**a1, a3) ^ 1;
}

uint64_t generateNewRefAttr(void *a1, uint64_t a2)
{
  unint64_t v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a1;
  if (*(_UNKNOWN **)(*(void *)a1 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = 0;
  }
  unint64_t v14 = v3;
  if (v3)
  {
    mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v14);
    if (!v4) {
      return a2;
    }
  }
  uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v13);
  unint64_t v7 = v5;
  unint64_t v14 = v16;
  uint64_t v15 = 0x200000000;
  size_t v8 = 8 * v5;
  if (8 * v5 < 0x11)
  {
    int v9 = 0;
    uint64_t v10 = v16;
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, v16, v5, 8);
  int v9 = v15;
  uint64_t v10 = v14;
  if (v7)
  {
LABEL_10:
    memcpy(&v10[v9], AttrData, v8);
    int v9 = v15;
    uint64_t v10 = v14;
  }
LABEL_11:
  LODWORD(v15) = v9 + v7;
  v10[(v9 + v7) - 1] = a2;
  uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v13);
  a2 = mlir::SymbolRefAttr::get(Value, (uint64_t)v14, v15);
  if (v14 != v16) {
    free(v14);
  }
  return a2;
}

void mlir::AttrTypeReplacer::~AttrTypeReplacer(llvm **this)
{
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EC9CF120;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE7__cloneEPNS0_6__baseISW_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CF120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EEclEOSF_(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void v19[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*(_UNKNOWN **)(*(void *)*a2 + 136) == &mlir::detail::TypeIDResolver<mlir::SymbolRefAttr,void>::id)
  {
    uint64_t v16 = *a2;
    uint64_t v7 = *a1[1];
    if (v7 == v4)
    {
      uint64_t v4 = *a1[2];
    }
    else if (isReferencePrefixOf(v7, v4))
    {
      mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)a1[1]);
      uint64_t v9 = v8;
      uint64_t AttrData = (const void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v16);
      unint64_t v12 = v10;
      if (v9)
      {
        uint64_t v17 = v19;
        uint64_t v18 = 0x400000000;
        if (8 * v10 < 0x21)
        {
          int v13 = 0;
          unint64_t v14 = v19;
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, v10, 8);
          int v13 = v18;
          unint64_t v14 = v17;
        }
        if (v12)
        {
          memcpy(&v14[v13], AttrData, 8 * v12);
          int v13 = v18;
          unint64_t v14 = v17;
        }
        LODWORD(v18) = v13 + v12;
        v14[v9 - 1] = *a1[4];
        uint64_t Value = mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v16);
        uint64_t v4 = mlir::SymbolRefAttr::get(Value, (uint64_t)v17, v18);
        if (v17 != v19) {
          free(v17);
        }
      }
      else
      {
        uint64_t v4 = mlir::SymbolRefAttr::get(*a1[3], (uint64_t)AttrData, v10);
      }
    }
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = 2;
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v5;
}

uint64_t _ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13Logi"
                     "calResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkR"
                     "esultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optional"
                     "INSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3"
                                "_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3"
                                "__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16"
                                "is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS2_9OperationES6_ENS2_13LogicalResultET_NS2_10StringAttrEPT0_EUlNS2_13SymbolRefAttrEE_SD_NS2_9AttributeENS_4pairISF_NS2_10WalkResultEEEEENS_9enable_ifIXoontsr3stdE9is_same_vISB_T1_Entsr3stdE16is_convertible_vIT2_NS_8optionalINSG_ISK_SH_EEEEEEvE4typeEOS9_EUlSF_E_NS_9allocatorISS_EEFNSM_ISI_EESF_EE11target_typeEv()
{
  return &_ZTIZN4mlir16AttrTypeReplacer14addReplacementIZL24replaceAllSymbolUsesImplIPNS_9OperationES3_ENS_13LogicalResultET_NS_10StringAttrEPT0_EUlNS_13SymbolRefAttrEE_SA_NS_9AttributeENSt3__14pairISC_NS_10WalkResultEEEEENSD_9enable_ifIXoontsr3stdE9is_same_vIS8_T1_Entsr3stdE16is_convertible_vIT2_NSD_8optionalINSE_ISI_SF_EEEEEEvE4typeEOS6_EUlSC_E_;
}

uint64_t llvm::function_ref<std::optional<mlir::WalkResult> ()(mlir::Operation *)>::callback_fn<mlir::LogicalResult replaceAllSymbolUsesImpl<mlir::Operation *,mlir::Operation>(mlir::Operation *,mlir::StringAttr,mlir::Operation *)::{lambda(mlir::Operation *)#1}>(mlir::AttrTypeReplacer **a1, mlir::Operation *a2)
{
  return 0x100000001;
}

uint64_t llvm::function_ref<mlir::Operation * ()(mlir::Operation *,mlir::StringAttr)>::callback_fn<mlir::SymbolTableCollection::lookupSymbolIn(mlir::Operation *,mlir::SymbolRefAttr,llvm::SmallVectorImpl<mlir::Operation *> &)::$_0>(mlir::SymbolTableCollection **a1, mlir::Operation *a2, uint64_t a3)
{
  uint64_t SymbolTable = mlir::SymbolTableCollection::getSymbolTable(*a1, a2);
  int v5 = *(_DWORD *)(SymbolTable + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(SymbolTable + 8);
    unsigned int v7 = v5 - 1;
    uint64_t v8 = (v5 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v9 = *(void *)(v6 + 16 * v8);
    if (v9 == a3) {
      return *(void *)(v6 + 16 * v8 + 8);
    }
    int v11 = 1;
    while (v9 != -4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & v7;
      uint64_t v9 = *(void *)(v6 + 16 * v8);
      if (v9 == a3) {
        return *(void *)(v6 + 16 * v8 + 8);
      }
    }
  }
  return 0;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::InsertIntoBucket<mlir::Operation * const&,decltype(nullptr)>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    int v9 = 2 * v6;
  }
  else
  {
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a2;
      goto LABEL_4;
    }
    int v9 = *(_DWORD *)(a1 + 16);
  }
  unint64_t v10 = *(uint64_t **)a1;
  unint64_t v11 = (v9 - 1) | ((unint64_t)(v9 - 1) >> 1);
  unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
  int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
  if ((v13 + 1) > 0x40) {
    unsigned int v14 = v13 + 1;
  }
  else {
    unsigned int v14 = 64;
  }
  *(_DWORD *)(a1 + 16) = v14;
  buffer = llvm::allocate_buffer(16 * v14, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v10)
  {
    uint64_t v16 = (char *)(16 * v6);
    llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::moveFromOldBuckets(a1, v10, (uint64_t *)&v16[(void)v10]);
    llvm::deallocate_buffer((llvm *)v10, v16);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v17 = *(unsigned int *)(a1 + 16);
  uint64_t v18 = buffer;
  if (((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0) {
    goto LABEL_34;
  }
  uint64_t v19 = ((v17 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  uint64_t v18 = &buffer[2 * (v19 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v20 = buffer + 2;
  uint64_t v21 = v19 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *(v20 - 2) = -4096;
    *uint64_t v20 = -4096;
    v20 += 4;
    v21 -= 2;
  }
  while (v21);
  if (v19 != (v19 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_34:
    do
    {
      *uint64_t v18 = -4096;
      v18 += 2;
    }
    while (v18 != &buffer[2 * v17]);
  }
  uint64_t v7 = *a3;
  int v22 = v17 - 1;
  unsigned int v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
  a2 = &buffer[2 * v23];
  uint64_t v24 = *a2;
  if (*a3 != *a2)
  {
    unsigned int v25 = 0;
    int v26 = 1;
    while (v24 != -4096)
    {
      if (v25) {
        BOOL v27 = 0;
      }
      else {
        BOOL v27 = v24 == -8192;
      }
      if (v27) {
        unsigned int v25 = a2;
      }
      unsigned int v28 = v23 + v26++;
      unsigned int v23 = v28 & v22;
      a2 = &buffer[2 * v23];
      uint64_t v24 = *a2;
      if (v7 == *a2) {
        goto LABEL_4;
      }
    }
    if (v25) {
      a2 = v25;
    }
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *a2 = *a3;
  a2[1] = 0;
  return a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>,mlir::Operation *,std::unique_ptr<mlir::SymbolTable>,llvm::DenseMapInfo<mlir::Operation *,void>,llvm::detail::DenseMapPair<mlir::Operation *,std::unique_ptr<mlir::SymbolTable>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = a2;
  *(void *)(result + 8) = 0;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4)
  {
    int v5 = *(void **)result;
    uint64_t v6 = (v4 - 1) & 0xFFFFFFFFFFFFFFFLL;
    if (v6)
    {
      uint64_t v7 = v6 + 1;
      uint64_t v8 = (v6 + 1) & 0x1FFFFFFFFFFFFFFELL;
      int v9 = &v5[2 * v8];
      unint64_t v10 = v5 + 2;
      uint64_t v11 = v8;
      do
      {
        *(v10 - 2) = -4096;
        *unint64_t v10 = -4096;
        v10 += 4;
        v11 -= 2;
      }
      while (v11);
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
    else
    {
      int v9 = *(void **)result;
    }
    unint64_t v12 = &v5[2 * v4];
    do
    {
      *int v9 = -4096;
      v9 += 2;
    }
    while (v9 != v12);
  }
LABEL_10:
  if (a2 != a3)
  {
    do
    {
      uint64_t v13 = *v3;
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v14 = *(_DWORD *)(result + 16) - 1;
        unsigned int v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
        uint64_t v16 = (void *)(*(void *)result + 16 * v15);
        uint64_t v17 = *v16;
        if (v13 != *v16)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v17 != -4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v17 == -8192;
            }
            if (v22) {
              uint64_t v20 = v16;
            }
            unsigned int v23 = v15 + v21++;
            unsigned int v15 = v23 & v14;
            uint64_t v16 = (void *)(*(void *)result + 16 * (v23 & v14));
            uint64_t v17 = *v16;
            if (v13 == *v16) {
              goto LABEL_15;
            }
          }
          if (v20) {
            uint64_t v16 = v20;
          }
        }
LABEL_15:
        *uint64_t v16 = v13;
        uint64_t v18 = v3[1];
        v3[1] = 0;
        v16[1] = v18;
        ++*(_DWORD *)(result + 8);
        uint64_t v19 = v3[1];
        v3[1] = 0;
        if (v19) {
          llvm::deallocate_buffer(*(llvm **)(v19 + 8), (void *)(16 * *(unsigned int *)(v19 + 24)));
        }
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t mlir::VerifiableTensorEncoding::verifyEncoding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (**(uint64_t (***)(void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), *(void *)a1, a2, a3, a4, a5, a6);
}

BOOL mlir::Type::isBF16(mlir::Type *this)
{
  return *(void *)(**(void **)this + 136) == (void)&mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id;
}

BOOL mlir::Type::isF16(mlir::Type *this)
{
  return *(void *)(**(void **)this + 136) == (void)&mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id;
}

BOOL mlir::Type::isF32(mlir::Type *this)
{
  return *(void *)(**(void **)this + 136) == (void)&mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id;
}

BOOL mlir::Type::isF64(mlir::Type *this)
{
  return *(void *)(**(void **)this + 136) == (void)&mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id;
}

BOOL mlir::Type::isIndex(mlir::Type *this)
{
  return *(void *)(**(void **)this + 136) == (void)&mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

BOOL mlir::Type::isInteger(mlir::Type *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void **)(**(void **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v5 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v5) == a2;
}

BOOL mlir::Type::isSignlessInteger(mlir::Type *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v1 = 0;
  }
  uint64_t v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 0;
}

BOOL mlir::Type::isSignlessInteger(mlir::Type *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void **)(**(void **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v6 = v2;
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 0;
  }
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6)) {
    return 0;
  }
  return mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isSignedInteger(mlir::Type *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v1 = 0;
  }
  uint64_t v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 1;
}

BOOL mlir::Type::isSignedInteger(mlir::Type *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void **)(**(void **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v6 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6) == 1
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isUnsignedInteger(mlir::Type *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v1 = 0;
  }
  uint64_t v4 = v1;
  return v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v4) == 2;
}

BOOL mlir::Type::isUnsignedInteger(mlir::Type *this, int a2)
{
  uint64_t v2 = *(void *)this;
  unint64_t v3 = *(void **)(**(void **)this + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v6 = v2;
  return v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      && mlir::IntegerType::getSignedness((mlir::IntegerType *)&v6) == 2
      && mlir::IntegerType::getWidth((mlir::IntegerType *)&v6) == a2;
}

BOOL mlir::Type::isSignlessIntOrIndex(mlir::Type *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v1 = 0;
  }
  uint64_t v5 = v1;
  if (v2 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return v2 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  }
  if (mlir::IntegerType::getSignedness((mlir::IntegerType *)&v5))
  {
    uint64_t v2 = *(void **)(**(void **)this + 136);
    return v2 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
  }
  return 1;
}

BOOL mlir::Type::isIntOrIndex(mlir::Type *this)
{
  uint64_t v1 = *(void **)(**(void **)this + 136);
  return v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

BOOL mlir::Type::isIntOrFloat(mlir::Type *this)
{
  uint64_t v1 = *(void **)(**(void **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id;
}

BOOL mlir::Type::isIntOrIndexOrFloat(mlir::Type *this)
{
  uint64_t v1 = *(void **)(**(void **)this + 136);
  if (v1 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E5M2FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3FNUZType,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float8E4M3B11FNUZType,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::BFloat16Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float16Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::FloatTF32Type,void>::id)
  {
    return 1;
  }
  if (v1 == &mlir::detail::TypeIDResolver<mlir::Float32Type,void>::id
    || v1 == &mlir::detail::TypeIDResolver<mlir::Float64Type,void>::id)
  {
    return 1;
  }
  return v1 == &mlir::detail::TypeIDResolver<mlir::Float80Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::Float128Type,void>::id
      || v1 == &mlir::detail::TypeIDResolver<mlir::IndexType,void>::id;
}

uint64_t mlir::Type::getIntOrFloatBitWidth(mlir::Type *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(void **)(**(void **)this + 136);
  BOOL v3 = v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id;
  if (v2 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v4 = *(void *)this;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = v4;
  if (v3) {
    return mlir::IntegerType::getWidth((mlir::IntegerType *)&v6);
  }
  uint64_t v6 = v1;
  return mlir::FloatType::getWidth((mlir::FloatType *)&v6);
}

unint64_t *mlir::TypeRange::TypeRange(unint64_t *result, uint64_t a2, unint64_t a3)
{
  *__n128 result = 0;
  result[1] = a3;
  if (a3)
  {
    unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFF8;
    if ((a2 & 6) == 4 && v3)
    {
      v3 |= 6uLL;
    }
    else
    {
      if (v3) {
        BOOL v4 = (a2 & 6) == 2;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        v3 |= 4uLL;
      }
    }
    *__n128 result = v3;
  }
  return result;
}

unint64_t mlir::TypeRange::dereference_iterator(uint64_t a1, uint64_t a2)
{
  char v2 = a1;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v2 & 6;
  if (!v4 && v3) {
    return *(void *)(*(void *)(v3 + 8 * a2) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 == 4 && v3) {
    return *(void *)(*(void *)(v3 + 32 * a2 + 24) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 == 6 && v3) {
    return *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v3, a2) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  if (v4 == 2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0;
  }
  return *(void *)(v6 + 8 * a2);
}

uint64_t mlir::getElementTypeOrSelf(void *a1)
{
  uint64_t v1 = a1;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    uint64_t v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    if (v1) {
      return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  return (uint64_t)v1;
}

{
  void *canMapOperands;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t canMapOperands = a1;
  if (!mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*a1 + 8))
  {
    uint64_t canMapOperands = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    return (uint64_t)canMapOperands;
  }
  uint64_t v2 = mlir::detail::InterfaceMap::lookup<mlir::TypedAttr>(*canMapOperands + 8);
  uint64_t v5 = canMapOperands;
  unint64_t v6 = v2;
  if (!canMapOperands) {
    return (uint64_t)canMapOperands;
  }
  uint64_t canMapOperands = (void *)mlir::MemoryMapperInterface::canMapOperands((mlir::MemoryMapperInterface *)&v5);
  if (!mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*canMapOperands + 8))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    return (uint64_t)canMapOperands;
  }
  uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*canMapOperands + 8);
  uint64_t v7 = canMapOperands;
  uint64_t v8 = v4;
  if (!canMapOperands) {
    return (uint64_t)canMapOperands;
  }
  return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v7);
}

uint64_t mlir::getElementTypeOrSelf(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8))
  {
    uint64_t v2 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v1 + 8);
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    if (v1) {
      return mlir::MemoryMapperInterface::getOperandRange((mlir::MemoryMapperInterface *)&v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  return (uint64_t)v1;
}

uint64_t mlir::verifyCompatibleShape(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  if (a2)
  {
    for (uint64_t i = 8 * a2 - 8; ; i -= 8)
    {
      uint64_t v5 = i;
      if (*a1 != 0x8000000000000000 && *a3 != 0x8000000000000000 && *a1 != *a3) {
        break;
      }
      ++a1;
      ++a3;
      if (!v5) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

BOOL mlir::verifyCompatibleShape(void *a1, void *a2)
{
  unint64_t v3 = a1;
  if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a1 + 8))
  {
    uint64_t v4 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v3 + 8);
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v3 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v5 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*a2 + 8);
      uint64_t v17 = a2;
      uint64_t v18 = v6;
      if (v3) {
        goto LABEL_4;
      }
      return a2 == 0;
    }
  }
  a2 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = v5;
  if (v3)
  {
LABEL_4:
    if (a2)
    {
      if (!mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v19)
        || !mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)&v17))
      {
        return 1;
      }
      ArgAttrsAttr = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v19);
      uint64_t v9 = v8;
      unint64_t v10 = (void *)mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v17);
      if (v9 == v11)
      {
        if (v9)
        {
          for (uint64_t i = 8 * v9 - 8; ; i -= 8)
          {
            uint64_t v14 = i;
            if (*ArgAttrsAttr != 0x8000000000000000 && *v10 != 0x8000000000000000 && *ArgAttrsAttr != *v10) {
              break;
            }
            ++ArgAttrsAttr;
            ++v10;
            uint64_t v13 = 1;
            if (!v14) {
              return v13;
            }
          }
          return 0;
        }
        return 1;
      }
    }
    return 0;
  }
  return a2 == 0;
}

uint64_t mlir::verifyCompatibleShapes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a4) {
    return 0;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, v7);
    uint64_t v9 = (void *)mlir::TypeRange::dereference_iterator(a3, v7);
    if (!mlir::verifyCompatibleShape(v8, v9)) {
      break;
    }
    if (a2 == ++v7) {
      return 1;
    }
  }
  return 0;
}

uint64_t mlir::verifyCompatibleShapes(uint64_t a1, unint64_t a2)
{
  v88[16] = *MEMORY[0x1E4F143B8];
  unsigned int v86 = (char *)v88;
  uint64_t v87 = 0x800000000;
  if (a2 < 9)
  {
    if (!a2)
    {
      LODWORD(v87) = 0;
      goto LABEL_13;
    }
    uint64_t v4 = 0;
    uint64_t v5 = v88;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, v88, a2, 16);
    uint64_t v4 = v87;
    uint64_t v5 = v86;
  }
  uint64_t v6 = 0;
  uint64_t v7 = &v5[2 * v4];
  do
  {
    while (1)
    {
      uint64_t v8 = (void *)mlir::TypeRange::dereference_iterator(a1, v6);
      if (mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8)) {
        break;
      }
      void *v7 = 0;
      v7[1] = 0;
      v7 += 2;
      if (a2 == ++v6) {
        goto LABEL_9;
      }
    }
    uint64_t v9 = mlir::detail::InterfaceMap::lookup<mlir::ShapedType>(*v8 + 8);
    void *v7 = v8;
    v7[1] = v9;
    v7 += 2;
    ++v6;
  }
  while (a2 != v6);
LABEL_9:
  int v10 = v87;
  uint64_t v11 = v86;
  uint64_t v12 = (v87 + a2);
  LODWORD(v87) = v87 + a2;
  if (!(v10 + a2))
  {
LABEL_13:
    uint64_t v16 = 1;
    goto LABEL_14;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 16 * v12;
  unsigned int v15 = &v86[16 * v12];
  while (!*(void *)&v86[v13])
  {
    v13 += 16;
    if (v14 == v13) {
      goto LABEL_13;
    }
  }
  uint64_t v18 = 0;
  do
  {
    if (!*(void *)&v86[v18])
    {
      uint64_t v16 = 0;
      goto LABEL_14;
    }
    v18 += 16;
  }
  while (v14 != v18);
  if (!a2) {
    goto LABEL_38;
  }
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  do
  {
    unint64_t v22 = mlir::TypeRange::dereference_iterator(a1, v21);
    if (*(_UNKNOWN **)(*(void *)v22 + 136) == &mlir::detail::TypeIDResolver<mlir::VectorType,void>::id) {
      unsigned int v23 = (mlir::CallableOpInterface *)v22;
    }
    else {
      unsigned int v23 = 0;
    }
    uint64_t v83 = v23;
    if (!v23
      || ((uint64_t RawStringData = (char *)mlir::DenseElementsAttr::getRawStringData((mlir::DenseElementsAttr *)&v83),
           size_t v26 = v25,
           BOOL v27 = &RawStringData[v25],
           uint64_t v28 = 1,
           (uint64_t v29 = (char *)memchr(RawStringData, 1, v25)) != 0)
        ? (uint64_t v30 = v29)
        : (uint64_t v30 = v27),
          v30 - RawStringData == v26))
    {
      char v20 = 1;
      uint64_t v28 = v19;
    }
    if (v28 & 1) != 0 && (v20)
    {
      uint64_t v16 = 0;
      goto LABEL_14;
    }
    ++v21;
    uint64_t v19 = v28;
  }
  while (a2 != v21);
  uint64_t v11 = v86;
  unsigned int v15 = &v86[16 * v87];
  if (v87)
  {
LABEL_38:
    while (1)
    {
      *(_OWORD *)__int16 v81 = *(_OWORD *)v11;
      if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81)) {
        break;
      }
      v11 += 16;
      if (v11 == v15)
      {
        uint64_t v11 = v15;
        break;
      }
    }
    long long v31 = v11;
    uint64_t v11 = v86;
    uint64_t v32 = v87;
  }
  else
  {
    uint64_t v32 = 0;
    long long v31 = v86;
  }
  uint64_t v33 = &v11[16 * v32];
  uint64_t v83 = (mlir::CallableOpInterface *)v85;
  uint64_t v84 = 0x800000000;
  if (v31 == v33)
  {
    unsigned int v37 = 0;
    LODWORD(v34) = 0;
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = v31;
    do
    {
      uint64_t v36 = v35 + 16;
      uint64_t v35 = v15;
      if (v36 != v15)
      {
        uint64_t v35 = v36;
        while (1)
        {
          *(_OWORD *)__int16 v81 = *(_OWORD *)v35;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81)) {
            break;
          }
          v35 += 16;
          if (v35 == v15)
          {
            uint64_t v35 = v15;
            break;
          }
        }
      }
      ++v34;
    }
    while (v35 != v33);
    unsigned int v37 = v84;
    unint64_t v38 = v34 + v84;
    if (v38 > HIDWORD(v84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, v85, v38, 16);
      unsigned int v37 = v84;
    }
  }
  if (v31 != v33)
  {
    long long v39 = (_OWORD *)((char *)v83 + 16 * v37);
    do
    {
      *long long v39 = *(_OWORD *)v31;
      uint64_t v40 = v31 + 16;
      long long v31 = v15;
      if (v40 != v15)
      {
        long long v31 = v40;
        while (1)
        {
          *(_OWORD *)__int16 v81 = *(_OWORD *)v31;
          if (mlir::CallOpInterface::getArgOperands((mlir::CallOpInterface *)v81)) {
            break;
          }
          v31 += 16;
          if (v31 == v15)
          {
            long long v31 = v15;
            break;
          }
        }
      }
      ++v39;
    }
    while (v31 != v33);
    unsigned int v37 = v84;
  }
  LODWORD(v84) = v37 + v34;
  if (!(v37 + v34)) {
    goto LABEL_118;
  }
  mlir::CallableOpInterface::getArgAttrsAttr(v83);
  uint64_t v42 = v41;
  if (!v84)
  {
LABEL_66:
    if (v42 >= 1)
    {
      uint64_t v46 = 0;
      unsigned int v47 = 0;
      while (1)
      {
        uint64_t v48 = v83;
        uint64_t v49 = (char *)v83 + 16 * v84;
        if (!v84) {
          break;
        }
        uint64_t v50 = 16 * v84;
        while (1)
        {
          long long v80 = *(_OWORD *)v48;
          mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
          if (v51 >= v46) {
            break;
          }
          uint64_t v48 = (mlir::CallableOpInterface *)((char *)v48 + 16);
          v50 -= 16;
          if (!v50)
          {
            uint64_t v48 = (mlir::CallableOpInterface *)v49;
            break;
          }
        }
        unint64_t v52 = v48;
        unint64_t v53 = (mlir::CallableOpInterface *)((char *)v83 + 16 * v84);
        v81[0] = v82;
        v81[1] = (void *)0x800000000;
        if (v48 == v53) {
          goto LABEL_115;
        }
        uint64_t v54 = 0;
        unint64_t v55 = v52;
        do
        {
          uint64_t v56 = (char *)v55 + 16;
          unint64_t v55 = (mlir::CallableOpInterface *)v49;
          if (v56 != v49)
          {
            unint64_t v55 = (mlir::CallableOpInterface *)v56;
            while (1)
            {
              long long v80 = *(_OWORD *)v55;
              mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
              if (v57 >= v46) {
                break;
              }
              unint64_t v55 = (mlir::CallableOpInterface *)((char *)v55 + 16);
              if (v55 == (mlir::CallableOpInterface *)v49)
              {
                unint64_t v55 = (mlir::CallableOpInterface *)v49;
                break;
              }
            }
          }
          ++v54;
        }
        while (v55 != v53);
        unsigned int v58 = v81[1];
        unint64_t v59 = v54 + LODWORD(v81[1]);
        if (v59 > HIDWORD(v81[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v81, v82, v59, 8);
          unsigned int v58 = v81[1];
        }
LABEL_83:
        __int16 v60 = (uint64_t *)v81[0];
        if (v52 != v53)
        {
          uint64_t v61 = v42;
          uint64_t v62 = (char *)v81[0] + 8 * v58;
          do
          {
            unint64_t v63 = (mlir::CallableOpInterface *)((char *)v52 + 16);
            long long v80 = *(_OWORD *)v52;
            *uint64_t v62 = *(void *)(mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80) + 8 * v46);
            unint64_t v52 = (mlir::CallableOpInterface *)v49;
            if (v63 != (mlir::CallableOpInterface *)v49)
            {
              unint64_t v52 = v63;
              while (1)
              {
                long long v80 = *(_OWORD *)v52;
                mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)&v80);
                if (v64 >= v46) {
                  break;
                }
                unint64_t v52 = (mlir::CallableOpInterface *)((char *)v52 + 16);
                if (v52 == (mlir::CallableOpInterface *)v49)
                {
                  unint64_t v52 = (mlir::CallableOpInterface *)v49;
                  break;
                }
              }
            }
            ++v62;
          }
          while (v52 != v53);
          unsigned int v58 = v81[1];
          __int16 v60 = (uint64_t *)v81[0];
          uint64_t v42 = v61;
        }
        unsigned int v65 = v58 + v54;
        LODWORD(v81[1]) = v58 + v54;
        if (v58 + v54)
        {
          uint64_t v66 = *v60;
          uint64_t v67 = 8 * v65;
          uint64_t v68 = v67;
          int64_t v69 = v60;
          do
          {
            uint64_t v71 = *v69++;
            uint64_t v70 = v71;
            if (v71 != 0x8000000000000000) {
              uint64_t v66 = v70;
            }
            v68 -= 8;
          }
          while (v68);
          uint64_t v72 = v67 - 8;
          uint64_t v73 = v60;
          do
          {
            uint64_t v75 = *v73++;
            uint64_t v74 = v75;
            BOOL v77 = v75 == 0x8000000000000000 || v66 == v74;
            BOOL v78 = !v77 || v72 == 0;
            v72 -= 8;
          }
          while (!v78);
          int v79 = !v77;
          if (v60 != (uint64_t *)v82) {
LABEL_110:
          }
            free(v60);
        }
        else
        {
          int v79 = 0;
          if (v60 != (uint64_t *)v82) {
            goto LABEL_110;
          }
        }
        if (v79)
        {
          uint64_t v16 = 0;
          goto LABEL_123;
        }
        uint64_t v46 = ++v47;
        if (v42 <= v47)
        {
          uint64_t v16 = 1;
          goto LABEL_123;
        }
      }
      unint64_t v52 = v83;
      unint64_t v53 = v83;
      v81[0] = v82;
      v81[1] = (void *)0x800000000;
LABEL_115:
      unsigned int v58 = 0;
      LODWORD(v54) = 0;
      goto LABEL_83;
    }
LABEL_118:
    uint64_t v16 = 1;
    goto LABEL_123;
  }
  unint64_t v43 = v83;
  uint64_t v44 = 16 * v84;
  while (1)
  {
    *(_OWORD *)__int16 v81 = *(_OWORD *)v43;
    mlir::CallableOpInterface::getArgAttrsAttr((mlir::CallableOpInterface *)v81);
    if (v45 != v42) {
      break;
    }
    unint64_t v43 = (mlir::CallableOpInterface *)((char *)v43 + 16);
    v44 -= 16;
    if (!v44) {
      goto LABEL_66;
    }
  }
  uint64_t v16 = 0;
LABEL_123:
  if (v83 != (mlir::CallableOpInterface *)v85) {
    free(v83);
  }
LABEL_14:
  if (v86 != (char *)v88) {
    free(v86);
  }
  return v16;
}

uint64_t mlir::Value::getDefiningOp(mlir::Value *this)
{
  uint64_t v1 = *(void *)this;
  if ((~*(_DWORD *)(*(void *)this + 8) & 7) == 0) {
    uint64_t v1 = 0;
  }
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8) & 7;
  if (v2 == 6) {
    return v1 + 24 * *(void *)(v1 + 16) + 120;
  }
  else {
    return v1 + 16 * v2 + 16;
  }
}

uint64_t mlir::Value::getLoc(mlir::Value *this)
{
  if ((~*(_DWORD *)(*(void *)this + 8) & 7) != 0) {
    uint64_t v1 = *(void *)this;
  }
  else {
    uint64_t v1 = 0;
  }
  if (!v1) {
    return *(void *)(*(void *)this + 32);
  }
  uint64_t v2 = *(void *)(v1 + 8) & 7;
  if (v2 == 6) {
    return *(void *)(v1 + 24 * *(void *)(v1 + 16) + 144);
  }
  else {
    return *(void *)(v1 + 16 * v2 + 40);
  }
}

mlir::Block *mlir::Value::getParentRegion(mlir::Value *this)
{
  if ((~*(_DWORD *)(*(void *)this + 8) & 7) != 0) {
    uint64_t v1 = *(void *)this;
  }
  else {
    uint64_t v1 = 0;
  }
  if (!v1) {
    return (mlir::Block *)mlir::Block::getParent(*(mlir::Block **)(*(void *)this + 16));
  }
  uint64_t v2 = *(void *)(v1 + 8) & 7;
  if (v2 == 6)
  {
    __n128 result = *(mlir::Block **)(v1 + 24 * *(void *)(v1 + 16) + 136);
    if (!result) {
      return result;
    }
  }
  else
  {
    __n128 result = *(mlir::Block **)(v1 + 16 * v2 + 32);
    if (!result) {
      return result;
    }
  }
  return (mlir::Block *)mlir::Block::getParent(result);
}

uint64_t mlir::Value::getParentBlock(mlir::Value *this)
{
  if ((~*(_DWORD *)(*(void *)this + 8) & 7) != 0) {
    uint64_t v1 = *(void *)this;
  }
  else {
    uint64_t v1 = 0;
  }
  if (!v1) {
    return *(void *)(*(void *)this + 16);
  }
  uint64_t v2 = *(void *)(v1 + 8) & 7;
  if (v2 == 6) {
    return *(void *)(v1 + 24 * *(void *)(v1 + 16) + 136);
  }
  else {
    return *(void *)(v1 + 16 * v2 + 32);
  }
}

const void **mlir::Value::replaceAllUsesExcept(const void **result, uint64_t *a2, llvm::SmallPtrSetImplBase *this)
{
  unint64_t v3 = *(uint64_t **)*result;
  if (v3)
  {
    do
    {
      uint64_t v6 = (uint64_t *)*v3;
      uint64_t v7 = (const void *)v3[2];
      uint64_t v8 = *((void *)this + 1);
      if (v8 == *(void *)this)
      {
        uint64_t v13 = *((unsigned int *)this + 5);
        __n128 result = (const void **)(v8 + 8 * v13);
        if (v13)
        {
          uint64_t v14 = 0;
          while (*(const void **)(v8 + v14) != v7)
          {
            v14 += 8;
            if (8 * v13 == v14) {
              goto LABEL_21;
            }
          }
          __n128 result = (const void **)(v8 + v14);
        }
LABEL_21:
        if (result != (const void **)(*((void *)this + 1) + 8 * v13)) {
          goto LABEL_4;
        }
      }
      else
      {
        __n128 result = llvm::SmallPtrSetImplBase::FindBucketFor(this, (const void *)v3[2]);
        uint64_t v9 = *(void *)this;
        uint64_t v10 = *((void *)this + 1);
        if (*result != v7)
        {
          unsigned int v11 = *((_DWORD *)this + 4);
          if (v10 == v9) {
            unsigned int v11 = *((_DWORD *)this + 5);
          }
          __n128 result = (const void **)(v10 + 8 * v11);
        }
        if (v10 == v9) {
          unsigned int v12 = *((_DWORD *)this + 5);
        }
        else {
          unsigned int v12 = *((_DWORD *)this + 4);
        }
        if (result != (const void **)(v10 + 8 * v12)) {
          goto LABEL_4;
        }
      }
      unsigned int v15 = (void *)v3[1];
      if (v15)
      {
        *unsigned int v15 = *v3;
        if (*v3) {
          *(void *)(*v3 + 8) = v3[1];
        }
      }
      void v3[3] = (uint64_t)a2;
      uint64_t v16 = *a2;
      uint64_t *v3 = *a2;
      v3[1] = (uint64_t)a2;
      if (v16) {
        *(void *)(v16 + 8) = v3;
      }
      *a2 = (uint64_t)v3;
LABEL_4:
      unint64_t v3 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ***mlir::Value::replaceAllUsesExcept(uint64_t ***result, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = **result;
  if (v3)
  {
    do
    {
      uint64_t v4 = (uint64_t *)*v3;
      if (v3[2] != a3)
      {
        uint64_t v5 = (uint64_t **)v3[1];
        if (v5)
        {
          void *v5 = v4;
          if (*v3) {
            *(void *)(*v3 + 8) = v3[1];
          }
        }
        void v3[3] = (uint64_t)a2;
        uint64_t v6 = *a2;
        uint64_t *v3 = *a2;
        v3[1] = (uint64_t)a2;
        if (v6) {
          *(void *)(v6 + 8) = v3;
        }
        *a2 = (uint64_t)v3;
      }
      unint64_t v3 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t ***mlir::Value::replaceUsesWithIf(uint64_t ***result, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4 = **result;
  if (v4)
  {
    do
    {
      uint64_t v8 = (uint64_t *)*v4;
      __n128 result = (uint64_t ***)a3(a4, v4);
      if (result)
      {
        uint64_t v9 = (uint64_t *)v4[1];
        if (v9)
        {
          *uint64_t v9 = *v4;
          if (*v4) {
            *(void *)(*v4 + 8) = v4[1];
          }
        }
        v4[3] = (uint64_t)a2;
        uint64_t v10 = *a2;
        uint64_t *v4 = *a2;
        v4[1] = (uint64_t)a2;
        if (v10) {
          *(void *)(v10 + 8) = v4;
        }
        *a2 = (uint64_t)v4;
      }
      uint64_t v4 = v8;
    }
    while (v8);
  }
  return result;
}

BOOL mlir::Value::isUsedOutsideOfBlock(mlir::Value *this, mlir::Block *a2)
{
  uint64_t v2 = *(void **)this;
  while (1)
  {
    uint64_t v2 = (void *)*v2;
    if (!v2) {
      break;
    }
    unint64_t v3 = *(mlir::Block **)(v2[2] + 16);
    BOOL result = v3 != a2;
    if (v3 != a2) {
      return result;
    }
  }
  return 0;
}

void mlir::Value::shuffleUseList(void **a1, unsigned int *a2, unint64_t a3)
{
}

void mlir::IRObjectWithUseList<mlir::OpOperand>::shuffleUseList(void *a1, unsigned int *a2, unint64_t a3)
{
  v19[6] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x600000000;
  if (!a3)
  {
    uint64_t v8 = (char *)v17;
    uint64_t v9 = *(void **)v17;
    *a1 = *(void *)v17;
    *uint64_t v9 = 0;
    v9[1] = a1;
    uint64_t v10 = v8;
    goto LABEL_15;
  }
  if (a3 < 7)
  {
    uint64_t v6 = 0;
    unint64_t v7 = a3;
    goto LABEL_7;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, v19, a3, 8);
  uint64_t v6 = v18;
  unint64_t v7 = a3 - v18;
  if (a3 != v18) {
LABEL_7:
  }
    bzero((char *)v17 + 8 * v6, 8 * v7);
  LODWORD(v18) = a3;
  unint64_t v11 = a3;
  unsigned int v12 = a1;
  do
  {
    unsigned int v12 = (void *)*v12;
    unsigned int v13 = *a2++;
    *((void *)v17 + v13) = v12;
    --v11;
  }
  while (v11);
  uint64_t v10 = (char *)v17;
  uint64_t v9 = *(void **)v17;
  *a1 = *(void *)v17;
  *uint64_t v9 = 0;
  v9[1] = a1;
  if (a3 == 1) {
    goto LABEL_11;
  }
  uint64_t v8 = &v10[8 * a3];
LABEL_15:
  uint64_t v14 = v10 + 8;
  do
  {
    uint64_t v16 = *(void **)v14;
    *uint64_t v9 = *(void *)v14;
    if (v16) {
      v16[1] = v9;
    }
    unsigned int v15 = *(void **)v14;
    v14 += 8;
    uint64_t v9 = v15;
  }
  while (v14 != v8);
LABEL_11:
  *uint64_t v9 = 0;
  if (v10 != (char *)v19) {
    free(v10);
  }
}

uint64_t mlir::detail::OpResultImpl::getOwner(mlir::detail::OpResultImpl *this)
{
  if (!this) {
    return (uint64_t)this + 24 * *((void *)this + 2) + 120;
  }
  uint64_t v1 = *((void *)this + 1) & 7;
  if (v1 == 6) {
    return (uint64_t)this + 24 * *((void *)this + 2) + 120;
  }
  else {
    return (uint64_t)this + 16 * v1 + 16;
  }
}

uint64_t mlir::detail::OpResultImpl::getNextResultAtOffset(uint64_t this, uint64_t a2)
{
  if (a2)
  {
    if (this)
    {
      uint64_t v2 = *(void *)(this + 8) & 7;
      if (v2 != 6)
      {
        uint64_t v3 = (5 - v2);
        if (a2 <= v3)
        {
          this -= 16 * a2;
          return this;
        }
        this -= 16 * v3;
        a2 -= v3;
      }
    }
    this -= 24 * a2;
  }
  return this;
}

uint64_t mlir::OpResult::getNumInline(uint64_t this)
{
  if (this >= 6) {
    return 6;
  }
  else {
    return this;
  }
}

uint64_t mlir::OpResult::getNumTrailing(mlir::OpResult *this)
{
  if (this >= 6) {
    return (this - 6);
  }
  else {
    return 0;
  }
}

unint64_t mlir::BlockOperand::getOperandNumber(mlir::BlockOperand *this)
{
  return ((unint64_t)this
        - ((*((void *)this + 2)
          + 16 * (((unint64_t)*(unsigned int *)(*((void *)this + 2) + 44) >> 23) & 1)
          + (((unint64_t)*(unsigned int *)(*((void *)this + 2) + 44) >> 21) & 0x7F8)
          + 71) & 0x1FFFFFFFF8)) >> 5;
}

unint64_t mlir::OpOperand::getOperandNumber(unint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((*(unsigned char *)(v1 + 46) & 0x80) != 0) {
    return (this - *(void *)(v1 + 72)) >> 5;
  }
  else {
    return this >> 5;
  }
}

__n128 mlir::OperandRangeRange::getTypes@<Q0>(mlir::OperandRangeRange *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((unsigned int *)this + 6);
  uint64_t v5 = (char *)operator new(0x28uLL);
  __n128 result = *(__n128 *)this;
  long long v7 = *((_OWORD *)this + 1);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)this;
  *(void *)uint64_t v5 = &unk_1EC9CEDD8;
  *(_OWORD *)(v5 + 24) = v7;
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 32) = v5;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = v4;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 1;
  return result;
}

uint64_t *mlir::OperandRange::getTypes@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *this;
  uint64_t v3 = this[1];
  *a2 = *this;
  a2[1] = 0;
  a2[2] = v2;
  a2[3] = v3;
  return this;
}

__n128 mlir::ValueRange::getTypes@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  a2->n128_u64[1] = 0;
  __n128 result = *this;
  a2->n128_u64[0] = this->n128_u64[0];
  a2[1] = result;
  return result;
}

__n128 std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EC9CEDD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CEDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  void v5[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = mlir::OperandRangeRange::dereference((void *)(a1 + 8), *(void *)(a1 + 24) + *a2);
  mlir::ValueRange::ValueRange(v5, v2, v3);
  return v5[0];
}

uint64_t std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeR"
                                "angeEjEEERKT_EUljE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir14TypeRangeRange10getRangeFnINS_17OperandRangeRangeEEENSt3__18functionIFNS_9TypeRangeEjEEERKT_EUljE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1},std::allocator<std::function<mlir::TypeRange ()(unsigned int)> mlir::TypeRangeRange::getRangeFn<mlir::OperandRangeRange>(mlir::OperandRangeRange const&)::{lambda(unsigned int)#1}>,mlir::TypeRange ()(unsigned int)>::target_type()
{
}

void mlir::verify(mlir *this, mlir::Operation *a2)
{
  char v2 = (char)a2;
}

void anonymous namespace'::OperationVerifier::verifyOpAndDominance(_anonymous_namespace_::OperationVerifier *this, mlir::Operation *a2)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  v222 = v224;
  v224[0] = a2;
  v205[0] = 0;
  uint64_t v2 = 1;
  uint64_t v223 = 0x600000001;
  v205[1] = 0;
  unsigned int v206 = 0;
  while (1)
  {
    uint64_t v221 = v222[v2 - 1];
    llvm::DenseMapBase<llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>,llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v205, &v221, (uint64_t)&v225);
    if (v226)
    {
      unint64_t v3 = v221 & 0xFFFFFFFFFFFFFFF8;
      if ((v221 & 4) != 0)
      {
        uint64_t v28 = *(void *)(v3 + 48);
        uint64_t v29 = *(void *)(v3 + 56) - v28;
        if (!v29)
        {
LABEL_51:
          long long v31 = (mlir::GenericProgramPoint **)(v3 + 32);
          if (*(void *)(v3 + 32) == v3 + 32)
          {
            if (!mlir::Block::getParent((mlir::Block *)(v221 & 0xFFFFFFFFFFFFFFF8))) {
              goto LABEL_163;
            }
            unint64_t Parent = mlir::Block::getParent((mlir::Block *)v3);
            uint64_t v90 = *(void *)(Parent + 8);
            if (v90 != Parent && *(void *)(v90 + 8) == Parent)
            {
              uint64_t ParentOp = mlir::Block::getParentOp((mlir::Block *)v3);
              if (!ParentOp
                || (mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>((void ***)(ParentOp + 48)) & 1) != 0)
              {
                goto LABEL_163;
              }
            }
            unint64_t v91 = (mlir::Region *)mlir::Block::getParent((mlir::Block *)v3);
            uint64_t Loc = mlir::Region::getLoc(v91);
            v236 = (const void **)"empty block: expect at least a terminator";
            __int16 v239 = 259;
            mlir::emitError(Loc, (uint64_t)&v236, (uint64_t)&v225);
            char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (!v235) {
              goto LABEL_162;
            }
            int64_t v93 = (void **)__p;
            if (__p)
            {
              char v94 = v234;
              uint64_t v95 = __p;
              if (v234 != __p)
              {
                do
                  char v94 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v94 - 1);
                while (v94 != v93);
                uint64_t v95 = __p;
              }
              v234 = v93;
              operator delete(v95);
            }
            uint64_t v40 = v231;
            if (!v231) {
              goto LABEL_160;
            }
            __int16 v96 = v232;
            uint64_t v42 = v231;
            if (v232 == v231) {
              goto LABEL_159;
            }
            do
            {
              long long v98 = (void *)*--v96;
              uint64_t v97 = v98;
              void *v96 = 0;
              if (v98) {
                operator delete[](v97);
              }
            }
            while (v96 != v40);
          }
          else
          {
            for (uint64_t i = *(mlir::GenericProgramPoint ***)(v3 + 40); ; uint64_t i = (mlir::GenericProgramPoint **)i[1])
            {
              if (i == v31) {
                goto LABEL_163;
              }
              mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)i);
              if (*(_DWORD *)(v33 + 40))
              {
                uint64_t v34 = (uint64_t *)v33;
                mlir::GenericProgramPoint::~GenericProgramPoint(*v31);
                if (v34 != v35) {
                  break;
                }
              }
            }
            v236 = (const void **)"operation with block successors must terminate its parent block";
            __int16 v239 = 259;
            mlir::Operation::emitError(v34, (uint64_t)&v236, (uint64_t)&v225);
            char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (!v235) {
              goto LABEL_162;
            }
            unsigned int v37 = (void **)__p;
            if (__p)
            {
              unint64_t v38 = v234;
              long long v39 = __p;
              if (v234 != __p)
              {
                do
                  unint64_t v38 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v38 - 1);
                while (v38 != v37);
                long long v39 = __p;
              }
              v234 = v37;
              operator delete(v39);
            }
            uint64_t v40 = v231;
            if (!v231) {
              goto LABEL_160;
            }
            uint64_t v41 = v232;
            uint64_t v42 = v231;
            if (v232 == v231) {
              goto LABEL_159;
            }
            do
            {
              uint64_t v44 = (void *)*--v41;
              unint64_t v43 = v44;
              void *v41 = 0;
              if (v44) {
                operator delete[](v43);
              }
            }
            while (v41 != v40);
          }
LABEL_158:
          uint64_t v42 = v231;
LABEL_159:
          v232 = v40;
          operator delete(v42);
          goto LABEL_160;
        }
        uint64_t v30 = 8 * (v29 >> 3);
        while (*(void *)(*(void *)v28 + 16) == v3)
        {
          v28 += 8;
          v30 -= 8;
          if (!v30) {
            goto LABEL_51;
          }
        }
        uint64_t v76 = *(void *)(*(void *)v28 + 32);
        v236 = (const void **)"block argument not owned by block";
        __int16 v239 = 259;
        mlir::emitError(v76, (uint64_t)&v236, (uint64_t)&v225);
        char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
        if ((void)v225) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
        }
        if (!v235) {
          goto LABEL_162;
        }
        BOOL v77 = (void **)__p;
        if (__p)
        {
          BOOL v78 = v234;
          int v79 = __p;
          if (v234 != __p)
          {
            do
              BOOL v78 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v78 - 1);
            while (v78 != v77);
            int v79 = __p;
          }
          v234 = v77;
          operator delete(v79);
        }
        uint64_t v40 = v231;
        if (v231)
        {
          long long v80 = v232;
          uint64_t v42 = v231;
          if (v232 == v231) {
            goto LABEL_159;
          }
          do
          {
            uint64_t v82 = (void *)*--v80;
            __int16 v81 = v82;
            *long long v80 = 0;
            if (v82) {
              operator delete[](v81);
            }
          }
          while (v80 != v40);
          goto LABEL_158;
        }
LABEL_160:
        uint64_t v99 = (const void **)v227;
        if (v227 == v230) {
          goto LABEL_162;
        }
        goto LABEL_161;
      }
      if ((*(unsigned char *)(v3 + 46) & 0x80) != 0)
      {
        uint64_t v4 = *(unsigned int *)(v3 + 68);
        if (v4)
        {
          uint64_t v5 = (void *)(*(void *)(v3 + 72) + 24);
          while (*v5)
          {
            v5 += 4;
            if (!--v4) {
              goto LABEL_12;
            }
          }
          v236 = (const void **)"null operand found";
          __int16 v239 = 259;
          mlir::Operation::emitError((uint64_t *)(v221 & 0xFFFFFFFFFFFFFFF8), (uint64_t)&v236, (uint64_t)&v225);
          char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
          if ((void)v225) {
            mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
          }
          if (!v235) {
            goto LABEL_162;
          }
          uint64_t v83 = (void **)__p;
          if (__p)
          {
            uint64_t v84 = v234;
            uint64_t v85 = __p;
            if (v234 != __p)
            {
              do
                uint64_t v84 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v84 - 1);
              while (v84 != v83);
              uint64_t v85 = __p;
            }
            v234 = v83;
            operator delete(v85);
          }
          uint64_t v40 = v231;
          if (v231)
          {
            unsigned int v86 = v232;
            uint64_t v42 = v231;
            if (v232 == v231) {
              goto LABEL_159;
            }
            do
            {
              uint64_t v88 = (void *)*--v86;
              uint64_t v87 = v88;
              *unsigned int v86 = 0;
              if (v88) {
                operator delete[](v87);
              }
            }
            while (v86 != v40);
            goto LABEL_158;
          }
          goto LABEL_160;
        }
      }
LABEL_12:
      v236 = *(const void ***)(v3 + 56);
      uint64_t Value = (long long *)mlir::AffineMapAttr::getValue((mlir::AffineMapAttr *)&v236);
      uint64_t v7 = mlir::DictionaryAttr::end((mlir::DictionaryAttr *)&v236);
      if (Value != (long long *)v7)
      {
        uint64_t v8 = (long long *)v7;
        do
        {
          long long v225 = *Value;
          uint64_t NameDialect = mlir::NamedAttribute::getNameDialect((mlir::NamedAttribute *)&v225);
          if (NameDialect
            && !(*(unsigned __int8 (**)(uint64_t, unint64_t, void, void))(*(void *)NameDialect
                                                                                             + 96))(NameDialect, v3, v225, *((void *)&v225 + 1)))
          {
            goto LABEL_359;
          }
          ++Value;
        }
        while (Value != v8);
      }
      uint64_t v70 = *(void ***)(v3 + 48);
      if (v70[2] != &mlir::detail::TypeIDResolver<void,void>::id
        && !(*((unsigned __int8 (**)(void **, unint64_t))*v70 + 8))(v70, v3))
      {
        goto LABEL_359;
      }
      int v71 = *(_DWORD *)(v3 + 44);
      uint64_t v72 = *(void *)&v71 & 0x7FFFFFLL;
      if ((v71 & 0x7FFFFF) != 0)
      {
        v207[0] = (uint64_t (**)(uint64_t))llvm::DefaultDoCastIfPossible<mlir::RegionKindInterface,mlir::Operation *,llvm::CastInfo<mlir::RegionKindInterface,mlir::Operation *,void>>::doCastIfPossible(v3);
        v207[1] = v73;
        v236 = (const void **)v238;
        uint64_t v237 = 0x600000000;
        unint64_t v74 = *(unsigned int *)(v3 + 44);
        if ((v74 & 0x7FFFFF) != 0) {
          uint64_t v75 = (void *)(v3
        }
                         + 16 * ((v74 >> 23) & 1)
                         + ((v74 >> 21) & 0x7F8)
                         + 32 * *(unsigned int *)(v3 + 40)
                         + 64);
        else {
          uint64_t v75 = 0;
        }
        uint64_t v129 = 0;
        while (1)
        {
          if (v207[0])
          {
            int RegionKind = mlir::RegionKindInterface::getRegionKind(v207, v129);
            uint64_t v131 = (void *)*v75;
            if (*(_UNKNOWN **)(*(void *)(v3 + 48) + 16) != &mlir::detail::TypeIDResolver<void,void>::id
              && RegionKind == 1)
            {
              if (v75 == v131) {
                goto LABEL_218;
              }
              if (v75 != *(void **)(v75[1] + 8))
              {
                v213 = (const void **)"expects graph region #";
                __int16 v216 = 259;
                mlir::Operation::emitOpError((uint64_t *)v3, &v213, (uint64_t)&v225);
                if ((void)v225)
                {
                  LODWORD(v208) = 5;
                  v209 = (const char *)v129;
                  v168 = (char *)v227;
                  if (v228 >= v229)
                  {
                    unint64_t v193 = v228 + 1;
                    if (v227 <= &v208 && (char *)v227 + 24 * v228 > (char *)&v208)
                    {
                      int64_t v199 = (char *)&v208 - (unsigned char *)v227;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v193, 24);
                      v168 = (char *)v227;
                      v169 = (const char **)((char *)v227 + v199);
                    }
                    else
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v193, 24);
                      v169 = &v208;
                      v168 = (char *)v227;
                    }
                  }
                  else
                  {
                    v169 = &v208;
                  }
                  int v170 = &v168[24 * v228];
                  long long v171 = *(_OWORD *)v169;
                  *((void *)v170 + 2) = v169[2];
                  *(_OWORD *)int v170 = v171;
                  uint64_t v172 = ++v228;
                  if ((void)v225)
                  {
                    LODWORD(v208) = 3;
                    v209 = " to have 0 or 1 blocks";
                    uint64_t v210 = 22;
                    v173 = (char *)v227;
                    if (v172 >= v229)
                    {
                      unint64_t v196 = v172 + 1;
                      BOOL v197 = (char *)v227 + 24 * v172 > (char *)&v208;
                      if (v227 <= &v208 && v197)
                      {
                        int64_t v202 = (char *)&v208 - (unsigned char *)v227;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v196, 24);
                        v173 = (char *)v227;
                        int v174 = (const char **)((char *)v227 + v202);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v196, 24);
                        int v174 = &v208;
                        v173 = (char *)v227;
                      }
                    }
                    else
                    {
                      int v174 = &v208;
                    }
                    BOOL v175 = &v173[24 * v228];
                    long long v176 = *(_OWORD *)v174;
                    *((void *)v175 + 2) = v174[2];
                    *(_OWORD *)BOOL v175 = v176;
                    ++v228;
                  }
                }
                char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
                if ((void)v225) {
                  mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
                }
                if (v235)
                {
                  unint64_t v177 = (void **)__p;
                  if (__p)
                  {
                    unint64_t v178 = v234;
                    uint64_t v179 = __p;
                    if (v234 != __p)
                    {
                      do
                        unint64_t v178 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v178 - 1);
                      while (v178 != v177);
                      uint64_t v179 = __p;
                    }
                    v234 = v177;
                    operator delete(v179);
                  }
                  unint64_t v137 = v231;
                  if (v231)
                  {
                    uint64_t v180 = v232;
                    unsigned int v139 = v231;
                    if (v232 != v231)
                    {
                      do
                      {
                        uint64_t v182 = (void *)*--v180;
                        uint64_t v181 = v182;
                        *uint64_t v180 = 0;
                        if (v182) {
                          operator delete[](v181);
                        }
                      }
                      while (v180 != v137);
                      goto LABEL_309;
                    }
LABEL_310:
                    v232 = v137;
                    operator delete(v139);
                  }
LABEL_311:
                  if (v227 != v230) {
                    free(v227);
                  }
                }
LABEL_313:
                uint64_t v99 = v236;
                if (v236 == (const void **)v238)
                {
LABEL_162:
                  if (v36) {
                    break;
                  }
LABEL_359:
                  llvm::deallocate_buffer(v205[0], (void *)(8 * v206));
                }
LABEL_161:
                free(v99);
                goto LABEL_162;
              }
            }
          }
          else
          {
            uint64_t v131 = (void *)*v75;
          }
          if (v75 != v131 && *(void *)(v75[1] - 8))
          {
            uint64_t v133 = *(void *)(v3 + 24);
            v213 = (const void **)"entry block of region may not have predecessors";
            __int16 v216 = 259;
            mlir::emitError(v133, (uint64_t)&v213, (uint64_t)&v225);
            char v36 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (v235)
            {
              __int16 v134 = (void **)__p;
              if (__p)
              {
                uint64_t v135 = v234;
                unint64_t v136 = __p;
                if (v234 != __p)
                {
                  do
                    uint64_t v135 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v135 - 1);
                  while (v135 != v134);
                  unint64_t v136 = __p;
                }
                v234 = v134;
                operator delete(v136);
              }
              unint64_t v137 = v231;
              if (v231)
              {
                int v138 = v232;
                unsigned int v139 = v231;
                if (v232 == v231) {
                  goto LABEL_310;
                }
                do
                {
                  uint64_t v141 = (void *)*--v138;
                  unsigned int v140 = v141;
                  *int v138 = 0;
                  if (v141) {
                    operator delete[](v140);
                  }
                }
                while (v138 != v137);
LABEL_309:
                unsigned int v139 = v231;
                goto LABEL_310;
              }
              goto LABEL_311;
            }
            goto LABEL_313;
          }
LABEL_218:
          ++v129;
          v75 += 3;
          if (v72 == v129)
          {
            char v36 = 1;
            goto LABEL_313;
          }
        }
      }
LABEL_163:
      unint64_t v100 = v221 & 0xFFFFFFFFFFFFFFF8;
      if ((v221 & 4) != 0)
      {
        unsigned int v110 = *(mlir::GenericProgramPoint **)(v100 + 32);
        unsigned int v108 = (mlir::GenericProgramPoint *)(v100 + 32);
        for (uint64_t j = v110; j != v108; uint64_t j = *(mlir::GenericProgramPoint **)j)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(j);
          uint64_t v112 = v111;
          if ((*(_DWORD *)(v111 + 44) & 0x7FFFFF) == 0) {
            goto LABEL_179;
          }
          {
            *(void *)&long long v225 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
            *((void *)&v225 + 1) = 91;
            unint64_t v113 = llvm::StringRef::find((uint64_t *)&v225, "DesiredTypeName = ", 0x12uLL, 0);
            if (*((void *)&v225 + 1) >= v113) {
              unint64_t v114 = v113;
            }
            else {
              unint64_t v114 = *((void *)&v225 + 1);
            }
            uint64_t v115 = v225 + v114;
            unint64_t v116 = *((void *)&v225 + 1) - v114;
            uint64_t v117 = 18;
            if (v116 < 0x12) {
              uint64_t v117 = v116;
            }
            unint64_t v118 = v116 - v117;
            if (v118 >= v118 - 1) {
              uint64_t v119 = v118 - 1;
            }
            else {
              uint64_t v119 = v118;
            }
            mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v115 + v117, v119);
          }
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v112 + 48) + 32))(*(void *)(v112 + 48), mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id) & 1) == 0)
          {
LABEL_179:
            if (v223 >= HIDWORD(v223)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v223 + 1, 8);
            }
            v222[v223] = v112 & 0xFFFFFFFFFFFFFFFBLL;
            LODWORD(v223) = v223 + 1;
          }
        }
      }
      else if (*(unsigned char *)this)
      {
        unint64_t v101 = *(unsigned int *)(v100 + 44);
        if ((v101 & 0x7FFFFF) != 0)
        {
          unint64_t v102 = ((v100 + 16 * ((v101 >> 23) & 1) + ((v101 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
               + 32 * *(unsigned int *)(v100 + 40);
          int v103 = (void *)(v102 + 24 * (v101 & 0x7FFFFF));
          do
          {
            uint64_t v105 = (void *)*(v103 - 3);
            v103 -= 3;
            unsigned long long v104 = v105;
            if (v105 != v103)
            {
              unsigned int v106 = v223;
              do
              {
                if (v104) {
                  unint64_t v107 = (unint64_t)(v104 - 1);
                }
                else {
                  unint64_t v107 = 0;
                }
                if (v106 >= HIDWORD(v223))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v222, v224, v106 + 1, 8);
                  v222[v223] = v107 | 4;
                }
                else
                {
                  v222[v106] = v107 | 4;
                }
                unsigned int v106 = v223 + 1;
                LODWORD(v223) = v223 + 1;
                unsigned long long v104 = (void *)*v104;
              }
              while (v104 != v103);
            }
          }
          while (v103 != (void *)v102);
        }
      }
    }
    else
    {
      LODWORD(v223) = v223 - 1;
      unint64_t v10 = v221 & 0xFFFFFFFFFFFFFFF8;
      if ((v221 & 4) == 0)
      {
        v236 = (const void **)v238;
        uint64_t v237 = 0x600000000;
        if (*(unsigned char *)this)
        {
          unint64_t v11 = *(unsigned int *)(v10 + 44);
          if ((v11 & 0x7FFFFF) != 0)
          {
            unint64_t v12 = ((v10 + 16 * ((v11 >> 23) & 1) + ((v11 >> 21) & 0x7F8) + 64) & 0xFFFFFFFFFFFFFFF8)
                + 32 * *(unsigned int *)(v10 + 40);
            unint64_t v13 = v12 + 24 * (v11 & 0x7FFFFF);
            do
            {
              for (uint64_t k = *(void *)(v12 + 8); k != v12; uint64_t k = *(void *)(k + 8))
              {
                uint64_t v15 = k - 8;
                if (!k) {
                  uint64_t v15 = 0;
                }
                uint64_t v16 = (mlir::GenericProgramPoint *)(v15 + 32);
                for (m = *(mlir::GenericProgramPoint **)(v15 + 40);
                      m != v16;
                      m = (mlir::GenericProgramPoint *)*((void *)m + 1))
                {
                  mlir::GenericProgramPoint::~GenericProgramPoint(m);
                  if ((*(_DWORD *)(v18 + 44) & 0x7FFFFF) != 0)
                  {
                    uint64_t v19 = (void **)v18;
                    {
                      *(void *)&long long v225 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
                      *((void *)&v225 + 1) = 91;
                      unint64_t v21 = llvm::StringRef::find((uint64_t *)&v225, "DesiredTypeName = ", 0x12uLL, 0);
                      if (*((void *)&v225 + 1) >= v21) {
                        unint64_t v22 = v21;
                      }
                      else {
                        unint64_t v22 = *((void *)&v225 + 1);
                      }
                      uint64_t v23 = v225 + v22;
                      unint64_t v24 = *((void *)&v225 + 1) - v22;
                      uint64_t v25 = 18;
                      if (v24 < 0x12) {
                        uint64_t v25 = v24;
                      }
                      unint64_t v26 = v24 - v25;
                      if (v26 >= v26 - 1) {
                        uint64_t v27 = v26 - 1;
                      }
                      else {
                        uint64_t v27 = v26;
                      }
                      mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID(v23 + v25, v27);
                    }
                    if ((*(unsigned int (**)(void *, uint64_t))(*v19[6] + 32))(v19[6], mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id))
                    {
                      uint64_t v20 = v237;
                      if (v237 >= (unint64_t)HIDWORD(v237))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, v238, v237 + 1, 8);
                        uint64_t v20 = v237;
                      }
                      v236[v20] = v19;
                      LODWORD(v237) = v237 + 1;
                    }
                  }
                }
              }
              v12 += 24;
            }
            while (v12 != v13);
          }
        }
        uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
        unint64_t v63 = v236;
        uint64_t v64 = v237;
        v212 = this;
        v213 = v236;
        unsigned int v220 = v237;
        if (v237)
        {
          unsigned int v65 = Context;
          if (mlir::MLIRContext::isMultithreadingEnabled(Context) && v220 > 1)
          {
            mlir::ParallelDiagnosticHandler::ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)&v208, v65);
            int v219 = 0;
            unsigned __int8 v218 = 0;
            uint64_t MemorySpace = (uint64_t (**)(uint64_t))mlir::MemRefType::getMemorySpace(v65);
            v207[0] = MemorySpace;
            if (*((_DWORD *)MemorySpace + 77) >= v220) {
              unsigned int v67 = v220;
            }
            else {
              unsigned int v67 = *((_DWORD *)MemorySpace + 77);
            }
            if (v67)
            {
              do
              {
                uint64_t v68 = v207[0];
                int64_t v69 = operator new(0x38uLL);
                *int64_t v69 = &unk_1EC9CF348;
                v69[1] = &v218;
                unint64_t v69[2] = &v219;
                v69[3] = &v220;
                v69[4] = &v208;
                v69[5] = &v212;
                v69[6] = &v213;
                v227 = v69;
                llvm::ThreadPool::asyncImpl<void>((uint64_t)v68, &v225, (uint64_t)v207, (std::future<void> *)&v217);
                if (v227 == &v225)
                {
                  (*(void (**)(long long *))(v225 + 32))(&v225);
                }
                else if (v227)
                {
                  (*(void (**)(void))(*(void *)v227 + 40))();
                }
                std::shared_future<void>::~shared_future(&v217);
                --v67;
              }
              while (v67);
              uint64_t MemorySpace = v207[0];
            }
            llvm::ThreadPool::wait((uint64_t)MemorySpace, (uint64_t)v207);
            unsigned __int8 v142 = atomic_load(&v218);
            llvm::ThreadPool::wait((uint64_t)v207[0], (uint64_t)v207);
            mlir::ParallelDiagnosticHandler::~ParallelDiagnosticHandler((mlir::ParallelDiagnosticHandler *)&v208);
            if ((v142 & 1) == 0) {
              goto LABEL_248;
            }
          }
          else
          {
            uint64_t v127 = &v63[v64];
            uint64_t v128 = v213;
            if (v213 == v127) {
              goto LABEL_248;
            }
            {
              uint64_t v128 = v213 + 1;
              v213 = v128;
              if (v128 == v127) {
                goto LABEL_248;
              }
            }
          }
          char v53 = 0;
LABEL_337:
          v164 = v236;
          if (v236 == (const void **)v238) {
            goto LABEL_3;
          }
          goto LABEL_2;
        }
LABEL_248:
        uint64_t v143 = *(void *)(v10 + 48);
        if (*(_UNKNOWN **)(v143 + 16) != &mlir::detail::TypeIDResolver<void,void>::id)
        {
          char v53 = (*(unsigned __int8 (**)(uint64_t, unint64_t))(*(void *)v143 + 72))(v143, v10) != 0;
          goto LABEL_337;
        }
        *(void *)&long long v225 = *(void *)(v143 + 8);
        uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v225);
        if (Values)
        {
          uint64_t v145 = Values;
          if (!*(unsigned char *)(Values + 40))
          {
            v208 = "unregistered operation '";
            __int16 v211 = 259;
            mlir::Operation::emitError((uint64_t *)v10, (uint64_t)&v208, (uint64_t)&v225);
            if ((void)v225)
            {
              mlir::Diagnostic::operator<<((uint64_t)&v225 + 8, *(void *)(v10 + 48));
              if ((void)v225)
              {
                LODWORD(v213) = 3;
                v214 = "' found in dialect ('";
                uint64_t v215 = 21;
                char v146 = (char *)v227;
                if (v228 >= v229)
                {
                  unint64_t v195 = v228 + 1;
                  if (v227 <= &v213 && (char *)v227 + 24 * v228 > (char *)&v213)
                  {
                    int64_t v201 = (char *)&v213 - (unsigned char *)v227;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v195, 24);
                    char v146 = (char *)v227;
                    v147 = (const void ***)((char *)v227 + v201);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v195, 24);
                    v147 = &v213;
                    char v146 = (char *)v227;
                  }
                }
                else
                {
                  v147 = &v213;
                }
                uint64_t v148 = &v146[24 * v228];
                long long v149 = *(_OWORD *)v147;
                *((void *)v148 + 2) = v147[2];
                *(_OWORD *)uint64_t v148 = v149;
                ++v228;
                if ((void)v225)
                {
                  uint64_t v150 = *(const void ***)(v145 + 8);
                  uint64_t v151 = *(const char **)(v145 + 16);
                  __int16 v216 = 261;
                  v213 = v150;
                  v214 = v151;
                  mlir::Diagnostic::operator<<((uint64_t)&v225 + 8, &v213);
                  if ((void)v225)
                  {
                    LODWORD(v213) = 3;
                    v214 = "') that does not allow unknown operations";
                    uint64_t v215 = 41;
                    unint64_t v152 = (char *)v227;
                    if (v228 >= v229)
                    {
                      unint64_t v198 = v228 + 1;
                      if (v227 <= &v213 && (char *)v227 + 24 * v228 > (char *)&v213)
                      {
                        int64_t v203 = (char *)&v213 - (unsigned char *)v227;
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v198, 24);
                        unint64_t v152 = (char *)v227;
                        v153 = (const void ***)((char *)v227 + v203);
                      }
                      else
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v198, 24);
                        v153 = &v213;
                        unint64_t v152 = (char *)v227;
                      }
                    }
                    else
                    {
                      v153 = &v213;
                    }
                    unint64_t v154 = &v152[24 * v228];
                    long long v155 = *(_OWORD *)v153;
                    *((void *)v154 + 2) = v153[2];
                    *(_OWORD *)unint64_t v154 = v155;
                    ++v228;
                  }
                }
              }
            }
            char v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (!v235) {
              goto LABEL_337;
            }
            v156 = (void **)__p;
            if (__p)
            {
              int v157 = v234;
              unsigned int v158 = __p;
              if (v234 != __p)
              {
                do
                  int v157 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v157 - 1);
                while (v157 != v156);
                unsigned int v158 = __p;
              }
              v234 = v156;
              operator delete(v158);
            }
            uint64_t v159 = v231;
            if (v231)
            {
              v160 = v232;
              int v161 = v231;
              if (v232 == v231) {
                goto LABEL_334;
              }
              do
              {
                unsigned int v163 = (void *)*--v160;
                BOOL v162 = v163;
                void *v160 = 0;
                if (v163) {
                  operator delete[](v162);
                }
              }
              while (v160 != v159);
LABEL_333:
              int v161 = v231;
              goto LABEL_334;
            }
            goto LABEL_335;
          }
        }
        else
        {
          int v165 = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(v10 + 24));
          if ((mlir::MLIRContext::allowsUnregisteredDialects(v165) & 1) == 0)
          {
            __int16 v216 = 257;
            mlir::Operation::emitOpError((uint64_t *)v10, &v213, (uint64_t)&v225);
            if ((void)v225)
            {
              LODWORD(v208) = 3;
              v209 = "created with unregistered dialect. If this is intended, please call allowUnregisteredDialects() on "
                     "the MLIRContext, or use -allow-unregistered-dialect with the MLIR opt tool used";
              uint64_t v210 = 178;
              uint64_t v183 = (char *)v227;
              if (v228 >= v229)
              {
                unint64_t v194 = v228 + 1;
                if (v227 <= &v208 && (char *)v227 + 24 * v228 > (char *)&v208)
                {
                  int64_t v200 = (char *)&v208 - (unsigned char *)v227;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v194, 24);
                  uint64_t v183 = (char *)v227;
                  v184 = (const char **)((char *)v227 + v200);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v227, v230, v194, 24);
                  v184 = &v208;
                  uint64_t v183 = (char *)v227;
                }
              }
              else
              {
                v184 = &v208;
              }
              v185 = &v183[24 * v228];
              long long v186 = *(_OWORD *)v184;
              *((void *)v185 + 2) = v184[2];
              *(_OWORD *)v185 = v186;
              ++v228;
            }
            char v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (!v235) {
              goto LABEL_337;
            }
            v187 = (void **)__p;
            if (__p)
            {
              v188 = v234;
              v189 = __p;
              if (v234 != __p)
              {
                do
                  v188 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v188 - 1);
                while (v188 != v187);
                v189 = __p;
              }
              v234 = v187;
              operator delete(v189);
            }
            uint64_t v159 = v231;
            if (v231)
            {
              v190 = v232;
              int v161 = v231;
              if (v232 != v231)
              {
                do
                {
                  v192 = (void *)*--v190;
                  v191 = v192;
                  void *v190 = 0;
                  if (v192) {
                    operator delete[](v191);
                  }
                }
                while (v190 != v159);
                goto LABEL_333;
              }
LABEL_334:
              v232 = v159;
              operator delete(v161);
            }
LABEL_335:
            if (v227 != v230) {
              free(v227);
            }
            goto LABEL_337;
          }
        }
        char v53 = 1;
        goto LABEL_337;
      }
      mlir::SuccessorRange::SuccessorRange((mlir::SuccessorRange *)&v225, (mlir::Block *)(v221 & 0xFFFFFFFFFFFFFFF8));
      uint64_t v45 = *((void *)&v225 + 1);
      if (*((void *)&v225 + 1))
      {
        uint64_t v46 = (mlir::Block **)(v225 + 24);
        while (1)
        {
          unint64_t v47 = mlir::Block::getParent(*v46);
          if (v47 != mlir::Block::getParent((mlir::Block *)v10)) {
            break;
          }
          v46 += 4;
          if (!--v45) {
            goto LABEL_75;
          }
        }
        mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v10 + 32));
        v236 = (const void **)"branching to block of a different region";
        __int16 v239 = 259;
        mlir::Operation::emitOpError(v120, &v236, (uint64_t)&v225);
        char v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
        if ((void)v225) {
          mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
        }
        if (v235)
        {
          uint64_t v121 = (void **)__p;
          if (__p)
          {
            BOOL v122 = v234;
            uint64_t v123 = __p;
            if (v234 != __p)
            {
              do
                BOOL v122 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v122 - 1);
              while (v122 != v121);
              uint64_t v123 = __p;
            }
            v234 = v121;
            operator delete(v123);
          }
          uint64_t v57 = v231;
          if (v231)
          {
            int v124 = v232;
            unint64_t v59 = v231;
            if (v232 != v231)
            {
              do
              {
                uint64_t v126 = (void *)*--v124;
                int v125 = v126;
                *int v124 = 0;
                if (v126) {
                  operator delete[](v125);
                }
              }
              while (v124 != v57);
              goto LABEL_276;
            }
LABEL_277:
            v232 = v57;
            operator delete(v59);
          }
          goto LABEL_278;
        }
        goto LABEL_3;
      }
LABEL_75:
      if (mlir::Block::getParent((mlir::Block *)v10))
      {
        unint64_t v48 = mlir::Block::getParent((mlir::Block *)v10);
        uint64_t v49 = *(void *)(v48 + 8);
        if (v49 == v48
          || *(void *)(v49 + 8) != v48
          || (uint64_t v166 = mlir::Block::getParentOp((mlir::Block *)v10)) != 0
          && (mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>((void ***)(v166 + 48)) & 1) == 0)
        {
          mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v10 + 32));
          uint64_t v51 = (mlir::Operation *)v50;
          if ((mlir::OperationName::mightHaveTrait<mlir::OpTrait::IsTerminator>(v50 + 6) & 1) == 0)
          {
            mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v10 + 32));
            v236 = (const void **)"block with no terminator, has ";
            __int16 v239 = 259;
            mlir::Operation::emitError(v52, (uint64_t)&v236, (uint64_t)&v225);
            if ((void)v225) {
              mlir::Diagnostic::operator<<((mlir::Diagnostic *)((char *)&v225 + 8), v51);
            }
            char v53 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)&v225);
            if ((void)v225) {
              mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v225);
            }
            if (!v235) {
              goto LABEL_3;
            }
            uint64_t v54 = (void **)__p;
            if (__p)
            {
              unint64_t v55 = v234;
              uint64_t v56 = __p;
              if (v234 != __p)
              {
                do
                  unint64_t v55 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v55 - 1);
                while (v55 != v54);
                uint64_t v56 = __p;
              }
              v234 = v54;
              operator delete(v56);
            }
            uint64_t v57 = v231;
            if (v231)
            {
              unsigned int v58 = v232;
              unint64_t v59 = v231;
              if (v232 == v231) {
                goto LABEL_277;
              }
              do
              {
                uint64_t v61 = (void *)*--v58;
                __int16 v60 = v61;
                *unsigned int v58 = 0;
                if (v61) {
                  operator delete[](v60);
                }
              }
              while (v58 != v57);
LABEL_276:
              unint64_t v59 = v231;
              goto LABEL_277;
            }
LABEL_278:
            v164 = (const void **)v227;
            if (v227 == v230)
            {
LABEL_3:
              if (!v53) {
                goto LABEL_359;
              }
              goto LABEL_4;
            }
LABEL_2:
            free(v164);
            goto LABEL_3;
          }
        }
      }
    }
LABEL_4:
    uint64_t v2 = v223;
    if (!v223) {
      goto LABEL_359;
    }
  }
}

uint64_t sub_1804B67C4()
{
  if (v5 != v3) {
    free(v5);
  }
  if (!v0) {
    return 0;
  }
  if ((*((_DWORD *)v2 + 11) & 0x7FFFFF) != 0)
  {
    v6[0] = 0;
    v6[1] = 0;
    int v7 = 0;
    mlir::detail::DominanceInfoBase<false>::~DominanceInfoBase((uint64_t)v6);
  }
  return 1;
}

uint64_t anonymous namespace'::OperationVerifier::verifyDominanceOfContainedRegions(_anonymous_namespace_::OperationVerifier *this, mlir::Operation *a2, mlir::DominanceInfo *a3)
{
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *((unsigned int *)a2 + 11);
  if ((v3 & 0x7FFFFF) == 0) {
    return 1;
  }
  uint64_t v5 = (char *)a2 + 32 * *((unsigned int *)a2 + 10) + 16 * ((v3 >> 23) & 1) + ((v3 >> 21) & 0x7F8) + 64;
  uint64_t v129 = &v5[24 * (v3 & 0x7FFFFF)];
  while (1)
  {
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v130 = v5;
    if ((char *)v6 != v5) {
      break;
    }
LABEL_33:
    v5 += 24;
    if (v5 == v129) {
      return 1;
    }
  }
  while (1)
  {
    int v7 = v6 ? (mlir::Block *)(v6 - 8) : 0;
    BOOL isReachableFromEntry = mlir::detail::DominanceInfoBase<false>::isReachableFromEntry((uint64_t)a3, v7);
    uint64_t v9 = (mlir::Block *)((char *)v7 + 32);
    unint64_t v10 = (mlir::GenericProgramPoint *)*((void *)v7 + 5);
    if (v10 != (mlir::Block *)((char *)v7 + 32)) {
      break;
    }
LABEL_32:
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t v5 = v130;
    if ((char *)v6 == v130) {
      goto LABEL_33;
    }
  }
  BOOL v11 = isReachableFromEntry;
  while (1)
  {
    mlir::GenericProgramPoint::~GenericProgramPoint(v10);
    uint64_t v13 = v12;
    if (v11 && (*(unsigned char *)(v12 + 46) & 0x80) != 0)
    {
      uint64_t v14 = (const char *)*(unsigned int *)(v12 + 68);
      if (v14) {
        break;
      }
    }
LABEL_16:
    if (*(unsigned char *)this && (*(_DWORD *)(v13 + 44) & 0x7FFFFF) != 0)
    {
      {
        uint64_t v148 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsIsolatedFromAbove<Empty>]";
        unint64_t v149 = 91;
        unint64_t v18 = llvm::StringRef::find((uint64_t *)&v148, "DesiredTypeName = ", 0x12uLL, 0);
        if (v149 >= v18) {
          unint64_t v19 = v18;
        }
        else {
          unint64_t v19 = v149;
        }
        uint64_t v20 = &v148[v19];
        unint64_t v21 = v149 - v19;
        uint64_t v22 = 18;
        if (v21 < 0x12) {
          uint64_t v22 = v21;
        }
        unint64_t v23 = v21 - v22;
        if (v23 >= v23 - 1) {
          uint64_t v24 = v23 - 1;
        }
        else {
          uint64_t v24 = v23;
        }
        mlir::detail::TypeIDResolver<mlir::OpTrait::IsIsolatedFromAbove<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsIsolatedFromAbove>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v20[v22], v24);
      }
      {
        return 0;
      }
    }
    unint64_t v10 = (mlir::GenericProgramPoint *)*((void *)v10 + 1);
    if (v10 == v9) {
      goto LABEL_32;
    }
  }
  uint64_t v15 = 0;
  uint64_t v16 = *(void *)(v12 + 72);
  uint64_t v17 = 24;
  while ((mlir::DominanceInfo::properlyDominates(a3, *(void *)(v16 + v17), (mlir::Block **)v13) & 1) != 0)
  {
    ++v15;
    v17 += 32;
    if (v14 == v15) {
      goto LABEL_16;
    }
  }
  v132[0] = "operand #";
  __int16 v133 = 259;
  mlir::Operation::emitError((uint64_t *)v13, (uint64_t)v132, (uint64_t)&v137);
  if (!v137)
  {
    uint64_t v148 = 0;
    LOBYTE(v149) = 0;
    char v158 = 0;
    if (!v147) {
      goto LABEL_58;
    }
LABEL_43:
    unint64_t v149 = (unint64_t)v138;
    int v150 = v139;
    uint64_t v151 = v153;
    uint64_t v152 = 0x400000000;
    int v36 = v141;
    if (!v141)
    {
      int v37 = 1;
      goto LABEL_54;
    }
    if (v140 != v142)
    {
      uint64_t v151 = v140;
      uint64_t v152 = v141;
      unsigned int v140 = v142;
      HIDWORD(v141) = 0;
      int v37 = 1;
LABEL_53:
      LODWORD(v141) = 0;
LABEL_54:
      long long v154 = v143;
      uint64_t v155 = v144;
      uint64_t v144 = 0;
      long long v143 = 0uLL;
      *(_OWORD *)v156 = *(_OWORD *)__p;
      uint64_t v157 = v146;
      __p[1] = 0;
      uint64_t v146 = 0;
      __p[0] = 0;
      char v158 = 1;
      if (v37)
      {
        if (v140 != v142) {
          free(v140);
        }
        unsigned __int8 v147 = 0;
      }
      goto LABEL_58;
    }
    if (v141 < 5)
    {
      uint64_t v40 = v153;
      long long v39 = v142;
      uint64_t v38 = v141;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v151, v153, v141, 24);
      uint64_t v38 = v141;
      if (!v141)
      {
LABEL_52:
        LODWORD(v152) = v36;
        int v37 = v147;
        goto LABEL_53;
      }
      long long v39 = v140;
      uint64_t v40 = v151;
    }
    memcpy(v40, v39, 24 * v38);
    goto LABEL_52;
  }
  int v134 = 5;
  uint64_t v135 = v15;
  unint64_t v26 = &v134;
  uint64_t v27 = (char *)v140;
  if (v141 >= HIDWORD(v141))
  {
    unint64_t v111 = v141 + 1;
    if (v140 <= &v134 && (char *)v140 + 24 * v141 > (char *)&v134)
    {
      int64_t v121 = (char *)&v134 - (unsigned char *)v140;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v111, 24);
      uint64_t v27 = (char *)v140;
      unint64_t v26 = (int *)((char *)v140 + v121);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v111, 24);
      unint64_t v26 = &v134;
      uint64_t v27 = (char *)v140;
    }
  }
  uint64_t v28 = &v27[24 * v141];
  long long v29 = *(_OWORD *)v26;
  *((void *)v28 + 2) = *((void *)v26 + 2);
  *(_OWORD *)uint64_t v28 = v29;
  uint64_t v30 = (v141 + 1);
  LODWORD(v141) = v141 + 1;
  long long v31 = v137;
  if (v137)
  {
    int v134 = 3;
    uint64_t v135 = " does not dominate this use";
    uint64_t v136 = 27;
    uint64_t v32 = &v134;
    uint64_t v33 = (char *)v140;
    if (v30 >= HIDWORD(v141))
    {
      unint64_t v114 = v30 + 1;
      BOOL v115 = (char *)v140 + 24 * v30 > (char *)&v134;
      if (v140 <= &v134 && v115)
      {
        int64_t v125 = (char *)&v134 - (unsigned char *)v140;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v114, 24);
        uint64_t v33 = (char *)v140;
        uint64_t v32 = (int *)((char *)v140 + v125);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v140, v142, v114, 24);
        uint64_t v32 = &v134;
        uint64_t v33 = (char *)v140;
      }
    }
    uint64_t v34 = &v33[24 * v141];
    long long v35 = *(_OWORD *)v32;
    *((void *)v34 + 2) = *((void *)v32 + 2);
    *(_OWORD *)uint64_t v34 = v35;
    LODWORD(v141) = v141 + 1;
    long long v31 = v137;
  }
  uint64_t v148 = v31;
  LOBYTE(v149) = 0;
  char v158 = 0;
  if (v147) {
    goto LABEL_43;
  }
LABEL_58:
  mlir::InFlightDiagnostic::abandon(&v137);
  if (v137) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v137);
  }
  if (v147)
  {
    uint64_t v41 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v42 = (void **)__p[1];
      unint64_t v43 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          uint64_t v42 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v42 - 1);
        while (v42 != v41);
        unint64_t v43 = __p[0];
      }
      __p[1] = v41;
      operator delete(v43);
    }
    uint64_t v44 = (void *)v143;
    if ((void)v143)
    {
      uint64_t v45 = (void *)*((void *)&v143 + 1);
      uint64_t v46 = (void *)v143;
      if (*((void *)&v143 + 1) != (void)v143)
      {
        do
        {
          unint64_t v48 = (void *)*--v45;
          unint64_t v47 = v48;
          void *v45 = 0;
          if (v48) {
            operator delete[](v47);
          }
        }
        while (v45 != v44);
        uint64_t v46 = (void *)v143;
      }
      *((void *)&v143 + 1) = v44;
      operator delete(v46);
    }
    if (v140 != v142) {
      free(v140);
    }
  }
  v132[0] = *(void *)(*(void *)(v13 + 72) + v17);
  uint64_t DefiningOp = mlir::Value::getDefiningOp((mlir::Value *)v132);
  if (!DefiningOp)
  {
    unsigned int v65 = (mlir::Attribute *)(v13 + 24);
    uint64_t v66 = *(mlir::Block **)(v13 + 16);
    unsigned int v67 = *(mlir::Block **)(v132[0] + 16);
    unint64_t Parent = (mlir::Region *)mlir::Block::getParent(v66);
    int64_t v69 = (mlir::Region *)mlir::Block::getParent(v67);
    uint64_t Context = (mlir::UnknownLoc *)mlir::Attribute::getContext(v65);
    uint64_t v72 = mlir::UnknownLoc::get(Context, v71);
    if (mlir::Block::getParentOp(v67)) {
      uint64_t v72 = *(void *)(mlir::Block::getParentOp(v67) + 24);
    }
    uint64_t v73 = mlir::Diagnostic::attachNote((uint64_t *)&v149, v72, 1);
    uint64_t v52 = v73;
    if (v69)
    {
      if (v66 == v67) {
        llvm::report_fatal_error((llvm *)"Internal error in dominance verification", (const char *)1);
      }
      unint64_t v74 = (char *)*((void *)v69 + 1);
      uint64_t v75 = (char *)v67 + 8;
      if (v74 == (char *)v67 + 8)
      {
        int v76 = 0;
      }
      else
      {
        int v76 = 0;
        do
        {
          ++v76;
          unint64_t v74 = (char *)*((void *)v74 + 1);
        }
        while (v74 != v75);
      }
      unint64_t v89 = *(void *)(v73 + 16);
      LODWORD(v137) = 3;
      int v138 = "operand defined as a block argument (block #";
      uint64_t v139 = 44;
      uint64_t v90 = *(unsigned int *)(v73 + 24);
      unint64_t v91 = &v137;
      if (v90 >= *(_DWORD *)(v73 + 28))
      {
        unint64_t v116 = v90 + 1;
        BOOL v117 = v89 + 24 * v90 > (unint64_t)&v137;
        if (v89 <= (unint64_t)&v137 && v117)
        {
          uint64_t v127 = (char *)&v137 - v89;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v73 + 16, (void *)(v73 + 32), v116, 24);
          unint64_t v89 = *(void *)(v52 + 16);
          unint64_t v91 = (const char **)&v127[v89];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v73 + 16, (void *)(v73 + 32), v116, 24);
          unint64_t v89 = *(void *)(v52 + 16);
          unint64_t v91 = &v137;
        }
      }
      uint64_t v92 = v89 + 24 * *(unsigned int *)(v52 + 24);
      long long v93 = *(_OWORD *)v91;
      *(void *)(v92 + 16) = v91[2];
      *(_OWORD *)uint64_t v92 = v93;
      unsigned int v94 = *(_DWORD *)(v52 + 28);
      uint64_t v95 = (*(_DWORD *)(v52 + 24) + 1);
      *(_DWORD *)(v52 + 24) = v95;
      LODWORD(v137) = 2;
      int v138 = (const char *)v76;
      unint64_t v96 = *(void *)(v52 + 16);
      uint64_t v97 = &v137;
      if (v95 >= v94)
      {
        unint64_t v118 = v95 + 1;
        BOOL v119 = v96 + 24 * v95 > (unint64_t)&v137;
        if (v96 <= (unint64_t)&v137 && v119)
        {
          uint64_t v128 = (char *)&v137 - v96;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + 16, (void *)(v52 + 32), v118, 24);
          unint64_t v96 = *(void *)(v52 + 16);
          uint64_t v97 = (const char **)&v128[v96];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + 16, (void *)(v52 + 32), v118, 24);
          unint64_t v96 = *(void *)(v52 + 16);
          uint64_t v97 = &v137;
        }
      }
      uint64_t v98 = v96 + 24 * *(unsigned int *)(v52 + 24);
      long long v99 = *(_OWORD *)v97;
      *(void *)(v98 + 16) = v97[2];
      *(_OWORD *)uint64_t v98 = v99;
      uint64_t v100 = (*(_DWORD *)(v52 + 24) + 1);
      *(_DWORD *)(v52 + 24) = v100;
      if (Parent == v69)
      {
        LODWORD(v137) = 3;
        int v138 = " in the same region)";
        uint64_t v139 = 20;
        unint64_t v78 = *(void *)(v52 + 16);
        int v79 = (char *)&v137;
        if (v100 < *(_DWORD *)(v52 + 28)) {
          goto LABEL_121;
        }
      }
      else if (mlir::Region::isProperAncestor(v69, Parent))
      {
        LODWORD(v137) = 3;
        int v138 = " in a parent region)";
        uint64_t v139 = 20;
        uint64_t v100 = *(unsigned int *)(v52 + 24);
        unint64_t v78 = *(void *)(v52 + 16);
        int v79 = (char *)&v137;
        if (v100 < *(_DWORD *)(v52 + 28)) {
          goto LABEL_121;
        }
      }
      else if (mlir::Region::isProperAncestor(Parent, v69))
      {
        LODWORD(v137) = 3;
        int v138 = " in a child region)";
        uint64_t v139 = 19;
        uint64_t v100 = *(unsigned int *)(v52 + 24);
        unint64_t v78 = *(void *)(v52 + 16);
        int v79 = (char *)&v137;
        if (v100 < *(_DWORD *)(v52 + 28)) {
          goto LABEL_121;
        }
      }
      else
      {
        LODWORD(v137) = 3;
        int v138 = " neither in a parent nor in a child region)";
        uint64_t v139 = 43;
        uint64_t v100 = *(unsigned int *)(v52 + 24);
        unint64_t v78 = *(void *)(v52 + 16);
        int v79 = (char *)&v137;
        if (v100 < *(_DWORD *)(v52 + 28)) {
          goto LABEL_121;
        }
      }
      unint64_t v83 = v100 + 1;
      BOOL v120 = v78 + 24 * v100 > (unint64_t)&v137;
      if (v78 > (unint64_t)&v137 || !v120)
      {
        uint64_t v85 = (void *)(v52 + 32);
        uint64_t v86 = v52 + 16;
        goto LABEL_158;
      }
      uint64_t v123 = (char *)&v137 - v78;
      int v124 = (void *)(v52 + 32);
      uint64_t v86 = v52 + 16;
    }
    else
    {
      uint64_t v86 = v73 + 16;
      unint64_t v78 = *(void *)(v52 + 16);
      LODWORD(v137) = 3;
      int v138 = " (block without parent)";
      uint64_t v139 = 23;
      uint64_t v87 = *(unsigned int *)(v52 + 24);
      int v79 = (char *)&v137;
      if (v87 < *(_DWORD *)(v52 + 28)) {
        goto LABEL_121;
      }
      unint64_t v83 = v87 + 1;
      BOOL v88 = v78 + 24 * v87 > (unint64_t)&v137;
      if (v78 > (unint64_t)&v137 || !v88)
      {
        uint64_t v85 = (void *)(v52 + 32);
        goto LABEL_158;
      }
      uint64_t v123 = (char *)&v137 - v78;
      int v124 = (void *)(v52 + 32);
    }
    goto LABEL_169;
  }
  uint64_t v50 = DefiningOp;
  uint64_t v51 = mlir::Diagnostic::attachNote((uint64_t *)&v149, *(void *)(DefiningOp + 24), 1);
  uint64_t v52 = v51;
  uint64_t v54 = v51 + 16;
  unint64_t v53 = *(void *)(v51 + 16);
  LODWORD(v137) = 3;
  int v138 = "operand defined here";
  uint64_t v139 = 20;
  uint64_t v55 = *(unsigned int *)(v51 + 24);
  uint64_t v56 = &v137;
  if (v55 >= *(_DWORD *)(v51 + 28))
  {
    unint64_t v112 = v55 + 1;
    BOOL v113 = v53 + 24 * v55 > (unint64_t)&v137;
    if (v53 <= (unint64_t)&v137 && v113)
    {
      BOOL v122 = (char *)&v137 - v53;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v51 + 16, (void *)(v51 + 32), v112, 24);
      unint64_t v53 = *(void *)(v52 + 16);
      uint64_t v56 = (const char **)&v122[v53];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v51 + 16, (void *)(v51 + 32), v112, 24);
      unint64_t v53 = *(void *)(v52 + 16);
      uint64_t v56 = &v137;
    }
  }
  uint64_t v57 = v53 + 24 * *(unsigned int *)(v52 + 24);
  long long v58 = *(_OWORD *)v56;
  *(void *)(v57 + 16) = v56[2];
  *(_OWORD *)uint64_t v57 = v58;
  ++*(_DWORD *)(v52 + 24);
  unint64_t v59 = *(mlir::Block **)(v13 + 16);
  __int16 v60 = *(mlir::Block **)(v50 + 16);
  uint64_t v61 = (mlir::Region *)mlir::Block::getParent(v59);
  uint64_t v62 = (mlir::Region *)mlir::Block::getParent(v60);
  if (v59 != v60)
  {
    unint64_t v63 = v62;
    if (v61 == v62)
    {
      LODWORD(v137) = 3;
      uint64_t v64 = " (op in the same region)";
    }
    else
    {
      if (!mlir::Region::isProperAncestor(v62, v61))
      {
        if (mlir::Region::isProperAncestor(v61, v63))
        {
          LODWORD(v137) = 3;
          int v138 = " (op in a child region)";
          uint64_t v139 = 23;
          uint64_t v82 = *(unsigned int *)(v52 + 24);
          unint64_t v78 = *(void *)(v52 + 16);
          int v79 = (char *)&v137;
          if (v82 < *(_DWORD *)(v52 + 28)) {
            goto LABEL_121;
          }
        }
        else
        {
          LODWORD(v137) = 3;
          int v138 = " (op is neither in a parent nor in a child region)";
          uint64_t v139 = 50;
          uint64_t v82 = *(unsigned int *)(v52 + 24);
          unint64_t v78 = *(void *)(v52 + 16);
          int v79 = (char *)&v137;
          if (v82 < *(_DWORD *)(v52 + 28)) {
            goto LABEL_121;
          }
        }
        goto LABEL_96;
      }
      LODWORD(v137) = 3;
      uint64_t v64 = " (op in a parent region)";
    }
    int v138 = v64;
    uint64_t v139 = 24;
    uint64_t v82 = *(unsigned int *)(v52 + 24);
    unint64_t v78 = *(void *)(v52 + 16);
    int v79 = (char *)&v137;
    if (v82 < *(_DWORD *)(v52 + 28)) {
      goto LABEL_121;
    }
LABEL_96:
    unint64_t v83 = v82 + 1;
    BOOL v84 = v78 + 24 * v82 > (unint64_t)&v137;
    if (v78 > (unint64_t)&v137 || !v84)
    {
      uint64_t v85 = (void *)(v52 + 32);
      uint64_t v86 = v54;
LABEL_158:
      llvm::SmallVectorBase<unsigned int>::grow_pod(v86, v85, v83, 24);
      unint64_t v78 = *(void *)(v52 + 16);
      int v79 = (char *)&v137;
      goto LABEL_121;
    }
    uint64_t v123 = (char *)&v137 - v78;
    int v124 = (void *)(v52 + 32);
    uint64_t v86 = v54;
LABEL_169:
    llvm::SmallVectorBase<unsigned int>::grow_pod(v86, v124, v83, 24);
    unint64_t v78 = *(void *)(v52 + 16);
    int v79 = &v123[v78];
    goto LABEL_121;
  }
  LODWORD(v137) = 3;
  int v138 = " (op in the same block)";
  uint64_t v139 = 23;
  uint64_t v77 = *(unsigned int *)(v52 + 24);
  unint64_t v78 = *(void *)(v52 + 16);
  int v79 = (char *)&v137;
  if (v77 >= *(_DWORD *)(v52 + 28))
  {
    unint64_t v80 = v77 + 1;
    BOOL v81 = v78 + 24 * v77 > (unint64_t)&v137;
    if (v78 <= (unint64_t)&v137 && v81)
    {
      uint64_t v126 = (char *)&v137 - v78;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v54, (void *)(v52 + 32), v80, 24);
      unint64_t v78 = *(void *)(v52 + 16);
      int v79 = &v126[v78];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v54, (void *)(v52 + 32), v80, 24);
      unint64_t v78 = *(void *)(v52 + 16);
      int v79 = (char *)&v137;
    }
  }
LABEL_121:
  uint64_t v101 = v78 + 24 * *(unsigned int *)(v52 + 24);
  long long v102 = *(_OWORD *)v79;
  *(void *)(v101 + 16) = *((void *)v79 + 2);
  *(_OWORD *)uint64_t v101 = v102;
  ++*(_DWORD *)(v52 + 24);
  if (v148) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v148);
  }
  if (v158)
  {
    int v103 = (void **)v156[0];
    if (v156[0])
    {
      unsigned long long v104 = (void **)v156[1];
      uint64_t v105 = v156[0];
      if (v156[1] != v156[0])
      {
        do
          unsigned long long v104 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v104 - 1);
        while (v104 != v103);
        uint64_t v105 = v156[0];
      }
      v156[1] = v103;
      operator delete(v105);
    }
    unsigned int v106 = (void *)v154;
    if ((void)v154)
    {
      unint64_t v107 = (void *)*((void *)&v154 + 1);
      unsigned int v108 = (void *)v154;
      if (*((void *)&v154 + 1) != (void)v154)
      {
        do
        {
          unsigned int v110 = (void *)*--v107;
          unint64_t v109 = v110;
          *unint64_t v107 = 0;
          if (v110) {
            operator delete[](v109);
          }
        }
        while (v107 != v106);
        unsigned int v108 = (void *)v154;
      }
      *((void *)&v154 + 1) = v106;
      operator delete(v108);
    }
    if (v151 != v153) {
      free(v151);
    }
  }
  return 0;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>,llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (!v6) {
    goto LABEL_22;
  }
  uint64_t v7 = *(void *)a1;
  unsigned int v8 = v6 - 1;
  unsigned int v9 = (37 * *a2) & (v6 - 1);
  unint64_t v10 = (void *)(*(void *)a1 + 8 * v9);
  uint64_t v11 = *v10;
  if (*a2 == *v10)
  {
LABEL_3:
    char v12 = 0;
    goto LABEL_9;
  }
  uint64_t v13 = 0;
  int v14 = 1;
  while (v11 != -4096)
  {
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v11 == -8192;
    }
    if (v15) {
      uint64_t v13 = v10;
    }
    unsigned int v16 = v9 + v14++;
    unsigned int v9 = v16 & v8;
    unint64_t v10 = (void *)(v7 + 8 * (v16 & v8));
    uint64_t v11 = *v10;
    if (*a2 == *v10) {
      goto LABEL_3;
    }
  }
  if (v13) {
    unint64_t v10 = v13;
  }
  int v17 = *(_DWORD *)(a1 + 8);
  if (4 * v17 + 4 >= 3 * v6)
  {
LABEL_22:
    v6 *= 2;
LABEL_23:
    llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::grow(a1, v6);
    int v18 = *(_DWORD *)(a1 + 16);
    if (v18)
    {
      int v19 = v18 - 1;
      unsigned int v20 = (37 * *a2) & (v18 - 1);
      unint64_t v10 = (void *)(*(void *)a1 + 8 * v20);
      uint64_t v21 = *v10;
      if (*a2 != *v10)
      {
        uint64_t v22 = 0;
        int v23 = 1;
        while (v21 != -4096)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == -8192;
          }
          if (v24) {
            uint64_t v22 = v10;
          }
          unsigned int v25 = v20 + v23++;
          unsigned int v20 = v25 & v19;
          unint64_t v10 = (void *)(*(void *)a1 + 8 * (v25 & v19));
          uint64_t v21 = *v10;
          if (*a2 == *v10) {
            goto LABEL_6;
          }
        }
        if (v22) {
          unint64_t v10 = v22;
        }
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    goto LABEL_6;
  }
  if (v6 + ~v17 - *(_DWORD *)(a1 + 12) <= v6 >> 3) {
    goto LABEL_23;
  }
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*v10 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *unint64_t v10 = *a2;
  uint64_t v7 = *(void *)a1;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  char v12 = 1;
LABEL_9:
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v7 + 8 * v6;
  *(unsigned char *)(a3 + 16) = v12;
}

void llvm::DenseMap<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::PointerUnion<mlir::Operation *,mlir::Block *>,void>,llvm::detail::DenseSetPair<llvm::PointerUnion<mlir::Operation *,mlir::Block *>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(llvm **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  buffer = llvm::allocate_buffer(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = buffer;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10) {
      memset_pattern16(buffer, &unk_1810FE110, 8 * v10);
    }
    if (v3)
    {
      uint64_t v11 = v4;
      do
      {
        uint64_t v14 = *(void *)v11;
        if ((*(void *)v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          int v15 = *(_DWORD *)(a1 + 16) - 1;
          unsigned int v16 = v15 & (37 * v14);
          uint64_t v13 = (void *)(*(void *)a1 + 8 * v16);
          uint64_t v17 = *v13;
          if (v14 != *v13)
          {
            int v18 = 0;
            int v19 = 1;
            while (v17 != -4096)
            {
              if (v18) {
                BOOL v20 = 0;
              }
              else {
                BOOL v20 = v17 == -8192;
              }
              if (v20) {
                int v18 = v13;
              }
              unsigned int v21 = v16 + v19++;
              unsigned int v16 = v21 & v15;
              uint64_t v13 = (void *)(*(void *)a1 + 8 * (v21 & v15));
              uint64_t v17 = *v13;
              if (v14 == *v13) {
                goto LABEL_16;
              }
            }
            if (v18) {
              uint64_t v13 = v18;
            }
          }
LABEL_16:
          *uint64_t v13 = v14;
          ++*(_DWORD *)(a1 + 8);
        }
        uint64_t v11 = (llvm *)((char *)v11 + 8);
      }
      while (v11 != (llvm *)((char *)v4 + 8 * v3));
    }
    llvm::deallocate_buffer(v4, (void *)(8 * v3));
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = *(unsigned int *)(a1 + 16);
  if (v12)
  {
    memset_pattern16(buffer, &unk_1810FE110, 8 * v12);
  }
}

uint64_t llvm::ThreadPool::asyncImpl<void>@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, std::future<void> *a4@<X8>)
{
  v20[1] = *(std::future<void> *)MEMORY[0x1E4F143B8];
  int v7 = (void *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      uint64_t v17 = v16;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v16);
    }
    else
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(void *))(*v7 + 16))(v7);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  llvm::ThreadPool::createTaskAndFuture(v16, (uint64_t)v18);
  if (v17 != v16)
  {
    if (v17) {
      (*(void (**)(void))(*v17 + 40))();
    }
    unsigned int v8 = (std::mutex *)(a1 + 104);
    std::mutex::lock((std::mutex *)(a1 + 104));
    unsigned int v9 = (void *)(a1 + 56);
    uint64_t v10 = v19;
    if (v19) {
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  (*(void (**)(void *))(v16[0] + 32))(v16);
  unsigned int v8 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unsigned int v9 = (void *)(a1 + 56);
  uint64_t v10 = v19;
  if (!v19) {
    goto LABEL_13;
  }
LABEL_10:
  if (v10 == v18)
  {
    uint64_t v14 = v13;
    (*(void (**)(void *, void *))(v18[0] + 24))(v18, v13);
  }
  else
  {
    uint64_t v14 = v10;
    int v19 = 0;
  }
LABEL_15:
  uint64_t v15 = a3;
  std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::emplace_back<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>(v9, (uint64_t)v13);
  if (v14 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v14)
  {
    (*(void (**)(void))(*v14 + 40))();
  }
  int v11 = *(_DWORD *)(a1 + 264) + *(_DWORD *)(a1 + 96);
  std::mutex::unlock(v8);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 168));
  llvm::ThreadPool::grow((pthread_rwlock_t **)a1, v11);
  a4->__state_ = (std::__assoc_sub_state *)v20[0];
  v20[0].__state_ = 0;
  std::future<void>::~future(v20);
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

void llvm::ThreadPool::createTaskAndFuture(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::promise<void> *)operator new(0x20uLL);
  v4[1].__state_ = 0;
  v4[2].__state_ = 0;
  v4->__state_ = (std::__assoc_sub_state *)&unk_1EC9D01A0;
  unint64_t v5 = std::promise<void>::promise(v4 + 3);
  std::promise<void>::get_future(v5);
  unsigned int v9 = v4 + 3;
  uint64_t v10 = (std::__shared_weak_count *)v4;
  unint64_t v6 = (void *)a1[3];
  if (v6)
  {
    if (v6 == a1)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v11);
    }
    else
    {
      uint64_t v12 = (void *)(*(uint64_t (**)(void *))(*v6 + 16))(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::pair<std::function<void ()(void)>,std::future<void>>::pair[abi:nn180100]<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::future<void>,0>(a2, (uint64_t *)&v9, &v8);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
    int v7 = v10;
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v12) {
    (*(void (**)(void))(*v12 + 40))();
  }
  int v7 = v10;
  if (v10)
  {
LABEL_12:
    if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_14:
  std::future<void>::~future(&v8);
}

uint64_t std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::emplace_back<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::__add_back_capacity((uint64_t)a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9)
    {
LABEL_7:
      if (v9 == a2)
      {
        *(void *)(v8 + 24) = v8;
        (*(void (**)(void, unint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), v8);
        uint64_t v4 = a1[1];
        uint64_t v5 = a1[2];
      }
      else
      {
        *(void *)(v8 + 24) = v9;
        *(void *)(a2 + 24) = 0;
      }
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    uint64_t v9 = *(void *)(a2 + 24);
    if (v9) {
      goto LABEL_7;
    }
  }
  *(void *)(v8 + 24) = 0;
LABEL_12:
  *(void *)(v8 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5] + 1;
  a1[5] = v11;
  unint64_t v12 = v10 + v11;
  uint64_t v13 = (void *)(v4 + 8 * (v12 / 0x66));
  unint64_t v14 = *v13 + 40 * (v12 % 0x66);
  if (v5 == v4) {
    unint64_t v15 = 0;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v15 == *v13) {
    return *(v13 - 1) + 4040;
  }
  else {
    return v15 - 40;
  }
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D01A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::promise<void>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EC9D01A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void std::__shared_ptr_emplace<std::promise<void>>::__on_zero_shared()
{
}

uint64_t std::pair<std::function<void ()(void)>,std::future<void>>::pair[abi:nn180100]<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::future<void>,0>(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v12 = *a2;
  *a2 = 0;
  a2[1] = 0;
  unint64_t v7 = (uint64_t *)a2[5];
  if (v7)
  {
    if (v7 == a2 + 2)
    {
      unint64_t v14 = v13;
      (*(void (**)(uint64_t *, void *))(*v7 + 24))(v7, v13);
      uint64_t v5 = v12;
      unint64_t v7 = v14;
    }
    else
    {
      unint64_t v14 = (uint64_t *)a2[5];
      a2[5] = 0;
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  *(void *)(a1 + 24) = 0;
  unint64_t v8 = operator new(0x38uLL);
  uint64_t v9 = v8;
  void *v8 = &unk_1EC9CEC88;
  v8[1] = v5;
  void v8[2] = v6;
  if (!v7)
  {
    v8[6] = 0;
    goto LABEL_10;
  }
  if (v7 != v13)
  {
    v8[6] = v7;
    unint64_t v14 = 0;
LABEL_10:
    *(void *)(a1 + 24) = v8;
    goto LABEL_11;
  }
  v8[6] = v8 + 3;
  (*(void (**)(void *))(v13[0] + 24))(v13);
  uint64_t v11 = v14;
  *(void *)(a1 + 24) = v9;
  if (v11 == v13)
  {
    (*(void (**)(void *))(v13[0] + 32))(v13);
  }
  else if (v11)
  {
    (*(void (**)(uint64_t *))(*v11 + 40))(v11);
  }
LABEL_11:
  *(void *)(a1 + 32) = *a3;
  *a3 = 0;
  return a1;
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1EC9CEC88;
  uint64_t v2 = a1 + 3;
  uint64_t v3 = (void *)a1[6];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::~__func(char *__p)
{
  *(void *)std::string __p = &unk_1EC9CEC88;
  uint64_t v2 = __p + 24;
  uint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    uint64_t v5 = __p;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = __p;

LABEL_7:
  operator delete(v5);
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(void *a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t v2 = &unk_1EC9CEC88;
  v2[1] = v4;
  void v2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)a1[6];
  if (v5)
  {
    if (v5 == a1 + 3)
    {
      v2[6] = v2 + 3;
      (*(void (**)(void *))(*v5 + 24))(v5);
    }
    else
    {
      v2[6] = (*(uint64_t (**)(void *))(*v5 + 16))(v5);
    }
    return v2;
  }
  else
  {
    v2[6] = 0;
    return v2;
  }
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v4 = result[1];
  uint64_t v3 = result[2];
  *a2 = &unk_1EC9CEC88;
  a2[1] = v4;
  a2[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (void *)result[6];
  if (v5)
  {
    if (v5 == result + 3)
    {
      a2[6] = a2 + 3;
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result[6] + 24);
      return (void *)v6();
    }
    else
    {
      uint64_t result = (void *)(*(uint64_t (**)(void))(*v5 + 16))(result[6]);
      a2[6] = result;
    }
  }
  else
  {
    a2[6] = 0;
  }
  return result;
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(char *__p)
{
  uint64_t v2 = __p + 24;
  uint64_t v3 = (char *)*((void *)__p + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    uint64_t v5 = __p;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  uint64_t v5 = __p;

LABEL_7:
  operator delete(v5);
}

void std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    uint64_t v3 = *(std::promise<void> **)(a1 + 8);
    std::promise<void>::set_value(v3);
  }
  else
  {
    uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
    std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(v4);
  }
}

uint64_t std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4llvm10ThreadPool19createTaskAndFutureENSt3__18functionIFvvEEEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1},std::allocator<llvm::ThreadPool::createTaskAndFuture(std::function<void ()(void)>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::deque<std::pair<std::function<void ()(void)>,llvm::ThreadPoolTaskGroup *>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x66;
  unint64_t v4 = v2 - 102;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v34 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v34 = 1;
      }
      if (!(v34 >> 61))
      {
        unint64_t v35 = v34 >> 2;
        uint64_t v36 = 8 * v34;
        int v37 = (char *)operator new(8 * v34);
        uint64_t v38 = &v37[8 * v35];
        long long v39 = &v37[v36];
        int64_t v41 = v5 - v7;
        BOOL v40 = v5 == v7;
        uint64_t v5 = v38;
        if (!v40)
        {
          uint64_t v5 = &v38[v41 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v42 = v41 - 8;
          if ((unint64_t)(v41 - 8) >= 0x38)
          {
            int v76 = &v37[8 * v35];
            unint64_t v43 = v76;
            if ((unint64_t)(v76 - v7) >= 0x20)
            {
              uint64_t v77 = (v42 >> 3) + 1;
              uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v43 = &v38[v78];
              v7 += v78;
              int v79 = (long long *)(v6 + 3);
              unint64_t v80 = v76 + 16;
              uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v82 = *v79;
                *(v80 - 1) = *(v79 - 1);
                *unint64_t v80 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 4;
              }
              while (v81);
              if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            unint64_t v43 = &v37[8 * v35];
          }
          do
          {
            uint64_t v83 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v43 = v83;
            v43 += 8;
          }
          while (v43 != v5);
        }
        goto LABEL_76;
      }
LABEL_86:
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      unint64_t v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      uint64_t v92 = operator new(0xFF0uLL);
      std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_back((char **)a1, &v92);
      return;
    }
    uint64_t v92 = operator new(0xFF0uLL);
    std::__split_buffer<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *,std::allocator<std::pair<mlir::ProgramPoint,mlir::DataFlowAnalysis *> *>>::push_front((void **)a1, &v92);
    uint64_t v44 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    unint64_t v7 = (char *)(v44 + 1);
    uint64_t v8 = *v44;
    *(void *)(a1 + 8) = v44 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_78;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v45 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v45 = 1;
      }
      if (!(v45 >> 61))
      {
        unint64_t v46 = v45 >> 2;
        uint64_t v47 = 8 * v45;
        int v37 = (char *)operator new(8 * v45);
        uint64_t v38 = &v37[8 * v46];
        long long v39 = &v37[v47];
        int64_t v48 = v5 - v7;
        BOOL v40 = v5 == v7;
        uint64_t v5 = v38;
        if (!v40)
        {
          uint64_t v5 = &v38[v48 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v49 = v48 - 8;
          if ((unint64_t)(v48 - 8) >= 0x38)
          {
            BOOL v84 = &v37[8 * v46];
            uint64_t v50 = v84;
            if ((unint64_t)(v84 - v7) >= 0x20)
            {
              uint64_t v85 = (v49 >> 3) + 1;
              uint64_t v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v50 = &v38[v86];
              v7 += v86;
              uint64_t v87 = (long long *)(v44 + 3);
              BOOL v88 = v84 + 16;
              uint64_t v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v90 = *v87;
                *(v88 - 1) = *(v87 - 1);
                *BOOL v88 = v90;
                v87 += 2;
                v88 += 2;
                v89 -= 4;
              }
              while (v89);
              if (v85 == (v85 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_76;
              }
            }
          }
          else
          {
            uint64_t v50 = &v37[8 * v46];
          }
          do
          {
            uint64_t v91 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v50 = v91;
            v50 += 8;
          }
          while (v50 != v5);
        }
LABEL_76:
        *(void *)a1 = v37;
        *(void *)(a1 + 8) = v38;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v39;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_86;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_86;
  }
  unsigned int v25 = (char *)operator new(8 * v24);
  unint64_t v26 = &v25[8 * v21];
  uint64_t v27 = &v25[8 * v24];
  uint64_t v28 = operator new(0xFF0uLL);
  long long v29 = v28;
  if (v21 != v24) {
    goto LABEL_23;
  }
  if (v20 >= 1)
  {
    unint64_t v30 = v21 + 2;
    if (v21 >= -1) {
      unint64_t v30 = v21 + 1;
    }
    v26 -= 8 * (v30 >> 1);
LABEL_23:
    *(void *)unint64_t v26 = v28;
    long long v31 = v26 + 8;
    if (v18 != v19) {
      goto LABEL_51;
    }
    goto LABEL_24;
  }
  if (v18 == v19) {
    unint64_t v51 = 1;
  }
  else {
    unint64_t v51 = v20 >> 2;
  }
  if (v51 >> 61) {
    goto LABEL_86;
  }
  uint64_t v52 = 8 * v51;
  unint64_t v53 = (char *)operator new(8 * v51);
  unint64_t v26 = &v53[8 * (v51 >> 2)];
  uint64_t v27 = &v53[v52];
  operator delete(v25);
  uint64_t v54 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  unsigned int v25 = v53;
  *(void *)unint64_t v26 = v29;
  long long v31 = v26 + 8;
  if (v18 != v54)
  {
    while (1)
    {
LABEL_51:
      if (v26 == v25)
      {
        if (v31 >= v27)
        {
          unint64_t v61 = (v27 - v26) >> 2;
          if (v27 == v26) {
            unint64_t v61 = 1;
          }
          if (v61 >> 61) {
            goto LABEL_86;
          }
          unint64_t v62 = (v61 + 3) >> 2;
          uint64_t v63 = 8 * v61;
          uint64_t v64 = (char *)operator new(8 * v61);
          unsigned int v25 = v64;
          uint64_t v55 = &v64[8 * v62];
          int64_t v65 = v31 - v26;
          BOOL v40 = v31 == v26;
          long long v31 = v55;
          if (!v40)
          {
            long long v31 = &v55[v65 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v66 = v65 - 8;
            unsigned int v67 = &v64[8 * v62];
            uint64_t v68 = v26;
            if (v66 < 0x38) {
              goto LABEL_89;
            }
            unsigned int v67 = &v64[8 * v62];
            uint64_t v68 = v26;
            if ((unint64_t)(v67 - v26) < 0x20) {
              goto LABEL_89;
            }
            uint64_t v69 = (v66 >> 3) + 1;
            uint64_t v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
            unsigned int v67 = &v55[v70];
            uint64_t v68 = &v26[v70];
            int v71 = (long long *)(v26 + 16);
            uint64_t v72 = &v64[8 * v62 + 16];
            uint64_t v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v74 = *v71;
              *((_OWORD *)v72 - 1) = *(v71 - 1);
              *(_OWORD *)uint64_t v72 = v74;
              v71 += 2;
              v72 += 32;
              v73 -= 4;
            }
            while (v73);
            if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                uint64_t v75 = *(void *)v68;
                v68 += 8;
                *(void *)unsigned int v67 = v75;
                v67 += 8;
              }
              while (v67 != v31);
            }
          }
          uint64_t v27 = &v64[v63];
          operator delete(v26);
        }
        else
        {
          uint64_t v57 = (v27 - v31) >> 3;
          if (v57 >= -1) {
            unint64_t v58 = v57 + 1;
          }
          else {
            unint64_t v58 = v57 + 2;
          }
          unint64_t v59 = &v31[8 * (v58 >> 1)];
          uint64_t v55 = &v59[-(v31 - v26)];
          size_t v60 = v31 - v26;
          BOOL v40 = v31 == v26;
          long long v31 = v59;
          if (!v40) {
            memmove(v55, v26, v60);
          }
          unsigned int v25 = v26;
        }
      }
      else
      {
        uint64_t v55 = v26;
      }
      uint64_t v56 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v55 - 1) = v56;
      uint64_t v32 = v55 - 8;
      unint64_t v26 = v32;
      if (v18 == *(void *)(a1 + 8)) {
        goto LABEL_25;
      }
    }
  }
LABEL_24:
  uint64_t v32 = v26;
LABEL_25:
  uint64_t v33 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v32;
  *(void *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v27;
  if (v33)
  {
    operator delete(v33);
  }
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1EC9CF348;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EC9CF348;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::operator()(uint64_t result)
{
  unsigned __int8 v1 = atomic_load(*(unsigned __int8 **)(result + 8));
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t add = atomic_fetch_add(*(atomic_uint *volatile *)(result + 16), 1u);
    if (add < **(_DWORD **)(result + 24))
    {
      mlir::ParallelDiagnosticHandler::setOrderIDForThread(*(mlir::ParallelDiagnosticHandler **)(result + 32), add);
    }
  }
  return result;
}

uint64_t std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitE"
                     "RS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12ve"
                                "rifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mlir23failableParallelForEachIPPNS_9OperationEZN12_GLOBAL__N_117OperationVerifier12verifyOnExitERS1_E3$_0EENS_13LogicalResultEPNS_11MLIRContextET_SB_OT0_EUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

void *std::__function::__func<mlir::LogicalResult mlir::failableParallelForEach<mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0>(mlir::MLIRContext *,mlir::Operation **,mlir::Operation **,anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&)::{lambda(void)#1},std::allocator<anonymous namespace'::OperationVerifier::verifyOnExit(mlir::Operation&)::$_0 &&>,void ()(void)>::target_type()
{
}

uint64_t mlir::OperationName::mightHaveTrait<mlir::OpTrait::NoTerminator>(void ***a1)
{
  {
    uint64_t v11 = a1;
    a1 = v11;
    if (v3)
    {
      uint64_t v12 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoTerminator<Empty>]";
      unint64_t v13 = 84;
      unint64_t v4 = llvm::StringRef::find((uint64_t *)&v12, "DesiredTypeName = ", 0x12uLL, 0);
      if (v13 >= v4) {
        unint64_t v5 = v4;
      }
      else {
        unint64_t v5 = v13;
      }
      uint64_t v6 = &v12[v5];
      unint64_t v7 = v13 - v5;
      if (v13 - v5 >= 0x12) {
        uint64_t v8 = 18;
      }
      else {
        uint64_t v8 = v13 - v5;
      }
      unint64_t v9 = v7 - v8;
      if (v9 >= v9 - 1) {
        uint64_t v10 = v9 - 1;
      }
      else {
        uint64_t v10 = v9;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v6[v8], v10);
      a1 = v11;
    }
  }
  unsigned __int8 v1 = *a1;
  if (v1[2] == &mlir::detail::TypeIDResolver<void,void>::id) {
    return 1;
  }
  else {
    return (*((uint64_t (**)(void **, uint64_t))*v1 + 4))(v1, mlir::detail::TypeIDResolver<mlir::OpTrait::NoTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoTerminator>(void)::Empty>,void>::resolveTypeID(void)::id);
  }
}

uint64_t mlir::ForwardIterator::makeIterable(mlir::ForwardIterator *this, mlir::Operation *a2)
{
  unint64_t v2 = *((unsigned int *)this + 11);
  if ((v2 & 0x7FFFFF) != 0) {
    return (uint64_t)this
  }
         + 32 * *((unsigned int *)this + 10)
         + 16 * ((v2 >> 23) & 1)
         + ((v2 >> 21) & 0x7F8)
         + 64;
  else {
    return 0;
  }
}

uint64_t mlir::detail::walk(uint64_t a1, void (*a2)(uint64_t, uint64_t, int *), uint64_t a3)
{
  unint64_t v6 = *(unsigned int *)(a1 + 44);
  int v14 = v6 & 0x7FFFFF;
  int v15 = 0;
  if ((v6 & 0x7FFFFF) != 0)
  {
    unint64_t v7 = ((a1 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
       + 32 * *(unsigned int *)(a1 + 40);
    unint64_t v8 = v7 + 24 * (v6 & 0x7FFFFF);
    do
    {
      a2(a3, a1, &v14);
      ++v15;
      for (uint64_t i = *(void *)(v7 + 8); i != v7; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v10 = i - 8;
        if (!i) {
          uint64_t v10 = 0;
        }
        uint64_t v11 = (mlir::GenericProgramPoint *)(v10 + 32);
        uint64_t v12 = *(mlir::GenericProgramPoint **)(v10 + 40);
        if (v12 != (mlir::GenericProgramPoint *)(v10 + 32))
        {
          do
          {
            mlir::GenericProgramPoint::~GenericProgramPoint(v12);
            mlir::detail::walk();
            uint64_t v12 = (mlir::GenericProgramPoint *)*((void *)v12 + 1);
          }
          while (v12 != v11);
        }
      }
      v7 += 24;
    }
    while (v7 != v8);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, int *))a2)(a3, a1, &v14);
}

uint64_t mlir::ConstantIntRanges::umax(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 16;
}

uint64_t mlir::ConstantIntRanges::smin(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 32;
}

uint64_t mlir::ConstantIntRanges::smax(mlir::ConstantIntRanges *this)
{
  return (uint64_t)this + 48;
}

uint64_t mlir::ConstantIntRanges::getStorageBitwidth(uint64_t a1)
{
  uint64_t v5 = a1;
  if (mlir::Type::isIndex((mlir::Type *)&v5)) {
    return 64;
  }
  uint64_t v2 = v5;
  int v3 = *(void **)(*(void *)v5 + 136);
  if (v3 != &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    uint64_t v2 = 0;
  }
  uint64_t v4 = v2;
  if (v3 == &mlir::detail::TypeIDResolver<mlir::IntegerType,void>::id) {
    return mlir::IntegerType::getWidth((mlir::IntegerType *)&v4);
  }
  else {
    return 0;
  }
}

void mlir::ConstantIntRanges::maxRange(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v2 = this;
  unsigned int v8 = this;
  if (this > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v7, 0, 0);
    unsigned int v6 = v2;
    llvm::APInt::initSlowCase((llvm::APInt *)&__p, -1, 1);
  }
  else
  {
    unint64_t v7 = 0;
    unsigned int v6 = this;
    uint64_t v4 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)this);
    if (!this) {
      uint64_t v4 = 0;
    }
    std::string __p = v4;
  }
  mlir::ConstantIntRanges::fromUnsigned((mlir::ConstantIntRanges *)&v7, (const llvm::APInt *)&__p, a2);
  if (v6 >= 0x41 && __p) {
    operator delete[](__p);
  }
  if (v8 >= 0x41)
  {
    if (v7) {
      operator delete[](v7);
    }
  }
}

void mlir::ConstantIntRanges::fromUnsigned(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v37 = 1;
  uint64_t v36 = 0;
  unsigned int v35 = 1;
  std::string __p = 0;
  char v8 = v7 - 1;
  uint64_t v9 = (v7 - 1) >> 6;
  uint64_t v10 = (mlir::ConstantIntRanges *)(*(void *)this + 8 * v9);
  if (v7 < 0x41) {
    uint64_t v10 = this;
  }
  uint64_t v11 = 1 << v8;
  BOOL v12 = (*(void *)v10 & (1 << v8)) == 0;
  unsigned int v13 = *((_DWORD *)a2 + 2);
  char v14 = v13 - 1;
  if (v13 >= 0x41) {
    int v15 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v13 - 1) >> 6));
  }
  else {
    int v15 = a2;
  }
  if ((v12 ^ (((*(void *)v15 >> v14) & 1) == 0)))
  {
    unsigned int v33 = v7;
    if (v7 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v32, 0, 0);
      if (v33 > 0x40)
      {
        *(void *)(v32 + 8 * v9) |= v11;
        if (v37 < 0x41) {
          goto LABEL_34;
        }
LABEL_32:
        if (v36) {
          operator delete[](v36);
        }
LABEL_34:
        uint64_t v36 = (void *)v32;
        unsigned int v37 = v33;
        unsigned int v33 = v7;
        if (v7 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v32, -1, 1);
          if (v33 > 0x40)
          {
            *(void *)(v32 + 8 * v9) &= ~v11;
            if (v35 < 0x41)
            {
LABEL_44:
              std::string __p = (void *)v32;
              unsigned int v19 = v33;
              goto LABEL_45;
            }
LABEL_42:
            if (__p) {
              operator delete[](__p);
            }
            goto LABEL_44;
          }
        }
        else
        {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
          if (!v7) {
            unint64_t v27 = 0;
          }
          unint64_t v32 = v27;
        }
        v32 &= ~v11;
        if (v35 < 0x41) {
          goto LABEL_44;
        }
        goto LABEL_42;
      }
    }
    else
    {
      unint64_t v32 = 0;
    }
    v32 |= v11;
    if (v37 < 0x41) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if ((int)llvm::APInt::compareSigned(this, a2) >= 0) {
    int64_t v16 = a2;
  }
  else {
    int64_t v16 = this;
  }
  unsigned int v17 = *((_DWORD *)v16 + 2);
  if (v17 > 0x40)
  {
    llvm::APInt::assignSlowCase((llvm::APInt *)&v36, v16);
    if ((int)llvm::APInt::compareSigned(this, a2) <= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = this;
    }
  }
  else
  {
    uint64_t v36 = *(void **)v16;
    unsigned int v37 = v17;
    if ((int)llvm::APInt::compareSigned(this, a2) <= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = this;
    }
  }
  unsigned int v19 = *((_DWORD *)v18 + 2);
  if (v19 > 0x40)
  {
    llvm::APInt::assignSlowCase((llvm::APInt *)&__p, v18);
    unsigned int v20 = *((_DWORD *)this + 2);
    a3[2] = v20;
    if (v20 <= 0x40) {
      goto LABEL_46;
    }
LABEL_25:
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)this);
    uint64_t v21 = (llvm::APInt *)(a3 + 4);
    unsigned int v22 = *((_DWORD *)a2 + 2);
    a3[6] = v22;
    if (v22 <= 0x40) {
      goto LABEL_47;
    }
LABEL_26:
    llvm::APInt::initSlowCase(v21, (const void **)a2);
    uint64_t v23 = (llvm::APInt *)(a3 + 8);
    unsigned int v24 = v37;
    a3[10] = v37;
    if (v24 <= 0x40) {
      goto LABEL_48;
    }
    goto LABEL_27;
  }
  std::string __p = *(void **)v18;
LABEL_45:
  unsigned int v35 = v19;
  unsigned int v28 = *((_DWORD *)this + 2);
  a3[2] = v28;
  if (v28 > 0x40) {
    goto LABEL_25;
  }
LABEL_46:
  *(void *)a3 = *(void *)this;
  uint64_t v21 = (llvm::APInt *)(a3 + 4);
  unsigned int v29 = *((_DWORD *)a2 + 2);
  a3[6] = v29;
  if (v29 > 0x40) {
    goto LABEL_26;
  }
LABEL_47:
  *(void *)uint64_t v21 = *(void *)a2;
  uint64_t v23 = (llvm::APInt *)(a3 + 8);
  unsigned int v30 = v37;
  a3[10] = v37;
  if (v30 <= 0x40)
  {
LABEL_48:
    *(void *)uint64_t v23 = v36;
    unsigned int v25 = (llvm::APInt *)(a3 + 12);
    unsigned int v31 = v35;
    a3[14] = v35;
    if (v31 <= 0x40) {
      goto LABEL_49;
    }
    goto LABEL_28;
  }
LABEL_27:
  llvm::APInt::initSlowCase(v23, (const void **)&v36);
  unsigned int v25 = (llvm::APInt *)(a3 + 12);
  unsigned int v26 = v35;
  a3[14] = v35;
  if (v26 <= 0x40)
  {
LABEL_49:
    *(void *)unsigned int v25 = __p;
    goto LABEL_50;
  }
LABEL_28:
  llvm::APInt::initSlowCase(v25, (const void **)&__p);
  if (v35 >= 0x41 && __p) {
    operator delete[](__p);
  }
LABEL_50:
  if (v37 >= 0x41)
  {
    if (v36) {
      operator delete[](v36);
    }
  }
}

llvm::APInt *mlir::ConstantIntRanges::constant@<X0>(mlir::ConstantIntRanges *this@<X0>, _DWORD *a2@<X8>)
{
  unsigned int v5 = *((_DWORD *)this + 2);
  a2[2] = v5;
  if (v5 <= 0x40)
  {
    *(void *)a2 = *(void *)this;
    a2[6] = v5;
LABEL_4:
    *((void *)a2 + 2) = *(void *)this;
    a2[10] = v5;
LABEL_5:
    *((void *)a2 + 4) = *(void *)this;
    __n128 result = (llvm::APInt *)(a2 + 12);
    a2[14] = v5;
LABEL_6:
    *(void *)__n128 result = *(void *)this;
    return result;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)a2, (const void **)this);
  unsigned int v5 = *((_DWORD *)this + 2);
  a2[6] = v5;
  if (v5 <= 0x40) {
    goto LABEL_4;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 4), (const void **)this);
  unsigned int v5 = *((_DWORD *)this + 2);
  a2[10] = v5;
  if (v5 <= 0x40) {
    goto LABEL_5;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)(a2 + 8), (const void **)this);
  unsigned int v7 = *((_DWORD *)this + 2);
  __n128 result = (llvm::APInt *)(a2 + 12);
  a2[14] = v7;
  if (v7 <= 0x40) {
    goto LABEL_6;
  }

  return (llvm::APInt *)llvm::APInt::initSlowCase(result, (const void **)this);
}

void mlir::ConstantIntRanges::range(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, const llvm::APInt *x2_0@<X2>, _DWORD *a3@<X8>)
{
  if (x2_0) {
    mlir::ConstantIntRanges::fromSigned(this, a2, a3);
  }
  else {
    mlir::ConstantIntRanges::fromUnsigned(this, a2, a3);
  }
}

void mlir::ConstantIntRanges::fromSigned(mlir::ConstantIntRanges *this@<X0>, const llvm::APInt *a2@<X1>, _DWORD *a3@<X8>)
{
  unsigned int v7 = *((_DWORD *)this + 2);
  unsigned int v35 = 1;
  std::string __p = 0;
  unsigned int v33 = 1;
  unint64_t v32 = 0;
  char v8 = (mlir::ConstantIntRanges *)(*(void *)this + 8 * ((v7 - 1) >> 6));
  if (v7 < 0x41) {
    char v8 = this;
  }
  BOOL v9 = ((*(void *)v8 >> (v7 - 1)) & 1) == 0;
  unsigned int v10 = *((_DWORD *)a2 + 2);
  char v11 = v10 - 1;
  if (v10 >= 0x41) {
    BOOL v12 = (const llvm::APInt *)(*(void *)a2 + 8 * ((v10 - 1) >> 6));
  }
  else {
    BOOL v12 = a2;
  }
  if (((v9 ^ (((*(void *)v12 >> v11) & 1) == 0)) & 1) == 0)
  {
    if ((int)llvm::APInt::compare(this, a2) >= 0) {
      char v14 = a2;
    }
    else {
      char v14 = this;
    }
    unsigned int v15 = *((_DWORD *)v14 + 2);
    if (v15 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&__p, v14);
      if ((int)llvm::APInt::compare(this, a2) <= 0) {
        int64_t v16 = a2;
      }
      else {
        int64_t v16 = this;
      }
    }
    else
    {
      std::string __p = *(void **)v14;
      unsigned int v35 = v15;
      if ((int)llvm::APInt::compare(this, a2) <= 0) {
        int64_t v16 = a2;
      }
      else {
        int64_t v16 = this;
      }
    }
    unsigned int v18 = *((_DWORD *)v16 + 2);
    if (v18 > 0x40)
    {
      llvm::APInt::assignSlowCase((llvm::APInt *)&v32, v16);
      unsigned int v26 = v35;
      a3[2] = v35;
      if (v26 <= 0x40) {
        goto LABEL_37;
      }
    }
    else
    {
      unint64_t v32 = *(void **)v16;
      unsigned int v33 = v18;
      unsigned int v19 = v35;
      a3[2] = v35;
      if (v19 <= 0x40) {
        goto LABEL_37;
      }
    }
LABEL_31:
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)&__p);
    unsigned int v20 = (llvm::APInt *)(a3 + 4);
    unsigned int v21 = v33;
    a3[6] = v33;
    if (v21 <= 0x40) {
      goto LABEL_38;
    }
LABEL_32:
    llvm::APInt::initSlowCase(v20, (const void **)&v32);
    unsigned int v22 = (llvm::APInt *)(a3 + 8);
    unsigned int v23 = *((_DWORD *)this + 2);
    a3[10] = v23;
    if (v23 <= 0x40) {
      goto LABEL_39;
    }
LABEL_33:
    llvm::APInt::initSlowCase(v22, (const void **)this);
    unsigned int v24 = (llvm::APInt *)(a3 + 12);
    unsigned int v25 = *((_DWORD *)a2 + 2);
    a3[14] = v25;
    if (v25 <= 0x40) {
      goto LABEL_40;
    }
LABEL_34:
    llvm::APInt::initSlowCase(v24, (const void **)a2);
    if (v33 < 0x41) {
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  unsigned int v31 = v7;
  if (v7 >= 0x41)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
    if (v35 >= 0x41 && __p) {
      operator delete[](__p);
    }
    std::string __p = v30;
    unsigned int v35 = v31;
    unsigned int v31 = v7;
    llvm::APInt::initSlowCase((llvm::APInt *)&v30, -1, 1);
    if (v33 >= 0x41 && v32) {
      operator delete[](v32);
    }
  }
  else
  {
    std::string __p = 0;
    unsigned int v35 = v31;
    unsigned int v31 = v7;
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7) {
      unint64_t v13 = 0;
    }
    unsigned int v30 = (void *)v13;
  }
  unint64_t v32 = v30;
  unsigned int v33 = v31;
  unsigned int v17 = v35;
  a3[2] = v35;
  if (v17 > 0x40) {
    goto LABEL_31;
  }
LABEL_37:
  *(void *)a3 = __p;
  unsigned int v20 = (llvm::APInt *)(a3 + 4);
  unsigned int v27 = v33;
  a3[6] = v33;
  if (v27 > 0x40) {
    goto LABEL_32;
  }
LABEL_38:
  *(void *)unsigned int v20 = v32;
  unsigned int v22 = (llvm::APInt *)(a3 + 8);
  unsigned int v28 = *((_DWORD *)this + 2);
  a3[10] = v28;
  if (v28 > 0x40) {
    goto LABEL_33;
  }
LABEL_39:
  *(void *)unsigned int v22 = *(void *)this;
  unsigned int v24 = (llvm::APInt *)(a3 + 12);
  unsigned int v29 = *((_DWORD *)a2 + 2);
  a3[14] = v29;
  if (v29 > 0x40) {
    goto LABEL_34;
  }
LABEL_40:
  *(void *)unsigned int v24 = *(void *)a2;
  if (v33 < 0x41) {
    goto LABEL_43;
  }
LABEL_41:
  if (v32) {
    operator delete[](v32);
  }
LABEL_43:
  if (v35 >= 0x41)
  {
    if (__p) {
      operator delete[](__p);
    }
  }
}

llvm::APInt *mlir::ConstantIntRanges::rangeUnion@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)this;
    unsigned int v19 = (llvm::APInt *)(a3 + 4);
    unsigned int v20 = (const void **)((char *)this + 16);
    unsigned int v21 = *((_DWORD *)this + 6);
    a3[6] = v21;
    if (v21 > 0x40)
    {
      llvm::APInt::initSlowCase(v19, v20);
      unsigned int v22 = (llvm::APInt *)(a3 + 8);
      unsigned int v23 = (const void **)((char *)this + 32);
      unsigned int v35 = *((_DWORD *)this + 10);
      a3[10] = v35;
      if (v35 > 0x40) {
        goto LABEL_19;
      }
    }
    else
    {
      *(void *)unsigned int v19 = *v20;
      unsigned int v22 = (llvm::APInt *)(a3 + 8);
      unsigned int v23 = (const void **)((char *)this + 32);
      unsigned int v24 = *((_DWORD *)this + 10);
      a3[10] = v24;
      if (v24 > 0x40)
      {
LABEL_19:
        llvm::APInt::initSlowCase(v22, v23);
        goto LABEL_29;
      }
    }
    *(void *)unsigned int v22 = *v23;
LABEL_29:
    __n128 result = (llvm::APInt *)(a3 + 12);
    unsigned int v18 = (const void **)((char *)this + 48);
    unsigned int v36 = *((_DWORD *)this + 14);
    a3[14] = v36;
    if (v36 > 0x40) {
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)a2;
    unsigned int v25 = (llvm::APInt *)(a3 + 4);
    unsigned int v26 = (const void **)((char *)a2 + 16);
    unsigned int v27 = *((_DWORD *)a2 + 6);
    a3[6] = v27;
    if (v27 > 0x40)
    {
      llvm::APInt::initSlowCase(v25, v26);
      unsigned int v28 = (llvm::APInt *)(a3 + 8);
      unsigned int v29 = (const void **)((char *)a2 + 32);
      unsigned int v37 = *((_DWORD *)a2 + 10);
      a3[10] = v37;
      if (v37 > 0x40) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)unsigned int v25 = *v26;
      unsigned int v28 = (llvm::APInt *)(a3 + 8);
      unsigned int v29 = (const void **)((char *)a2 + 32);
      unsigned int v30 = *((_DWORD *)a2 + 10);
      a3[10] = v30;
      if (v30 > 0x40)
      {
LABEL_22:
        llvm::APInt::initSlowCase(v28, v29);
        goto LABEL_34;
      }
    }
    *(void *)unsigned int v28 = *v29;
LABEL_34:
    __n128 result = (llvm::APInt *)(a3 + 12);
    unsigned int v18 = (const void **)((char *)a2 + 48);
    unsigned int v38 = *((_DWORD *)a2 + 14);
    a3[14] = v38;
    if (v38 > 0x40) {
      goto LABEL_35;
    }
LABEL_30:
    unint64_t v34 = *v18;
    goto LABEL_31;
  }
  if ((int)llvm::APInt::compare(this, a2) >= 0) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = this;
  }
  unsigned int v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) > 0)unsigned int v7 = (char *)this + 16; {
  char v8 = (char *)this + 32;
  }
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) >= 0)char v8 = (char *)a2 + 32; {
  BOOL v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  }
  unsigned int v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) > 0) {
    unsigned int v10 = v9;
  }
  unsigned int v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)v6);
    BOOL v12 = (llvm::APInt *)(a3 + 4);
    unsigned int v31 = *((_DWORD *)v7 + 2);
    a3[6] = v31;
    if (v31 > 0x40)
    {
LABEL_14:
      llvm::APInt::initSlowCase(v12, (const void **)v7);
      char v14 = (llvm::APInt *)(a3 + 8);
      unsigned int v15 = *((_DWORD *)v8 + 2);
      a3[10] = v15;
      if (v15 > 0x40) {
        goto LABEL_15;
      }
LABEL_25:
      *(void *)char v14 = *(void *)v8;
      __n128 result = (llvm::APInt *)(a3 + 12);
      unsigned int v33 = *((_DWORD *)v10 + 2);
      a3[14] = v33;
      if (v33 > 0x40) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else
  {
    *(void *)a3 = *(void *)v6;
    BOOL v12 = (llvm::APInt *)(a3 + 4);
    unsigned int v13 = *((_DWORD *)v7 + 2);
    a3[6] = v13;
    if (v13 > 0x40) {
      goto LABEL_14;
    }
  }
  *(void *)BOOL v12 = *(void *)v7;
  char v14 = (llvm::APInt *)(a3 + 8);
  unsigned int v32 = *((_DWORD *)v8 + 2);
  a3[10] = v32;
  if (v32 <= 0x40) {
    goto LABEL_25;
  }
LABEL_15:
  llvm::APInt::initSlowCase(v14, (const void **)v8);
  __n128 result = (llvm::APInt *)(a3 + 12);
  unsigned int v17 = *((_DWORD *)v10 + 2);
  a3[14] = v17;
  if (v17 <= 0x40)
  {
LABEL_26:
    unint64_t v34 = *(const void **)v10;
LABEL_31:
    *(void *)__n128 result = v34;
    return result;
  }
LABEL_16:
  unsigned int v18 = (const void **)v10;
LABEL_35:

  return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
}

llvm::APInt *mlir::ConstantIntRanges::intersection@<X0>(mlir::ConstantIntRanges *this@<X0>, const mlir::ConstantIntRanges *a2@<X1>, _DWORD *a3@<X8>)
{
  if (!*((_DWORD *)this + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)this;
    unsigned int v19 = (llvm::APInt *)(a3 + 4);
    unsigned int v20 = (const void **)((char *)this + 16);
    unsigned int v21 = *((_DWORD *)this + 6);
    a3[6] = v21;
    if (v21 > 0x40)
    {
      llvm::APInt::initSlowCase(v19, v20);
      unsigned int v22 = (llvm::APInt *)(a3 + 8);
      unsigned int v23 = (const void **)((char *)this + 32);
      unsigned int v35 = *((_DWORD *)this + 10);
      a3[10] = v35;
      if (v35 > 0x40) {
        goto LABEL_19;
      }
    }
    else
    {
      *(void *)unsigned int v19 = *v20;
      unsigned int v22 = (llvm::APInt *)(a3 + 8);
      unsigned int v23 = (const void **)((char *)this + 32);
      unsigned int v24 = *((_DWORD *)this + 10);
      a3[10] = v24;
      if (v24 > 0x40)
      {
LABEL_19:
        llvm::APInt::initSlowCase(v22, v23);
        goto LABEL_29;
      }
    }
    *(void *)unsigned int v22 = *v23;
LABEL_29:
    __n128 result = (llvm::APInt *)(a3 + 12);
    unsigned int v18 = (const void **)((char *)this + 48);
    unsigned int v36 = *((_DWORD *)this + 14);
    a3[14] = v36;
    if (v36 > 0x40) {
      goto LABEL_35;
    }
    goto LABEL_30;
  }
  if (!*((_DWORD *)a2 + 2))
  {
    a3[2] = 0;
    *(void *)a3 = *(void *)a2;
    unsigned int v25 = (llvm::APInt *)(a3 + 4);
    unsigned int v26 = (const void **)((char *)a2 + 16);
    unsigned int v27 = *((_DWORD *)a2 + 6);
    a3[6] = v27;
    if (v27 > 0x40)
    {
      llvm::APInt::initSlowCase(v25, v26);
      unsigned int v28 = (llvm::APInt *)(a3 + 8);
      unsigned int v29 = (const void **)((char *)a2 + 32);
      unsigned int v37 = *((_DWORD *)a2 + 10);
      a3[10] = v37;
      if (v37 > 0x40) {
        goto LABEL_22;
      }
    }
    else
    {
      *(void *)unsigned int v25 = *v26;
      unsigned int v28 = (llvm::APInt *)(a3 + 8);
      unsigned int v29 = (const void **)((char *)a2 + 32);
      unsigned int v30 = *((_DWORD *)a2 + 10);
      a3[10] = v30;
      if (v30 > 0x40)
      {
LABEL_22:
        llvm::APInt::initSlowCase(v28, v29);
        goto LABEL_34;
      }
    }
    *(void *)unsigned int v28 = *v29;
LABEL_34:
    __n128 result = (llvm::APInt *)(a3 + 12);
    unsigned int v18 = (const void **)((char *)a2 + 48);
    unsigned int v38 = *((_DWORD *)a2 + 14);
    a3[14] = v38;
    if (v38 > 0x40) {
      goto LABEL_35;
    }
LABEL_30:
    unint64_t v34 = *v18;
    goto LABEL_31;
  }
  if ((int)llvm::APInt::compare(this, a2) <= 0) {
    unsigned int v6 = a2;
  }
  else {
    unsigned int v6 = this;
  }
  unsigned int v7 = (char *)a2 + 16;
  if ((int)llvm::APInt::compare((mlir::ConstantIntRanges *)((char *)this + 16), (const mlir::ConstantIntRanges *)((char *)a2 + 16)) < 0)unsigned int v7 = (char *)this + 16; {
  char v8 = (char *)this + 32;
  }
  if ((int)llvm::APInt::compareSigned((mlir::ConstantIntRanges *)((char *)this + 32), (const mlir::ConstantIntRanges *)((char *)a2 + 32)) <= 0)char v8 = (char *)a2 + 32; {
  BOOL v9 = (mlir::ConstantIntRanges *)((char *)this + 48);
  }
  unsigned int v10 = (const mlir::ConstantIntRanges *)((char *)a2 + 48);
  if ((int)llvm::APInt::compareSigned(v9, v10) < 0) {
    unsigned int v10 = v9;
  }
  unsigned int v11 = *((_DWORD *)v6 + 2);
  a3[2] = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)v6);
    BOOL v12 = (llvm::APInt *)(a3 + 4);
    unsigned int v31 = *((_DWORD *)v7 + 2);
    a3[6] = v31;
    if (v31 > 0x40)
    {
LABEL_14:
      llvm::APInt::initSlowCase(v12, (const void **)v7);
      char v14 = (llvm::APInt *)(a3 + 8);
      unsigned int v15 = *((_DWORD *)v8 + 2);
      a3[10] = v15;
      if (v15 > 0x40) {
        goto LABEL_15;
      }
LABEL_25:
      *(void *)char v14 = *(void *)v8;
      __n128 result = (llvm::APInt *)(a3 + 12);
      unsigned int v33 = *((_DWORD *)v10 + 2);
      a3[14] = v33;
      if (v33 > 0x40) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }
  else
  {
    *(void *)a3 = *(void *)v6;
    BOOL v12 = (llvm::APInt *)(a3 + 4);
    unsigned int v13 = *((_DWORD *)v7 + 2);
    a3[6] = v13;
    if (v13 > 0x40) {
      goto LABEL_14;
    }
  }
  *(void *)BOOL v12 = *(void *)v7;
  char v14 = (llvm::APInt *)(a3 + 8);
  unsigned int v32 = *((_DWORD *)v8 + 2);
  a3[10] = v32;
  if (v32 <= 0x40) {
    goto LABEL_25;
  }
LABEL_15:
  llvm::APInt::initSlowCase(v14, (const void **)v8);
  __n128 result = (llvm::APInt *)(a3 + 12);
  unsigned int v17 = *((_DWORD *)v10 + 2);
  a3[14] = v17;
  if (v17 <= 0x40)
  {
LABEL_26:
    unint64_t v34 = *(const void **)v10;
LABEL_31:
    *(void *)__n128 result = v34;
    return result;
  }
LABEL_16:
  unsigned int v18 = (const void **)v10;
LABEL_35:

  return (llvm::APInt *)llvm::APInt::initSlowCase(result, v18);
}

uint64_t mlir::ConstantIntRanges::getConstantValue@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = this;
  unsigned int v4 = *(_DWORD *)(this + 8);
  if (v4 > 0x40)
  {
    this = llvm::APInt::equalSlowCase((const void **)this, (const void **)(this + 16));
    if (this)
    {
      *(_DWORD *)(a2 + 8) = v4;
      unsigned int v7 = (llvm::APInt *)a2;
      char v8 = (const void **)v2;
LABEL_17:
      this = (uint64_t)llvm::APInt::initSlowCase(v7, v8);
      *(unsigned char *)(a2 + 16) = 1;
      return this;
    }
  }
  else
  {
    unsigned int v5 = *(const void **)this;
    if (v4) {
      BOOL v6 = v5 == *(const void **)(this + 16);
    }
    else {
      BOOL v6 = 0;
    }
    if (v6)
    {
      *(_DWORD *)(a2 + 8) = v4;
LABEL_14:
      *(void *)a2 = v5;
      *(unsigned char *)(a2 + 16) = 1;
      return this;
    }
  }
  BOOL v9 = (const void **)(v2 + 32);
  unsigned int v10 = (const void **)(v2 + 48);
  unsigned int v11 = *(_DWORD *)(v2 + 40);
  if (v11 <= 0x40)
  {
    if (v11)
    {
      unsigned int v5 = *v9;
      if (*v9 == *v10)
      {
        *(_DWORD *)(a2 + 8) = v11;
        goto LABEL_14;
      }
    }
    goto LABEL_18;
  }
  this = llvm::APInt::equalSlowCase(v9, v10);
  if (this)
  {
    *(_DWORD *)(a2 + 8) = v11;
    unsigned int v7 = (llvm::APInt *)a2;
    char v8 = v9;
    goto LABEL_17;
  }
LABEL_18:
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return this;
}

uint64_t mlir::InferTypeOpInterface::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t mlir::detail::verifyInferredResultTypes(mlir::detail *this, mlir::Operation *a2)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 9);
  unsigned int v4 = (char *)this - 16;
  if (!v3) {
    unsigned int v4 = 0;
  }
  int64_t v65 = v4;
  uint64_t v66 = v3;
  mlir::OperandRange::getTypes((uint64_t *)&v65, &v51);
  int64_t v65 = (char *)v67;
  uint64_t v66 = 0x400000000;
  uint64_t v5 = v51;
  uint64_t v6 = (uint64_t)v52;
  uint64_t v8 = v53;
  unsigned int v7 = v54;
  int v9 = v54 - v52;
  if ((unint64_t)((unsigned char *)v54 - v52) < 5)
  {
    int v10 = 0;
    BOOL v11 = v51 != v53;
    if (v54 != v52) {
      goto LABEL_9;
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, v67, (unsigned char *)v54 - v52, 8);
    int v10 = v66;
    BOOL v11 = v5 != v8;
    if (v7 != (void *)v6) {
      goto LABEL_9;
    }
  }
  if (!v11)
  {
    LODWORD(v66) = v10 + v9;
    goto LABEL_13;
  }
LABEL_9:
  BOOL v12 = (unint64_t *)&v65[8 * v10];
  if (v11)
  {
    while (1)
      *v12++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  }
  do
    *v12++ = *(void *)(mlir::detail::OpResultImpl::getNextResultAtOffset(v5, v6++) + 8) & 0xFFFFFFFFFFFFFFF8;
  while (v7 != (void *)v6);
  LODWORD(v66) = v66 + v9;
  if (!this) {
    goto LABEL_50;
  }
LABEL_13:
  uint64_t v13 = *((void *)this + 6);
  char v14 = *(void **)(v13 + 16);
  BOOL v15 = v14 == &mlir::detail::TypeIDResolver<void,void>::id;
  if (v14 == &mlir::detail::TypeIDResolver<void,void>::id) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = *((void *)this + 6);
  }
  if (v15)
  {
    uint64_t v51 = *(void *)(v13 + 8);
    uint64_t Values = mlir::SparseElementsAttr::getValues((mlir::SparseElementsAttr *)&v51);
    if (Values)
    {
      uint64_t v20 = v13;
      goto LABEL_21;
    }
LABEL_50:
    uint64_t v18 = 0;
    uint64_t Context = mlir::Attribute::getContext((mlir::detail *)((char *)this + 24));
    uint64_t v22 = *((void *)this + 3);
    if ((*((unsigned char *)this + 46) & 0x80) != 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
  unint64_t v17 = v16 | v13 & 0xFFFFFFFFFFFFFF00;
  uint64_t v18 = mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(v17 + 32);
  if (v18) {
    goto LABEL_22;
  }
  uint64_t Values = *(void *)(v17 + 24);
  uint64_t v20 = *((void *)this + 6);
LABEL_21:
  uint64_t v18 = mlir::Dialect::getRegisteredInterfaceForOp<mlir::InferTypeOpInterface>(Values, v20);
LABEL_22:
  uint64_t Context = mlir::Attribute::getContext((mlir::detail *)((char *)this + 24));
  uint64_t v22 = *((void *)this + 3);
  if ((*((unsigned char *)this + 46) & 0x80) != 0)
  {
LABEL_23:
    uint64_t v23 = *((void *)this + 9);
    unint64_t v24 = *((unsigned int *)this + 17);
    goto LABEL_24;
  }
LABEL_51:
  uint64_t v23 = 0;
  unint64_t v24 = 0;
LABEL_24:
  mlir::ValueRange::ValueRange(v64, v23, v24);
  uint64_t v25 = *((void *)this + 7);
  unint64_t v26 = *((unsigned int *)this + 11);
  if (HIBYTE(*((_DWORD *)this + 11))) {
    unsigned int v27 = (char *)this + 16 * ((v26 >> 23) & 1) + 64;
  }
  else {
    unsigned int v27 = 0;
  }
  unint64_t v28 = v26 & 0x7FFFFF;
  if ((v26 & 0x7FFFFF) != 0)
  {
    uint64_t v29 = (((unint64_t)this + 16 * ((v26 >> 23) & 1) + ((v26 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
        + 32 * *((unsigned int *)this + 10);
  }
  else
  {
    uint64_t v29 = 0;
    unint64_t v28 = 0;
  }
  mlir::ValueRange::ValueRange(&v63, v29, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, char *))(v18 + 8))(Context, v22, 1, v64[0], v64[1], v25, v27);
  if (!(_BYTE)v30)
  {
    __int16 v47 = 257;
    mlir::Operation::emitOpError((uint64_t *)this, &v46, (uint64_t)&v51);
    if (v51)
    {
      int v48 = 3;
      unint64_t v49 = "failed to infer returned types";
      uint64_t v50 = 30;
      unsigned int v32 = &v48;
      unsigned int v33 = (char *)v54;
      if (v55 >= v56)
      {
        unint64_t v44 = v55 + 1;
        if (v54 <= &v48 && (char *)v54 + 24 * v55 > (char *)&v48)
        {
          int64_t v45 = (char *)&v48 - (unsigned char *)v54;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v44, 24);
          unsigned int v33 = (char *)v54;
          unsigned int v32 = (int *)((char *)v54 + v45);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, v57, v44, 24);
          unsigned int v32 = &v48;
          unsigned int v33 = (char *)v54;
        }
      }
      unint64_t v34 = &v33[24 * v55];
      long long v35 = *(_OWORD *)v32;
      *((void *)v34 + 2) = *((void *)v32 + 2);
      *(_OWORD *)unint64_t v34 = v35;
      ++v55;
      if (v51) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v51);
      }
    }
    if (v62)
    {
      unsigned int v36 = (void **)__p;
      if (__p)
      {
        unsigned int v37 = v61;
        unsigned int v38 = __p;
        if (v61 != __p)
        {
          do
            unsigned int v37 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v37 - 1);
          while (v37 != v36);
          unsigned int v38 = __p;
        }
        unint64_t v61 = v36;
        operator delete(v38);
      }
      long long v39 = v58;
      if (v58)
      {
        BOOL v40 = v59;
        int64_t v41 = v58;
        if (v59 != v58)
        {
          do
          {
            unint64_t v43 = (void *)*--v40;
            unint64_t v42 = v43;
            *BOOL v40 = 0;
            if (v43) {
              operator delete[](v42);
            }
          }
          while (v40 != v39);
          int64_t v41 = v58;
        }
        unint64_t v59 = v39;
        operator delete(v41);
      }
      if (v54 != v57) {
        free(v54);
      }
    }
  }
  if (v65 != (char *)v67) {
    free(v65);
  }
  return v30;
}

uint64_t mlir::Dialect::getRegisteredInterfaceForOp<mlir::InferTypeOpInterface>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = a1;
    unint64_t v3 = 0x1E8EB8000;
    int v6 = v5;
    uint64_t v2 = a2;
    a1 = v15;
    if (v6)
    {
      uint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v17 = 76;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v17;
      }
      int v9 = &v16[v8];
      unint64_t v10 = v17 - v8;
      if (v17 - v8 >= 0x12) {
        uint64_t v11 = 18;
      }
      else {
        uint64_t v11 = v17 - v8;
      }
      unint64_t v12 = v10 - v11;
      if (v12 >= v12 - 1) {
        uint64_t v13 = v12 - 1;
      }
      else {
        uint64_t v13 = v12;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v9[v11], v13);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = a2;
      a1 = v15;
    }
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 104))(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InterfaceMap::lookup<mlir::InferTypeOpInterface>(uint64_t a1)
{
  unint64_t v1 = 0x1E8EB8000uLL;
  {
    uint64_t v20 = a1;
    unint64_t v1 = 0x1E8EB8000;
    int v12 = v11;
    a1 = v20;
    if (v12)
    {
      unsigned int v21 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v22 = 76;
      unint64_t v13 = llvm::StringRef::find((uint64_t *)&v21, "DesiredTypeName = ", 0x12uLL, 0);
      if (v22 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v22;
      }
      uint64_t v15 = &v21[v14];
      unint64_t v16 = v22 - v14;
      if (v22 - v14 >= 0x12) {
        uint64_t v17 = 18;
      }
      else {
        uint64_t v17 = v22 - v14;
      }
      unint64_t v18 = v16 - v17;
      if (v18 >= v18 - 1) {
        uint64_t v19 = v18 - 1;
      }
      else {
        uint64_t v19 = v18;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v15[v17], v19);
      unint64_t v1 = 0x1E8EB8000;
      a1 = v20;
    }
  }
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(v1 + 3864);
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void *)a1 + 16 * v2;
  do
  {
    unint64_t v6 = v2 >> 1;
    unint64_t v7 = &v4[2 * (v2 >> 1)];
    unint64_t v9 = *v7;
    unint64_t v8 = v7 + 2;
    v2 += ~(v2 >> 1);
    if (v9 < v3) {
      unsigned int v4 = v8;
    }
    else {
      unint64_t v2 = v6;
    }
  }
  while (v2);
  if (v4 != (void *)v5 && *v4 == v3) {
    return v4[1];
  }
  else {
    return 0;
  }
}

const char *mlir::memref::MemRefDialect::initialize(mlir::memref::MemRefDialect *this)
{
  mlir::Dialect::addOperations<mlir::memref::AssumeAlignmentOp,mlir::memref::AtomicRMWOp,mlir::memref::AtomicYieldOp,mlir::memref::CopyOp,mlir::memref::GenericAtomicRMWOp,mlir::memref::LoadOp,mlir::memref::AllocOp,mlir::memref::AllocaOp,mlir::memref::AllocaScopeOp,mlir::memref::AllocaScopeReturnOp,mlir::memref::CastOp,mlir::memref::CollapseShapeOp,mlir::memref::DeallocOp,mlir::memref::DimOp,mlir::memref::DmaStartOp,mlir::memref::DmaWaitOp,mlir::memref::ExpandShapeOp,mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::memref::ExtractStridedMetadataOp,mlir::memref::GetGlobalOp,mlir::memref::GlobalOp,mlir::memref::MemorySpaceCastOp,mlir::memref::PrefetchOp,mlir::memref::RankOp,mlir::memref::ReallocOp,mlir::memref::ReinterpretCastOp,mlir::memref::ReshapeOp,mlir::memref::StoreOp,mlir::memref::TransposeOp,mlir::memref::ViewOp,mlir::memref::SubViewOp>((uint64_t)this);
  unint64_t v2 = (char *)operator new(0x18uLL);
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    uint64_t v15 = v2;
    unint64_t v3 = 0x1E8EB8000;
    int v7 = v6;
    unint64_t v2 = v15;
    if (v7)
    {
      unint64_t v16 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DialectInlinerInterface]";
      unint64_t v17 = 79;
      unint64_t v8 = llvm::StringRef::find((uint64_t *)&v16, "DesiredTypeName = ", 0x12uLL, 0);
      if (v17 >= v8) {
        unint64_t v9 = v8;
      }
      else {
        unint64_t v9 = v17;
      }
      unint64_t v10 = &v16[v9];
      unint64_t v11 = v17 - v9;
      if (v17 - v9 >= 0x12) {
        uint64_t v12 = 18;
      }
      else {
        uint64_t v12 = v17 - v9;
      }
      unint64_t v13 = v11 - v12;
      if (v13 >= v13 - 1) {
        uint64_t v14 = v13 - 1;
      }
      else {
        uint64_t v14 = v13;
      }
      mlir::detail::TypeIDResolver<mlir::DialectInlinerInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v10[v12], v14);
      unint64_t v3 = 0x1E8EB8000;
      unint64_t v2 = v15;
    }
  }
  uint64_t v4 = *(void *)(v3 + 3896);
  *((void *)v2 + 1) = this;
  *((void *)v2 + 2) = v4;
  *(void *)unint64_t v2 = &unk_1EC99AFE0;
  unint64_t v16 = v2;
  mlir::Dialect::addInterface((uint64_t)this, (uint64_t *)&v16);
  __n128 result = v16;
  unint64_t v16 = 0;
  if (result) {
    return (const char *)(*(uint64_t (**)(const char *))(*(void *)result + 8))(result);
  }
  return result;
}

mlir::memref::MemRefDialect *mlir::memref::MemRefDialect::MemRefDialect(mlir::memref::MemRefDialect *this, mlir::MLIRContext *a2)
{
  unint64_t v3 = (void *)mlir::Dialect::Dialect((uint64_t)this, (uint64_t)"memref", 6, (uint64_t)a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::MemRefDialect,void>::id);
  void *v3 = &unk_1EC9CD840;
  uint64_t v4 = (uint64_t *)v3[4];
  if (!mlir::MLIRContext::isDialectLoading(v4, (uint64_t)"arith", 5))
  {
    int v6 = v4;
    mlir::MLIRContext::getOrLoadDialect(v4, (uint64_t)"arith", 5, (uint64_t)&mlir::detail::TypeIDResolver<mlir::arith::ArithDialect,void>::id, (void (*)(uint64_t *__return_ptr, uint64_t))llvm::function_ref<std::unique_ptr<mlir::Dialect> ()(void)>::callback_fn<mlir::arith::ArithDialect * mlir::MLIRContext::getOrLoadDialect<mlir::arith::ArithDialect>(void)::{lambda(void)#1}>, (uint64_t)&v6);
  }
  mlir::memref::MemRefDialect::initialize(this);
  return this;
}

void mlir::memref::MemRefDialect::~MemRefDialect(llvm **this)
{
}

void sub_1804BAACC(void *__p)
{
  operator delete(__p);
}

uint64_t mlir::Dialect::addOperations<mlir::memref::AssumeAlignmentOp,mlir::memref::AtomicRMWOp,mlir::memref::AtomicYieldOp,mlir::memref::CopyOp,mlir::memref::GenericAtomicRMWOp,mlir::memref::LoadOp,mlir::memref::AllocOp,mlir::memref::AllocaOp,mlir::memref::AllocaScopeOp,mlir::memref::AllocaScopeReturnOp,mlir::memref::CastOp,mlir::memref::CollapseShapeOp,mlir::memref::DeallocOp,mlir::memref::DimOp,mlir::memref::DmaStartOp,mlir::memref::DmaWaitOp,mlir::memref::ExpandShapeOp,mlir::memref::ExtractAlignedPointerAsIndexOp,mlir::memref::ExtractStridedMetadataOp,mlir::memref::GetGlobalOp,mlir::memref::GlobalOp,mlir::memref::MemorySpaceCastOp,mlir::memref::PrefetchOp,mlir::memref::RankOp,mlir::memref::ReallocOp,mlir::memref::ReinterpretCastOp,mlir::memref::ReshapeOp,mlir::memref::StoreOp,mlir::memref::TransposeOp,mlir::memref::ViewOp,mlir::memref::SubViewOp>(uint64_t a1)
{
  mlir::RegisteredOperationName::insert<mlir::memref::AssumeAlignmentOp>(a1);
  unint64_t v2 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::Model(v2, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AtomicRMWOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v3 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::AtomicYieldOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::CopyOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::GenericAtomicRMWOp>(a1);
  uint64_t v4 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::Model(v4, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::LoadOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v5 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::Model(v6, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AllocOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v7 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unint64_t v8 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::Model(v8, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::AllocaOp::getAttributeNames(void)::attrNames, 2);
  uint64_t v9 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::AllocaScopeOp>(a1);
  unint64_t v10 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::Model(v10, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v11 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::Model(v12, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v13 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(v14, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::CollapseShapeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v15 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::DeallocOp>(a1);
  unint64_t v16 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::DimOp>::Model(v16, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v17 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::DmaStartOp>(a1);
  mlir::RegisteredOperationName::insert<mlir::memref::DmaWaitOp>(a1);
  unint64_t v18 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExpandShapeOp>::Model(v18, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::ExpandShapeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v19 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExtractAlignedPointerAsIndexOp>::Model(v20, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v21 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  unint64_t v22 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ExtractStridedMetadataOp>::Model(v22, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v23 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  unint64_t v24 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::GetGlobalOp>::Model(v24, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::GetGlobalOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v25 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::GlobalOp>(a1);
  unint64_t v26 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::MemorySpaceCastOp>::Model(v26, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v27 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::PrefetchOp>(a1);
  unint64_t v28 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::RankOp>::Model(v28, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v29 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  mlir::RegisteredOperationName::insert<mlir::memref::ReallocOp>(a1);
  uint64_t v30 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ReinterpretCastOp>::Model(v30, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::ReinterpretCastOp::getAttributeNames(void)::attrNames, 4);
  uint64_t v31 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  unsigned int v32 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ReshapeOp>::Model(v32, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v33 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  unint64_t v34 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::StoreOp>::Model(v34, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::StoreOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v35 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  unsigned int v36 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::TransposeOp>::Model(v36, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::TransposeOp::getAttributeNames(void)::attrNames, 1);
  uint64_t v37 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  unsigned int v38 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::ViewOp>::Model(v38, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, 0, 0);
  uint64_t v39 = (uint64_t)v42;
  unint64_t v42 = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  BOOL v40 = operator new(0x70uLL);
  unint64_t v42 = mlir::RegisteredOperationName::Model<mlir::memref::SubViewOp>::Model(v40, a1);
  mlir::RegisteredOperationName::insert((uint64_t *)&v42, (uint64_t)&mlir::memref::SubViewOp::getAttributeNames(void)::attrNames, 4);
  uint64_t result = (uint64_t)v42;
  unint64_t v42 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AssumeAlignmentOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.assume_alignment", 23, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AssumeAlignmentOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C2B20;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::AssumeAlignmentOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AtomicYieldOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.atomic_yield", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AtomicYieldOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C28C8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::CopyOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.copy", 11, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CopyOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C3228;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::GenericAtomicRMWOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.generic_atomic_rmw", 25, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GenericAtomicRMWOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C2D78;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::AllocaScopeOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.alloca_scope", 19, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C2800;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DeallocOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dealloc", 14, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DeallocOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C3868;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DmaStartOp>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dma_start", 16, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DmaStartOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C2418;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::DmaWaitOp>(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.dma_wait", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::DmaWaitOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C3930;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, 0, 0);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::GlobalOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::SymbolOpInterfaceInterfaceTraits::Model<mlir::memref::GlobalOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.global", 13, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::GlobalOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C37A0;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::GlobalOp::getAttributeNames(void)::attrNames, 6);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::PrefetchOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::PrefetchOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.prefetch", 15, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::PrefetchOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C24E0;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::PrefetchOp::getAttributeNames(void)::attrNames, 3);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::insert<mlir::memref::ReallocOp>(uint64_t a1)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = operator new(0x70uLL);
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::ReallocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(v2, (uint64_t)"memref.realloc", 14, a1, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::ReallocOp,void>::id, (uint64_t)&v9);
  uint64_t v3 = v9;
  if (v10)
  {
    uint64_t v4 = 16 * v10;
    uint64_t v5 = (void **)((char *)v9 + 8);
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v9;
  }
  if (v3 != v11) {
    free(v3);
  }
  *unint64_t v2 = &unk_1EC9C39F8;
  unint64_t v8 = v2;
  mlir::RegisteredOperationName::insert((uint64_t *)&v8, (uint64_t)&mlir::memref::ReallocOp::getAttributeNames(void)::attrNames, 1);
  uint64_t result = (uint64_t)v8;
  unint64_t v8 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  unint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  unint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      int v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    unint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::AssumeAlignmentOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AssumeAlignmentOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AssumeAlignmentOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void **__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AssumeAlignmentOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AssumeAlignmentOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AssumeAlignmentOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AssumeAlignmentOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AssumeAlignmentOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>(a2);
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AssumeAlignmentOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroResults(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::AssumeAlignmentOp::verifyInvariantsImpl((uint64_t **)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::AssumeAlignmentOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::AssumeAlignmentOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.atomic_rmw", 17, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AtomicRMWOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C25A8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::AtomicRMWOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AtomicRMWOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (_DWORD *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AtomicRMWOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AtomicRMWOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AtomicRMWOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AtomicRMWOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AtomicRMWOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicRMWOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes;
  void v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::AtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::arith::AddFOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.atomic_rmw";
  v16[1] = 17;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  mlir::memref::detail::AtomicRMWOpGenericAdaptorBase::AtomicRMWOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::AtomicRMWOp::fold((uint64_t)&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v144 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      uint64_t v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v154 = 81;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      BOOL v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v154 = 104;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      unint64_t v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      unint64_t v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<2>::Impl<Empty>]";
      unint64_t v154 = 97;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      unsigned int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[453];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v154 = 89;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      uint64_t v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v154 = 90;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      unsigned int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3856);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || *(void *)(v17 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AtomicRMWOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)2)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AtomicRMWOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AtomicRMWOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::AtomicRMWOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AtomicYieldOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AtomicYieldOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AtomicYieldOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v176 = 83;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[12];
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    unint64_t v7 = 0x1E8EB8000;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v176 = 82;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      unint64_t v7 = 0x1E8EB8000;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = *(void *)(v7 + 4080);
  uint64_t v9 = &unk_1E8EBA000;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<Empty>]";
      unint64_t v176 = 121;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[129];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v176 = 95;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2776);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v176 = 99;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2912);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3904);
  unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v176 = 84;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v19[7] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  unint64_t v7 = a2;
  mlir::memref::AtomicYieldOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::AtomicYieldOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroResults<mlir::memref::AtomicYieldOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OneOperand<mlir::memref::AtomicYieldOp>,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>,mlir::OpTrait::OpInvariants<mlir::memref::AtomicYieldOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::AtomicYieldOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::AtomicYieldOp>,mlir::OpTrait::IsTerminator<mlir::memref::AtomicYieldOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait((uint64_t *)a1)
    && (uint64_t v9 = a1, mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v9, v6)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl<mlir::memref::AtomicYieldOp>::verifyTrait(uint64_t *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::GenericAtomicRMWOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "memref.generic_atomic_rmw";
  v37[1] = 25;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      unint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    unint64_t v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      unint64_t v46 = v17;
      operator delete(v19);
    }
    int64_t v20 = v43;
    if (v43)
    {
      int v21 = v44;
      unint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *int v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        unint64_t v22 = v43;
      }
      unint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AtomicYieldOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::HasParent<mlir::memref::GenericAtomicRMWOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v12, a2, a3, a4);
  char v9 = v13;
  if (v13 >= 8)
  {
    if ((v13 & 4) != 0)
    {
      if ((v13 & 2) != 0) {
        uint64_t v10 = v12;
      }
      else {
        uint64_t v10 = (llvm **)v12[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v10, v4, v5, v6, v7);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v12[0], v12[1]);
    }
  }
  return v8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CopyOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CopyOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource;
  v2[1] = mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget;
  char v3 = &unk_1E8EBA000;
  {
    unint64_t v12 = v2;
    char v3 = (void *)&unk_1E8EBA000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      char v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[131], v2);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

uint64_t mlir::detail::CopyOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getFilter((mlir::anec::Convolution *)&v3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CopyOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::CopyOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  mlir::memref::detail::CopyOpGenericAdaptorBase::CopyOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::CopyOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v144 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v28 = v27;
    a1 = v144;
    if (v28)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v154 = 83;
      unint64_t v29 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v29) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = v154;
      }
      int v31 = &v153[v30];
      unint64_t v32 = v154 - v30;
      if (v154 - v30 >= 0x12) {
        uint64_t v33 = 18;
      }
      else {
        uint64_t v33 = v154 - v30;
      }
      unint64_t v34 = v32 - v33;
      if (v34 >= v34 - 1) {
        uint64_t v35 = v34 - 1;
      }
      else {
        uint64_t v35 = v34;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v31[v33], v35);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v144;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v136 = v2;
    uint64_t v145 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    uint64_t v2 = v136;
    a1 = v145;
    if (v37)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v154 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v154;
      }
      unsigned int v40 = &v153[v39];
      unint64_t v41 = v154 - v39;
      if (v154 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v154 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v136;
      a1 = v145;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v137 = v2;
    uint64_t v146 = a1;
    uint64_t v129 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v129;
    int v46 = v45;
    uint64_t v2 = v137;
    a1 = v146;
    if (v46)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v154 = 86;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v154;
      }
      int v49 = &v153[v48];
      unint64_t v50 = v154 - v48;
      if (v154 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v154 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v129;
      uint64_t v2 = v137;
      a1 = v146;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v138 = v2;
    uint64_t v147 = a1;
    uint64_t v123 = v6;
    uint64_t v130 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v123;
    uint64_t v4 = v130;
    int v55 = v54;
    uint64_t v2 = v138;
    a1 = v147;
    if (v55)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NOperands<2>::Impl<Empty>]";
      unint64_t v154 = 90;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v154;
      }
      int v58 = &v153[v57];
      unint64_t v59 = v154 - v57;
      if (v154 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v154 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NOperands<2u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NOperands<2u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v123;
      uint64_t v4 = v130;
      uint64_t v2 = v138;
      a1 = v147;
    }
  }
  uint64_t v8 = v7[24];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v139 = v2;
    uint64_t v148 = a1;
    uint64_t v124 = v6;
    uint64_t v131 = v4;
    uint64_t v118 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v118;
    uint64_t v6 = v124;
    uint64_t v4 = v131;
    int v64 = v63;
    uint64_t v2 = v139;
    a1 = v148;
    if (v64)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v154 = 84;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v154;
      }
      int v67 = &v153[v66];
      unint64_t v68 = v154 - v66;
      if (v154 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v154 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v118;
      uint64_t v6 = v124;
      uint64_t v4 = v131;
      uint64_t v2 = v139;
      a1 = v148;
    }
  }
  uint64_t v10 = v9[9];
  uint64_t v11 = &unk_1E8EBA000;
  {
    uint64_t v140 = v2;
    uint64_t v149 = a1;
    uint64_t v125 = v6;
    uint64_t v132 = v4;
    uint64_t v114 = v10;
    uint64_t v119 = v8;
    uint64_t v11 = (void *)&unk_1E8EBA000;
    uint64_t v10 = v114;
    uint64_t v8 = v119;
    uint64_t v6 = v125;
    uint64_t v4 = v132;
    int v73 = v72;
    uint64_t v2 = v140;
    a1 = v149;
    if (v73)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CopyOpInterface::Trait<Empty>]";
      unint64_t v154 = 85;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v154;
      }
      int v76 = &v153[v75];
      unint64_t v77 = v154 - v75;
      if (v154 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v154 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::CopyOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CopyOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v11 = (void *)&unk_1E8EBA000;
      uint64_t v10 = v114;
      uint64_t v8 = v119;
      uint64_t v6 = v125;
      uint64_t v4 = v132;
      uint64_t v2 = v140;
      a1 = v149;
    }
  }
  uint64_t v12 = v11[133];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v141 = v2;
    uint64_t v150 = a1;
    uint64_t v126 = v6;
    uint64_t v133 = v4;
    uint64_t v115 = v10;
    uint64_t v120 = v8;
    uint64_t v111 = v12;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v111;
    uint64_t v10 = v115;
    uint64_t v8 = v120;
    uint64_t v6 = v126;
    uint64_t v4 = v133;
    int v82 = v81;
    uint64_t v2 = v141;
    a1 = v150;
    if (v82)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsElementType<Empty>]";
      unint64_t v154 = 95;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v154;
      }
      int v85 = &v153[v84];
      unint64_t v86 = v154 - v84;
      if (v154 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v154 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsElementType<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsElementType>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v111;
      uint64_t v10 = v115;
      uint64_t v8 = v120;
      uint64_t v6 = v126;
      uint64_t v4 = v133;
      uint64_t v2 = v141;
      a1 = v150;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2040);
  long long v15 = &unk_1E8EBA000;
  {
    uint64_t v142 = v2;
    uint64_t v151 = a1;
    uint64_t v127 = v6;
    uint64_t v134 = v4;
    uint64_t v116 = v10;
    uint64_t v121 = v8;
    uint64_t v109 = v14;
    uint64_t v112 = v12;
    long long v15 = (void *)&unk_1E8EBA000;
    uint64_t v14 = v109;
    uint64_t v12 = v112;
    uint64_t v10 = v116;
    uint64_t v8 = v121;
    uint64_t v6 = v127;
    uint64_t v4 = v134;
    int v91 = v90;
    uint64_t v2 = v142;
    a1 = v151;
    if (v91)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsShape<Empty>]";
      unint64_t v154 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v154;
      }
      int v94 = &v153[v93];
      unint64_t v95 = v154 - v93;
      if (v154 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v154 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      long long v15 = (void *)&unk_1E8EBA000;
      uint64_t v14 = v109;
      uint64_t v12 = v112;
      uint64_t v10 = v116;
      uint64_t v8 = v121;
      uint64_t v6 = v127;
      uint64_t v4 = v134;
      uint64_t v2 = v142;
      a1 = v151;
    }
  }
  uint64_t v16 = v15[135];
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v143 = v2;
    uint64_t v152 = a1;
    uint64_t v128 = v6;
    uint64_t v135 = v4;
    uint64_t v117 = v10;
    uint64_t v122 = v8;
    uint64_t v110 = v14;
    uint64_t v113 = v12;
    uint64_t v108 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v108;
    uint64_t v14 = v110;
    uint64_t v12 = v113;
    uint64_t v10 = v117;
    uint64_t v8 = v122;
    uint64_t v6 = v128;
    uint64_t v4 = v135;
    int v100 = v99;
    uint64_t v2 = v143;
    a1 = v152;
    if (v100)
    {
      uint64_t v153 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v154 = 93;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v153, "DesiredTypeName = ", 0x12uLL, 0);
      if (v154 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v154;
      }
      int v103 = &v153[v102];
      unint64_t v104 = v154 - v102;
      if (v154 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v154 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v108;
      uint64_t v14 = v110;
      uint64_t v12 = v113;
      uint64_t v10 = v117;
      uint64_t v8 = v122;
      uint64_t v6 = v128;
      uint64_t v4 = v135;
      uint64_t v2 = v143;
      a1 = v152;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || *(void *)(v17 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CopyOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CopyOp>,mlir::OpTrait::ZeroResults<mlir::memref::CopyOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CopyOp>,mlir::OpTrait::NOperands<2u>::Impl<mlir::memref::CopyOp>,mlir::OpTrait::OpInvariants<mlir::memref::CopyOp>,mlir::CopyOpInterface::Trait<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsElementType<mlir::memref::CopyOp>,mlir::OpTrait::SameOperandsShape<mlir::memref::CopyOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CopyOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyNOperands(a1, (mlir::Operation *)2)
    && (uint64_t v8 = a1, mlir::memref::CopyOp::verifyInvariantsImpl((uint64_t **)&v8))
    && mlir::OpTrait::impl::verifySameOperandsElementType(a1, v5))
  {
    return mlir::OpTrait::impl::verifySameOperandsShape(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CopyOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::NOperands<2u>::Impl,mlir::OpTrait::OpInvariants,mlir::CopyOpInterface::Trait,mlir::OpTrait::SameOperandsElementType,mlir::OpTrait::SameOperandsShape,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, unsigned int *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::GenericAtomicRMWOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                                  + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    unint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      long long v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        long long v15 = v29;
      }
      unint64_t v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::GenericAtomicRMWOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes;
  void v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::GenericAtomicRMWOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x1E4F143B8];
  int64_t v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.generic_atomic_rmw";
  v16[1] = 25;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::GenericAtomicRMWOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::GenericAtomicRMWOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v176 = 81;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[26];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v176 = 104;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v176 = 97;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[13];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v176 = 83;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[1];
  uint64_t v13 = &unk_1E8EBA000;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = (void *)&unk_1E8EBA000;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AtomicYieldOp>::Impl<Empty>]";
      unint64_t v176 = 136;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = (void *)&unk_1E8EBA000;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[137];
  long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      long long v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = v15[9];
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v176 = 90;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3856);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      BOOL v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      uint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3904) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::GenericAtomicRMWOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(a1, a2))return 0; {
  uint64_t v4 = a1;
  }
  return mlir::memref::GenericAtomicRMWOp::verify((uint64_t **)&v4) != 0;
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::OneRegion<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneResult<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>,mlir::OpTrait::OpInvariants<mlir::memref::GenericAtomicRMWOp>,mlir::InferTypeOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::GenericAtomicRMWOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyOneResult(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    || !mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1))
  {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::GenericAtomicRMWOp::verifyInvariantsImpl((uint64_t **)&v6) != 0;
}

uint64_t mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(unsigned int *)(a1 + 44);
  uint64_t v2 = v1 & 0x7FFFFF;
  if ((v1 & 0x7FFFFF) == 0) {
    return 1;
  }
  uint64_t v3 = 0;
  for (uint64_t i = (void *)(((a1 + 16 * ((v1 >> 23) & 1) + ((v1 >> 21) & 0x7F8) + 71) & 0xFFFFFFFFFFFFFFF8)
                     + 32 * *(unsigned int *)(a1 + 40)); ; i += 3)
  {
    if (i == (void *)*i) {
      goto LABEL_3;
    }
    uint64_t v5 = i[1];
    if (i == (void *)v5 || i != *(void **)(v5 + 8)) {
      break;
    }
    if (*(void *)(v5 + 24) == v5 + 24)
    {
      __int16 v43 = 257;
      mlir::Operation::emitOpError((uint64_t *)a1, v42, (uint64_t)v47);
      if (v47[0])
      {
        int v44 = 3;
        uint64_t v45 = "expects a non-empty block";
        uint64_t v46 = 25;
        uint64_t v6 = &v44;
        uint64_t v7 = (char *)v48;
        if (v49 >= v50)
        {
          unint64_t v38 = v49 + 1;
          if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
          {
            int64_t v41 = (char *)&v44 - (unsigned char *)v48;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            uint64_t v7 = (char *)v48;
            uint64_t v6 = (int *)((char *)v48 + v41);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v38, 24);
            uint64_t v6 = &v44;
            uint64_t v7 = (char *)v48;
          }
        }
        uint64_t v8 = &v7[24 * v49];
        long long v9 = *(_OWORD *)v6;
        *((void *)v8 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
        ++v49;
      }
      uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
      if (v47[0]) {
        mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
      }
      if (v56)
      {
        uint64_t v11 = (void **)__p;
        if (__p)
        {
          uint64_t v12 = v55;
          uint64_t v13 = __p;
          if (v55 != __p)
          {
            do
              uint64_t v12 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v12 - 1);
            while (v12 != v11);
            uint64_t v13 = __p;
          }
          unint64_t v55 = v11;
          operator delete(v13);
        }
        uint64_t v14 = v52;
        if (!v52) {
          goto LABEL_47;
        }
        long long v15 = v53;
        uint64_t v16 = v52;
        if (v53 == v52) {
          goto LABEL_46;
        }
        do
        {
          uint64_t v18 = (void *)*--v15;
          unint64_t v17 = v18;
          *long long v15 = 0;
          if (v18) {
            operator delete[](v17);
          }
        }
        while (v15 != v14);
        goto LABEL_45;
      }
      return v10;
    }
LABEL_3:
    if ((const char *)v2 == ++v3) {
      return 1;
    }
  }
  v42[0] = (const void **)"expects region #";
  __int16 v43 = 259;
  mlir::Operation::emitOpError((uint64_t *)a1, v42, (uint64_t)v47);
  if (v47[0])
  {
    int v44 = 5;
    uint64_t v45 = v3;
    unint64_t v19 = &v44;
    int64_t v20 = (char *)v48;
    if (v49 >= v50)
    {
      unint64_t v35 = v49 + 1;
      if (v48 <= &v44 && (char *)v48 + 24 * v49 > (char *)&v44)
      {
        int64_t v39 = (char *)&v44 - (unsigned char *)v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        int64_t v20 = (char *)v48;
        unint64_t v19 = (int *)((char *)v48 + v39);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v35, 24);
        unint64_t v19 = &v44;
        int64_t v20 = (char *)v48;
      }
    }
    uint64_t v21 = &v20[24 * v49];
    long long v22 = *(_OWORD *)v19;
    *((void *)v21 + 2) = *((void *)v19 + 2);
    *(_OWORD *)uint64_t v21 = v22;
    uint64_t v23 = ++v49;
    if (v47[0])
    {
      int v44 = 3;
      uint64_t v45 = " to have 0 or 1 blocks";
      uint64_t v46 = 22;
      unint64_t v24 = &v44;
      uint64_t v25 = (char *)v48;
      if (v23 >= v50)
      {
        unint64_t v36 = v23 + 1;
        BOOL v37 = (char *)v48 + 24 * v23 > (char *)&v44;
        if (v48 <= &v44 && v37)
        {
          int64_t v40 = (char *)&v44 - (unsigned char *)v48;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          uint64_t v25 = (char *)v48;
          unint64_t v24 = (int *)((char *)v48 + v40);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, v51, v36, 24);
          unint64_t v24 = &v44;
          uint64_t v25 = (char *)v48;
        }
      }
      unsigned int v26 = &v25[24 * v49];
      long long v27 = *(_OWORD *)v24;
      *((void *)v26 + 2) = *((void *)v24 + 2);
      *(_OWORD *)unsigned int v26 = v27;
      ++v49;
    }
  }
  uint64_t v10 = mlir::InFlightDiagnostic::operator mlir::LogicalResult((uint64_t)v47);
  if (v47[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v47);
  }
  if (v56)
  {
    int v28 = (void **)__p;
    if (__p)
    {
      unint64_t v29 = v55;
      int v30 = __p;
      if (v55 != __p)
      {
        do
          unint64_t v29 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v29 - 1);
        while (v29 != v28);
        int v30 = __p;
      }
      unint64_t v55 = v28;
      operator delete(v30);
    }
    uint64_t v14 = v52;
    if (!v52) {
      goto LABEL_47;
    }
    int v31 = v53;
    uint64_t v16 = v52;
    if (v53 == v52)
    {
LABEL_46:
      unint64_t v53 = v14;
      operator delete(v16);
LABEL_47:
      if (v48 != v51) {
        free(v48);
      }
      return v10;
    }
    do
    {
      unint64_t v33 = (void *)*--v31;
      unint64_t v32 = v33;
      void *v31 = 0;
      if (v33) {
        operator delete[](v32);
      }
    }
    while (v31 != v14);
LABEL_45:
    uint64_t v16 = v52;
    goto LABEL_46;
  }
  return v10;
}

BOOL mlir::Op<mlir::memref::GenericAtomicRMWOp,mlir::OpTrait::OneRegion,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl,mlir::OpTrait::OpInvariants,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyInferredResultTypes(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AtomicYieldOp>::Impl<mlir::memref::GenericAtomicRMWOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!v1) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 24 * v1;
  while (1)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0) {
      break;
    }
    uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (void *)*v7) {
      goto LABEL_8;
    }
LABEL_3:
    v3 += 3;
    if ((void *)v5 == v3) {
      return 1;
    }
  }
  uint64_t v7 = v3;
  if (v3 == (void *)*v3) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v8 = v7[1];
  if (v8) {
    uint64_t v9 = v8 - 8;
  }
  else {
    uint64_t v9 = 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  uint64_t v11 = *(void *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AtomicYieldOp,void>::id) {
    goto LABEL_3;
  }
  __int16 v40 = 1283;
  v39[0] = "expects regions to end with '";
  uint64_t v39[2] = "memref.atomic_yield";
  v39[3] = 19;
  v41[0] = v39;
  v41[2] = "', found '";
  __int16 v42 = 770;
  uint64_t v47 = *(void *)(v11 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  void v43[3] = v13;
  __int16 v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  __int16 v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  uint64_t v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  uint64_t v15 = v14 + 16;
  unint64_t v16 = *(void *)(v14 + 16);
  LODWORD(v35) = 3;
  uint64_t v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  uint64_t v37 = 61;
  uint64_t v17 = *(unsigned int *)(v14 + 24);
  uint64_t v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    unint64_t v32 = v17 + 1;
    BOOL v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      uint64_t v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = &v35;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  __int16 v38 = 262;
  unint64_t v35 = (const void **)"memref.atomic_yield";
  uint64_t v36 = 19;
  uint64_t v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  uint64_t v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  }
  if (v55)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v54;
      uint64_t v25 = __p;
      if (v54 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      uint64_t v54 = v23;
      operator delete(v25);
    }
    unsigned int v26 = v51;
    if (v51)
    {
      long long v27 = v52;
      int v28 = v51;
      if (v52 != v51)
      {
        do
        {
          int v30 = (void *)*--v27;
          unint64_t v29 = v30;
          *long long v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int v28 = v51;
      }
      unint64_t v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50) {
      free(v49);
    }
  }
  return v22;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.load", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::LoadOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C32F0;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  BOOL v5 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v8, a2, a3, a4, a5);
  char v6 = v9;
  if (v9 >= 8)
  {
    if ((v9 & 4) != 0) {
      (*(void (__cdecl **)())((v9 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v6 & 2) == 0) {
      llvm::deallocate_buffer(v8[0], v8[1]);
    }
  }
  return v5;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        BOOL v5 = v7;
      }
      else {
        BOOL v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getParseAssemblyFn(uint64_t (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::LoadOp::parse;
  a1[3] = (uint64_t (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                   + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::LoadOp::getInherentAttr(Context, v8, a3, a4);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    unint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::LoadOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::LoadOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::LoadOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::LoadOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::LoadOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::LoadOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::AddFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *uint64_t v2 = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom;
  v2[1] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo;
  void v2[2] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored;
  v2[3] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved;
  v2[4] = mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses;
  unint64_t v3 = &unk_1E8EBA000;
  {
    unint64_t v12 = v2;
    unint64_t v3 = (void *)&unk_1E8EBA000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface]";
      unint64_t v14 = 80;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[139], v2);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::loadsFrom(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  return mlir::memref::LoadOp::loadsFrom((uint64_t)&v4, a3);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::storesTo()
{
  return mlir::Diagnostic::operator mlir::LogicalResult();
}

void mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getStored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2;
  mlir::memref::LoadOp::getStored(&v4, a3, a4);
}

BOOL mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canUsesBeRemoved(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::LoadOp::canUsesBeRemoved((mlir::anec::Broadcast *)&v5, a3, a4);
}

uint64_t mlir::detail::PromotableMemOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::removeBlockingUses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v7 = a2;
  return mlir::memref::LoadOp::removeBlockingUses((mlir::anec::Broadcast *)&v7, a3, a4, a5, a6);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire;
  v2[1] = mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire;
  unint64_t v3 = &unk_1E8EBA000;
  {
    unint64_t v12 = v2;
    unint64_t v3 = (void *)&unk_1E8EBA000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[141], v2);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::canRewire(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::LoadOp::canRewire((mlir::memref::LoadOp *)&v5, a3, a4);
}

uint64_t mlir::detail::DestructurableAccessorOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::rewire(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::memref::LoadOp::rewire((mlir::memref::LoadOp *)&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes;
  v2[1] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes;
  void v2[2] = mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface]";
      unint64_t v14 = 76;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3864), v2);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::inferReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

BOOL mlir::detail::InferTypeOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::isCompatibleReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a2 == a4
      && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(a1, 0, a1, a2, a3, 0, a3, a2);
}

uint64_t mlir::detail::InferTypeOpInterfaceTrait<mlir::memref::LoadOp>::refineReturnTypes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v11 = a3;
  void v22[4] = *MEMORY[0x1E4F143B8];
  long long v20 = v22;
  uint64_t v21 = 0x400000000;
  if (!mlir::memref::GenericAtomicRMWOp::inferReturnTypes(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (uint64_t)&v20))
  {
    uint64_t v13 = 0;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  mlir::ValueRange::ValueRange((unint64_t *)&v18, (uint64_t)v20, v21);
  mlir::ValueRange::ValueRange(v17, *(void *)a11, *(unsigned int *)(a11 + 8));
  if (v19 == v17[1]
    && std::__equal_impl[abi:nn180100]<llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,llvm::detail::indexed_accessor_range_base<mlir::TypeRange,llvm::PointerUnion<mlir::Value const*,mlir::Type const*,mlir::OpOperand *,mlir::detail::OpResultImpl *>,mlir::Type,mlir::Type,mlir::Type>::iterator,std::__equal_to,std::__identity,std::__identity>(v18, 0, v18, v19, v17[0], 0, v17[0], v19))
  {
    uint64_t v13 = 1;
    unint64_t v14 = v20;
    if (v20 == v22) {
      return v13;
    }
    goto LABEL_7;
  }
  v16[0] = "memref.load";
  v16[1] = 11;
  uint64_t v13 = mlir::emitOptionalError<char const(&)[2],llvm::StringLiteral,char const(&)[23],llvm::SmallVector<mlir::Type,4u> &,char const(&)[52],llvm::SmallVectorImpl<mlir::Type> &>(a2, v11, "'", (uint64_t)v16, "' op inferred type(s) ", (uint64_t)&v20, " are incompatible with return type(s) of operation ", a11);
  unint64_t v14 = v20;
  if (v20 != v22) {
LABEL_7:
  }
    free(v14);
  return v13;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::LoadOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::LoadOp::getEffects((uint64_t)&v3, a3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  mlir::memref::detail::LoadOpGenericAdaptorBase::LoadOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::LoadOp::fold(&v13);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      __int16 v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unsigned int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = 0x1E8EB8000uLL;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = 0x1E8EB8000;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<Empty>]";
      unint64_t v223 = 104;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::Type>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = 0x1E8EB8000;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = *(void *)(v5 + 2896);
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AtLeastNOperands<1>::Impl<Empty>]";
      unint64_t v223 = 97;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AtLeastNOperands<1u>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AtLeastNOperands<1u>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[13];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      int v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      int v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v223 = 91;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      uint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = v15[18];
  uint64_t v17 = &unk_1E8EBA000;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    uint64_t v17 = (void *)&unk_1E8EBA000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableMemOpInterface::Trait<Empty>]";
      unint64_t v223 = 94;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      int v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableMemOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableMemOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      uint64_t v17 = (void *)&unk_1E8EBA000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = v17[143];
  uint64_t v19 = &unk_1E8EBA000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    uint64_t v19 = (void *)&unk_1E8EBA000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAccessorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAccessorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAccessorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      uint64_t v19 = (void *)&unk_1E8EBA000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[145];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::InferTypeOpInterface::Trait<Empty>]";
      unint64_t v223 = 90;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      uint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::InferTypeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::InferTypeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 3856);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || *(void *)(v23 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::LoadOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyAtLeastNOperands(a1, (mlir::Operation *)1)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::LoadOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::LoadOp::verify((uint64_t **)&v6) != 0;
}

BOOL mlir::Op<mlir::memref::LoadOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::Type>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::AtLeastNOperands<1u>::Impl,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::PromotableMemOpInterface::Trait,mlir::DestructurableAccessorOpInterface::Trait,mlir::InferTypeOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants(mlir::detail *a1, mlir::Operation *a2)
{
  return mlir::detail::verifyInferredResultTypes(a1, a2) != 0;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloc", 12, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C3548;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::AllocOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockArgumentNames;
  void v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3760), v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AllocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v165 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v31 = v30;
    a1 = v165;
    if (v31)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v176 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v176;
      }
      uint64_t v34 = &v175[v33];
      unint64_t v35 = v176 - v33;
      if (v176 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v176 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v165;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v156 = v2;
    uint64_t v166 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v40 = v39;
    uint64_t v2 = v156;
    a1 = v166;
    if (v40)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v176 = 81;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v176;
      }
      unint64_t v43 = &v175[v42];
      unint64_t v44 = v176 - v42;
      if (v176 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v176 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v156;
      a1 = v166;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v157 = v2;
    uint64_t v167 = a1;
    uint64_t v148 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v148;
    int v49 = v48;
    uint64_t v2 = v157;
    a1 = v167;
    if (v49)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v176 = 110;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v176;
      }
      unint64_t v52 = &v175[v51];
      unint64_t v53 = v176 - v51;
      if (v176 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v176 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v148;
      uint64_t v2 = v157;
      a1 = v167;
    }
  }
  uint64_t v6 = v5[117];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v158 = v2;
    uint64_t v168 = a1;
    uint64_t v141 = v6;
    uint64_t v149 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v141;
    uint64_t v4 = v149;
    int v58 = v57;
    uint64_t v2 = v158;
    a1 = v168;
    if (v58)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v176 = 86;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v176;
      }
      unint64_t v61 = &v175[v60];
      unint64_t v62 = v176 - v60;
      if (v176 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v176 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v141;
      uint64_t v4 = v149;
      uint64_t v2 = v158;
      a1 = v168;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v159 = v2;
    uint64_t v169 = a1;
    uint64_t v142 = v6;
    uint64_t v150 = v4;
    uint64_t v135 = v8;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v135;
    uint64_t v6 = v142;
    uint64_t v4 = v150;
    int v67 = v66;
    uint64_t v2 = v159;
    a1 = v169;
    if (v67)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v176 = 88;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v176;
      }
      unint64_t v70 = &v175[v69];
      unint64_t v71 = v176 - v69;
      if (v176 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v176 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v135;
      uint64_t v6 = v142;
      uint64_t v4 = v150;
      uint64_t v2 = v159;
      a1 = v169;
    }
  }
  uint64_t v10 = v9[14];
  uint64_t v11 = &unk_1E8EBA000;
  {
    uint64_t v160 = v2;
    uint64_t v170 = a1;
    uint64_t v143 = v6;
    uint64_t v151 = v4;
    uint64_t v130 = v10;
    uint64_t v136 = v8;
    uint64_t v11 = (void *)&unk_1E8EBA000;
    uint64_t v10 = v130;
    uint64_t v8 = v136;
    uint64_t v6 = v143;
    uint64_t v4 = v151;
    int v76 = v75;
    uint64_t v2 = v160;
    a1 = v170;
    if (v76)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v176 = 96;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v176;
      }
      unint64_t v79 = &v175[v78];
      unint64_t v80 = v176 - v78;
      if (v176 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v176 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      uint64_t v11 = (void *)&unk_1E8EBA000;
      uint64_t v10 = v130;
      uint64_t v8 = v136;
      uint64_t v6 = v143;
      uint64_t v4 = v151;
      uint64_t v2 = v160;
      a1 = v170;
    }
  }
  uint64_t v12 = v11[61];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v161 = v2;
    uint64_t v171 = a1;
    uint64_t v144 = v6;
    uint64_t v152 = v4;
    uint64_t v131 = v10;
    uint64_t v137 = v8;
    uint64_t v126 = v12;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v126;
    uint64_t v10 = v131;
    uint64_t v8 = v137;
    uint64_t v6 = v144;
    uint64_t v4 = v152;
    int v85 = v84;
    uint64_t v2 = v161;
    a1 = v171;
    if (v85)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v176 = 84;
      unint64_t v86 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v86) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v176;
      }
      unint64_t v88 = &v175[v87];
      unint64_t v89 = v176 - v87;
      if (v176 - v87 >= 0x12) {
        uint64_t v90 = 18;
      }
      else {
        uint64_t v90 = v176 - v87;
      }
      unint64_t v91 = v89 - v90;
      if (v91 >= v91 - 1) {
        uint64_t v92 = v91 - 1;
      }
      else {
        uint64_t v92 = v91;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v88[v90], v92);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v126;
      uint64_t v10 = v131;
      uint64_t v8 = v137;
      uint64_t v6 = v144;
      uint64_t v4 = v152;
      uint64_t v2 = v161;
      a1 = v171;
    }
  }
  uint64_t v14 = v13[9];
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v162 = v2;
    uint64_t v172 = a1;
    uint64_t v145 = v6;
    uint64_t v153 = v4;
    uint64_t v132 = v10;
    uint64_t v138 = v8;
    uint64_t v123 = v14;
    uint64_t v127 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v123;
    uint64_t v12 = v127;
    uint64_t v10 = v132;
    uint64_t v8 = v138;
    uint64_t v6 = v145;
    uint64_t v4 = v153;
    int v94 = v93;
    uint64_t v2 = v162;
    a1 = v172;
    if (v94)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v176 = 89;
      unint64_t v95 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v95) {
        unint64_t v96 = v95;
      }
      else {
        unint64_t v96 = v176;
      }
      unint64_t v97 = &v175[v96];
      unint64_t v98 = v176 - v96;
      if (v176 - v96 >= 0x12) {
        uint64_t v99 = 18;
      }
      else {
        uint64_t v99 = v176 - v96;
      }
      unint64_t v100 = v98 - v99;
      if (v100 >= v100 - 1) {
        uint64_t v101 = v100 - 1;
      }
      else {
        uint64_t v101 = v100;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v97[v99], v101);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v123;
      uint64_t v12 = v127;
      uint64_t v10 = v132;
      uint64_t v8 = v138;
      uint64_t v6 = v145;
      uint64_t v4 = v153;
      uint64_t v2 = v162;
      a1 = v172;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2744);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v163 = v2;
    uint64_t v173 = a1;
    uint64_t v146 = v6;
    uint64_t v154 = v4;
    uint64_t v133 = v10;
    uint64_t v139 = v8;
    uint64_t v124 = v14;
    uint64_t v128 = v12;
    uint64_t v121 = v16;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v121;
    uint64_t v14 = v124;
    uint64_t v12 = v128;
    uint64_t v10 = v133;
    uint64_t v8 = v139;
    uint64_t v6 = v146;
    uint64_t v4 = v154;
    int v103 = v102;
    uint64_t v2 = v163;
    a1 = v173;
    if (v103)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v176 = 86;
      unint64_t v104 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v104) {
        unint64_t v105 = v104;
      }
      else {
        unint64_t v105 = v176;
      }
      unint64_t v106 = &v175[v105];
      unint64_t v107 = v176 - v105;
      if (v176 - v105 >= 0x12) {
        uint64_t v108 = 18;
      }
      else {
        uint64_t v108 = v176 - v105;
      }
      unint64_t v109 = v107 - v108;
      if (v109 >= v109 - 1) {
        uint64_t v110 = v109 - 1;
      }
      else {
        uint64_t v110 = v109;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v106[v108], v110);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v121;
      uint64_t v14 = v124;
      uint64_t v12 = v128;
      uint64_t v10 = v133;
      uint64_t v8 = v139;
      uint64_t v6 = v146;
      uint64_t v4 = v154;
      uint64_t v2 = v163;
      a1 = v173;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3752);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v164 = v2;
    uint64_t v174 = a1;
    uint64_t v147 = v6;
    uint64_t v155 = v4;
    uint64_t v134 = v10;
    uint64_t v140 = v8;
    uint64_t v125 = v14;
    uint64_t v129 = v12;
    uint64_t v120 = v18;
    uint64_t v122 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v120;
    uint64_t v16 = v122;
    uint64_t v14 = v125;
    uint64_t v12 = v129;
    uint64_t v10 = v134;
    uint64_t v8 = v140;
    uint64_t v6 = v147;
    uint64_t v4 = v155;
    int v112 = v111;
    uint64_t v2 = v164;
    a1 = v174;
    if (v112)
    {
      uint64_t v175 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v176 = 93;
      unint64_t v113 = llvm::StringRef::find((uint64_t *)&v175, "DesiredTypeName = ", 0x12uLL, 0);
      if (v176 >= v113) {
        unint64_t v114 = v113;
      }
      else {
        unint64_t v114 = v176;
      }
      unint64_t v115 = &v175[v114];
      unint64_t v116 = v176 - v114;
      if (v176 - v114 >= 0x12) {
        uint64_t v117 = 18;
      }
      else {
        uint64_t v117 = v176 - v114;
      }
      unint64_t v118 = v116 - v117;
      if (v118 >= v118 - 1) {
        uint64_t v119 = v118 - 1;
      }
      else {
        uint64_t v119 = v118;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v115[v117], v119);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v120;
      uint64_t v16 = v122;
      uint64_t v14 = v125;
      uint64_t v12 = v129;
      uint64_t v10 = v134;
      uint64_t v8 = v140;
      uint64_t v6 = v147;
      uint64_t v4 = v155;
      uint64_t v2 = v164;
      a1 = v174;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || *(void *)(v19 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AllocOp::verify((mlir::memref::AllocOp *)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca", 13, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C36D8;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::foldHook()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v3 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v7 & 4) != 0)
    {
      if ((v7 & 2) != 0) {
        uint64_t v4 = v6;
      }
      else {
        uint64_t v4 = (llvm **)v6[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v4, v0, v1, v2);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v6[0], v6[1]);
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::AllocaOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::AllocOp::getInherentAttr(Context, v8, a3, a4);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::AllocOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::AllocOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::AllocOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getOpPropertyByteSize()
{
  return 16;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::initProperties(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (a4)
  {
    *(_OWORD *)a3 = *a4;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::AllocOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::AllocOp::getPropertiesAsAttr(Context, v4);
}

__n128 mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::copyProperties(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  *a2 = *a3;
  return result;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2 && a3[1] == a2[1];
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::memref::AllocOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::memref::AllocOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockArgumentNames;
  void v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3760), v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots;
  v2[1] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue;
  void v2[2] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument;
  v2[3] = mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete;
  unint64_t v3 = &unk_1E8EBA000;
  {
    unint64_t v12 = v2;
    unint64_t v3 = (void *)&unk_1E8EBA000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface]";
      unint64_t v14 = 87;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[153], v2);
}

double mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getPromotableSlots@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  return mlir::memref::AllocaOp::getPromotableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

char *mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDefaultValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::getDefaultValue((uint64_t)&v5, a3, a4);
}

void mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleBlockArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

uint64_t mlir::detail::PromotableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handlePromotionComplete(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::memref::AllocaOp::handlePromotionComplete(&v6, a3, a4, a5);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x18uLL);
  *uint64_t v2 = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots;
  v2[1] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure;
  void v2[2] = mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete;
  uint64_t v3 = &unk_1E8EBA000;
  {
    unint64_t v12 = v2;
    uint64_t v3 = (void *)&unk_1E8EBA000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface]";
      unint64_t v14 = 91;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      uint64_t v3 = (void *)&unk_1E8EBA000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[155], v2);
}

double mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getDestructurableSlots@<D0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = a1;
  return mlir::memref::AllocaOp::getDestructurableSlots((mlir::memref::AllocaOp *)&v3, a2);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::destructure@<X0>(mlir::GenericProgramPoint *a1@<X1>, void *a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v5 = a1;
  return mlir::memref::AllocaOp::destructure(&v5, a2, a3, a4);
}

uint64_t mlir::detail::DestructurableAllocationOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::handleDestructuringComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::AllocaOp::handleDestructuringComplete(&v5, a3, a4);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::AllocaOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      int v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v223 = 110;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      int v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[117];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      int v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[12];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      int v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[14];
  uint64_t v11 = &unk_1E8EBA000;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = (void *)&unk_1E8EBA000;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AttrSizedOperandSegments<Empty>]";
      unint64_t v223 = 96;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      int v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AttrSizedOperandSegments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AttrSizedOperandSegments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = (void *)&unk_1E8EBA000;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[61];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      int v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = v13[9];
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      int v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2744);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      int v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3752);
  unint64_t v19 = &unk_1E8EBA000;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = (void *)&unk_1E8EBA000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::PromotableAllocationOpInterface::Trait<Empty>]";
      unint64_t v223 = 101;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      uint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::PromotableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::PromotableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = (void *)&unk_1E8EBA000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = v19[157];
  unint64_t v21 = &unk_1E8EBA000;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = (void *)&unk_1E8EBA000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::DestructurableAllocationOpInterface::Trait<Empty>]";
      unint64_t v223 = 105;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      uint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::DestructurableAllocationOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::DestructurableAllocationOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = (void *)&unk_1E8EBA000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = v21[159];
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || *(void *)(v23 + 3904) == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::AllocOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOperandSizeAttr((uint64_t)a1, "operandSegmentSizes", 0x13uLL)) {
    return 0;
  }
  uint64_t v6 = a1;
  if (!mlir::memref::AllocOp::verifyInvariantsImpl((uint64_t **)&v6)) {
    return 0;
  }
  uint64_t v6 = a1;
  return mlir::memref::AllocaOp::verify((uint64_t **)&v6) != 0;
}

uint64_t mlir::Op<mlir::memref::AllocaOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::AttrSizedOperandSegments,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::PromotableAllocationOpInterface::Trait,mlir::DestructurableAllocationOpInterface::Trait,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::foldHook()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v0, v1, v2, v3);
    }
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v7[0], v7[1]);
  }
  return v4;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, mlir::OperationState *a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeOp::parse;
  a1[3] = (BOOL (*)(uint64_t, mlir::OperationState *))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                               + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *uint64_t v2 = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands;
  v2[1] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions;
  void v2[2] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions;
  v2[3] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds;
  v2[4] = mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3920), v2);
}

uint64_t mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorOperands(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 46) & 0x80) != 0) {
    return *(void *)(a2 + 72) + 32 * *(unsigned int *)(a2 + 68);
  }
  else {
    return 0;
  }
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getEntrySuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v6, 0, a5).n128_u64[0];
  return result;
}

double mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  *(void *)&double result = mlir::memref::AllocaScopeOp::getSuccessorRegions((uint64_t)&v5, a3, a4).n128_u64[0];
  return result;
}

void mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::getRegionInvocationBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(_DWORD *)(a2 + 44) & 0x7FFFFF;
  uint64_t v7 = *(unsigned int *)(a5 + 8);
  if (v7 + v6 > (unint64_t)*(unsigned int *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v7 + v6, 12);
    LODWORD(v7) = *(_DWORD *)(a5 + 8);
    if (!v6) {
      goto LABEL_6;
    }
  }
  else if (!v6)
  {
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a5 + 12 * v7;
  uint64_t v9 = v6;
  do
  {
    *(void *)uint64_t v8 = 0;
    *(_DWORD *)(v8 + 8) = 0;
    v8 += 12;
    --v9;
  }
  while (v9);
  LODWORD(v7) = *(_DWORD *)(a5 + 8);
LABEL_6:
  *(_DWORD *)(a5 + 8) = v7 + v6;
}

BOOL mlir::detail::RegionBranchOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeOp>::areTypesCompatible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a3 == a4;
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v187 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v34 = v33;
    a1 = v187;
    if (v34)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneRegion<Empty>]";
      unint64_t v199 = 81;
      unint64_t v35 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v35) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = v199;
      }
      int v37 = &v198[v36];
      unint64_t v38 = v199 - v36;
      if (v199 - v36 >= 0x12) {
        uint64_t v39 = 18;
      }
      else {
        uint64_t v39 = v199 - v36;
      }
      unint64_t v40 = v38 - v39;
      if (v40 >= v40 - 1) {
        uint64_t v41 = v40 - 1;
      }
      else {
        uint64_t v41 = v40;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneRegion<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneRegion>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v37[v39], v41);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v187;
    }
  }
  uint64_t v2 = v1[26];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v177 = v2;
    uint64_t v188 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    uint64_t v2 = v177;
    a1 = v188;
    if (v43)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicResults<Empty>]";
      unint64_t v199 = 87;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v199;
      }
      int v46 = &v198[v45];
      unint64_t v47 = v199 - v45;
      if (v199 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v199 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v177;
      a1 = v188;
    }
  }
  uint64_t v4 = v3[449];
  uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v178 = v2;
    uint64_t v189 = a1;
    uint64_t v168 = v4;
    uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v168;
    uint64_t v2 = v178;
    int v52 = v51;
    a1 = v189;
    if (v52)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v199 = 86;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v199;
      }
      int v55 = &v198[v54];
      unint64_t v56 = v199 - v54;
      if (v199 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v199 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v168;
      uint64_t v2 = v178;
      a1 = v189;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v179 = v2;
    uint64_t v190 = a1;
    uint64_t v169 = v4;
    uint64_t v160 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v160;
    uint64_t v4 = v169;
    uint64_t v2 = v179;
    int v61 = v60;
    a1 = v190;
    if (v61)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroOperands<Empty>]";
      unint64_t v199 = 84;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v199;
      }
      int v64 = &v198[v63];
      unint64_t v65 = v199 - v63;
      if (v199 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v199 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v160;
      uint64_t v4 = v169;
      uint64_t v2 = v179;
      a1 = v190;
    }
  }
  uint64_t v8 = v7[10];
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v180 = v2;
    uint64_t v191 = a1;
    uint64_t v170 = v4;
    uint64_t v153 = v8;
    uint64_t v161 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v153;
    uint64_t v6 = v161;
    uint64_t v4 = v170;
    uint64_t v2 = v180;
    int v70 = v69;
    a1 = v191;
    if (v70)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlock<Empty>]";
      unint64_t v199 = 83;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v199;
      }
      int v73 = &v198[v72];
      unint64_t v74 = v199 - v72;
      if (v199 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v199 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlock<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlock>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v153;
      uint64_t v6 = v161;
      uint64_t v4 = v170;
      uint64_t v2 = v180;
      a1 = v191;
    }
  }
  uint64_t v10 = v9[1];
  uint64_t v11 = &unk_1E8EBA000;
  {
    uint64_t v181 = v2;
    uint64_t v192 = a1;
    uint64_t v171 = v4;
    uint64_t v154 = v8;
    uint64_t v162 = v6;
    uint64_t v147 = v10;
    uint64_t v11 = (void *)&unk_1E8EBA000;
    uint64_t v10 = v147;
    uint64_t v8 = v154;
    uint64_t v6 = v162;
    uint64_t v4 = v171;
    uint64_t v2 = v181;
    int v79 = v78;
    a1 = v192;
    if (v79)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref:"
             ":AllocaScopeReturnOp>::Impl<Empty>]";
      unint64_t v199 = 142;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v199;
      }
      int v82 = &v198[v81];
      unint64_t v83 = v199 - v81;
      if (v199 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v199 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      uint64_t v11 = (void *)&unk_1E8EBA000;
      uint64_t v10 = v147;
      uint64_t v8 = v154;
      uint64_t v6 = v162;
      uint64_t v4 = v171;
      uint64_t v2 = v181;
      a1 = v192;
    }
  }
  uint64_t v12 = v11[165];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v182 = v2;
    uint64_t v193 = a1;
    uint64_t v172 = v4;
    uint64_t v155 = v8;
    uint64_t v163 = v6;
    uint64_t v142 = v12;
    uint64_t v148 = v10;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v142;
    uint64_t v10 = v148;
    uint64_t v8 = v155;
    uint64_t v6 = v163;
    uint64_t v4 = v172;
    uint64_t v2 = v182;
    int v88 = v87;
    a1 = v193;
    if (v88)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::NoRegionArguments<Empty>]";
      unint64_t v199 = 89;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v199;
      }
      int v91 = &v198[v90];
      unint64_t v92 = v199 - v90;
      if (v199 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v199 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::NoRegionArguments<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::NoRegionArguments>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v142;
      uint64_t v10 = v148;
      uint64_t v8 = v155;
      uint64_t v6 = v163;
      uint64_t v4 = v172;
      uint64_t v2 = v182;
      a1 = v193;
    }
  }
  uint64_t v14 = v13[15];
  unint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v183 = v2;
    uint64_t v194 = a1;
    uint64_t v173 = v4;
    uint64_t v156 = v8;
    uint64_t v164 = v6;
    uint64_t v143 = v12;
    uint64_t v149 = v10;
    uint64_t v138 = v14;
    unint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v14 = v138;
    uint64_t v12 = v143;
    uint64_t v10 = v149;
    uint64_t v8 = v156;
    uint64_t v6 = v164;
    uint64_t v4 = v173;
    uint64_t v2 = v183;
    int v97 = v96;
    a1 = v194;
    if (v97)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v199 = 84;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v199;
      }
      int v100 = &v198[v99];
      unint64_t v101 = v199 - v99;
      if (v199 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v199 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      unint64_t v15 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v14 = v138;
      uint64_t v12 = v143;
      uint64_t v10 = v149;
      uint64_t v8 = v156;
      uint64_t v6 = v164;
      uint64_t v4 = v173;
      uint64_t v2 = v183;
      a1 = v194;
    }
  }
  uint64_t v16 = v15[9];
  unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v184 = v2;
    uint64_t v195 = a1;
    uint64_t v174 = v4;
    uint64_t v157 = v8;
    uint64_t v165 = v6;
    uint64_t v144 = v12;
    uint64_t v150 = v10;
    uint64_t v135 = v16;
    uint64_t v139 = v14;
    unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v135;
    uint64_t v14 = v139;
    uint64_t v12 = v144;
    uint64_t v10 = v150;
    uint64_t v8 = v157;
    uint64_t v6 = v165;
    uint64_t v4 = v174;
    uint64_t v2 = v184;
    int v106 = v105;
    a1 = v195;
    if (v106)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AutomaticAllocationScope<Empty>]";
      unint64_t v199 = 96;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v199;
      }
      int v109 = &v198[v108];
      unint64_t v110 = v199 - v108;
      if (v199 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v199 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AutomaticAllocationScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AutomaticAllocationScope>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v135;
      uint64_t v14 = v139;
      uint64_t v12 = v144;
      uint64_t v10 = v150;
      uint64_t v8 = v157;
      uint64_t v6 = v165;
      uint64_t v4 = v174;
      uint64_t v2 = v184;
      a1 = v195;
    }
  }
  uint64_t v18 = v17[19];
  unint64_t v19 = &unk_1E8EBA000;
  {
    uint64_t v185 = v2;
    uint64_t v196 = a1;
    uint64_t v175 = v4;
    uint64_t v158 = v8;
    uint64_t v166 = v6;
    uint64_t v145 = v12;
    uint64_t v151 = v10;
    uint64_t v136 = v16;
    uint64_t v140 = v14;
    uint64_t v133 = v18;
    unint64_t v19 = (void *)&unk_1E8EBA000;
    uint64_t v18 = v133;
    uint64_t v16 = v136;
    uint64_t v14 = v140;
    uint64_t v12 = v145;
    uint64_t v10 = v151;
    uint64_t v8 = v158;
    uint64_t v6 = v166;
    uint64_t v4 = v175;
    uint64_t v2 = v185;
    int v115 = v114;
    a1 = v196;
    if (v115)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchOpInterface::Trait<Empty>]";
      unint64_t v199 = 93;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v199;
      }
      int v118 = &v198[v117];
      unint64_t v119 = v199 - v117;
      if (v199 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v199 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v19 = (void *)&unk_1E8EBA000;
      uint64_t v18 = v133;
      uint64_t v16 = v136;
      uint64_t v14 = v140;
      uint64_t v12 = v145;
      uint64_t v10 = v151;
      uint64_t v8 = v158;
      uint64_t v6 = v166;
      uint64_t v4 = v175;
      uint64_t v2 = v185;
      a1 = v196;
    }
  }
  uint64_t v20 = v19[167];
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v186 = v2;
    uint64_t v197 = a1;
    uint64_t v176 = v4;
    uint64_t v159 = v8;
    uint64_t v167 = v6;
    uint64_t v146 = v12;
    uint64_t v152 = v10;
    uint64_t v137 = v16;
    uint64_t v141 = v14;
    uint64_t v132 = v20;
    uint64_t v134 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v132;
    uint64_t v18 = v134;
    uint64_t v16 = v137;
    uint64_t v14 = v141;
    uint64_t v12 = v146;
    uint64_t v10 = v152;
    uint64_t v8 = v159;
    uint64_t v6 = v167;
    uint64_t v4 = v176;
    uint64_t v2 = v186;
    int v124 = v123;
    a1 = v197;
    if (v124)
    {
      uint64_t v198 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasRecursiveMemoryEffects<Empty>]";
      unint64_t v199 = 97;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v198, "DesiredTypeName = ", 0x12uLL, 0);
      if (v199 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v199;
      }
      int v127 = &v198[v126];
      unint64_t v128 = v199 - v126;
      if (v199 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v199 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasRecursiveMemoryEffects<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasRecursiveMemoryEffects>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v132;
      uint64_t v18 = v134;
      uint64_t v16 = v137;
      uint64_t v14 = v141;
      uint64_t v12 = v146;
      uint64_t v10 = v152;
      uint64_t v8 = v159;
      uint64_t v6 = v167;
      uint64_t v4 = v176;
      uint64_t v2 = v186;
      a1 = v197;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || *(void *)(v21 + 2352) == a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v8 = a2;
  return mlir::memref::AllocaScopeOp::print(&v8, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyOneRegion(a1, a2)
    || !mlir::OpTrait::impl::verifyZeroSuccessors(a1, v3)
    || !mlir::OpTrait::impl::verifyZeroOperands(a1, v4)
    || !mlir::OpTrait::SingleBlock<mlir::memref::GenericAtomicRMWOp>::verifyTrait((uint64_t)a1)
    || !mlir::OpTrait::impl::verifyNoRegionArguments(a1, v5))
  {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::AllocaScopeOp::verifyInvariantsImpl((mlir::memref::AllocaScopeOp *)&v7);
}

BOOL mlir::Op<mlir::memref::AllocaScopeOp,mlir::OpTrait::OneRegion,mlir::OpTrait::VariadicResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::ZeroOperands,mlir::OpTrait::SingleBlock,mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl,mlir::OpTrait::NoRegionArguments,mlir::OpTrait::OpInvariants,mlir::OpTrait::AutomaticAllocationScope,mlir::RegionBranchOpInterface::Trait,mlir::OpTrait::HasRecursiveMemoryEffects>::verifyRegionInvariants(mlir::detail *a1)
{
  return mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait((uint64_t)a1)
      && mlir::detail::verifyTypesAlongControlFlowEdges(a1, v2) != 0;
}

uint64_t mlir::OpTrait::SingleBlockImplicitTerminator<mlir::memref::AllocaScopeReturnOp>::Impl<mlir::memref::AllocaScopeOp>::verifyRegionTrait(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(_DWORD *)(a1 + 44) & 0x7FFFFF;
  if (!v1) {
    return 1;
  }
  unint64_t v3 = 0;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 24 * v1;
  while (1)
  {
    unint64_t v6 = *(unsigned int *)(a1 + 44);
    if ((v6 & 0x7FFFFF) == 0) {
      break;
    }
    uint64_t v7 = (void *)((char *)&v3[4 * *(unsigned int *)(a1 + 40)]
                  + ((v4 + 16 * ((v6 >> 23) & 1) + ((v6 >> 21) & 0x7F8) + 7) & 0xFFFFFFFFFFFFFFF8));
    if (v7 != (void *)*v7) {
      goto LABEL_8;
    }
LABEL_3:
    v3 += 3;
    if ((void *)v5 == v3) {
      return 1;
    }
  }
  uint64_t v7 = v3;
  if (v3 == (void *)*v3) {
    goto LABEL_3;
  }
LABEL_8:
  uint64_t v8 = v7[1];
  if (v8) {
    uint64_t v9 = v8 - 8;
  }
  else {
    uint64_t v9 = 0;
  }
  mlir::GenericProgramPoint::~GenericProgramPoint(*(mlir::GenericProgramPoint **)(v9 + 32));
  uint64_t v11 = *(void *)(v10 + 48);
  if (*(_UNKNOWN **)(v11 + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id) {
    goto LABEL_3;
  }
  __int16 v40 = 1283;
  v39[0] = "expects regions to end with '";
  uint64_t v39[2] = "memref.alloca_scope.return";
  v39[3] = 26;
  v41[0] = v39;
  v41[2] = "', found '";
  __int16 v42 = 770;
  uint64_t v47 = *(void *)(v11 + 8);
  uint64_t AttrData = mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v47);
  v43[0] = v41;
  v43[2] = AttrData;
  void v43[3] = v13;
  __int16 v44 = 1282;
  v45[0] = (const void **)v43;
  v45[2] = (const void **)"'";
  __int16 v46 = 770;
  mlir::Operation::emitOpError((uint64_t *)a1, v45, (uint64_t)&v47);
  uint64_t v14 = mlir::Diagnostic::attachNote(&v48, 0, 0);
  uint64_t v15 = v14 + 16;
  unint64_t v16 = *(void *)(v14 + 16);
  LODWORD(v35) = 3;
  uint64_t v36 = (uint64_t)"in custom textual format, the absence of terminator implies '";
  uint64_t v37 = 61;
  uint64_t v17 = *(unsigned int *)(v14 + 24);
  uint64_t v18 = &v35;
  if (v17 >= *(_DWORD *)(v14 + 28))
  {
    unint64_t v32 = v17 + 1;
    BOOL v33 = v16 + 24 * v17 > (unint64_t)&v35;
    if (v16 <= (unint64_t)&v35 && v33)
    {
      int v34 = (char *)&v35 - v16;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = (const void ***)&v34[v16];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v14 + 32), v32, 24);
      unint64_t v16 = *(void *)(v14 + 16);
      uint64_t v18 = &v35;
    }
  }
  uint64_t v19 = v16 + 24 * *(unsigned int *)(v14 + 24);
  long long v20 = *(_OWORD *)v18;
  *(void *)(v19 + 16) = v18[2];
  *(_OWORD *)uint64_t v19 = v20;
  ++*(_DWORD *)(v14 + 24);
  __int16 v38 = 262;
  unint64_t v35 = (const void **)"memref.alloca_scope.return";
  uint64_t v36 = 26;
  uint64_t v21 = mlir::Diagnostic::operator<<(v14, &v35);
  mlir::Diagnostic::operator<<(v21, 39);
  uint64_t v22 = mlir::Diagnostic::operator mlir::LogicalResult();
  if (v47) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)&v47);
  }
  if (v55)
  {
    uint64_t v23 = (void **)__p;
    if (__p)
    {
      unint64_t v24 = v54;
      uint64_t v25 = __p;
      if (v54 != __p)
      {
        do
          unint64_t v24 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v24 - 1);
        while (v24 != v23);
        uint64_t v25 = __p;
      }
      unint64_t v54 = v23;
      operator delete(v25);
    }
    unsigned int v26 = v51;
    if (v51)
    {
      unsigned int v27 = v52;
      int v28 = v51;
      if (v52 != v51)
      {
        do
        {
          int v30 = (void *)*--v27;
          unint64_t v29 = v30;
          *unsigned int v27 = 0;
          if (v30) {
            operator delete[](v29);
          }
        }
        while (v27 != v26);
        int v28 = v51;
      }
      int v52 = v26;
      operator delete(v28);
    }
    if (v49 != &v50) {
      free(v49);
    }
  }
  return v22;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.alloca_scope.return", 26, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeReturnOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    unint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C2E40;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      unint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::foldHook()
{
  uint64_t v0 = (*(uint64_t (__cdecl **)())(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                 + 2) & 0xFFFFFFFFFFFFFFF8))();
  if ((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2 >= 8)
  {
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 4) != 0)
      (*(void (__cdecl **)())((((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                              + 2) & 0xFFFFFFFFFFFFFFF8)
                            + 16))();
    if (((llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
         + 2) & 2) == 0)
      llvm::deallocate_buffer(v2, v3);
  }
  return v0;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::AllocaScopeReturnOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::printAssembly(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, uint64_t, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                    + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          uint64_t v17 = (void *)*--v14;
          unint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::AllocaScopeReturnOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands;
  v2[1] = mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface]";
      unint64_t v14 = 89;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 4016), v2);
}

double mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getMutableSuccessorOperands@<D0>(mlir::Operation *a1@<X1>, mlir::MutableOperandRange *a2@<X8>)
{
  unint64_t v3 = a1;
  return mlir::memref::AllocaScopeReturnOp::getMutableSuccessorOperands(&v3, a2);
}

uint64_t mlir::detail::RegionBranchTerminatorOpInterfaceInterfaceTraits::Model<mlir::memref::AllocaScopeReturnOp>::getSuccessorRegions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  return mlir::detail::RegionBranchTerminatorOpInterfaceTrait<mlir::func::ReturnOp>::getSuccessorRegions(&v6, a3, a4, a5);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>()
{
  return 0;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      __int16 v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v223 = 83;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[12];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::VariadicOperands<Empty>]";
      unint64_t v223 = 88;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::VariadicOperands<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::VariadicOperands>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[14];
  uint64_t v9 = &unk_1E8EBA000;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    uint64_t v9 = (void *)&unk_1E8EBA000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<Empty>]";
      unint64_t v223 = 116;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      uint64_t v9 = (void *)&unk_1E8EBA000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = v9[169];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2776);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = *(void *)(v15 + 2912);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = *(void *)(v17 + 3904);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::RegionBranchTerminatorOpInterface::Trait<Empty>]";
      unint64_t v223 = 103;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::RegionBranchTerminatorOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::RegionBranchTerminatorOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = *(void *)(v19 + 1936);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ReturnLike<Empty>]";
      unint64_t v223 = 82;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ReturnLike<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ReturnLike>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 4088);
  uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::IsTerminator<Empty>]";
      unint64_t v223 = 84;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      uint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::IsTerminator<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::IsTerminator>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      uint64_t v23 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[7] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, uint64_t a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName(a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::func::ReturnOp::print((mlir::func::ReturnOp *)&v7, a3);
}

BOOL mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyZeroResults(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait((uint64_t *)a1)
    && (uint64_t v8 = a1, mlir::OpTrait::impl::verifyIsIdempotent((mlir::OpTrait::impl *)&v8, v5)))
  {
    return mlir::OpTrait::impl::verifyIsTerminator(a1, v6) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl<mlir::memref::AllocaScopeReturnOp>::verifyTrait(uint64_t *a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (mlir::Block *)a1[2];
  if (v2)
  {
    uint64_t ParentOp = mlir::Block::getParentOp(v2);
    if (ParentOp)
    {
      if (*(_UNKNOWN **)(*(void *)(ParentOp + 48) + 16) == &mlir::detail::TypeIDResolver<mlir::memref::AllocaScopeOp,void>::id) {
        return 1;
      }
    }
  }
  __int16 v33 = 257;
  mlir::Operation::emitOpError(a1, &v32, (uint64_t)v38);
  if (v38[0])
  {
    LODWORD(v34) = 3;
    unint64_t v35 = "expects parent op ";
    uint64_t v36 = 18;
    uint64_t v4 = &v34;
    unint64_t v5 = (char *)v39;
    if (v40 >= v41)
    {
      unint64_t v26 = v40 + 1;
      if (v39 <= &v34 && (char *)v39 + 24 * v40 > (char *)&v34)
      {
        int64_t v29 = (char *)&v34 - (unsigned char *)v39;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        unint64_t v5 = (char *)v39;
        uint64_t v4 = (const char **)((char *)v39 + v29);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, v42, v26, 24);
        uint64_t v4 = &v34;
        unint64_t v5 = (char *)v39;
      }
    }
    uint64_t v6 = &v5[24 * v40];
    long long v7 = *(_OWORD *)v4;
    *((void *)v6 + 2) = v4[2];
    *(_OWORD *)uint64_t v6 = v7;
    ++v40;
  }
  int v31 = "'";
  uint64_t v8 = (void *)mlir::InFlightDiagnostic::append<char const*&>((uint64_t)v38, &v31);
  uint64_t v9 = (uint64_t)v8;
  v37[0] = "memref.alloca_scope";
  v37[1] = 19;
  if (*v8)
  {
    uint64_t v34 = ", ";
    llvm::interleave<llvm::StringLiteral const*,mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(llvm::ArrayRef<llvm::StringLiteral> const&)#1},mlir::Diagnostic& mlir::Diagnostic::appendRange<llvm::ArrayRef<llvm::StringLiteral>>(llvm::ArrayRef<llvm::StringLiteral> const&,char const*)::{lambda(void)#1},void>((uint64_t)v37, (uint64_t)v38, (uint64_t)(v8 + 1), (uint64_t)(v8 + 1), &v34);
    if (*(void *)v9)
    {
      uint64_t v10 = v9 + 24;
      unint64_t v11 = *(void *)(v9 + 24);
      LODWORD(v34) = 3;
      unint64_t v35 = "'";
      uint64_t v36 = 1;
      uint64_t v12 = *(unsigned int *)(v9 + 32);
      unint64_t v13 = &v34;
      if (v12 >= *(_DWORD *)(v9 + 36))
      {
        unint64_t v27 = v12 + 1;
        BOOL v28 = v11 + 24 * v12 > (unint64_t)&v34;
        if (v11 <= (unint64_t)&v34 && v28)
        {
          int v30 = (char *)&v34 - v11;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = (const char **)&v30[v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v10, (void *)(v9 + 40), v27, 24);
          unint64_t v11 = *(void *)(v9 + 24);
          unint64_t v13 = &v34;
        }
      }
      uint64_t v14 = v11 + 24 * *(unsigned int *)(v9 + 32);
      long long v15 = *(_OWORD *)v13;
      *(void *)(v14 + 16) = v13[2];
      *(_OWORD *)uint64_t v14 = v15;
      ++*(_DWORD *)(v9 + 32);
    }
  }
  uint64_t v16 = mlir::InFlightDiagnostic::operator mlir::LogicalResult(v9);
  if (v38[0]) {
    mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v38);
  }
  if (v47)
  {
    unint64_t v17 = (void **)__p;
    if (__p)
    {
      uint64_t v18 = v46;
      unint64_t v19 = __p;
      if (v46 != __p)
      {
        do
          uint64_t v18 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v18 - 1);
        while (v18 != v17);
        unint64_t v19 = __p;
      }
      int v46 = v17;
      operator delete(v19);
    }
    uint64_t v20 = v43;
    if (v43)
    {
      unint64_t v21 = v44;
      uint64_t v22 = v43;
      if (v44 != v43)
      {
        do
        {
          unint64_t v24 = (void *)*--v21;
          uint64_t v23 = v24;
          *unint64_t v21 = 0;
          if (v24) {
            operator delete[](v23);
          }
        }
        while (v21 != v20);
        uint64_t v22 = v43;
      }
      uint64_t v44 = v20;
      operator delete(v22);
    }
    if (v39 != v42) {
      free(v39);
    }
  }
  return v16;
}

uint64_t mlir::Op<mlir::memref::AllocaScopeReturnOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::VariadicOperands,mlir::OpTrait::HasParent<mlir::memref::AllocaScopeOp>::Impl,mlir::OpTrait::OpInvariants,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::RegionBranchTerminatorOpInterface::Trait,mlir::OpTrait::ReturnLike,mlir::OpTrait::IsTerminator>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.cast", 11, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CastOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      long long v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C3160;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                      + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        unint64_t v11 = v13;
      }
      else {
        unint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::CastOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    char v10 = (void **)__p;
    if (__p)
    {
      unint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          unint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      unint64_t v14 = v30;
      uint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *unint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        uint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CastOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::CastOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::areCastCompatible;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface]";
      unint64_t v14 = 71;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3744), v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockArgumentNames;
  void v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3760), v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::CastOp::getAsmResultNames(&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CastOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource;
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[435], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CastOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(a2, a3, a4, a5);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::foldSingleResultHook<mlir::memref::CastOp>(mlir::Operation *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = a1;
  mlir::memref::detail::CastOpGenericAdaptorBase::CastOpGenericAdaptorBase((uint64_t)v13, a1);
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  unint64_t v8 = mlir::memref::CastOp::fold((uint64_t *)&v12);
  unint64_t v9 = v8;
  if (v8 < 8
    || (mlir::Operation *)((char *)a1 - 16) == (mlir::Operation *)(v8 & ((uint64_t)(v8 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(_DWORD *)(a4 + 8) || !mlir::impl::foldCastInterfaceOp((uint64_t)a1, a2, a3, a4)) {
      return v9 > 7;
    }
  }
  else
  {
    uint64_t v10 = *(unsigned int *)(a4 + 8);
    if (v10 >= *(_DWORD *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, (void *)(a4 + 16), v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a4 + 8);
    }
    *(void *)(*(void *)a4 + 8 * v10) = v9;
    ++*(_DWORD *)(a4 + 8);
  }
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v259 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v43 = v42;
    a1 = v259;
    if (v43)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v274 = 83;
      unint64_t v44 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v44) {
        unint64_t v45 = v44;
      }
      else {
        unint64_t v45 = v274;
      }
      int v46 = &v273[v45];
      unint64_t v47 = v274 - v45;
      if (v274 - v45 >= 0x12) {
        uint64_t v48 = 18;
      }
      else {
        uint64_t v48 = v274 - v45;
      }
      unint64_t v49 = v47 - v48;
      if (v49 >= v49 - 1) {
        uint64_t v50 = v49 - 1;
      }
      else {
        uint64_t v50 = v49;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v46[v48], v50);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v259;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v246 = v2;
    uint64_t v260 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v52 = v51;
    uint64_t v2 = v246;
    a1 = v260;
    if (v52)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v274 = 81;
      unint64_t v53 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v53) {
        unint64_t v54 = v53;
      }
      else {
        unint64_t v54 = v274;
      }
      int v55 = &v273[v54];
      unint64_t v56 = v274 - v54;
      if (v274 - v54 >= 0x12) {
        uint64_t v57 = 18;
      }
      else {
        uint64_t v57 = v274 - v54;
      }
      unint64_t v58 = v56 - v57;
      if (v58 >= v58 - 1) {
        uint64_t v59 = v58 - 1;
      }
      else {
        uint64_t v59 = v58;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v55[v57], v59);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v246;
      a1 = v260;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &unk_1E8EBA000;
  {
    uint64_t v247 = v2;
    uint64_t v261 = a1;
    uint64_t v234 = v4;
    unint64_t v5 = (void *)&unk_1E8EBA000;
    uint64_t v4 = v234;
    uint64_t v2 = v247;
    int v61 = v60;
    a1 = v261;
    if (v61)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<Empty>]";
      unint64_t v274 = 114;
      unint64_t v62 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v62) {
        unint64_t v63 = v62;
      }
      else {
        unint64_t v63 = v274;
      }
      int v64 = &v273[v63];
      unint64_t v65 = v274 - v63;
      if (v274 - v63 >= 0x12) {
        uint64_t v66 = 18;
      }
      else {
        uint64_t v66 = v274 - v63;
      }
      unint64_t v67 = v65 - v66;
      if (v67 >= v67 - 1) {
        uint64_t v68 = v67 - 1;
      }
      else {
        uint64_t v68 = v67;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v64[v66], v68);
      unint64_t v5 = (void *)&unk_1E8EBA000;
      uint64_t v4 = v234;
      uint64_t v2 = v247;
      a1 = v261;
    }
  }
  uint64_t v6 = v5[171];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v248 = v2;
    uint64_t v262 = a1;
    uint64_t v223 = v6;
    uint64_t v235 = v4;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v223;
    uint64_t v4 = v235;
    int v70 = v69;
    uint64_t v2 = v248;
    a1 = v262;
    if (v70)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v274 = 86;
      unint64_t v71 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v71) {
        unint64_t v72 = v71;
      }
      else {
        unint64_t v72 = v274;
      }
      int v73 = &v273[v72];
      unint64_t v74 = v274 - v72;
      if (v274 - v72 >= 0x12) {
        uint64_t v75 = 18;
      }
      else {
        uint64_t v75 = v274 - v72;
      }
      unint64_t v76 = v74 - v75;
      if (v76 >= v76 - 1) {
        uint64_t v77 = v76 - 1;
      }
      else {
        uint64_t v77 = v76;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v73[v75], v77);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v223;
      uint64_t v4 = v235;
      uint64_t v2 = v248;
      a1 = v262;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v249 = v2;
    uint64_t v263 = a1;
    uint64_t v224 = v6;
    uint64_t v236 = v4;
    uint64_t v213 = v8;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v213;
    uint64_t v6 = v224;
    uint64_t v4 = v236;
    int v79 = v78;
    uint64_t v2 = v249;
    a1 = v263;
    if (v79)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v274 = 82;
      unint64_t v80 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v80) {
        unint64_t v81 = v80;
      }
      else {
        unint64_t v81 = v274;
      }
      int v82 = &v273[v81];
      unint64_t v83 = v274 - v81;
      if (v274 - v81 >= 0x12) {
        uint64_t v84 = 18;
      }
      else {
        uint64_t v84 = v274 - v81;
      }
      unint64_t v85 = v83 - v84;
      if (v85 >= v85 - 1) {
        uint64_t v86 = v85 - 1;
      }
      else {
        uint64_t v86 = v85;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v82[v84], v86);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v213;
      uint64_t v6 = v224;
      uint64_t v4 = v236;
      uint64_t v2 = v249;
      a1 = v263;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v250 = v2;
    uint64_t v264 = a1;
    uint64_t v225 = v6;
    uint64_t v237 = v4;
    uint64_t v204 = v10;
    uint64_t v214 = v8;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v204;
    uint64_t v8 = v214;
    uint64_t v6 = v225;
    uint64_t v4 = v237;
    int v88 = v87;
    uint64_t v2 = v250;
    a1 = v264;
    if (v88)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v274 = 84;
      unint64_t v89 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v89) {
        unint64_t v90 = v89;
      }
      else {
        unint64_t v90 = v274;
      }
      int v91 = &v273[v90];
      unint64_t v92 = v274 - v90;
      if (v274 - v90 >= 0x12) {
        uint64_t v93 = 18;
      }
      else {
        uint64_t v93 = v274 - v90;
      }
      unint64_t v94 = v92 - v93;
      if (v94 >= v94 - 1) {
        uint64_t v95 = v94 - 1;
      }
      else {
        uint64_t v95 = v94;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v91[v93], v95);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v204;
      uint64_t v8 = v214;
      uint64_t v6 = v225;
      uint64_t v4 = v237;
      uint64_t v2 = v250;
      a1 = v264;
    }
  }
  uint64_t v12 = v11[9];
  uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v251 = v2;
    uint64_t v265 = a1;
    uint64_t v226 = v6;
    uint64_t v238 = v4;
    uint64_t v205 = v10;
    uint64_t v215 = v8;
    uint64_t v196 = v12;
    uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v12 = v196;
    uint64_t v10 = v205;
    uint64_t v8 = v215;
    uint64_t v6 = v226;
    uint64_t v4 = v238;
    int v97 = v96;
    uint64_t v2 = v251;
    a1 = v265;
    if (v97)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::CastOpInterface::Trait<Empty>]";
      unint64_t v274 = 85;
      unint64_t v98 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v98) {
        unint64_t v99 = v98;
      }
      else {
        unint64_t v99 = v274;
      }
      int v100 = &v273[v99];
      unint64_t v101 = v274 - v99;
      if (v274 - v99 >= 0x12) {
        uint64_t v102 = 18;
      }
      else {
        uint64_t v102 = v274 - v99;
      }
      unint64_t v103 = v101 - v102;
      if (v103 >= v103 - 1) {
        uint64_t v104 = v103 - 1;
      }
      else {
        uint64_t v104 = v103;
      }
      mlir::detail::TypeIDResolver<mlir::CastOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::CastOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v100[v102], v104);
      uint64_t v13 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v12 = v196;
      uint64_t v10 = v205;
      uint64_t v8 = v215;
      uint64_t v6 = v226;
      uint64_t v4 = v238;
      uint64_t v2 = v251;
      a1 = v265;
    }
  }
  uint64_t v14 = v13[384];
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v252 = v2;
    uint64_t v266 = a1;
    uint64_t v227 = v6;
    uint64_t v239 = v4;
    uint64_t v206 = v10;
    uint64_t v216 = v8;
    uint64_t v189 = v14;
    uint64_t v197 = v12;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v189;
    uint64_t v12 = v197;
    uint64_t v10 = v206;
    uint64_t v8 = v216;
    uint64_t v6 = v227;
    uint64_t v4 = v239;
    int v106 = v105;
    uint64_t v2 = v252;
    a1 = v266;
    if (v106)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v274 = 86;
      unint64_t v107 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v107) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v274;
      }
      int v109 = &v273[v108];
      unint64_t v110 = v274 - v108;
      if (v274 - v108 >= 0x12) {
        uint64_t v111 = 18;
      }
      else {
        uint64_t v111 = v274 - v108;
      }
      unint64_t v112 = v110 - v111;
      if (v112 >= v112 - 1) {
        uint64_t v113 = v112 - 1;
      }
      else {
        uint64_t v113 = v112;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v109[v111], v113);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v189;
      uint64_t v12 = v197;
      uint64_t v10 = v206;
      uint64_t v8 = v216;
      uint64_t v6 = v227;
      uint64_t v4 = v239;
      uint64_t v2 = v252;
      a1 = v266;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3752);
  unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v253 = v2;
    uint64_t v267 = a1;
    uint64_t v228 = v6;
    uint64_t v240 = v4;
    uint64_t v207 = v10;
    uint64_t v217 = v8;
    uint64_t v190 = v14;
    uint64_t v198 = v12;
    uint64_t v183 = v16;
    unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v16 = v183;
    uint64_t v14 = v190;
    uint64_t v12 = v198;
    uint64_t v10 = v207;
    uint64_t v8 = v217;
    uint64_t v6 = v228;
    uint64_t v4 = v240;
    int v115 = v114;
    uint64_t v2 = v253;
    a1 = v267;
    if (v115)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v274 = 91;
      unint64_t v116 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v116) {
        unint64_t v117 = v116;
      }
      else {
        unint64_t v117 = v274;
      }
      int v118 = &v273[v117];
      unint64_t v119 = v274 - v117;
      if (v274 - v117 >= 0x12) {
        uint64_t v120 = 18;
      }
      else {
        uint64_t v120 = v274 - v117;
      }
      unint64_t v121 = v119 - v120;
      if (v121 >= v121 - 1) {
        uint64_t v122 = v121 - 1;
      }
      else {
        uint64_t v122 = v121;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v118[v120], v122);
      unint64_t v17 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v16 = v183;
      uint64_t v14 = v190;
      uint64_t v12 = v198;
      uint64_t v10 = v207;
      uint64_t v8 = v217;
      uint64_t v6 = v228;
      uint64_t v4 = v240;
      uint64_t v2 = v253;
      a1 = v267;
    }
  }
  uint64_t v18 = v17[18];
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v254 = v2;
    uint64_t v268 = a1;
    uint64_t v229 = v6;
    uint64_t v241 = v4;
    uint64_t v208 = v10;
    uint64_t v218 = v8;
    uint64_t v191 = v14;
    uint64_t v199 = v12;
    uint64_t v178 = v18;
    uint64_t v184 = v16;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v178;
    uint64_t v16 = v184;
    uint64_t v14 = v191;
    uint64_t v12 = v199;
    uint64_t v10 = v208;
    uint64_t v8 = v218;
    uint64_t v6 = v229;
    uint64_t v4 = v241;
    int v124 = v123;
    uint64_t v2 = v254;
    a1 = v268;
    if (v124)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v274 = 95;
      unint64_t v125 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v125) {
        unint64_t v126 = v125;
      }
      else {
        unint64_t v126 = v274;
      }
      int v127 = &v273[v126];
      unint64_t v128 = v274 - v126;
      if (v274 - v126 >= 0x12) {
        uint64_t v129 = 18;
      }
      else {
        uint64_t v129 = v274 - v126;
      }
      unint64_t v130 = v128 - v129;
      if (v130 >= v130 - 1) {
        uint64_t v131 = v130 - 1;
      }
      else {
        uint64_t v131 = v130;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v127[v129], v131);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v178;
      uint64_t v16 = v184;
      uint64_t v14 = v191;
      uint64_t v12 = v199;
      uint64_t v10 = v208;
      uint64_t v8 = v218;
      uint64_t v6 = v229;
      uint64_t v4 = v241;
      uint64_t v2 = v254;
      a1 = v268;
    }
  }
  uint64_t v20 = *(void *)(v19 + 2776);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v255 = v2;
    uint64_t v269 = a1;
    uint64_t v230 = v6;
    uint64_t v242 = v4;
    uint64_t v209 = v10;
    uint64_t v219 = v8;
    uint64_t v192 = v14;
    uint64_t v200 = v12;
    uint64_t v179 = v18;
    uint64_t v185 = v16;
    uint64_t v174 = v20;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v174;
    uint64_t v18 = v179;
    uint64_t v16 = v185;
    uint64_t v14 = v192;
    uint64_t v12 = v200;
    uint64_t v10 = v209;
    uint64_t v8 = v219;
    uint64_t v6 = v230;
    uint64_t v4 = v242;
    int v133 = v132;
    uint64_t v2 = v255;
    a1 = v269;
    if (v133)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v274 = 99;
      unint64_t v134 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v134) {
        unint64_t v135 = v134;
      }
      else {
        unint64_t v135 = v274;
      }
      int v136 = &v273[v135];
      unint64_t v137 = v274 - v135;
      if (v274 - v135 >= 0x12) {
        uint64_t v138 = 18;
      }
      else {
        uint64_t v138 = v274 - v135;
      }
      unint64_t v139 = v137 - v138;
      if (v139 >= v139 - 1) {
        uint64_t v140 = v139 - 1;
      }
      else {
        uint64_t v140 = v139;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v136[v138], v140);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v174;
      uint64_t v18 = v179;
      uint64_t v16 = v185;
      uint64_t v14 = v192;
      uint64_t v12 = v200;
      uint64_t v10 = v209;
      uint64_t v8 = v219;
      uint64_t v6 = v230;
      uint64_t v4 = v242;
      uint64_t v2 = v255;
      a1 = v269;
    }
  }
  uint64_t v22 = *(void *)(v21 + 2912);
  unint64_t v23 = 0x1E8EB8000uLL;
  {
    uint64_t v256 = v2;
    uint64_t v270 = a1;
    uint64_t v231 = v6;
    uint64_t v243 = v4;
    uint64_t v210 = v10;
    uint64_t v220 = v8;
    uint64_t v193 = v14;
    uint64_t v201 = v12;
    uint64_t v180 = v18;
    uint64_t v186 = v16;
    uint64_t v171 = v22;
    uint64_t v175 = v20;
    unint64_t v23 = 0x1E8EB8000;
    uint64_t v22 = v171;
    uint64_t v20 = v175;
    uint64_t v18 = v180;
    uint64_t v16 = v186;
    uint64_t v14 = v193;
    uint64_t v12 = v201;
    uint64_t v10 = v210;
    uint64_t v8 = v220;
    uint64_t v6 = v231;
    uint64_t v4 = v243;
    int v142 = v141;
    uint64_t v2 = v256;
    a1 = v270;
    if (v142)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v274 = 93;
      unint64_t v143 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v143) {
        unint64_t v144 = v143;
      }
      else {
        unint64_t v144 = v274;
      }
      uint64_t v145 = &v273[v144];
      unint64_t v146 = v274 - v144;
      if (v274 - v144 >= 0x12) {
        uint64_t v147 = 18;
      }
      else {
        uint64_t v147 = v274 - v144;
      }
      unint64_t v148 = v146 - v147;
      if (v148 >= v148 - 1) {
        uint64_t v149 = v148 - 1;
      }
      else {
        uint64_t v149 = v148;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v145[v147], v149);
      unint64_t v23 = 0x1E8EB8000;
      uint64_t v22 = v171;
      uint64_t v20 = v175;
      uint64_t v18 = v180;
      uint64_t v16 = v186;
      uint64_t v14 = v193;
      uint64_t v12 = v201;
      uint64_t v10 = v210;
      uint64_t v8 = v220;
      uint64_t v6 = v231;
      uint64_t v4 = v243;
      uint64_t v2 = v256;
      a1 = v270;
    }
  }
  uint64_t v24 = *(void *)(v23 + 3904);
  unint64_t v25 = 0x1E8EB8000uLL;
  {
    uint64_t v257 = v2;
    uint64_t v271 = a1;
    uint64_t v232 = v6;
    uint64_t v244 = v4;
    uint64_t v211 = v10;
    uint64_t v221 = v8;
    uint64_t v194 = v14;
    uint64_t v202 = v12;
    uint64_t v181 = v18;
    uint64_t v187 = v16;
    uint64_t v172 = v22;
    uint64_t v176 = v20;
    uint64_t v169 = v24;
    unint64_t v25 = 0x1E8EB8000;
    uint64_t v24 = v169;
    uint64_t v22 = v172;
    uint64_t v20 = v176;
    uint64_t v18 = v181;
    uint64_t v16 = v187;
    uint64_t v14 = v194;
    uint64_t v12 = v202;
    uint64_t v10 = v211;
    uint64_t v8 = v221;
    uint64_t v6 = v232;
    uint64_t v4 = v244;
    int v151 = v150;
    uint64_t v2 = v257;
    a1 = v271;
    if (v151)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::SameOperandsAndResultShape<Empty>]";
      unint64_t v274 = 98;
      unint64_t v152 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v152) {
        unint64_t v153 = v152;
      }
      else {
        unint64_t v153 = v274;
      }
      uint64_t v154 = &v273[v153];
      unint64_t v155 = v274 - v153;
      if (v274 - v153 >= 0x12) {
        uint64_t v156 = 18;
      }
      else {
        uint64_t v156 = v274 - v153;
      }
      unint64_t v157 = v155 - v156;
      if (v157 >= v157 - 1) {
        uint64_t v158 = v157 - 1;
      }
      else {
        uint64_t v158 = v157;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::SameOperandsAndResultShape<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::SameOperandsAndResultShape>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v154[v156], v158);
      unint64_t v25 = 0x1E8EB8000;
      uint64_t v24 = v169;
      uint64_t v22 = v172;
      uint64_t v20 = v176;
      uint64_t v18 = v181;
      uint64_t v16 = v187;
      uint64_t v14 = v194;
      uint64_t v12 = v202;
      uint64_t v10 = v211;
      uint64_t v8 = v221;
      uint64_t v6 = v232;
      uint64_t v4 = v244;
      uint64_t v2 = v257;
      a1 = v271;
    }
  }
  uint64_t v26 = *(void *)(v25 + 2904);
  unsigned int v27 = &unk_1E8EBA000;
  {
    uint64_t v258 = v2;
    uint64_t v272 = a1;
    uint64_t v233 = v6;
    uint64_t v245 = v4;
    uint64_t v212 = v10;
    uint64_t v222 = v8;
    uint64_t v195 = v14;
    uint64_t v203 = v12;
    uint64_t v182 = v18;
    uint64_t v188 = v16;
    uint64_t v173 = v22;
    uint64_t v177 = v20;
    uint64_t v168 = v26;
    uint64_t v170 = v24;
    unsigned int v27 = (void *)&unk_1E8EBA000;
    uint64_t v26 = v168;
    uint64_t v24 = v170;
    uint64_t v22 = v173;
    uint64_t v20 = v177;
    uint64_t v18 = v182;
    uint64_t v16 = v188;
    uint64_t v14 = v195;
    uint64_t v12 = v203;
    uint64_t v10 = v212;
    uint64_t v8 = v222;
    uint64_t v6 = v233;
    uint64_t v4 = v245;
    int v160 = v159;
    uint64_t v2 = v258;
    a1 = v272;
    if (v160)
    {
      v273 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v274 = 89;
      unint64_t v161 = llvm::StringRef::find((uint64_t *)&v273, "DesiredTypeName = ", 0x12uLL, 0);
      if (v274 >= v161) {
        unint64_t v162 = v161;
      }
      else {
        unint64_t v162 = v274;
      }
      uint64_t v163 = &v273[v162];
      unint64_t v164 = v274 - v162;
      if (v274 - v162 >= 0x12) {
        uint64_t v165 = 18;
      }
      else {
        uint64_t v165 = v274 - v162;
      }
      unint64_t v166 = v164 - v165;
      if (v166 >= v166 - 1) {
        uint64_t v167 = v166 - 1;
      }
      else {
        uint64_t v167 = v166;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v163[v165], v167);
      unsigned int v27 = (void *)&unk_1E8EBA000;
      uint64_t v26 = v168;
      uint64_t v24 = v170;
      uint64_t v22 = v173;
      uint64_t v20 = v177;
      uint64_t v18 = v182;
      uint64_t v16 = v188;
      uint64_t v14 = v195;
      uint64_t v12 = v203;
      uint64_t v10 = v212;
      uint64_t v8 = v222;
      uint64_t v6 = v233;
      uint64_t v4 = v245;
      uint64_t v2 = v258;
      a1 = v272;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v24 == a1
      || v26 == a1
      || v27[173] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::arith::BitcastOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  return mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(a1, a2);
}

BOOL mlir::op_definition_impl::verifyTraits<mlir::OpTrait::ZeroRegions<mlir::memref::CastOp>,mlir::OpTrait::OneResult<mlir::memref::CastOp>,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl<mlir::memref::CastOp>,mlir::OpTrait::ZeroSuccessors<mlir::memref::CastOp>,mlir::OpTrait::OneOperand<mlir::memref::CastOp>,mlir::OpTrait::OpInvariants<mlir::memref::CastOp>,mlir::CastOpInterface::Trait<mlir::memref::CastOp>,mlir::OpAsmOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::MemRefsNormalizable<mlir::memref::CastOp>,mlir::ConditionallySpeculatable::Trait<mlir::memref::CastOp>,mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::memref::CastOp>,mlir::MemoryEffectOpInterface::Trait<mlir::memref::CastOp>,mlir::OpTrait::SameOperandsAndResultShape<mlir::memref::CastOp>,mlir::ViewLikeOpInterface::Trait<mlir::memref::CastOp>>(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (mlir::OpTrait::impl::verifyZeroRegions(a1, a2)
    && mlir::OpTrait::impl::verifyOneResult(a1, v3)
    && mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)
    && mlir::OpTrait::impl::verifyOneOperand(a1, v5)
    && (unint64_t v9 = a1, mlir::memref::CastOp::verifyInvariantsImpl((uint64_t **)&v9))
    && mlir::impl::verifyCastInterfaceOp(a1, v6))
  {
    return mlir::OpTrait::impl::verifySameOperandsAndResultShape(a1, v7) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t mlir::Op<mlir::memref::CastOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::BaseMemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::CastOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::OpTrait::MemRefsNormalizable,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::OpTrait::SameOperandsAndResultShape,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::Model(void *a1, uint64_t a2)
{
  v11[6] = *MEMORY[0x1E4F143B8];
  unint64_t v9 = v11;
  uint64_t v10 = 0x300000000;
  mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>((uint64_t)&v9);
  mlir::OperationName::Impl::Impl(a1, (uint64_t)"memref.collapse_shape", 21, a2, (uint64_t)&mlir::detail::TypeIDResolver<mlir::memref::CollapseShapeOp,void>::id, (uint64_t)&v9);
  uint64_t v4 = v9;
  if (v10)
  {
    uint64_t v5 = 16 * v10;
    uint64_t v6 = (void **)((char *)v9 + 8);
    do
    {
      uint64_t v7 = *v6;
      v6 += 2;
      free(v7);
      v5 -= 16;
    }
    while (v5);
    uint64_t v4 = v9;
  }
  if (v4 != v11) {
    free(v4);
  }
  *a1 = &unk_1EC9C2A58;
  return a1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::foldHook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v14 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
      + 2;
  BOOL v9 = (*(BOOL (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                            + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v13, a2, a3, a4, a5);
  char v10 = v14;
  if (v14 >= 8)
  {
    if ((v14 & 4) != 0)
    {
      if ((v14 & 2) != 0) {
        uint64_t v11 = v13;
      }
      else {
        uint64_t v11 = (llvm **)v13[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t, uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v11, v5, v6, v7, v8);
    }
    if ((v10 & 2) == 0) {
      llvm::deallocate_buffer(v13[0], v13[1]);
    }
  }
  return v9;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getCanonicalizationPatterns(uint64_t a1, void *a2, uint64_t a3)
{
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getParseAssemblyFn(void *a1@<X8>)
{
  *a1 = mlir::memref::CollapseShapeOp::parse;
  a1[3] = (char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
        + 2;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        char v10 = v11;
      }
      else {
        char v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getInherentAttr(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v8 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v8 = 0;
  }

  return mlir::memref::CollapseShapeOp::getInherentAttr(Context, v8, a3, a4);
}

void *mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a3;
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    uint64_t v5 = (void *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t AttrData = (void *)mlir::OpaqueAttr::getAttrData((mlir::OpaqueAttr *)&v9);
  return mlir::memref::CollapseShapeOp::setInherentAttr(v5, AttrData, v7, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::populateInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Context = mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    unint64_t v6 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    unint64_t v6 = 0;
  }

  mlir::memref::CollapseShapeOp::populateInherentAttrs(Context, v6, a3);
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::verifyInherentAttrs(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t), uint64_t a5)
{
  return mlir::memref::CollapseShapeOp::verifyInherentAttrs(a2, a3, a4, a5);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getOpPropertyByteSize()
{
  return 8;
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::initProperties(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a4) {
    *a3 = *a4;
  }
  else {
    *a3 = 0;
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  return mlir::memref::CollapseShapeOp::setPropertiesFromAttr(a3, a4, a5, a6);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::getPropertiesAsAttr(uint64_t a1, uint64_t a2)
{
  uint64_t Context = (mlir::DictionaryAttr *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
  if (HIBYTE(*(_DWORD *)(a2 + 44))) {
    char v4 = (uint64_t *)(a2 + 16 * (((unint64_t)*(unsigned int *)(a2 + 44) >> 23) & 1) + 64);
  }
  else {
    char v4 = 0;
  }

  return mlir::memref::CollapseShapeOp::getPropertiesAsAttr(Context, v4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::copyProperties(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::compareProperties(uint64_t a1, void *a2, void *a3)
{
  return *a3 == *a2;
}

unint64_t mlir::RegisteredOperationName::Model<mlir::memref::CollapseShapeOp>::hashProperties(uint64_t a1, unint64_t *a2)
{
  return mlir::arith::AddFOp::computePropertiesHash(a2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x10uLL);
  *uint64_t v2 = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::readProperties;
  v2[1] = mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2752), v2);
}

uint64_t mlir::detail::BytecodeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::writeProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  return mlir::arith::CmpFOp::writeProperties((uint64_t)&v4, a3);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(0x20uLL);
  *uint64_t v2 = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames;
  v2[1] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockArgumentNames;
  void v2[2] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmBlockNames;
  v2[3] = mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface]";
      unint64_t v14 = 72;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3760), v2);
}

uint64_t mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getAsmResultNames(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, const char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = a2;
  return mlir::memref::CollapseShapeOp::getAsmResultNames((uint64_t)&v5, a3, a4);
}

const char *mlir::detail::OpAsmOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getDefaultDialect()
{
  return "";
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable]";
      unint64_t v14 = 81;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 2784), v2);
}

uint64_t mlir::detail::ConditionallySpeculatableInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getSpeculatability()
{
  return 1;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getEffects(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  mlir::GenericProgramPoint::~GenericProgramPoint((mlir::GenericProgramPoint *)&v2);
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource;
  unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    unint64_t v12 = v2;
    unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface]";
      unint64_t v14 = 75;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, v3[435], v2);
}

uint64_t mlir::detail::ViewLikeOpInterfaceInterfaceTraits::Model<mlir::memref::CollapseShapeOp>::getViewSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  return mlir::anec::Convolution::getInput((mlir::anec::Convolution *)&v3);
}

BOOL llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = a2;
  mlir::memref::detail::CollapseShapeOpGenericAdaptorBase::CollapseShapeOpGenericAdaptorBase((uint64_t)v14, a2);
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  unint64_t v9 = mlir::memref::CollapseShapeOp::fold(&v13, (uint64_t)v14);
  unint64_t v10 = v9;
  if (v9 < 8 || a2 - 16 == (v9 & ((uint64_t)(v9 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)) {
    return v9 > 7;
  }
  uint64_t v11 = *(unsigned int *)(a5 + 8);
  if (v11 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, (void *)(a5 + 16), v11 + 1, 8);
    LODWORD(v11) = *(_DWORD *)(a5 + 8);
  }
  *(void *)(*(void *)a5 + 8 * v11) = v10;
  ++*(_DWORD *)(a5 + 8);
  return 1;
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v210 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v37 = v36;
    a1 = v210;
    if (v37)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v223 = 83;
      unint64_t v38 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v38) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = v223;
      }
      unsigned int v40 = &v222[v39];
      unint64_t v41 = v223 - v39;
      if (v223 - v39 >= 0x12) {
        uint64_t v42 = 18;
      }
      else {
        uint64_t v42 = v223 - v39;
      }
      unint64_t v43 = v41 - v42;
      if (v43 >= v43 - 1) {
        uint64_t v44 = v43 - 1;
      }
      else {
        uint64_t v44 = v43;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v40[v42], v44);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v210;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v199 = v2;
    uint64_t v211 = a1;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v46 = v45;
    uint64_t v2 = v199;
    a1 = v211;
    if (v46)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneResult<Empty>]";
      unint64_t v223 = 81;
      unint64_t v47 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v47) {
        unint64_t v48 = v47;
      }
      else {
        unint64_t v48 = v223;
      }
      unint64_t v49 = &v222[v48];
      unint64_t v50 = v223 - v48;
      if (v223 - v48 >= 0x12) {
        uint64_t v51 = 18;
      }
      else {
        uint64_t v51 = v223 - v48;
      }
      unint64_t v52 = v50 - v51;
      if (v52 >= v52 - 1) {
        uint64_t v53 = v52 - 1;
      }
      else {
        uint64_t v53 = v52;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneResult<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneResult>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v49[v51], v53);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v199;
      a1 = v211;
    }
  }
  uint64_t v4 = v3[27];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v200 = v2;
    uint64_t v212 = a1;
    uint64_t v189 = v4;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v189;
    uint64_t v2 = v200;
    int v55 = v54;
    a1 = v212;
    if (v55)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<Empty>]";
      unint64_t v223 = 110;
      unint64_t v56 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v56) {
        unint64_t v57 = v56;
      }
      else {
        unint64_t v57 = v223;
      }
      unint64_t v58 = &v222[v57];
      unint64_t v59 = v223 - v57;
      if (v223 - v57 >= 0x12) {
        uint64_t v60 = 18;
      }
      else {
        uint64_t v60 = v223 - v57;
      }
      unint64_t v61 = v59 - v60;
      if (v61 >= v61 - 1) {
        uint64_t v62 = v61 - 1;
      }
      else {
        uint64_t v62 = v61;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v58[v60], v62);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v189;
      uint64_t v2 = v200;
      a1 = v212;
    }
  }
  uint64_t v6 = v5[117];
  uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v201 = v2;
    uint64_t v213 = a1;
    uint64_t v190 = v4;
    uint64_t v180 = v6;
    uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v6 = v180;
    uint64_t v4 = v190;
    uint64_t v2 = v201;
    int v64 = v63;
    a1 = v213;
    if (v64)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v223 = 86;
      unint64_t v65 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v65) {
        unint64_t v66 = v65;
      }
      else {
        unint64_t v66 = v223;
      }
      unint64_t v67 = &v222[v66];
      unint64_t v68 = v223 - v66;
      if (v223 - v66 >= 0x12) {
        uint64_t v69 = 18;
      }
      else {
        uint64_t v69 = v223 - v66;
      }
      unint64_t v70 = v68 - v69;
      if (v70 >= v70 - 1) {
        uint64_t v71 = v70 - 1;
      }
      else {
        uint64_t v71 = v70;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v67[v69], v71);
      uint64_t v7 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v6 = v180;
      uint64_t v4 = v190;
      uint64_t v2 = v201;
      a1 = v213;
    }
  }
  uint64_t v8 = v7[12];
  unint64_t v9 = 0x1E8EB8000uLL;
  {
    uint64_t v202 = v2;
    uint64_t v214 = a1;
    uint64_t v191 = v4;
    uint64_t v172 = v8;
    uint64_t v181 = v6;
    unint64_t v9 = 0x1E8EB8000;
    uint64_t v8 = v172;
    uint64_t v6 = v181;
    uint64_t v4 = v191;
    uint64_t v2 = v202;
    int v73 = v72;
    a1 = v214;
    if (v73)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v223 = 82;
      unint64_t v74 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v74) {
        unint64_t v75 = v74;
      }
      else {
        unint64_t v75 = v223;
      }
      unint64_t v76 = &v222[v75];
      unint64_t v77 = v223 - v75;
      if (v223 - v75 >= 0x12) {
        uint64_t v78 = 18;
      }
      else {
        uint64_t v78 = v223 - v75;
      }
      unint64_t v79 = v77 - v78;
      if (v79 >= v79 - 1) {
        uint64_t v80 = v79 - 1;
      }
      else {
        uint64_t v80 = v79;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v76[v78], v80);
      unint64_t v9 = 0x1E8EB8000;
      uint64_t v8 = v172;
      uint64_t v6 = v181;
      uint64_t v4 = v191;
      uint64_t v2 = v202;
      a1 = v214;
    }
  }
  uint64_t v10 = *(void *)(v9 + 4080);
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v203 = v2;
    uint64_t v215 = a1;
    uint64_t v192 = v4;
    uint64_t v173 = v8;
    uint64_t v182 = v6;
    uint64_t v165 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v165;
    uint64_t v8 = v173;
    uint64_t v6 = v182;
    uint64_t v4 = v192;
    uint64_t v2 = v203;
    int v82 = v81;
    a1 = v215;
    if (v82)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v223 = 84;
      unint64_t v83 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v83) {
        unint64_t v84 = v83;
      }
      else {
        unint64_t v84 = v223;
      }
      unint64_t v85 = &v222[v84];
      unint64_t v86 = v223 - v84;
      if (v223 - v84 >= 0x12) {
        uint64_t v87 = 18;
      }
      else {
        uint64_t v87 = v223 - v84;
      }
      unint64_t v88 = v86 - v87;
      if (v88 >= v88 - 1) {
        uint64_t v89 = v88 - 1;
      }
      else {
        uint64_t v89 = v88;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v85[v87], v89);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v165;
      uint64_t v8 = v173;
      uint64_t v6 = v182;
      uint64_t v4 = v192;
      uint64_t v2 = v203;
      a1 = v215;
    }
  }
  uint64_t v12 = v11[9];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v204 = v2;
    uint64_t v216 = a1;
    uint64_t v193 = v4;
    uint64_t v174 = v8;
    uint64_t v183 = v6;
    uint64_t v159 = v12;
    uint64_t v166 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v159;
    uint64_t v10 = v166;
    uint64_t v8 = v174;
    uint64_t v6 = v183;
    uint64_t v4 = v193;
    uint64_t v2 = v204;
    int v91 = v90;
    a1 = v216;
    if (v91)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::BytecodeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v92 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v92) {
        unint64_t v93 = v92;
      }
      else {
        unint64_t v93 = v223;
      }
      unint64_t v94 = &v222[v93];
      unint64_t v95 = v223 - v93;
      if (v223 - v93 >= 0x12) {
        uint64_t v96 = 18;
      }
      else {
        uint64_t v96 = v223 - v93;
      }
      unint64_t v97 = v95 - v96;
      if (v97 >= v97 - 1) {
        uint64_t v98 = v97 - 1;
      }
      else {
        uint64_t v98 = v97;
      }
      mlir::detail::TypeIDResolver<mlir::BytecodeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::BytecodeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v94[v96], v98);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v159;
      uint64_t v10 = v166;
      uint64_t v8 = v174;
      uint64_t v6 = v183;
      uint64_t v4 = v193;
      uint64_t v2 = v204;
      a1 = v216;
    }
  }
  uint64_t v14 = *(void *)(v13 + 2744);
  unint64_t v15 = 0x1E8EB8000uLL;
  {
    uint64_t v205 = v2;
    uint64_t v217 = a1;
    uint64_t v194 = v4;
    uint64_t v175 = v8;
    uint64_t v184 = v6;
    uint64_t v160 = v12;
    uint64_t v167 = v10;
    uint64_t v154 = v14;
    unint64_t v15 = 0x1E8EB8000;
    uint64_t v14 = v154;
    uint64_t v12 = v160;
    uint64_t v10 = v167;
    uint64_t v8 = v175;
    uint64_t v6 = v184;
    uint64_t v4 = v194;
    uint64_t v2 = v205;
    int v100 = v99;
    a1 = v217;
    if (v100)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpAsmOpInterface::Trait<Empty>]";
      unint64_t v223 = 86;
      unint64_t v101 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v101) {
        unint64_t v102 = v101;
      }
      else {
        unint64_t v102 = v223;
      }
      unint64_t v103 = &v222[v102];
      unint64_t v104 = v223 - v102;
      if (v223 - v102 >= 0x12) {
        uint64_t v105 = 18;
      }
      else {
        uint64_t v105 = v223 - v102;
      }
      unint64_t v106 = v104 - v105;
      if (v106 >= v106 - 1) {
        uint64_t v107 = v106 - 1;
      }
      else {
        uint64_t v107 = v106;
      }
      mlir::detail::TypeIDResolver<mlir::OpAsmOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::OpAsmOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v103[v105], v107);
      unint64_t v15 = 0x1E8EB8000;
      uint64_t v14 = v154;
      uint64_t v12 = v160;
      uint64_t v10 = v167;
      uint64_t v8 = v175;
      uint64_t v6 = v184;
      uint64_t v4 = v194;
      uint64_t v2 = v205;
      a1 = v217;
    }
  }
  uint64_t v16 = *(void *)(v15 + 3752);
  unint64_t v17 = 0x1E8EB8000uLL;
  {
    uint64_t v206 = v2;
    uint64_t v218 = a1;
    uint64_t v195 = v4;
    uint64_t v176 = v8;
    uint64_t v185 = v6;
    uint64_t v161 = v12;
    uint64_t v168 = v10;
    uint64_t v150 = v16;
    uint64_t v155 = v14;
    unint64_t v17 = 0x1E8EB8000;
    uint64_t v16 = v150;
    uint64_t v14 = v155;
    uint64_t v12 = v161;
    uint64_t v10 = v168;
    uint64_t v8 = v176;
    uint64_t v6 = v185;
    uint64_t v4 = v195;
    uint64_t v2 = v206;
    int v109 = v108;
    a1 = v218;
    if (v109)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ConditionallySpeculatable::Trait<Empty>]";
      unint64_t v223 = 95;
      unint64_t v110 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v110) {
        unint64_t v111 = v110;
      }
      else {
        unint64_t v111 = v223;
      }
      unint64_t v112 = &v222[v111];
      unint64_t v113 = v223 - v111;
      if (v223 - v111 >= 0x12) {
        uint64_t v114 = 18;
      }
      else {
        uint64_t v114 = v223 - v111;
      }
      unint64_t v115 = v113 - v114;
      if (v115 >= v115 - 1) {
        uint64_t v116 = v115 - 1;
      }
      else {
        uint64_t v116 = v115;
      }
      mlir::detail::TypeIDResolver<mlir::ConditionallySpeculatable::Trait<mlir::TypeID mlir::TypeID::get<mlir::ConditionallySpeculatable::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v112[v114], v116);
      unint64_t v17 = 0x1E8EB8000;
      uint64_t v16 = v150;
      uint64_t v14 = v155;
      uint64_t v12 = v161;
      uint64_t v10 = v168;
      uint64_t v8 = v176;
      uint64_t v6 = v185;
      uint64_t v4 = v195;
      uint64_t v2 = v206;
      a1 = v218;
    }
  }
  uint64_t v18 = *(void *)(v17 + 2776);
  unint64_t v19 = 0x1E8EB8000uLL;
  {
    uint64_t v207 = v2;
    uint64_t v219 = a1;
    uint64_t v196 = v4;
    uint64_t v177 = v8;
    uint64_t v186 = v6;
    uint64_t v162 = v12;
    uint64_t v169 = v10;
    uint64_t v151 = v16;
    uint64_t v156 = v14;
    uint64_t v147 = v18;
    unint64_t v19 = 0x1E8EB8000;
    uint64_t v18 = v147;
    uint64_t v16 = v151;
    uint64_t v14 = v156;
    uint64_t v12 = v162;
    uint64_t v10 = v169;
    uint64_t v8 = v177;
    uint64_t v6 = v186;
    uint64_t v4 = v196;
    uint64_t v2 = v207;
    int v118 = v117;
    a1 = v219;
    if (v118)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::AlwaysSpeculatableImplTrait<Empty>]";
      unint64_t v223 = 99;
      unint64_t v119 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v119) {
        unint64_t v120 = v119;
      }
      else {
        unint64_t v120 = v223;
      }
      unint64_t v121 = &v222[v120];
      unint64_t v122 = v223 - v120;
      if (v223 - v120 >= 0x12) {
        uint64_t v123 = 18;
      }
      else {
        uint64_t v123 = v223 - v120;
      }
      unint64_t v124 = v122 - v123;
      if (v124 >= v124 - 1) {
        uint64_t v125 = v124 - 1;
      }
      else {
        uint64_t v125 = v124;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::AlwaysSpeculatableImplTrait<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AlwaysSpeculatableImplTrait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v121[v123], v125);
      unint64_t v19 = 0x1E8EB8000;
      uint64_t v18 = v147;
      uint64_t v16 = v151;
      uint64_t v14 = v156;
      uint64_t v12 = v162;
      uint64_t v10 = v169;
      uint64_t v8 = v177;
      uint64_t v6 = v186;
      uint64_t v4 = v196;
      uint64_t v2 = v207;
      a1 = v219;
    }
  }
  uint64_t v20 = *(void *)(v19 + 2912);
  unint64_t v21 = 0x1E8EB8000uLL;
  {
    uint64_t v208 = v2;
    uint64_t v220 = a1;
    uint64_t v197 = v4;
    uint64_t v178 = v8;
    uint64_t v187 = v6;
    uint64_t v163 = v12;
    uint64_t v170 = v10;
    uint64_t v152 = v16;
    uint64_t v157 = v14;
    uint64_t v145 = v20;
    uint64_t v148 = v18;
    unint64_t v21 = 0x1E8EB8000;
    uint64_t v20 = v145;
    uint64_t v18 = v148;
    uint64_t v16 = v152;
    uint64_t v14 = v157;
    uint64_t v12 = v163;
    uint64_t v10 = v170;
    uint64_t v8 = v178;
    uint64_t v6 = v187;
    uint64_t v4 = v197;
    uint64_t v2 = v208;
    int v127 = v126;
    a1 = v220;
    if (v127)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v223 = 93;
      unint64_t v128 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v128) {
        unint64_t v129 = v128;
      }
      else {
        unint64_t v129 = v223;
      }
      unint64_t v130 = &v222[v129];
      unint64_t v131 = v223 - v129;
      if (v223 - v129 >= 0x12) {
        uint64_t v132 = 18;
      }
      else {
        uint64_t v132 = v223 - v129;
      }
      unint64_t v133 = v131 - v132;
      if (v133 >= v133 - 1) {
        uint64_t v134 = v133 - 1;
      }
      else {
        uint64_t v134 = v133;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v130[v132], v134);
      unint64_t v21 = 0x1E8EB8000;
      uint64_t v20 = v145;
      uint64_t v18 = v148;
      uint64_t v16 = v152;
      uint64_t v14 = v157;
      uint64_t v12 = v163;
      uint64_t v10 = v170;
      uint64_t v8 = v178;
      uint64_t v6 = v187;
      uint64_t v4 = v197;
      uint64_t v2 = v208;
      a1 = v220;
    }
  }
  uint64_t v22 = *(void *)(v21 + 3904);
  unint64_t v23 = &unk_1E8EBA000;
  {
    uint64_t v209 = v2;
    uint64_t v221 = a1;
    uint64_t v198 = v4;
    uint64_t v179 = v8;
    uint64_t v188 = v6;
    uint64_t v164 = v12;
    uint64_t v171 = v10;
    uint64_t v153 = v16;
    uint64_t v158 = v14;
    uint64_t v146 = v20;
    uint64_t v149 = v18;
    uint64_t v144 = v22;
    unint64_t v23 = (void *)&unk_1E8EBA000;
    uint64_t v22 = v144;
    uint64_t v20 = v146;
    uint64_t v18 = v149;
    uint64_t v16 = v153;
    uint64_t v14 = v158;
    uint64_t v12 = v164;
    uint64_t v10 = v171;
    uint64_t v8 = v179;
    uint64_t v6 = v188;
    uint64_t v4 = v198;
    uint64_t v2 = v209;
    int v136 = v135;
    a1 = v221;
    if (v136)
    {
      uint64_t v222 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::ViewLikeOpInterface::Trait<Empty>]";
      unint64_t v223 = 89;
      unint64_t v137 = llvm::StringRef::find((uint64_t *)&v222, "DesiredTypeName = ", 0x12uLL, 0);
      if (v223 >= v137) {
        unint64_t v138 = v137;
      }
      else {
        unint64_t v138 = v223;
      }
      unint64_t v139 = &v222[v138];
      unint64_t v140 = v223 - v138;
      if (v223 - v138 >= 0x12) {
        uint64_t v141 = 18;
      }
      else {
        uint64_t v141 = v223 - v138;
      }
      unint64_t v142 = v140 - v141;
      if (v142 >= v142 - 1) {
        uint64_t v143 = v142 - 1;
      }
      else {
        uint64_t v143 = v142;
      }
      mlir::detail::TypeIDResolver<mlir::ViewLikeOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::ViewLikeOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v139[v141], v143);
      unint64_t v23 = (void *)&unk_1E8EBA000;
      uint64_t v22 = v144;
      uint64_t v20 = v146;
      uint64_t v18 = v149;
      uint64_t v16 = v153;
      uint64_t v14 = v158;
      uint64_t v12 = v164;
      uint64_t v10 = v171;
      uint64_t v8 = v179;
      uint64_t v6 = v188;
      uint64_t v4 = v198;
      uint64_t v2 = v209;
      a1 = v221;
    }
  }
  return v2 == a1
      || v4 == a1
      || v6 == a1
      || v8 == a1
      || v10 == a1
      || v12 == a1
      || v14 == a1
      || v16 == a1
      || v18 == a1
      || v20 == a1
      || v22 == a1
      || v23[173] == a1;
}

void llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallImpl<mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const>(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  mlir::OpState::printOpName((uint64_t)a2, (uint64_t)a3, a4, a5);
  uint64_t v7 = a2;
  mlir::memref::CollapseShapeOp::print(&v7, a3);
}

BOOL mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyInvariants(mlir::OpTrait::impl *a1, mlir::Operation *a2)
{
  if (!mlir::OpTrait::impl::verifyZeroRegions(a1, a2)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneResult(a1, v3)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyZeroSuccessors(a1, v4)) {
    return 0;
  }
  if (!mlir::OpTrait::impl::verifyOneOperand(a1, v5)) {
    return 0;
  }
  uint64_t v7 = a1;
  if (!mlir::memref::CollapseShapeOp::verifyInvariantsImpl((uint64_t **)&v7)) {
    return 0;
  }
  uint64_t v7 = a1;
  return mlir::memref::CollapseShapeOp::verify((uint64_t **)&v7) != 0;
}

uint64_t mlir::Op<mlir::memref::CollapseShapeOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::OneResult,mlir::OpTrait::OneTypedResult<mlir::MemRefType>::Impl,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::BytecodeOpInterface::Trait,mlir::OpAsmOpInterface::Trait,mlir::ConditionallySpeculatable::Trait,mlir::OpTrait::AlwaysSpeculatableImplTrait,mlir::MemoryEffectOpInterface::Trait,mlir::ViewLikeOpInterface::Trait>::verifyRegionInvariants()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(uint64_t a1)
{
  *(void *)a1 = &unk_1EC9AA560;
  uint64_t v2 = *(void ***)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = *(void ***)(a1 + 32);
  }
  if (v2 != (void **)(a1 + 48)) {
    free(v2);
  }
  return a1;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::~Model(void *__p)
{
  void *__p = &unk_1EC9AA560;
  uint64_t v2 = (void **)__p[4];
  uint64_t v3 = *((unsigned int *)__p + 10);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    unint64_t v5 = v2 + 1;
    do
    {
      uint64_t v6 = *v5;
      v5 += 2;
      free(v6);
      v4 -= 16;
    }
    while (v4);
    uint64_t v2 = (void **)__p[4];
  }
  if (v2 != __p + 6) {
    free(v2);
  }

  operator delete(__p);
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::foldHook(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
     + 2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, mlir::Operation *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const,void>::Callbacks
                                                                                + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2, a3, a4);
  char v5 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0) {
      (*(void (__cdecl **)())((v8 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v5 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v4;
}

BOOL mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hasTrait(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
     + 2;
  BOOL v3 = (*(BOOL (**)(uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const,void>::Callbacks
                                                 + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v7, a2);
  char v4 = v8;
  if (v8 >= 8)
  {
    if ((v8 & 4) != 0)
    {
      if ((v8 & 2) != 0) {
        char v5 = v7;
      }
      else {
        char v5 = (llvm **)v7[0];
      }
      (*(void (**)(uint64_t, uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 16))((uint64_t)v5, v2);
    }
    if ((v4 & 2) == 0) {
      llvm::deallocate_buffer(v7[0], v7[1]);
    }
  }
  return v3;
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getParseAssemblyFn(BOOL (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  *a1 = mlir::memref::DeallocOp::parse;
  a1[3] = (BOOL (*)(uint64_t, uint64_t))((char *)llvm::detail::UniqueFunctionBase<mlir::ParseResult,mlir::OpAsmParser &,mlir::OperationState &>::CallbacksHolder<mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),mlir::ParseResult (*)(mlir::OpAsmParser &,mlir::OperationState &),void>::Callbacks
                                                + 2);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::printAssembly(uint64_t a1, mlir::Operation *a2, mlir::OpAsmPrinter *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v12 = (unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
      + 2;
  (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<void,mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef>::CallbacksHolder<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1},mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getPrintAssemblyFn(void)::{lambda(mlir::Operation *,mlir::OpAsmPrinter &,llvm::StringRef)#1} const,void>::Callbacks
                                                                                              + 2) & 0xFFFFFFFFFFFFFFF8))((uint64_t)v11, a2, a3, a4, a5);
  char v9 = v12;
  if (v12 >= 8)
  {
    if ((v12 & 4) != 0)
    {
      if ((v12 & 2) != 0) {
        uint64_t v10 = v11;
      }
      else {
        uint64_t v10 = (llvm **)v11[0];
      }
      (*(void (**)(uint64_t, mlir::Operation *, mlir::OpAsmPrinter *, uint64_t, uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 16))((uint64_t)v10, v5, v6, v7, v8);
    }
    if ((v9 & 2) == 0) {
      llvm::deallocate_buffer(v11[0], v11[1]);
    }
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyRegionInvariants(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = (uint64_t (*)(uint64_t))mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::verifyRegionInvariants;
  unint64_t v6 = (unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
     + 2;
  uint64_t v2 = (*(uint64_t (**)(uint64_t (**)(uint64_t), uint64_t))(((unint64_t)llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *>::CallbacksHolder<mlir::LogicalResult (*)(mlir::Operation *),mlir::LogicalResult (* const)(mlir::Operation *),void>::Callbacks
                                                                             + 2) & 0xFFFFFFFFFFFFFFF8))(v5, a2);
  char v3 = v6;
  if (v6 >= 8)
  {
    if ((v6 & 4) != 0) {
      (*(void (__cdecl **)())((v6 & 0xFFFFFFFFFFFFFFF8) + 16))();
    }
    if ((v3 & 2) == 0) {
      llvm::deallocate_buffer((llvm *)v5[0], v5[1]);
    }
  }
  return v2;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getInherentAttr(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  return mlir::DictionaryAttr::get(a2 + 56, a3, a4);
}

void mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setInherentAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[9] = *MEMORY[0x1E4F143B8];
  mlir::NamedAttrList::NamedAttrList(v8, *(void *)(a2 + 56));
  if (mlir::NamedAttrList::set((uint64_t)v8, a3, a4) != a4)
  {
    uint64_t Context = (mlir::MLIRContext *)mlir::Attribute::getContext((mlir::Attribute *)(a2 + 24));
    *(void *)(a2 + 56) = mlir::NamedAttrList::getDictionary((mlir::NamedAttrList *)v8, Context);
  }
  if (v8[0] != v9) {
    free(v8[0]);
  }
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::verifyInherentAttrs()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getOpPropertyByteSize()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::setPropertiesFromAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  a5(v24, a6);
  if (v24[0])
  {
    int v21 = 3;
    uint64_t v22 = "this operation does not support properties";
    uint64_t v23 = 42;
    unint64_t v6 = &v21;
    uint64_t v7 = (char *)v25;
    if (v26 >= v27)
    {
      unint64_t v19 = v26 + 1;
      if (v25 <= &v21 && (char *)v25 + 24 * v26 > (char *)&v21)
      {
        int64_t v20 = (char *)&v21 - (unsigned char *)v25;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        uint64_t v7 = (char *)v25;
        unint64_t v6 = (int *)((char *)v25 + v20);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, v28, v19, 24);
        unint64_t v6 = &v21;
        uint64_t v7 = (char *)v25;
      }
    }
    uint64_t v8 = &v7[24 * v26];
    long long v9 = *(_OWORD *)v6;
    *((void *)v8 + 2) = *((void *)v6 + 2);
    *(_OWORD *)uint64_t v8 = v9;
    ++v26;
    if (v24[0]) {
      mlir::InFlightDiagnostic::report((mlir::InFlightDiagnostic *)v24);
    }
  }
  if (v33)
  {
    uint64_t v10 = (void **)__p;
    if (__p)
    {
      uint64_t v11 = v32;
      unint64_t v12 = __p;
      if (v32 != __p)
      {
        do
          uint64_t v11 = std::unique_ptr<mlir::Diagnostic>::~unique_ptr[abi:nn180100](v11 - 1);
        while (v11 != v10);
        unint64_t v12 = __p;
      }
      unint64_t v32 = v10;
      operator delete(v12);
    }
    uint64_t v13 = v29;
    if (v29)
    {
      uint64_t v14 = v30;
      unint64_t v15 = v29;
      if (v30 != v29)
      {
        do
        {
          unint64_t v17 = (void *)*--v14;
          uint64_t v16 = v17;
          *uint64_t v14 = 0;
          if (v17) {
            operator delete[](v16);
          }
        }
        while (v14 != v13);
        unint64_t v15 = v29;
      }
      int v30 = v13;
      operator delete(v15);
    }
    if (v25 != v28) {
      free(v25);
    }
  }
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::getPropertiesAsAttr()
{
  return 0;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::compareProperties()
{
  return 1;
}

uint64_t mlir::RegisteredOperationName::Model<mlir::memref::DeallocOp>::hashProperties()
{
  return 0;
}

void mlir::detail::InterfaceMap::insertModel<mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>>(uint64_t a1)
{
  uint64_t v2 = malloc(8uLL);
  *uint64_t v2 = mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects;
  unint64_t v3 = 0x1E8EB8000uLL;
  {
    unint64_t v12 = v2;
    unint64_t v3 = 0x1E8EB8000;
    uint64_t v2 = v12;
    if (v4)
    {
      uint64_t v13 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface]";
      unint64_t v14 = 79;
      unint64_t v5 = llvm::StringRef::find((uint64_t *)&v13, "DesiredTypeName = ", 0x12uLL, 0);
      if (v14 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = v14;
      }
      uint64_t v7 = &v13[v6];
      unint64_t v8 = v14 - v6;
      if (v14 - v6 >= 0x12) {
        uint64_t v9 = 18;
      }
      else {
        uint64_t v9 = v14 - v6;
      }
      unint64_t v10 = v8 - v9;
      if (v10 >= v10 - 1) {
        uint64_t v11 = v10 - 1;
      }
      else {
        uint64_t v11 = v10;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v7[v9], v11);
      unint64_t v3 = 0x1E8EB8000;
      uint64_t v2 = v12;
    }
  }
  mlir::detail::InterfaceMap::insert(a1, *(void *)(v3 + 3912), v2);
}

void mlir::detail::MemoryEffectOpInterfaceInterfaceTraits::Model<mlir::memref::DeallocOp>::getEffects(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  mlir::memref::DeallocOp::getEffects((uint64_t)&v3, a3);
}

uint64_t llvm::detail::UniqueFunctionBase<mlir::LogicalResult,mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getFoldHookFn(void)::{lambda(mlir::Operation *,llvm::ArrayRef<mlir::Attribute>,llvm::SmallVectorImpl<mlir::OpFoldResult> &)#1} const>(uint64_t a1, mlir::Operation *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2;
  mlir::memref::detail::DeallocOpGenericAdaptorBase::DeallocOpGenericAdaptorBase((uint64_t)v8, a2);
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  return mlir::memref::DeallocOp::fold((uint64_t *)&v7);
}

BOOL llvm::detail::UniqueFunctionBase<BOOL,mlir::TypeID>::CallImpl<mlir::Op<mlir::memref::DeallocOp,mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>::getHasTraitFn(void)::{lambda(mlir::TypeID)#1} const>(uint64_t a1, uint64_t a2)
{
  return mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(a2);
}

BOOL mlir::op_definition_impl::hasTrait<mlir::OpTrait::ZeroRegions,mlir::OpTrait::ZeroResults,mlir::OpTrait::ZeroSuccessors,mlir::OpTrait::OneOperand,mlir::OpTrait::OpInvariants,mlir::OpTrait::MemRefsNormalizable,mlir::MemoryEffectOpInterface::Trait>(uint64_t a1)
{
  uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v105 = a1;
    uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    int v22 = v21;
    a1 = v105;
    if (v22)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroRegions<Empty>]";
      unint64_t v113 = 83;
      unint64_t v23 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v23) {
        unint64_t v24 = v23;
      }
      else {
        unint64_t v24 = v113;
      }
      unint64_t v25 = &v112[v24];
      unint64_t v26 = v113 - v24;
      if (v113 - v24 >= 0x12) {
        uint64_t v27 = 18;
      }
      else {
        uint64_t v27 = v113 - v24;
      }
      unint64_t v28 = v26 - v27;
      if (v28 >= v28 - 1) {
        uint64_t v29 = v28 - 1;
      }
      else {
        uint64_t v29 = v28;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroRegions<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroRegions>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v25[v27], v29);
      uint64_t v1 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      a1 = v105;
    }
  }
  uint64_t v2 = v1[4];
  uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v106 = a1;
    uint64_t v99 = v2;
    uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v2 = v99;
    int v31 = v30;
    a1 = v106;
    if (v31)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroResults<Empty>]";
      unint64_t v113 = 83;
      unint64_t v32 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v32) {
        unint64_t v33 = v32;
      }
      else {
        unint64_t v33 = v113;
      }
      uint64_t v34 = &v112[v33];
      unint64_t v35 = v113 - v33;
      if (v113 - v33 >= 0x12) {
        uint64_t v36 = 18;
      }
      else {
        uint64_t v36 = v113 - v33;
      }
      unint64_t v37 = v35 - v36;
      if (v37 >= v37 - 1) {
        uint64_t v38 = v37 - 1;
      }
      else {
        uint64_t v38 = v37;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroResults<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroResults>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v34[v36], v38);
      uint64_t v3 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v2 = v99;
      a1 = v106;
    }
  }
  uint64_t v4 = v3[5];
  unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v107 = a1;
    uint64_t v94 = v4;
    uint64_t v100 = v2;
    unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v4 = v94;
    uint64_t v2 = v100;
    int v40 = v39;
    a1 = v107;
    if (v40)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::ZeroSuccessors<Empty>]";
      unint64_t v113 = 86;
      unint64_t v41 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v41) {
        unint64_t v42 = v41;
      }
      else {
        unint64_t v42 = v113;
      }
      unint64_t v43 = &v112[v42];
      unint64_t v44 = v113 - v42;
      if (v113 - v42 >= 0x12) {
        uint64_t v45 = 18;
      }
      else {
        uint64_t v45 = v113 - v42;
      }
      unint64_t v46 = v44 - v45;
      if (v46 >= v46 - 1) {
        uint64_t v47 = v46 - 1;
      }
      else {
        uint64_t v47 = v46;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::ZeroSuccessors<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::ZeroSuccessors>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v43[v45], v47);
      unint64_t v5 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v4 = v94;
      uint64_t v2 = v100;
      a1 = v107;
    }
  }
  uint64_t v6 = v5[12];
  unint64_t v7 = 0x1E8EB8000uLL;
  {
    uint64_t v108 = a1;
    uint64_t v95 = v4;
    uint64_t v101 = v2;
    uint64_t v90 = v6;
    unint64_t v7 = 0x1E8EB8000;
    uint64_t v6 = v90;
    uint64_t v4 = v95;
    uint64_t v2 = v101;
    int v49 = v48;
    a1 = v108;
    if (v49)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OneOperand<Empty>]";
      unint64_t v113 = 82;
      unint64_t v50 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = v113;
      }
      unint64_t v52 = &v112[v51];
      unint64_t v53 = v113 - v51;
      if (v113 - v51 >= 0x12) {
        uint64_t v54 = 18;
      }
      else {
        uint64_t v54 = v113 - v51;
      }
      unint64_t v55 = v53 - v54;
      if (v55 >= v55 - 1) {
        uint64_t v56 = v55 - 1;
      }
      else {
        uint64_t v56 = v55;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OneOperand<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OneOperand>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v52[v54], v56);
      unint64_t v7 = 0x1E8EB8000;
      uint64_t v6 = v90;
      uint64_t v4 = v95;
      uint64_t v2 = v101;
      a1 = v108;
    }
  }
  uint64_t v8 = *(void *)(v7 + 4080);
  uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v109 = a1;
    uint64_t v96 = v4;
    uint64_t v102 = v2;
    uint64_t v87 = v8;
    uint64_t v91 = v6;
    uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v8 = v87;
    uint64_t v6 = v91;
    uint64_t v4 = v96;
    uint64_t v2 = v102;
    int v58 = v57;
    a1 = v109;
    if (v58)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::OpInvariants<Empty>]";
      unint64_t v113 = 84;
      unint64_t v59 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v59) {
        unint64_t v60 = v59;
      }
      else {
        unint64_t v60 = v113;
      }
      unint64_t v61 = &v112[v60];
      unint64_t v62 = v113 - v60;
      if (v113 - v60 >= 0x12) {
        uint64_t v63 = 18;
      }
      else {
        uint64_t v63 = v113 - v60;
      }
      unint64_t v64 = v62 - v63;
      if (v64 >= v64 - 1) {
        uint64_t v65 = v64 - 1;
      }
      else {
        uint64_t v65 = v64;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::OpInvariants<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::OpInvariants>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v61[v63], v65);
      uint64_t v9 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v8 = v87;
      uint64_t v6 = v91;
      uint64_t v4 = v96;
      uint64_t v2 = v102;
      a1 = v109;
    }
  }
  uint64_t v10 = v9[9];
  uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
  {
    uint64_t v110 = a1;
    uint64_t v97 = v4;
    uint64_t v103 = v2;
    uint64_t v88 = v8;
    uint64_t v92 = v6;
    uint64_t v85 = v10;
    uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
    uint64_t v10 = v85;
    uint64_t v8 = v88;
    uint64_t v6 = v92;
    uint64_t v4 = v97;
    uint64_t v2 = v103;
    int v67 = v66;
    a1 = v110;
    if (v67)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::OpTrait::MemRefsNormalizable<Empty>]";
      unint64_t v113 = 91;
      unint64_t v68 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v68) {
        unint64_t v69 = v68;
      }
      else {
        unint64_t v69 = v113;
      }
      unint64_t v70 = &v112[v69];
      unint64_t v71 = v113 - v69;
      if (v113 - v69 >= 0x12) {
        uint64_t v72 = 18;
      }
      else {
        uint64_t v72 = v113 - v69;
      }
      unint64_t v73 = v71 - v72;
      if (v73 >= v73 - 1) {
        uint64_t v74 = v73 - 1;
      }
      else {
        uint64_t v74 = v73;
      }
      mlir::detail::TypeIDResolver<mlir::OpTrait::MemRefsNormalizable<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::MemRefsNormalizable>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v70[v72], v74);
      uint64_t v11 = &mlir::detail::TypeIDResolver<mlir::OpTrait::AffineScope<mlir::TypeID mlir::TypeID::get<mlir::OpTrait::AffineScope>(void)::Empty>,void>::resolveTypeID(void)::id;
      uint64_t v10 = v85;
      uint64_t v8 = v88;
      uint64_t v6 = v92;
      uint64_t v4 = v97;
      uint64_t v2 = v103;
      a1 = v110;
    }
  }
  uint64_t v12 = v11[18];
  unint64_t v13 = 0x1E8EB8000uLL;
  {
    uint64_t v111 = a1;
    uint64_t v98 = v4;
    uint64_t v104 = v2;
    uint64_t v89 = v8;
    uint64_t v93 = v6;
    uint64_t v84 = v12;
    uint64_t v86 = v10;
    unint64_t v13 = 0x1E8EB8000;
    uint64_t v12 = v84;
    uint64_t v10 = v86;
    uint64_t v8 = v89;
    uint64_t v6 = v93;
    uint64_t v4 = v98;
    uint64_t v2 = v104;
    int v76 = v75;
    a1 = v111;
    if (v76)
    {
      unint64_t v112 = "StringRef llvm::getTypeName() [DesiredTypeName = mlir::MemoryEffectOpInterface::Trait<Empty>]";
      unint64_t v113 = 93;
      unint64_t v77 = llvm::StringRef::find((uint64_t *)&v112, "DesiredTypeName = ", 0x12uLL, 0);
      if (v113 >= v77) {
        unint64_t v78 = v77;
      }
      else {
        unint64_t v78 = v113;
      }
      unint64_t v79 = &v112[v78];
      unint64_t v80 = v113 - v78;
      if (v113 - v78 >= 0x12) {
        uint64_t v81 = 18;
      }
      else {
        uint64_t v81 = v113 - v78;
      }
      unint64_t v82 = v80 - v81;
      if (v82 >= v82 - 1) {
        uint64_t v83 = v82 - 1;
      }
      else {
        uint64_t v83 = v82;
      }
      mlir::detail::TypeIDResolver<mlir::MemoryEffectOpInterface::Trait<mlir::TypeID mlir::TypeID::get<mlir::MemoryEffectOpInterface::Trait>(void)::Empty>,void>::resolveTypeID(void)::id = mlir::detail::FallbackTypeIDResolver::registerImplicitTypeID((uint64_t)&v79[v81], v83);
      unint64_t v13 = 0x1E8EB8000;
      uint64_t v12 = v84;
      uint64_t v10 = v86;
      uint64_t v8 = v89;
      uint64_t v6 = v93;
      uint64_t v4 = v98;
      uint64_t v2 = v104;
      a1 = v111;
    }
  }
  return v2 == a1 || v4 == a1 || v6 == a1 || v8 == a1 || v10 == a1 || v12 == a1 || *(void *)(v13 + 3904) == a1;
}